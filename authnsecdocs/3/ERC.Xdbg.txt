Directory structure:
└── andy53-erc.xdbg/
    ├── README.md
    ├── DllExport.bat
    ├── ErcXdbgPlugin.sln
    ├── LICENSE
    ├── ERC/
    │   ├── README.md
    │   ├── LICENSE
    │   ├── .gitignore
    │   ├── Documentation/
    │   │   ├── docfx.json
    │   │   ├── index.md
    │   │   ├── toc.yml
    │   │   ├── .gitignore
    │   │   ├── api/
    │   │   │   ├── index.md
    │   │   │   └── .gitignore
    │   │   └── articles/
    │   │       ├── LICENSE.md
    │   │       ├── intro.md
    │   │       └── toc.yml
    │   ├── ERC/
    │   │   ├── Convert.cs
    │   │   ├── Display_Output.cs
    │   │   ├── ERC.Net.csproj
    │   │   ├── ERC.Net.xml
    │   │   ├── ERCException.cs
    │   │   ├── ERC_Core.cs
    │   │   ├── FodyWeavers.xml
    │   │   ├── FodyWeavers.xsd
    │   │   ├── Heap_Info.cs
    │   │   ├── Module_Info.cs
    │   │   ├── Opcode_Assembler.cs
    │   │   ├── Opcode_Disassembler.cs
    │   │   ├── Pattern_Tools.cs
    │   │   ├── Payloads.cs
    │   │   ├── Process_Info.cs
    │   │   ├── PtrRemover.cs
    │   │   ├── RopChainGenerator32.cs
    │   │   ├── RopChainGenerator64.cs
    │   │   ├── Thread_Info.cs
    │   │   ├── Win32Errors.cs
    │   │   └── .gitignore
    │   └── docs/
    │       ├── index.html
    │       ├── manifest.json
    │       ├── search-stopwords.json
    │       ├── toc.html
    │       ├── xrefmap.yml
    │       ├── api/
    │       │   ├── ERC.DisplayOutput.html
    │       │   ├── ERC.ERCException.html
    │       │   ├── ERC.ErcCore.html
    │       │   ├── ERC.ErcResult-1.html
    │       │   ├── ERC.MachineType.html
    │       │   ├── ERC.ModuleInfo.html
    │       │   ├── ERC.ProcessInfo.html
    │       │   ├── ERC.Structures.AllocationProtect.html
    │       │   ├── ERC.Structures.CONTEXT32.html
    │       │   ├── ERC.Structures.CONTEXT64.html
    │       │   ├── ERC.Structures.CONTEXT_FLAGS.html
    │       │   ├── ERC.Structures.ClientID.html
    │       │   ├── ERC.Structures.FLOATING_SAVE_AREA.html
    │       │   ├── ERC.Structures.IMAGE_DATA_DIRECTORY.html
    │       │   ├── ERC.Structures.IMAGE_DOS_HEADER.html
    │       │   ├── ERC.Structures.IMAGE_FILE_HEADER.html
    │       │   ├── ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html
    │       │   ├── ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html
    │       │   ├── ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html
    │       │   ├── ERC.Structures.IMAGE_NT_HEADERS32.html
    │       │   ├── ERC.Structures.IMAGE_NT_HEADERS64.html
    │       │   ├── ERC.Structures.IMAGE_OPTIONAL_HEADER32.html
    │       │   ├── ERC.Structures.IMAGE_OPTIONAL_HEADER64.html
    │       │   ├── ERC.Structures.LIST_ENTRY.html
    │       │   ├── ERC.Structures.LOADED_IMAGE.html
    │       │   ├── ERC.Structures.LoadLibraryFlags.html
    │       │   ├── ERC.Structures.M128A.html
    │       │   ├── ERC.Structures.MEMORY_BASIC_INFORMATION32.html
    │       │   ├── ERC.Structures.MEMORY_BASIC_INFORMATION64.html
    │       │   ├── ERC.Structures.MagicType.html
    │       │   ├── ERC.Structures.ProcessAccessFlags.html
    │       │   ├── ERC.Structures.RegisterInfo.html
    │       │   ├── ERC.Structures.StateEnum.html
    │       │   ├── ERC.Structures.SubSystemType.html
    │       │   ├── ERC.Structures.TEB.html
    │       │   ├── ERC.Structures.ThreadAccess.html
    │       │   ├── ERC.Structures.ThreadBasicInformation.html
    │       │   ├── ERC.Structures.TypeEnum.html
    │       │   ├── ERC.Structures.XSAVE_FORMAT64.html
    │       │   ├── ERC.Structures.html
    │       │   ├── ERC.ThreadInfo.html
    │       │   ├── ERC.Utilities.Convert.html
    │       │   ├── ERC.Utilities.OpcodeAssembler.html
    │       │   ├── ERC.Utilities.OpcodeDisassembler.html
    │       │   ├── ERC.Utilities.PatternTools.html
    │       │   ├── ERC.Utilities.Payloads.html
    │       │   ├── ERC.Utilities.PtrRemover.html
    │       │   ├── ERC.Utilities.RopChainGenerator32.X86Lists.html
    │       │   ├── ERC.Utilities.RopChainGenerator32.html
    │       │   ├── ERC.Utilities.RopChainGenerator64.X64Lists.html
    │       │   ├── ERC.Utilities.RopChainGenerator64.html
    │       │   ├── ERC.Utilities.html
    │       │   ├── ERC.html
    │       │   ├── index.html
    │       │   └── toc.html
    │       ├── articles/
    │       │   ├── LICENSE.html
    │       │   ├── intro.html
    │       │   └── toc.html
    │       ├── fonts/
    │       │   ├── glyphicons-halflings-regular.eot
    │       │   ├── glyphicons-halflings-regular.ttf
    │       │   ├── glyphicons-halflings-regular.woff
    │       │   └── glyphicons-halflings-regular.woff2
    │       └── styles/
    │           ├── docfx.css
    │           ├── docfx.js
    │           ├── docfx.vendor.css
    │           ├── docfx.vendor.js
    │           ├── lunr.js
    │           ├── main.css
    │           ├── main.js
    │           └── search-worker.js
    ├── ERC.net/
    │   └── ERC/
    │       └── ERC.Net.xml
    ├── ErcXdbg/
    │   ├── AssemblyInfo.cs
    │   ├── ErcMain.cs
    │   ├── ErcXdbg.cs
    │   ├── ErcXdbgPlugin.csproj
    │   ├── FodyWeavers.xml
    │   ├── FodyWeavers.xsd
    │   ├── Globals.cs
    │   ├── RegisteredCommands.cs
    │   ├── app.config
    │   └── packages.config
    ├── Managed.x64dbg/
    │   ├── FodyWeavers.xml
    │   ├── FodyWeavers.xsd
    │   ├── Managed.x64dbg.csproj
    │   ├── app.config
    │   ├── packages.config
    │   ├── Properties/
    │   │   └── AssemblyInfo.cs
    │   ├── SDK/
    │   │   ├── Bridge.cs
    │   │   ├── Extensions.cs
    │   │   ├── PLog.cs
    │   │   ├── Plugins.cs
    │   │   ├── TitanEngine.cs
    │   │   └── WAPI.cs
    │   └── Script/
    │       └── Module.cs
    └── packages/
        ├── repositories.config
        └── .gitignore

================================================
File: README.md
================================================
<img src="Icon.png" align="right" alt="Image" height="80" width="80"/>

# ERC.Xdbg      
[![License](https://img.shields.io/github/license/Andy53/ERC.Xdbg)](license.txt)
[![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/Andy53/ERC.Xdbg?style=flat)](https://github.com/Andy53/ERC.Xdbg/tags)
[![GitHub issues](https://img.shields.io/github/issues-raw/Andy53/ERC.Xdbg?style=flat)](https://github.com/Andy53/ERC.Xdbg/issues)
<a href="https://github.com/Andy53/ERC.Xdbg/commits/master">
    <img src="https://img.shields.io/github/last-commit/Andy53/ERC.Xdbg?style=flat-square&logo=github&logoColor=white">
</a>

An X64dbg plugin built around the [ERC](https://github.com/Andy53/ERC.net) library designed to assist in the exploit development process.

## Installation
Installing the plugin is reasonably straight forward. Simply download the appropriate zip package for your architecture from the releases page of this repository and save then unzip it in the plugins directory of X64dbg. If X64dbg does not currently have a plugins directory then run it once to create the initial directory structure.

If you wish to build the plugin from source simply clone the Git repository, open the solution in Visual Studio and build the project targeted for your architecture of choice. Then copy the binaries into the plugins directory of your X64dbg installation.

It should be noted that if you are running Windows 7 you will need to ensure [.Net Framework 4.7.2](https://dotnet.microsoft.com/download/dotnet-framework/net472) is installed on your system or X64dbg will crash immediately on startup.     

## Documentation
This library contains the fundamental specifications, documentation, and architecture that underpin ERC.Xdbg. If you're looking to understand the system better, or want to know how to integrate the various components, there is a lot of valuable information contained here.    

[📄 Documentation and Specifications](https://andy53.github.io/ERC.net/)    

## API     
ERC.Net is the API used to develop ERC.Xdbg, all of the functionality in this plugin stems from the API. ERC.Net is a collection of tools designed to assist in debugging Windows application crashes.  
        
[📁 Source](https://github.com/Andy53/ERC.net) - https://github.com/Andy53/ERC.net     
[📦 32 bit Package - ERC.Net-x86.SDK](https://www.nuget.org/packages/ERC.Net-x86/)    
[📦 64 bit Package - ERC.Net-x64.SDK](https://www.nuget.org/packages/ERC.Net-x64/)   

## Articles    
A list of articles covering common usage scenarios using ERC.Xdbg.
    
[📄 The Basics of Exploit Development 1: Win32 Buffer Overflows](https://evilrobots.club/basics-of-exploit-development-1)     
[📄 The Basics of Exploit Development 2: SEH Overflows](https://evilrobots.club/basics-of-exploit-development-2)     
[📄 The Basics of Exploit Development 3: Egg Hunters](https://evilrobots.club/basics-of-exploit-development-3)   
[📄 The Basics of Exploit Development 4: Unicode Overflows](https://evilrobots.club/basics-of-exploit-development-4)       
[📄 The Basics of Exploit Development 5: x86-64 Buffer Overflows](https://evilrobots.club/basics-of-exploit-development-5)     

## Globals
Global variables are variables which are set and stored for one session. They are reset to the defaults each time X64dbg is restarted.     

`-ASLR`   
Used to exclude pointers from modules implementing ASLR in search output. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -ASLR` Remove pointers from ASLR enabled modules from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -ASLR false` Include pointers from ASLR enabled modules in all search results.    

`-SafeSEH`   
Used to exclude pointers from modules implementing SafeSEH in search output. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -SafeSEH` Remove pointers from SafeSEH enabled modules from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -SafeSEH false` Include pointers from SafeSEH enabled modules in all search results.    

`-Rebase`    
Used to exclude pointers from modules implementing Rebase in search output. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Rebase` Remove pointers from Rebase enabled modules from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Rebase false` Include pointers from Rebase enabled modules in all search results.    

`-NXCompat`    
Used to exclude pointers from modules implementing NXCompat in search output. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -NXCompat` Remove pointers from NXCompat enabled modules from all search results.   
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -NXCompat false` Include pointers from NXCompat enabled modules in all search results.    

`-OSdll`    
Used to exclude pointers from modules that are OSdll's in search output. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -OSdll` Remove pointers from OSdll's from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -OSdll false` Include pointers from OSdll's in all search results.    

`-Bytes`    
Used to exploit pointers containing specific bytes from all search results and from being added to bytearrays generated by the plugin. Can be disabled by passing switch with no arguments. Bytes must be passed without spaces.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Bytes 0x0A0x0D` Remove pointers containing bytes 0A or 0D from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Bytes 740D` Remove pointers containing bytes 74 or 0D from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Bytes` Remove any previous byte restrictions from all further search results.    

`-Protection`
Used to specify the protection value of all pointers returned in search results. Generic values of `read`, `write` and `exec` are used to specify which the returned pointers should have and can be used in combination. Options must be separated with commas and no spaces.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Protection exec` Remove pointers that do not have exec permission from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Protection read,exec` Remove pointers that do not have read and exec permission from all search results.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Protection all` Remove any previous protection restrictions from all further search results.       
     
`-Extended`     
Used to specify that the extended character set should be used when using FindNRP and Pattern create and offset functionality. Can be reset by supplying `false` as a parameter.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Extended` Replaces the standard character set with the extended character set.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Extended false` Resets to the standard characters set.    
    
`-ASCII`
Sets the character encoding as ASCII. All search functions will seach for text in ASCII.   
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -ASCII` Changes the default characters encoding to ASCII.     
     
`-Unicode`
Sets the character encoding as Unicode. All search functions will seach for text in Unicode.   
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -Unicode` Changes the default characters encoding to Unicode.     
    
`-UTF7`
Sets the character encoding as UTF-7. All search functions will seach for text in UTF-7.          
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -UTF7` Changes the default characters encoding to UTF-7.          
    
`-UTF8`
Sets the character encoding as UTF-8. All search functions will seach for text in UTF-8.   
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -UTF8` Changes the default characters encoding to UTF-8.     

`-UTF32`
Sets the character encoding as UTF-32. All search functions will seach for text in UTF-32.          
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help -UTF32` Changes the default characters encoding to UTF-32.     
    
## Usage
Instructions on usage of the plugin can be seen below. This can also be accessed directly through the debugger using `ERC --help`. 

Details on each command can be seen below. Commands are not case sensitive.

`--Help`       
Displays the help message below.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: `ERC --help`    

`--Update`
Downloads the latest release of the plugin from Github and extracts it into the X64Dbg plugin directory for the architecture currently in use. Can be passed a ip:port pair in order to specify a proxy.     
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --update`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --update 127.0.0.1:8080`

`--config`    
The config option can be used to set values in the config.xml file. These options persist between sessions. Can be used to set things such as the project author, current working directory and error log file. These options are predominantly used when writing the output of operations to file.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --config SetWorkingDirectory C:\Users\You\Desktop`   
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --config GetErrorFilePath`

`--Pattern`   
The pattern option can be used to either create a pattern or to identify the location of a string within a pattern. Appending a c and then a number will create a pattern, appending a o and then a string of 3 or more characters will locate the string within the pattern. The plugin will attempt to automatically identify if the extended character set should be used however you can force it's use by adding "extended" to the command.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --pattern c 1000`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --pattern o Aa9`   
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --pattern o Aa9 extended`   

`--ByteArray`    
The ByteArray option allows the generation of a byte array which is displayed in the log and written to the working directory as both a text file and a binary file containing only the binary values the user wants. By default the array will contain all values from 0x00 to 0xFF and values can be omitted by passing them to the -bytes global variable.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --bytearray`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --bytearray -bytes 0xFF0x0A \x0b 0C`   

`--Compare`    
Generates a table with a byte by byte comparison of an area of memory and the bytes from a file. Takes a memory address from which to start the search and a file path for the binary file.
&nbsp;&nbsp;&nbsp;&nbsp;    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --Compare 0x12345678 C:\Users\You\Desktop\YourBinaryFile.bin`  

`--Convert`    
Takes a string and converts it to a hex representation. The string can be converted as if it was ASCII, Unicode, UTF-7, UTF-8 or UTF-32. 
&nbsp;&nbsp;&nbsp;&nbsp;Valid conversion types:     
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ascii to Hex = AtoH    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unicode to Hex = UtoH    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTF-7 to Hex = 7toH    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTF-8 to Hex = 8toH    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTF-32 to Hex = 32toH    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --Convert AtoH HelloWorld` returns the ASCII bytes for HelloWorld.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --convert UtoH HelloWorld` returns the Unicode bytes for HelloWorld.

`--Assemble`    
The assemble option can be used to convert assembly instructions into the associated opcodes. The plugin will attempt to identify the architecture required based on the attached process however a 0 can be passed to force 32 bit and a 1 can be passed to force 64 bit. Instructions must be separated with a comma (,).   
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --Assemble jmp esp`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --assemble 1 jmp rsp, nop, nop`   

`--Disassemble`    
The disassemble option can be used to convert opcodes into assembly instructions. The plugin will attempt to identify the architecture required based on the attached process however a 0 can be passed to force 32 bit and a 1 can be passed to force 64 bit.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --disAssemble FF E4`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --disassemble 0 FF E4`   

`--SearchMemory`    
Search memory can take a string or set of bytes to search for within the attached process memory and loaded modules. Optionally an integer can be passed to specify the search type (0 = bytes, 1 = Unicode, 2 = ASCII, 4 = UTF7, 5 = UTF8). Modules can be excluded based on certain characteristics (Is ASLR/SafeSEH/Is the binary rebasable/NXCompat(DEP)/Is the binary an OS dll) The values are optional however if you wish to exclude a later value all previous ones must be included.
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --SearchMemory FF E4` Search for bytes FF E4 include all dlls.  
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --SearchMemory FF E4 false false false false true` Search for bytes FF E4 excluding only OS dlls.         
&nbsp;&nbsp;&nbsp;&nbsp;Example 3: `ERC --SearchMemory 1 HelloWorld` Search for the ASCII string HelloWorld.

`--SearchModules`    
Search modules can take a string or set of bytes to search for within the processes loaded modules. Optionally an integer can be passed to specify the search type (0 = bytes, 1 = Unicode, 2 = ASCII, 4 = UTF7, 5 = UTF8). Modules can be excluded based on certain characteristics (Is ASLR/SafeSEH/Is the binary rebasable/NXCompat(DEP)/Is the binary an OS dll) The values are optional however if you wish to exclude a later value all previous ones must be included. Furthermore the search can be limited to certain modules by passing their name or path as arguments.    
&nbsp;&nbsp;&nbsp;&nbsp;Example: ERC --SearchModules FF E4. Search for bytes FF E4 including all dll's    
&nbsp;&nbsp;&nbsp;&nbsp;Example: ERC --SearchModules FF E4 module1.dll module2.dll. Search for bytes FF E4 only in module1.dll and module2.dll    

`--Dump`    
Dumps the contents of process memory to the log and a file in the working directory. Takes a hex start address and a hex number for number of bytes to be read.      
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --Dump 0x63428401 0x30`

`--ListProcesses`    
The list processes option takes no parameters and simply lists all visible processes on the machine.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --ListProcesses`   

`--ProcessInfo`    
Displays information about the attached process, loaded modules and threads. Can be passed a boolean to indicate if the output should be written to disk.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --processInfo`       
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --processinfo false` Does not write processinfo output to disk.    

`--ModuleInfo`    
Displays info about the modules loaded by the attached process. Can be passed a boolean to indicate if the output should be written to disk.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --moduleInfo`     
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --moduleinfo false` Does not write moduleinfo output to disk.   

`--ThreadInfo`    
Displays info about threads associated with the attached process. Can be passed a boolean to indicate if the output should be written to disk.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --threadInfo`    
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --threadinfo false` Does not write threadinfo output to disk.

`--HeapInfo`     
Displays information about the heap. Takes commands search, stats, ids, and dump. Takes an integer to represent the ID of the heap to utilize. Takes a hex value to specify the address of the heap entry to utilize.
If both heap ID and start address are specified heap ID takes precedence, if start address and a byte pattern to search for are specified start address must be provided first. Takes a boolean value of `true/false/1/0`
to specify if output should be written to disk.     
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --HeapInfo stats` Display statistics about all heaps associated with the process.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --HeapInfo 0x00453563 search FFE4` Search for FFE4 in the Heap entry starting at 0x00453563    
&nbsp;&nbsp;&nbsp;&nbsp;Example 3: `ERC --HeapInfo 0x00453563 dump` Dump all memory from heap entry starting at 0x00453563      
&nbsp;&nbsp;&nbsp;&nbsp;Example 4: `ERC --HeapInfo 0x00453563 dump stats` Dump all memory from heap entry starting at 0x00453563 and display stats for the heap entry starting at 0x00453563       

`--SEH`   
Displays a list of addresses for pop pop ret instructions. Can be passed a list of module paths to be ignored in the search.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --seh`    
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --SEH C:\Path\To\Module\To\Exclude C:\Path\To\Other\Module\To\Exclude`

`--EggHunters`    
Prints a list of egghunters which can be used for various machine types. Can be passed 4 character string to be used as the egghunter search tag. Default tag is ERCD.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --egghunters`    
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --egghunters ABCD` Egghunters will be generated with the tag "ABCD"    

`--FindNRP`    
Searches process memory for a non repeating pattern specified in the pattern_extended and pattern_standard files. Takes an integer optional to specify the text formatting (1 = Unicode, 2 = ASCII, 3 = UTF8, 4 = UTF7, 5 = UTF32, default = ASCII) and can have the parameter "true" passed to indicate the extended pattern should be used.     
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --FindNRP`        
&nbsp;&nbsp;&nbsp;&nbsp;Example 2: `ERC --FindNRP 2 true` Generates FindNRP table after searching for the extended NRP in Unicode format.     
    
`--Rop`    
Attempts to build a ROP chain for the current process. Current implementation utilizes VirtualAlloc, VirtualProtect and HeapCreate.   
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --Rop`          
     
`--RopGadgets`    
Generates lists of ROP gadgets from within the current process. Lists are saved to the working directory.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --RopGadgets`        
    
`--Reset`   
Returns the plugin to a default status. Resets all client variables and configurations.    
&nbsp;&nbsp;&nbsp;&nbsp;Example 1: `ERC --reset`    



## Contributors
[Andy Bowden](mailto:andy@evilrobots.club)         
[Josh Brown](https://github.com/ropwareJB)





================================================
File: DllExport.bat
================================================
@echo off
:: Copyright (c) 2016-2021  Denis Kuzmin [x-3F@outlook.com] github/3F
:: https://github.com/3F/DllExport
if "%~1"=="/?" goto bq
set "aa=%~dpnx0"
set ab=%*
set ac=%*
if defined ab (
if defined __p_call (
set ac=%ac:^^=^%
) else (
set ab=%ab:^=^^%
)
)
set wMgrArgs=%ac%
set ad=%ab:!=^!%
setlocal enableDelayedExpansion
set "ae=^"
set "ad=!ad:%%=%%%%!"
set "ad=!ad:&=%%ae%%&!"
set "af=1.7.4"
set "wAction=Configure"
set "ag=DllExport"
set "ah=tools/net.r_eg.DllExport.Wizard.targets"
set "ai=packages"
set "aj=https://www.nuget.org/api/v2/package/"
set "ak=build_info.txt"
set "al=!aa!"
set "wRootPath=!cd!"
set /a wDxpOpt=0
set "am="
set "an="
set "ao="
set "ap="
set "aq="
set "ar="
set "as="
set "at="
set "au="
set "av="
set /a aw=0
if not defined ab (
if defined wAction goto br
goto bq
)
call :bs bk !ad! bl
goto bt
:bq
echo.
@echo .NET DllExport v1.7.4.29858+c1cc52f
@echo Copyright (c) 2009-2015  Robert Giesecke
@echo Copyright (c) 2016-2021  Denis Kuzmin ^<x-3F@outlook.com^> github/3F
echo.
echo MIT License
@echo https://github.com/3F/DllExport
echo Based on hMSBuild, MvsSln, +GetNuTool: https://github.com/3F
echo.
@echo.
@echo Usage: DllExport [args to DllExport] [args to GetNuTool] [args to hMSBuild]
echo ------
echo.
echo Arguments
echo ---------
echo -action {type} - Specified action for Wizard. Where {type}:
echo   * Configure - To configure DllExport for specific projects.
echo   * Update    - To update pkg reference for already configured projects.
echo   * Restore   - To restore configured DllExport.
echo   * Export    - To export configured projects data.
echo   * Recover   - To re-configure projects via predefined/exported data.
echo   * Unset     - To unset all data from specified projects.
echo   * Upgrade   - Aggregates an Update action with additions for upgrading.
echo.
echo -sln-dir {path}    - Path to directory with .sln files to be processed.
echo -sln-file {path}   - Optional predefined .sln file to be processed.
echo -metalib {path}    - Relative path to meta library.
echo -metacor {path}    - Relative path to meta core library.
echo -dxp-target {path} - Relative path to entrypoint wrapper of the main core.
echo -dxp-version {num} - Specific version of DllExport. Where {num}:
echo   * Versions: 1.7.3 ...
echo   * Keywords:
echo     `actual` - Unspecified local/latest remote version;
echo                ( Only if you know what you are doing )
echo.
echo -msb {path}           - Full path to specific msbuild.
echo -hMSBuild {args}      - Access to hMSBuild tool (packed) https://github.com/3F/hMSBuild
echo -packages {path}      - A common directory for packages.
echo -server {url}         - Url for searching remote packages.
echo -proxy {cfg}          - To use proxy. The format: [usr[:pwd]@]host[:port]
echo -pkg-link {uri}       - Direct link to package from the source via specified URI.
echo -force                - Aggressive behavior, e.g. like removing pkg when updating.
echo -no-mgr               - Do not use %~nx0 for automatic restore the remote package.
echo -mgr-up               - Updates %~nx0 to version from '-dxp-version'.
echo -wz-target {path}     - Relative path to entrypoint wrapper of the main wizard.
echo -pe-exp-list {module} - To list all available exports from PE32/PE32+ module.
echo -eng                  - Try to use english language for all build messages.
echo -GetNuTool {args}     - Access to GetNuTool (integrated) https://github.com/3F/GetNuTool
echo -debug                - To show additional information.
echo -version              - Displays version for which (together with) it was compiled.
echo -build-info           - Displays actual build information from selected DllExport.
echo -help                 - Displays this help. Aliases: -help -h
echo.
echo Flags
echo -----
echo  __p_call - To use the call-type logic when invoking %~nx0
echo.
echo Samples
echo -------
echo DllExport -action Configure -force -pkg-link http://host/v1.7.3.nupkg
echo DllExport -action Restore -sln-file "Conari.sln"
echo DllExport -proxy guest:1234@10.0.2.15:7428 -action Configure
echo.
echo DllExport -mgr-up -dxp-version 1.7.3
echo DllExport -action Upgrade -dxp-version 1.7.3
echo.
echo DllExport -GetNuTool /p:ngpackages="Conari;regXwild"
echo DllExport -pe-exp-list bin\Debug\regXwild.dll
goto bu
:bt
set /a ax=0
:bv
set ay=!bk[%ax%]!
if [!ay!]==[-help] ( goto bq ) else if [!ay!]==[-h] ( goto bq ) else if [!ay!]==[-?] ( goto bq )
if [!ay!]==[-debug] (
set am=1
goto bw
) else if [!ay!]==[-action] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wAction=!v!
for %%g in (Restore, Configure, Update, Export, Recover, Unset, Upgrade, Default) do (
if "!v!"=="%%g" goto bw
)
echo Unknown -action !v!
exit/B 1
) else if [!ay!]==[-sln-dir] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wSlnDir=!v!
goto bw
) else if [!ay!]==[-sln-file] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wSlnFile=!v!
goto bw
) else if [!ay!]==[-metalib] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wMetaLib=!v!
goto bw
) else if [!ay!]==[-metacor] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wMetaCor=!v!
goto bw
) else if [!ay!]==[-dxp-target] ( set /a "ax+=1" & call :bx bk[!ax!] v
set wDxpTarget=!v!
goto bw
) else if [!ay!]==[-dxp-version] ( set /a "ax+=1" & call :bx bk[!ax!] v
set af=!v!
goto bw
) else if [!ay!]==[-msb] ( set /a "ax+=1" & call :bx bk[!ax!] v
set ao=!v!
goto bw
) else if [!ay!]==[-packages] ( set /a "ax+=1" & call :bx bk[!ax!] v
set ai=!v!
goto bw
) else if [!ay!]==[-server] ( set /a "ax+=1" & call :bx bk[!ax!] v
set aj=!v!
goto bw
) else if [!ay!]==[-proxy] ( set /a "ax+=1" & call :bx bk[!ax!] v
set at=!v!
set wProxy=!v!
goto bw
) else if [!ay!]==[-pkg-link] ( set /a "ax+=1" & call :bx bk[!ax!] v
set ap=!v!
set af=!ay!
goto bw
) else if [!ay!]==[-force] (
set ar=1
goto bw
) else if [!ay!]==[-no-mgr] (
set /a wDxpOpt^|=1
goto bw
) else if [!ay!]==[-mgr-up] (
set as=1
goto bw
) else if [!ay!]==[-wz-target] ( set /a "ax+=1" & call :bx bk[!ax!] v
set ah=!v!
goto bw
) else if [!ay!]==[-pe-exp-list] ( set /a "ax+=1" & call :bx bk[!ax!] v
set aq=!v!
goto bw
) else if [!ay!]==[-eng] (
chcp 437 >nul
goto bw
) else if [!ay!]==[-GetNuTool] (
call :by -GetNuTool 10
set /a aw=!ERRORLEVEL! & goto bu
) else if [!ay!]==[-hMSBuild] (
set av=1 & goto br
) else if [!ay!]==[-version] (
@echo v1.7.4.29858+c1cc52f  %__dxp_pv%
goto bu
) else if [!ay!]==[-build-info] (
set an=1
goto bw
) else if [!ay!]==[-tests] ( set /a "ax+=1" & call :bx bk[!ax!] v
set au=!v!
goto bw
) else (
echo Incorrect key: !ay!
set /a aw=1
goto bu
)
:bw
set /a "ax+=1" & if %ax% LSS !bl! goto bv
:br
call :bz "dxpName = " ag
call :bz "dxpVersion = " af
call :bz "-sln-dir = " wSlnDir
call :bz "-sln-file = " wSlnFile
call :bz "-metalib = " wMetaLib
call :bz "-metacor = " wMetaCor
call :bz "-dxp-target = " wDxpTarget
call :bz "-wz-target = " ah
call :bz "#opt " wDxpOpt
if defined af (
if "!af!"=="actual" (
set "af="
)
)
set wPkgVer=!af!
if z%wAction%==zUpgrade (
call :bz "Upgrade is on"
set as=1
set ar=1
)
call :b0 ai
set "ai=!ai!\\"
set "az=!ag!"
set "wPkgPath=!ai!!ag!"
if defined af (
set "az=!az!/!af!"
set "wPkgPath=!wPkgPath!.!af!"
)
if defined ar (
if exist "!wPkgPath!" (
call :bz "Removing old version before continue. '-force' key rule. " wPkgPath
rmdir /S/Q "!wPkgPath!"
)
)
set a0="!wPkgPath!\\!ah!"
call :bz "wPkgPath = " wPkgPath
if not exist !a0! (
if exist "!wPkgPath!" (
call :bz "Trying to replace obsolete version ... " wPkgPath
rmdir /S/Q "!wPkgPath!"
)
call :bz "-pkg-link = " ap
call :bz "-server = " aj
if defined ap (
set aj=!ap!
if "!aj::=!"=="!aj!" (
set aj=!cd!/!aj!
)
if "!wPkgPath::=!"=="!wPkgPath!" (
set "a1=../"
)
set "az=:!a1!!wPkgPath!|"
)
if defined ao (
set a2=-msbuild "!ao!"
)
set a3=!a2! /p:ngserver="!aj!" /p:ngpackages="!az!" /p:ngpath="!ai!" /p:proxycfg="!at! "
call :bz "GetNuTool call: " a3
if defined am (
call :b1 !a3!
) else (
call :b1 !a3! >nul
)
)
if defined av (
call :by -hMSBuild 9
set /a aw=!ERRORLEVEL! & goto bu
)
if defined aq (
"!wPkgPath!\\tools\\PeViewer.exe" -list -pemodule "!aq!"
set /a aw=%ERRORLEVEL%
goto bu
)
if defined an (
call :bz "buildInfo = " wPkgPath ak
if not exist "!wPkgPath!\\!ak!" (
echo information about build is not available.
set /a aw=2
goto bu
)
type "!wPkgPath!\\!ak!"
goto bu
)
if not exist !a0! (
echo Something went wrong. Try to use another keys.
set /a aw=2
goto bu
)
call :bz "wRootPath = " wRootPath
call :bz "wAction = " wAction
call :bz "wMgrArgs = " wMgrArgs
if defined ao (
call :bz "Use specific MSBuild tools: " ao
set a4="!ao!"
goto b2
)
call :b3 bm & set a4="!bm!"
if "!ERRORLEVEL!"=="0" goto b2
echo MSBuild tools was not found. Try with `-msb` key.
set /a aw=2
goto bu
:b2
if not defined a4 (
echo Something went wrong. Use `-debug` key for details.
set /a aw=2
goto bu
)
if not defined au (
if not defined ao if defined wPkgPath (
set a4="!wPkgPath!\\hMSBuild"
for /f "tokens=*" %%i in ('!a4! -version') do set a5=%%i
call :b4 !a5! bn
call :bz "hMSBuild -v" a5 bn
if !bn! GEQ 230 (
call :bz "2.3+"
set a4=!a4! -vsw-as "-requiresAny -requires Microsoft.NetCore.Component.SDK Microsoft.Net.Core.Component.SDK -products * -latest -prerelease"
)
)
call :bz "Target: " a4 a0
call !a4! /nologo /v:m /m:4 !a0!
)
:bu
if defined au (
echo Running Tests ... "!au!"
call :b3 bo
"!bo!" /nologo /v:m /m:4 "!au!"
exit/B 0
)
if defined as (
(copy /B/Y "!wPkgPath!\\DllExport.bat" "!al!" > nul) && ( echo Manager has been updated. & exit/B 0 ) || ( (echo -mgr-up failed:!aw! 1>&2) & exit/B 1 )
)
exit/B !aw!
:b4
set a6=%~1
for /f "tokens=1,2 delims=." %%a in ("!a6!") do (
set _=%%b & set /a _*=10 & set /a %2=%%a!_!
)
exit/B 0
:by
set ay=%~1
set /a a7=%~2
call :bz "accessing to !ay! ..."
for /L %%p IN (0,1,8181) DO (
if "!ad:~%%p,%a7%!"=="!ay!" (
set a8=!ad:~%%p!
set a9=!a8:~%a7%!
if defined av (
call "!wPkgPath!\\hMSBuild" !a9!
) else (
call :b1 !a9!
)
exit/B !ERRORLEVEL!
)
)
call :bz "!ay! is corrupted: " ad
exit/B 1
:b3
call :bz "Searching from .NET Framework - .NET 4.0, ..."
for %%v in (4.0, 3.5, 2.0) do (
call :b5 %%v Y & if defined Y (
set %1=!Y!
exit/B 0
)
)
call :bz "msb -netfx: not found"
set "%1="
exit/B 2
:b5
call :bz "check %1"
for /F "usebackq tokens=2* skip=2" %%a in (
`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSBuild\ToolsVersions\%1" /v MSBuildToolsPath 2^> nul`
) do if exist %%b (
set a_=%%~b
call :bz ":msbfound " a_
call :b6 a_ bp
set %2=!bp!
exit/B 0
)
set "%2="
exit/B 0
:b6
set %2=!%~1!\MSBuild.exe
exit/B 0
:bz
if defined am (
set ba=%1
set ba=!ba:~0,-1!
set ba=!ba:~1!
echo.[%TIME% ] !ba! !%2! !%3!
)
exit/B 0
:b0
call :b7 %1
call :b8 %1
exit/B 0
:b7
call :b9 %1 "-=1"
exit/B 0
:b8
call :b9 %1 "+=1"
exit/B 0
:b9
set bb=z!%1!z
if "%~2"=="-=1" (set "bc=1") else (set "bc=")
if defined bc (
set /a "i=-2"
) else (
set /a "i=1"
)
:b_
if "!bb:~%i%,1!"==" " (
set /a "i%~2"
goto b_
)
if defined bc set /a "i+=1"
if defined bc (
set "%1=!bb:~1,%i%!"
) else (
set "%1=!bb:~%i%,-1!"
)
exit/B 0
:bs
set "bd=%~1"
set /a ax=-1
:ca
set /a ax+=1
set %bd%[!ax!]=%~2
shift & if not "%~3"=="" goto ca
set /a ax-=1
set %1=!ax!
exit/B 0
:bx
set %2=!%1!
exit/B 0
:b1
setlocal disableDelayedExpansion
@echo off
:: GetNuTool - Executable version
:: Copyright (c) 2015-2018,2020  Denis Kuzmin [ x-3F@outlook.com ]
:: https://github.com/3F/GetNuTool
set be=gnt.core
set bf="%temp%\%random%%random%%be%"
if "%~1"=="-unpack" goto cb
set bg=%*
if defined __p_call if defined bg set bg=%bg:^^=^%
set bh=%__p_msb%
if defined bh goto cc
if "%~1"=="-msbuild" goto cd
for %%v in (4.0, 14.0, 12.0, 3.5, 2.0) do (
for /F "usebackq tokens=2* skip=2" %%a in (
`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSBuild\ToolsVersions\%%v" /v MSBuildToolsPath 2^> nul`
) do if exist %%b (
set bh="%%~b\MSBuild.exe"
goto cc
)
)
echo MSBuild was not found. Try -msbuild "fullpath" args 1>&2
exit/B 2
:cd
shift
set bh=%1
shift
set bi=%bg:!= #__b_ECL## %
setlocal enableDelayedExpansion
set bi=!bi:%%=%%%%!
:ce
for /F "tokens=1* delims==" %%a in ("!bi!") do (
if "%%~b"=="" (
call :cf !bi!
exit/B %ERRORLEVEL%
)
set bi=%%a #__b_EQ## %%b
)
goto ce
:cf
shift & shift
set "bg="
:cg
set bg=!bg! %1
shift & if not "%~2"=="" goto cg
set bg=!bg: #__b_EQ## ==!
setlocal disableDelayedExpansion
set bg=%bg: #__b_ECL## =!%
:cc
call :ch
call %bh% %bf% /nologo /p:wpath="%cd%/" /v:m /m:4 %bg%
set "bh="
set bj=%ERRORLEVEL%
del /Q/F %bf%
exit/B %bj%
:cb
set bf="%cd%\%be%"
echo Generating minified version in %bf% ...
:ch
<nul set /P ="">%bf%
set a=PropertyGroup&set b=Condition&set c=ngpackages&set d=Target&set e=DependsOnTargets&set f=TaskCoreDllPath&set g=MSBuildToolsPath&set h=UsingTask&set i=CodeTaskFactory&set j=ParameterGroup&set k=Reference&set l=Include&set m=System&set n=Using&set o=Namespace&set p=IsNullOrEmpty&set q=return&set r=string&set s=delegate&set t=foreach&set u=WriteLine&set v=Combine&set w=Console.WriteLine&set x=Directory&set y=GetNuTool&set z=StringComparison&set _=EXT_NUSPEC
<nul set /P =^<!-- GetNuTool - github.com/3F/GetNuTool --^>^<!-- Copyright (c) 2015-2018,2020  Denis Kuzmin [ x-3F@outlook.com ] --^>^<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"^>^<%a%^>^<ngconfig %b%="'$(ngconfig)'==''"^>packages.config^</ngconfig^>^<ngserver %b%="'$(ngserver)'==''"^>https://www.nuget.org/api/v2/package/^</ngserver^>^<%c% %b%="'$(%c%)'==''"^>^</%c%^>^<ngpath %b%="'$(ngpath)'==''"^>packages^</ngpath^>^</%a%^>^<%d% Name="get" BeforeTargets="Build" %e%="header"^>^<a^>^<Output PropertyName="plist" TaskParameter="Result"/^>^</a^>^<b plist="$(plist)"/^>^</%d%^>^<%d% Name="pack" %e%="header"^>^<c/^>^</%d%^>^<%a%^>^<%f% %b%="Exists('$(%g%)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')"^>$(%g%)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll^</%f%^>^<%f% %b%="'$(%f%)'=='' and Exists('$(%g%)\Microsoft.Build.Tasks.Core.dll')"^>$(%g%)\Microsoft.Build.Tasks.Core.dll^</%f%^>^</%a%^>^<%h% TaskName="a" TaskFactory="%i%" AssemblyFile="$(%f%)"^>^<%j%^>^<Result Output="true"/^>^</%j%^>^<Task^>^<%k% %l%="%m%.Xml"/^>^<%k% %l%="%m%.Xml.Linq"/^>^<%n% %o%="%m%"/^>^<%n% %o%="%m%.Collections.Generic"/^>^<%n% %o%="%m%.IO"/^>^<%n% %o%="%m%.Xml.Linq"/^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[var a=@"$(ngconfig)";var b=@"$(%c%)";var c=@"$(wpath)";if(!String.%p%(b)){Result=b;%q% true;}var d=Console.Error;Action^<%r%,Queue^<%r%^>^>e=%s%(%r% f,Queue^<%r%^>g){%t%(var h in XDocument.Load(f).Descendants("package")){var i=h.Attribute("id");var j=h.Attribute("version");var k=h.Attribute("output");if(i==null){d.%u%("'id' does not exist in '{0}'",f);%q%;}var l=i.Value;if(j!=null){l+="/"+j.Value;}if(k!=null){g.Enqueue(l+":"+k.Value);continue;}g.Enqueue(l);}};var m=new Queue^<%r%^>();%t%(var f in a.Split(new char[]{a.IndexOf('^|')!=-1?'^|':';'},(StringSplitOptions)1))>>%bf%
<nul set /P ={var n=Path.%v%(c,f);if(File.Exists(n)){e(n,m);}else{d.%u%(".config '{0}' is not found.",n);}}if(m.Count^<1){d.%u%("Empty list. Use .config or /p:%c%\n");}else{Result=%r%.Join("|",m.ToArray());}]]^>^</Code^>^</Task^>^</%h%^>^<%h% TaskName="b" TaskFactory="%i%" AssemblyFile="$(%f%)"^>^<%j%^>^<plist/^>^</%j%^>^<Task^>^<%k% %l%="WindowsBase"/^>^<%n% %o%="%m%"/^>^<%n% %o%="%m%.IO"/^>^<%n% %o%="%m%.IO.Packaging"/^>^<%n% %o%="%m%.Net"/^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[var a=@"$(ngserver)";var b=@"$(wpath)";var c=@"$(ngpath)";var d=@"$(proxycfg)".Trim();var e=@"$(debug)"=="true";if(plist==null){%q% false;}ServicePointManager.SecurityProtocol^|=SecurityProtocolType.Tls11^|SecurityProtocolType.Tls12;var f=new %r%[]{"/_rels/","/package/","/[Content_Types].xml"};Action^<%r%,object^>g=%s%(%r% h,object i){if(e){%w%(h,i);}};Func^<%r%,WebProxy^>j=%s%(%r% k){var l=k.Split('@');if(l.Length^<=1){%q% new WebProxy(l[0],false);}var m=l[0].Split(':');%q% new WebProxy(l[1],false){Credentials=new NetworkCredential(m[0],(m.Length^>1)?m[1]:null)};};Func^<%r%,%r%^>n=%s%(%r% i){%q% Path.%v%(b,i??"");};Action^<%r%,%r%,%r%^>o=%s%(%r% p,%r% q,%r% r){var s=Path.GetFullPath(n(r??q));if(%x%.Exists(s)){%w%("`{0}` was found in \"{1}\"",q,s);%q%;}Console.Write("Getting `{0}` ... ",p);var t=Path.%v%(Path.GetTempPath(),Guid.NewGuid().ToString());using(var u=new WebClient()){try{if(!String.%p%(d)){u.Proxy=j(d);}u.Headers.Add("User-Agent","%y% $(%y%)");u.UseDefaultCredentials=true;if(u.Proxy.Credentials==null){u.Proxy.Credentials=CredentialCache.DefaultCredentials;}u.DownloadFile(a+p,t);}catch(Exception v){Console.Error.%u%(v.Message);%q%;}}%w%("Extracting into \"{0}\"",s);using(var w=ZipPackage.Open(t,FileMode.Open,FileAccess.Read)){%t%(var x in w.GetParts()){var y=Uri.UnescapeDataString(x.Uri.OriginalString);if>>%bf%
<nul set /P =(f.Any(z=^>y.StartsWith(z,%z%.Ordinal))){continue;}var _=Path.%v%(s,y.TrimStart('/'));g("- `{0}`",y);var aa=Path.GetDirectoryName(_);if(!%x%.Exists(aa)){%x%.CreateDirectory(aa);}using(Stream ab=x.GetStream(FileMode.Open,FileAccess.Read))using(var ac=File.OpenWrite(_)){try{ab.CopyTo(ac);}catch(FileFormatException v){g("[x]?crc: {0}",_);}}}}File.Delete(t);};%t%(var w in plist.Split(new char[]{plist.IndexOf('^|')!=-1?'^|':';'},(StringSplitOptions)1)){var ad=w.Split(new char[]{':'},2);var p=ad[0];var r=(ad.Length^>1)?ad[1]:null;var q=p.Replace('/','.');if(!String.%p%(c)){r=Path.%v%(c,r??q);}o(p,q,r);}]]^>^</Code^>^</Task^>^</%h%^>^<%h% TaskName="c" TaskFactory="%i%" AssemblyFile="$(%f%)"^>^<Task^>^<%k% %l%="%m%.Xml"/^>^<%k% %l%="%m%.Xml.Linq"/^>^<%k% %l%="WindowsBase"/^>^<%n% %o%="%m%"/^>^<%n% %o%="%m%.Collections.Generic"/^>^<%n% %o%="%m%.IO"/^>^<%n% %o%="%m%.Linq"/^>^<%n% %o%="%m%.IO.Packaging"/^>^<%n% %o%="%m%.Xml.Linq"/^>^<%n% %o%="%m%.Text.RegularExpressions"/^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[var a=@"$(ngin)";var b=@"$(ngout)";var c=@"$(wpath)";var d=@"$(debug)"=="true";var %_%=".nuspec";var EXT_NUPKG=".nupkg";var TAG_META="metadata";var DEF_CONTENT_TYPE="application/octet";var MANIFEST_URL="http://schemas.microsoft.com/packaging/2010/07/manifest";var ID="id";var VER="version";Action^<%r%,object^>e=%s%(%r% f,object g){if(d){%w%(f,g);}};var h=Console.Error;a=Path.%v%(c,a);if(!%x%.Exists(a)){h.%u%("`{0}` is not found.",a);%q% false;}b=Path.%v%(c,b);var i=%x%.GetFiles(a,"*"+%_%,SearchOption.TopDirectoryOnly).FirstOrDefault();if(i==null){h.%u%("{0} is not found in `{1}`",%_%,a);%q% false;}%w%("Found {0}: `{1}`",%_%,i);var j=XDocument.Load(i).Root.Elements().FirstOrDefault(k=^>k.Name.LocalName==TAG_META);if(j==null){h.%u%("{0} does not contain {1}.",i,TAG_META);%q% false;}var l=>>%bf%
<nul set /P =new Dictionary^<%r%,%r%^>();%t%(var m in j.Elements()){l[m.Name.LocalName.ToLower()]=m.Value;}if(l[ID].Length^>100^|^|!Regex.IsMatch(l[ID],@"^\w+([_.-]\w+)*$",RegexOptions.IgnoreCase^|RegexOptions.ExplicitCapture)){h.%u%("The format `{0}` is not correct.",ID);%q% false;}var n=new %r%[]{Path.%v%(a,"_rels"),Path.%v%(a,"package"),Path.%v%(a,"[Content_Types].xml")};var o=%r%.Format("{0}.{1}{2}",l[ID],l[VER],EXT_NUPKG);if(!String.IsNullOrWhiteSpace(b)){if(!%x%.Exists(b)){%x%.CreateDirectory(b);}o=Path.%v%(b,o);}%w%("Creating nupkg `{0}` ...",o);using(var p=Package.Open(o,FileMode.Create)){Uri q=new Uri(String.Format("/{0}{1}",l[ID],%_%),UriKind.Relative);p.CreateRelationship(q,TargetMode.Internal,MANIFEST_URL);%t%(var r in %x%.GetFiles(a,"*.*",SearchOption.AllDirectories)){if(n.Any(k=^>r.StartsWith(k,%z%.Ordinal))){continue;}%r% s;if(r.StartsWith(a,%z%.OrdinalIgnoreCase)){s=r.Substring(a.Length).TrimStart(Path.DirectorySeparatorChar);}else{s=r;}e("- `{0}`",s);var t=%r%.Join("/",s.Split('\\','/').Select(g=^>Uri.EscapeDataString(g)));Uri u=PackUriHelper.CreatePartUri(new Uri(t,UriKind.Relative));var v=p.CreatePart(u,DEF_CONTENT_TYPE,CompressionOption.Maximum);using(Stream w=v.GetStream())using(var x=new FileStream(r,FileMode.Open,FileAccess.Read)){x.CopyTo(w);}}Func^<%r%,%r%^>y=%s%(%r% z){%q%(l.ContainsKey(z))?l[z]:"";};var _=p.PackageProperties;_.Creator=y("authors");_.Description=y("description");_.Identifier=l[ID];_.Version=l[VER];_.Keywords=y("tags");_.Title=y("title");_.LastModifiedBy="%y% $(%y%)";}]]^>^</Code^>^</Task^>^</%h%^>^<%d% Name="Build" %e%="get"/^>^<%a%^>^<%y%^>1.8.0.43837+df76082^</%y%^>^<wpath %b%="'$(wpath)'==''"^>$(MSBuildProjectDirectory)^</wpath^>^</%a%^>^<%d% Name="header"^>^<Message Text="%%0D%%0A%y% $(%y%)%%0D%%0A(c) 2015-2018,2020  Denis Kuzmin [ x-3F@outlook.com ] GitHub/3F%%0D%%0A" >>%bf%
<nul set /P =Importance="high"/^>^</%d%^>^</Project^>>>%bf%
exit/B 0


================================================
File: ErcXdbgPlugin.sln
================================================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29503.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Managed.x64dbg", "Managed.x64dbg\Managed.x64dbg.csproj", "{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ErcXdbgPlugin", "ErcXdbg\ErcXdbgPlugin.csproj", "{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ERC.Net", "ERC\ERC\ERC.Net.csproj", "{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Debug|Any CPU.ActiveCfg = Debug|x86
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Debug|x64.ActiveCfg = Debug|x64
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Debug|x64.Build.0 = Debug|x64
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Debug|x86.ActiveCfg = Debug|x86
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Debug|x86.Build.0 = Debug|x86
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Release|Any CPU.ActiveCfg = Release|x86
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Release|x64.ActiveCfg = Release|x64
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Release|x64.Build.0 = Release|x64
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Release|x86.ActiveCfg = Release|x86
		{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}.Release|x86.Build.0 = Release|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Debug|Any CPU.ActiveCfg = Debug|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Debug|x64.ActiveCfg = Debug|x64
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Debug|x64.Build.0 = Debug|x64
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Debug|x86.ActiveCfg = Debug|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Debug|x86.Build.0 = Debug|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Release|Any CPU.ActiveCfg = Release|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Release|x64.ActiveCfg = Release|x64
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Release|x64.Build.0 = Release|x64
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Release|x86.ActiveCfg = Release|x86
		{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}.Release|x86.Build.0 = Release|x86
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|x64.ActiveCfg = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|x64.Build.0 = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|x86.ActiveCfg = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Debug|x86.Build.0 = Debug|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|Any CPU.Build.0 = Release|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|x64.ActiveCfg = Release|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|x64.Build.0 = Release|Any CPU
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|x86.ActiveCfg = Release|x86
		{118C331F-8FC1-4BA6-B5B1-DA397E623CFE}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {04FC09BA-059D-44FA-A886-0B8E3C34B00F}
	EndGlobalSection
EndGlobal



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2019 Andy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: ERC/README.md
================================================
# ERC.Net     
[![License](https://img.shields.io/github/license/Andy53/ERC.Net)](license.txt)
[![GitHub issues](https://img.shields.io/github/issues-raw/Andy53/ERC.Net?style=flat)](https://github.com/Andy53/ERC.Net/issues)
<a href="https://github.com/Andy53/ERC.Net/commits/master">
    <img src="https://img.shields.io/github/last-commit/Andy53/ERC.Net?style=flat-square&logo=github&logoColor=white">
</a> 

ERC.Net is a collection of tools designed to assist in debugging Windows application crashes. ERC.Net supports both 64 and 32 bit applications, can parse DLL/EXE headers, identify compile time flags such as ASLR, DEP and SafeSEH, generate non repeating patterns, generate platform specific egg hunters, identify process information such as loaded modules and running threads, read the TEB of a specific thread, assist with identifying numerous types of memory vulnerabilities and has numerous other use cases. 

## Installing

Install one of the nuget packages ([x86](https://www.nuget.org/packages/ERC.Net-x86/)/[x64](https://www.nuget.org/packages/ERC.Net-x64/)) or download the source code from [Github](https://github.com/Andy53/ERC.net), build the library and then link it in your project.

### Prerequisites

Visual studio  
.Net 4.7.2   
C#   

### Documentation
This library contains the fundamental specifications, documentation, and architecture that underpin ERC.Net. If you're looking to understand the system better, or want to know how to integrate the various components, there is a lot of valuable information contained here.    

[ðŸ“„ Documentation and Specifications](https://andy53.github.io/ERC.net/) 

### Getting Started

Below are a set of examples detailing how to use the basic functionality provided by ERC.Net

Creating a sting of non repeating characters:
```csharp
using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternCreate(1000, core);
            Console.WriteLine("Pattern:" + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
```    
     
    
Identifying the position of a sting within a non repeating string:
```csharp
using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternOffset("Aa9", core);
            Console.WriteLine("Pattern Offset:" + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
```     
     
Display a list of all applicable local processes:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var test = ProcessInfo.ListLocalProcesses(core);
            foreach (Process process in test.ReturnValue)
            {
                Console.WriteLine("Name: {0} ID: {1}", process.ProcessName, process.Id);
            }
            Console.WriteLine(Environment.NewLine);
            Console.ReadKey();
        }
    }
}
```

Search Process Memory for a string (the string being searched for is "anonymous", the program being searched is notepad) and return a list of pointers to that string in process memory:
```csharp
using System;
using System.Collections.Generic;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var listy = info.SearchMemory(1, searchString: "anonymous");
            foreach (KeyValuePair<IntPtr, string> s in listy.ReturnValue)
            {
                Console.WriteLine("0x" + s.Key.ToString("x16") + " Filepath: " + s.Value);
            }
            Console.ReadKey();
        }
    }
}
```     


An example of how to assemble mnemonics into opcodes:
```csharp
using System;
using System.Collections.Generic;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            List<string> instructions = new List<string>();
            instructions.Add("ret");

            foreach (string s in instructions)
            {
                List<string> strings = new List<string>();
                strings.Add(s);
                var asmResult = ERC.Utilities.OpcodeAssembler.AssembleOpcodes(strings, MachineType.x64);
                Console.WriteLine(s + " = " + BitConverter.ToString(asmResult.ReturnValue).Replace("-", ""));
            }
            Console.ReadKey();
        }
    }
}
```     

An example of how to disassemble opcodes into mnemonics:
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            byte[] opcodes = new byte[] { 0xC3 };
            var result = ERC.Utilities.OpcodeDisassembler.Disassemble(opcodes, MachineType.x64);
            Console.WriteLine(result.ReturnValue + Environment.NewLine);
            Console.ReadKey();
        }
    }
}
```

Display information about all modules associated with a process:
```csharp
using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine("Outputting module info");
            output_module_info();
            Console.ReadKey();
        }

        public static void output_module_info()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            Console.WriteLine("Here");
            Console.WriteLine(DisplayOutput.GenerateModuleInfoTable(info));
        }
    }
}
```   

Generate a byte array of all possible bytes excluding 0xA1, 0xB1, 0xC1 and 0xD1 then save it to a file in C:\:
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            byte[] unwantedBytes = new byte[] { 0xA1, 0xB1, 0xC1, 0xD1 };
            var bytes = DisplayOutput.GenerateByteArray(unwantedBytes, core);
            Console.WriteLine(BitConverter.ToString(bytes).Replace("-", " "));
            Console.ReadKey();
        }
    }
}
```    

Return the value of all registers (Context) for a given thread:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            for (int i = 0; i < info.ThreadsInfo.Count; i++)
            {
                info.ThreadsInfo[i].Get_Context();
                Console.WriteLine(info.ThreadsInfo[i].Context64.ToString());
            }
            Console.ReadKey();
        }
    }
}
```    

Return a pointer and mnemonics for all SEH jumps in the given process and associated modules:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var tester = DisplayOutput.GetSEHJumps(info);
            foreach (string s in tester.ReturnValue)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
```     

Generate a collection of egghunters with the tag "AAAA":
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var eggs = DisplayOutput.GenerateEggHunters(core, "AAAA");
            Console.WriteLine(eggs);
            Console.ReadKey();
        }
    }
}
```     

Display the SEH chain for a thread (the process must have entered an error state for this to be populated):
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var test = info.ThreadsInfo[0].GetSehChain();
            foreach (IntPtr i in test)
            {
                Console.WriteLine("Ptr: {0}", i.ToString("X8"));
            }
            Console.ReadKey();
        }
    }
}
```    

Find a non repeating pattern in memory and display which registers point to (or near) it:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("Vulnerable Application Name"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var strings = DisplayOutput.GenerateFindNRPTable(info, 2, false);
            foreach (string s in strings)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
```    

Generate a 32bit ROP chain for the current process:
```csharp
using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine("Generate RopChain 32");
            GenerateRopChain32();
            Console.ReadKey();
        }

        public static void GenerateRopChain32()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("Word"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            RopChainGenerator32 RCG = new RopChainGenerator32(info);
            RCG.GenerateRopChain32();
        }
    }
}
```    

## Versioning

For the versions available, see the [tags on this repository](https://github.com/Andy53/ERC.net/tags). 

## Authors

* **Andy Bowden** - [Andy53](https://github.com/Andy53)

## License

This project is licensed under the GNU General Public License v3.0 - see the [LICENSE.md](LICENSE.md) file for details

## Acknowledgments

* Hat tip to anyone whose code was used
* Inspiration
* Other things




================================================
File: ERC/LICENSE
================================================
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.



================================================
File: ERC/.gitignore
================================================
*.ide
.vs/*
.vs/ERC.net/v15/Server/sqlite3/storage.ide-shm
.vs/ERC.net/v15/Server/sqlite3/storage.ide-wal
D:\Source\Repos\ERC_net\ERC.net\ERC_test_app
*ERC.net.sln
ERC_test_app/*
ERC\obj\ERC.Net.csproj.nuget.cache
docfx_project/**
docfx_project



================================================
File: ERC/Documentation/docfx.json
================================================
{
  "metadata": [
    {
      "src": [
        {
          "files": [
            "**/**.cs",
            "**/**.csproj"
          ],
         "src": ".."
        }
      ],
      "dest": "api",
      "disableGitFeatures": false,
      "disableDefaultFilter": false
    }
  ],
  "build": {
    "content": [
      {
        "files": [
          "api/**.yml",
          "api/index.md"
        ]
      },
      {
        "files": [
          "articles/**.md",
          "articles/**/toc.yml",
          "toc.yml",
          "*.md",
		  "**/**"
        ]
      }
    ],
    "resource": [
      {
        "files": [
          "images/**"
        ]
      }
    ],
    "overwrite": [
      {
        "files": [
          "apidoc/**"
        ],
        "exclude": [
          "obj/**",
          "_site/**"
        ]
      }
    ],
    "dest": "_site",
    "globalMetadataFiles": [],
    "fileMetadataFiles": [],
    "template": [
      "default"
    ],
    "postProcessors": [],
    "markdownEngineName": "markdig",
    "noLangKeyword": false,
    "keepFileLink": false,
    "cleanupCacheHistory": false,
    "disableGitFeatures": false
  }
}


================================================
File: ERC/Documentation/index.md
================================================
# ERC.Net API Documentation.    
Full documentation for the ERC.Net API can be found by clicking the "API Documentation" button in the nav bar above. A description of how to use the library along with some code samples can be found in the "Articles" section.

<!--
# This is the **HOMEPAGE**.
Refer to [Markdown](http://daringfireball.net/projects/markdown/) for how to write markdown files.
## Quick Start Notes:
1. Add images to the *images* folder if the file is referencing an image.
-->


================================================
File: ERC/Documentation/toc.yml
================================================
- name: Articles
  href: articles/
- name: Api Documentation
  href: api/
  homepage: api/index.md



================================================
File: ERC/Documentation/.gitignore
================================================
###############
#    folder   #
###############
/**/DROP/
/**/TEMP/
/**/packages/
/**/bin/
/**/obj/
_site



================================================
File: ERC/Documentation/api/index.md
================================================
# ERC.Net
In the left panel, you find the API documentation for all accessible structures and functionality of the ERC.Net library.



================================================
File: ERC/Documentation/api/.gitignore
================================================
###############
#  temp file  #
###############
*.yml
.manifest



================================================
File: ERC/Documentation/articles/LICENSE.md
================================================
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.



================================================
File: ERC/Documentation/articles/intro.md
================================================
# ERC.Net

ERC.Net is a collection of tools designed to assist in debugging Windows application crashes. ERC.Net supports both 64 and 32 bit applications, can parse DLL/EXE headers, identify compile time flags such as ASLR, DEP and SafeSEH, generate non repeating patterns, generate platform specific egg hunters, identify process information such as loaded modules and running threads, read the TEB of a specific thread, assist with identifying numerous types of memory vulnerabilities and has numerous other use cases. 

## Installing

Install one of the nuget packages ([x86](https://www.nuget.org/packages/ERC.Net-x86/)/[x64](https://www.nuget.org/packages/ERC.Net-x64/)) or download the source code from [Github](https://github.com/Andy53/ERC.net), build the library and then link it in your project.

### Prerequisites

Visual studio  
.Net 4.7.2   
C#   

### Getting Started

Below are a set of examples detailing how to use the basic functionality provided by ERC.Net

Creating a sting of non repeating characters:
```csharp
using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternCreate(1000, core);
            Console.WriteLine("Pattern:" + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
```    
     
    
Identifying the position of a sting within a non repeating string:
```csharp
using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternOffset("Aa9", core);
            Console.WriteLine("Pattern Offset:" + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
```     
     
Display a list of all applicable local processes:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var test = ProcessInfo.ListLocalProcesses(core);
            foreach (Process process in test.ReturnValue)
            {
                Console.WriteLine("Name: {0} ID: {1}", process.ProcessName, process.Id);
            }
            Console.WriteLine(Environment.NewLine);
            Console.ReadKey();
        }
    }
}
```

Search Process Memory for a string (the string being searched for in "anonymous", the program being searched is notepad) and return a list of pointers to that string in process memory:
```csharp
using System;
using System.Collections.Generic;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var listy = info.SearchMemory(1, searchString: "anonymous");
            foreach (KeyValuePair<IntPtr, string> s in listy.ReturnValue)
            {
                Console.WriteLine("0x" + s.Key.ToString("x16") + " Filepath: " + s.Value);
            }
            Console.ReadKey();
        }
    }
}
```     


An example of how to assemble mnemonics into opcodes:
```csharp
using System;
using System.Collections.Generic;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            List<string> instructions = new List<string>();
            instructions.Add("ret");

            foreach (string s in instructions)
            {
                List<string> strings = new List<string>();
                strings.Add(s);
                var asmResult = ERC.Utilities.OpcodeAssembler.AssembleOpcodes(strings, MachineType.x64);
                Console.WriteLine(s + " = " + BitConverter.ToString(asmResult.ReturnValue).Replace("-", ""));
            }
            Console.ReadKey();
        }
    }
}
```     

An example of how to disassemble opcodes into mnemonics:
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            byte[] opcodes = new byte[] { 0xC3 };
            var result = ERC.Utilities.OpcodeDisassembler.Disassemble(opcodes, MachineType.x64);
            Console.WriteLine(result.ReturnValue + Environment.NewLine);
            Console.ReadKey();
        }
    }
}
```

Display information about all modules associated with a process:
```csharp
using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine("Outputting module info");
            output_module_info();
            Console.ReadKey();
        }

        public static void output_module_info()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            Console.WriteLine("Here");
            Console.WriteLine(DisplayOutput.GenerateModuleInfoTable(info));
        }
    }
}
```   

Generate a byte array of all possible bytes excluding 0xA1, 0xB1, 0xC1 and 0xD1 then save it to a file in C:\:
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            byte[] unwantedBytes = new byte[] { 0xA1, 0xB1, 0xC1, 0xD1 };
            var bytes = DisplayOutput.GenerateByteArray(unwantedBytes, core);
            Console.WriteLine(BitConverter.ToString(bytes).Replace("-", " "));
            Console.ReadKey();
        }
    }
}
```    

Return the value of all registers (Context) for a given thread:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            for (int i = 0; i < info.ThreadsInfo.Count; i++)
            {
                info.ThreadsInfo[i].Get_Context();
                Console.WriteLine(info.ThreadsInfo[i].Context64.ToString());
            }
            Console.ReadKey();
        }
    }
}
```    

Return a pointer and mnemonics for all SEH jumps in the given process and associated modules:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var tester = DisplayOutput.GetSEHJumps(info);
            foreach (string s in tester.ReturnValue)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
```     

Generate a collection of egghunters with the tag "AAAA":
```csharp
using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var eggs = DisplayOutput.GenerateEggHunters(core, "AAAA");
            Console.WriteLine(eggs);
            Console.ReadKey();
        }
    }
}
```     

Display the SEH chain for a thread (the process must have entered an error state for this to be populated):
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("notepad"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var test = info.ThreadsInfo[0].GetSehChain();
            foreach (IntPtr i in test)
            {
                Console.WriteLine("Ptr: {0}", i.ToString("X8"));
            }
            Console.ReadKey();
        }
    }
}
```    

Find a non repeating pattern in memory and display which registers point to (or near) it:
```csharp
using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("Vulnerable Application Name"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var strings = DisplayOutput.GenerateFindNRPTable(info, 2, false);
            foreach (string s in strings)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
```    

Generate a 32bit ROP chain for the current process:
```csharp
using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine("Generate RopChain 32");
            GenerateRopChain32();*/
            Console.ReadKey();
        }

        public static void GenerateRopChain32()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains("Word"))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            RopChainGenerator32 RCG = new RopChainGenerator32(info);
            RCG.GenerateRopChain32();
        }
    }
}
```    

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/Andy53/ERC.net/tags). 

## Authors

* **Andy Bowden** - [Andy53](https://github.com/Andy53)

## License

This project is licensed under the GNU General Public License v3.0 - see the [LICENSE.md](LICENSE.md) file for details

## Acknowledgments

* Hat tip to anyone whose code was used
* Inspiration
* Other things




================================================
File: ERC/Documentation/articles/toc.yml
================================================
- name: Introduction
  href: intro.md



================================================
File: ERC/ERC/Convert.cs
================================================
ï»¿using System;
using System.Globalization;
using System.Linq;
using System.Text;

namespace ERC.Utilities
{
    /// <summary>
    /// Static class containing methods for common conversions.
    /// </summary>
    public static class Convert
    {
        const string HEX_CHARS = "abcdefABCDEF1234567890";

        #region Hex
        /// <summary>
        /// Converts a hex string to ASCII."
        /// </summary>
        /// <param name="hex">A string containing hex characters.</param>
        /// <returns>A string containing the equivalent ASCII values</returns>
        public static string HexToAscii(string hex)
        {
            if (hex.Length % 2 != 0)
            {
                hex = "0" + hex;
            }

            foreach (char c in hex)
            {
                if (!HEX_CHARS.Contains(c))
                {
                    return string.Empty;
                }
            }

            try
            {
                string ascii = string.Empty;

                for (int i = 0; i < hex.Length; i += 2)
                {
                    String hs = string.Empty;

                    hs = hex.Substring(i, 2);
                    uint decval = System.Convert.ToUInt32(hs, 16);
                    char character = System.Convert.ToChar(decval);
                    ascii += character;

                }

                return ascii;
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }

            return string.Empty;
        }

        /// <summary>
        /// Converts a hex string to the equivalent bytes.
        /// </summary>
        /// <param name="hex">A string containing hex characters.</param>
        /// <returns>A byte array containing the associated values.</returns>
        public static byte[] HexToBytes(string hex)
        {
            if (hex.Length % 2 != 0)
            {
                hex = "0" + hex;
            }

            byte[] bytes = new byte[hex.Length / 2];
            for (int index = 0; index < bytes.Length; index++)
            {
                string byteValue = hex.Substring(index * 2, 2);
                bytes[index] = byte.Parse(byteValue, NumberStyles.HexNumber, CultureInfo.InvariantCulture);
            }

            return bytes;
        }
        #endregion

        #region Ascii
        /// <summary>
        /// Converts an ASCII string to a byte array.
        /// </summary>
        /// <param name="ascii">An ASCII string.</param>
        /// <returns>A byte array containing the associated values.</returns>
        public static byte[] AsciiToBytes(string ascii)
        {
            return Encoding.ASCII.GetBytes(ascii);
        }

        /// <summary>
        /// Converts an ASCII string to a hex string
        /// </summary>
        /// <param name="ascii">An ASCII string.</param>
        /// <returns>A hex string.</returns>
        public static string AsciiToHex(string ascii)
        {
            return BitConverter.ToString(Encoding.ASCII.GetBytes(ascii)).Replace("-", " ");
        }
        #endregion

        #region Unicode
        /// <summary>
        /// Converts a Unicode string to a byte array.
        /// </summary>
        /// <param name="unicode">A Unicode string.</param>
        /// <returns>A byte array.</returns>
        public static byte[] UnicodeToBytes(string unicode)
        {
            return Encoding.Unicode.GetBytes(unicode);
        }

        /// <summary>
        /// Converts a Unicode string to a hex string.
        /// </summary>
        /// <param name="unicode">A Unicode string.</param>
        /// <returns>A hex string.</returns>
        public static string UnicodeToHex(string unicode)
        {
            return BitConverter.ToString(Encoding.Unicode.GetBytes(unicode)).Replace("-", " ");
        }
        #endregion

        #region UTF7
        /// <summary>
        /// Converts a UTF-7 string to a byte array.
        /// </summary>
        /// <param name="utf7">A UTF-7 string.</param>
        /// <returns>A byte array.</returns>
        public static byte[] UTF7ToBytes(string utf7)
        {
            return Encoding.UTF7.GetBytes(utf7);
        }

        /// <summary>
        /// Converts a UTF-7 string to a hex string.
        /// </summary>
        /// <param name="utf7">A UTF-7 string.</param>
        /// <returns>A hex string.</returns>
        public static string UTF7ToHex(string utf7)
        {
            return BitConverter.ToString(Encoding.UTF7.GetBytes(utf7)).Replace("-", " ");
        }
        #endregion

        #region UTF8
        /// <summary>
        /// Converts a UTF-8 string to a byte array.
        /// </summary>
        /// <param name="utf8">A UTF-8 string.</param>
        /// <returns>A byte array.</returns>
        public static byte[] UTF8ToBytes(string utf8)
        {
            return Encoding.UTF8.GetBytes(utf8);
        }

        /// <summary>
        /// Converts a UTF-8 string to a hex string.
        /// </summary>
        /// <param name="utf8">A UTF-8 string.</param>
        /// <returns>A hex string.</returns>
        public static string UTF8ToHex(string utf8)
        {
            return BitConverter.ToString(Encoding.UTF8.GetBytes(utf8)).Replace("-", " ");
        }
        #endregion

        #region UTF32
        /// <summary>
        /// Converts a UTF-32 string to a byte array.
        /// </summary>
        /// <param name="utf32">A UTF-32 string.</param>
        /// <returns>A byte array.</returns>
        public static byte[] UTF32ToBytes(string utf32)
        {
            return Encoding.UTF32.GetBytes(utf32);
        }

        /// <summary>
        /// Converts a UTF-32 string to a hex string.
        /// </summary>
        /// <param name="utf32">A UTF-32 string.</param>
        /// <returns>A hex string.</returns>
        public static string UTF32ToHex(string utf32)
        {
            return BitConverter.ToString(Encoding.UTF32.GetBytes(utf32)).Replace("-", " ");
        }
        #endregion

        #region HTML
        /// <summary>
        /// Converts the spaces in a string to Html fixed width character.
        /// </summary>
        /// <param name="str">A UTF-8 string.</param>
        /// <returns>A string with spaces converted to HTML entities.</returns>
        public static string htmlWhitespaceFix(string str)
        {
            return str.Replace(" ", "&nbsp;");
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Display_Output.cs
================================================
ï»¿using ERC.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Convert = ERC.Utilities.Convert;

namespace ERC
{
    /// <summary> Provides output in various human readable formats of data from the library. </summary>
    public static class DisplayOutput
    {

        #region GetFilePath
        /// <summary>
        /// Identifies output files previously created by a the Display_Modules function
        /// and identifies the last number used. Returns the next number to be used as a filename.
        /// </summary>
        /// <param name="directory">The directory to be used</param>
        /// <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
        /// <param name="extension">The file extension to be used e.g. ".txt" </param>
        /// <returns>Returns a string containing the full file path to be used when writing output to disk</returns>
        internal static string GetFilePath(string directory, string prefix, string extension)
        {
            string result = "";
            int fileNumber = 0;
            char[] delimiterChars = { '_', '.' };

            DirectoryInfo d = new DirectoryInfo(directory);
            FileInfo[] files = d.GetFiles(prefix + "*");

            foreach (FileInfo f in files)
            {
                string fileNumberString = Regex.Match(f.Name, @"\d+").Value;
                if (fileNumber < int.Parse(fileNumberString))
                {
                    fileNumber = int.Parse(fileNumberString);
                }
            }

            fileNumber++;
            result = directory + prefix + fileNumber.ToString() + extension;
            return result;
        }
        #endregion

        #region WriteToFile
        /// <summary>
        /// Writes a list of strings to a file. Takes a directory, filename and prefix along with a List of strings.
        /// </summary>
        /// <param name="directory">The directory to be used</param>
        /// <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
        /// <param name="extension">The file extension to be used e.g. ".txt" </param>
        /// <param name="content">A list of strings to be written to disk </param>

        public static void WriteToFile(string directory, string prefix, string extension, List<string> content)
        {
            string path = GetFilePath(directory, prefix, extension);
            TextWriter tw = new StreamWriter(path);

            foreach (String s in content)
                tw.WriteLine(s);

            tw.Close();
        }
        #endregion

        #region Generate Pattern
        /// <summary>
        /// Creates a file in the ErcCore working directory containing a string of non repeating characters. 
        /// </summary>
        /// <param name="length">The length of the string to be created</param>
        /// <param name="core">An ErcCore object</param>
        /// <param name="extended">A optional boolean specifying whether to use the extended character set. Default is false.</param>
        /// <returns>Returns a string containing the pattern generated.</returns>
        public static string GeneratePattern(int length, ErcCore core, bool extended = false)
        {
            var patternFilePath = GetFilePath(core.WorkingDirectory, "Pattern_Create_", ".txt");
            var pattern = PatternTools.PatternCreate(length, core, extended);
            if(pattern.Error != null)
            {
                throw pattern.Error;
            }
            var patternOutput = PatternOutputBuilder(pattern.ReturnValue, core);
            File.WriteAllText(patternFilePath, patternOutput);
            return patternOutput;
        }
        #endregion

        #region Pattern Output
        /// <summary>
        /// Private function, should not be called directly. Takes input from pattern_create and outputs in an easily readable format.
        /// </summary>
        /// <param name="pattern">The pattern to be used</param>
        /// <param name="core">An ErcCore object</param>
        /// <returns>Returns a string containing the human readable output of the pattern create method.</returns>
        private static string PatternOutputBuilder(string pattern, ErcCore core)
        {
            byte[] bytes = Encoding.ASCII.GetBytes(pattern);
            string hexPattern = BitConverter.ToString(bytes);
            string asciiPattern = " ";
            string[] hexArray = hexPattern.Split('-');

            for (int i = 0; i < hexArray.Length; i++)
            {
                asciiPattern += pattern[i];

                if (i % 88 == 0 && i > 0)
                {
                    asciiPattern += "\"";
                    asciiPattern += Environment.NewLine;
                    asciiPattern += "\"";
                }
            }

            hexPattern = " ";
            for (int i = 0; i < hexArray.Length; i++)
            {
                hexPattern += "\\x" + hexArray[i];

                if (i % 22 == 0 && i > 0)
                {
                    hexPattern += Environment.NewLine;
                }
            }

            asciiPattern = asciiPattern.TrimStart(' ');
            hexPattern = hexPattern.TrimStart(' ');

            string output = "";
            output += "------------------------------------------------------------------------------------------" + Environment.NewLine;
            output += "Pattern created at: " + DateTime.Now + ". Pattern created by: " + core.Author + ". Pattern length: " + pattern.Length + Environment.NewLine;
            output += "------------------------------------------------------------------------------------------" + Environment.NewLine;
            output += Environment.NewLine;
            output += "Ascii:" + Environment.NewLine;
            output += "\"" + asciiPattern + "\"" + Environment.NewLine;
            output += Environment.NewLine;
            output += "Hexadecimal:" + Environment.NewLine;
            output += hexPattern;

            return output;
        }
        #endregion

        #region List Local Processes
        /// <summary>
        /// Lists usable processes running on the local machine.
        /// </summary>
        /// <returns>A string containing details of processes running on the local machine.</returns>
        public static string ListLocalProcesses()
        {
            var processes = ProcessInfo.ListLocalProcesses(new ErcCore());
            string processDetails = "";
            if (processes.Error != null)
            {
                return processes.Error.Message;
            }

            foreach(Process p in processes.ReturnValue)
            {
                processDetails += p.ProcessName + " ID: " + p.Id + " Filename: " + p.MainWindowTitle + Environment.NewLine;
            }
            return processDetails;
        }
        #endregion

        #region List Remote Processes
        /// <summary>
        /// Lists usable processes running on the remote machine.
        /// </summary>
        /// <returns>A string containing details of processes running on the remote machine.</returns>
        public static string ListRemoteProcesses(string machineName)
        {
            var processes = ProcessInfo.ListRemoteProcesses(new ErcCore(), machineName);
            string processDetails = "";
            if (processes.Error != null)
            {
                return processes.Error.Message;
            }

            foreach (Process p in processes.ReturnValue)
            {
                processDetails += p.ProcessName + " ID: " + p.Id + " Filename: " + p.MainWindowTitle + Environment.NewLine;
            }
            return processDetails;
        }
        #endregion

        #region DisplayProcessInfo
        /// <summary>
        /// Displays information related to the provided ProcessInfo object.
        /// </summary>
        /// <param name="info">The ProcessInfo object of which the module information will be displayed</param>
        /// <param name="outputToFile">Set to false to surpress file output.</param>
        /// <returns></returns>
        public static string DisplayProcessInfo(ProcessInfo info, bool outputToFile = true)
        {
            string information = "Process Information: " + info.ProcessName + Environment.NewLine;
            information += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            information += info.ToString();
            information += Environment.NewLine;
            information += GenerateModuleInfoTable(info, false);
            information += Environment.NewLine;
            information += DisplayThreadInfo(info, false);

            if (outputToFile == true)
            {
                string processFilename = GetFilePath(info.WorkingDirectory, "process_info_", ".txt");
                File.WriteAllText(processFilename, information);
            }
            return information;
        }
        #endregion

        #region DisplayThreadInfo
        /// <summary>
        /// Displays information about all threads related to a specific process.
        /// </summary>
        /// <param name="info"></param>
        /// <param name="outputToFile"></param>
        /// <returns></returns>
        public static string DisplayThreadInfo(ProcessInfo info, bool outputToFile = true)
        {
            string information = "Thread Information for Process: " + info.ProcessName + Environment.NewLine;
            information += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            var threads = info.GetProcessThreadInformation();
            foreach(ThreadInfo t in threads.ReturnValue)
            {
                information += "Thread ID = " + t.ThreadID + Environment.NewLine;
                var teb = t.GetTeb();
                if (t.X64 == MachineType.x64)
                {
                    information += "    Thread Handle = " + "0x" + t.ThreadHandle.ToString("x16") + Environment.NewLine;
                    information += "    Thread is running in a 64 bit process = true" + Environment.NewLine;
                    information += "    Top of stack = " + "0x" + teb.TopOfStack.ToString("x16") + Environment.NewLine;
                    information += "    Bottom of stack = " + "0x" + teb.BottomOfStack.ToString("x16") + Environment.NewLine;
                }
                else
                {
                    information += "    Thread Handle = " + "0x" + t.ThreadHandle.ToString("x8") + Environment.NewLine;
                    information += "    Thread is running in a 64 bit process = false" + Environment.NewLine;
                    information += "    Top of stack = " + "0x" + teb.TopOfStack.ToString("x8") + Environment.NewLine;
                    information += "    Bottom of stack = " + "0x" + teb.BottomOfStack.ToString("x8") + Environment.NewLine;
                }
                information += Environment.NewLine;
            }
            if(outputToFile == true)
            {
                string threadFilename = GetFilePath(info.WorkingDirectory, "threads_", ".txt");
                File.WriteAllText(threadFilename, information);
            }
            return information;
        }
        #endregion

        #region DisplayModuleInfo
        /// <summary>
        /// Displays a list of all modules and associated information from a specific process. Can output to stdout, a file or both.
        /// </summary>
        /// <param name="info">The ProcessInfo object of which the module information will be displayed</param>
        /// <returns>Returns a string containing all module info from a specific process</returns>
        internal static string DisplayModuleInfo(ProcessInfo info)
        {
            int ptrSegmentWidth = 16;
            int flagSegmentWidth = 10;
            string output = "";
            output += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;

            if (info.Author != "No_Author_Set")
            {
                output += "Process Name: " + info.ProcessName + " Pattern created by: " + info.Author + " " +
                "Modules total: " + info.ModulesInfo.Count + Environment.NewLine;
            }
            else
            {
                output += "Process Name: " + info.ProcessName + " Modules total: " + info.ModulesInfo.Count + Environment.NewLine;
            }

            output += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            output += " Base          | Entry point   | Size      | Rebase   | SafeSEH  | ASLR    | NXCompat | OS DLL  | Version, Name and Path" + Environment.NewLine;
            output += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            foreach (ModuleInfo module in info.ModulesInfo)
            {
                string baseElement = " ";
                baseElement += "0x" + module.ModuleBase.ToString("x");
                for (int i = baseElement.Length; i < ptrSegmentWidth; i++)
                {
                    baseElement += " ";
                }

                string entryElement = " ";
                entryElement += "0x" + module.ModuleEntry.ToString("x");
                for (int i = entryElement.Length; i < ptrSegmentWidth; i++)
                {
                    entryElement += " ";
                }

                string sizeElement = " ";
                sizeElement += "0x" + module.ModuleSize.ToString("x");
                for (int i = sizeElement.Length; i < flagSegmentWidth; i++)
                {
                    sizeElement += " ";
                }

                string rebaseElement = "   ";
                if (module.ModuleRebase == true)
                {
                    rebaseElement += "True    ";
                }
                else
                {
                    rebaseElement += "False   ";
                }

                string sehElement = "   ";
                if (module.ModuleSafeSEH == true)
                {
                    sehElement += "True     ";
                }
                else
                {
                    sehElement += "False    ";
                }

                string aslrElement = "  ";
                if (module.ModuleASLR == true)
                {
                    aslrElement += "True     ";
                }
                else
                {
                    aslrElement += "False    ";
                }

                string nxElement = "  ";
                if (module.ModuleNXCompat == true)
                {
                    nxElement += "True     ";
                }
                else
                {
                    nxElement += "False    ";
                }

                string osElement = "  ";
                if (module.ModuleOsDll == true)
                {
                    osElement += "True     ";
                }
                else
                {
                    osElement += "False    ";
                }

                string fileElement = "  ";
                if (!string.IsNullOrEmpty(module.ModuleVersion))
                {
                    fileElement += module.ModuleVersion + ";";
                }
                if (!string.IsNullOrEmpty(module.ModuleName))
                {
                    fileElement += module.ModuleName + ";";
                }
                if (!string.IsNullOrEmpty(module.ModulePath))
                {
                    fileElement += module.ModulePath;
                }
                output += baseElement + entryElement + sizeElement + rebaseElement +
                    sehElement + aslrElement + nxElement + osElement + fileElement + Environment.NewLine;
            }
            return output;
        }
        #endregion

        #region GenerateModuleInfoTable
        /// <summary>
        /// Aquires filename and writes out all module data to the current working directory. Requires a Process_Info object to be passed as a parameter.
        /// </summary>
        /// <param name="info">The ProcessInfo object of which the module information will be displayed</param>
        /// <param name="outputToFile">Set to false to surpress file output.</param>
        /// <returns>Returns a formatted string of all results</returns>
        public static string GenerateModuleInfoTable(ProcessInfo info, bool outputToFile = true)
        {
            string modOutput = DisplayModuleInfo(info);
            string modFilename = GetFilePath(info.WorkingDirectory, "modules_", ".txt");
            if(outputToFile == true)
            {
                File.WriteAllText(modFilename, modOutput);
            }
            return modOutput;
        }
        #endregion

        #region SearhMemory
        /// <summary>
        /// Searches the memory of a process and it's loaded modules for a string or byte combination.
        /// </summary>
        /// <param name="info">The processInfo object for the process</param>
        /// <param name="searchType">The type of data to be searched for.</param>
        /// <param name="searchString">The string to search for.</param>
        /// <param name="aslr">Remove ASLR libraries.</param>
        /// <param name="safeseh">Remove SafeSEH libraries.</param>
        /// <param name="rebase">Remove rebasable libraries.</param>
        /// <param name="nxcompat">Remove NXCompat libraries.</param>
        /// <param name="osdll">Remove OS Dlls.</param>
        /// <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
        /// <param name="protection">String array containing protection level returned pointers will.</param>
        /// <returns></returns>
        public static string[] SearchMemory(ProcessInfo info, int searchType, string searchString, bool aslr = false, 
            bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false, 
            byte[] unwantedBytes = null, string protection = "exec")
        {
            List<string> excludedModules = info.CreateExcludesList(aslr, safeseh, rebase, nxcompat, osdll);
            Dictionary<IntPtr, string> result = new Dictionary<IntPtr, string>();

            if (searchType == 0)
            {
                byte[] searchBytes = StringToByteArray(searchString.Replace(" ", ""));
                result = info.SearchMemory(searchType, searchBytes, null, excludedModules).ReturnValue;
            }
            else
            {
                result = info.SearchMemory(searchType, null, searchString, excludedModules).ReturnValue;
            }

            if (unwantedBytes != null)
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in result)
                {
                    p.Add(k.Key);
                }
                List<string> outText = new List<string>();

                var pt = PtrRemover.RemovePointers(info.ProcessMachineType, p, unwantedBytes);
                pt = PtrRemover.RemovePointersProtection(info, pt, protection);

                foreach (KeyValuePair<IntPtr, string> k in result.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        result.Remove(k.Key);
                    }
                }
            }
            else
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in result)
                {
                    p.Add(k.Key);
                }
                var pt = PtrRemover.RemovePointersProtection(info, p, protection);

                foreach (KeyValuePair<IntPtr, string> k in result.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        result.Remove(k.Key);
                    }
                }
            }

            List<string> output = new List<string>();
            output.Add(String.Format("List created on {0} by {1}. Search string: {2}", DateTime.Now, info.Author, searchString));
            output.Add("----------------------------------------------------------------------");
            if (info.ProcessMachineType == MachineType.I386)
            {
                output.Add("  Address  | ASLR | SafeSEH | Rebase | NXCompat | OsDLL | Module Path");
            }
            else
            {
                output.Add("      Address      | ASLR | SafeSEH  | Rebase | NXCompat | OsDLL | Module Path");
            }
            output.Add("----------------------------------------------------------------------");
            foreach (KeyValuePair<IntPtr, string> v in result)
            {
                for (int i = 0; i < info.ModulesInfo.Count; i++)
                {
                    if (info.ProcessMachineType == ERC.MachineType.I386)
                    {
                        if (info.ModulesInfo[i].ModulePath == v.Value)
                        {
                            output.Add(String.Format("0x{0} | {1} |  {2}   |  {3}  |   {4}   |  {5} | {6}",
                                v.Key.ToString("X8"), info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath));
                        }
                    }
                    else
                    {
                        if (info.ModulesInfo[i].ModulePath == v.Value)
                        {
                            output.Add(String.Format("0x{0} | {1} |  {2}   |  {3}  |   {4}   |  {5} | {6}",
                                v.Key.ToString("X16"), info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath));
                        }
                    }
                }
            }
            WriteToFile(info.WorkingDirectory, "MemorySearch", ".txt", output);
            return output.ToArray();
        }
        #endregion

        #region SearchModules
        /// <summary>
        /// Searches the loaded modules of a process for a string or byte combination.
        /// </summary>
        /// <param name="info">The processInfo object for the process</param>
        /// <param name="searchType">The type of data to be searched for.</param>
        /// <param name="searchString">The string to search for.</param>
        /// <param name="aslr">Remove ASLR libraries.</param>
        /// <param name="safeseh">Remove SafeSEH libraries.</param>
        /// <param name="rebase">Remove rebasable libraries.</param>
        /// <param name="nxcompat">Remove NXCompat libraries.</param>
        /// <param name="osdll">Remove OS Dlls.</param>
        /// <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
        /// <param name="modules">List of modules to be searched</param>
        /// <param name="protection">String array containing protection level returned pointers will.</param>
        /// <returns></returns>
        public static string[] SearchModules(ProcessInfo info, int searchType, string searchString, bool aslr = false,
            bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false,
            byte[] unwantedBytes = null, List<string> modules = null, string protection = "exec")
        {
            List<string> excludedModules = info.CreateExcludesList(aslr, safeseh, rebase, nxcompat, osdll);
            Dictionary<IntPtr, string> result = new Dictionary<IntPtr, string>();

            if (searchType == 0)
            {
                byte[] searchBytes = StringToByteArray(searchString.Replace(" ", ""));
                result = info.SearchModules(searchType, unwantedBytes, searchBytes, null, modules, excludedModules).ReturnValue;
            }
            else
            {
                result = info.SearchModules(searchType, unwantedBytes, null, searchString, modules, excludedModules).ReturnValue;
            }

            if (unwantedBytes != null)
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in result)
                {
                    p.Add(k.Key);
                }
                var pt = PtrRemover.RemovePointers(info.ProcessMachineType, p, unwantedBytes);
                pt = PtrRemover.RemovePointersProtection(info, pt, protection);

                foreach (KeyValuePair<IntPtr, string> k in result.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        result.Remove(k.Key);
                    }
                }
            }
            else
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in result)
                {
                    p.Add(k.Key);
                }
                var pt = PtrRemover.RemovePointersProtection(info, p, protection);

                foreach (KeyValuePair<IntPtr, string> k in result.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        result.Remove(k.Key);
                    }
                }
            }
            List<string> output = new List<string>();
            output.Add(String.Format("List created on {0} by {1}. Search string: {2}", DateTime.Now, info.Author, searchString));
            output.Add("----------------------------------------------------------------------");
            if (info.ProcessMachineType == MachineType.I386)
            {
                output.Add("  Address  | ASLR | SafeSEH | Rebase | NXCompat | OsDLL | Module Path");
            }
            else
            {
                output.Add("      Address      | ASLR | SafeSEH  | Rebase | NXCompat | OsDLL | Module Path");
            }
            output.Add("----------------------------------------------------------------------");
            foreach (KeyValuePair<IntPtr, string> v in result)
            {
                for (int i = 0; i < info.ModulesInfo.Count; i++)
                {
                    if (info.ProcessMachineType == MachineType.I386)
                    {
                        if (info.ModulesInfo[i].ModulePath == v.Value)
                        {
                            output.Add(String.Format("0x{0} | {1} |  {2}   |  {3}  |   {4}   |  {5} | {6}",
                                v.Key.ToString("X8"), info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath));
                        }
                    }
                    else
                    {
                        if (info.ModulesInfo[i].ModulePath == v.Value)
                        {
                            output.Add(String.Format("0x{0} | {1} |  {2}   |  {3}  |   {4}   |  {5} | {6}",
                                v.Key.ToString("X16"), info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath));
                        }
                    }
                }
            }
            WriteToFile(info.WorkingDirectory, "ModuleSearch", ".txt", output);
            return output.ToArray();
        }

        #endregion

        #region GetSEHJumps
        /// <summary>
        /// Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
        /// Passing a list of module paths or names will exclude those modules from the search. 
        /// Similar to Search_All_Memory_PPR however provides output in an easily readable format.
        /// </summary>
        /// <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
        /// <param name="aslr">Remove ASLR libraries.</param>
        /// <param name="safeseh">Remove SafeSEH libraries.</param>
        /// <param name="rebase">Remove rebasable libraries.</param>
        /// <param name="nxcompat">Remove NXCompat libraries.</param>
        /// <param name="osdll">Remove OS Dlls.</param>
        /// <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
        /// <param name="protection">String containing protection level returned pointers will.</param>
        /// <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        public static string[] GetSEHJumps(ProcessInfo info, bool aslr = false,
            bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false,
            byte[] unwantedBytes = null, string protection = "exec")
        {
            List<string> ret = new List<string>();
            List<string> excludedModules = info.CreateExcludesList(aslr, safeseh, rebase, nxcompat, osdll);
            ErcResult<Dictionary<IntPtr, string>> ptrs = info.SearchAllMemoryPPR(excludedModules);

            if (unwantedBytes != null)
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach(KeyValuePair<IntPtr, string> k in ptrs.ReturnValue)
                {
                    p.Add(k.Key);
                }
                var pt = ERC.Utilities.PtrRemover.RemovePointers(info.ProcessMachineType, p, unwantedBytes);
                pt = ERC.Utilities.PtrRemover.RemovePointersProtection(info, pt, protection);

                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        ptrs.ReturnValue.Remove(k.Key);
                    }
                }
            }
            else
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue)
                {
                    p.Add(k.Key);
                }
                var pt = ERC.Utilities.PtrRemover.RemovePointersProtection(info, p, protection);

                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        ptrs.ReturnValue.Remove(k.Key);
                    }
                }
            }

            string sehFilename = GetFilePath(info.WorkingDirectory, "SEH_jumps_", ".txt");
            ret.Add("---------------------------------------------------------------------------------------");
            if (info.Author != "No_Author_Set")
            {
                ret.Add("Process Name: " + info.ProcessName + " Created by: " + info.Author + " " +
                "Total Results: " + ptrs.ReturnValue.Count);
            }
            else
            {
                ret.Add("Process Name: " + info.ProcessName + " Total Results: " + ptrs.ReturnValue.Count);
            }
            ret.Add("---------------------------------------------------------------------------------------");

            if (ptrs.Error != null)
            {
                throw new Exception("Error passed from Search_All_Memory_PPR: " + ptrs.Error.ToString());
            }
            if (info.ProcessMachineType == ERC.MachineType.I386)
            {
                ret.Add("  Address  |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            else
            {
                ret.Add("      Address      |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            byte[] ppr = new byte[5];
            int bytesread = 0;

            if(ptrs.ReturnValue.Count > 0)
            {
                foreach (KeyValuePair<IntPtr, string> s in ptrs.ReturnValue)
                {
                    string holder = "";
                    List<byte> opcodes = new List<byte>();
                    try
                    {
                        ErcCore.ReadProcessMemory(info.ProcessHandle, s.Key, ppr, ppr.Length, out bytesread);
                        for (int i = 0; i < 5; i++)
                        {
                            if (ppr[i].Equals(0xC3))
                            {
                                for (int j = 0; j <= i; j++)
                                {
                                    opcodes.Add(ppr[j]);
                                }
                                ERC.Utilities.OpcodeDisassembler disas = new ERC.Utilities.OpcodeDisassembler(info);
                                var result = disas.Disassemble(opcodes.ToArray());
                                if (info.ProcessMachineType == ERC.MachineType.I386)
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x8") + " | " + holder + " ";

                                }
                                else
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x16") + " | " + holder + " ";
                                }
                                opcodes.Clear();
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        throw e;
                    }

                    for (int i = 0; i < info.ModulesInfo.Count; i++)
                    {
                        if (info.ModulesInfo[i].ModulePath == s.Value)
                        {
                            holder += String.Format("| {0} |  {1}   |  {2}   |   {3}   |  {4}  |  {5} ",
                                info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath);
                        }
                    }
                    ret.Add(holder);
                }
            }
            else
            {
                ret.Add("No compliant POP POP RET instuctions were found.");
            }
            
            File.WriteAllLines(sehFilename, ret);
            return ret.ToArray();
        }

        /// <summary>
        /// Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
        /// Passing a list of module paths or names will exclude those modules from the search. 
        /// Similar to Search_All_Memory_PPR however provides output in an easily readable format.
        /// </summary>
        /// <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions</param>
        /// <param name="ptrsToExclude">Ptrs containing these byte values will be discarded.</param>
        /// <param name="excludes">Modules to be ignored when searching for the instruction sets.</param>
        /// <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        public static string[] GetSEHJumps(ProcessInfo info, byte[] ptrsToExclude, List<string> excludes = null)
        {
            List<string> ret = new List<string>();
            ErcResult<Dictionary<IntPtr, string>> ptrs = info.SearchAllMemoryPPR(ptrsToExclude, excludes);

            string sehFilename = GetFilePath(info.WorkingDirectory, "SEH_jumps_", ".txt");
            ret.Add("---------------------------------------------------------------------------------------");
            if (info.Author != "No_Author_Set")
            {
                ret.Add("Process Name: " + info.ProcessName + " Created by: " + info.Author + " " +
                "Total Jumps: " + ptrs.ReturnValue.Count);
            }
            else
            {
                ret.Add("Process Name: " + info.ProcessName + " Total Jumps: " + ptrs.ReturnValue.Count);
            }
            ret.Add("---------------------------------------------------------------------------------------");

            if (ptrs.Error != null)
            {
                throw new Exception("Error passed from Search_All_Memory_PPR: " + ptrs.Error.ToString());
            }
            if (info.ProcessMachineType == ERC.MachineType.I386)
            {
                ret.Add("  Address  |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            else
            {
                ret.Add("      Address      |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            byte[] ppr = new byte[5];
            int bytesread = 0;

            if(ptrs.ReturnValue.Count > 0)
            {
                foreach (KeyValuePair<IntPtr, string> s in ptrs.ReturnValue)
                {
                    string holder = "";
                    List<byte> opcodes = new List<byte>();
                    try
                    {
                        ErcCore.ReadProcessMemory(info.ProcessHandle, s.Key, ppr, ppr.Length, out bytesread);
                        for (int i = 0; i < 5; i++)
                        {
                            if (ppr[i].Equals(0xC3))
                            {
                                for (int j = 0; j <= i; j++)
                                {
                                    opcodes.Add(ppr[j]);
                                }
                                ERC.Utilities.OpcodeDisassembler disas = new ERC.Utilities.OpcodeDisassembler(info);
                                var result = disas.Disassemble(opcodes.ToArray());
                                if (info.ProcessMachineType == ERC.MachineType.I386)
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x8") + " | " + holder + " ";

                                }
                                else
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x16") + " | " + holder + " ";
                                }
                                opcodes.Clear();
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        throw e;
                    }
                    for (int i = 0; i < info.ModulesInfo.Count; i++)
                    {
                        if (info.ModulesInfo[i].ModulePath == s.Value)
                        {
                            holder += String.Format("| {0} |  {1}   |  {2}   |   {3}   |  {4}  |  {5} ",
                                info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath);
                        }
                    }
                    ret.Add(holder);
                }
            }
            else
            {
                ret.Add("No compliant POP POP RET instuctions were found.");
            }
            
            File.WriteAllLines(sehFilename, ret);
            return ret.ToArray();
        }

        /// <summary>
        /// Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
        /// Passing a list of module paths or names will exclude those modules from the search. 
        /// Similar to Search_All_Memory_PPR however provides output in an easily readable format. This version only returns unicode compliant pointers.
        /// </summary>
        /// <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
        /// <param name="aslr">Remove ASLR libraries.</param>
        /// <param name="safeseh">Remove SafeSEH libraries.</param>
        /// <param name="rebase">Remove rebasable libraries.</param>
        /// <param name="nxcompat">Remove NXCompat libraries.</param>
        /// <param name="osdll">Remove OS Dlls.</param>
        /// <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
        /// <param name="protection">String containing protection level returned pointers will.</param>
        /// <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        public static string[] GetSEHJumpsUnicode(ProcessInfo info, bool aslr = false,
            bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false,
            byte[] unwantedBytes = null, string protection = "exec")
        {
            List<string> ret = new List<string>();
            List<string> excludedModules = info.CreateExcludesList(aslr, safeseh, rebase, nxcompat, osdll);
            ErcResult<Dictionary<IntPtr, string>> ptrs = info.SearchAllMemoryPPR(excludedModules);

            if (unwantedBytes != null)
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue)
                {
                    p.Add(k.Key);
                }
                var pt = ERC.Utilities.PtrRemover.RemovePointers(info.ProcessMachineType, p, unwantedBytes);
                pt = ERC.Utilities.PtrRemover.RemovePointersProtection(info, pt, protection);

                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        ptrs.ReturnValue.Remove(k.Key);
                    }
                }
            }
            else
            {
                List<IntPtr> p = new List<IntPtr>();
                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue)
                {
                    p.Add(k.Key);
                }
                var pt = ERC.Utilities.PtrRemover.RemovePointersProtection(info, p, protection);

                foreach (KeyValuePair<IntPtr, string> k in ptrs.ReturnValue.ToList())
                {
                    if (!pt.Contains(k.Key))
                    {
                        ptrs.ReturnValue.Remove(k.Key);
                    }
                }
            }

            byte[] managedArray = new byte[IntPtr.Size];
            
            foreach (KeyValuePair<IntPtr, string> entry in ptrs.ReturnValue.ToList())
            {
                managedArray = BitConverter.GetBytes((uint)entry.Key);
                if (!(managedArray[0] == 0x00 && managedArray[2] == 0x00) && !(managedArray[1] == 0x00 && managedArray[3] == 0x00))
                {
                    ptrs.ReturnValue.Remove(entry.Key);
                }
            }

            string sehFilename = GetFilePath(info.WorkingDirectory, "SEH_jumps_", ".txt");
            ret.Add("---------------------------------------------------------------------------------------");
            if (info.Author != "No_Author_Set")
            {
                ret.Add("Process Name: " + info.ProcessName + " Created by: " + info.Author + " " +
                "Total Results: " + ptrs.ReturnValue.Count);
            }
            else
            {
                ret.Add("Process Name: " + info.ProcessName + " Total Results: " + ptrs.ReturnValue.Count);
            }
            ret.Add("---------------------------------------------------------------------------------------");

            if (ptrs.Error != null)
            {
                throw new Exception("Error passed from Search_All_Memory_PPR: " + ptrs.Error.ToString());
            }
            if (info.ProcessMachineType == ERC.MachineType.I386)
            {
                ret.Add("  Address  |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            else
            {
                ret.Add("      Address      |      Instructions     | ASLR | SafeSEH  | Rebase  | NXCompat |  OsDLL | Module Path");
            }
            byte[] ppr = new byte[5];
            int bytesread = 0;

            if(ptrs.ReturnValue.Count > 0)
            {
                foreach (KeyValuePair<IntPtr, string> s in ptrs.ReturnValue)
                {
                    string holder = "";
                    List<byte> opcodes = new List<byte>();
                    try
                    {
                        ErcCore.ReadProcessMemory(info.ProcessHandle, s.Key, ppr, ppr.Length, out bytesread);
                        for (int i = 0; i < 5; i++)
                        {
                            if (ppr[i].Equals(0xC3))
                            {
                                for (int j = 0; j <= i; j++)
                                {
                                    opcodes.Add(ppr[j]);
                                }
                                ERC.Utilities.OpcodeDisassembler disas = new ERC.Utilities.OpcodeDisassembler(info);
                                var result = disas.Disassemble(opcodes.ToArray());
                                if (info.ProcessMachineType == ERC.MachineType.I386)
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x8") + " | " + holder + " ";

                                }
                                else
                                {
                                    holder = result.ReturnValue.Replace(Environment.NewLine, ", ");
                                    int index = holder.IndexOf("ret");
                                    holder = holder.Substring(0, index + 3);
                                    holder = "0x" + s.Key.ToString("x16") + " | " + holder + " ";
                                }
                                opcodes.Clear();
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        throw e;
                    }

                    for (int i = 0; i < info.ModulesInfo.Count; i++)
                    {
                        if (info.ModulesInfo[i].ModulePath == s.Value)
                        {
                            holder += String.Format("| {0} |  {1}   |  {2}   |   {3}   |  {4}  |  {5} ",
                                info.ModulesInfo[i].ModuleASLR, info.ModulesInfo[i].ModuleSafeSEH,
                                info.ModulesInfo[i].ModuleRebase, info.ModulesInfo[i].ModuleNXCompat, info.ModulesInfo[i].ModuleOsDll,
                                info.ModulesInfo[i].ModulePath);
                        }
                    }
                    ret.Add(holder);
                }
            }
            else
            {
                ret.Add("No Unicode compliant POP POP RET instructions were found.");
            }
            
            File.WriteAllLines(sehFilename, ret);
            return ret.ToArray();
        }
        #endregion

        #region GenerateByteArray
        /// <summary>
        /// Generates an array of all possible bytes for use when identifying bad characters. Writes the output to disk in the working directory.
        /// </summary>
        /// <param name="unwantedBytes">An array of bytes to be excluded from the final byte array</param>
        /// <param name="core">An ErcCore object</param>
        /// <returns>Returns a byte array of all possible bytes.</returns>
        public static byte[] GenerateByteArray(ErcCore core, byte[] unwantedBytes = null)
        {
            string byteFilename = GetFilePath(core.WorkingDirectory, "ByteArray_", ".bin");
            byte[] byteArray = Payloads.ByteArrayConstructor(unwantedBytes);
            FileStream fs1 = new FileStream(byteFilename, FileMode.Create, FileAccess.Write);
            fs1.Write(byteArray, 0, byteArray.Length);
            fs1.Close();

            string outputString = "---------------------------------------------------------------------------------------" + Environment.NewLine;
            if(unwantedBytes != null)
            {
                outputString += "Byte Array generated at:" + DateTime.Now + "  Omitted values: " + BitConverter.ToString(unwantedBytes).Replace("-", ", ") + Environment.NewLine;
            }
            else
            {
                outputString += "Byte Array generated at:" + DateTime.Now + Environment.NewLine;
            }
            outputString += "---------------------------------------------------------------------------------------" + Environment.NewLine;
            outputString += Environment.NewLine;
            outputString += "Raw:" + Environment.NewLine;

            string raw = "\\x" + BitConverter.ToString(byteArray).Replace("-", "\\x");
            string formattedHex = "";
            for(int i = 0; i < raw.Length; i++)
            {
                if(i == 0)
                {
                    formattedHex += raw[i];
                }
                else if(i % 48 == 0)
                {
                    formattedHex += "\n" + raw[i];
                }
                else
                {
                    formattedHex += raw[i];
                }
                
            }

            outputString += formattedHex;

            outputString += Environment.NewLine + Environment.NewLine + "C#:" + Environment.NewLine;
            string CSharp = "byte[] buf = new byte[]" + Environment.NewLine + "{" + Environment.NewLine;
            string CSharpTemp = "0x" + BitConverter.ToString(byteArray).Replace("-", ", 0x");
            string CSharpFormatted = "";
            int counter = 0;
            for(int i = 0; i < CSharpTemp.Length; i++)
            {
                if(i == 0)
                {
                    CSharpFormatted += "    " + CSharpTemp[i];
                    counter++;
                }
                else if(CSharpTemp[i] == ',' && counter % 8 == 0 && counter != 0)
                {
                    CSharpFormatted += CSharpTemp[i] + "\n    ";
                    i++;
                    counter++;
                }
                else if (CSharpTemp[i] == ',')
                {
                    counter++;
                    CSharpFormatted += CSharpTemp[i];
                }
                else
                {
                    CSharpFormatted += CSharpTemp[i];
                }
            }
            outputString += CSharp + CSharpFormatted + Environment.NewLine + "}";
            File.WriteAllText(byteFilename.Substring(0, (byteFilename.Length - 4)) + ".txt", outputString);

            return byteArray;
        }
        #endregion

        #region CompareByteArrays

        /// <summary>
        /// Compares a the values contained in a memory region to the values in the supplied byte array.
        /// </summary>
        /// <param name="info">The processInfo object that contains the memory region.</param>
        /// <param name="startAddress">The memory address to start the search at.</param>
        /// <param name="byteArray">The byte array the region will be compared against.</param>
        /// <returns>Returns a string detailing differences between the two.</returns>
        public static string[] CompareByteArrayToMemoryRegion(ProcessInfo info, IntPtr startAddress, byte[] byteArray)
        {
            List<string> output = new List<string>();
            byte[] memoryRegion = new byte[byteArray.Length];
            List<byte> mismatchingBytes = new List<byte>();
            int bytesRead = 0;
            output.Add(Convert.htmlWhitespaceFix("                   ----------------------------------------------------"));
            string fromArray  = Convert.htmlWhitespaceFix("        From Array | ");
            string fromRegion = Convert.htmlWhitespaceFix("From Memory Region | "); 
            ErcCore.ReadProcessMemory(info.ProcessHandle, startAddress, memoryRegion, byteArray.Length, out bytesRead);
            int counter = 0;
            for (int i = 0; i <= byteArray.Length; i++)
            {
                if (i == byteArray.Length)
                {
                    counter = 0;
                    fromArray += Convert.htmlWhitespaceFix(" | ");
                    fromRegion += Convert.htmlWhitespaceFix(" | ");
                    string newLine = Convert.htmlWhitespaceFix("                   |                                                  | ");
                    output.Add(fromArray);
                    output.Add(fromRegion);
                    output.Add(newLine);
                    fromArray = Convert.htmlWhitespaceFix("        From Array | ");
                    fromRegion = Convert.htmlWhitespaceFix("From Memory Region | ");
                }
                else
                {
                    if (counter == 16)
                    {
                        counter = 0;
                        fromArray += Convert.htmlWhitespaceFix(" | ");
                        fromRegion += Convert.htmlWhitespaceFix(" | ");
                        string newLine = Convert.htmlWhitespaceFix("                   |                                                  | ");
                        output.Add(fromArray);
                        output.Add(fromRegion);
                        output.Add(newLine);
                        fromArray = Convert.htmlWhitespaceFix("        From Array | ");
                        fromRegion = Convert.htmlWhitespaceFix("From Memory Region | ");
                    }

                    byte[] thisByte = new byte[1];
                    thisByte[0] = byteArray[i];
                    if (byteArray[i] != memoryRegion[i])
                    {
                        mismatchingBytes.Add(byteArray[i]);
                        fromArray += "<b><span style='color:red;'>" + BitConverter.ToString(thisByte) + "</span></b>";
                        thisByte[0] = memoryRegion[i];
                        fromRegion += "<b><span style='color:red;'>" + BitConverter.ToString(thisByte) + "</span></b>";
                    }
                    else
                    {
                        fromArray += BitConverter.ToString(thisByte);
                        thisByte[0] = memoryRegion[i];
                        fromRegion += BitConverter.ToString(thisByte);
                    }

                    fromArray += Convert.htmlWhitespaceFix(" ");
                    fromRegion += Convert.htmlWhitespaceFix(" ");
                    counter++;
                }
            }
            output.Add(Convert.htmlWhitespaceFix("                   ----------------------------------------------------"));
            output.Add("Mismatching Bytes: [" + String.Join(", ", mismatchingBytes.Select(b => BitConverter.ToString(new byte[]{b}))) + "]");
            if(mismatchingBytes.Count > 0)
            {
                output.Add("Remove byte 0x" + BitConverter.ToString(new byte[] { mismatchingBytes.ElementAt(0) }) + " and attempt again.");
            }
            return output.ToArray();
        }
        #endregion

        #region GenerateEggHunters
        /// <summary>
        /// Generates a collection of EggHunter payloads.
        /// </summary>
        /// <param name="core">(Optional) If an ErcCore object is provided the output will also be written out to the working directory </param>
        /// <param name="tag">(Optional) If a tag is provided the payloads will be altered to search for that tag, the default tag is ERCD</param>
        /// <returns>Returns a string containing all EggHunters </returns>
        public static string GenerateEggHunters(ErcCore core = null, string tag = null)
        {
            var eggHunters = Payloads.EggHunterConstructor(tag);
            string eggFilename = "";
            if (core != null)
            {
                eggFilename = GetFilePath(core.WorkingDirectory, "Egg_Hunters_", ".txt");
            }

            string eggTag = "";
            if (tag != null)
            {
                eggTag = tag;
            }
            else
            {
                eggTag = "ERCD";
            }

            string outputString = "";
            outputString = "---------------------------------------------------------------------------------------" + Environment.NewLine;
            outputString += "EggHunters generated at:" + DateTime.Now + " Tag: " + eggTag + Environment.NewLine;
            outputString += "---------------------------------------------------------------------------------------" + Environment.NewLine;
            outputString += Environment.NewLine;
            foreach (KeyValuePair<string, byte[]> k in eggHunters)
            {
                outputString += k.Key + Environment.NewLine;
                outputString += "Raw:" + Environment.NewLine;
                string raw = "\\x" + BitConverter.ToString(k.Value).Replace("-", "\\x");
                var rawlist = Enumerable
                    .Range(0, raw.Length / 48)
                    .Select(i => raw.Substring(i * 48, 48))
                    .ToList();
                raw = string.Join(Environment.NewLine, rawlist);
                outputString += raw;

                outputString += Environment.NewLine + Environment.NewLine + "C#:" + Environment.NewLine;
                string CSharp = "byte[] buf = new byte[]" + Environment.NewLine + "{" + Environment.NewLine;
                string CSharpTemp = "0x" + BitConverter.ToString(k.Value).Replace("-", ", 0x");
                var list = Enumerable
                    .Range(0, CSharpTemp.Length / 48)
                    .Select(i => CSharpTemp.Substring(i * 48, 48))
                    .ToList();
                for (int i = 0; i < list.Count; i++)
                {
                    list[i] = "    " + list[i];
                }
                CSharp += string.Join(Environment.NewLine, list) + Environment.NewLine + "}" + Environment.NewLine + Environment.NewLine;
                outputString += CSharp;
            }
            if (core != null)
            {
                File.WriteAllText(eggFilename, outputString);
            }
            return outputString;
        }
        #endregion

        #region GenerateFindNRPTable
        /// <summary>
        /// Searches the memory of a process for a non repeating pattern.
        /// </summary>
        /// <param name="info">The ProcessInfo object of the process to be searched</param>
        /// <param name="searchType">Integer specifiying the format of the string: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
        /// <param name="extended">Whether the extended character range is to be used when searching for the non repeating pattern</param>
        /// <returns>Returns a List of strings containing the locations the repeating pattern was identified</returns>
        public static string[] GenerateFindNRPTable(ProcessInfo info, int searchType = 0, bool extended = false)
        {
            List<string> output = new List<string>();
            string fnrpFilename = GetFilePath(info.WorkingDirectory, "Find_NRP_", ".txt");
            output.Add("---------------------------------------------------------------------------------------");
            if (info.Author != "No_Author_Set")
            {
                output.Add("Process Name: " + info.ProcessName + " Created by: " + info.Author + " FindNRP table generated at: " + DateTime.Now);
            }
            else
            {
                output.Add("Process Name: " + info.ProcessName + " FindNRP table generated at: " + DateTime.Now);
            }
            output.Add("---------------------------------------------------------------------------------------");
            var fnrp = info.FindNRP(searchType, extended);
            if (fnrp.Error != null)
            {
                output.Add(fnrp.Error.ToString());
                File.WriteAllLines(fnrpFilename, output);
                return output.ToArray();
            }

            for (int i = 0; i < fnrp.ReturnValue.Count; i++)
            {
                string registerInfoText = "";
                if (fnrp.ReturnValue[i].StringOffset >= 0 && !fnrp.ReturnValue[i].Register.Contains("IP") && !fnrp.ReturnValue[i].Register.Contains("SP")
                    && !fnrp.ReturnValue[i].Register.Contains("SEH"))
                {
                    if(fnrp.ReturnValue[i].overwritten == false)
                    {
                        registerInfoText += "Register " + fnrp.ReturnValue[i].Register + " points into pattern at position " + fnrp.ReturnValue[i].StringOffset 
                            + " for " + fnrp.ReturnValue[i].BufferSize + " bytes." + " in thread " + fnrp.ReturnValue[i].ThreadID;
                        output.Add(registerInfoText);
                    }
                    else
                    {
                        registerInfoText += "Register " + fnrp.ReturnValue[i].Register + " is overwritten with pattern at position " + fnrp.ReturnValue[i].StringOffset + " in thread " + fnrp.ReturnValue[i].ThreadID;
                        output.Add(registerInfoText);
                    }
                }
                else if (fnrp.ReturnValue[i].StringOffset > 0 && fnrp.ReturnValue[i].Register.Contains("SP"))
                {
                    registerInfoText += "Register " + fnrp.ReturnValue[i].Register + " points into pattern at position " + fnrp.ReturnValue[i].StringOffset;
                    if (fnrp.ReturnValue[i].RegisterOffset > 0)
                    {
                        registerInfoText += " at " + fnrp.ReturnValue[i].Register + " +" + fnrp.ReturnValue[i].RegisterOffset + " length of pattern found is " +
                            fnrp.ReturnValue[i].BufferSize + " characters" + " in thread " + fnrp.ReturnValue[i].ThreadID;
                        output.Add(registerInfoText);
                    }
                    else
                    {
                        registerInfoText += " length of pattern found is " + fnrp.ReturnValue[i].BufferSize + " characters" + " in thread " + fnrp.ReturnValue[i].ThreadID;
                        output.Add(registerInfoText);
                    }
                }
                else if (fnrp.ReturnValue[i].StringOffset > 0 && fnrp.ReturnValue[i].Register.Contains("IP"))
                {
                    registerInfoText += "Register " + fnrp.ReturnValue[i].Register + " is overwritten with pattern at position " + fnrp.ReturnValue[i].StringOffset + " in thread " + fnrp.ReturnValue[i].ThreadID;
                    output.Add(registerInfoText);
                }
                else if (fnrp.ReturnValue[i].StringOffset > 0 && fnrp.ReturnValue[i].Register.Contains("SEH"))
                {
                    registerInfoText += "SEH register is overwritten with pattern at position " + fnrp.ReturnValue[i].StringOffset + " in thread " + fnrp.ReturnValue[i].ThreadID;
                    output.Add(registerInfoText);
                }
            }

            output = output.Distinct().ToList();
            File.WriteAllLines(fnrpFilename, output);
            return output.ToArray();
        }
        #endregion

        #region RopChainGadgets32
        /// <summary>
        /// Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
        /// </summary>
        /// <param name="rcg">The ROP chain generator object</param>
        /// <param name="gadgetsOnly">Bool to indicate if ROP chains should be included or just gadget lists generated</param>
        /// <returns>Returns an array of strings</returns>
        public static string[] RopChainGadgets32(RopChainGenerator32 rcg, bool gadgetsOnly = false)
        {
            string output = "";
            List<string> totalGadgets = new List<string>();
            List<string> curatedGadgets = new List<string>();
            string totalGadgetsPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "total_gadgest_", ".txt");
            string curatedGadgetsPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "curated_gadgest_", ".txt");
            string ropChainPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "rop_chain_", ".txt");

            output += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            if (rcg.RcgInfo.Author != "No_Author_Set")
            {
                output += "Process Name: " + rcg.RcgInfo.ProcessName + " Gadget list created by: " + rcg.RcgInfo.Author + " " + Environment.NewLine;
            }
            else
            {
                output += "Process Name: " + rcg.RcgInfo.ProcessName + " ROP chain gadget list" + Environment.NewLine;
            }
            output += "------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;

            totalGadgets.Add(output);
            curatedGadgets.Add(output);

            if (rcg.RcgInfo.ProcessMachineType == MachineType.I386)
            {
                totalGadgets.Add("pushEax: ");
                curatedGadgets.Add("pushEax: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEax)
                {
                    if(k.Value.Contains("push eax") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if(!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                        
                }
                totalGadgets.Add("pushEbx: ");
                curatedGadgets.Add("pushEbx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEbx)
                {
                    if (k.Value.Contains("push ebx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEcx: ");
                curatedGadgets.Add("pushEcx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEcx)
                {
                    if (k.Value.Contains("push ecx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEdx: ");
                curatedGadgets.Add("pushEdx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEdx)
                {
                    if (k.Value.Contains("push edx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEsp: ");
                curatedGadgets.Add("pushEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEsp)
                {
                    if (k.Value.Contains("push esp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEbp: ");
                curatedGadgets.Add("pushEbp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEbp)
                {
                    if (k.Value.Contains("push ebp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEsi: ");
                curatedGadgets.Add("pushEsi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEsi)
                {
                    if (k.Value.Contains("push esi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("pushEdi: ");
                curatedGadgets.Add("pushEdi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.pushEdi)
                {
                    if (k.Value.Contains("push edi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("JmpEsp: ");
                curatedGadgets.Add("JmpEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.jmpEsp)
                {
                    if (k.Value.Contains("jmp esp"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("CallEsp: ");
                curatedGadgets.Add("CallEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.callEsp)
                {
                    if (k.Value.Contains("call esp"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEax: ");
                curatedGadgets.Add("xorEax: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEax)
                {
                    if (k.Value.Contains("xor eax") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEbx: ");
                curatedGadgets.Add("xorEbx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEbx)
                {
                    if (k.Value.Contains("xor ebx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEcx: ");
                curatedGadgets.Add("xorEcx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEcx)
                {
                    if (k.Value.Contains("xor ecx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEdx: ");
                curatedGadgets.Add("xorEdx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEdx)
                {
                    if (k.Value.Contains("xor edx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEsi: ");
                curatedGadgets.Add("xorEsi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEsi)
                {
                    if (k.Value.Contains("xor esi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("xorEdi: ");
                curatedGadgets.Add("xorEdi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.xorEdi)
                {
                    if (k.Value.Contains("xor edi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEax: ");
                curatedGadgets.Add("popEax: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEax)
                {
                    if (k.Value.Contains("pop eax") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEbx: ");
                curatedGadgets.Add("popEbx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEbx)
                {
                    if (k.Value.Contains("pop ebx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEcx: ");
                curatedGadgets.Add("popEcx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEcx)
                {
                    if (k.Value.Contains("pop ecx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEdx: ");
                curatedGadgets.Add("popEdx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEdx)
                {
                    if (k.Value.Contains("pop edx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEsp: ");
                curatedGadgets.Add("popEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEsp)
                {
                    if (k.Value.Contains("pop esp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEbp: ");
                curatedGadgets.Add("popEbp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEbp)
                {
                    if (k.Value.Contains("pop ebp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEsi: ");
                curatedGadgets.Add("popEsi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEsi)
                {
                    if (k.Value.Contains("pop esi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("popEdi: ");
                curatedGadgets.Add("popEdi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.popEdi)
                {
                    if (k.Value.Contains("pop edo") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEax: ");
                curatedGadgets.Add("incEax: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEax)
                {
                    if (k.Value.Contains("inc eax") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEax: ");
                curatedGadgets.Add("decEax: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEax)
                {
                    if (k.Value.Contains("dec eax") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEbx: ");
                curatedGadgets.Add("incEbx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEbx)
                {
                    if (k.Value.Contains("inc ebx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEbx: ");
                curatedGadgets.Add("decEbx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEbx)
                {
                    if (k.Value.Contains("dec ebx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEcx: ");
                curatedGadgets.Add("incEcx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEcx)
                {
                    if (k.Value.Contains("inc ecx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEcx: ");
                curatedGadgets.Add("decEcx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEcx)
                {
                    if (k.Value.Contains("dec ecx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEdx: ");
                curatedGadgets.Add("incEdx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEdx)
                {
                    if (k.Value.Contains("inc edx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEdx: ");
                curatedGadgets.Add("decEdx: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEdx)
                {
                    if (k.Value.Contains("dec edx") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEbp: ");
                curatedGadgets.Add("incEbp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEbp)
                {
                    if (k.Value.Contains("inc ebp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }

                }
                totalGadgets.Add("decEbp: ");
                curatedGadgets.Add("decEbp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEbp)
                {
                    if (k.Value.Contains("dec ebp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEsp: ");
                curatedGadgets.Add("incEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEsp)
                {
                    if (k.Value.Contains("inc esp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEsp: ");
                curatedGadgets.Add("decEsp: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEsp)
                {
                    if (k.Value.Contains("dec esp") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEsi: ");
                curatedGadgets.Add("incEsi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEsi)
                {
                    if (k.Value.Contains("inc esi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEsi: ");
                curatedGadgets.Add("decEsi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEsi)
                {
                    if (k.Value.Contains("dec esi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("incEdi: ");
                curatedGadgets.Add("incEdi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.incEdi)
                {
                    if (k.Value.Contains("inc edi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("decEdi: ");
                curatedGadgets.Add("decEdi: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.decEdi)
                {
                    if (k.Value.Contains("dec edi") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("Add: ");
                curatedGadgets.Add("Add: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.add)
                {
                    if (k.Value.Contains("add") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("Sub: ");
                curatedGadgets.Add("Sub: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.sub)
                {
                    if (k.Value.Contains("sub") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("Mov: ");
                curatedGadgets.Add("Mov: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.mov)
                {
                    if (k.Value.Contains("mov") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
                totalGadgets.Add("And: ");
                curatedGadgets.Add("And: ");
                foreach (KeyValuePair<IntPtr, string> k in rcg.x86Opcodes.and)
                {
                    if (k.Value.Contains("and") && k.Value.Contains("ret"))
                    {
                        totalGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                        {
                            curatedGadgets.Add("0x" + k.Key.ToString("X8") + " | " + k.Value);
                        }
                    }
                }
            }
            
            File.WriteAllLines(totalGadgetsPath, totalGadgets);
            File.WriteAllLines(curatedGadgetsPath, curatedGadgets);

            List<string> ropChain = new List<string>();
            if (gadgetsOnly == false)
            {
                if(rcg.VirtualAllocChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: VirtualAlloc Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## VirtualAlloc Template:                                     ##");
                    ropChain.Add("## EAX: 90909090 -> Nop sled                                  ##");
                    ropChain.Add("## ECX: 00000040 -> flProtect                                 ##");
                    ropChain.Add("## EDX: 00001000 -> flAllocationType                          ##");
                    ropChain.Add("## EBX: ???????? -> Int size (area to be set as executable)   ##");
                    ropChain.Add("## ESP: ???????? -> No Change                                 ##");
                    ropChain.Add("## EBP: ???????? -> Jmp Esp # Call Esp                        ##");
                    ropChain.Add("## ESI: ???????? -> ApiAddresses[\"VirtualAlloc\"]              ##");
                    ropChain.Add("## EDI: ???????? -> RopNop                                    ##");
                    ropChain.Add("##                                                            ##");
                    ropChain.Add("## + place ptr to \"jmp esp\" on stack, below PUSHAD            ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");

                }
                foreach (Tuple<byte[], string> k in rcg.VirtualAllocChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                if (rcg.HeapCreateChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: HeapCreate Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## HeapCreate Template:                                       ##");
                    ropChain.Add("## EAX: 90909090 -> Nop sled                                  ##");
                    ropChain.Add("## ECX: 00010000 -> dwMaximumSize                             ##");
                    ropChain.Add("## EDX: 00001000 -> dwInitialSize                             ##");
                    ropChain.Add("## EBX: 00040000 -> flOptions                                 ##");
                    ropChain.Add("## ESP: ???????? -> No Change                                 ##");
                    ropChain.Add("## EBP: ???????? -> Jmp Esp # Call Esp                        ##");
                    ropChain.Add("## ESI: ???????? -> ApiAddresses[\"HeapCreate\"]                ##");
                    ropChain.Add("## EDI: ???????? -> RopNop                                    ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");
                }
                foreach (Tuple<byte[], string> k in rcg.HeapCreateChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                if (rcg.VirtualProtectChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: VirtualProtect Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## VirtualProtect Template:                                   ##");
                    ropChain.Add("## EAX: 90909090 -> Nop sled                                  ##");
                    ropChain.Add("## ECX: ???????? -> flAllocationType                          ##");
                    ropChain.Add("## EDX: 00000040 -> flNewProtect                              ##");
                    ropChain.Add("## EBX: ???????? -> Int size (area to be set as executable)   ##");
                    ropChain.Add("## ESP: ???????? -> No Change                                 ##");
                    ropChain.Add("## EBP: ???????? -> Jmp Esp # Call Esp                        ##");
                    ropChain.Add("## ESI: ???????? -> ApiAddresses[\"VirtualProtect\"]            ##");
                    ropChain.Add("## EDI: ???????? -> RopNop                                    ##");
                    ropChain.Add("##                                                            ##");
                    ropChain.Add("## + place ptr to \"jmp esp\" on stack, below PUSHAD            ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");
                }
                foreach (Tuple<byte[], string> k in rcg.VirtualProtectChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                File.WriteAllLines(ropChainPath, ropChain);
            }

            return ropChain.ToArray();
        }
        #endregion

        #region RopChainGadgets64
        /// <summary>
        /// Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
        /// </summary>
        /// <param name="rcg">The ROP chain generator object</param>
        /// <param name="gadgetsOnly">Bool to indicate if ROP chains should be included or just gadget lists generated</param>
        /// <returns>Returns an array of strings</returns>
        public static string[] RopChainGadgets64(RopChainGenerator64 rcg, bool gadgetsOnly = false)
        {
            string output = "";
            List<string> totalGadgets = new List<string>();
            List<string> curatedGadgets = new List<string>();
            string totalGadgetsPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "total_gadgest_64_", ".txt");
            string curatedGadgetsPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "curated_gadgest_64_", ".txt");
            string ropChainPath = GetFilePath(rcg.RcgInfo.WorkingDirectory, "rop_chain_64_", ".txt");

            output += "-------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            if (rcg.RcgInfo.Author != "No_Author_Set")
            {
                output += "Process Name: " + rcg.RcgInfo.ProcessName + " Gadget list created by: " + rcg.RcgInfo.Author + " " + Environment.NewLine;
            }
            else
            {
                output += "Process Name: " + rcg.RcgInfo.ProcessName + " ROP chain gadget list" + Environment.NewLine;
            }
            output += "-------------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;

            totalGadgets.Add(output);
            curatedGadgets.Add(output);

            totalGadgets.Add("pushRax: ");
            curatedGadgets.Add("pushRax: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRax)
            {
                if (k.Value.Contains("push rax") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }

            }
            totalGadgets.Add("pushRbx: ");
            curatedGadgets.Add("pushRbx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRbx)
            {
                if (k.Value.Contains("push rbx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRcx: ");
            curatedGadgets.Add("pushRcx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRcx)
            {
                if (k.Value.Contains("push rcx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRdx: ");
            curatedGadgets.Add("pushRdx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRdx)
            {
                if (k.Value.Contains("push rdx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRsp: ");
            curatedGadgets.Add("pushRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRsp)
            {
                if (k.Value.Contains("push rsp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRbp: ");
            curatedGadgets.Add("pushRbp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRbp)
            {
                if (k.Value.Contains("push rbp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRsi: ");
            curatedGadgets.Add("pushRsi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRsi)
            {
                if (k.Value.Contains("push rsi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("pushRdi: ");
            curatedGadgets.Add("pushRdi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.pushRdi)
            {
                if (k.Value.Contains("push rdi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("JmpRsp: ");
            curatedGadgets.Add("JmpRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.jmpRsp)
            {
                if (k.Value.Contains("jmp rsp"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("CallRsp: ");
            curatedGadgets.Add("CallRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.callRsp)
            {
                if (k.Value.Contains("call rsp"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorEax: ");
            curatedGadgets.Add("xorEax: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRax)
            {
                if (k.Value.Contains("xor eax") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorRbx: ");
            curatedGadgets.Add("xorRbx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRbx)
            {
                if (k.Value.Contains("xor rbx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorRcx: ");
            curatedGadgets.Add("xorRcx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRcx)
            {
                if (k.Value.Contains("xor rcx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorRdx: ");
            curatedGadgets.Add("xorRdx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRdx)
            {
                if (k.Value.Contains("xor rdx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorRsi: ");
            curatedGadgets.Add("xorRsi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRsi)
            {
                if (k.Value.Contains("xor rsi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("xorRdi: ");
            curatedGadgets.Add("xorRdi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.xorRdi)
            {
                if (k.Value.Contains("xor rdi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRax: ");
            curatedGadgets.Add("popRax: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRax)
            {
                if (k.Value.Contains("pop rax") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRbx: ");
            curatedGadgets.Add("popRbx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRbx)
            {
                if (k.Value.Contains("pop rbx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRcx: ");
            curatedGadgets.Add("popRcx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRcx)
            {
                if (k.Value.Contains("pop rcx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRdx: ");
            curatedGadgets.Add("popRdx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRdx)
            {
                if (k.Value.Contains("pop rdx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRsp: ");
            curatedGadgets.Add("popRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRsp)
            {
                if (k.Value.Contains("pop rsp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRbp: ");
            curatedGadgets.Add("popRbp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRbp)
            {
                if (k.Value.Contains("pop rbp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRsi: ");
            curatedGadgets.Add("popRsi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRsi)
            {
                if (k.Value.Contains("pop rsi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("popRdi: ");
            curatedGadgets.Add("popRdi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.popRdi)
            {
                if (k.Value.Contains("pop rdi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRax: ");
            curatedGadgets.Add("incRax: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRax)
            {
                if (k.Value.Contains("inc rax") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRax: ");
            curatedGadgets.Add("decRax: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRax)
            {
                if (k.Value.Contains("dec eax") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRbx: ");
            curatedGadgets.Add("incRbx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRbx)
            {
                if (k.Value.Contains("inc rbx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRbx: ");
            curatedGadgets.Add("decRbx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRbx)
            {
                if (k.Value.Contains("dec ebx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRcx: ");
            curatedGadgets.Add("incRcx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRcx)
            {
                if (k.Value.Contains("inc rcx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRcx: ");
            curatedGadgets.Add("decRcx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRcx)
            {
                if (k.Value.Contains("dec ecx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRdx: ");
            curatedGadgets.Add("incRdx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRdx)
            {
                if (k.Value.Contains("inc rdx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRdx: ");
            curatedGadgets.Add("decRdx: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRdx)
            {
                if (k.Value.Contains("dec edx") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRbp: ");
            curatedGadgets.Add("incRbp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRbp)
            {
                if (k.Value.Contains("inc rbp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }

            }
            totalGadgets.Add("decRbp: ");
            curatedGadgets.Add("decRbp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRbp)
            {
                if (k.Value.Contains("dec ebp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRsp: ");
            curatedGadgets.Add("incRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRsp)
            {
                if (k.Value.Contains("inc rsp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRsp: ");
            curatedGadgets.Add("decRsp: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRsp)
            {
                if (k.Value.Contains("dec esp") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRsi: ");
            curatedGadgets.Add("incRsi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRsi)
            {
                if (k.Value.Contains("inc rsi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRsi: ");
            curatedGadgets.Add("decRsi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRsi)
            {
                if (k.Value.Contains("dec esi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("incRdi: ");
            curatedGadgets.Add("incRdi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.incRdi)
            {
                if (k.Value.Contains("inc rdi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("decRdi: ");
            curatedGadgets.Add("decRdi: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.decRdi)
            {
                if (k.Value.Contains("dec edi") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("Add: ");
            curatedGadgets.Add("Add: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.add)
            {
                if (k.Value.Contains("add") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            totalGadgets.Add("Mov: ");
            curatedGadgets.Add("Mov: ");
            foreach (KeyValuePair<IntPtr, string> k in rcg.x64Opcodes.mov)
            {
                if (k.Value.Contains("mov") && k.Value.Contains("ret"))
                {
                    totalGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    if (!k.Value.Any(char.IsDigit) && !k.Value.ToLower().Contains("invalid"))
                    {
                        curatedGadgets.Add("0x" + k.Key.ToString("X16") + " | " + k.Value);
                    }
                }
            }
            
            File.WriteAllLines(totalGadgetsPath, totalGadgets);
            File.WriteAllLines(curatedGadgetsPath, curatedGadgets);

            List<string> ropChain = new List<string>();
            if (gadgetsOnly == false)
            {
                if (rcg.VirtualAllocChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: VirtualAlloc Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## VirtualAlloc Template:                                     ##");
                    ropChain.Add("## RCX: 0x???????????????? ->  Pointer (copys RSP)            ##");
                    ropChain.Add("## RDX: 0x0000000000000500 ->  dwSize                         ##");
                    ropChain.Add("## R8 : 0x0000000000001000 ->  flAllocationType               ##");
                    ropChain.Add("## R9 : 0x0000000000000040 ->  flProtect                      ##");
                    ropChain.Add("##                                                            ##");
                    ropChain.Add("## + place a pointer to VirtualAlloc on stack                 ##");
                    ropChain.Add("## + place ptr to \"jmp rsp\" on stack                          ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");

                }
                foreach (Tuple<byte[], string> k in rcg.VirtualAllocChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                if (rcg.HeapCreateChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: HeapCreate Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## HeapCreate Template:                                       ##");
                    ropChain.Add("## RCX: 0x0000000000040000 ->  flOptions                      ##");
                    ropChain.Add("## RDX: 0x0000000000000500 ->  dwInitialSize                  ##");
                    ropChain.Add("## R8 : 0x0000000000001000 ->  dwMaximumSize                  ##");
                    ropChain.Add("##                                                            ##");
                    ropChain.Add("## + place a pointer to VirtualAlloc on stack                 ##");
                    ropChain.Add("## + place ptr to \"jmp rax\" on stack                          ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");
                }
                foreach (Tuple<byte[], string> k in rcg.HeapCreateChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                if (rcg.VirtualProtectChain.Count > 0)
                {
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("Method: VirtualProtect Process Name: " + rcg.RcgInfo.ProcessName);
                    ropChain.Add("------------------------------------------------------------------------------------------------------------------------");
                    ropChain.Add("");
                    ropChain.Add("################################################################");
                    ropChain.Add("## VirtualProtect Template:                                   ##");
                    ropChain.Add("## RCX: 0x???????????????? ->  Pointer (copys RSP)            ##");
                    ropChain.Add("## RDX: 0x0000000000000500 ->  dwSize                         ##");
                    ropChain.Add("## R8 : 0x0000000000001000 ->  flAllocationType               ##");
                    ropChain.Add("## R9 : 0x???????????????? ->  flProtect (copys RSP)          ##");
                    ropChain.Add("##                                                            ##");
                    ropChain.Add("## + place a pointer to VirtualAlloc on stack                 ##");
                    ropChain.Add("## + place ptr to \"jmp rsp\" on stack                          ##");
                    ropChain.Add("################################################################");
                    ropChain.Add("");
                }
                foreach (Tuple<byte[], string> k in rcg.VirtualProtectChain)
                {
                    Array.Reverse(k.Item1, 0, k.Item1.Length);
                    ropChain.Add(BitConverter.ToString(k.Item1).Replace("-", "\\x") + " | " + k.Item2);
                }
                ropChain.Add(Environment.NewLine);

                File.WriteAllLines(ropChainPath, ropChain);
            }

            return ropChain.ToArray();
        }

        private static string ConvertRopElementToString(Tuple<IntPtr, string> element)
        {
            string ret = "0x" + element.Item1.ToString("X16") + " | " + element.Item2;
            return ret;
        }
        #endregion

        #region Assemble Opcodes
        /// <summary>
        /// Converts a collection of instructions into the associated opcodes.
        /// </summary>
        /// <param name="instructions">An array containing either x86 or x64 instructions.</param>
        /// <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
        /// <returns>Returns null if the method fails.</returns>
        public static string[] AssembleOpcodes(string[] instructions, uint machine)
        {
            string[] opcodeArray = null;
            MachineType mt;
            if(machine == 0)
            {
                mt = MachineType.I386;
            }
            else if(machine == 1)
            {
                mt = MachineType.x64;
            }
            else
            {
                throw new ERCException("Invalid machine type provided. Value provided = " + machine + ". Uint 0 = x86, 1 = x64");
            }
            var instructionsList = instructions.ToList();
            var asmResult = OpcodeAssembler.AssembleOpcodes(instructionsList, mt);
            if (asmResult.Error != null)
            {
                throw asmResult.Error;
            }
            string opcodes = BitConverter.ToString(asmResult.ReturnValue).Replace("-", " ");
            opcodeArray = opcodes.Split(' ');
            return opcodeArray;
        }

        /// <summary>
        /// Converts a collection of instructions into the associated opcodes.
        /// </summary>
        /// <param name="instructions">An array containing either x86 or x64 instructions.</param>
        /// <param name="machine">MachineType of the instruction set to be assembled.</param>
        /// <returns>Returns null if the method fails.</returns>
        public static string[] AssembleOpcodes(string[] instructions, MachineType machine)
        {
            string[] opcodeArray = null;
            if(machine != MachineType.I386 && machine != MachineType.x64)
            {
                throw new ERCException("Invalid machine type provided.");
            }
            var instructionsList = instructions.ToList();
            var asmResult = OpcodeAssembler.AssembleOpcodes(instructionsList, machine);
            if(asmResult.Error != null)
            {
                throw asmResult.Error;
            }
            string opcodes = BitConverter.ToString(asmResult.ReturnValue).Replace("-", " ");
            opcodeArray = opcodes.Split(' ');
            return opcodeArray;
        }
        #endregion

        #region Disassemble Opcodes
        /// <summary>
        /// Converts a collection of opcodes into the associated instructions.
        /// </summary>
        /// <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
        /// <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
        /// <returns>Returns null if the method fails.</returns>
        public static string[] DisassembleOpcodes(byte[] opcodes, uint machine)
        {
            string[] instructionArray = null;
            MachineType mt;
            if (machine == 0)
            {
                mt = MachineType.I386;
            }
            else if (machine == 1)
            {
                mt = MachineType.x64;
            }
            else
            {
                throw new ERCException("Invalid machine type provided. Value provided = " + machine + ". Uint 0 = x86, 1 = x64");
            }
            
            var disassembledInstructions = OpcodeDisassembler.Disassemble(opcodes, mt);
            if (disassembledInstructions.Error != null)
            {
                throw disassembledInstructions.Error;
            }
            instructionArray = disassembledInstructions.ReturnValue.Split('\n');
            return instructionArray;
        }

        /// <summary>
        /// Converts a collection of opcodes into the associated instructions.
        /// </summary>
        /// <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
        /// <param name="machine">MachineType of the instruction set to be assembled.</param>
        /// <returns>Returns null if the method fails.</returns>
        public static string[] DisassembleOpcodes(byte[] opcodes, MachineType machine)
        {
            string[] instructionArray = null;
            if (machine != MachineType.I386 && machine != MachineType.x64)
            {
                throw new ERCException("Invalid machine type provided.");
            }
            var disassembledInstructions = OpcodeDisassembler.Disassemble(opcodes, machine);
            if(disassembledInstructions.Error != null)
            {
                throw disassembledInstructions.Error;
            }
            instructionArray = disassembledInstructions.ReturnValue.Split('\n');
            return instructionArray;
        }
        #endregion

        #region StringToByteArray
        /// <summary>
        /// Converts a string of hex characters to a byte array of the associated values.
        /// </summary>
        /// <param name="hex">A string containing hex characters.</param>
        /// <returns>Returns a byte array.</returns>
        private static byte[] StringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length)
                             .Where(x => x % 2 == 0)
                             .Select(x => System.Convert.ToByte(hex.Substring(x, 2), 16))
                             .ToArray();
        }
        #endregion

        #region Dump Memory
        /// <summary>
        /// Reads a set of bytes from process memory and provides a string contianing the results.
        /// </summary>
        /// <param name="info">ProcessInfo object</param>
        /// <param name="startAddress">The address to start reading from.</param>
        /// <param name="length">The number of bytes to read.</param>
        /// <param name="writeToFile">Bool indicating if output should be written to a file.</param>
        /// <returns>A string containing the bytes read from memory</returns>
        public static string DumpMemory(ProcessInfo info, IntPtr startAddress, int length, bool writeToFile = true)
        {
            string dumpFilename = GetFilePath(info.WorkingDirectory, "MemoryDump_", ".txt");
            ErcResult<byte[]> result = info.DumpMemoryRegion(startAddress, length);
            string output = "";

            int bytesPerLine = 0;
            Console.WriteLine("Here 1");
            if (info.ProcessMachineType == MachineType.I386)
            {
                bytesPerLine = 8;
            }
            else 
            {
                bytesPerLine = 16;
            }

            output += "----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;
            output += "Contents of memory region 0x" + startAddress.ToString("X" + bytesPerLine) + " - 0x" + (startAddress + length).ToString("X" + bytesPerLine)
                + " Created at: " + DateTime.Now + ". Created by: " + info.Author + Environment.NewLine;
            output+= "----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine;

            for (int i = 0; i < result.ReturnValue.Length; i++)
            {
                if (i == 0)
                {
                    output += startAddress.ToString("X" + bytesPerLine) + ": " + result.ReturnValue[i].ToString("X2") + " ";
                }
                else if (i % bytesPerLine == 0)
                {
                    output += Environment.NewLine;
                    output += (startAddress + ((i / bytesPerLine) * bytesPerLine)).ToString("X" + bytesPerLine) + ": " + result.ReturnValue[i].ToString("X2") + " ";
                }
                else
                {
                    output += result.ReturnValue[i].ToString("X2") + " ";
                }
            }

            if (writeToFile == true)
            {
                File.WriteAllText(dumpFilename, output);
            }
            Console.WriteLine("Here 3");
            return output;
        }
        #endregion

        #region Dump Heap
        /// <summary>
        /// Reads a set of bytes from a specific heap and provides a string contianing the results. Either HeapID or startAddress must be supplied. If both are supplied HeapID takes precedence.
        /// </summary>
        /// <param name="hi">HeapInfo object</param>
        /// <param name="heapid">The ID of the heap to be dumped. (optional)</param>
        /// <param name="hexStartAddress">The start address of the specific heap block to be dumped in hexadecimal. (optional)</param>
        /// <param name="writeToFile">Bool indicating if output should be written to a file.(optional)</param>
        /// <returns>A string containing the bytes read from memory</returns>
        public static string[] DumpHeap(HeapInfo hi, ulong heapid = 0, string hexStartAddress = "", bool writeToFile = true)
        {
            List<string> output = new List<string>();
            
            if (hexStartAddress.Contains("0x") || hexStartAddress.Contains("0x") || hexStartAddress.Contains("x") || hexStartAddress.Contains("X"))
            {
                hexStartAddress = hexStartAddress.Replace("0x", "");
                hexStartAddress = hexStartAddress.Replace("0X", "");
                hexStartAddress = hexStartAddress.Replace("X", "");
                hexStartAddress = hexStartAddress.Replace("x", "");
            }

            ulong startAddress = 0;
            if (hi.HeapProcess.ProcessMachineType == MachineType.I386)
            {
                try
                {
                    startAddress = (uint)System.Convert.ToInt32(hexStartAddress, 16);
                }
                catch 
                {
                }

            }
            else
            {
                try
                {
                    startAddress = (ulong)System.Convert.ToInt64(hexStartAddress, 16);
                }
                catch 
                {
                }
            }

            if (heapid == 0 && startAddress == 0)
            {
                List<string> ret = new List<string>();
                ret.Add("Neither heapID or start address supplied. One must be supplied in order to utilize this method.");
                return ret.ToArray();
            }

            Dictionary<IntPtr, int> searches = new Dictionary<IntPtr, int>();
            if(heapid != 0)
            {
                foreach (Structures.HEAPENTRY32 he in hi.HeapEntries)
                {
                    if ((ulong)he.th32HeapID == heapid)
                    {
                        if (!searches.ContainsKey(he.dwAddress))
                        {
                            searches.Add(he.dwAddress, (int)he.dwBlockSize);
                        }
                    }
                }
            }
            else
            {
                foreach (Structures.HEAPENTRY32 he in hi.HeapEntries)
                {
                    if ((ulong)he.dwAddress == startAddress)
                    {
                        heapid = (ulong)he.th32HeapID;
                        if (!searches.ContainsKey(he.dwAddress))
                        {
                            searches.Add(he.dwAddress, (int)he.dwBlockSize);
                        }
                    }
                }
            }
            
            
            string dumpFilename = GetFilePath(hi.HeapProcess.WorkingDirectory, "HeapDump_", ".txt");
            int bytesPerLine = 0;

            output.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);
            output.Add("Contents of process heap: " + heapid + " Created at: " + DateTime.Now + ". Created by: " + hi.HeapProcess.Author + Environment.NewLine);
            output.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);

            if (hi.HeapProcess.ProcessMachineType == MachineType.I386)
            {
                bytesPerLine = 8;
            }
            else 
            {
                bytesPerLine = 16;
            }

            foreach (KeyValuePair<IntPtr, int> kv in searches)
            {
                ErcResult<byte[]> result = hi.HeapProcess.DumpMemoryRegion(kv.Key, kv.Value);

                for (int i = 0; i < result.ReturnValue.Length; i++)
                {
                    if (i == 0)
                    {
                        output.Add(Environment.NewLine + kv.Key.ToString("X" + bytesPerLine) + ": " + result.ReturnValue[i].ToString("X2") + " ");
                    }
                    else if (i % bytesPerLine == 0)
                    {
                        output.Add(Environment.NewLine);
                        output.Add((kv.Key + ((i / bytesPerLine) * bytesPerLine)).ToString("X" + bytesPerLine) + ": " + result.ReturnValue[i].ToString("X2") + " ");
                    }
                    else
                    {
                        output.Add(result.ReturnValue[i].ToString("X2") + " ");
                    }
                }
            }

            if (writeToFile == true)
            {
                File.WriteAllLines(dumpFilename, output);
            }

            return output.ToArray();
        }
        #endregion

        #region Heap Stats
        /// <summary>
        /// Returns statistics about the heap information gathered about the current process.
        /// </summary>
        /// <param name="hi"></param>
        /// <returns>Returns an of strings</returns>
        public static string[] HeapStats(HeapInfo hi, ulong heapID = 0, string hexStartAddress = "", bool extended = false)
        {
            List<string> result = new List<string>();
            result = new List<string>();
            result.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);
            result.Add("Heap statistics for process: " + hi.HeapProcess.ProcessName + " Created at: " + DateTime.Now + ". Created by: " + hi.HeapProcess.Author + Environment.NewLine);
            result.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);
            foreach (string s in hi.HeapStatistics(extended, heapID, hexStartAddress).ReturnValue)
            {
                result.Add(s);
            }
            return result.ToArray();
        }
        #endregion

        #region ListHeapIDs
        /// <summary>
        /// Returns a list of IDs for each heap associated with the current process.
        /// </summary>
        /// <param name="hi">A HeapInfo object.</param>
        /// <returns>Retruns an array of strings containing the heapIds.</returns>
        public static string[] ListHeapIDs(HeapInfo hi)
        {
            var output = hi.HeapIDs();
            List<string> result = new List<string>();

            result.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);
            result.Add("Heap IDs associated with process: " + hi.HeapProcess.ProcessName + " Created at: " + DateTime.Now + ". Created by: " + hi.HeapProcess.Author + Environment.NewLine);
            result.Add("----------------------------------------------------------------------------------------------------------------------" + Environment.NewLine);

            int heapnum = 1;
            foreach(ulong ul in output.ReturnValue)
            {
                result.Add("Heap " + heapnum + " ID = " + ul + Environment.NewLine);
            }

            return result.ToArray();
        }
        #endregion

        #region Search Heap
        /// <summary>
        /// Searches the process heap for a specific byte patters. If heapID and hexStartAddress are specified heapID takes precedence. Takes an optional bool indicating if output should be written to file.
        /// </summary>
        /// <param name="hi">HeapInfo object.</param>
        /// <param name="searchBytes">Pattern to be searched for.</param>
        /// <param name="heapID">Optional parameter indicating which heap to search.</param>
        /// <param name="hexStartAddress">Optional parameter indicating the start address of the heap object to search</param>
        /// <param name="writeToFile">Bool indicating if the output should be written to file.</param>
        /// <returns>Returns an array of strings.</returns>
        public static string[] SearchHeap(HeapInfo hi, byte[] searchBytes, ulong heapID = 0, string hexStartAddress = "", bool writeToFile = true)
        {
            var output = hi.SearchHeap(searchBytes, heapID, hexStartAddress);
            List<string> result = new List<string>();
            if(output.Error != null)
            {
                result.Add("ERROR: " + output.Error.Message + Environment.NewLine);
            }

            if(output.ReturnValue.Count == 0)
            {
                result.Add(String.Format("Search table on {0} by {1}. Search string: 0x{2}", DateTime.Now, hi.HeapProcess.Author, BitConverter.ToString(searchBytes).Replace("-", "")) + Environment.NewLine);
                result.Add("----------------------------------------------------------------------" + Environment.NewLine);
                result.Add("No instances of the pattern were found." + Environment.NewLine);
                return result.ToArray();
            }

            result.Add(String.Format("Search table created on {0} by {1}. Search string: 0x{2}", DateTime.Now, hi.HeapProcess.Author, BitConverter.ToString(searchBytes).Replace("-", "")) + Environment.NewLine);
            result.Add("----------------------------------------------------------------------" + Environment.NewLine);
            
            if(hi.HeapProcess.ProcessMachineType == MachineType.I386)
            {
                result.Add("  Address   | Heap ID  | Heap Entry Start Address " + Environment.NewLine);
                foreach (Tuple<IntPtr, IntPtr, IntPtr> t in output.ReturnValue)
                {
                    result.Add(" 0x" + t.Item1.ToString("X8") + " | " + (uint)t.Item2 + " | 0x" + t.Item3.ToString("X8") + Environment.NewLine);
                }
            }
            else
            {
                result.Add("       Address      |    Heap ID    | Heap Entry Start Address " + Environment.NewLine);
                foreach (Tuple<IntPtr, IntPtr, IntPtr> t in output.ReturnValue)
                {
                    result.Add(" 0x" + t.Item1.ToString("X16") + " | " + (ulong)t.Item2 + " | 0x" + t.Item3.ToString("X16") + Environment.NewLine);
                }
            }
            result.Add(Environment.NewLine);
            return result.ToArray();
        }
        #endregion
    }
}



================================================
File: ERC/ERC/ERC.Net.csproj
================================================
ï»¿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <Platforms>AnyCPU;x64;x86</Platforms>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x86</PlatformTarget>
    <DocumentationFile>..\..\ERC.net\ERC\ERC.Net.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x86</PlatformTarget>
    <DocumentationFile>..\..\ERC.net\ERC\ERC.Net.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x64</PlatformTarget>
    <DocumentationFile>..\..\ERC.net\ERC\ERC.Net.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Costura.Fody" Version="5.7.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Platforms" Version="7.0.0" />
    <PackageReference Include="NETStandard.Library" Version="2.0.3" />
    <PackageReference Include="Reloaded.Assembler" Version="1.0.14" />
    <PackageReference Include="Reloaded.Memory" Version="8.0.1" />
    <PackageReference Include="SharpDisasm" Version="1.1.11" />
    <PackageReference Include="System.Console" Version="4.3.1" />
    <PackageReference Include="System.Diagnostics.DiagnosticSource" Version="7.0.0" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <PackageReference Include="System.Net.Primitives" Version="4.3.1" />
    <PackageReference Include="System.Runtime" Version="4.3.1" />
    <PackageReference Include="System.Runtime.Extensions" Version="4.3.1" />
    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.1" />
    <PackageReference Include="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
    <PackageReference Include="System.Text.RegularExpressions" Version="4.3.1" />
    <PackageReference Include="System.Xml.ReaderWriter" Version="4.3.1" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Fasm.NET">
      <HintPath>..\..\ConsoleApp1\ConsoleApp1\bin\Debug\Fasm.NET.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Assembler">
      <HintPath>..\..\ConsoleApp1\ConsoleApp1\bin\Debug\Reloaded.Assembler.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory">
      <HintPath>..\..\ConsoleApp1\ConsoleApp1\bin\Debug\Reloaded.Memory.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory.Buffers">
      <HintPath>..\..\ConsoleApp1\ConsoleApp1\bin\Debug\Reloaded.Memory.Buffers.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="Payloads.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="Thread_Info.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="ERCException.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="RopChainGenerator32.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="RopChainGenerator64.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="PtrRemover.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="Convert.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="Heap_Info.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeLibs Remove="Win32Errors.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="C:\Users\Andy\.nuget\packages\reloaded.assembler\1.0.5\build\FASM-LICENSE.TXT" />
  </ItemGroup>

</Project>



================================================
File: ERC/ERC/ERC.Net.xml
================================================
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ERC.Net</name>
    </assembly>
    <members>
        <member name="T:ERC.Utilities.Convert">
            <summary>
            Static class containing methods for common conversions.
            </summary>
        </member>
        <member name="M:ERC.Utilities.Convert.HexToAscii(System.String)">
            <summary>
            Converts a hex string to ASCII."
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>A string containing the equivalent ASCII values</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.HexToBytes(System.String)">
            <summary>
            Converts a hex string to the equivalent bytes.
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>A byte array containing the associated values.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.AsciiToBytes(System.String)">
            <summary>
            Converts an ASCII string to a byte array.
            </summary>
            <param name="ascii">An ASCII string.</param>
            <returns>A byte array containing the associated values.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.AsciiToHex(System.String)">
            <summary>
            Converts an ASCII string to a hex string
            </summary>
            <param name="ascii">An ASCII string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UnicodeToBytes(System.String)">
            <summary>
            Converts a Unicode string to a byte array.
            </summary>
            <param name="unicode">A Unicode string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UnicodeToHex(System.String)">
            <summary>
            Converts a Unicode string to a hex string.
            </summary>
            <param name="unicode">A Unicode string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF7ToBytes(System.String)">
            <summary>
            Converts a UTF-7 string to a byte array.
            </summary>
            <param name="utf7">A UTF-7 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF7ToHex(System.String)">
            <summary>
            Converts a UTF-7 string to a hex string.
            </summary>
            <param name="utf7">A UTF-7 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF8ToBytes(System.String)">
            <summary>
            Converts a UTF-8 string to a byte array.
            </summary>
            <param name="utf8">A UTF-8 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF8ToHex(System.String)">
            <summary>
            Converts a UTF-8 string to a hex string.
            </summary>
            <param name="utf8">A UTF-8 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF32ToBytes(System.String)">
            <summary>
            Converts a UTF-32 string to a byte array.
            </summary>
            <param name="utf32">A UTF-32 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF32ToHex(System.String)">
            <summary>
            Converts a UTF-32 string to a hex string.
            </summary>
            <param name="utf32">A UTF-32 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="T:ERC.Utilities.OpcodeAssembler">
            <summary>
            OpcodeAssembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
            a static function to assemble instructions.
            </summary>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">ProcessInfo object to be inherited from.</param>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String})">
            <summary>
            Takes either an array or list of strings containing assembly instructions and returns the associated opcodes.  
            </summary>
            <param name="instructions">The instructions to be assembled</param>
            <returns>Returns an ErcResult byte array containing the assembled instructions</returns>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String},ERC.MachineType)">
            <summary>
            Takes either an array or list of strings containing assembly instructions, a MachineType of I386 or x64, 
            an instance of the ERC_Core object and returns the associated opcodes.  
            </summary>
            <param name="instructions">The instructions to be assemble=d</param>
            <param name="machineType">a ERC.MachineType of either I386 or x64</param>
            <returns>Returns an ERC_Result byte array containing the assembled instructions</returns>
        </member>
        <member name="T:ERC.Utilities.OpcodeDisassembler">
            <summary>
            OpcodeDisassembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
            a static function to disassemble opcodes.
            </summary>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">ProcessInfo object to be inherited from.</param>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])">
            <summary>
            Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes. 
            </summary>
            <param name="opcodes">The opcodes to be disassembled</param>
            <returns>Returns an ERC_Result containing associated instructions.</returns>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType)">
            <summary>
            Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64, 
            an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.
            </summary>
            <param name="opcodes">A byte array containing opcodes to be disassembled</param>
            <param name="machineType">a ERC.MachineType of either I386 or x64</param>
            <returns>Returns an ERC_Result containing associated instructions.</returns>
        </member>
        <member name="T:ERC.Utilities.PatternTools">
            <summary>
            Static class used to build a non repeating pattern and identify the position of a string in a non repeating pattern.
            </summary>
        </member>
        <member name="M:ERC.Utilities.PatternTools.PatternCreate(System.Int32,ERC.ErcCore,System.Boolean)">
            <summary>
            Creates a string of non repeating characters.
            </summary>
            <param name="length">The length of the pattern to be created as integer</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
            <returns>Returns an ErcResult string containing the generated pattern</returns>
        </member>
        <member name="M:ERC.Utilities.PatternTools.PatternOffset(System.String,ERC.ErcCore,System.Boolean)">
            <summary>
            Takes a string of characters and returns the location of the first character in a pattern created by Pattern_Create.
            </summary>
            <param name="pattern">The pattern to be searched for.</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
            <returns>Returns an ErcResult int containing the offset of the supplied pattern within the generated pattern</returns>
        </member>
        <member name="T:ERC.Utilities.Payloads">
            <summary>
            A collecton of methods which generate payloads.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.DefaultEgg">
            <summary>
            Default egg hunter tag.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter641">
            <summary>
            A 64 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter642">
            <summary>
            A second 64 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter32">
            <summary>
            A 32 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunterWOW64">
            <summary>
            An egg hunter that will work on 32 bit systems or 32 bit processes running under WOW64.
            </summary>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])">
            <summary>
            Creates an array of all possible byte values except those passed to the function. 
            </summary>
            <param name="unwantedBytes">Takes a byte array of bytes to be excluded</param>
            <returns>Returns an array of all other possible bytes.</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.EggHunterConstructor(System.String)">
            <summary>
            Generates a selection of EggHunter payloads. A custom tag can be specified, if no tag is specified EggHunters will search for the default tag (ERCD)
            </summary>
            <param name="tag">A custom tag which the egg hunters will search for.</param>
            <returns>Returns a dictionary containing a list of EggHunters and string detailing them</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.PopPopRet(System.Byte[])">
            <summary>
            Finds all instances of POP X POP X RET in a given byte array. 
            </summary>
            <param name="data">Byte array to be searched</param>
            <returns>Returns an array of integers containing the offsets of the instruction sets.</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])">
            <summary>
            Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
            bytes which can not be passed into a program without corrupting the input.
            </summary>
            <param name="info">The process to compare memory from</param>
            <param name="startAddress">The address at which to start the comparison</param>
            <param name="bytes">The byte array containing the bytes to be compared</param>
            <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
            the bytes provided and a byte array containing the bytes read from process memory</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)">
            <summary>
            Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
            bytes which can not be passed into a program without corrupting the input.
            </summary>
            <param name="info">The process to compare memory from</param>
            <param name="startAddress">The address at which to start the comparison</param>
            <param name="byteFilePath">The path to a file containing the bytes to be compared</param>
            <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
            the bytes provided and a byte array containing the bytes read from process memory</returns>
        </member>
        <member name="T:ERC.Utilities.PtrRemover">
            <summary>
            Contains methods for identifying and removing pointers to unwanted data.
            </summary>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.List{System.IntPtr},System.Byte[])">
            <summary>
            Removes pointers which contain unwanted bytes. 
            </summary>
            <param name="mt">MachineType architecture of the associated process.</param>
            <param name="srcList">The list from which to remove the pointers</param>
            <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
            <returns>Returns a ErcResult of List IntPtr</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.Dictionary{System.IntPtr,System.String},System.Byte[])">
            <summary>
            Removes pointers which contain unwanted bytes. 
            </summary>
            <param name="mt">MachineType architecture of the associated process.</param>
            <param name="srcList">The list from which to remove the pointers</param>
            <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
            <returns>Returns a ErcResult of Dictionary IntPtr, String</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.String)">
            <summary>
            Removes pointers from a dictionary when pointers do not have the protection level specified.
            </summary>
            <param name="info">ProcessInfo object of the associated process.</param>
            <param name="srcList">List of pointers.</param>
            <param name="protection">Specified protection level of pointers.</param>
            <returns>Returns a Dictionary of Intptr, string</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.UInt32)">
            <summary>
            Removes pointers from a dictionary when pointers do not have the protection level specified.
            </summary>
            <param name="info">ProcessInfo object of the associated process.</param>
            <param name="srcList">List of pointers.</param>
            <param name="protection">Specified protection level of pointers.</param>
            <returns>Returns a Dictionary of Intptr, string</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator32">
            <summary> Attempts to create Rop chains from 64 bit processes. </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.VirtualAllocChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="_info">The ProcessInfo object.</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetApiAddresses(ERC.ProcessInfo)">
            <summary>
            Gets the handles of 4 functions associated with building ROP chains: VirtualAlloc, HeapCreate, VirtualProtect and WriteProcessMemory
            </summary>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetRopNops(System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of RopNops from the current process memory.
            </summary>
            <param name="excludes">A list of modules to be excluded from the search</param>
            <returns>Returns a ErcResult containing a list of IntPtr</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.ZeroRegister(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
            followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
            </summary>
            <param name="modifyingReg">The Register32 value for the register to be zeroed.</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
            <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.SetRegisterModifier(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Sets the flag of a Register32 enum in a RegisterModifiers32 class. This flag is used to identify whether setting the value of one 
            register involved editing another register. For example if setting EAX involved modifying EBX then RegisterModifiers32.EAX will have the EBX flag set. Any
            register should not be able to modify the value of any other register twice.
            
            The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
            </summary>
            <param name="modifiedReg">The Registers32 which is being modified</param>
            <param name="modifyingReg">The Registers32 which is doing the modification</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetRegisterModified(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Returns a boolean indicating whether one register has modified the value of another register attempting to set the correct value.
            </summary>
            <param name="modifiedReg">The Registers32 which is being modified</param>
            <param name="modifyingReg">The Registers32 which is doing the modification</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
            <returns>A bool, true = register was modified by this register false = register was not modified by this register</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetMovInstruction(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Finds a mov instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetAddInstruction(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Finds a add instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.CompleteRegisters32(ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Checks all values of a Registers32 enum and returns false if any of them are not set. 
            </summary>
            <param name="regState">The Registers32 object to be tested</param>
            <returns>A boolean value is returned</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator32.X86Lists">
            <summary>
            Contains lists of instructions for specific registers.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEax">
            <summary>
            pushEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx">
            <summary>
            pushEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx">
            <summary>
            pushEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx">
            <summary>
            pushEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp">
            <summary>
            pushEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp">
            <summary>
            pushEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi">
            <summary>
            pushEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi">
            <summary>
            pushEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp">
            <summary>
            jmpEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.callEsp">
            <summary>
            callEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEax">
            <summary>
            xorEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx">
            <summary>
            xorEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx">
            <summary>
            xorEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx">
            <summary>
            xorEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi">
            <summary>
            xorEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi">
            <summary>
            xorEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEax">
            <summary>
            popEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbx">
            <summary>
            popEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEcx">
            <summary>
            popEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdx">
            <summary>
            popEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsp">
            <summary>
            popEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbp">
            <summary>
            popEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsi">
            <summary>
            popEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdi">
            <summary>
            popEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushad">
            <summary>
            pushad list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEax">
            <summary>
            incEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbx">
            <summary>
            incEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEcx">
            <summary>
            incEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdx">
            <summary>
            incEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbp">
            <summary>
            incEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsp">
            <summary>
            incEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsi">
            <summary>
            incEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdi">
            <summary>
            incEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEax">
            <summary>
            decEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbx">
            <summary>
            decEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEcx">
            <summary>
            decEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdx">
            <summary>
            decEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbp">
            <summary>
            decEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsp">
            <summary>
            decEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsi">
            <summary>
            decEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdi">
            <summary>
            decEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.add">
            <summary>
            add list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.sub">
            <summary>
            sub list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.mov">
            <summary>
            mov list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.and">
            <summary>
            and list.
            </summary>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator64">
            <summary> Attempts to create Rop chains from 64 bit processes. </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.VirtualAllocChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor
            </summary>
            <param name="_info">ProcessInfo object for which a ROP chain will be generated</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.ZeroRegister(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
            followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
            </summary>
            <param name="modifyingReg">The Register64 value for the register to be zeroed.</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
            <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.SetRegisterModifier(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Sets the flag of a Register64 enum in a RegisterModifiers64 class. This flag is used to identify whether setting the value of one 
            register involved editing another register. For example if setting EAX involved modifying RBX then RegisterModifiers32.RAX will have the RBX flag set. Any
            register should not be able to modify the value of any other register twice.
            
            The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
            </summary>
            <param name="modifiedReg">The Register64 which is being modified</param>
            <param name="modifyingReg">The Register64 which is doing the modification</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetAddInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64)">
            <summary>
            Finds a add instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetSubInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64)">
            <summary>
            Finds a sub instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetMovInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Finds a mov instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
            <returns>Returns a dictionary of byte[] string containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator64.X64Lists">
            <summary>
            Contains lists of instructions for specific registers.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRax">
            <summary>
            pushRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx">
            <summary>
            pushRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx">
            <summary>
            pushRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx">
            <summary>
            pushRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp">
            <summary>
            pushRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp">
            <summary>
            pushRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi">
            <summary>
            pushRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi">
            <summary>
            pushRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR8">
            <summary>
            pushR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR9">
            <summary>
            pushR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR10">
            <summary>
            pushR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR11">
            <summary>
            pushR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR12">
            <summary>
            pushR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR13">
            <summary>
            pushR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR14">
            <summary>
            pushR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR15">
            <summary>
            pushR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRax">
            <summary>
            popRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbx">
            <summary>
            popRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRcx">
            <summary>
            popRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdx">
            <summary>
            popRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsp">
            <summary>
            popRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbp">
            <summary>
            popRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsi">
            <summary>
            popRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdi">
            <summary>
            popRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR8">
            <summary>
            popR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR9">
            <summary>
            popR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR10">
            <summary>
            popR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR11">
            <summary>
            popR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR12">
            <summary>
            popR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR13">
            <summary>
            popR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR14">
            <summary>
            popR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR15">
            <summary>
            popR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRax">
            <summary>
            xorRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx">
            <summary>
            xorRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx">
            <summary>
            xorRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx">
            <summary>
            xorRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi">
            <summary>
            xorRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi">
            <summary>
            xorRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp">
            <summary>
            xorRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp">
            <summary>
            xorRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR8">
            <summary>
            xorR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR9">
            <summary>
            xorR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR10">
            <summary>
            xorR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR11">
            <summary>
            xorR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR12">
            <summary>
            xorR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR13">
            <summary>
            xorR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR14">
            <summary>
            xorR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR15">
            <summary>
            xorR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp">
            <summary>
            jmpRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.callRsp">
            <summary>
            callRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRax">
            <summary>
            incRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbx">
            <summary>
            incRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRcx">
            <summary>
            incRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdx">
            <summary>
            incRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbp">
            <summary>
            incRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsp">
            <summary>
            incRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsi">
            <summary>
            incRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdi">
            <summary>
            incRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR8">
            <summary>
            incR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR9">
            <summary>
            incR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR10">
            <summary>
            incR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR11">
            <summary>
            incR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR12">
            <summary>
            incR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR13">
            <summary>
            incR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR14">
            <summary>
            incR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR15">
            <summary>
            incR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRax">
            <summary>
            decRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbx">
            <summary>
            decRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRcx">
            <summary>
            decRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdx">
            <summary>
            decRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbp">
            <summary>
            decRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsp">
            <summary>
            decRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsi">
            <summary>
            decRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdi">
            <summary>
            decRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR8">
            <summary>
            decR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR9">
            <summary>
            decR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR10">
            <summary>
            decR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR11">
            <summary>
            decR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR12">
            <summary>
            decR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR13">
            <summary>
            decR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR14">
            <summary>
            decR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR15">
            <summary>
            decR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.add">
            <summary>
            add list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.mov">
            <summary>
            mov list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.sub">
            <summary>
            sub list.
            </summary>
        </member>
        <member name="T:ERC.DisplayOutput">
            <summary> Provides output in various human readable formats of data from the library. </summary>
        </member>
        <member name="M:ERC.DisplayOutput.GetFilePath(System.String,System.String,System.String)">
            <summary>
            Identifies output files previously created by a the Display_Modules function
            and identifies the last number used. Returns the next number to be used as a filename.
            </summary>
            <param name="directory">The directory to be used</param>
            <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
            <param name="extension">The file extension to be used e.g. ".txt" </param>
            <returns>Returns a string containing the full file path to be used when writing output to disk</returns>
        </member>
        <member name="M:ERC.DisplayOutput.WriteToFile(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes a list of strings to a file. Takes a directory, filename and prefix along with a List of strings.
            </summary>
            <param name="directory">The directory to be used</param>
            <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
            <param name="extension">The file extension to be used e.g. ".txt" </param>
            <param name="content">A list of strings to be written to disk </param>
        </member>
        <member name="M:ERC.DisplayOutput.GeneratePattern(System.Int32,ERC.ErcCore,System.Boolean)">
            <summary>
            Creates a file in the ErcCore working directory containing a string of non repeating characters. 
            </summary>
            <param name="length">The length of the string to be created</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">A optional boolean specifying whether to use the extended character set. Default is false.</param>
            <returns>Returns a string containing the pattern generated.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.PatternOutputBuilder(System.String,ERC.ErcCore)">
            <summary>
            Private function, should not be called directly. Takes input from pattern_create and outputs in an easily readable format.
            </summary>
            <param name="pattern">The pattern to be used</param>
            <param name="core">An ErcCore object</param>
            <returns>Returns a string containing the human readable output of the pattern create method.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.ListLocalProcesses">
            <summary>
            Lists usable processes running on the local machine.
            </summary>
            <returns>A string containing details of processes running on the local machine.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.ListRemoteProcesses(System.String)">
            <summary>
            Lists usable processes running on the remote machine.
            </summary>
            <returns>A string containing details of processes running on the remote machine.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Displays information related to the provided ProcessInfo object.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <param name="outputToFile">Set to false to surpress file output.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Displays information about all threads related to a specific process.
            </summary>
            <param name="info"></param>
            <param name="outputToFile"></param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayModuleInfo(ERC.ProcessInfo)">
            <summary>
            Displays a list of all modules and associated information from a specific process. Can output to stdout, a file or both.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <returns>Returns a string containing all module info from a specific process</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Aquires filename and writes out all module data to the current working directory. Requires a Process_Info object to be passed as a parameter.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <param name="outputToFile">Set to false to surpress file output.</param>
            <returns>Returns a formatted string of all results</returns>
        </member>
        <member name="M:ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches the memory of a process and it's loaded modules for a string or byte combination.
            </summary>
            <param name="info">The processInfo object for the process</param>
            <param name="searchType">The type of data to be searched for.</param>
            <param name="searchString">The string to search for.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.SearchModules(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Searches the loaded modules of a process for a string or byte combination.
            </summary>
            <param name="info">The processInfo object for the process</param>
            <param name="searchType">The type of data to be searched for.</param>
            <param name="searchString">The string to search for.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="modules">List of modules to be searched</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns>Returns an ErcResult containing a list of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions</param>
            <param name="ptrsToExclude">Ptrs containing these byte values will be discarded.</param>
            <param name="excludes">Modules to be ignored when searching for the instruction sets.</param>
            <returns>Returns an ErcResult containing a list of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumpsUnicode(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format. This version only returns unicode compliant pointers.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns>Returns an ErcResult containing a list of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore,System.Byte[])">
            <summary>
            Generates an array of all possible bytes for use when identifying bad characters. Writes the output to disk in the working directory.
            </summary>
            <param name="unwantedBytes">An array of bytes to be excluded from the final byte array</param>
            <param name="core">An ErcCore object</param>
            <returns>Returns a byte array of all possible bytes.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo,System.IntPtr,System.Byte[])">
            <summary>
            Compares a the values contained in a memory region to the values in the supplied byte array.
            </summary>
            <param name="info">The processInfo object that contains the memory region.</param>
            <param name="startAddress">The memory address to start the search at.</param>
            <param name="byteArray">The byte array the region will be compared against.</param>
            <returns>Returns a string detailing differences between the two.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore,System.String)">
            <summary>
            Generates a collection of EggHunter payloads.
            </summary>
            <param name="core">(Optional) If an ErcCore object is provided the output will also be written out to the working directory </param>
            <param name="tag">(Optional) If a tag is provided the payloads will be altered to search for that tag, the default tag is ERCD</param>
            <returns>Returns a string containing all EggHunters </returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo,System.Int32,System.Boolean)">
            <summary>
            Searches the memory of a process for a non repeating pattern.
            </summary>
            <param name="info">The ProcessInfo object of the process to be searched</param>
            <param name="searchType">Integer specifiying the format of the string: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="extended">Whether the extended character range is to be used when searching for the non repeating pattern</param>
            <returns>Returns a List of strings containing the locations the repeating pattern was identified</returns>
        </member>
        <member name="M:ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32)">
            <summary>
            Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
            </summary>
            <param name="rcg">The ROP chain generator object</param>
            <returns>Returns a List of strings</returns>
        </member>
        <member name="M:ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64)">
            <summary>
            Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
            </summary>
            <param name="rcg">The ROP chain generator object</param>
            <returns>Returns a List of strings</returns>
        </member>
        <member name="M:ERC.DisplayOutput.AssembleOpcodes(System.String[],System.UInt32)">
            <summary>
            Converts a collection of instructions into the associated opcodes.
            </summary>
            <param name="instructions">An array containing either x86 or x64 instructions.</param>
            <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.AssembleOpcodes(System.String[],ERC.MachineType)">
            <summary>
            Converts a collection of instructions into the associated opcodes.
            </summary>
            <param name="instructions">An array containing either x86 or x64 instructions.</param>
            <param name="machine">MachineType of the instruction set to be assembled.</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],System.UInt32)">
            <summary>
            Converts a collection of opcodes into the associated instructions.
            </summary>
            <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
            <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],ERC.MachineType)">
            <summary>
            Converts a collection of opcodes into the associated instructions.
            </summary>
            <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
            <param name="machine">MachineType of the instruction set to be assembled.</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.StringToByteArray(System.String)">
            <summary>
            Converts a string of hex characters to a byte array of the associated values.
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo,System.IntPtr,System.Int32)">
            <summary>
            Reads a set of bytes from process memory and provides a string contianing the results.
            </summary>
            <param name="info">ProcessInfo object</param>
            <param name="startAddress">The address to start reading from.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>A string containing the bytes read from memroy</returns>
        </member>
        <member name="T:ERC.ERCException">
            <summary>
            Custom exception handler.
            </summary>
        </member>
        <member name="M:ERC.ERCException.#ctor(System.String)">
            <summary>
            Constructor for the ERCException class.
            </summary>
            <param name="message">The message associated with the Exception</param>
        </member>
        <member name="M:ERC.ERCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a serializable exception.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="ctxt">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:ERC.ErcCore">
            <summary>
            A single instance of this object should be instantiated at a minimum. It is used for storing global variables such as the working directory etc.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.ErcVersion">
            <summary>
            The current version of the ERC.Net library
            </summary>
        </member>
        <member name="P:ERC.ErcCore.WorkingDirectory">
            <summary>
            The directory where output files will be saved.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.Author">
            <summary>
            The Author to be credited in output files.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.ConfigPath">
            <summary>
            Path of the current ERC_Config.xml file.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.SystemErrorLogPath">
            <summary>
            Path where error details should be logged.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.PatternStandardPath">
            <summary>
            Path to the file containing the standard pattern to be used.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.PatternExtendedPath">
            <summary>
            Path to the file containing the extended pattern to be used.
            </summary>
        </member>
        <member name="M:ERC.ErcCore.OpenProcess(ERC.Structures.ProcessAccessFlags,System.Boolean,System.Int32)">
            <summary>
            Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">The access to the process object. This access right is checked against the security descriptor for the process.</param>
            <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
            <param name="dwProcessId">The identifier of the local process to be opened.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified process.</returns>
        </member>
        <member name="M:ERC.ErcCore.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.
            </summary>
            <param name="Handle">A handle to the process with memory that is being read.</param>
            <param name="Address">A pointer to the base address in the specified process from which to read.</param>
            <param name="Arr">A pointer to a buffer that receives the contents from the address space of the specified process.</param>
            <param name="Size">The number of bytes to be read from the specified process.</param>
            <param name="BytesRead">A pointer to a variable that receives the number of bytes transferred into the specified buffer.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.VirtualQueryEx32(System.IntPtr,System.IntPtr,ERC.Structures.MEMORY_BASIC_INFORMATION32@,System.UInt32)">
            <summary>
            Retrieves information about a range of pages within the virtual address space of a specified 32 bit process.
            </summary>
            <param name="hProcess">A handle to the process whose memory information is queried. </param>
            <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
            <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION32 structure in which information about the specified page range is returned.</param>
            <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
            <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.VirtualQueryEx64(System.IntPtr,System.IntPtr,ERC.Structures.MEMORY_BASIC_INFORMATION64@,System.UInt32)">
            <summary>
            Retrieves information about a range of pages within the virtual address space of a specified 64 bit process.
            </summary>
            <param name="hProcess">A handle to the process whose memory information is queried. </param>
            <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
            <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION64 structure in which information about the specified page range is returned.</param>
            <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
            <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>
            Determines whether the specified process is running under WOW64 or an Intel64 of x64 processor.
            </summary>
            <param name="process">A handle to the process.</param>
            <param name="wow64Process">A pointer to a value that is set to TRUE if the process is running under WOW64 on an Intel64 or x64 processor.</param>
            <returns>If the function succeeds, the return value is a nonzero value.</returns>
        </member>
        <member name="M:ERC.ErcCore.OpenThread(ERC.Structures.ThreadAccess,System.Boolean,System.UInt32)">
            <summary>
            Opens an existing thread object.
            </summary>
            <param name="dwDesiredAccess">The access to the thread object.</param>
            <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle.</param>
            <param name="dwThreadId">The identifier of the thread to be opened.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified thread.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetThreadContext32(System.IntPtr,ERC.Structures.CONTEXT32@)">
            <summary>
            Retrieves the context of the specified 32 bit thread.
            </summary>
            <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.Wow64GetThreadContext(System.IntPtr,ERC.Structures.CONTEXT32@)">
            <summary>
            Retrieves the context of the specified WOW64 thread.
            </summary>
            <param name="hthread">A handle to the thread whose context is to be retrieved.</param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetThreadContext64(System.IntPtr,ERC.Structures.CONTEXT64@)">
            <summary>
            Retrieves the context of the specified 64 bit thread.
            </summary>
            <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.SuspendThread(System.IntPtr)">
            <summary>
            Suspends the specified thread.
            </summary>
            <param name="hThread">A handle to the thread that is to be suspended.</param>
            <returns>If the function succeeds, the return value is the thread's previous suspend count. If the function fails the return value is -1.</returns>
        </member>
        <member name="M:ERC.ErcCore.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="procName">The function or variable name, or the function's ordinal value.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable.</returns>
        </member>
        <member name="M:ERC.ErcCore.LoadLibraryEx(System.String,System.IntPtr,ERC.Structures.LoadLibraryFlags)">
            <summary>
            This function maps a specified executable module into the address space of the calling process. The executable module can be a .dll or an .exe file. The specified module may cause other modules to be mapped into the address space.
            </summary>
            <param name="lpFileName">Pointer to a null-terminated string that names the executable module.</param>
            <param name="hReservedNull">Must be null.</param>
            <param name="dwFlags">Specifies the action to take when loading the module.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.ErcCore.FindResouce(System.IntPtr,System.String@,System.String@)">
            <summary>
            Determines the location of a resource with the specified type and name in the specified module.
            </summary>
            <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource.</param>
            <param name="resName">The name of the resource.</param>
            <param name="resType">The resource type.</param>
            <returns>If the function succeeds, the return value is a handle to the specified resource's information block.</returns>
        </member>
        <member name="M:ERC.ErcCore.LoadResource(System.IntPtr,System.IntPtr)">
            <summary>
            Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.
            </summary>
            <param name="hModule">A handle to the module whose executable file contains the resource.</param>
            <param name="hResInfo">A handle to the resource to be loaded. </param>
            <returns>If the function succeeds, the return value is a handle to the data associated with the resource.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetProcessId(System.IntPtr)">
            <summary>
            Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right.</param>
            <returns>Returns the identifier of the process as a Uint</returns>
        </member>
        <member name="M:ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves certain properties of an object handle.
            </summary>
            <param name="hObject">A handle to an object whose information is to be retrieved.</param>
            <param name="lpdwFlags">A pointer to a variable that receives a set of bit flags that specify properties of the object handle or 0. The following values are defined.</param>
            <returns>If the function succeeds, the return value is true.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetModuleHandle(System.String)">
            <summary>
            Retrieves a module handle for the specified module. The module must have been loaded by the calling process.
            </summary>
            <param name="moduleName">The name of the loaded module (either a .dll or .exe file).</param>
            <returns>If the function succeeds, the return value is a handle to the specified module.</returns>
        </member>
        <member name="M:ERC.ErcCore.ZwQueryInformationThread(System.IntPtr,System.Int32,ERC.Structures.ThreadBasicInformation@,System.Int32,System.IntPtr)">
            <summary>
            The ZwQueryInformationThread routine retrieves information about the specified thread.
            </summary>
            <param name="hwnd">Handle to the thread object.</param>
            <param name="i">The type of thread information to be retrieved. </param>
            <param name="threadinfo">Pointer to a buffer supplied by the caller.</param>
            <param name="length">The size, in bytes, of the buffer pointed to by threadinfo.</param>
            <param name="bytesread">A pointer to a variable in which the routine returns the size of the requested information.</param>
            <returns>ZwQueryInformationThread returns STATUS_SUCCESS on success, or the appropriate NTSTATUS error code on failure.</returns>
        </member>
        <member name="M:ERC.ErcCore.EnumProcessModulesEx(System.IntPtr,System.IntPtr[],System.Int32,System.Int32@,System.UInt32)">
            <summary>
            Retrieves a handle for each module in the specified process.
            </summary>
            <param name="hProcess">A handle to the process.</param>
            <param name="lphModule">An array that receives the list of module handles.</param>
            <param name="cb">The size of the lphModule array, in bytes.</param>
            <param name="lpcbNeeded">The number of bytes required to store all module handles in the lphModule array.</param>
            <param name="dwFilterFlag">The filter criteria. </param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetModuleFileNameEx(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the fully qualified path for the file containing the specified module.
            </summary>
            <param name="hProcess">A handle to the process that contains the module.</param>
            <param name="hModule">A handle to the module. </param>
            <param name="lpBaseName">A pointer to a buffer that receives the fully qualified path to the module.</param>
            <param name="nSize">The size of the lpFilename buffer, in characters.</param>
            <returns>If the function succeeds, the return value specifies the length of the string copied to the buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.ImageLoad(System.String,System.String)">
            <summary>
            Maintains a list of loaded DLLs.
            </summary>
            <param name="DllName">The name of the image.</param>
            <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
            <returns>If the function succeeds, the return value is a pointer to a LOADED_IMAGE structure.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation32(System.IntPtr,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
            <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation64(System.IntPtr,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
            <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation32(ERC.Structures.LOADED_IMAGE@,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="loadedImage">A Loaded_Image structure.</param>
            <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation64(ERC.Structures.LOADED_IMAGE@,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="loadedImage">A Loaded_Image structure.</param>
            <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.MapAndLoad(System.String,System.String,ERC.Structures.LOADED_IMAGE@,System.Boolean,System.Boolean)">
            <summary>
            Maps an image and preloads data from the mapped file.
            </summary>
            <param name="ImageName">The file name of the image (executable file or DLL) that is loaded.</param>
            <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
            <param name="loadedImage">A pointer to a LOADED_IMAGE structure that receives information about the image after it is loaded.</param>
            <param name="Dll">True if the file is a DLL, false if the file is an EXE.</param>
            <param name="readOnly">Boolean for the access mode.</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ERC.ErcCore.#ctor(ERC.ErcCore)">
            <summary>
            Constructor to be used when creating an object that inherits from an ErcCore object.
            </summary>
            <param name="parent">The ErcCore object to be inherited from.</param>
        </member>
        <member name="M:ERC.ErcCore.SetWorkingDirectory(System.String)">
            <summary>
            Changes the working directory in both the XML file and associated ErcCore object
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ERC.ErcCore.SetPatternStandardPath(System.String)">
            <summary>
            Sets the standard pattern file path. Any pattern can replace the standard pattern when searching however the new pattern must be written to a file and the file path set here.
            </summary>
            <param name="path">The filepath of the new standard pattern file</param>
        </member>
        <member name="M:ERC.ErcCore.SetPatternExtendedPath(System.String)">
            <summary>
            Sets the extended pattern file path. Any pattern can replace the extended pattern when searching however the new pattern must be written to a file and the file path set here.
            </summary>
            <param name="path">The filepath of the new extended pattern file</param>
        </member>
        <member name="M:ERC.ErcCore.SetAuthor(System.String)">
            <summary>
            Sets the name of the author for use when outputing results to disk.
            </summary>
            <param name="author">String containing the name of the author</param>
        </member>
        <member name="M:ERC.ErcCore.SetErrorFile(System.String)">
            <summary>
            Sets the error log file to a user specified filepath. 
            </summary>
            <param name="path">The new error log filepath.</param>
        </member>
        <member name="M:ERC.ErcCore.LogEvent(System.Exception)">
            <summary>
            Logs events to the error log path in the XML file. This file is only appended to and never replaced.
            </summary>
            <param name="e">The exception to log</param>
        </member>
        <member name="M:ERC.ErcCore.X64toX32PointerModifier(System.Byte[])">
            <summary>
            Converts a x64 pointer into a x86 pointer.
            </summary>
            <param name="ptr64">64bit pointer to be converted</param>
            <returns>Retruns a byte array 4 bytes long containing the modified pointer</returns>
        </member>
        <member name="T:ERC.ErcResult`1">
            <summary>
            A basic object which contains a generic type and exception. 
            </summary>
            <typeparam name="T">A generic type</typeparam>
        </member>
        <member name="P:ERC.ErcResult`1.ReturnValue">
            <summary>
            Generic Type.
            </summary>
        </member>
        <member name="P:ERC.ErcResult`1.Error">
            <summary>
            Exception to be logged by LogEvent().
            </summary>
        </member>
        <member name="M:ERC.ErcResult`1.#ctor(ERC.ErcCore)">
            <summary>
            Base constructor.
            </summary>
            <param name="core">The ErcCore object to inherit from.</param>
        </member>
        <member name="M:ERC.ErcResult`1.#ctor(ERC.ErcCore,System.String)">
            <summary>
            Base constructor with a custom location for exceptions to be logged.
            </summary>
            <param name="core">The ErcCore object to inherit from.</param>
            <param name="errorFile">The location to log exceptions.</param>
        </member>
        <member name="M:ERC.ErcResult`1.LogEvent">
            <summary>
            Logs an event to the ErrorLogFile value.
            </summary>
        </member>
        <member name="M:ERC.ErcResult`1.ToString">
            <summary>
            Override of the ToString method. Returns a string containing values relevant to the object. 
            </summary>
            <returns>A string containing information about the object.</returns>
        </member>
        <member name="T:ERC.MachineType">
            <summary>
            Enum containing types of machine architectures.
            </summary>
        </member>
        <member name="F:ERC.MachineType.Native">
            <summary>
            Native.
            </summary>
        </member>
        <member name="F:ERC.MachineType.I386">
            <summary>
            x86.
            </summary>
        </member>
        <member name="F:ERC.MachineType.Itanium">
            <summary>
            Itanium.
            </summary>
        </member>
        <member name="F:ERC.MachineType.x64">
            <summary>
            x64.
            </summary>
        </member>
        <member name="F:ERC.MachineType.error">
            <summary>
            Type is unknown or unset.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_DOS_HEADER">
            <summary>
            IMAGE_DOS_HEADER.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr">
            <summary>
            A pointer to the IMAGE_NT_HEADER.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_FILE_HEADER">
            <summary>
            IMAGE_FILE_HEADER. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections">
            <summary>
            NumberOfSections
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable">
            <summary>
            PointerToSymbolTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols">
            <summary>
            NumberOfSymbols
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader">
            <summary>
            SizeOfOptionalHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.Characteristics">
            <summary>
            Characteristics
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_NT_HEADERS32">
            <summary>
            IMAGE_NT_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader">
            <summary>
            OptionalHeader
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_NT_HEADERS64">
            <summary>
            IMAGE_NT_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader">
            <summary>
            OptionalHeader
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_DATA_DIRECTORY">
            <summary>
            IMAGE_DATA_DIRECTORY. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress">
            <summary>
            VirtualAddress.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DATA_DIRECTORY.Size">
            <summary>
            Size.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_OPTIONAL_HEADER32">
            <summary>
            IMAGE_OPTIONAL_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion">
            <summary>
            MajorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion">
            <summary>
            MinorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode">
            <summary>
            SizeOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData">
            <summary>
            SizeOfInitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData">
            <summary>
            SizeOfUninitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint">
            <summary>
            AddressOfEntryPoint
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode">
            <summary>
            BaseOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData">
            <summary>
            BaseOfData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase">
            <summary>
            ImageBase
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment">
            <summary>
            SectionAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment">
            <summary>
            FileAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion">
            <summary>
            MajorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion">
            <summary>
            MinorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion">
            <summary>
            MajorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion">
            <summary>
            MinorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion">
            <summary>
            MajorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion">
            <summary>
            MinorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue">
            <summary>
            Win32VersionValue
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders">
            <summary>
            SizeOfHeaders
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum">
            <summary>
            CheckSum
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem">
            <summary>
            Subsystem
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics">
            <summary>
            DllCharacteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve">
            <summary>
            SizeOfStackReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit">
            <summary>
            SizeOfStackCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve">
            <summary>
            SizeOfHeapReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit">
            <summary>
            SizeOfHeapCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags">
            <summary>
            LoaderFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes">
            <summary>
            NumberOfRvaAndSizes
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable">
            <summary>
            ExportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable">
            <summary>
            ImportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable">
            <summary>
            ResourceTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable">
            <summary>
            ExceptionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable">
            <summary>
            CertificateTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable">
            <summary>
            BaseRelocationTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr">
            <summary>
            GlobalPtr
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable">
            <summary>
            TLSTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable">
            <summary>
            LoadConfigTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport">
            <summary>
            BoundImport
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT">
            <summary>
            IAT
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor">
            <summary>
            DelayImportDescriptor
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader">
            <summary>
            CLRRuntimeHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_OPTIONAL_HEADER64">
            <summary>
            IMAGE_OPTIONAL_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion">
            <summary>
            MajorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion">
            <summary>
            MinorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode">
            <summary>
            SizeOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData">
            <summary>
            SizeOfInitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData">
            <summary>
            SizeOfUninitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint">
            <summary>
            AddressOfEntryPoint
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode">
            <summary>
            BaseOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase">
            <summary>
            ImageBase
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment">
            <summary>
            SectionAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment">
            <summary>
            FileAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion">
            <summary>
            MajorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion">
            <summary>
            MinorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion">
            <summary>
            MajorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion">
            <summary>
            MinorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion">
            <summary>
            MajorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion">
            <summary>
            MinorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue">
            <summary>
            Win32VersionValue
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders">
            <summary>
            SizeOfHeaders
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum">
            <summary>
            CheckSum
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem">
            <summary>
            Subsystem
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics">
            <summary>
            DllCharacteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve">
            <summary>
            SizeOfStackReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit">
            <summary>
            SizeOfStackCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve">
            <summary>
            SizeOfHeapReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit">
            <summary>
            SizeOfHeapCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags">
            <summary>
            LoaderFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes">
            <summary>
            NumberOfRvaAndSizes
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable">
            <summary>
            ExportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable">
            <summary>
            ImportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable">
            <summary>
            ResourceTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable">
            <summary>
            ExceptionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable">
            <summary>
            CertificateTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable">
            <summary>
            BaseRelocationTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr">
            <summary>
            GlobalPtr
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable">
            <summary>
            TLSTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable">
            <summary>
            LoadConfigTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport">
            <summary>
            BoundImport
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT">
            <summary>
            IAT
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor">
            <summary>
            DelayImportDescriptor
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader">
            <summary>
            CLRRuntimeHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.MagicType">
            <summary>
            Image Option Header Magic Type.
            </summary>
        </member>
        <member name="F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC">
            <summary>
            IMAGE_NT_OPTIONAL_HDR32_MAGIC
            </summary>
        </member>
        <member name="F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC">
            <summary>
            IMAGE_NT_OPTIONAL_HDR64_MAGIC
            </summary>
        </member>
        <member name="T:ERC.Structures.SubSystemType">
            <summary>
            Image Option Header SubSystem Type.
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
            IMAGE_SUBSYSTEM_UNKNOWN
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_NATIVE">
            <summary>
            IMAGE_SUBSYSTEM_NATIVE
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_GUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_CUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
            IMAGE_SUBSYSTEM_POSIX_CUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>
            IMAGE_SUBSYSTEM_EFI_APPLICATION
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>
            IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>
            IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>
            IMAGE_SUBSYSTEM_EFI_ROM
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_XBOX">
            <summary>
            IMAGE_SUBSYSTEM_XBOX
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32">
            <summary>
            IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion">
            <summary>
            MajorVersio
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion">
            <summary>
            MinorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear">
            <summary>
            GlobalFlagsClear
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet">
            <summary>
            GlobalFlagsSet
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout">
            <summary>
            CriticalSectionDefaultTimeout
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold">
            <summary>
            DeCommitFreeBlockThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold">
            <summary>
            DeCommitTotalFreeThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable">
            <summary>
            LockPrefixTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize">
            <summary>
            MaximumAllocationSize
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold">
            <summary>
            VirtualMemoryThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags">
            <summary>
            ProcessHeapFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask">
            <summary>
            ProcessAffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion">
            <summary>
            CSDVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags">
            <summary>
            DependentLoadFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList">
            <summary>
            EditList
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie">
            <summary>
            SecurityCookie
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable">
            <summary>
            SEHandlerTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount">
            <summary>
            SEHandlerCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer">
            <summary>
            GuardCFCheckFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer">
            <summary>
            GuardCFDispatchFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable">
            <summary>
            GuardCFFunctionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount">
            <summary>
            GuardCFFunctionCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags">
            <summary>
            GuardFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity">
            <summary>
            CodeIntegrity
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable">
            <summary>
            GuardAddressTakenIatEntryTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount">
            <summary>
            GuardAddressTakenIatEntryCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable">
            <summary>
            GuardLongJumpTargetTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount">
            <summary>
            GuardLongJumpTargetCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable">
            <summary>
            DynamicValueRelocTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer">
            <summary>
            CHPEMetadataPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine">
            <summary>
            GuardRFFailureRoutine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer">
            <summary>
            GuardRFFailureRoutineFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset">
            <summary>
            DynamicValueRelocTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection">
            <summary>
            DynamicValueRelocTableSection
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer">
            <summary>
            GuardRFVerifyStackPointerFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset">
            <summary>
            HotPatchTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer">
            <summary>
            EnclaveConfigurationPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer">
            <summary>
            VolatileMetadataPointer
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64">
            <summary>
            IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion">
            <summary>
            MajorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion">
            <summary>
            MinorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear">
            <summary>
            GlobalFlagsClear
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet">
            <summary>
            GlobalFlagsSet
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout">
            <summary>
            CriticalSectionDefaultTimeout
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold">
            <summary>
            DeCommitFreeBlockThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold">
            <summary>
            DeCommitTotalFreeThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable">
            <summary>
            LockPrefixTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize">
            <summary>
            MaximumAllocationSize
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold">
            <summary>
            VirtualMemoryThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask">
            <summary>
            ProcessAffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags">
            <summary>
            ProcessHeapFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion">
            <summary>
            CSDVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags">
            <summary>
            DependentLoadFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList">
            <summary>
            EditList
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie">
            <summary>
            SecurityCookie
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable">
            <summary>
            SEHandlerTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount">
            <summary>
            SEHandlerCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer">
            <summary>
            GuardCFCheckFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer">
            <summary>
            GuardCFDispatchFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable">
            <summary>
            GuardCFFunctionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount">
            <summary>
            GuardCFFunctionCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags">
            <summary>
            GuardFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity">
            <summary>
            CodeIntegrity
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable">
            <summary>
            GuardAddressTakenIatEntryTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount">
            <summary>
            GuardAddressTakenIatEntryCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable">
            <summary>
            GuardLongJumpTargetTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount">
            <summary>
            GuardLongJumpTargetCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable">
            <summary>
            DynamicValueRelocTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer">
            <summary>
            CHPEMetadataPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine">
            <summary>
            GuardRFFailureRoutine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer">
            <summary>
            GuardRFFailureRoutineFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset">
            <summary>
            DynamicValueRelocTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection">
            <summary>
            DynamicValueRelocTableSection
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer">
            <summary>
            GuardRFVerifyStackPointerFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset">
            <summary>
            HotPatchTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer">
            <summary>
            EnclaveConfigurationPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer">
            <summary>
            VolatileMetadataPointer
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY">
            <summary>
            IMAGE_LOAD_CONFIG_CODE_INTEGRITY.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog">
            <summary>
            Catalog
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset">
            <summary>
            CatalogOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.LOADED_IMAGE">
            <summary>
            LOADED_IMAGE. See https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.ModuleName">
            <summary>
            ModuleName
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.hFile">
            <summary>
            hFile
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.MappedAddress">
            <summary>
            MappedAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.LastRvaSection">
            <summary>
            LastRvaSection
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.NumberOfSections">
            <summary>
            NumberOfSections
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Sections">
            <summary>
            Sections
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Characteristics">
            <summary>
            Characteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fSystemImage">
            <summary>
            fSystemImage
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fDOSImage">
            <summary>
            fDOSImage
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fReadOnly">
            <summary>
            fReadOnly
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Links">
            <summary>
            Links
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="T:ERC.Structures.LIST_ENTRY">
            <summary>
            Describes an entry in a doubly linked list or serves as the header for such a list. See https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry
            </summary>
        </member>
        <member name="F:ERC.Structures.LIST_ENTRY.Flink">
            <summary>
            Flink points to the next entry in the list.
            </summary>
        </member>
        <member name="F:ERC.Structures.LIST_ENTRY.Blink">
            <summary>
            Blink points to the previous entry in the list.
            </summary>
        </member>
        <member name="T:ERC.Structures.AllocationProtect">
            <summary>
            AllocationProtect.
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE">
            <summary>
            PAGE_EXECUTE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READ">
            <summary>
            PAGE_EXECUTE_READ
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READWRITE">
            <summary>
            PAGE_EXECUTE_READWRITE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_WRITECOPY">
            <summary>
            PAGE_EXECUTE_WRITECOPY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_NOACCESS">
            <summary>
            PAGE_NOACCESS
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_READONLY">
            <summary>
            PAGE_READONLY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_READWRITE">
            <summary>
            PAGE_READWRITE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_WRITECOPY">
            <summary>
            PAGE_WRITECOPY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_GUARD">
            <summary>
            PAGE_GUARD
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_NOCACHE">
            <summary>
            PAGE_NOCACHE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_WRITECOMBINE">
            <summary>
            PAGE_WRITECOMBINE
            </summary>
        </member>
        <member name="T:ERC.Structures.StateEnum">
            <summary>
            StateEnum
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_COMMIT">
            <summary>
            MEM_COMMIT
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_FREE">
            <summary>
            MEM_FREE
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_RESERVE">
            <summary>
            MEM_RESERVE
            </summary>
        </member>
        <member name="T:ERC.Structures.TypeEnum">
            <summary>
            TypeEnum
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_IMAGE">
            <summary>
            MEM_IMAGE
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_MAPPED">
            <summary>
            MEM_MAPPED
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_PRIVATE">
            <summary>
            MEM_PRIVATE
            </summary>
        </member>
        <member name="T:ERC.Structures.MEMORY_BASIC_INFORMATION32">
            <summary>
            MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress">
            <summary>
            BaseAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase">
            <summary>
            AllocationBase
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect">
            <summary>
            AllocationProtec
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize">
            <summary>
            RegionSize
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect">
            <summary>
            Protect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:ERC.Structures.MEMORY_BASIC_INFORMATION64">
            <summary>
            MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress">
            <summary>
            BaseAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase">
            <summary>
            AllocationBase
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect">
            <summary>
            AllocationProtect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1">
            <summary>
            __alignment1
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize">
            <summary>
            RegionSize
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect">
            <summary>
            Protect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2">
            <summary>
            __alignment2
            </summary>
        </member>
        <member name="T:ERC.Structures.ProcessAccessFlags">
            <summary>
            ProcessAccessFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.Terminate">
            <summary>
            Terminate
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.CreateThread">
            <summary>
            CreateThread
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryOperation">
            <summary>
            VirtualMemoryOperation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryRead">
            <summary>
            VirtualMemoryRead
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryWrite">
            <summary>
            VirtualMemoryWrite
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.DuplicateHandle">
            <summary>
            DuplicateHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.CreateProcess">
            <summary>
            CreateProcess
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.SetQuota">
            <summary>
            SetQuota
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.SetInformation">
            <summary>
            SetInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.QueryInformation">
            <summary>
            QueryInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.QueryLimitedInformation">
            <summary>
            QueryLimitedInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.Synchronize">
            <summary>
            Synchronize
            </summary>
        </member>
        <member name="T:ERC.Structures.LoadLibraryFlags">
            <summary>
            LoadLibraryFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
            <summary>
            DONT_RESOLVE_DLL_REFERENCES
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL">
            <summary>
            LOAD_IGNORE_CODE_AUTHZ_LEVEL
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            LOAD_LIBRARY_AS_DATAFILE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">
            <summary>
            LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE">
            <summary>
            LOAD_LIBRARY_AS_IMAGE_RESOURCE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR">
            <summary>
            LOAD_LIBRARY_SEARCH_APPLICATION_DIR
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">
            <summary>
            LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">
            <summary>
            LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32">
            <summary>
            LOAD_LIBRARY_SEARCH_SYSTEM32
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS">
            <summary>
            LOAD_LIBRARY_SEARCH_USER_DIRS
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
            <summary>
            LOAD_WITH_ALTERED_SEARCH_PATH
            </summary>
        </member>
        <member name="T:ERC.Structures.ThreadAccess">
            <summary>
            Enum to specify access level required when accessing a thread. 
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.TERMINATE">
            <summary>
            TERMINATE
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SUSPEND_RESUME">
            <summary>
            SUSPEND_RESUME
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.GET_CONTEXT">
            <summary>
            GET_CONTEXT
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_CONTEXT">
            <summary>
            SET_CONTEXT
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_INFORMATION">
            <summary>
            SET_INFORMATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.QUERY_INFORMATION">
            <summary>
            QUERY_INFORMATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_THREAD_TOKEN">
            <summary>
            SET_THREAD_TOKEN
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.IMPERSONATE">
            <summary>
            IMPERSONATE
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.DIRECT_IMPERSONATION">
            <summary>
            DIRECT_IMPERSONATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.All_ACCESS">
            <summary>
            All_ACCESS
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT_FLAGS">
            <summary>
            CONTEXT_FLAGS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i386">
            <summary>
            CONTEXT_i386
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i486">
            <summary>
            CONTEXT_i486
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_CONTROL">
            <summary>
            CONTEXT_CONTROL
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_INTEGER">
            <summary>
            CONTEXT_INTEGER
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_SEGMENTS">
            <summary>
            CONTEXT_SEGMENTS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FLOATING_POINT">
            <summary>
            CONTEXT_FLOATING_POINT
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS">
            <summary>
            CONTEXT_DEBUG_REGISTERS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS">
            <summary>
            CONTEXT_EXTENDED_REGISTERS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FULL">
            <summary>
            CONTEXT_FULL
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_ALL">
            <summary>
            CONTEXT_ALL
            </summary>
        </member>
        <member name="T:ERC.Structures.FLOATING_SAVE_AREA">
            <summary>
            x86 Save area data. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ControlWord">
            <summary>
            ControlWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.StatusWord">
            <summary>
            StatusWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.TagWord">
            <summary>
            TagWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset">
            <summary>
            ErrorOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector">
            <summary>
            ErrorSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.DataOffset">
            <summary>
            DataOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.DataSelector">
            <summary>
            DataSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.RegisterArea">
            <summary>
            RegisterArea
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState">
            <summary>
            Cr0NpxState
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT32">
            <summary>
            Structure for holding x86 register values.
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.ContextFlags">
            <summary>
            ContextFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr0">
            <summary>
            Dr0
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr1">
            <summary>
            Dr1
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr2">
            <summary>
            Dr2
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr3">
            <summary>
            Dr3
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr6">
            <summary>
            Dr6
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr7">
            <summary>
            Dr7
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.FloatSave">
            <summary>
            FloatSave
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegGs">
            <summary>
            SegGs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegFs">
            <summary>
            SegFs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegEs">
            <summary>
            SegEs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegDs">
            <summary>
            SegDs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Edi">
            <summary>
            Edi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Esi">
            <summary>
            Esi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ebx">
            <summary>
            Ebx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Edx">
            <summary>
            Edx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ecx">
            <summary>
            Ecx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Eax">
            <summary>
            Eax
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ebp">
            <summary>
            Ebp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Eip">
            <summary>
            Eip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegCs">
            <summary>
            SegCs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.EFlags">
            <summary>
            EFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Esp">
            <summary>
            Esp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegSs">
            <summary>
            SegSs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.ExtendedRegisters">
            <summary>
            ExtendedRegisters
            </summary>
        </member>
        <member name="M:ERC.Structures.CONTEXT32.ToString">
            <summary>
            Overridden ToString method, returns register values for the current thread.
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:ERC.Structures.M128A">
            <summary>
            M128A
            </summary>
        </member>
        <member name="F:ERC.Structures.M128A.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:ERC.Structures.M128A.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="M:ERC.Structures.M128A.ToString">
            <summary>
            ToString Override
            </summary>
            <returns>Returns a String</returns>
        </member>
        <member name="T:ERC.Structures.XSAVE_FORMAT64">
            <summary>
            x64 Save area data.
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ControlWord">
            <summary>
            ControlWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.StatusWord">
            <summary>
            StatusWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.TagWord">
            <summary>
            TagWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved1">
            <summary>
            Reserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorOpcode">
            <summary>
            ErrorOpcode
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorOffset">
            <summary>
            ErrorOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorSelector">
            <summary>
            ErrorSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.DataOffset">
            <summary>
            DataOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.DataSelector">
            <summary>
            DataSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.MxCsr">
            <summary>
            MxCsr
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask">
            <summary>
            MxCsr_Mask
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.FloatRegisters">
            <summary>
            FloatRegisters
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.XmmRegisters">
            <summary>
            XmmRegisters
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved4">
            <summary>
            Reserved4
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT64">
            <summary>
            Structure for holding x64 register values.
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P1Home">
            <summary>
            P1Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P2Home">
            <summary>
            P2Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P3Home">
            <summary>
            P3Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P4Home">
            <summary>
            P4Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P5Home">
            <summary>
            P5Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P6Home">
            <summary>
            P6Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.ContextFlags">
            <summary>
            ContextFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.MxCsr">
            <summary>
            MxCsr
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegCs">
            <summary>
            SegCs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegDs">
            <summary>
            SegDs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegEs">
            <summary>
            SegEs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegFs">
            <summary>
            SegFs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegGs">
            <summary>
            SegGs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegSs">
            <summary>
            SegSs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.EFlags">
            <summary>
            EFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr0">
            <summary>
            Dr0
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr1">
            <summary>
            Dr1
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr2">
            <summary>
            Dr2
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr3">
            <summary>
            Dr3
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr6">
            <summary>
            Dr6
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr7">
            <summary>
            Dr7
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rax">
            <summary>
            Rax
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rcx">
            <summary>
            Rcx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rdx">
            <summary>
            Rdx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rbx">
            <summary>
            Rbx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rsp">
            <summary>
            Rsp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rbp">
            <summary>
            Rbp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rsi">
            <summary>
            Rsi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rdi">
            <summary>
            Rdi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R8">
            <summary>
            R8
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R9">
            <summary>
            R9
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R10">
            <summary>
            R10
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R11">
            <summary>
            R11
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R12">
            <summary>
            R12
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R13">
            <summary>
            R13
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R14">
            <summary>
            R14
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R15">
            <summary>
            R15
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rip">
            <summary>
            Rip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.DUMMYUNIONNAME">
            <summary>
            DUMMYUNIONNAME
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.VectorRegister">
            <summary>
            VectorRegister
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.VectorControl">
            <summary>
            VectorControl
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.DebugControl">
            <summary>
            DebugControl
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastBranchToRip">
            <summary>
            LastBranchToRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastBranchFromRip">
            <summary>
            LastBranchFromRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastExceptionToRip">
            <summary>
            LastExceptionToRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastExceptionFromRip">
            <summary>
            LastExceptionFromRip
            </summary>
        </member>
        <member name="M:ERC.Structures.CONTEXT64.ToString">
            <summary>
            Overridden ToString method, returns register values for the current thread.
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:ERC.Structures.RegisterInfo">
            <summary>
            Register information
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.Register">
            <summary>
            Register name.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.RegisterValue">
            <summary>
            Register value.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.RegisterOffset">
            <summary>
            Register Offset.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.StringOffset">
            <summary>
            String offset.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.BufferSize">
            <summary>
            Buffer size.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.ThreadID">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.overwritten">
            <summary>
            Overwritten.
            </summary>
        </member>
        <member name="T:ERC.Structures.ThreadBasicInformation">
            <summary>
            ThreadBasicInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.ExitStatus">
            <summary>
            ExitStatus
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.TebBaseAdress">
            <summary>
            TebBaseAdress
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.AffinityMask">
            <summary>
            AffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.BasePriority">
            <summary>
            BasePriority
            </summary>
        </member>
        <member name="T:ERC.Structures.ClientID">
            <summary>
            ClientID
            </summary>
        </member>
        <member name="F:ERC.Structures.ClientID.ProcessId">
            <summary>
            ProcessID
            </summary>
        </member>
        <member name="F:ERC.Structures.ClientID.ThreadId">
            <summary>
            ThreadID
            </summary>
        </member>
        <member name="T:ERC.Structures.TEB">
            <summary>
            Thread Environment Block.
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CurrentSehFrame">
            <summary>
            CurrentSehFrame
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TopOfStack">
            <summary>
            TopOfStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.BottomOfStack">
            <summary>
            BottomOfStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SubSystemTeb">
            <summary>
            SubSystemTeb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.FiberData">
            <summary>
            FiberData
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ArbitraryDataSlot">
            <summary>
            ArbitraryDataSlot
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Teb">
            <summary>
            Teb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.EnvironmentPointer">
            <summary>
            EnvironmentPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RpcHandle">
            <summary>
            RpcHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Tls">
            <summary>
            Tls
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Peb">
            <summary>
            Peb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.LastErrorNumber">
            <summary>
            LastErrorNumber
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CriticalSectionsCount">
            <summary>
            CriticalSectionsCount
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CsrClientThread">
            <summary>
            CsrClientThread
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Win32ThreadInfo">
            <summary>
            Win32ThreadInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Win32ClientInfo">
            <summary>
            Win32ClientInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.WoW64Reserved">
            <summary>
            WoW64Reserved
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CurrentLocale">
            <summary>
            CurrentLocale
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.FpSoftwareStatusRegister">
            <summary>
            FpSoftwareStatusRegister
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SystemReserved1">
            <summary>
            SystemReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ExceptionCode">
            <summary>
            ExceptionCode
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ActivationContextStack">
            <summary>
            ActivationContextStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SpareBytes">
            <summary>
            SpareBytes
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SystemReserved2">
            <summary>
            SystemReserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiTebBatch">
            <summary>
            GdiTebBatch
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiRegion">
            <summary>
            GdiRegion
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiPen">
            <summary>
            GdiPen
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiBrush">
            <summary>
            GdiBrush
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RealProcessId">
            <summary>
            RealProcessId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RealThreadId">
            <summary>
            RealThreadId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiCachedProcessHandle">
            <summary>
            GdiCachedProcessHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiClientProcessId">
            <summary>
            GdiClientProcessId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiClientThreadId">
            <summary>
            GdiClientThreadId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiThreadLocalInfo">
            <summary>
            GdiThreadLocalInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.UserReserved1">
            <summary>
            UserReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GlReserved1">
            <summary>
            GlReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.LastStatusValue">
            <summary>
            LastStatusValue
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.StaticUnicodeString">
            <summary>
            StaticUnicodeString
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.DeallocationStack">
            <summary>
            DeallocationStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TlsSlots">
            <summary>
            TlsSlots
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TlsLinks">
            <summary>
            TlsLinks
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Vdm">
            <summary>
            Vdm
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RpcReserved">
            <summary>
            RpcReserved
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ThreadErrorMode">
            <summary>
            ThreadErrorMode
            </summary>
        </member>
        <member name="T:ERC.ModuleInfo">
            <summary>
            Contains all information relating to a specific module.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleName">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModulePath">
            <summary>
            Module path.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleVersion">
            <summary>
            Module version.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProduct">
            <summary>
            Module product.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProtection">
            <summary>
            Memory protection of this module.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleBase">
            <summary>
            Module base pointer.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleEntry">
            <summary>
            Module entry point.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleImageBase">
            <summary>
            Module image base.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleSize">
            <summary>
            Module size.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleASLR">
            <summary>
            Module supports ASLR.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleSafeSEH">
            <summary>
            Module supports SafeSEH
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleRebase">
            <summary>
            Module can be rebased.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleNXCompat">
            <summary>
            Module is DEP enabled.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleOsDll">
            <summary>
            Module is an OS dll.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProcess">
            <summary>
            Process where the module is loaded.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleCore">
            <summary>
            Associated ErcCore object.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleMachineType">
            <summary>
            Machine type of the module.
            </summary>
        </member>
        <member name="F:ERC.ModuleInfo.ModuleFailed">
            <summary>
            An errpr was encountered whilst processing the module.
            </summary>
        </member>
        <member name="M:ERC.ModuleInfo.#ctor(System.String,System.IntPtr,System.Diagnostics.Process,ERC.ErcCore)">
            <summary>
            Constructor for the ModuleInfo object. Takes (string)modules filepath (IntPtr)module handle (Process)Process from which the module is loaded
            </summary>
            <param name="module">Filepath of the module</param>
            <param name="ptr">Handle to the module</param>
            <param name="process">Process where the module is loaded</param>
            <param name="core">An ErcCore object</param>
        </member>
        <member name="M:ERC.ModuleInfo.SearchModule(System.Byte[])">
            <summary>
            Searches for a string of bytes within a specific module. Takes a byte array to be searched for. 
            </summary>
            <param name="searchBytes">A byte array to be searched for</param>
            <returns>Returns ERC_Result of pointers to the search term</returns>
        </member>
        <member name="M:ERC.ModuleInfo.ToString">
            <summary>
            Override of the ToString method. Provides a data associated with the module.
            </summary>
            <returns>A string containing relevant data.</returns>
        </member>
        <member name="T:ERC.ProcessInfo">
            <summary> Contains information needed for the associated functions relating to the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessName">
            <summary> Name of the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessDescription">
            <summary> Process description. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessPath">
            <summary> Path for the projects main module. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessID">
            <summary> Process ID. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessHandle">
            <summary> Handle for the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessCurrent">
            <summary> .Net Process object for this process </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessMachineType">
            <summary> The machine type the process runs on. Eg. x86 or x64 </summary>
        </member>
        <member name="F:ERC.ProcessInfo.ModulesInfo">
            <summary> A list containing ModuleInfo objects associuted with the process. /// </summary>
        </member>
        <member name="F:ERC.ProcessInfo.ThreadsInfo">
            <summary> A list containing ThreadInfo objects associuted with the process. /// </summary>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)">
            <summary>
            Constructor for the Process_Info object, requires an ERC_Core object and a Process.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="process">The process to gather information from</param>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)">
            <summary>
            Constructor for the Process_Info object, requires an ERC_Core object and a Process.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="handle">The handle for the process to gather information from</param>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor to use when inheriting from ProcessInfo.
            </summary>
            <param name="parent">The object to inherit from</param>
        </member>
        <member name="M:ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)">
            <summary>
            Gets a list of running processes on the host and removes unusable processes (such as system processes etc)
            </summary>
            <param name="core">An ErcCore object</param>
            <returns>Returns an ErcResult containing a list of all supported processes</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)">
            <summary>
            Gets a list of running processes on the host and removes unusable processes.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="machineName">The computer from which to read the list of processes. Can be either the hostname or IP address.</param>
            <returns>Returns an ErcResult containing a list of all supported processes</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessModules">
            <summary>
            Returns a list of files loaded by the current process as List String
            </summary>
            <returns>Returns an ErcResult containing a Dictionary of module names and the associated handles</returns>
        </member>
        <member name="M:ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)">
            <summary>
            Identifies if a process is 64bit or 32 bit, returns true for 64bit and false for 32bit.
            </summary>
            <param name="process">The process to be used</param>
            <returns>Returns true if the process is 64bit and false if it is not.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.LocateMemoryRegions">
            <summary>
            Identifies memory regions occupied by the current process and populates the associated list with the Process_Info object.
            </summary>
        </member>
        <member name="M:ERC.ProcessInfo.SearchProcessMemory(System.Byte[])">
            <summary>
            Private function called from Search_Memory. Searches memory regions populated by the process for specific strings.
            </summary>
            <param name="searchBytes"> Takes a byte array as input to be searched for</param>
            <returns>Returns a list of IntPtr for each instance found.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchProcessMemory(System.Byte[],System.Byte[])">
            <summary>
            Private function called from Search_Memory. Searches memory regions populated by the process for specific strings.
            </summary>
            <param name="searchBytes"> Takes a byte array as input to be searched for</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <returns>Returns a list of IntPtr for each instance found.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            </summary>
            <param name="excludes">Takes a list of module names to be excluded from the search</param>
            <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            </summary>
            <param name="excludes">Takes a list of module names to be excluded from the search</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Specific modules can be exclude through passing a Listof strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="excludes">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Specific modules can be exclude through passing a Listof strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="excludes">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Searches all modules loaded by a process for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Search can be limited to specific modules through passing a List of strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="includedModules">Modules to be included in the search (optional)</param>
            <param name="excludedModules">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>>
        </member>
        <member name="M:ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)">
            <summary>
            Searches process registers and identifies pointers to buffers in memory containing a non repeating pattern. Functionality to identify SEH overwrites not yet implements.
            </summary>
            <param name="searchType">(Optional) 0 = search term is system default\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="extended">(Optional) Include additional characters in the pattern (!#$%^ etc) in the to be searched</param>
            <returns>Returns a ERC_Result containing a List of RegisterOffset</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ByteIndexOf(System.Byte[],System.Byte[])">
            <summary>
            Private function, BoyerMoore string search algorithm modified to search for sets of bytes in a byte array. 
            Takes two byte arrays, array to be searched and array to search for.
            </summary>
        </member>
        <member name="M:ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a list of modules to exclude from a search of memory.
            </summary>
            <returns>Returns an ErcResult containing a list of stringss</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ToString">
            <summary>
            Override of the ToString method. Returns information about the process in a pleasantly formatted string
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetModuleHandles">
            <summary>
            Returns a list of module handles associated with the process.
            </summary>
            <returns>Returns a dictionary containing the handle and path of each module</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessModuleInformation">
            <summary>
            Gets the list of ModuleInfo objects associated with the current process.
            </summary>
            <returns>Returns an ErcResult containing a list of ModuleInfo objects</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessThreadInformation">
            <summary>
            Gets the list of ThreadInfo objects associated with the current process.
            </summary>
            <returns>Returns an ErcResult containing a list of ThreadInfo objects</returns>
        </member>
        <member name="M:ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)">
            <summary>
            Reads process memory from a specific address for a set number of bytes. 
            </summary>
            <param name="startAddress">The address to start reading from.</param>
            <param name="length">Number of bytes to read.</param>
            <returns>Returns a bytes array containing the specified contents of process memory.</returns>
        </member>
        <member name="T:ERC.ThreadInfo">
            <summary>
            Stores information about the current thread.
            </summary>
        </member>
        <member name="P:ERC.ThreadInfo.ThreadHandle">
            <summary>
            A handle for the current thread.
            </summary>
        </member>
        <member name="P:ERC.ThreadInfo.ThreadID">
            <summary>
            The ID number of the current thread.
            </summary>
        </member>
        <member name="F:ERC.ThreadInfo.Context32">
            <summary>
            x86 CPU Register values.
            </summary>
        </member>
        <member name="F:ERC.ThreadInfo.Context64">
            <summary>
            x64 CPU Register values.
            </summary>
        </member>
        <member name="M:ERC.ThreadInfo.Get_Context">
            <summary>
            Gets the register values of a thread and populates the CONTEXT structs. Should only be used on a suspended thread, results on an active thread are unreliable.
            </summary>
            <returns>Returns an ErcResult, the return value can be ignored, the object should only be checked for error values</returns>
        </member>
        <member name="M:ERC.ThreadInfo.GetSehChain">
            <summary>
            Gets the current SEH chain for the process.
            </summary>
            <returns>Returns a list of IntPtr containing the SEH chain</returns>
        </member>
        <member name="M:ERC.ThreadInfo.GetTeb">
            <summary>
            Gets the Thread environment block of the current thread.
            </summary>
            <returns>Returns a TEB struct</returns>
        </member>
        <member name="M:ERC.ThreadInfo.ToString">
            <summary>
            Gets information specific to the current thread and returns it as a string.
            </summary>
            <returns>Returns a string</returns>
        </member>
    </members>
</doc>



================================================
File: ERC/ERC/ERCException.cs
================================================
ï»¿using System;
using System.Runtime.Serialization;

namespace ERC
{
    /// <summary>
    /// Custom exception handler.
    /// </summary>
    [Serializable]
    public class ERCException : Exception
    {
        /// <summary>
        /// Constructor for the ERCException class.
        /// </summary>
        /// <param name="message">The message associated with the Exception</param>
        public ERCException(string message)
            : base(message)
        { }

        /// <summary>
        /// Creates a serializable exception.
        /// </summary>
        /// <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
        /// <param name="ctxt">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        protected ERCException(SerializationInfo info, StreamingContext ctxt)
            : base(info, ctxt)
        { }
    }
}



================================================
File: ERC/ERC/ERC_Core.cs
================================================
ï»¿using System;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Xml;
using System.ComponentModel;
using ERC.Structures;

namespace ERC
{
    #region ErcCore
    /// <summary>
    /// A single instance of this object should be instantiated at a minimum. It is used for storing global variables such as the working directory etc.
    /// </summary>
    public class ErcCore
    {
        #region Class Variables
        /// <summary>
        /// The current version of the ERC.Net library
        /// </summary>
        public string ErcVersion { get; }
        /// <summary>
        /// The directory where output files will be saved.
        /// </summary>
        public string WorkingDirectory { get; internal set; }
        /// <summary>
        /// The Author to be credited in output files.
        /// </summary>
        public string Author { get; set; }
        /// <summary>
        /// Path of the current ERC_Config.xml file.
        /// </summary>
        private string ConfigPath { get; set; }
        /// <summary>
        /// Path where error details should be logged.
        /// </summary>
        public string SystemErrorLogPath { get; set; }
        /// <summary>
        /// Path to the file containing the standard pattern to be used.
        /// </summary>
        public string PatternStandardPath { get; set; }
        /// <summary>
        /// Path to the file containing the extended pattern to be used.
        /// </summary>
        public string PatternExtendedPath { get; set; }
        private Exception SystemError { get; set; }
        private XmlDocument ErcConfig = new XmlDocument();
        #endregion

        #region DLL Imports
        /// <summary>
        /// Opens an existing local process object.
        /// </summary>
        /// <param name="dwDesiredAccess">The access to the process object. This access right is checked against the security descriptor for the process.</param>
        /// <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
        /// <param name="dwProcessId">The identifier of the local process to be opened.</param>
        /// <returns>If the function succeeds, the return value is an open handle to the specified process.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr OpenProcess(ProcessAccessFlags dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        /// <summary>
        /// Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.
        /// </summary>
        /// <param name="Handle">A handle to the process with memory that is being read.</param>
        /// <param name="Address">A pointer to the base address in the specified process from which to read.</param>
        /// <param name="Arr">A pointer to a buffer that receives the contents from the address space of the specified process.</param>
        /// <param name="Size">The number of bytes to be read from the specified process.</param>
        /// <param name="BytesRead">A pointer to a variable that receives the number of bytes transferred into the specified buffer.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern int ReadProcessMemory(IntPtr Handle, IntPtr Address, [Out] byte[] Arr, int Size, out int BytesRead);

        /// <summary>
        /// Retrieves information about a range of pages within the virtual address space of a specified 32 bit process.
        /// </summary>
        /// <param name="hProcess">A handle to the process whose memory information is queried. </param>
        /// <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
        /// <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION32 structure in which information about the specified page range is returned.</param>
        /// <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
        /// <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        [DllImport("kernel32.dll", SetLastError = true, EntryPoint = "VirtualQueryEx")]
        internal static extern int VirtualQueryEx32(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION32 lpBuffer, uint dwLength);

        /// <summary>
        /// Retrieves information about a range of pages within the virtual address space of a specified 64 bit process.
        /// </summary>
        /// <param name="hProcess">A handle to the process whose memory information is queried. </param>
        /// <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
        /// <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION64 structure in which information about the specified page range is returned.</param>
        /// <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
        /// <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        [DllImport("kernel32.dll", SetLastError = true, EntryPoint = "VirtualQueryEx")]
        internal static extern int VirtualQueryEx64(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION64 lpBuffer, uint dwLength);

        /// <summary>
        /// Determines whether the specified process is running under WOW64 or an Intel64 of x64 processor.
        /// </summary>
        /// <param name="process">A handle to the process.</param>
        /// <param name="wow64Process">A pointer to a value that is set to TRUE if the process is running under WOW64 on an Intel64 or x64 processor.</param>
        /// <returns>If the function succeeds, the return value is a nonzero value.</returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool IsWow64Process([In] IntPtr process, [Out] out bool wow64Process);

        /// <summary>
        /// Opens an existing thread object.
        /// </summary>
        /// <param name="dwDesiredAccess">The access to the thread object.</param>
        /// <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle.</param>
        /// <param name="dwThreadId">The identifier of the thread to be opened.</param>
        /// <returns>If the function succeeds, the return value is an open handle to the specified thread.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);

        /// <summary>
        /// Retrieves the context of the specified 32 bit thread.
        /// </summary>
        /// <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
        /// <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true, EntryPoint = "GetThreadContext")]
        internal static extern bool GetThreadContext32(IntPtr hThread, ref CONTEXT32 lpContext);

        /// <summary>
        /// Retrieves the context of the specified WOW64 thread.
        /// </summary>
        /// <param name="hthread">A handle to the thread whose context is to be retrieved.</param>
        /// <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern bool Wow64GetThreadContext(IntPtr hthread, ref CONTEXT32 lpContext);

        /// <summary>
        /// Retrieves the context of the specified 64 bit thread.
        /// </summary>
        /// <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
        /// <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true, EntryPoint = "GetThreadContext")]
        internal static extern bool GetThreadContext64(IntPtr hThread, ref CONTEXT64 lpContext);

        /// <summary>
        /// Suspends the specified thread.
        /// </summary>
        /// <param name="hThread">A handle to the thread that is to be suspended.</param>
        /// <returns>If the function succeeds, the return value is the thread's previous suspend count. If the function fails the return value is -1.</returns>
        [DllImport("kernel32.dll", SetLastError= true)]
        internal static extern int SuspendThread(IntPtr hThread);

        /// <summary>
        /// Closes an open object handle.
        /// </summary>
        /// <param name="hObject">A valid handle to an open object.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern bool CloseHandle(IntPtr hObject);

        /// <summary>
        /// Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
        /// </summary>
        /// <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
        /// <param name="procName">The function or variable name, or the function's ordinal value.</param>
        /// <returns>If the function succeeds, the return value is the address of the exported function or variable.</returns>
        [DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        internal static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        /// <summary>
        /// This function maps a specified executable module into the address space of the calling process. The executable module can be a .dll or an .exe file. The specified module may cause other modules to be mapped into the address space.
        /// </summary>
        /// <param name="lpFileName">Pointer to a null-terminated string that names the executable module.</param>
        /// <param name="hReservedNull">Must be null.</param>
        /// <param name="dwFlags">Specifies the action to take when loading the module.</param>
        /// <returns></returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);

        /// <summary>
        /// Determines the location of a resource with the specified type and name in the specified module.
        /// </summary>
        /// <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource.</param>
        /// <param name="resName">The name of the resource.</param>
        /// <param name="resType">The resource type.</param>
        /// <returns>If the function succeeds, the return value is a handle to the specified resource's information block.</returns>
        [DllImport("kernel32.dll", SetLastError = true, EntryPoint = "FindResourceA")]
        internal static extern IntPtr FindResouce(IntPtr hModule, ref string resName, ref string resType);

        /// <summary>
        /// Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.
        /// </summary>
        /// <param name="hModule">A handle to the module whose executable file contains the resource.</param>
        /// <param name="hResInfo">A handle to the resource to be loaded. </param>
        /// <returns>If the function succeeds, the return value is a handle to the data associated with the resource.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);

        /// <summary>
        /// Retrieves the process identifier of the specified process.
        /// </summary>
        /// <param name="handle">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right.</param>
        /// <returns>Returns the identifier of the process as a Uint</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern uint GetProcessId(IntPtr handle);

        /// <summary>
        /// Retrieves certain properties of an object handle.
        /// </summary>
        /// <param name="hObject">A handle to an object whose information is to be retrieved.</param>
        /// <param name="lpdwFlags">A pointer to a variable that receives a set of bit flags that specify properties of the object handle or 0. The following values are defined.</param>
        /// <returns>If the function succeeds, the return value is true.</returns>
        [DllImport("kernel32.dll")]
        public static extern bool GetHandleInformation(IntPtr hObject, out uint lpdwFlags);

        /// <summary>
        /// Retrieves a module handle for the specified module. The module must have been loaded by the calling process.
        /// </summary>
        /// <param name="moduleName">The name of the loaded module (either a .dll or .exe file).</param>
        /// <returns>If the function succeeds, the return value is a handle to the specified module.</returns>
        [DllImport("user32.dll", EntryPoint = "GetModuleHandleW", SetLastError = true)]
        internal static extern IntPtr GetModuleHandle(string moduleName);

        /// <summary>
        /// The ZwQueryInformationThread routine retrieves information about the specified thread.
        /// </summary>
        /// <param name="hwnd">Handle to the thread object.</param>
        /// <param name="i">The type of thread information to be retrieved. </param>
        /// <param name="threadinfo">Pointer to a buffer supplied by the caller.</param>
        /// <param name="length">The size, in bytes, of the buffer pointed to by threadinfo.</param>
        /// <param name="bytesread">A pointer to a variable in which the routine returns the size of the requested information.</param>
        /// <returns>ZwQueryInformationThread returns STATUS_SUCCESS on success, or the appropriate NTSTATUS error code on failure.</returns>
        [DllImport("ntdll.dll", SetLastError = true)]
        internal static extern uint ZwQueryInformationThread(IntPtr hwnd, int i, ref ThreadBasicInformation threadinfo, 
            int length, IntPtr bytesread);

        /// <summary>
        /// Retrieves a handle for each module in the specified process.
        /// </summary>
        /// <param name="hProcess">A handle to the process.</param>
        /// <param name="lphModule">An array that receives the list of module handles.</param>
        /// <param name="cb">The size of the lphModule array, in bytes.</param>
        /// <param name="lpcbNeeded">The number of bytes required to store all module handles in the lphModule array.</param>
        /// <param name="dwFilterFlag">The filter criteria. </param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("psapi.dll", SetLastError = true)]
        internal static extern bool EnumProcessModulesEx(IntPtr hProcess,
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.U4)] [In][Out] IntPtr[] lphModule,
            int cb, [MarshalAs(UnmanagedType.U4)] out int lpcbNeeded, uint dwFilterFlag);

        /// <summary>
        /// Retrieves the fully qualified path for the file containing the specified module.
        /// </summary>
        /// <param name="hProcess">A handle to the process that contains the module.</param>
        /// <param name="hModule">A handle to the module. </param>
        /// <param name="lpBaseName">A pointer to a buffer that receives the fully qualified path to the module.</param>
        /// <param name="nSize">The size of the lpFilename buffer, in characters.</param>
        /// <returns>If the function succeeds, the return value specifies the length of the string copied to the buffer.</returns>
        [DllImport("psapi.dll", SetLastError = true)]
        internal static extern uint GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, [Out] StringBuilder lpBaseName,
            [In] [MarshalAs(UnmanagedType.U4)] int nSize);

        /// <summary>
        /// Maintains a list of loaded DLLs.
        /// </summary>
        /// <param name="DllName">The name of the image.</param>
        /// <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
        /// <returns>If the function succeeds, the return value is a pointer to a LOADED_IMAGE structure.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true)]
        internal static extern IntPtr ImageLoad(string DllName, string DllPath);

        /// <summary>
        /// Locates and returns the load configuration data of an image.
        /// </summary>
        /// <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
        /// <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
        /// <returns>If the function succeeds, the return value is TRUE.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true, EntryPoint = "GetImageConfigInformation")]
        internal static extern bool GetImageConfigInformation32(IntPtr dllptr, out IMAGE_LOAD_CONFIG_DIRECTORY32 ImageConfigDir32);

        /// <summary>
        /// Locates and returns the load configuration data of an image.
        /// </summary>
        /// <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
        /// <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
        /// <returns>If the function succeeds, the return value is TRUE.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true, EntryPoint = "GetImageConfigInformation")]
        internal static extern bool GetImageConfigInformation64(IntPtr dllptr, out IMAGE_LOAD_CONFIG_DIRECTORY64 ImageConfigDir64);

        /// <summary>
        /// Locates and returns the load configuration data of an image.
        /// </summary>
        /// <param name="loadedImage">A Loaded_Image structure.</param>
        /// <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
        /// <returns>If the function succeeds, the return value is TRUE.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true, EntryPoint = "GetImageConfigInformation")]
        internal static extern bool GetImageConfigInformation32(ref LOADED_IMAGE loadedImage, ref IMAGE_LOAD_CONFIG_DIRECTORY32 ImageConfigDir32);

        /// <summary>
        /// Locates and returns the load configuration data of an image.
        /// </summary>
        /// <param name="loadedImage">A Loaded_Image structure.</param>
        /// <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
        /// <returns>If the function succeeds, the return value is TRUE.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true, EntryPoint = "GetImageConfigInformation")]
        internal static extern bool GetImageConfigInformation64(ref LOADED_IMAGE loadedImage, ref IMAGE_LOAD_CONFIG_DIRECTORY64 ImageConfigDir64);

        /// <summary>
        /// Maps an image and preloads data from the mapped file.
        /// </summary>
        /// <param name="ImageName">The file name of the image (executable file or DLL) that is loaded.</param>
        /// <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
        /// <param name="loadedImage">A pointer to a LOADED_IMAGE structure that receives information about the image after it is loaded.</param>
        /// <param name="Dll">True if the file is a DLL, false if the file is an EXE.</param>
        /// <param name="readOnly">Boolean for the access mode.</param>
        /// <returns>If the function succeeds, the return value is TRUE.</returns>
        [DllImport("Imagehlp.dll", SetLastError = true)]
        internal static extern int MapAndLoad(string ImageName, string DllPath, out LOADED_IMAGE loadedImage, bool Dll, bool readOnly);

        /// <summary>
        /// Takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes.
        /// </summary>
        /// <param name="dwFlags">The portions of the system to be included in the snapshot. </param>
        /// <param name="th32ProcessID">The process identifier of the process to be included in the snapshot. This parameter can be zero to indicate the current process. This parameter is used when the TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPMODULE32, or TH32CS_SNAPALL value is specified. Otherwise, it is ignored and all processes are included in the snapshot.</param>
        /// <returns>If the function succeeds, it returns an open handle to the specified snapshot.</returns>
        [DllImport("kernel32", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern IntPtr CreateToolhelp32Snapshot([In] Structures.SnapshotFlags dwFlags, [In] uint th32ProcessID);

        /// <summary>
        /// Retrieves information about the first process encountered in a system snapshot.
        /// </summary>
        /// <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
        /// <param name="lppe">A pointer to a PROCESSENTRY32 structure.</param>
        /// <returns>Returns TRUE if the first entry of the process list has been copied to the buffer or FALSE otherwise. </returns>
        [DllImport("kernel32", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Process32First([In] IntPtr hSnapshot, ref PROCESSENTRY32 lppe);

        /// <summary>
        /// Retrieves information about the next process recorded in a system snapshot.
        /// </summary>
        /// <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
        /// <param name="lppe">A pointer to a PROCESSENTRY32 structure.</param>
        /// <returns>Returns TRUE if the next entry of the process list has been copied to the buffer or FALSE otherwise.</returns>
        [DllImport("kernel32", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Process32Next([In] IntPtr hSnapshot, ref PROCESSENTRY32 lppe);

        /// <summary>
        /// Retrieves information about the first heap that has been allocated by a specified process.
        /// </summary>
        /// <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
        /// <param name="lphl">A pointer to a HEAPLIST32 structure.</param>
        /// <returns>Returns TRUE if the first entry of the heap list has been copied to the buffer or FALSE otherwise.</returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Heap32ListFirst(IntPtr hSnapshot, ref HEAPLIST32 lphl);

        /// <summary>
        /// Retrieves information about the next heap that has been allocated by a specified process.
        /// </summary>
        /// <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
        /// <param name="lphl">A pointer to a HEAPLIST32 structure.</param>
        /// <returns>Returns TRUE if the first entry of the heap list has been copied to the buffer or FALSE otherwise.</returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Heap32ListNext(IntPtr hSnapshot, ref HEAPLIST32 lphl);

        /// <summary>
        /// Retrieves information about the first block of a heap that has been allocated by a process.
        /// </summary>
        /// <param name="heapentry32">A pointer to a HEAPENTRY32 structure.</param>
        /// <param name="processID">The identifier of the process context that owns the heap.</param>
        /// <param name="heapID">The identifier of the heap to be enumerated.</param>
        /// <returns>Returns TRUE if information for the first heap block has been copied to the buffer or FALSE otherwise. </returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Heap32First(ref HEAPENTRY32 heapentry32, uint processID, IntPtr heapID);

        /// <summary>
        /// Retrieves information about the next block of a heap that has been allocated by a process.
        /// </summary>
        /// <param name="heapentry32">A pointer to a HEAPENTRY32 structure.</param>
        /// <returns>Returns TRUE if information about the next block in the heap has been copied to the buffer or FALSE otherwise. </returns>
        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool Heap32Next(ref HEAPENTRY32 heapentry32);
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor.
        /// </summary>
        public ErcCore()
        {
            WorkingDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);
            WorkingDirectory = WorkingDirectory.Remove(0, 6);
            WorkingDirectory += "\\";
            ConfigPath = Path.Combine(WorkingDirectory, "ERC_Config.XML");
            PatternStandardPath = "";
            PatternExtendedPath = "";
            SystemErrorLogPath = Path.Combine(WorkingDirectory, "System_Error.LOG");
            
            ErcVersion = "ERC.Xdbg_32-2.0.3"; //Uncomment for 32bit.
            //ErcVersion = "ERC.Xdbg_64-2.0.3"; //Uncomment for 64bit.

            bool configRead = false;
            while (configRead == false)
            {
                if (File.Exists(ConfigPath))
                {
                    try
                    {
                        ErcConfig.Load(ConfigPath);
                        var singleNode = ErcConfig.DocumentElement.SelectNodes("//Working_Directory");
                        WorkingDirectory = singleNode[0].InnerText;
                        singleNode = ErcConfig.DocumentElement.SelectNodes("//Author");
                        Author = singleNode[0].InnerText;
                        singleNode = ErcConfig.DocumentElement.SelectNodes("//Standard_Pattern");
                        PatternStandardPath = singleNode[0].InnerText;
                        singleNode = ErcConfig.DocumentElement.SelectNodes("//Extended_Pattern");
                        PatternExtendedPath = singleNode[0].InnerText;
                        singleNode = ErcConfig.DocumentElement.SelectNodes("//Error_Log_File");
                        SystemErrorLogPath = singleNode[0].InnerText;
                        configRead = true;
                        ErcConfig = null;
                        GC.Collect();
                    }
                    catch (Exception e)
                    {
                        SystemError = e;
                        BuildDefaultConfig();
                    }
                }
                else
                {
                    BuildDefaultConfig();
                }
            }

            if (PatternStandardPath == "")
            {
                PatternStandardPath = Path.Combine(WorkingDirectory, "Pattern_Standard");
                if (!File.Exists(PatternStandardPath))
                {
                    var patternExt = Utilities.PatternTools.PatternCreate(20277, this, false);
                    if (patternExt.Error != null)
                    {
                        patternExt.LogEvent();
                        Environment.Exit(1);
                    }
                    File.WriteAllText(PatternStandardPath, patternExt.ReturnValue);
                }
            }
            else
            {
                if (!File.Exists(PatternStandardPath))
                {
                    var patternExt = Utilities.PatternTools.PatternCreate(20277, this, false);
                    if (patternExt.Error != null)
                    {
                        patternExt.LogEvent();
                        Environment.Exit(1);
                    }
                    File.WriteAllText(PatternStandardPath, patternExt.ReturnValue);
                }
            }

            if (PatternExtendedPath == "")
            {
                PatternExtendedPath = Path.Combine(WorkingDirectory, "Pattern_Extended");
                if (!File.Exists(PatternExtendedPath))
                {
                    var patternExt = Utilities.PatternTools.PatternCreate(66923, this, true);
                    if (patternExt.Error != null)
                    {
                        patternExt.LogEvent();
                        Environment.Exit(1);
                    }
                    File.WriteAllText(PatternExtendedPath, patternExt.ReturnValue);
                }
            }
            else
            {
                if (!File.Exists(PatternExtendedPath))
                {
                    var patternExt = Utilities.PatternTools.PatternCreate(66923, this, true);
                    if (patternExt.Error != null)
                    {
                        patternExt.LogEvent();
                        Environment.Exit(1);
                    }
                    File.WriteAllText(PatternExtendedPath, patternExt.ReturnValue);
                }
            }
        }

        /// <summary>
        /// Constructor to be used when creating an object that inherits from an ErcCore object.
        /// </summary>
        /// <param name="parent">The ErcCore object to be inherited from.</param>
        protected ErcCore(ErcCore parent)
        {
            WorkingDirectory = parent.WorkingDirectory;
            Author = parent.Author;
        }

        private void BuildDefaultConfig()
        {
            string patternStandardPath = Path.Combine(WorkingDirectory, "Pattern_Standard");
            string patternExtendedPath = Path.Combine(WorkingDirectory, "Pattern_Extended");
            string systemErrorLogPath = Path.Combine(WorkingDirectory, "System_Error.LOG");

            XmlDocument defaultConfig = new XmlDocument();
            XmlDeclaration xmlDeclaration = defaultConfig.CreateXmlDeclaration("1.0", "UTF-8", null);
            XmlElement root = defaultConfig.DocumentElement;
            defaultConfig.InsertBefore(xmlDeclaration, root);

            XmlElement erc_xml = defaultConfig.CreateElement(string.Empty, "ERC.Net", Assembly.GetExecutingAssembly().GetName().Version.ToString());
            defaultConfig.AppendChild(erc_xml);

            XmlElement parameters = defaultConfig.CreateElement(string.Empty, "Parameters", string.Empty);
            erc_xml.AppendChild(parameters);

            XmlElement workingDir = defaultConfig.CreateElement(string.Empty, "Working_Directory", string.Empty);
            XmlText text1 = defaultConfig.CreateTextNode(WorkingDirectory);
            workingDir.AppendChild(text1);
            parameters.AppendChild(workingDir);

            XmlElement author = defaultConfig.CreateElement(string.Empty, "Author", string.Empty);
            text1 = defaultConfig.CreateTextNode("No_Author_Set");
            author.AppendChild(text1);
            parameters.AppendChild(author);

            XmlElement patternS = defaultConfig.CreateElement(string.Empty, "Standard_Pattern", string.Empty);
            text1 = defaultConfig.CreateTextNode(patternStandardPath);
            patternS.AppendChild(text1);
            parameters.AppendChild(patternS);

            XmlElement patternE = defaultConfig.CreateElement(string.Empty, "Extended_Pattern", string.Empty);
            text1 = defaultConfig.CreateTextNode(patternExtendedPath);
            patternE.AppendChild(text1);
            parameters.AppendChild(patternE);

            XmlElement errorlog = defaultConfig.CreateElement(string.Empty, "Error_Log_File", string.Empty);
            text1 = defaultConfig.CreateTextNode(systemErrorLogPath);
            errorlog.AppendChild(text1);
            parameters.AppendChild(errorlog);

            try
            {
                defaultConfig.Save(ConfigPath);
            }
            catch(Exception e)
            {
                SystemError = e;
                LogEvent(e);
            }
        }
        #endregion

        #region Variable Setters

        #region SetWorkingDirectory
        /// <summary>
        /// Changes the working directory in both the XML file and associated ErcCore object
        /// </summary>
        /// <param name="path"></param>
        public void SetWorkingDirectory(string path)
        {
            if (Directory.Exists(path))
            {
                if (!path.EndsWith("\\"))
                {
                    path += "\\";
                }
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Working_Directory");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
                WorkingDirectory = path;
            }
            else
            {
                throw new Exception("User Input Error: Value supplied for working directory is not a valid directory");
            }
        }
        #endregion

        #region SetPatternStandardPath
        /// <summary>
        /// Sets the standard pattern file path. Any pattern can replace the standard pattern when searching however the new pattern must be written to a file and the file path set here.
        /// </summary>
        /// <param name="path">The filepath of the new standard pattern file</param>
        public void SetPatternStandardPath(string path)
        {
            if (Directory.Exists(path))
            {
                if (!path.EndsWith("\\"))
                {
                    path += "\\";
                }
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Standard_Pattern");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
                PatternStandardPath = path;
            }
            else
            {
                throw new Exception("User Input Error: Value supplied for the standard pattern path is not a valid directory");
            }
        }
        #endregion

        #region SetPatternExtendedPath
        /// <summary>
        /// Sets the extended pattern file path. Any pattern can replace the extended pattern when searching however the new pattern must be written to a file and the file path set here.
        /// </summary>
        /// <param name="path">The filepath of the new extended pattern file</param>
        public void SetPatternExtendedPath(string path)
        {
            if (Directory.Exists(path))
            {
                if (!path.EndsWith("\\"))
                {
                    path += "\\";
                }
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Extended_Pattern");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
                PatternExtendedPath = path;
            }
            else
            {
                throw new Exception("User Input Error: Value supplied for the extended pattern path is not a valid directory");
            }
        }
        #endregion

        #region SetAuthor
        /// <summary>
        /// Sets the name of the author for use when outputing results to disk.
        /// </summary>
        /// <param name="author">String containing the name of the author</param>
        public void SetAuthor(string author)
        {
            XmlDocument xmldoc = new XmlDocument();
            xmldoc.Load(ConfigPath);
            var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Author");
            singleNode.InnerText = author;
            xmldoc.Save(ConfigPath);
            Author = author;
        }
        #endregion

        #region SetSystemErrorLogFile
        /// <summary>
        /// Sets the error log file to a user specified filepath. 
        /// </summary>
        /// <param name="path">The new error log filepath.</param>
        public void SetErrorFile(string path)
        {
            if (File.Exists(path))
            {
                SystemErrorLogPath = path;
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Error_Log_File");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
                SystemErrorLogPath = path;
            } 
            else if (Directory.Exists(Path.GetDirectoryName(path)))
            {
                if (!path.EndsWith("\\"))
                {
                    path += "\\";
                }
                path += "System_Error.LOG";
                File.Create(path);
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Error_Log_File");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
            }
            else
            {
                File.Create(WorkingDirectory + "System_Error.LOG");
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(ConfigPath);
                var singleNode = xmldoc.DocumentElement.SelectSingleNode("//Error_Log_File");
                singleNode.InnerText = path;
                xmldoc.Save(ConfigPath);
                SystemErrorLogPath = path;
            }
        }
        #endregion

        #region LogEvent
        /// <summary>
        /// Logs events to the error log path in the XML file. This file is only appended to and never replaced.
        /// </summary>
        /// <param name="e">The exception to log</param>
        public void LogEvent(Exception e)
        {
            using (StreamWriter sw = File.AppendText(SystemErrorLogPath))
            {
                sw.WriteLine(e);
            }
        }
        #endregion

        #endregion

        #region X64toX32PointerModifier
        /// <summary>
        /// Converts a x64 pointer into a x86 pointer.
        /// </summary>
        /// <param name="ptr64">64bit pointer to be converted</param>
        /// <returns>Retruns a byte array 4 bytes long containing the modified pointer</returns>
        internal static byte[] X64toX32PointerModifier(byte[] ptr64)
        {
            byte[] ptr32 = new byte[4];
            Array.Copy(ptr64, 0, ptr32, 0, 4);
            return ptr32;
        }
        #endregion
    }
    #endregion

    #region ErcResult
    /// <summary>
    /// A basic object which contains a generic type and exception. 
    /// </summary>
    /// <typeparam name="T">A generic type</typeparam>
    public class ErcResult<T> : ErcCore
    {
        /// <summary>
        /// Generic Type.
        /// </summary>
        public T ReturnValue { get; set; }
        /// <summary>
        /// Exception to be logged by LogEvent().
        /// </summary>
        public Exception Error { get; set; }

        /// <summary>
        /// Base constructor.
        /// </summary>
        /// <param name="core">The ErcCore object to inherit from.</param>
        public ErcResult(ErcCore core) : base(core)
        {
            SystemErrorLogPath = core.SystemErrorLogPath;
        }

        /// <summary>
        /// Base constructor with a custom location for exceptions to be logged.
        /// </summary>
        /// <param name="core">The ErcCore object to inherit from.</param>
        /// <param name="errorFile">The location to log exceptions.</param>
        public ErcResult(ErcCore core, string errorFile) : base(core)
        {
            SystemErrorLogPath = errorFile;
        }

        /// <summary>
        /// Logs an event to the ErrorLogFile value.
        /// </summary>
        public void LogEvent()
        {
            using (StreamWriter sw = File.AppendText(base.SystemErrorLogPath))
            {
                sw.WriteLine(Error + " TimeStamp: " + DateTime.Now);
            }
        }

        /// <summary>
        /// Override of the ToString method. Returns a string containing values relevant to the object. 
        /// </summary>
        /// <returns>A string containing information about the object.</returns>
        public override string ToString()
        {
            string ret = "";
            ret += "ErcResult Type = " + ReturnValue.GetType() + Environment.NewLine;
            if (Error != null)
            {
                ret += "ErcResult.Error = " + Error.ToString() + Environment.NewLine;
            }
            else
            {
                ret += "ErcResult.Error = NULL" + Environment.NewLine;
            }
            ret += "ErcResult.ErrorLogFile = " + SystemErrorLogPath + Environment.NewLine;
            return base.ToString();
        }
    }
    #endregion

    #region Type Definitions

    #region MachineType
    /// <summary>
    /// Enum containing types of machine architectures.
    /// </summary>
    public enum MachineType
    {
        /// <summary>
        /// Native.
        /// </summary>
        [Description("Native")]
        Native = 0,
        /// <summary>
        /// x86.
        /// </summary>
        [Description("I386")]
        I386 = 0x014c,
        /// <summary>
        /// Itanium.
        /// </summary>
        [Description("Itanium")]
        Itanium = 0x0200,
        /// <summary>
        /// x64.
        /// </summary>
        [Description("x64")]
        x64 = 0x8664,
        /// <summary>
        /// Type is unknown or unset.
        /// </summary>
        [Description("Error")]
        error = -1
    }
    #endregion

    namespace Structures
    {
        #region DLL Headers

        #region IMAGE_DOS_HEADER
        /// <summary>
        /// IMAGE_DOS_HEADER.
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_DOS_HEADER
        {
            /// <summary>
            /// A pointer to the IMAGE_NT_HEADER.
            /// </summary>
            [FieldOffset(60)] public int nt_head_ptr;
        }
        #endregion

        #region IMAGE_FILE_HEADER
        /// <summary>
        /// IMAGE_FILE_HEADER. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_FILE_HEADER
        {
            /// <summary>
            /// Machine
            /// </summary>
            [FieldOffset(0)] public ushort Machine;
            /// <summary>
            /// NumberOfSections
            /// </summary>
            [FieldOffset(2)] public ushort NumberOfSections;
            /// <summary>
            /// TimeDateStamp
            /// </summary>
            [FieldOffset(4)] public uint TimeDateStamp;
            /// <summary>
            /// PointerToSymbolTable
            /// </summary>
            [FieldOffset(8)] public uint PointerToSymbolTable;
            /// <summary>
            /// NumberOfSymbols
            /// </summary>
            [FieldOffset(12)] public uint NumberOfSymbols;
            /// <summary>
            /// SizeOfOptionalHeader
            /// </summary>
            [FieldOffset(16)] public ushort SizeOfOptionalHeader;
            /// <summary>
            /// Characteristics
            /// </summary>
            [FieldOffset(18)] public ushort Characteristics;
        }
        #endregion

        #region IMAGE_NT_HEADERS
        /// <summary>
        /// IMAGE_NT_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_NT_HEADERS32
        {
            /// <summary>
            /// Signature
            /// </summary>
            [FieldOffset(0)] public uint Signature;
            /// <summary>
            /// FileHeader
            /// </summary>
            [FieldOffset(4)] public IMAGE_FILE_HEADER FileHeader;
            /// <summary>
            /// OptionalHeader
            /// </summary>
            [FieldOffset(24)] public IMAGE_OPTIONAL_HEADER32 OptionalHeader;
        }

        /// <summary>
        /// IMAGE_NT_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_NT_HEADERS64
        {
            /// <summary>
            /// Signature
            /// </summary>
            [FieldOffset(0)] public uint Signature;
            /// <summary>
            /// FileHeader
            /// </summary>
            [FieldOffset(4)] public IMAGE_FILE_HEADER FileHeader;
            /// <summary>
            /// OptionalHeader
            /// </summary>
            [FieldOffset(24)] public IMAGE_OPTIONAL_HEADER64 OptionalHeader;
        }
        #endregion

        #region IMAGE_DATA_DIRECTORY
        /// <summary>
        /// IMAGE_DATA_DIRECTORY. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_DATA_DIRECTORY
        {
            /// <summary>
            /// VirtualAddress.
            /// </summary>
            [FieldOffset(0)] public uint VirtualAddress;
            /// <summary>
            /// Size.
            /// </summary>
            [FieldOffset(4)] public uint Size;
        }
        #endregion

        #region IMAGE_OPTIONAL_HEADER32
        /// <summary>
        /// IMAGE_OPTIONAL_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_OPTIONAL_HEADER32
        {
            /// <summary>
            /// Magic
            /// </summary>
            [FieldOffset(0)] public MagicType Magic;
            /// <summary>
            /// MajorLinkerVersion
            /// </summary>
            [FieldOffset(2)] public byte MajorLinkerVersion;
            /// <summary>
            /// MinorLinkerVersion
            /// </summary>
            [FieldOffset(3)] public byte MinorLinkerVersion;
            /// <summary>
            /// SizeOfCode
            /// </summary>
            [FieldOffset(4)] public uint SizeOfCode;
            /// <summary>
            /// SizeOfInitializedData
            /// </summary>
            [FieldOffset(8)] public uint SizeOfInitializedData;
            /// <summary>
            /// SizeOfUninitializedData
            /// </summary>
            [FieldOffset(12)] public uint SizeOfUninitializedData;
            /// <summary>
            /// AddressOfEntryPoint
            /// </summary>
            [FieldOffset(16)] public uint AddressOfEntryPoint;
            /// <summary>
            /// BaseOfCode
            /// </summary>
            [FieldOffset(20)] public uint BaseOfCode;
            /// <summary>
            /// BaseOfData
            /// </summary>
            [FieldOffset(24)] public uint BaseOfData;
            /// <summary>
            /// ImageBase
            /// </summary>
            [FieldOffset(28)] public uint ImageBase;
            /// <summary>
            /// SectionAlignment
            /// </summary>
            [FieldOffset(32)] public uint SectionAlignment;
            /// <summary>
            /// FileAlignment
            /// </summary>
            [FieldOffset(36)] public uint FileAlignment;
            /// <summary>
            /// MajorOperatingSystemVersion
            /// </summary>
            [FieldOffset(40)] public ushort MajorOperatingSystemVersion;
            /// <summary>
            /// MinorOperatingSystemVersion
            /// </summary>
            [FieldOffset(42)] public ushort MinorOperatingSystemVersion;
            /// <summary>
            /// MajorImageVersion
            /// </summary>
            [FieldOffset(44)] public ushort MajorImageVersion;
            /// <summary>
            /// MinorImageVersion
            /// </summary>
            [FieldOffset(46)] public ushort MinorImageVersion;
            /// <summary>
            /// MajorSubsystemVersion
            /// </summary>
            [FieldOffset(48)] public ushort MajorSubsystemVersion;
            /// <summary>
            /// MinorSubsystemVersion
            /// </summary>
            [FieldOffset(50)] public ushort MinorSubsystemVersion;
            /// <summary>
            /// Win32VersionValue
            /// </summary>
            [FieldOffset(52)] public uint Win32VersionValue;
            /// <summary>
            /// SizeOfImage
            /// </summary>
            [FieldOffset(56)] public uint SizeOfImage;
            /// <summary>
            /// SizeOfHeaders
            /// </summary>
            [FieldOffset(60)] public uint SizeOfHeaders;
            /// <summary>
            /// CheckSum
            /// </summary>
            [FieldOffset(64)] public uint CheckSum;
            /// <summary>
            /// Subsystem
            /// </summary>
            [FieldOffset(68)] public SubSystemType Subsystem;
            /// <summary>
            /// DllCharacteristics
            /// </summary>
            [FieldOffset(70)] public ushort DllCharacteristics;
            /// <summary>
            /// SizeOfStackReserve
            /// </summary>
            [FieldOffset(72)] public uint SizeOfStackReserve;
            /// <summary>
            /// SizeOfStackCommit
            /// </summary>
            [FieldOffset(76)] public uint SizeOfStackCommit;
            /// <summary>
            /// SizeOfHeapReserve
            /// </summary>
            [FieldOffset(80)] public uint SizeOfHeapReserve;
            /// <summary>
            /// SizeOfHeapCommit
            /// </summary>
            [FieldOffset(84)] public uint SizeOfHeapCommit;
            /// <summary>
            /// LoaderFlags
            /// </summary>
            [FieldOffset(88)] public uint LoaderFlags;
            /// <summary>
            /// NumberOfRvaAndSizes
            /// </summary>
            [FieldOffset(92)] public uint NumberOfRvaAndSizes;
            /// <summary>
            /// ExportTable
            /// </summary>
            [FieldOffset(96)] public IMAGE_DATA_DIRECTORY ExportTable;
            /// <summary>
            /// ImportTable
            /// </summary>
            [FieldOffset(104)] public IMAGE_DATA_DIRECTORY ImportTable;
            /// <summary>
            /// ResourceTable
            /// </summary>
            [FieldOffset(112)] public IMAGE_DATA_DIRECTORY ResourceTable;
            /// <summary>
            /// ExceptionTable
            /// </summary>
            [FieldOffset(120)] public IMAGE_DATA_DIRECTORY ExceptionTable;
            /// <summary>
            /// CertificateTable
            /// </summary>
            [FieldOffset(128)] public IMAGE_DATA_DIRECTORY CertificateTable;
            /// <summary>
            /// BaseRelocationTable
            /// </summary>
            [FieldOffset(136)] public IMAGE_DATA_DIRECTORY BaseRelocationTable;
            /// <summary>
            /// Debug
            /// </summary>
            [FieldOffset(144)] public IMAGE_DATA_DIRECTORY Debug;
            /// <summary>
            /// Architecture
            /// </summary>
            [FieldOffset(152)] public IMAGE_DATA_DIRECTORY Architecture;
            /// <summary>
            /// GlobalPtr
            /// </summary>
            [FieldOffset(160)] public IMAGE_DATA_DIRECTORY GlobalPtr;
            /// <summary>
            /// TLSTable
            /// </summary>
            [FieldOffset(168)] public IMAGE_DATA_DIRECTORY TLSTable;
            /// <summary>
            /// LoadConfigTable
            /// </summary>
            [FieldOffset(176)] public IMAGE_DATA_DIRECTORY LoadConfigTable;
            /// <summary>
            /// BoundImport
            /// </summary>
            [FieldOffset(184)] public IMAGE_DATA_DIRECTORY BoundImport;
            /// <summary>
            /// IAT
            /// </summary>
            [FieldOffset(192)] public IMAGE_DATA_DIRECTORY IAT;
            /// <summary>
            /// DelayImportDescriptor
            /// </summary>
            [FieldOffset(200)] public IMAGE_DATA_DIRECTORY DelayImportDescriptor;
            /// <summary>
            /// CLRRuntimeHeader
            /// </summary>
            [FieldOffset(208)] public IMAGE_DATA_DIRECTORY CLRRuntimeHeader;
            /// <summary>
            /// Reserved
            /// </summary>
            [FieldOffset(216)] public IMAGE_DATA_DIRECTORY Reserved;
        }
        #endregion

        #region IMAGE_OPTIONAL_HEADER64
        /// <summary>
        /// IMAGE_OPTIONAL_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_OPTIONAL_HEADER64
        {
            /// <summary>
            /// Magic
            /// </summary>
            [FieldOffset(0)] public MagicType Magic;
            /// <summary>
            /// MajorLinkerVersion
            /// </summary>
            [FieldOffset(2)] public byte MajorLinkerVersion;
            /// <summary>
            /// MinorLinkerVersion
            /// </summary>
            [FieldOffset(3)] public byte MinorLinkerVersion;
            /// <summary>
            /// SizeOfCode
            /// </summary>
            [FieldOffset(4)] public uint SizeOfCode;
            /// <summary>
            /// SizeOfInitializedData
            /// </summary>
            [FieldOffset(8)] public uint SizeOfInitializedData;
            /// <summary>
            /// SizeOfUninitializedData
            /// </summary>
            [FieldOffset(12)] public uint SizeOfUninitializedData;
            /// <summary>
            /// AddressOfEntryPoint
            /// </summary>
            [FieldOffset(16)] public uint AddressOfEntryPoint;
            /// <summary>
            /// BaseOfCode
            /// </summary>
            [FieldOffset(20)] public uint BaseOfCode;
            /// <summary>
            /// ImageBase
            /// </summary>
            [FieldOffset(24)] public ulong ImageBase;
            /// <summary>
            /// SectionAlignment
            /// </summary>
            [FieldOffset(32)] public uint SectionAlignment;
            /// <summary>
            /// FileAlignment
            /// </summary>
            [FieldOffset(36)] public uint FileAlignment;
            /// <summary>
            /// MajorOperatingSystemVersion
            /// </summary>
            [FieldOffset(40)] public ushort MajorOperatingSystemVersion;
            /// <summary>
            /// MinorOperatingSystemVersion
            /// </summary>
            [FieldOffset(42)] public ushort MinorOperatingSystemVersion;
            /// <summary>
            /// MajorImageVersion
            /// </summary>
            [FieldOffset(44)] public ushort MajorImageVersion;
            /// <summary>
            /// MinorImageVersion
            /// </summary>
            [FieldOffset(46)] public ushort MinorImageVersion;
            /// <summary>
            /// MajorSubsystemVersion
            /// </summary>
            [FieldOffset(48)] public ushort MajorSubsystemVersion;
            /// <summary>
            /// MinorSubsystemVersion
            /// </summary>
            [FieldOffset(50)] public ushort MinorSubsystemVersion;
            /// <summary>
            /// Win32VersionValue
            /// </summary>
            [FieldOffset(52)] public uint Win32VersionValue;
            /// <summary>
            /// SizeOfImage
            /// </summary>
            [FieldOffset(56)] public uint SizeOfImage;
            /// <summary>
            /// SizeOfHeaders
            /// </summary>
            [FieldOffset(60)] public uint SizeOfHeaders;
            /// <summary>
            /// CheckSum
            /// </summary>
            [FieldOffset(64)] public uint CheckSum;
            /// <summary>
            /// Subsystem
            /// </summary>
            [FieldOffset(68)] public SubSystemType Subsystem;
            /// <summary>
            /// DllCharacteristics
            /// </summary>
            [FieldOffset(70)] public ushort DllCharacteristics;
            /// <summary>
            /// SizeOfStackReserve
            /// </summary>
            [FieldOffset(72)] public ulong SizeOfStackReserve;
            /// <summary>
            /// SizeOfStackCommit
            /// </summary>
            [FieldOffset(80)] public ulong SizeOfStackCommit;
            /// <summary>
            /// SizeOfHeapReserve
            /// </summary>
            [FieldOffset(88)] public ulong SizeOfHeapReserve;
            /// <summary>
            /// SizeOfHeapCommit
            /// </summary>
            [FieldOffset(96)] public ulong SizeOfHeapCommit;
            /// <summary>
            /// LoaderFlags
            /// </summary>
            [FieldOffset(104)] public uint LoaderFlags;
            /// <summary>
            /// NumberOfRvaAndSizes
            /// </summary>
            [FieldOffset(108)] public uint NumberOfRvaAndSizes;
            /// <summary>
            /// ExportTable
            /// </summary>
            [FieldOffset(112)] public IMAGE_DATA_DIRECTORY ExportTable;
            /// <summary>
            /// ImportTable
            /// </summary>
            [FieldOffset(120)] public IMAGE_DATA_DIRECTORY ImportTable;
            /// <summary>
            /// ResourceTable
            /// </summary>
            [FieldOffset(128)] public IMAGE_DATA_DIRECTORY ResourceTable;
            /// <summary>
            /// ExceptionTable
            /// </summary>
            [FieldOffset(136)] public IMAGE_DATA_DIRECTORY ExceptionTable;
            /// <summary>
            /// CertificateTable
            /// </summary>
            [FieldOffset(144)] public IMAGE_DATA_DIRECTORY CertificateTable;
            /// <summary>
            /// BaseRelocationTable
            /// </summary>
            [FieldOffset(152)] public IMAGE_DATA_DIRECTORY BaseRelocationTable;
            /// <summary>
            /// Debug
            /// </summary>
            [FieldOffset(160)] public IMAGE_DATA_DIRECTORY Debug;
            /// <summary>
            /// Architecture
            /// </summary>
            [FieldOffset(168)] public IMAGE_DATA_DIRECTORY Architecture;
            /// <summary>
            /// GlobalPtr
            /// </summary>
            [FieldOffset(176)] public IMAGE_DATA_DIRECTORY GlobalPtr;
            /// <summary>
            /// TLSTable
            /// </summary>
            [FieldOffset(184)] public IMAGE_DATA_DIRECTORY TLSTable;
            /// <summary>
            /// LoadConfigTable
            /// </summary>
            [FieldOffset(192)] public IMAGE_DATA_DIRECTORY LoadConfigTable;
            /// <summary>
            /// BoundImport
            /// </summary>
            [FieldOffset(200)] public IMAGE_DATA_DIRECTORY BoundImport;
            /// <summary>
            /// IAT
            /// </summary>
            [FieldOffset(208)] public IMAGE_DATA_DIRECTORY IAT;
            /// <summary>
            /// DelayImportDescriptor
            /// </summary>
            [FieldOffset(216)] public IMAGE_DATA_DIRECTORY DelayImportDescriptor;
            /// <summary>
            /// CLRRuntimeHeader
            /// </summary>
            [FieldOffset(224)] public IMAGE_DATA_DIRECTORY CLRRuntimeHeader;
            /// <summary>
            /// Reserved
            /// </summary>
            [FieldOffset(232)] public IMAGE_DATA_DIRECTORY Reserved;
        }
        #endregion

        #region MagicType
        /// <summary>
        /// Image Option Header Magic Type.
        /// </summary>
        public enum MagicType : ushort
        {
            /// <summary>
            /// IMAGE_NT_OPTIONAL_HDR32_MAGIC
            /// </summary>
            IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b,
            /// <summary>
            /// IMAGE_NT_OPTIONAL_HDR64_MAGIC
            /// </summary>
            IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b
        }
        #endregion

        #region SubSystemType
        /// <summary>
        /// Image Option Header SubSystem Type.
        /// </summary>
        public enum SubSystemType : ushort
        {
            /// <summary>
            /// IMAGE_SUBSYSTEM_UNKNOWN
            /// </summary>
            IMAGE_SUBSYSTEM_UNKNOWN = 0,
            /// <summary>
            /// IMAGE_SUBSYSTEM_NATIVE
            /// </summary>
            IMAGE_SUBSYSTEM_NATIVE = 1,
            /// <summary>
            /// IMAGE_SUBSYSTEM_WINDOWS_GUI
            /// </summary>
            IMAGE_SUBSYSTEM_WINDOWS_GUI = 2,
            /// <summary>
            /// IMAGE_SUBSYSTEM_WINDOWS_CUI
            /// </summary>
            IMAGE_SUBSYSTEM_WINDOWS_CUI = 3,
            /// <summary>
            /// IMAGE_SUBSYSTEM_POSIX_CUI
            /// </summary>
            IMAGE_SUBSYSTEM_POSIX_CUI = 7,
            /// <summary>
            /// IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
            /// </summary>
            IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9,
            /// <summary>
            /// IMAGE_SUBSYSTEM_EFI_APPLICATION
            /// </summary>
            IMAGE_SUBSYSTEM_EFI_APPLICATION = 10,
            /// <summary>
            /// IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
            /// </summary>
            IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11,
            /// <summary>
            /// IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
            /// </summary>
            IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12,
            /// <summary>
            /// IMAGE_SUBSYSTEM_EFI_ROM
            /// </summary>
            IMAGE_SUBSYSTEM_EFI_ROM = 13,
            /// <summary>
            /// IMAGE_SUBSYSTEM_XBOX
            /// </summary>
            IMAGE_SUBSYSTEM_XBOX = 14
        }
        #endregion

        #region IMAGE_LOAD_CONFIG_DIRECTORY32
        /// <summary>
        /// IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct IMAGE_LOAD_CONFIG_DIRECTORY32
        {
            /// <summary>
            /// Size
            /// </summary>
            public uint Size;
            /// <summary>
            /// TimeDateStamp
            /// </summary>
            public uint TimeDateStamp;
            /// <summary>
            /// MajorVersio
            /// </summary>
            public ushort MajorVersion;
            /// <summary>
            /// MinorVersion
            /// </summary>
            public ushort MinorVersion;
            /// <summary>
            /// GlobalFlagsClear
            /// </summary>
            public uint GlobalFlagsClear;
            /// <summary>
            /// GlobalFlagsSet
            /// </summary>
            public uint GlobalFlagsSet;
            /// <summary>
            /// CriticalSectionDefaultTimeout
            /// </summary>
            public uint CriticalSectionDefaultTimeout;
            /// <summary>
            /// DeCommitFreeBlockThreshold
            /// </summary>
            public uint DeCommitFreeBlockThreshold;
            /// <summary>
            /// DeCommitTotalFreeThreshold
            /// </summary>
            public uint DeCommitTotalFreeThreshold;
            /// <summary>
            /// LockPrefixTable
            /// </summary>
            public uint LockPrefixTable;
            /// <summary>
            /// MaximumAllocationSize
            /// </summary>
            public uint MaximumAllocationSize;
            /// <summary>
            /// VirtualMemoryThreshold
            /// </summary>
            public uint VirtualMemoryThreshold;
            /// <summary>
            /// ProcessHeapFlags
            /// </summary>
            public uint ProcessHeapFlags;
            /// <summary>
            /// ProcessAffinityMask
            /// </summary>
            public uint ProcessAffinityMask;
            /// <summary>
            /// CSDVersion
            /// </summary>
            public ushort CSDVersion;
            /// <summary>
            /// DependentLoadFlags
            /// </summary>
            public ushort DependentLoadFlags;
            /// <summary>
            /// EditList
            /// </summary>
            public uint EditList;
            /// <summary>
            /// SecurityCookie
            /// </summary>
            public uint SecurityCookie;
            /// <summary>
            /// SEHandlerTable
            /// </summary>
            public uint SEHandlerTable;
            /// <summary>
            /// SEHandlerCount
            /// </summary>
            public uint SEHandlerCount;
            /// <summary>
            /// GuardCFCheckFunctionPointer
            /// </summary>
            public uint GuardCFCheckFunctionPointer;
            /// <summary>
            /// GuardCFDispatchFunctionPointer
            /// </summary>
            public uint GuardCFDispatchFunctionPointer;
            /// <summary>
            /// GuardCFFunctionTable
            /// </summary>
            public uint GuardCFFunctionTable;
            /// <summary>
            /// GuardCFFunctionCount
            /// </summary>
            public uint GuardCFFunctionCount;
            /// <summary>
            /// GuardFlags
            /// </summary>
            public uint GuardFlags;
            /// <summary>
            /// CodeIntegrity
            /// </summary>
            public IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
            /// <summary>
            /// GuardAddressTakenIatEntryTable
            /// </summary>
            public uint GuardAddressTakenIatEntryTable;
            /// <summary>
            /// GuardAddressTakenIatEntryCount
            /// </summary>
            public uint GuardAddressTakenIatEntryCount;
            /// <summary>
            /// GuardLongJumpTargetTable
            /// </summary>
            public uint GuardLongJumpTargetTable;
            /// <summary>
            /// GuardLongJumpTargetCount
            /// </summary>
            public uint GuardLongJumpTargetCount;
            /// <summary>
            /// DynamicValueRelocTable
            /// </summary>
            public uint DynamicValueRelocTable;
            /// <summary>
            /// CHPEMetadataPointer
            /// </summary>
            public uint CHPEMetadataPointer;
            /// <summary>
            /// GuardRFFailureRoutine
            /// </summary>
            public uint GuardRFFailureRoutine;
            /// <summary>
            /// GuardRFFailureRoutineFunctionPointer
            /// </summary>
            public uint GuardRFFailureRoutineFunctionPointer;
            /// <summary>
            /// DynamicValueRelocTableOffset
            /// </summary>
            public uint DynamicValueRelocTableOffset;
            /// <summary>
            /// DynamicValueRelocTableSection
            /// </summary>
            public ushort DynamicValueRelocTableSection;
            /// <summary>
            /// Reserved2
            /// </summary>
            public ushort Reserved2;
            /// <summary>
            /// GuardRFVerifyStackPointerFunctionPointer
            /// </summary>
            public uint GuardRFVerifyStackPointerFunctionPointer;
            /// <summary>
            /// HotPatchTableOffset
            /// </summary>
            public uint HotPatchTableOffset;
            /// <summary>
            /// Reserved3
            /// </summary>
            public uint Reserved3;
            /// <summary>
            /// EnclaveConfigurationPointer
            /// </summary>
            public uint EnclaveConfigurationPointer;
            /// <summary>
            /// VolatileMetadataPointer
            /// </summary>
            public uint VolatileMetadataPointer;
        }
        #endregion

        #region IMAGE_LOAD_CONFIG_DIRECTORY64
        /// <summary>
        /// IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct IMAGE_LOAD_CONFIG_DIRECTORY64
        {
            /// <summary>
            /// Size
            /// </summary>
            public uint Size;
            /// <summary>
            /// TimeDateStamp
            /// </summary>
            public uint TimeDateStamp;
            /// <summary>
            /// MajorVersion
            /// </summary>
            public ushort MajorVersion;
            /// <summary>
            /// MinorVersion
            /// </summary>
            public ushort MinorVersion;
            /// <summary>
            /// GlobalFlagsClear
            /// </summary>
            public uint GlobalFlagsClear;
            /// <summary>
            /// GlobalFlagsSet
            /// </summary>
            public uint GlobalFlagsSet;
            /// <summary>
            /// CriticalSectionDefaultTimeout
            /// </summary>
            public uint CriticalSectionDefaultTimeout;
            /// <summary>
            /// DeCommitFreeBlockThreshold
            /// </summary>
            public ulong DeCommitFreeBlockThreshold;
            /// <summary>
            /// DeCommitTotalFreeThreshold
            /// </summary>
            public ulong DeCommitTotalFreeThreshold;
            /// <summary>
            /// LockPrefixTable
            /// </summary>
            public ulong LockPrefixTable;
            /// <summary>
            /// MaximumAllocationSize
            /// </summary>
            public ulong MaximumAllocationSize;
            /// <summary>
            /// VirtualMemoryThreshold
            /// </summary>
            public ulong VirtualMemoryThreshold;
            /// <summary>
            /// ProcessAffinityMask
            /// </summary>
            public ulong ProcessAffinityMask;
            /// <summary>
            /// ProcessHeapFlags
            /// </summary>
            public uint ProcessHeapFlags;
            /// <summary>
            /// CSDVersion
            /// </summary>
            public ushort CSDVersion;
            /// <summary>
            /// DependentLoadFlags
            /// </summary>
            public ushort DependentLoadFlags;
            /// <summary>
            /// EditList
            /// </summary>
            public ulong EditList;
            /// <summary>
            /// SecurityCookie
            /// </summary>
            public ulong SecurityCookie;
            /// <summary>
            /// SEHandlerTable
            /// </summary>
            public ulong SEHandlerTable;
            /// <summary>
            /// SEHandlerCount
            /// </summary>
            public ulong SEHandlerCount;
            /// <summary>
            /// GuardCFCheckFunctionPointer
            /// </summary>
            public ulong GuardCFCheckFunctionPointer;
            /// <summary>
            /// GuardCFDispatchFunctionPointer
            /// </summary>
            public ulong GuardCFDispatchFunctionPointer;
            /// <summary>
            /// GuardCFFunctionTable
            /// </summary>
            public ulong GuardCFFunctionTable;
            /// <summary>
            /// GuardCFFunctionCount
            /// </summary>
            public ulong GuardCFFunctionCount;
            /// <summary>
            /// GuardFlags
            /// </summary>
            public uint GuardFlags;
            /// <summary>
            /// CodeIntegrity
            /// </summary>
            public IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
            /// <summary>
            /// GuardAddressTakenIatEntryTable
            /// </summary>
            public ulong GuardAddressTakenIatEntryTable;
            /// <summary>
            /// GuardAddressTakenIatEntryCount
            /// </summary>
            public ulong GuardAddressTakenIatEntryCount;
            /// <summary>
            /// GuardLongJumpTargetTable
            /// </summary>
            public ulong GuardLongJumpTargetTable;
            /// <summary>
            /// GuardLongJumpTargetCount
            /// </summary>
            public ulong GuardLongJumpTargetCount;
            /// <summary>
            /// DynamicValueRelocTable
            /// </summary>
            public ulong DynamicValueRelocTable;
            /// <summary>
            /// CHPEMetadataPointer
            /// </summary>
            public ulong CHPEMetadataPointer;
            /// <summary>
            /// GuardRFFailureRoutine
            /// </summary>
            public ulong GuardRFFailureRoutine;
            /// <summary>
            /// GuardRFFailureRoutineFunctionPointer
            /// </summary>
            public ulong GuardRFFailureRoutineFunctionPointer;
            /// <summary>
            /// DynamicValueRelocTableOffset
            /// </summary>
            public uint DynamicValueRelocTableOffset;
            /// <summary>
            /// DynamicValueRelocTableSection
            /// </summary>
            public ushort DynamicValueRelocTableSection;
            /// <summary>
            /// Reserved2
            /// </summary>
            public ushort Reserved2;
            /// <summary>
            /// GuardRFVerifyStackPointerFunctionPointer
            /// </summary>
            public ulong GuardRFVerifyStackPointerFunctionPointer;
            /// <summary>
            /// HotPatchTableOffset
            /// </summary>
            public uint HotPatchTableOffset;
            /// <summary>
            /// Reserved3
            /// </summary>
            public uint Reserved3;
            /// <summary>
            /// EnclaveConfigurationPointer
            /// </summary>
            public ulong EnclaveConfigurationPointer;
            /// <summary>
            /// VolatileMetadataPointer
            /// </summary>
            public ulong VolatileMetadataPointer;
        }
        #endregion

        #region IMAGE_LOAD_CONFIG_CODE_INTEGRITY
        /// <summary>
        /// IMAGE_LOAD_CONFIG_CODE_INTEGRITY.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
        {
            /// <summary>
            /// Flags
            /// </summary>
            public ushort Flags;
            /// <summary>
            /// Catalog
            /// </summary>
            public ushort Catalog;
            /// <summary>
            /// CatalogOffset
            /// </summary>
            public uint CatalogOffset;
            /// <summary>
            /// Reserved
            /// </summary>
            public uint Reserved;
        };
        #endregion

        #region LOADED_IMAGE
        /// <summary>
        /// LOADED_IMAGE. See https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image
        /// </summary>
        public struct LOADED_IMAGE
        {
            /// <summary>
            /// ModuleName
            /// </summary>
            public IntPtr ModuleName;
            /// <summary>
            /// hFile
            /// </summary>
            public IntPtr hFile;
            /// <summary>
            /// MappedAddress
            /// </summary>
            public IntPtr MappedAddress;
            /// <summary>
            /// FileHeader
            /// </summary>
            public IntPtr FileHeader;
            /// <summary>
            /// LastRvaSection
            /// </summary>
            public IntPtr LastRvaSection;
            /// <summary>
            /// NumberOfSections
            /// </summary>
            public uint NumberOfSections;
            /// <summary>
            /// Sections
            /// </summary>
            public IntPtr Sections;
            /// <summary>
            /// Characteristics
            /// </summary>
            public uint Characteristics;
            /// <summary>
            /// fSystemImage
            /// </summary>
            public bool fSystemImage;
            /// <summary>
            /// fDOSImage
            /// </summary>
            public bool fDOSImage;
            /// <summary>
            /// fReadOnly
            /// </summary>
            public bool fReadOnly;
            /// <summary>
            /// Version
            /// </summary>
            public byte Version;
            /// <summary>
            /// Links
            /// </summary>
            public LIST_ENTRY Links;
            /// <summary>
            /// SizeOfImage
            /// </summary>
            public uint SizeOfImage;
        }
        #endregion

        #region List_Entry
        /// <summary>
        /// Describes an entry in a doubly linked list or serves as the header for such a list. See https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry
        /// </summary>
        public struct LIST_ENTRY
        {
            /// <summary>
            /// Flink points to the next entry in the list.
            /// </summary>
            public IntPtr Flink;
            /// <summary>
            /// Blink points to the previous entry in the list.
            /// </summary>
            public IntPtr Blink;
        }
        #endregion

        #endregion

        #region Process Memory Information

        #region AllocationProtect
        /// <summary>
        /// AllocationProtect.
        /// </summary>
        public enum AllocationProtect : uint
        {
            /// <summary>
            /// PAGE_EXECUTE
            /// </summary>
            PAGE_EXECUTE = 0x00000010,
            /// <summary>
            /// PAGE_EXECUTE_READ
            /// </summary>
            PAGE_EXECUTE_READ = 0x00000020,
            /// <summary>
            /// PAGE_EXECUTE_READWRITE
            /// </summary>
            PAGE_EXECUTE_READWRITE = 0x00000040,
            /// <summary>
            /// PAGE_EXECUTE_WRITECOPY
            /// </summary>
            PAGE_EXECUTE_WRITECOPY = 0x00000080,
            /// <summary>
            /// PAGE_NOACCESS
            /// </summary>
            PAGE_NOACCESS = 0x00000001,
            /// <summary>
            /// PAGE_READONLY
            /// </summary>
            PAGE_READONLY = 0x00000002,
            /// <summary>
            /// PAGE_READWRITE
            /// </summary>
            PAGE_READWRITE = 0x00000004,
            /// <summary>
            /// PAGE_WRITECOPY
            /// </summary>
            PAGE_WRITECOPY = 0x00000008,
            /// <summary>
            /// PAGE_GUARD
            /// </summary>
            PAGE_GUARD = 0x00000100,
            /// <summary>
            /// PAGE_NOCACHE
            /// </summary>
            PAGE_NOCACHE = 0x00000200,
            /// <summary>
            /// PAGE_WRITECOMBINE
            /// </summary>
            PAGE_WRITECOMBINE = 0x00000400
        }
        #endregion

        #region StateEnum
        /// <summary>
        /// StateEnum
        /// </summary>
        public enum StateEnum : uint
        {
            /// <summary>
            /// MEM_COMMIT
            /// </summary>
            MEM_COMMIT = 0x1000,
            /// <summary>
            /// MEM_FREE
            /// </summary>
            MEM_FREE = 0x10000,
            /// <summary>
            /// MEM_RESERVE
            /// </summary>
            MEM_RESERVE = 0x2000
        }
        #endregion

        #region TypeEnum
        /// <summary>
        /// TypeEnum
        /// </summary>
        public enum TypeEnum : uint
        {
            /// <summary>
            /// MEM_IMAGE
            /// </summary>
            MEM_IMAGE = 0x1000000,
            /// <summary>
            /// MEM_MAPPED
            /// </summary>
            MEM_MAPPED = 0x40000,
            /// <summary>
            /// MEM_PRIVATE
            /// </summary>
            MEM_PRIVATE = 0x20000
        }
        #endregion

        #region MEMORY_BASIC_INFORMATION32
        /// <summary>
        /// MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION32
        {
            /// <summary>
            /// BaseAddress
            /// </summary>
            public IntPtr BaseAddress;
            /// <summary>
            /// AllocationBase
            /// </summary>
            public IntPtr AllocationBase;
            /// <summary>
            /// AllocationProtec
            /// </summary>
            public uint AllocationProtect;
            /// <summary>
            /// RegionSize
            /// </summary>
            public IntPtr RegionSize;
            /// <summary>
            /// State
            /// </summary>
            public StateEnum State;
            /// <summary>
            /// Protect
            /// </summary>
            public uint Protect;
            /// <summary>
            /// Type
            /// </summary>
            public TypeEnum Type;
        }
        #endregion

        #region MEMORY_BASIC_INFORMATION64
        /// <summary>
        /// MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORY_BASIC_INFORMATION64
        {
            /// <summary>
            /// BaseAddress
            /// </summary>
            public ulong BaseAddress;
            /// <summary>
            /// AllocationBase
            /// </summary>
            public ulong AllocationBase;
            /// <summary>
            /// AllocationProtect
            /// </summary>
            public uint AllocationProtect;
            /// <summary>
            /// __alignment1
            /// </summary>
            public int __alignment1;
            /// <summary>
            /// RegionSize
            /// </summary>
            public ulong RegionSize;
            /// <summary>
            /// State
            /// </summary>
            public StateEnum State;
            /// <summary>
            /// Protect
            /// </summary>
            public int Protect;
            /// <summary>
            /// Type
            /// </summary>
            public TypeEnum Type;
            /// <summary>
            /// __alignment2
            /// </summary>
            public int __alignment2;
        }
        #endregion

        #region ProcessAccessFlags
        /// <summary>
        /// ProcessAccessFlags
        /// </summary>
        [Flags]
        public enum ProcessAccessFlags : uint
        {
            /// <summary>
            /// All
            /// </summary>
            All = 0x001F0FFF,
            /// <summary>
            /// Terminate
            /// </summary>
            Terminate = 0x00000001,
            /// <summary>
            /// CreateThread
            /// </summary>
            CreateThread = 0x00000002,
            /// <summary>
            /// VirtualMemoryOperation
            /// </summary>
            VirtualMemoryOperation = 0x00000008,
            /// <summary>
            /// VirtualMemoryRead
            /// </summary>
            VirtualMemoryRead = 0x00000010,
            /// <summary>
            /// VirtualMemoryWrite
            /// </summary>
            VirtualMemoryWrite = 0x00000020,
            /// <summary>
            /// DuplicateHandle
            /// </summary>
            DuplicateHandle = 0x00000040,
            /// <summary>
            /// CreateProcess
            /// </summary>
            CreateProcess = 0x000000080,
            /// <summary>
            /// SetQuota
            /// </summary>
            SetQuota = 0x00000100,
            /// <summary>
            /// SetInformation
            /// </summary>
            SetInformation = 0x00000200,
            /// <summary>
            /// QueryInformation
            /// </summary>
            QueryInformation = 0x00000400,
            /// <summary>
            /// QueryLimitedInformation
            /// </summary>
            QueryLimitedInformation = 0x00001000,
            /// <summary>
            /// Synchronize
            /// </summary>
            Synchronize = 0x00100000
        }
        #endregion

        #region LoadLibraryFlags
        /// <summary>
        /// LoadLibraryFlags
        /// </summary>
        [Flags]
        public enum LoadLibraryFlags : uint
        {
            /// <summary>
            /// None
            /// </summary>
            None = 0,
            /// <summary>
            /// DONT_RESOLVE_DLL_REFERENCES
            /// </summary>
            DONT_RESOLVE_DLL_REFERENCES = 0x00000001,
            /// <summary>
            /// LOAD_IGNORE_CODE_AUTHZ_LEVEL
            /// </summary>
            LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x00000010,
            /// <summary>
            /// LOAD_LIBRARY_AS_DATAFILE
            /// </summary>
            LOAD_LIBRARY_AS_DATAFILE = 0x00000002,
            /// <summary>
            /// LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
            /// </summary>
            LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 0x00000040,
            /// <summary>
            /// LOAD_LIBRARY_AS_IMAGE_RESOURCE
            /// </summary>
            LOAD_LIBRARY_AS_IMAGE_RESOURCE = 0x00000020,
            /// <summary>
            /// LOAD_LIBRARY_SEARCH_APPLICATION_DIR
            /// </summary>
            LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 0x00000200,
            /// <summary>
            /// LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
            /// </summary>
            LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 0x00001000,
            /// <summary>
            /// LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
            /// </summary>
            LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 0x00000100,
            /// <summary>
            /// LOAD_LIBRARY_SEARCH_SYSTEM32
            /// </summary>
            LOAD_LIBRARY_SEARCH_SYSTEM32 = 0x00000800,
            /// <summary>
            /// LOAD_LIBRARY_SEARCH_USER_DIRS
            /// </summary>
            LOAD_LIBRARY_SEARCH_USER_DIRS = 0x00000400,
            /// <summary>
            /// LOAD_WITH_ALTERED_SEARCH_PATH
            /// </summary>
            LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008
        }
        #endregion

        #endregion

        #region Thread Context

        #region ThreadAccess
        /// <summary>
        /// Enum to specify access level required when accessing a thread. 
        /// </summary>
        [Flags]
        public enum ThreadAccess : int
        {
            /// <summary>
            /// TERMINATE
            /// </summary>
            TERMINATE = (0x0001),
            /// <summary>
            /// SUSPEND_RESUME
            /// </summary>
            SUSPEND_RESUME = (0x0002),
            /// <summary>
            /// GET_CONTEXT
            /// </summary>
            GET_CONTEXT = (0x0008),
            /// <summary>
            /// SET_CONTEXT
            /// </summary>
            SET_CONTEXT = (0x0010),
            /// <summary>
            /// SET_INFORMATION
            /// </summary>
            SET_INFORMATION = (0x0020),
            /// <summary>
            /// QUERY_INFORMATION
            /// </summary>
            QUERY_INFORMATION = (0x0040),
            /// <summary>
            /// SET_THREAD_TOKEN
            /// </summary>
            SET_THREAD_TOKEN = (0x0080),
            /// <summary>
            /// IMPERSONATE
            /// </summary>
            IMPERSONATE = (0x0100),
            /// <summary>
            /// DIRECT_IMPERSONATION
            /// </summary>
            DIRECT_IMPERSONATION = (0x0200),
            /// <summary>
            /// All_ACCESS
            /// </summary>
            All_ACCESS = (0xFFFF)
        }
        #endregion

        #region CONTEXT_FLAGS
        /// <summary>
        /// CONTEXT_FLAGS
        /// </summary>
        public enum CONTEXT_FLAGS : uint
        {
            /// <summary>
            /// CONTEXT_i386
            /// </summary>
            CONTEXT_i386 = 0x10000,
            /// <summary>
            /// CONTEXT_i486
            /// </summary>
            CONTEXT_i486 = 0x10000,
            /// <summary>
            /// CONTEXT_CONTROL
            /// </summary>
            CONTEXT_CONTROL = CONTEXT_i386 | 0x01,
            /// <summary>
            /// CONTEXT_INTEGER
            /// </summary>
            CONTEXT_INTEGER = CONTEXT_i386 | 0x02,
            /// <summary>
            /// CONTEXT_SEGMENTS
            /// </summary>
            CONTEXT_SEGMENTS = CONTEXT_i386 | 0x04,
            /// <summary>
            /// CONTEXT_FLOATING_POINT
            /// </summary>
            CONTEXT_FLOATING_POINT = CONTEXT_i386 | 0x08,
            /// <summary>
            /// CONTEXT_DEBUG_REGISTERS
            /// </summary>
            CONTEXT_DEBUG_REGISTERS = CONTEXT_i386 | 0x10,
            /// <summary>
            /// CONTEXT_EXTENDED_REGISTERS
            /// </summary>
            CONTEXT_EXTENDED_REGISTERS = CONTEXT_i386 | 0x20,
            /// <summary>
            /// CONTEXT_FULL
            /// </summary>
            CONTEXT_FULL = CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS,
            /// <summary>
            /// CONTEXT_ALL
            /// </summary>
            CONTEXT_ALL = CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS | CONTEXT_FLOATING_POINT | CONTEXT_DEBUG_REGISTERS | CONTEXT_EXTENDED_REGISTERS
        }
        #endregion

        #region FLOATING_SAVE_AREA
        /// <summary>
        /// x86 Save area data. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct FLOATING_SAVE_AREA
        {
            /// <summary>
            /// ControlWord
            /// </summary>
            public uint ControlWord;
            /// <summary>
            /// StatusWord
            /// </summary>
            public uint StatusWord;
            /// <summary>
            /// TagWord
            /// </summary>
            public uint TagWord;
            /// <summary>
            /// ErrorOffset
            /// </summary>
            public uint ErrorOffset;
            /// <summary>
            /// ErrorSelector
            /// </summary>
            public uint ErrorSelector;
            /// <summary>
            /// DataOffset
            /// </summary>
            public uint DataOffset;
            /// <summary>
            /// DataSelector
            /// </summary>
            public uint DataSelector;
            /// <summary>
            /// RegisterArea
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
            public byte[] RegisterArea;
            /// <summary>
            /// Cr0NpxState
            /// </summary>
            public uint Cr0NpxState;
        }
        #endregion

        #region CONTEXT32
        /// <summary>
        /// Structure for holding x86 register values.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct CONTEXT32
        {
            /// <summary>
            /// ContextFlags
            /// </summary>
            public CONTEXT_FLAGS ContextFlags;
            /// <summary>
            /// Dr0
            /// </summary>
            public uint Dr0;
            /// <summary>
            /// Dr1
            /// </summary>
            public uint Dr1;
            /// <summary>
            /// Dr2
            /// </summary>
            public uint Dr2;
            /// <summary>
            /// Dr3
            /// </summary>
            public uint Dr3;
            /// <summary>
            /// Dr6
            /// </summary>
            public uint Dr6;
            /// <summary>
            /// Dr7
            /// </summary>
            public uint Dr7;
            /// <summary>
            /// FloatSave
            /// </summary>
            public FLOATING_SAVE_AREA FloatSave;
            /// <summary>
            /// SegGs
            /// </summary>
            public uint SegGs;
            /// <summary>
            /// SegFs
            /// </summary>
            public uint SegFs;
            /// <summary>
            /// SegEs
            /// </summary>
            public uint SegEs;
            /// <summary>
            /// SegDs
            /// </summary>
            public uint SegDs;
            /// <summary>
            /// Edi
            /// </summary>
            public uint Edi;
            /// <summary>
            /// Esi
            /// </summary>
            public uint Esi;
            /// <summary>
            /// Ebx
            /// </summary>
            public uint Ebx;
            /// <summary>
            /// Edx
            /// </summary>
            public uint Edx;
            /// <summary>
            /// Ecx
            /// </summary>
            public uint Ecx;
            /// <summary>
            /// Eax
            /// </summary>
            public uint Eax;
            /// <summary>
            /// Ebp
            /// </summary>
            public uint Ebp;
            /// <summary>
            /// Eip
            /// </summary>
            public uint Eip;
            /// <summary>
            /// SegCs
            /// </summary>
            public uint SegCs;
            /// <summary>
            /// EFlags
            /// </summary>
            public uint EFlags;
            /// <summary>
            /// Esp
            /// </summary>
            public uint Esp;
            /// <summary>
            /// SegSs
            /// </summary>
            public uint SegSs;
            /// <summary>
            /// ExtendedRegisters
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
            public byte[] ExtendedRegisters;

            /// <summary>
            /// Overridden ToString method, returns register values for the current thread.
            /// </summary>
            /// <returns>String</returns>
            public override string ToString()
            {
                string ret = "";
                ret += "EDI = " + Edi.ToString("X8") + Environment.NewLine;
                ret += "ESI = " + Esi.ToString("X8") + Environment.NewLine;
                ret += "EBX = " + Ebx.ToString("X8") + Environment.NewLine;
                ret += "EDX = " + Edx.ToString("X8") + Environment.NewLine;
                ret += "ECX = " + Ecx.ToString("X8") + Environment.NewLine;
                ret += "EAX = " + Eax.ToString("X8") + Environment.NewLine;
                ret += "EBP = " + Ebp.ToString("X8") + Environment.NewLine;
                ret += "ESP = " + Esp.ToString("X8") + Environment.NewLine;
                ret += "EIP = " + Eip.ToString("X8") + Environment.NewLine;
                return ret;
            }
        }
        #endregion

        #region M128A
        /// <summary>
        /// M128A
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct M128A
        {
            /// <summary>
            /// High
            /// </summary>
            public ulong High;
            /// <summary>
            /// Low
            /// </summary>
            public long Low;

            /// <summary>
            /// ToString Override
            /// </summary>
            /// <returns>Returns a String</returns>
            public override string ToString()
            {
                return string.Format("High:{0}, Low:{1}", this.High, this.Low);
            }
        }
        #endregion

        #region XSAVE_FORMAT64
        /// <summary>
        /// x64 Save area data.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 16)]
        public struct XSAVE_FORMAT64
        {
            /// <summary>
            /// ControlWord
            /// </summary>
            public ushort ControlWord;
            /// <summary>
            /// StatusWord
            /// </summary>
            public ushort StatusWord;
            /// <summary>
            /// TagWord
            /// </summary>
            public byte TagWord;
            /// <summary>
            /// Reserved1
            /// </summary>
            public byte Reserved1;
            /// <summary>
            /// ErrorOpcode
            /// </summary>
            public ushort ErrorOpcode;
            /// <summary>
            /// ErrorOffset
            /// </summary>
            public uint ErrorOffset;
            /// <summary>
            /// ErrorSelector
            /// </summary>
            public ushort ErrorSelector;
            /// <summary>
            /// Reserved2
            /// </summary>
            public ushort Reserved2;
            /// <summary>
            /// DataOffset
            /// </summary>
            public uint DataOffset;
            /// <summary>
            /// DataSelector
            /// </summary>
            public ushort DataSelector;
            /// <summary>
            /// Reserved3
            /// </summary>
            public ushort Reserved3;
            /// <summary>
            /// MxCsr
            /// </summary>
            public uint MxCsr;
            /// <summary>
            /// MxCsr_Mask
            /// </summary>
            public uint MxCsr_Mask;
            /// <summary>
            /// FloatRegisters
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
            public M128A[] FloatRegisters;
            /// <summary>
            /// XmmRegisters
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
            public M128A[] XmmRegisters;
            /// <summary>
            /// Reserved4
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 96)]
            public byte[] Reserved4;
        }
        #endregion

        #region CONTEXT64
        /// <summary>
        /// Structure for holding x64 register values.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 16)]
        public struct CONTEXT64
        {
            /// <summary>
            /// P1Home
            /// </summary>
            public ulong P1Home;
            /// <summary>
            /// P2Home
            /// </summary>
            public ulong P2Home;
            /// <summary>
            /// P3Home
            /// </summary>
            public ulong P3Home;
            /// <summary>
            /// P4Home
            /// </summary>
            public ulong P4Home;
            /// <summary>
            /// P5Home
            /// </summary>
            public ulong P5Home;
            /// <summary>
            /// P6Home
            /// </summary>
            public ulong P6Home;

            /// <summary>
            /// ContextFlags
            /// </summary>
            public CONTEXT_FLAGS ContextFlags;
            /// <summary>
            /// MxCsr
            /// </summary>
            public uint MxCsr;

            /// <summary>
            /// SegCs
            /// </summary>
            public ushort SegCs;
            /// <summary>
            /// SegDs
            /// </summary>
            public ushort SegDs;
            /// <summary>
            /// SegEs
            /// </summary>
            public ushort SegEs;
            /// <summary>
            /// SegFs
            /// </summary>
            public ushort SegFs;
            /// <summary>
            /// SegGs
            /// </summary>
            public ushort SegGs;
            /// <summary>
            /// SegSs
            /// </summary>
            public ushort SegSs;
            /// <summary>
            /// EFlags
            /// </summary>
            public uint EFlags;

            /// <summary>
            /// Dr0
            /// </summary>
            public ulong Dr0;
            /// <summary>
            /// Dr1
            /// </summary>
            public ulong Dr1;
            /// <summary>
            /// Dr2
            /// </summary>
            public ulong Dr2;
            /// <summary>
            /// Dr3
            /// </summary>
            public ulong Dr3;
            /// <summary>
            /// Dr6
            /// </summary>
            public ulong Dr6;
            /// <summary>
            /// Dr7
            /// </summary>
            public ulong Dr7;

            /// <summary>
            /// Rax
            /// </summary>
            public ulong Rax;
            /// <summary>
            /// Rcx
            /// </summary>
            public ulong Rcx;
            /// <summary>
            /// Rdx
            /// </summary>
            public ulong Rdx;
            /// <summary>
            /// Rbx
            /// </summary>
            public ulong Rbx;
            /// <summary>
            /// Rsp
            /// </summary>
            public ulong Rsp;
            /// <summary>
            /// Rbp
            /// </summary>
            public ulong Rbp;
            /// <summary>
            /// Rsi
            /// </summary>
            public ulong Rsi;
            /// <summary>
            /// Rdi
            /// </summary>
            public ulong Rdi;
            /// <summary>
            /// R8
            /// </summary>
            public ulong R8;
            /// <summary>
            /// R9
            /// </summary>
            public ulong R9;
            /// <summary>
            /// R10
            /// </summary>
            public ulong R10;
            /// <summary>
            /// R11
            /// </summary>
            public ulong R11;
            /// <summary>
            /// R12
            /// </summary>
            public ulong R12;
            /// <summary>
            /// R13
            /// </summary>
            public ulong R13;
            /// <summary>
            /// R14
            /// </summary>
            public ulong R14;
            /// <summary>
            /// R15
            /// </summary>
            public ulong R15;
            /// <summary>
            /// Rip
            /// </summary>
            public ulong Rip;

            /// <summary>
            /// DUMMYUNIONNAME
            /// </summary>
            public XSAVE_FORMAT64 DUMMYUNIONNAME;

            /// <summary>
            /// VectorRegister
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 26)]
            public M128A[] VectorRegister;
            /// <summary>
            /// VectorControl
            /// </summary>
            public ulong VectorControl;

            /// <summary>
            /// DebugControl
            /// </summary>
            public ulong DebugControl;
            /// <summary>
            /// LastBranchToRip
            /// </summary>
            public ulong LastBranchToRip;
            /// <summary>
            /// LastBranchFromRip
            /// </summary>
            public ulong LastBranchFromRip;
            /// <summary>
            /// LastExceptionToRip
            /// </summary>
            public ulong LastExceptionToRip;
            /// <summary>
            /// LastExceptionFromRip
            /// </summary>
            public ulong LastExceptionFromRip;

            /// <summary>
            /// Overridden ToString method, returns register values for the current thread.
            /// </summary>
            /// <returns>String</returns>
            public override string ToString()
            {
                string ret = "";
                ret += "RAX = " + Rax.ToString("X16") + Environment.NewLine;
                ret += "RCX = " + Rcx.ToString("X16") + Environment.NewLine;
                ret += "RDX = " + Rdx.ToString("X16") + Environment.NewLine;
                ret += "RBX = " + Rbx.ToString("X16") + Environment.NewLine;
                ret += "RSP = " + Rsp.ToString("X16") + Environment.NewLine;
                ret += "RBP = " + Rbp.ToString("X16") + Environment.NewLine;
                ret += "RSI = " + Rsi.ToString("X16") + Environment.NewLine;
                ret += "RDI = " + Rdi.ToString("X16") + Environment.NewLine;
                ret += "R08 = " + R8.ToString("X16") + Environment.NewLine;
                ret += "R09 = " + R9.ToString("X16") + Environment.NewLine;
                ret += "R10 = " + R10.ToString("X16") + Environment.NewLine;
                ret += "R11 = " + R11.ToString("X16") + Environment.NewLine;
                ret += "R12 = " + R12.ToString("X16") + Environment.NewLine;
                ret += "R13 = " + R13.ToString("X16") + Environment.NewLine;
                ret += "R14 = " + R14.ToString("X16") + Environment.NewLine;
                ret += "R15 = " + R15.ToString("X16") + Environment.NewLine;
                ret += "RIP = " + Rip.ToString("X16") + Environment.NewLine;
                return ret;
            }
        }
        #endregion

        #region RegisterInfo
        /// <summary>
        /// Register information
        /// </summary>
        public class RegisterInfo
        {
            /// <summary>
            /// Register name.
            /// </summary>
            public string Register { get; set; }
            /// <summary>
            /// Register value.
            /// </summary>
            public IntPtr RegisterValue { get; set; }
            /// <summary>
            /// Register Offset.
            /// </summary>
            public int RegisterOffset { get; set; }
            /// <summary>
            /// String offset.
            /// </summary>
            public int StringOffset { get; set; }
            /// <summary>
            /// Buffer size.
            /// </summary>
            public int BufferSize { get; set; }
            /// <summary>
            /// Thread ID.
            /// </summary>
            public int ThreadID { get; set; }
            /// <summary>
            /// Overwritten.
            /// </summary>
            public bool overwritten { get; set; }
        }
        #endregion

        #endregion

        #region TEB

        /// <summary>
        /// ThreadBasicInformation
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct ThreadBasicInformation
        {
            /// <summary>
            /// ExitStatus
            /// </summary>
            public uint ExitStatus;
            /// <summary>
            /// TebBaseAdress
            /// </summary>
            public IntPtr TebBaseAdress;
            /// <summary>
            /// Identifiers
            /// </summary>
            public ClientID Identifiers;
            /// <summary>
            /// AffinityMask
            /// </summary>
            public uint AffinityMask;
            /// <summary>
            /// Priority
            /// </summary>
            public uint Priority;
            /// <summary>
            /// BasePriority
            /// </summary>
            public uint BasePriority;
        }

        /// <summary>
        /// ClientID
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct ClientID
        {
            /// <summary>
            /// ProcessID
            /// </summary>
            public IntPtr ProcessId;
            /// <summary>
            /// ThreadID
            /// </summary>
            public IntPtr ThreadId;
        }

        /// <summary>
        /// Thread Environment Block.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct TEB
        {
            /// <summary>
            /// CurrentSehFrame
            /// </summary>
            public IntPtr CurrentSehFrame;
            /// <summary>
            /// TopOfStack
            /// </summary>
            public IntPtr TopOfStack;
            /// <summary>
            /// BottomOfStack
            /// </summary>
            public IntPtr BottomOfStack;
            /// <summary>
            /// SubSystemTeb
            /// </summary>
            public IntPtr SubSystemTeb;
            /// <summary>
            /// FiberData
            /// </summary>
            public IntPtr FiberData;
            /// <summary>
            /// ArbitraryDataSlot
            /// </summary>
            public IntPtr ArbitraryDataSlot;
            /// <summary>
            /// Teb
            /// </summary>
            public IntPtr Teb;
            /// <summary>
            /// EnvironmentPointer
            /// </summary>
            public IntPtr EnvironmentPointer;
            /// <summary>
            /// Identifiers
            /// </summary>
            public ClientID Identifiers;
            /// <summary>
            /// RpcHandle
            /// </summary>
            public IntPtr RpcHandle;
            /// <summary>
            /// Tls
            /// </summary>
            public IntPtr Tls;
            /// <summary>
            /// Peb
            /// </summary>
            public IntPtr Peb;
            /// <summary>
            /// LastErrorNumber
            /// </summary>
            public int LastErrorNumber;
            /// <summary>
            /// CriticalSectionsCount
            /// </summary>
            public int CriticalSectionsCount;
            /// <summary>
            /// CsrClientThread
            /// </summary>
            public IntPtr CsrClientThread;
            /// <summary>
            /// Win32ThreadInfo
            /// </summary>
            public IntPtr Win32ThreadInfo;
            /// <summary>
            /// Win32ClientInfo
            /// </summary>
            public byte[] Win32ClientInfo;
            /// <summary>
            /// WoW64Reserved
            /// </summary>
            public IntPtr WoW64Reserved;
            /// <summary>
            /// CurrentLocale
            /// </summary>
            public IntPtr CurrentLocale;
            /// <summary>
            /// FpSoftwareStatusRegister
            /// </summary>
            public IntPtr FpSoftwareStatusRegister;
            /// <summary>
            /// SystemReserved1
            /// </summary>
            public byte[] SystemReserved1;
            /// <summary>
            /// ExceptionCode
            /// </summary>
            public IntPtr ExceptionCode;
            /// <summary>
            /// ActivationContextStack
            /// </summary>
            public byte[] ActivationContextStack;
            /// <summary>
            /// SpareBytes
            /// </summary>
            public byte[] SpareBytes;
            /// <summary>
            /// SystemReserved2
            /// </summary>
            public byte[] SystemReserved2;
            /// <summary>
            /// GdiTebBatch
            /// </summary>
            public byte[] GdiTebBatch;
            /// <summary>
            /// GdiRegion
            /// </summary>
            public IntPtr GdiRegion;
            /// <summary>
            /// GdiPen
            /// </summary>
            public IntPtr GdiPen;
            /// <summary>
            /// GdiBrush
            /// </summary>
            public IntPtr GdiBrush;
            /// <summary>
            /// RealProcessId
            /// </summary>
            public int RealProcessId;
            /// <summary>
            /// RealThreadId
            /// </summary>
            public int RealThreadId;
            /// <summary>
            /// GdiCachedProcessHandle
            /// </summary>
            public IntPtr GdiCachedProcessHandle;
            /// <summary>
            /// GdiClientProcessId
            /// </summary>
            public IntPtr GdiClientProcessId;
            /// <summary>
            /// GdiClientThreadId
            /// </summary>
            public IntPtr GdiClientThreadId;
            /// <summary>
            /// GdiThreadLocalInfo
            /// </summary>
            public IntPtr GdiThreadLocalInfo;
            /// <summary>
            /// UserReserved1
            /// </summary>
            public byte[] UserReserved1;
            /// <summary>
            /// GlReserved1
            /// </summary>
            public byte[] GlReserved1;
            /// <summary>
            /// LastStatusValue
            /// </summary>
            public int LastStatusValue;
            /// <summary>
            /// StaticUnicodeString
            /// </summary>
            public byte[] StaticUnicodeString;
            /// <summary>
            /// DeallocationStack
            /// </summary>
            public IntPtr DeallocationStack;
            /// <summary>
            /// TlsSlots
            /// </summary>
            public byte[] TlsSlots;
            /// <summary>
            /// TlsLinks
            /// </summary>
            public long TlsLinks;
            /// <summary>
            /// Vdm
            /// </summary>
            public IntPtr Vdm;
            /// <summary>
            /// RpcReserved
            /// </summary>
            public IntPtr RpcReserved;
            /// <summary>
            /// ThreadErrorMode
            /// </summary>
            public IntPtr ThreadErrorMode;
        }
        #endregion

        #region ToolHelp
        /// <summary>
        /// ToolHelp SnapshotFlags
        /// </summary>
        [Flags]
        public enum SnapshotFlags : uint
        {
            HeapList = 0x00000001,
            Process = 0x00000002,
            Thread = 0x00000004,
            Module = 0x00000008,
            Module32 = 0x00000010,
            Inherit = 0x80000000,
            All = 0x0000001F,
            NoHeaps = 0x40000000
        }

        /// <summary>
        /// ToolHelp PROCESSENTRY32
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESSENTRY32
        {
            const int MAX_PATH = 260;
            internal uint dwSize;
            internal uint cntUsage;
            internal uint th32ProcessID;
            internal IntPtr th32DefaultHeapID;
            internal uint th32ModuleID;
            internal uint cntThreads;
            internal uint th32ParentProcessID;
            internal int pcPriClassBase;
            internal uint dwFlags;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MAX_PATH)]
            internal string szExeFile;
        }

        /// <summary>
        /// Describes one entry (block) of a heap that is being examined.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public struct HEAPLIST32
        {
            internal IntPtr dwSize;
            internal uint th32ProcessID;
            internal IntPtr th32HeapID;
            internal uint dwFlags;
        }

        /// <summary>
        /// Describes one entry (block) of a heap that is being examined.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct HEAPENTRY32
        {
            /** The size of the structure, in bytes **/
            internal IntPtr dwSize;
            /** A handle to the heap block **/
            internal IntPtr hHandle;
            /** The linear address of the start of the block **/
            internal IntPtr dwAddress;
            /** The size of the heap block, in bytes **/
            internal IntPtr dwBlockSize;
            /** This member can be one of the following values.
                LF32_FIXED    0x00000001
               LF32_FREE     0x00000002
               LF32_MOVEABLE 0x00000004 **/
            internal uint dwFlags;
            /** This member is no longer used and is always set to zero. **/
            internal uint dwLockCount;
            /** Reserved; do not use or alter **/
            internal uint dwResvd;
            /** The identifier of the process that uses the heap **/
            internal uint th32ProcessID;
            /** The heap identifier. This is not a handle, and has meaning only to the tool help functions **/
            internal IntPtr th32HeapID;
        }
        #endregion
    }
    #endregion
}



================================================
File: ERC/ERC/FodyWeavers.xml
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">
  <Costura />
</Weavers>


================================================
File: ERC/ERC/FodyWeavers.xsd
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- This file was generated by Fody. Manual changes to this file will be lost when your project is rebuilt. -->
  <xs:element name="Weavers">
    <xs:complexType>
      <xs:all>
        <xs:element name="Costura" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:all>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged32Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged64Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="PreloadOrder" type="xs:string">
                <xs:annotation>
                  <xs:documentation>The order of preloaded assemblies, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:all>
            <xs:attribute name="CreateTemporaryAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>This will copy embedded files to disk before loading them into memory. This is helpful for some scenarios that expected an assembly to be loaded from a physical file.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeDebugSymbols" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if .pdbs for reference assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeReferences" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if runtime assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="UseRuntimeReferencePaths" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls whether the runtime assemblies are embedded with their full path or only with their assembly name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCompression" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Embedded assemblies are compressed by default, and uncompressed when they are loaded. You can turn compression off with this option.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCleanup" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>As part of Costura, embedded assemblies are no longer included as part of the build. This cleanup can be turned off.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="LoadAtModuleInit" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura by default will load as part of the module initialization. This flag disables that behavior. Make sure you call CosturaUtility.Initialize() somewhere in your code.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IgnoreSatelliteAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura will by default use assemblies with a name like 'resources.dll' as a satellite resource and prepend the output path. This flag disables that behavior.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged32Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged64Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="PreloadOrder" type="xs:string">
              <xs:annotation>
                <xs:documentation>The order of preloaded assemblies, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:all>
      <xs:attribute name="VerifyAssembly" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'true' to run assembly verification (PEVerify) on the target assembly after all weavers have been executed.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="VerifyIgnoreCodes" type="xs:string">
        <xs:annotation>
          <xs:documentation>A comma-separated list of error codes that can be safely ignored in assembly verification.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="GenerateXsd" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'false' to turn off automatic generation of the XML Schema file.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>


================================================
File: ERC/ERC/Heap_Info.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using ERC.Structures;

namespace ERC
{
    public class HeapInfo
    {
        #region Variables
        internal List<HEAPENTRY32> HeapEntries = new List<HEAPENTRY32>();
        internal List<HEAPLIST32> HeapLists = new List<HEAPLIST32>();
        internal ProcessInfo HeapProcess;

        #endregion

        #region Constructor
        public HeapInfo(ProcessInfo info)
        {
            HeapProcess = info;
            HEAPLIST32 firstHeapList = new HEAPLIST32();
            firstHeapList.dwSize = (IntPtr)Marshal.SizeOf(typeof(HEAPLIST32));
            IntPtr Handle = ErcCore.CreateToolhelp32Snapshot(SnapshotFlags.HeapList, (uint)info.ProcessID);

            if ((int)Handle == -1)
            {
                throw new ERCException("CreateToolhelp32Snapshot returned an invalid handle value (-1)");
            }

            if (ErcCore.Heap32ListFirst(Handle, ref firstHeapList))
            {
                HeapLists.Add(firstHeapList);
                bool moreHeaps = false;
                do
                {
                    HEAPLIST32 currentHeap = new HEAPLIST32();
                    currentHeap.dwSize = (IntPtr)Marshal.SizeOf(typeof(HEAPLIST32));
                    moreHeaps = ErcCore.Heap32ListNext(Handle, ref currentHeap);
                    if(HeapEntries.Count == 0)
                    {
                        currentHeap = firstHeapList;
                    }

                    if (moreHeaps)
                    {
                        HeapLists.Add(currentHeap);
                        HEAPENTRY32 heapentry32 = new HEAPENTRY32();
                        heapentry32.dwSize = (IntPtr)Marshal.SizeOf(typeof(HEAPENTRY32));

                        if (ErcCore.Heap32First(ref heapentry32, (uint)HeapProcess.ProcessID, currentHeap.th32HeapID))
                        {
                            bool moreheapblocks = false;
                            do
                            {
                                HeapEntries.Add(heapentry32);
                                moreheapblocks = ErcCore.Heap32Next(ref heapentry32);
                            }
                            while (moreheapblocks);
                        }
                    }
                }
                while (moreHeaps);
            }
            else
            {
                throw new ERCException("Heap32ListFirst returned an invalid response. Error: " + Utilities.Win32Errors.GetLastWin32Error());
            }
        }

        #endregion

        #region Accessors
        /// <summary>
        /// Searches heap entries for a specified pattern. Returns pointers to all instances of the pattern. If heapID and startAddress are both supplied heapID takes precedence.
        /// </summary>
        /// <param name="searchBytes">byte array containing the pattern to search for</param>
        /// <param name="heapID">ID of the heap to be searched(Optional)</param>
        /// <param name="hexStartAddress">Start address of the heap entry to be searched in hexadecimal(Optional)</param>
        /// <returns>Returns an ERCResult of IntPtr containing pointers to all instances of the pattern found.</returns>
        public ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>> SearchHeap(byte[] searchBytes, ulong heapID = 0, string hexStartAddress = "")
        {
            ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>> result = new ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>>(HeapProcess);
            result.ReturnValue = new List<Tuple<IntPtr, IntPtr, IntPtr>>();

            if (hexStartAddress.Contains("0x") || hexStartAddress.Contains("0x") || hexStartAddress.Contains("x") || hexStartAddress.Contains("X"))
            {
                hexStartAddress = hexStartAddress.Replace("0x", "");
                hexStartAddress = hexStartAddress.Replace("0X", "");
                hexStartAddress = hexStartAddress.Replace("X", "");
                hexStartAddress = hexStartAddress.Replace("x", "");
            }

            IntPtr startAddress = IntPtr.Zero;
            IntPtr HeapID = IntPtr.Zero;

            if (heapID != 0)
            {
                HeapID = (IntPtr)heapID;
            }

            if (HeapProcess.ProcessMachineType == MachineType.I386)
            {
                try
                {
                    startAddress = (IntPtr)Convert.ToInt32(hexStartAddress, 16);
                }
                catch 
                {
                }

            }
            else
            {
                try
                {
                    startAddress = (IntPtr)Convert.ToInt64(hexStartAddress, 16);
                }
                catch 
                {
                }
            }

            if (searchBytes.Length < 3)
            {
                result.Error = new ERCException("Search pattern not long enough. Minimum length is 3 bytes");
                result.ReturnValue = null;
                return result;
            }

            if(heapID != 0)
            {
                foreach (HEAPENTRY32 he in HeapEntries)
                {
                    if(he.th32HeapID == HeapID)
                    {
                        byte[] bytes = HeapProcess.DumpMemoryRegion(he.dwAddress, (int)he.dwBlockSize).ReturnValue;

                        int maxFirstCharSlot = bytes.Length - searchBytes.Length + 1;
                        for (int i = 0; i < maxFirstCharSlot; i++)
                        {
                            if (bytes[i] != searchBytes[0]) 
                                continue;

                            for (int j = searchBytes.Length - 1; j >= 1; j--)
                            {
                                if (bytes[i + j] != searchBytes[j]) break;
                                if (j == 1) 
                                {
                                    Tuple<IntPtr, IntPtr, IntPtr> element = new Tuple<IntPtr, IntPtr, IntPtr>(he.dwAddress + i, he.th32HeapID, he.dwAddress);
                                    result.ReturnValue.Add(element);
                                } 
                            }
                        }
                    }
                }
            }
            else if(startAddress != IntPtr.Zero)
            {
                foreach (HEAPENTRY32 he in HeapEntries)
                {
                    if (he.dwAddress == startAddress)
                    {
                        byte[] bytes = HeapProcess.DumpMemoryRegion((IntPtr)startAddress, (int)he.dwBlockSize).ReturnValue;

                        int maxFirstCharSlot = bytes.Length - searchBytes.Length + 1;
                        for (int i = 0; i < maxFirstCharSlot; i++)
                        {
                            
                            if (bytes[i] != searchBytes[0])
                            {
                                continue;
                            }

                            for (int j = searchBytes.Length - 1; j >= 1; j--)
                            {
                                if (bytes[i + j] != searchBytes[j])
                                {
                                    break;
                                }
                                if (j == 1)
                                {
                                    Tuple<IntPtr, IntPtr, IntPtr> element = new Tuple<IntPtr, IntPtr, IntPtr>(he.dwAddress + i, he.th32HeapID, he.dwAddress);
                                    result.ReturnValue.Add(element);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                foreach(HEAPENTRY32 he in HeapEntries)
                {
                    byte[] bytes = HeapProcess.DumpMemoryRegion(he.dwAddress, (int)he.dwBlockSize).ReturnValue;

                    int maxFirstCharSlot = bytes.Length - searchBytes.Length + 1;
                    for (int i = 0; i < maxFirstCharSlot; i++)
                    {
                        if (bytes[i] != searchBytes[0])
                            continue;

                        for (int j = searchBytes.Length - 1; j >= 1; j--)
                        {
                            if (bytes[i + j] != searchBytes[j]) break;
                            if (j == 1)
                            {
                                Tuple<IntPtr, IntPtr, IntPtr> element = new Tuple<IntPtr, IntPtr, IntPtr>(he.dwAddress + i, he.th32HeapID, he.dwAddress);
                                result.ReturnValue.Add(element);
                            }
                        }
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Returns a collections of stats related to the heap of the current process object. If both heapID and startAddress are specified heapID takes precedence.
        /// </summary>
        /// <param name="extended">display an extended set of </param>
        /// <param name="heapID">The ID of the heap to display stats for. (optional)</param>
        /// <param name="hexStartAddress">The start address of the specific heap block to display stats for in hexadecimal. (optional)</param>
        /// <returns>returns a List<string> object</returns>
        public ErcResult<List<string>> HeapStatistics(bool extended = false, ulong heapID = 0, string hexStartAddress = "")
        {
            ErcResult<List<string>> result = new ErcResult<List<string>>(HeapProcess);
            if (hexStartAddress.Contains("0x") || hexStartAddress.Contains("0x") || hexStartAddress.Contains("x") || hexStartAddress.Contains("X"))
            {
                hexStartAddress = hexStartAddress.Replace("0x", "");
                hexStartAddress = hexStartAddress.Replace("0X", "");
                hexStartAddress = hexStartAddress.Replace("X", "");
                hexStartAddress = hexStartAddress.Replace("x", "");
            }

            ulong startAddress = 0;
            if(HeapProcess.ProcessMachineType == MachineType.I386)
            {
                try
                {
                    startAddress = (uint)Convert.ToInt32(hexStartAddress, 16);
                }
                catch
                {
                }
                
            }
            else
            {
                try
                {
                    startAddress = (ulong)Convert.ToInt64(hexStartAddress, 16);
                }
                catch
                {
                }
            }
            
            List<string> heapStats = new List<string>();
            heapStats.Add("ProcessID = " + HeapProcess.ProcessID + Environment.NewLine);
            heapStats.Add("Number of heaps = " + HeapLists.Count + Environment.NewLine);
            
            if(heapID != 0)
            {
                heapStats.Add("    Heap ID = " + heapID + Environment.NewLine);
            }
            
            int count = 0;
            foreach(HEAPLIST32 hl in HeapLists)
            {
                count++;
                int heapEnts = 0;
                if(heapID == 0 && startAddress == 0)
                {
                    heapStats.Add("    Heap " + count + " ID = " + hl.th32HeapID + Environment.NewLine);
                }
                
                foreach(HEAPENTRY32 he in HeapEntries)
                {
                    if (heapID != 0)
                    {
                        if(he.th32HeapID == (IntPtr)heapID && hl.th32HeapID == (IntPtr)heapID)
                        {
                            if (HeapProcess.ProcessMachineType == MachineType.I386)
                            {
                                heapStats.Add("       Heap Start Address = 0x" + he.dwAddress.ToString("X8") + Environment.NewLine);
                                heapStats.Add("       Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("       Heap flags = LF32_FIXED" + Environment.NewLine);
                                        break;
                                    case 2:
                                        heapStats.Add("       Heap flags = LF32_FREE" + Environment.NewLine);
                                        break;
                                    case 4:
                                        heapStats.Add("       Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        break;
                                    default:
                                        break;
                                }
                            }
                            else
                            {
                                heapStats.Add("       Heap Start Address = " + he.dwAddress.ToString("X16") + Environment.NewLine);
                                heapStats.Add("       Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("       Heap flags = LF32_FIXED" + Environment.NewLine);
                                        break;
                                    case 2:
                                        heapStats.Add("       Heap flags = LF32_FREE" + Environment.NewLine);
                                        break;
                                    case 4:
                                        heapStats.Add("       Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        break;
                                    default:
                                        break;
                                }
                            }
                            heapEnts++;
                        }
                    }
                    else if (startAddress != 0)
                    {
                        if(he.dwAddress == (IntPtr)startAddress)
                        {
                            if (HeapProcess.ProcessMachineType == MachineType.I386)
                            {
                                heapStats.Add("    Heap ID = " + hl.th32HeapID + Environment.NewLine);
                                heapStats.Add("    Heap Start Address = " + he.dwAddress.ToString("X8") + Environment.NewLine);
                                heapStats.Add("    Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("    Heap flags = LF32_FIXED" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    case 2:
                                        heapStats.Add("    Heap flags = LF32_FREE" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    case 4:
                                        heapStats.Add("    Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    default:
                                        break;
                                }
                            }
                            else
                            {
                                heapStats.Add("    Heap ID = " + hl.th32HeapID + Environment.NewLine);
                                heapStats.Add("    Heap Start Address = " + he.dwAddress.ToString("X16") + Environment.NewLine);
                                heapStats.Add("    Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("    Heap flags = LF32_FIXED" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    case 2:
                                        heapStats.Add("    Heap flags = LF32_FREE" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    case 4:
                                        heapStats.Add("    Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        result.ReturnValue = heapStats;
                                        return result;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                    else if (he.th32HeapID == hl.th32HeapID)
                    {
                        if(extended == true)
                        {
                            if (HeapProcess.ProcessMachineType == MachineType.I386)
                            {
                                heapStats.Add("       Heap Start Address = " + he.dwAddress.ToString("X8") + Environment.NewLine);
                                heapStats.Add("       Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("       Heap flags = LF32_FIXED" + Environment.NewLine);
                                        break;
                                    case 2:
                                        heapStats.Add("       Heap flags = LF32_FREE" + Environment.NewLine);
                                        break;
                                    case 4:
                                        heapStats.Add("       Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        break;
                                    default:
                                        break;
                                }
                            }
                            else
                            {
                                heapStats.Add("       Heap Start Address = " + he.dwAddress.ToString("X16") + Environment.NewLine);
                                heapStats.Add("       Heap Entry size = " + he.dwBlockSize.ToString() + Environment.NewLine);
                                switch (he.dwFlags)
                                {
                                    case 1:
                                        heapStats.Add("       Heap flags = LF32_FIXED" + Environment.NewLine);
                                        break;
                                    case 2:
                                        heapStats.Add("       Heap flags = LF32_FREE" + Environment.NewLine);
                                        break;
                                    case 4:
                                        heapStats.Add("       Heap flags = LF32_MOVEABLE" + Environment.NewLine);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                        heapEnts++;
                    }
                }
                if(heapID != 0 || startAddress != 0)
                {
                    if((IntPtr)heapID == hl.th32HeapID)
                    {
                        heapStats.Add("        Total number of entries in heap: " + heapEnts + Environment.NewLine);
                    }
                }
                else
                {
                    heapStats.Add("        Total number of entries in heap: " + heapEnts + Environment.NewLine);
                }
                
            }
            result.ReturnValue = heapStats;
            return result;
        }

        /// <summary>
        /// Lists all HeapIDs associated with a process.
        /// </summary>
        /// <returns>Returns an ErcResult<List<ulong>>"</returns>
        public ErcResult<List<ulong>> HeapIDs()
        {
            ErcResult<List<ulong>> result = new ErcResult<List<ulong>>(HeapProcess);
            result.ReturnValue = new List<ulong>();
            foreach(HEAPLIST32 hl in HeapLists)
            {
                result.ReturnValue.Add((ulong)hl.th32HeapID);
            }

            if(result.ReturnValue.Count == 0)
            {
                result.Error = new ERCException("Error: No heap ids found associated with this process.");
            }
            return result;
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Module_Info.cs
================================================
ï»¿using ERC.Structures;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace ERC
{
    /// <summary>
    /// Contains all information relating to a specific module.
    /// </summary>
    public class ModuleInfo
    {
        #region Class Variables
        /// <summary>
        /// Module name.
        /// </summary>
        public string ModuleName { get; private set; }
        /// <summary>
        /// Module path.
        /// </summary>
        public string ModulePath { get; private set; }
        /// <summary>
        /// Module version.
        /// </summary>
        public string ModuleVersion { get; private set; }
        /// <summary>
        /// Module product.
        /// </summary>
        public string ModuleProduct { get; private set; }

        /// <summary>
        /// Memory protection of this module.
        /// </summary>
        public uint ModuleProtection { get; private set; }

        /// <summary>
        /// Module base pointer.
        /// </summary>
        public IntPtr ModuleBase { get; private set; }
        /// <summary>
        /// Module entry point.
        /// </summary>
        public IntPtr ModuleEntry { get; private set; }
        /// <summary>
        /// Module image base.
        /// </summary>
        public IntPtr ModuleImageBase { get; private set; }
        /// <summary>
        /// Module size.
        /// </summary>
        public int ModuleSize { get; private set; }

        /// <summary>
        /// Module supports ASLR.
        /// </summary>
        public bool ModuleASLR { get; private set; }
        /// <summary>
        /// Module supports SafeSEH
        /// </summary>
        public bool ModuleSafeSEH { get; private set; }
        /// <summary>
        /// Module can be rebased.
        /// </summary>
        public bool ModuleRebase { get; private set; }
        /// <summary>
        /// Module is DEP enabled.
        /// </summary>
        public bool ModuleNXCompat { get; private set; }
        /// <summary>
        /// Module is an OS dll.
        /// </summary>
        public bool ModuleOsDll { get; private set; }
        /// <summary>
        /// Process where the module is loaded.
        /// </summary>
        public Process ModuleProcess { get; private set; }
        /// <summary>
        /// Associated ErcCore object.
        /// </summary>
        public ErcCore ModuleCore { get; private set; }

        /// <summary>
        /// Machine type of the module.
        /// </summary>
        public MachineType ModuleMachineType { get; private set; }

        internal IMAGE_DOS_HEADER ImageDosHeader = new IMAGE_DOS_HEADER();
        internal IMAGE_FILE_HEADER ImageFileHeader = new IMAGE_FILE_HEADER();
        internal IMAGE_NT_HEADERS32 ImageNTHeaders32 { get; private set; }
        internal IMAGE_NT_HEADERS64 ImageNTHeaders64 { get; private set; }
        internal IMAGE_OPTIONAL_HEADER32 ImageOptionalHeader32 { get; private set; }
        internal IMAGE_OPTIONAL_HEADER64 ImageOptionalHeader64 { get; private set; }
        internal IMAGE_LOAD_CONFIG_DIRECTORY32 ImageConfigDir32 { get; private set; }
        internal IMAGE_LOAD_CONFIG_DIRECTORY64 ImageConfigDir64 { get; private set; }
        internal LOADED_IMAGE loadedImage = new LOADED_IMAGE();

        /// <summary>
        /// An errpr was encountered whilst processing the module.
        /// </summary>
        public bool ModuleFailed = false;
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor for the ModuleInfo object. Takes (string)modules filepath (IntPtr)module handle (Process)Process from which the module is loaded
        /// </summary>
        /// <param name="module">Filepath of the module</param>
        /// <param name="ptr">Handle to the module</param>
        /// <param name="process">Process where the module is loaded</param>
        /// <param name="core">An ErcCore object</param>
        internal unsafe ModuleInfo(string module, IntPtr ptr, Process process, ErcCore core)
        {
            try
            {
                ModuleCore = core;
                ModuleProcess = process;
                ModuleName = FileVersionInfo.GetVersionInfo(module).InternalName;
                ModulePath = FileVersionInfo.GetVersionInfo(module).FileName;
                ModuleBase = ptr;

                FileInfo fileInfo = new FileInfo(ModulePath);
                FileStream file = fileInfo.Open(FileMode.Open, FileAccess.Read, FileShare.Read);
                PopulateHeaderStructs(file);

                if (!string.IsNullOrEmpty(FileVersionInfo.GetVersionInfo(module).FileVersion))
                {
                    ModuleVersion = FileVersionInfo.GetVersionInfo(module).FileVersion.Split(' ')[0];
                }
                else
                {
                    ModuleVersion = "";
                }

                ModuleProduct = FileVersionInfo.GetVersionInfo(module).ProductName;
                
                if (ModuleMachineType == MachineType.I386)
                {
                    ModuleEntry = (IntPtr)ImageOptionalHeader32.AddressOfEntryPoint;
                    ModuleSize = (int)ImageOptionalHeader32.SizeOfImage;
                    ModuleImageBase = (IntPtr)ImageOptionalHeader32.ImageBase;
                    byte[] dllByte = BitConverter.GetBytes(ImageOptionalHeader32.DllCharacteristics);
                    BitArray bits = new BitArray(dllByte);
                    for (int i = 0; i < bits.Count; i++)
                    {
                        if (bits[i] == true && i == 6)
                        {
                            ModuleASLR = true;
                        }
                        else
                        {
                            ModuleASLR = false;
                        }

                        if (bits[i] == true && i == 8)
                        {
                            ModuleNXCompat = true;
                        }
                        else
                        {
                            ModuleNXCompat = false;
                        }
                    }

                    if(ModuleMachineType == MachineType.I386)
                    {
                        PopulateConfigStruct();

                        if (ImageConfigDir32.SEHandlerCount == 0 && ImageConfigDir32.SEHandlerTable == 0)
                        {
                            ModuleSafeSEH = false;
                        }
                        else
                        {
                            ModuleSafeSEH = true;
                        }
                    }
                    else
                    {
                        ModuleSafeSEH = true;
                    }
                    
                }
                else if (ModuleMachineType == MachineType.x64)
                {
                    ModuleEntry = (IntPtr)ImageOptionalHeader64.AddressOfEntryPoint;
                    ModuleSize = (int)ImageOptionalHeader64.SizeOfImage;
                    ModuleImageBase = (IntPtr)ImageOptionalHeader64.ImageBase;
                    byte[] dllByte = BitConverter.GetBytes(ImageOptionalHeader64.DllCharacteristics);
                    BitArray bits = new BitArray(dllByte);
                    for (int i = 0; i < bits.Count; i++)
                    {
                        if (bits[i] == true && i == 6)
                        {
                            ModuleASLR = true;
                        }
                        else if (bits[i] == false && i == 6)
                        {
                            ModuleASLR = false;
                        }

                        if (bits[i] == true && i == 8)
                        {
                            ModuleNXCompat = true;
                        }
                        else if (bits[i] == false && i == 8)
                        {
                            ModuleNXCompat = false;
                        }
                    }
                   
                    PopulateConfigStruct();
                    
                    if(ImageConfigDir64.SEHandlerCount == 0 && ImageConfigDir64.SEHandlerTable == 0)
                    {
                        ModuleSafeSEH = false;
                    }
                    else
                    {
                        ModuleSafeSEH = true;
                    }
                }
                else
                {
                    ModuleFailed = true;
                    throw new ERCException("Unsupported machine type: " + ModuleMachineType.ToString());
                }             

                if (ModuleProduct == "MicrosoftÂ® WindowsÂ® Operating System")
                {
                    ModuleOsDll = true;
                }
                else
                {
                    ModuleOsDll = false;
                }

                if (ModuleImageBase != ptr)
                {
                    ModuleRebase = true;
                }
                else
                {
                    ModuleRebase = false;
                }

                long MaxAddress = 0x7fffffff;
                long address = (long)ModuleBase;

                if (!ProcessInfo.Is64Bit(process))
                {
                    List<ERC.Structures.MEMORY_BASIC_INFORMATION32> ProcessMemoryBasicInfo32 = new List<ERC.Structures.MEMORY_BASIC_INFORMATION32>();
                    long oldAddress = 0;
                    do
                    {
                        ERC.Structures.MEMORY_BASIC_INFORMATION32 m;
                        int result = ErcCore.VirtualQueryEx32(ModuleProcess.Handle, (IntPtr)address, out m, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION32)));
                        if (address == (long)m.BaseAddress + (long)m.RegionSize)
                            break;
                        address = (long)m.BaseAddress + (long)m.RegionSize;
                        if(oldAddress > address)
                        {
                            address = long.MaxValue;
                        }
                        oldAddress = address;
                        ModuleProtection = m.AllocationProtect;
                    } while (address <= MaxAddress);
                }
                else
                {
                    List<ERC.Structures.MEMORY_BASIC_INFORMATION64> ProcessMemoryBasicInfo64 = new List<ERC.Structures.MEMORY_BASIC_INFORMATION64>();
                    long oldAddress = 0;
                    do
                    {
                        ERC.Structures.MEMORY_BASIC_INFORMATION64 m;
                        int result = ErcCore.VirtualQueryEx64(ModuleProcess.Handle, (IntPtr)address, out m, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION64)));
                        if (address == (long)m.BaseAddress + (long)m.RegionSize)
                            break;
                        address = (long)m.BaseAddress + (long)m.RegionSize;
                        if (oldAddress > address)
                        {
                            address = long.MaxValue;
                        }
                        oldAddress = address;
                        ModuleProtection = m.AllocationProtect;
                    } while (address <= MaxAddress);
                }
            }
            catch (Exception e)
            {
                ErcResult<Exception> ExceptionLogger = new ErcResult<Exception>(ModuleCore);
                ExceptionLogger.Error = e;
                ExceptionLogger.LogEvent();
                ModuleFailed = true;
            }
        }

        private unsafe void PopulateHeaderStructs(FileStream fin)
        {
            byte[] Data = new byte[4096];
            int iRead = fin.Read(Data, 0, 4096);

            fin.Flush();
            fin.Close();

            fixed (byte* p_Data = Data)
            {
                IMAGE_DOS_HEADER* idh = (IMAGE_DOS_HEADER*)p_Data;
                IMAGE_NT_HEADERS32* inhs = (IMAGE_NT_HEADERS32*)(idh->nt_head_ptr + p_Data);
                ModuleMachineType = (MachineType)inhs->FileHeader.Machine;

                if (ModuleMachineType == MachineType.I386)
                {
                    IMAGE_NT_HEADERS32* inhs32 = (IMAGE_NT_HEADERS32*)(idh->nt_head_ptr + p_Data);
                    ImageFileHeader = inhs32->FileHeader;
                    ModuleMachineType = (MachineType)inhs32->FileHeader.Machine;
                    ImageOptionalHeader32 = inhs32->OptionalHeader;
                    ModuleImageBase = (IntPtr)inhs32->OptionalHeader.ImageBase;

                    ImageNTHeaders32 = new IMAGE_NT_HEADERS32
                    {
                        Signature = inhs32->Signature,
                        FileHeader = inhs32->FileHeader,
                        OptionalHeader = inhs32->OptionalHeader
                    };
                    
                    byte[] bytes = new byte[256];
                    var ret = ErcCore.ReadProcessMemory(ModuleProcess.Handle,
                        (IntPtr)((uint)ModuleBase + ImageOptionalHeader32.LoadConfigTable.VirtualAddress), bytes, 256, out int BytesRead);
                    if (BitConverter.ToUInt32(bytes, 58) > 0 || BitConverter.ToUInt32(bytes, 62) > 0)
                    {
                        ModuleSafeSEH = true;
                    }
                }
                else if (ModuleMachineType == MachineType.x64)
                {
                    IMAGE_NT_HEADERS64* inhs64 = (IMAGE_NT_HEADERS64*)(idh->nt_head_ptr + p_Data);
                    ImageFileHeader = inhs64->FileHeader;
                    ImageOptionalHeader64 = inhs64->OptionalHeader;
                    ModuleImageBase = (IntPtr)inhs64->OptionalHeader.ImageBase;

                    ImageNTHeaders64 = new IMAGE_NT_HEADERS64
                    {
                        Signature = inhs64->Signature,
                        FileHeader = inhs64->FileHeader,
                        OptionalHeader = inhs64->OptionalHeader
                    };

                    byte[] bytes = new byte[256];
                    var ret = ErcCore.ReadProcessMemory(ModuleProcess.Handle,
                        (IntPtr)((long)ModuleBase + (long)ImageOptionalHeader64.LoadConfigTable.VirtualAddress), bytes, 256, out int BytesRead);
                    if (BitConverter.ToUInt64(bytes, 88) > 0 || BitConverter.ToUInt64(bytes, 96) > 0)
                    {
                        ModuleSafeSEH = true;
                    }
                }
                else
                {
                    ModuleFailed = true;
                }
            }
        }

        private void PopulateConfigStruct()
        {
            string path = Path.GetDirectoryName(ModulePath);
            string name = Path.GetFileName(ModulePath);
            
            bool dll = true;

            
            if(Path.GetExtension(ModulePath) != ".dll" && Path.GetExtension(ModulePath) != ".DLL")
            {
                dll = false;
            }

            var MaLRet = ErcCore.MapAndLoad(name, path, out loadedImage, dll, true);
            var modPtr = ErcCore.ImageLoad(name, path);

            if (ModuleMachineType == MachineType.I386)
            {
                IMAGE_LOAD_CONFIG_DIRECTORY32 ImageConfigDir = new IMAGE_LOAD_CONFIG_DIRECTORY32();
                var check = ErcCore.GetImageConfigInformation32(ref loadedImage, ref ImageConfigDir);
            }
            else if (ModuleMachineType == MachineType.x64)
            {
                IMAGE_LOAD_CONFIG_DIRECTORY64 ImageConfigDir = new IMAGE_LOAD_CONFIG_DIRECTORY64();
                var check = ErcCore.GetImageConfigInformation64(ref loadedImage, ref ImageConfigDir);
            }
        }
        #endregion

        #region SearchModule
        /// <summary>
        /// Searches for a string of bytes within a specific module. Takes a byte array to be searched for. 
        /// </summary>
        /// <param name="searchBytes">A byte array to be searched for</param>
        /// <returns>Returns ERC_Result of pointers to the search term</returns>
        public ErcResult<List<IntPtr>> SearchModule(byte[] searchBytes)
        {
            ErcResult<List<IntPtr>> results = new ErcResult<List<IntPtr>>(ModuleCore);
            List<IntPtr> ptrs = new List<IntPtr>();

            IntPtr baseAddress = ModuleBase;
            byte[] buffer = new byte[ModuleSize];
            int bytesread = 0;

            ErcCore.ReadProcessMemory(ModuleProcess.Handle, ModuleBase, buffer, buffer.Length, out bytesread);
            List<int> positions = SearchBytePattern(searchBytes, buffer);

            for(int i = 0; i < positions.Count; i++)
            {
                ptrs.Add((IntPtr)(positions[i] + (long)ModuleBase));
            }
            
            results.ReturnValue = ptrs;
            return results;
        }

        private List<int> SearchBytePattern(byte[] pattern, byte[] bytes)
        {
            List<int> positions = new List<int>();
            int patternLength = pattern.Length;
            int totalLength = bytes.Length;
            byte firstMatchByte = pattern[0];
            for (int i = 0; i < totalLength; i++)
            {
                if (firstMatchByte == bytes[i] && totalLength - i >= patternLength)
                {
                    byte[] match = new byte[patternLength];
                    Array.Copy(bytes, i, match, 0, patternLength);
                    if (match.SequenceEqual<byte>(pattern))
                    {
                        positions.Add(i);
                        i += patternLength - 1;
                    }
                }
            }
            return positions;
        }
        #endregion

        #region ToString
        /// <summary>
        /// Override of the ToString method. Provides a data associated with the module.
        /// </summary>
        /// <returns>A string containing relevant data.</returns>
        public override string ToString()
        {
            string ret = "";
            ret += "Module Name        = " + ModuleName + Environment.NewLine;
            ret += "Module Path        = " + ModulePath + Environment.NewLine;
            ret += "Module Version     = " + ModuleVersion + Environment.NewLine;
            ret += "Module Produce     = " + ModuleProduct + Environment.NewLine;
            if (ModuleMachineType == MachineType.x64)
            {
                ret += "Module Handle      = " + "0x" + ModuleBase.ToString("x16") + Environment.NewLine;
                ret += "Module Entrypoint  = " + "0x" + ModuleEntry.ToString("x16") + Environment.NewLine;
                ret += "Module Image Base  = " + "0x" + ModuleImageBase.ToString("x16") + Environment.NewLine;
            }
            else
            {
                ret += "Module Handle      = " + "0x" + ModuleBase.ToString("x8") + Environment.NewLine;
                ret += "Module Entrypoint  = " + "0x" + ModuleEntry.ToString("x8") + Environment.NewLine;
                ret += "Module Image Base  = " + "0x" + ModuleImageBase.ToString("x8") + Environment.NewLine;
            }
            ret += "Module Size        = " + ModuleSize + Environment.NewLine;
            ret += "Module ASLR        = " + ModuleASLR + Environment.NewLine;
            ret += "Module SafeSEH     = " + ModuleSafeSEH + Environment.NewLine;
            ret += "Module Rebase      = " + ModuleRebase + Environment.NewLine;
            ret += "Module NXCompat    = " + ModuleNXCompat + Environment.NewLine;
            ret += "Module OS DLL      = " + ModuleOsDll + Environment.NewLine;
            return ret;
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Opcode_Assembler.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using Reloaded.Assembler;

namespace ERC.Utilities
{
    /// <summary>
    /// OpcodeAssembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
    /// a static function to assemble instructions.
    /// </summary>
    public class OpcodeAssembler : ProcessInfo
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="parent">ProcessInfo object to be inherited from.</param>
        public OpcodeAssembler(ProcessInfo parent) : base(parent)
        {

        }

        /// <summary>
        /// Takes either an array or list of strings containing assembly instructions and returns the associated opcodes.  
        /// </summary>
        /// <param name="instructions">The instructions to be assembled</param>
        /// <returns>Returns an ErcResult byte array containing the assembled instructions</returns>
        public ErcResult<byte[]> AssembleOpcodes(List<string> instructions)
        {
            ErcResult<byte[]> result = new ErcResult<byte[]>(ProcessCore);
            List<string> mnemonics = new List<string>();
            if (ProcessMachineType == MachineType.I386)
            {
                mnemonics.Add("use32");
            }
            else if (ProcessMachineType == MachineType.x64)
            {
                mnemonics.Add("use64");
            }

            for (int i = 0; i < instructions.Count; i++)
            {
                mnemonics.Add(instructions[i]);
            }

            var asm = new Assembler();

            try
            {
                result.ReturnValue = asm.Assemble(mnemonics);
                asm.Dispose();
            }
            catch (Exception e)
            {
                result.Error = e;
                result.LogEvent();
                asm.Dispose();
                GC.Collect();
                return result;
            }
            GC.Collect();
            return result;
        }

        /// <summary>
        /// Takes either an array or list of strings containing assembly instructions, a MachineType of I386 or x64, 
        /// an instance of the ERC_Core object and returns the associated opcodes.  
        /// </summary>
        /// <param name="instructions">The instructions to be assemble=d</param>
        /// <param name="machineType">a ERC.MachineType of either I386 or x64</param>
        /// <returns>Returns an ERC_Result byte array containing the assembled instructions</returns>
        public static ErcResult<byte[]> AssembleOpcodes(List<string> instructions, MachineType machineType)
        {
            ErcResult<byte[]> result = new ErcResult<byte[]>(new ErcCore());
            List<string> mnemonics = new List<string>();
            if (machineType == MachineType.I386)
            {
                mnemonics.Add("use32");
            }
            else if (machineType == MachineType.x64)
            {
                mnemonics.Add("use64");
            }

            for(int i = 0; i < instructions.Count; i++)
            {
                mnemonics.Add(instructions[i]);
            }

            var asm = new Assembler();

            try
            {
                result.ReturnValue = asm.Assemble(mnemonics);
                asm.Dispose();
            }
            catch(Exception e)
            {
                result.Error = e;
                result.LogEvent();
                asm.Dispose();
                GC.Collect();
                return result;
            }
            GC.Collect();
            return result;
        }
    }
}



================================================
File: ERC/ERC/Opcode_Disassembler.cs
================================================
ï»¿using System;
using System.Linq;

namespace ERC.Utilities
{
    /// <summary>
    /// OpcodeDisassembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
    /// a static function to disassemble opcodes.
    /// </summary>
    public class OpcodeDisassembler : ProcessInfo
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="parent">ProcessInfo object to be inherited from.</param>
        public OpcodeDisassembler(ProcessInfo parent) : base(parent)
        {

        }

        /// <summary>
        /// Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes. 
        /// </summary>
        /// <param name="opcodes">The opcodes to be disassembled</param>
        /// <returns>Returns an ERC_Result containing associated instructions.</returns>
        public ErcResult<string> Disassemble(byte[] opcodes)
        {
            ErcResult<string> result = new ErcResult<string>(ProcessCore);
            SharpDisasm.Disassembler.Translator.IncludeAddress = true;
            SharpDisasm.Disassembler.Translator.IncludeBinary = true;
            SharpDisasm.Disassembler disasm;
            SharpDisasm.ArchitectureMode mode;

            try
            {
                if (ProcessMachineType == MachineType.I386)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_32;
                }
                else if (ProcessMachineType == MachineType.x64)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_64;
                }
                else
                {
                    throw new ERCException("User input error: Machine Type is invalid, must be ERC.MachineType.x86_64 or ERC.MachineType.x86_32");
                }
            }
            catch (ERCException e)
            {
                result.Error = e;
                result.LogEvent();
                return result;
            }

            try
            {
                disasm = new SharpDisasm.Disassembler(
                HexStringToByteArray(BitConverter.ToString(opcodes).Replace("-", "")),
                mode, 0, true);
            }
            catch (Exception e)
            {
                result.Error = e;
                result.LogEvent(e);
                return result;
            }

            foreach (var insn in disasm.Disassemble())
            {
                var mne = insn.ToString().Split(new string[] { "  " }, StringSplitOptions.None);
                result.ReturnValue += mne[mne.Length - 1].Trim() + Environment.NewLine;
            }

            return result;
        }

        /// <summary>
        /// Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64, 
        /// an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.
        /// </summary>
        /// <param name="opcodes">A byte array containing opcodes to be disassembled</param>
        /// <param name="machineType">a ERC.MachineType of either I386 or x64</param>
        /// <returns>Returns an ERC_Result containing associated instructions.</returns>
        public static ErcResult<string> Disassemble(byte[] opcodes, MachineType machineType)
        {
            ErcResult<string> result = new ErcResult<string>(new ErcCore());
            SharpDisasm.Disassembler.Translator.IncludeAddress = true;
            SharpDisasm.Disassembler.Translator.IncludeBinary = true;
            SharpDisasm.Disassembler disasm;
            SharpDisasm.ArchitectureMode mode;

            try
            {
                if (machineType == MachineType.I386)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_32;
                }
                else if (machineType == MachineType.x64)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_64;
                }
                else
                {
                    throw new ERCException("User input error: Machine Type is invalid, must be ERC.MachineType.x86_64 or ERC.MachineType.x86_32");
                }
            }
            catch(ERCException e)
            {
                result.Error = e;
                result.LogEvent();
                return result;
            }

            try
            {
                disasm = new SharpDisasm.Disassembler(
                HexStringToByteArray(BitConverter.ToString(opcodes).Replace("-", "")),
                mode, 0, true);
            }
            catch(Exception e)
            {
                result.Error = e;
                result.LogEvent(e);
                return result;
            }

            foreach (var insn in disasm.Disassemble())
            {
                var mne = insn.ToString().Split(new string[] { "  " }, StringSplitOptions.None);
                result.ReturnValue += mne[mne.Length - 1].Trim() + Environment.NewLine;
            }

            return result;
        }

        /// <summary>
        /// Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64, 
        /// an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.
        /// </summary>
        /// <param name="opcodes">A byte array containing opcodes to be disassembled</param>
        /// <param name="machineType">a ERC.MachineType of either I386 or x64</param>
        /// <param name="core">a ErcCore object</param>
        /// <returns>Returns an ERC_Result containing associated instructions.</returns>
        public static ErcResult<string> Disassemble(byte[] opcodes, MachineType machineType, ErcCore core)
        {
            ErcResult<string> result = new ErcResult<string>(core);
            SharpDisasm.Disassembler.Translator.IncludeAddress = true;
            SharpDisasm.Disassembler.Translator.IncludeBinary = true;
            SharpDisasm.Disassembler disasm;
            SharpDisasm.ArchitectureMode mode;

            try
            {
                if (machineType == MachineType.I386)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_32;
                }
                else if (machineType == MachineType.x64)
                {
                    mode = SharpDisasm.ArchitectureMode.x86_64;
                }
                else
                {
                    throw new ERCException("User input error: Machine Type is invalid, must be ERC.MachineType.x86_64 or ERC.MachineType.x86_32");
                }
            }
            catch (ERCException e)
            {
                result.Error = e;
                result.LogEvent();
                return result;
            }

            try
            {
                disasm = new SharpDisasm.Disassembler(
                HexStringToByteArray(BitConverter.ToString(opcodes).Replace("-", "")),
                mode, 0, true);
            }
            catch (Exception e)
            {
                result.Error = e;
                result.LogEvent(e);
                return result;
            }

            foreach (var insn in disasm.Disassemble())
            {
                var mne = insn.ToString().Split(new string[] { "  " }, StringSplitOptions.None);
                result.ReturnValue += mne[mne.Length - 1].Trim() + Environment.NewLine;
            }

            return result;
        }

        private static byte[] HexStringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length)
                             .Where(x => x % 2 == 0)
                             .Select(x => System.Convert.ToByte(hex.Substring(x, 2), 16))
                             .ToArray();
        }
    }
}



================================================
File: ERC/ERC/Pattern_Tools.cs
================================================
ï»¿using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace ERC.Utilities
{
    /// <summary>
    /// Static class used to build a non repeating pattern and identify the position of a string in a non repeating pattern.
    /// </summary>
    public static class PatternTools
    {
        #region string Constants
        private const string uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        private const string lowercase = "abcdefghijklmnopqrstuvwxyz";

        #endregion

        #region Pattern Create
        /// <summary>
        /// Creates a string of non repeating characters.
        /// </summary>
        /// <param name="length">The length of the pattern to be created as integer</param>
        /// <param name="core">An ErcCore object</param>
        /// <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
        /// <returns>Returns an ErcResult string containing the generated pattern</returns>
        public static ErcResult<string> PatternCreate(int length, ErcCore core, bool extended = false)
        {
            string digits = "0123456789";
            ErcResult<string> result = new ErcResult<string>(core);

            if (extended == true)
            {
                digits += ": ,.;+=-_!&()#@'*^[]%$?";
                if(length > 66923)
                {
                    result.Error = new ERCException("User input error: Pattern length must be less that 66923");
                    result.LogEvent();
                    return result;
                }
            }
            else
            {
                if(length > 20277)
                {
                    result.Error = new ERCException("User input error: Pattern length must be less that 20277. Add the extended flag to create larger strings.");
                    result.LogEvent();
                    return result;
                }
            }
                
            result.ReturnValue = "";

            if (length < 1)
            {
                result.Error = new ERCException("User Input Error: Pattern length must be greate than 0.");
                result.LogEvent();
                return result;
            }

            for (int i = 0; i < uppercase.Length; i++)
            {
                for (int j = 0; j < lowercase.Length; j++)
                {
                    for (int k = 0; k < digits.Length; k++)
                    {
                        char pos1 = uppercase[i];
                        char pos2 = lowercase[j];
                        char pos3 = digits[k];

                        if (result.ReturnValue.Length > length)
                        {
                            result.Error = new ERCException("Procedural Error: Pattern string has exceeded the length supplied");
                            result.ReturnValue = "";
                            return result;
                        }

                        if (result.ReturnValue.Length == length)
                        {
                            return result;
                        }

                        if (result.ReturnValue.Length < length - 2)
                        {
                            result.ReturnValue += pos1;
                            result.ReturnValue += pos2;
                            result.ReturnValue += pos3;
                            if (result.ReturnValue.Length == length)
                            {
                                return result;
                            }
                        }
                        else if (result.ReturnValue.Length < length - 1)
                        {
                            result.ReturnValue += pos1;
                            result.ReturnValue += pos2;
                            if (result.ReturnValue.Length == length)
                            {
                                return result;
                            }
                        }
                        else if (result.ReturnValue.Length < length)
                        {
                            result.ReturnValue += pos1;
                            if (result.ReturnValue.Length == length)
                            {
                                return result;
                            }
                        }
                    }
                }
            }
            result.Error = new ERCException("An unknown error has occured. Function exited incorrectly. Function: ERC.Pattern_Tools.Pattern_Create");
            result.LogEvent();
            return result;
        }
        #endregion

        #region Pattern Offset
        /// <summary>
        /// Takes a string of characters and returns the location of the first character in a pattern created by Pattern_Create.
        /// </summary>
        /// <param name="pattern">The pattern to be searched for.</param>
        /// <param name="core">An ErcCore object</param>
        /// <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
        /// <returns>Returns an ErcResult int containing the offset of the supplied pattern within the generated pattern</returns>
        public static ErcResult<string> PatternOffset(string pattern, ErcCore core, bool extended = false)
        {
            //create string with reversed version of pattern to be searched for.
            char[] reversedChars = pattern.ToCharArray();
            Array.Reverse(reversedChars);
            string reversed = new string(reversedChars);

            //Create pattern to search within. Either extended or normal.
            string digits = "0123456789";
            string patternFull;
            if (extended == true)
            {
                digits += ": ,.;+=-_!&()#@'*^[]%$?";
                patternFull = File.ReadAllText(core.PatternExtendedPath);
            }
            else
            {
                patternFull = File.ReadAllText(core.PatternStandardPath);
            }
            ErcResult<string> result = new ErcResult<string>(core);

            if (pattern.Length < 3)
            {
                result.Error = new ERCException("User Input Error: Pattern length must be 3 characters or longer.");
                result.LogEvent();
                return result;
            }

            if (patternFull.Contains(pattern))
            {
                result.ReturnValue = "Value found at position " + patternFull.IndexOf(pattern).ToString() + " in pattern.";
                return result;
            }
            else if (patternFull.Contains(reversed))
            {
                result.ReturnValue = "Value found reversed at position " + patternFull.IndexOf(reversed).ToString() + " in pattern.";
                return result;
            }

            bool validHexString = true;
            foreach(char c in pattern)
            {
                if((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F'))
                {
                    validHexString = false;
                }
            }

            if(validHexString == true)
            {
                byte[] patternBytes = ERC.Utilities.Convert.HexToBytes(pattern);
                byte[] patternBytesReversed = ERC.Utilities.Convert.HexToBytes(reversed);
                byte[] patternFullBytes = Encoding.ASCII.GetBytes(patternFull);

                string hexString = BitConverter.ToString(patternBytes).Replace("-", "");
                string hexStringReversed = BitConverter.ToString(patternBytesReversed).Replace("-", "");
                string hexPatternFull = BitConverter.ToString(patternFullBytes).Replace("-", "");

                if (hexPatternFull.Contains(hexString))
                {
                    result.ReturnValue = "Value found at position " + (hexPatternFull.IndexOf(hexString) / 2).ToString()  + " in pattern.";
                    return result;
                }
                else if (hexPatternFull.Contains(hexStringReversed))
                {
                    result.ReturnValue = "Value found reversed at position " + (hexPatternFull.IndexOf(hexStringReversed) / 2).ToString() + " in pattern.";
                    return result;
                }
            }
                
            result.Error = new ERCException("Error: Value not found.");
            result.ReturnValue = "Value not found in pattern.";
            return result;
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Payloads.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.IO;

namespace ERC.Utilities
{
    /// <summary>
    /// A collecton of methods which generate payloads.
    /// </summary>
    public static class Payloads
    {
        private static byte[] ByteArray = 
        {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
            0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
            0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
            0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
            0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
            0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
            0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
        };

        #region Egg Hunters
        /// <summary>
        /// Default egg hunter tag.
        /// </summary>
        public static string DefaultEgg = "ERCD";

        /// <summary>
        /// A 64 bit egg hunter.
        /// </summary>
        public static byte[] EggHunter641 =
        {
            0x8C, 0xCB, 0x80, 0xFB, 0x23, 0x33, 0xD2, 0x66, 0x81, 0xCA, 0xFF, 0x0F, 0x33, 0xDB, 0x42, 0x52,
            0x53, 0x53, 0x53, 0x6A, 0x29, 0x58, 0xB3, 0xC0, 0x64, 0xFF, 0x13, 0x83, 0xC4, 0x0C, 0x5A, 0x3C,
            0x05, 0x74, 0xE4, 0xB8, 0x45, 0x52, 0x43, 0x44, 0x89, 0xD7, 0xAF, 0x75, 0xE1, 0xAF, 0x75, 0xDE,
            0xFF, 0xE7
        };

        /// <summary>
        /// A second 64 bit egg hunter.
        /// </summary>
        public static byte[] EggHunter642 =
        {
            0x54, 0x59, 0x48, 0x83, 0xc1, 0xff, 0x48, 0xff, 0xc1, 0x81, 0x79, 0xfc, 0x45, 0x52, 0x43, 0x44,
            0x75, 0xf4, 0xff, 0xe1
        };

        /// <summary>
        /// A 32 bit egg hunter.
        /// </summary>
        public static byte[] EggHunter32 =
        {
            0x66, 0x81, 0xca, 0xff, 0x0f, 0x42, 0x52, 0x6a, 0x02, 0x58, 0xcd, 0x2e, 0x3c, 0x05, 0x5a, 0x74,
            0xef, 0xb8, 0x45, 0x52, 0x43, 0x44, 0x8b, 0xfa, 0xaf, 0x75, 0xea, 0xaf, 0x75, 0xe7, 0xff, 0xe7
        };

        /// <summary>
        /// An egg hunter that will work on 32 bit systems or 32 bit processes running under WOW64.
        /// </summary>
        public static byte[] EggHunterWOW64 =
        {
            0x66, 0x8c, 0xcb, 0x80, 0xfb, 0x23, 0x75, 0x08, 0x31, 0xdb, 0x53, 0x53, 0x53, 0x53, 0xb3, 0xc0,
            0x66, 0x81, 0xca, 0xff, 0x0f, 0x42, 0x52, 0x80, 0xfb, 0xc0, 0x74, 0x19, 0x6a, 0x02, 0x58, 0xcd,
            0x2e, 0x5a, 0x3c, 0x05, 0x74, 0xea, 0xb8, 0x45, 0x52, 0x43, 0x44, 0x89, 0xd7, 0xaf, 0x75, 0xe5,
            0xaf, 0x75, 0xe2, 0xff, 0xe7, 0x6a, 0x26, 0x58, 0x31, 0xc9, 0x89, 0xe2, 0x64, 0xff, 0x13, 0x5e,
            0x5a, 0xeb, 0xdf
        };
        #endregion

        #region Byte Array Constructor
        /// <summary>
        /// Creates an array of all possible byte values except those passed to the function. 
        /// </summary>
        /// <param name="unwantedBytes">Takes a byte array of bytes to be excluded</param>
        /// <returns>Returns an array of all other possible bytes.</returns>
        public static byte[] ByteArrayConstructor(byte[] unwantedBytes)
        {
            byte[] bytes;
            if(unwantedBytes != null)
            {
                bytes = new byte[ByteArray.Length - unwantedBytes.Length];
            }
            else
            {
                bytes = new byte[ByteArray.Length];
            }
            int bytesCounter = 0;
            for(int i = 0; i < ByteArray.Length; i++)
            {
                bool addByte = true;
                if(unwantedBytes != null)
                {
                    for (int j = 0; j < unwantedBytes.Length; j++)
                    {
                        if (ByteArray[i].Equals(unwantedBytes[j]))
                        {
                            addByte = false;
                        }
                    }
                }
                if(addByte == true)
                {
                    bytes[bytesCounter] = ByteArray[i];
                    bytesCounter++;
                }
            }
            return bytes;
        }
        #endregion

        #region Egg Hunter Constructor
        /// <summary>
        /// Generates a selection of EggHunter payloads. A custom tag can be specified, if no tag is specified EggHunters will search for the default tag (ERCD)
        /// </summary>
        /// <param name="tag">A custom tag which the egg hunters will search for.</param>
        /// <returns>Returns a dictionary containing a list of EggHunters and string detailing them</returns>
        public static Dictionary<string, byte[]> EggHunterConstructor(string tag = null)
        {
            Dictionary<string, byte[]> eggHunters = new Dictionary<string, byte[]>();
            string eggHunter641Description = "64 Bit Egg Hunter 1:" + Environment.NewLine +
                "Usage: To be used on 64 bit processes running on 64 bit systems only, not on 32 bit processes running on a 64 bit system." + Environment.NewLine;
            string eggHunter642Description = "64 Bit Egg Hunter 2:" + Environment.NewLine +
                "Usage: To be used on 64 bit processes running on 64 bit systems only, not on 32 bit processes running on a 64 bit system." + Environment.NewLine;
            string eggHunter32Description = "32 Bit Egg Hunter:" + Environment.NewLine + 
                "Usage: To be used on 32 bit systems only, not on 32 bit processes running on a 64 bit system." + Environment.NewLine;
            string eggHunterWOW64Description = "WOW64 Egg Hunter:" + Environment.NewLine +
                "Usage: To be used on 32 bit processes running on a 64 bit system. Can also be used on 32 bit systems." + Environment.NewLine;
            if (tag != null)
            {
                if (tag.Length != 4)
                {
                    tag = null;
                }
            }

            if (tag != null)
            {
                byte[] bytes1 = new byte[EggHunter641.Length];
                Array.Copy(EggHunter641, 0, bytes1, 0, 36);
                bytes1[36] = (byte)tag[0];
                bytes1[37] = (byte)tag[1];
                bytes1[38] = (byte)tag[2];
                bytes1[39] = (byte)tag[3];
                Array.Copy(EggHunter641, 40, bytes1, 40, EggHunter641.Length - 40);
                eggHunters.Add(eggHunter641Description, bytes1);//Change this to be a description of the egghunter and where to use it

                byte[] bytes2 = new byte[EggHunter642.Length];
                Array.Copy(EggHunter642, 0, bytes2, 0, 12);
                bytes2[12] = (byte)tag[0];
                bytes2[13] = (byte)tag[1];
                bytes2[14] = (byte)tag[2];
                bytes2[15] = (byte)tag[3];
                Array.Copy(EggHunter642, 16, bytes2, 16, EggHunter642.Length - 16);
                eggHunters.Add(eggHunter642Description, bytes2);//Change this to be a description of the egghunter and where to use it

                byte[] bytes3 = new byte[EggHunter32.Length];
                Array.Copy(EggHunter32, 0, bytes3, 0, 18);
                bytes3[18] = (byte)tag[0];
                bytes3[19] = (byte)tag[1];
                bytes3[20] = (byte)tag[2];
                bytes3[21] = (byte)tag[3];
                Array.Copy(EggHunter32, 22, bytes3, 22, EggHunter32.Length - 22);
                eggHunters.Add(eggHunter32Description, bytes3);//Change this to be a description of the egghunter and where to use it

                byte[] bytes4 = new byte[EggHunterWOW64.Length];
                Array.Copy(EggHunterWOW64, 0, bytes4, 0, 39);
                bytes4[39] = (byte)tag[0];
                bytes4[40] = (byte)tag[1];
                bytes4[41] = (byte)tag[2];
                bytes4[42] = (byte)tag[3];
                Array.Copy(EggHunterWOW64, 43, bytes4, 43, EggHunterWOW64.Length - 43);
                eggHunters.Add(eggHunterWOW64Description, bytes4);//Change this to be a description of the egghunter and where to use it
            }
            else
            {
                eggHunters.Add(eggHunter641Description, EggHunter641);
                eggHunters.Add(eggHunter642Description, EggHunter642);
                eggHunters.Add(eggHunter32Description, EggHunter32);
                eggHunters.Add(eggHunterWOW64Description, EggHunterWOW64);
            }
            return eggHunters;
        }
        #endregion

        #region SEH Hop Search
        /// <summary>
        /// Finds all instances of POP X POP X RET in a given byte array. 
        /// </summary>
        /// <param name="data">Byte array to be searched</param>
        /// <returns>Returns an array of integers containing the offsets of the instruction sets.</returns>
        public static List<int> PopPopRet(byte[] data)
        {
            List<int> locations = new List<int>();
            List<byte[]> assemblies = new List<byte[]>();
            byte[] R8 = new byte[] { 0x58, 0x41 };
            byte[] R9 = new byte[] { 0x59, 0x41 };
            byte[] R10 = new byte[] { 0x5A, 0x41 };
            byte[] R11 = new byte[] { 0x5B, 0x41 };
            byte[] R12 = new byte[] { 0x5C, 0x41 };
            byte[] R13 = new byte[] { 0x5D, 0x41 };
            byte[] R14 = new byte[] { 0x5E, 0x41 };
            byte[] R15 = new byte[] { 0x5F, 0x41 };
            assemblies.Add(BitConverter.GetBytes(0xC3));
            assemblies.Add(BitConverter.GetBytes(0x58));
            assemblies.Add(BitConverter.GetBytes(0x5D));
            assemblies.Add(BitConverter.GetBytes(0x59));
            assemblies.Add(BitConverter.GetBytes(0x5A));
            assemblies.Add(BitConverter.GetBytes(0x5C));
            assemblies.Add(BitConverter.GetBytes(0x5D));
            assemblies.Add(BitConverter.GetBytes(0x5E));
            assemblies.Add(BitConverter.GetBytes(0x5F));
            assemblies.Add(R8);
            assemblies.Add(R9);
            assemblies.Add(R10);
            assemblies.Add(R11);
            assemblies.Add(R12);
            assemblies.Add(R13);
            assemblies.Add(R14);
            assemblies.Add(R15);
            assemblies.Add(BitConverter.GetBytes(0x5F));
            assemblies.Add(BitConverter.GetBytes(0x5E));
            assemblies.Add(BitConverter.GetBytes(0x5B));
            assemblies.Add(BitConverter.GetBytes(0x5A));
            assemblies.Add(BitConverter.GetBytes(0x59));
            assemblies.Add(BitConverter.GetBytes(0x58));
            assemblies.Add(BitConverter.GetBytes(0x5D));
            assemblies.Add(BitConverter.GetBytes(0x5C));
            for(int i = 2; i < data.Length; i++)
            {
                bool complete = false;
                if (data[i].Equals(assemblies[0][0]))
                {
                    for(int j = 1; j < assemblies.Count; j++)
                    {
                        if(data[i - 1].Equals(assemblies[j][0]))
                        {
                            if (assemblies[j].Length < 4)
                            {
                                for (int k = 1; k < assemblies.Count; k++)
                                {
                                    if (data[i - 2].Equals(assemblies[k][0]) && assemblies[k].Length < 4 && complete == false)
                                    {
                                        locations.Add(i - 2);
                                        complete = true;
                                    }
                                    else if(data[i - 2].Equals(assemblies[k][0]))
                                    {
                                        if (data[i - 3].Equals(0x41) && complete == false)
                                        {
                                            locations.Add(i - 3);
                                            complete = true;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (data[i - 2].Equals(0x41))
                                {
                                    for (int k = 1; k < assemblies.Count; k++)
                                    {
                                        if (data[i - 3].Equals(assemblies[k][0]) && complete == false) 
                                        {
                                            if(assemblies[k].Length < 4)
                                            {
                                                locations.Add(i - 3);
                                                complete = true;
                                            }
                                            else if(assemblies[k].Length == 4 && data[i - 4].Equals(0x41) && complete == false)
                                            {
                                                locations.Add(i - 4);
                                                complete = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return locations;
        }
        #endregion

        #region Byte Array Compare
        /// <summary>
        /// Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
        /// bytes which can not be passed into a program without corrupting the input.
        /// </summary>
        /// <param name="info">The process to compare memory from</param>
        /// <param name="startAddress">The address at which to start the comparison</param>
        /// <param name="bytes">The byte array containing the bytes to be compared</param>
        /// <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
        /// the bytes provided and a byte array containing the bytes read from process memory</returns>
        public static Tuple<bool, byte[], byte[]> ByteCompare(ProcessInfo info, IntPtr startAddress, byte[] bytes)
        {
            byte[] memoryBytes = new byte[bytes.Length];
            ErcCore.ReadProcessMemory(info.ProcessHandle, startAddress, bytes, bytes.Length, out int bytesRead);
            for(int i = 0; i < bytes.Length; i++)
            {
                if(bytes[i] != memoryBytes[i])
                {
                    return Tuple.Create(false, bytes, memoryBytes);
                }
            }
            return Tuple.Create(true, bytes, memoryBytes);
        }

        /// <summary>
        /// Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
        /// bytes which can not be passed into a program without corrupting the input.
        /// </summary>
        /// <param name="info">The process to compare memory from</param>
        /// <param name="startAddress">The address at which to start the comparison</param>
        /// <param name="byteFilePath">The path to a file containing the bytes to be compared</param>
        /// <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
        /// the bytes provided and a byte array containing the bytes read from process memory</returns>
        public static Tuple<bool, byte[], byte[]> ByteCompare(ProcessInfo info, IntPtr startAddress, string byteFilePath)
        {
            if (File.Exists(byteFilePath))
            {
                byte[] bytes = File.ReadAllBytes(byteFilePath);
                byte[] memoryBytes = new byte[bytes.Length];
                ErcCore.ReadProcessMemory(info.ProcessHandle, startAddress, bytes, bytes.Length, out int bytesRead);
                for (int i = 0; i < bytes.Length; i++)
                {
                    if (bytes[i] != memoryBytes[i])
                    {
                        return Tuple.Create(false, bytes, memoryBytes);
                    }
                }
                return Tuple.Create(true, bytes, memoryBytes);
            }
            else
            {
                throw new FileNotFoundException(byteFilePath);
            }
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Process_Info.cs
================================================
ï»¿using ERC.Structures;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

namespace ERC
{
    /// <summary> Contains information needed for the associated functions relating to the process. </summary>
    public class ProcessInfo : ErcCore
    {
        #region Class_Variables
        /// <summary> Name of the process. </summary>
        public string ProcessName { get; private set; }
        /// <summary> Process description. </summary>
        public string ProcessDescription { get; private set; }
        /// <summary> Path for the projects main module. </summary>
        public string ProcessPath { get; private set; }
        /// <summary> Process ID. </summary>
        public int ProcessID { get; private set; }

        /// <summary> Handle for the process. </summary>
        public IntPtr ProcessHandle { get; private set; }
        /// <summary> .Net Process object for this process </summary>
        public Process ProcessCurrent { get; private set; }
        /// <summary> The machine type the process runs on. Eg. x86 or x64 </summary>
        public MachineType ProcessMachineType { get; private set; }
        private Dictionary<string, IntPtr> ProcessModuleHandles = new Dictionary<string, IntPtr>();
        /// <summary> A list containing ModuleInfo objects associuted with the process. /// </summary>
        public  List<ModuleInfo> ModulesInfo = new List<ModuleInfo>();
        /// <summary> A list containing ThreadInfo objects associuted with the process. /// </summary>
        public List<ThreadInfo> ThreadsInfo = new List<ThreadInfo>();

        internal ErcCore ProcessCore;
        internal List<MEMORY_BASIC_INFORMATION32> ProcessMemoryBasicInfo32;
        internal List<MEMORY_BASIC_INFORMATION64> ProcessMemoryBasicInfo64;

        private const uint LIST_MODULES_ALL = 0x03;
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor for the Process_Info object, requires an ERC_Core object and a Process.
        /// </summary>
        /// <param name="core">An ErcCore object</param>
        /// <param name="process">The process to gather information from</param>
        public ProcessInfo(ErcCore core, Process process) : base(core)
        {
            ProcessCore = core;

            if (Is64Bit(process))
            {
                ProcessMachineType = MachineType.x64;
            }
            else
            {
                ProcessMachineType = MachineType.I386;
            }

            ProcessName = process.ProcessName;
            ProcessDescription = FileVersionInfo.GetVersionInfo(process.MainModule.FileName).FileDescription;
            ProcessPath = FileVersionInfo.GetVersionInfo(process.MainModule.FileName).FileName;
            ProcessID = process.Id;
            ProcessCurrent = process;
            ProcessHandle = process.Handle;
            ProcessModuleHandles = GetProcessModules().ReturnValue;

            if (ProcessModuleHandles.Count == 0)
            {
                for(int i = 0; i < process.Modules.Count; i++) 
                {
                    ProcessModuleHandles.Add(process.Modules[i].FileName, process.Modules[i].BaseAddress);
                }
            }
            foreach (KeyValuePair<string, IntPtr> s in ProcessModuleHandles)
            {
                ModuleInfo thisModuleInfo = new ModuleInfo(s.Key, s.Value, process, core);
                if(thisModuleInfo.ModuleFailed == false)
                {
                    ModulesInfo.Add(thisModuleInfo);
                }
            }
            for(int i = 0; i < process.Threads.Count; i++)
            {
                ThreadInfo thisThreadInfo = new ThreadInfo(process.Threads[i], ProcessCore, this);
                if(thisThreadInfo.ThreadFailed == false)
                {
                    ThreadsInfo.Add(thisThreadInfo);
                }
            }
            LocateMemoryRegions();
        }

        /// <summary>
        /// Constructor for the Process_Info object, requires an ERC_Core object and a Process.
        /// </summary>
        /// <param name="core">An ErcCore object</param>
        /// <param name="handle">The handle for the process to gather information from</param>
        public ProcessInfo(ErcCore core, IntPtr handle) : base(core)
        {
            uint flags = 0;
            bool result = GetHandleInformation(handle, out flags);
            if(result == false)
            {
                throw new ERCException("The handle provided is not a valid process (GetHandleInformation returned false)");
            }
            uint processID = GetProcessId(handle);
            
            Process process = Process.GetProcessById((int)processID);
            ProcessCore = core;

            if (Is64Bit(process))
            {
                ProcessMachineType = MachineType.x64;
            }
            else
            {
                ProcessMachineType = MachineType.I386;
            }

            ProcessName = process.ProcessName;
            ProcessDescription = FileVersionInfo.GetVersionInfo(process.MainModule.FileName).FileDescription;
            ProcessPath = FileVersionInfo.GetVersionInfo(process.MainModule.FileName).FileName;
            ProcessID = process.Id;
            ProcessCurrent = process;
            ProcessHandle = process.Handle;
            ProcessModuleHandles = GetProcessModules().ReturnValue;

            if (ProcessModuleHandles.Count == 0)
            {
                for (int i = 0; i < process.Modules.Count; i++)
                {
                    ProcessModuleHandles.Add(process.Modules[i].FileName, process.Modules[i].BaseAddress);
                }
            }
            foreach (KeyValuePair<string, IntPtr> s in ProcessModuleHandles)
            {
                ModuleInfo thisModuleInfo = new ModuleInfo(s.Key, s.Value, process, core);
                if (thisModuleInfo.ModuleFailed == false)
                {
                    ModulesInfo.Add(thisModuleInfo);
                }
            }
            for (int i = 0; i < process.Threads.Count; i++)
            {
                ThreadInfo thisThreadInfo = new ThreadInfo(process.Threads[i], ProcessCore, this);
                if (thisThreadInfo.ThreadFailed == false)
                {
                    ThreadsInfo.Add(thisThreadInfo);
                }
            }
            LocateMemoryRegions();
        }

        /// <summary>
        /// Constructor to use when inheriting from ProcessInfo.
        /// </summary>
        /// <param name="parent">The object to inherit from</param>
        protected ProcessInfo(ProcessInfo parent)
        {
            ProcessName = parent.ProcessName;
            ProcessDescription = parent.ProcessDescription;
            ProcessPath = parent.ProcessPath;
            ProcessID = parent.ProcessID;

            ProcessHandle = parent.ProcessHandle;
            ProcessCurrent = parent.ProcessCurrent;
            ProcessMachineType = parent.ProcessMachineType;
            ProcessModuleHandles = parent.ProcessModuleHandles;
            ModulesInfo = parent.ModulesInfo;

            ProcessCore = parent.ProcessCore;
            ProcessMemoryBasicInfo32 = parent.ProcessMemoryBasicInfo32;
            ProcessMemoryBasicInfo64 = parent.ProcessMemoryBasicInfo64;

            WorkingDirectory = parent.WorkingDirectory;
            Author = parent.Author;
        }
        #endregion

        #region ListLocalProcesses
        /// <summary>
        /// Gets a list of running processes on the host and removes unusable processes (such as system processes etc)
        /// </summary>
        /// <param name="core">An ErcCore object</param>
        /// <returns>Returns an ErcResult containing a list of all supported processes</returns>
        public static ErcResult<Process[]> ListLocalProcesses(ErcCore core)
        {
            ErcResult<Process[]> result = new ErcResult<Process[]>(core);
            Process[] processes = Process.GetProcesses();
            List<int> processesToRemove = new List<int>();

            for(int i = 0; i < processes.Length; i++)
            {
                string filename = null;
                try
                {
                    filename = processes[i].MainModule.FileName;
                }
                catch(Exception)
                {
                    processesToRemove.Add(i);
                }
            }

            Process[] usableProcesses = new Process[processes.Length - processesToRemove.Count];
            int processCounter = 0;
            for (int i = 0; i < processes.Length; i++)
            {
                if (!processesToRemove.Contains(i))
                {
                    usableProcesses[processCounter] = processes[i];
                    processCounter++;
                }
            }
            
            result.ReturnValue = usableProcesses;
            return result;
        }
        #endregion

        #region ListRemoteProcesses
        /// <summary>
        /// Gets a list of running processes on the host and removes unusable processes.
        /// </summary>
        /// <param name="core">An ErcCore object</param>
        /// <param name="machineName">The computer from which to read the list of processes. Can be either the hostname or IP address.</param>
        /// <returns>Returns an ErcResult containing a list of all supported processes</returns>
        public static ErcResult<Process[]> ListRemoteProcesses(ErcCore core, string machineName)
        {
            ErcResult<Process[]> result = new ErcResult<Process[]>(core);

            IPAddress machine = null;
            if(IPAddress.TryParse(machineName, out machine))
            {
                IPHostEntry hostEntry = Dns.GetHostEntry(machine);
                machineName = hostEntry.HostName;
            }
            
            Process[] processes = Process.GetProcesses(machineName);
            List<int> processesToRemove = new List<int>();

            for (int i = 0; i < processes.Length; i++)
            {
                string filename = null;
                try
                {
                    filename = processes[i].MainModule.FileName;
                }
                catch (Exception)
                {
                    processesToRemove.Add(i);
                }
            }

            Process[] usableProcesses = new Process[processes.Length - processesToRemove.Count];
            int processCounter = 0;
            for (int i = 0; i < processes.Length; i++)
            {
                if (!processesToRemove.Contains(i))
                {
                    usableProcesses[processCounter] = processes[i];
                    processCounter++;
                }
            }

            result.ReturnValue = usableProcesses;
            return result;
        }
        #endregion

        #region GetProcessModules
        /// <summary>
        /// Returns a list of files loaded by the current process as List String
        /// </summary>
        /// <returns>Returns an ErcResult containing a Dictionary of module names and the associated handles</returns>
        public ErcResult<Dictionary<string, IntPtr>> GetProcessModules()
        {
            IntPtr hProcess = ProcessHandle;
            ErcResult<Dictionary<string, IntPtr>> result = new ErcResult<Dictionary<string, IntPtr>>(ProcessCore);
            result.ReturnValue = new Dictionary<string, IntPtr>();
            Dictionary<string, IntPtr> modules = new Dictionary<string, IntPtr>();
            if (hProcess != IntPtr.Zero)
            {
                try
                {
                    IntPtr[] modhWnds = new IntPtr[0];
                    int lpcbNeeded = 0;

                    try
                    {
                        // -- call EnumProcessModules the first time to get the size of the array needed
                        EnumProcessModulesEx(hProcess, modhWnds, 0, out lpcbNeeded, LIST_MODULES_ALL);

                        modhWnds = new IntPtr[lpcbNeeded / IntPtr.Size];
                        EnumProcessModulesEx(hProcess, modhWnds, modhWnds.Length * IntPtr.Size, out lpcbNeeded, LIST_MODULES_ALL);
                    }
                    catch
                    {
                        result.ReturnValue = modules;
                        return result;
                    }

                    for (int i = 0; i < modhWnds.Length; i++)
                    {
                        StringBuilder modName = new StringBuilder(256);
                        if (GetModuleFileNameEx(hProcess, modhWnds[i], modName, modName.Capacity) != 0)
                        {
                            if (!modules.ContainsKey(modName.ToString()))
                            {
                                modules.Add(modName.ToString(), modhWnds[i]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    result.Error = e;
                    result.LogEvent();
                    return result;
                }
            }
            result.ReturnValue = modules;
            return result;
        }
        #endregion

        #region Identify_Process_Architecture
        /// <summary>
        /// Identifies if a process is 64bit or 32 bit, returns true for 64bit and false for 32bit.
        /// </summary>
        /// <param name="process">The process to be used</param>
        /// <returns>Returns true if the process is 64bit and false if it is not.</returns>
        public static bool Is64Bit(Process process)
        {
            bool isWow64;

            if(process == null)
            {
                throw new ERCException("No process attached.");
            }

            if (!Environment.Is64BitOperatingSystem)
            {
                return false;
            }

            if (!IsWow64Process(process.Handle, out isWow64))
            {
                throw new ERCException("An error has occured in the IsWow64Process call from Process.Is64Bit()");
            }

            return !isWow64;
        }
        #endregion

        #region LocateMemoryRegions
        /// <summary>
        /// Identifies memory regions occupied by the current process and populates the associated list with the Process_Info object.
        /// </summary>
        private void LocateMemoryRegions()
        {
            
            Process process = ProcessCurrent;
            if (ProcessMachineType == MachineType.I386)
            {
                ProcessMemoryBasicInfo32 = new List<MEMORY_BASIC_INFORMATION32>();
                long MaxAddress = 0x7fffffff;
                long address = 0;
                long oldAddress = 0;

                do
                {
                    MEMORY_BASIC_INFORMATION32 m;
                    int result = VirtualQueryEx32(process.Handle, (IntPtr)address, out m, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION32)));
                    if (address == (long)m.BaseAddress + (long)m.RegionSize)
                        break;
                    address = (long)m.BaseAddress + (long)m.RegionSize;
                    if (oldAddress > address)
                    {
                        address = long.MaxValue;
                    }
                    oldAddress = address;
                    if (m.State == StateEnum.MEM_COMMIT && (m.Type == TypeEnum.MEM_MAPPED || m.Type == TypeEnum.MEM_PRIVATE))
                    {
                        ProcessMemoryBasicInfo32.Add(m);
                    }
                } while (address <= MaxAddress);
            }
            else if (ProcessMachineType == MachineType.x64)
            {
                ProcessMemoryBasicInfo64 = new List<MEMORY_BASIC_INFORMATION64>();
                long MaxAddress = 0x000007FFFFFEFFFF;
                long address = 0;
                long oldAddress = 0;

                do
                {
                    MEMORY_BASIC_INFORMATION64 m;
                    int result = VirtualQueryEx64(process.Handle, (IntPtr)address, out m, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION64)));
                    if (address == (long)m.BaseAddress + (long)m.RegionSize)
                        break;
                    address = (long)m.BaseAddress + (long)m.RegionSize;
                    if (oldAddress > address)
                    {
                        address = long.MaxValue;
                    }
                    oldAddress = address;
                    if (m.State == StateEnum.MEM_COMMIT && (m.Type == TypeEnum.MEM_MAPPED || m.Type == TypeEnum.MEM_PRIVATE))
                    {
                        ProcessMemoryBasicInfo64.Add(m);
                    }

                } while (address <= MaxAddress);
            }
            else
            {
                throw new ERCException("Machine type is invalid");
            }
        }
        #endregion

        #region Search_Functions

        #region Search_Process_Memory
        /// <summary>
        /// Private function called from Search_Memory. Searches memory regions populated by the process for specific patterns.
        /// </summary>
        /// <param name="searchBytes"> Takes a byte array as input to be searched for</param>
        /// <returns>Returns a list of IntPtr for each instance found.</returns>
        internal ErcResult<List<IntPtr>> SearchProcessMemory(byte[] searchBytes)
        {
            ErcResult<List<IntPtr>> resultAddresses = new ErcResult<List<IntPtr>>(ProcessCore);

            resultAddresses.ReturnValue = new List<IntPtr>();
            Process process = ProcessCurrent;

            if (ProcessMachineType == MachineType.I386)
            {
                for (int i = 0; i < ProcessMemoryBasicInfo32.Count; i++)
                {
                    if((ulong)ProcessMemoryBasicInfo32[i].RegionSize > int.MaxValue)
                    {
                        long startAddress = (long)ProcessMemoryBasicInfo32[i].BaseAddress;
                        long endAddress = (long)ProcessMemoryBasicInfo32[i].BaseAddress + (long)(ProcessMemoryBasicInfo32[i].RegionSize - 1);
                        long region = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        for (long j = startAddress; j < endAddress; j += (region / 100))
                        {
                            byte[] buffer = new byte[region / 100]; 
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);

                            long pos = 0;
                            long index = 0;
                            do
                            {
                                byte[] buffer1Partial = new byte[buffer.Length - pos];
                                Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                                index = ByteIndexOf(buffer1Partial, searchBytes);

                                if (index != -1)
                                {
                                    resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo32[i].BaseAddress + pos));
                                }
                                pos += index;
                                if (index == 0)
                                {
                                    pos += searchBytes.Length;
                                    index = 1;
                                }
                            } while (index != -1 && index != 0);
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        int bytesRead = 0;
                        IntPtr baseAddress = ProcessMemoryBasicInfo32[i].BaseAddress;
                        byte[] buffer = new byte[bufferSize]; 

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer, buffer.Length, out bytesRead);

                        long pos = 0;
                        long index = 0;
                        do
                        {
                            byte[] buffer1Partial = new byte[buffer.Length - pos];
                            Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                            index = ByteIndexOf(buffer1Partial, searchBytes);

                            if (index != -1)
                            {
                                resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo32[i].BaseAddress + pos));
                            }
                            pos += index;
                            if (index == 0)
                            {
                                pos += searchBytes.Length;
                                index = 1;
                            }
                        } while (index != -1 && index != 0);
                    }
                }
            }
            else if(ProcessMachineType == MachineType.x64)
            {
                byte[] buffer = new byte[int.MaxValue / 10];
                int bytesRead = 0;
                for (int i = 0; i < ProcessMemoryBasicInfo64.Count; i++)
                {
                    if (ProcessMemoryBasicInfo64[i].RegionSize > int.MaxValue)
                    {
                        ulong startAddress = ProcessMemoryBasicInfo64[i].BaseAddress;
                        ulong endAddress = ProcessMemoryBasicInfo64[i].BaseAddress + (ProcessMemoryBasicInfo64[i].RegionSize - 1);
                        ulong region = ProcessMemoryBasicInfo64[i].RegionSize;

                        for (ulong j = startAddress; j < endAddress; j += int.MaxValue / 10)
                        {
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            long pos = 0;
                            long index = 0;
                            do
                            {
                                byte[] buffer1Partial = new byte[buffer.Length - pos];
                                Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                                index = ByteIndexOf(buffer1Partial, searchBytes);

                                if (index != -1)
                                {
                                    resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo64[i].BaseAddress + pos));
                                }
                                pos += index;
                                if (index == 0)
                                {
                                    pos += searchBytes.Length;
                                    index = 1;
                                }
                            } while (index != -1 && index != 0);
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo64[i].RegionSize;
                        bytesRead = 0;
                        IntPtr baseAddress = (IntPtr)ProcessMemoryBasicInfo64[i].BaseAddress;
                        byte[] buffer1 = new byte[bufferSize]; 

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer1, buffer1.Length, out bytesRead);
                        long pos = 0;
                        long index = 0;
                        do
                        {
                            byte[] buffer1Partial = new byte[buffer1.Length - pos];
                            Array.Copy(buffer1, pos, buffer1Partial, 0, buffer1.Length - pos);
                            index = ByteIndexOf(buffer1Partial, searchBytes);

                            if (index != -1)
                            {
                                resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo64[i].BaseAddress + pos));
                            }
                            pos += index;
                            if(index == 0)
                            {
                                pos += searchBytes.Length;
                                index = 1;
                            }
                        } while (index != -1 && index != 0);
                    }
                }
            }
            resultAddresses.ReturnValue = new HashSet<IntPtr>(resultAddresses.ReturnValue).ToList();
            return resultAddresses;  
        }

        /// <summary>
        /// Private function called from Search_Memory. Searches memory regions populated by the process for specific strings.
        /// </summary>
        /// <param name="searchBytes"> Takes a byte array as input to be searched for</param>
        /// <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
        /// <returns>Returns a list of IntPtr for each instance found.</returns>
        internal ErcResult<List<IntPtr>> SearchProcessMemory(byte[] searchBytes, byte[] ptrsToExclude)
        {
            ErcResult<List<IntPtr>> resultAddresses = new ErcResult<List<IntPtr>>(ProcessCore);

            resultAddresses.ReturnValue = new List<IntPtr>();
            Process process = ProcessCurrent;

            if (ProcessMachineType == MachineType.I386)
            {
                for (int i = 0; i < ProcessMemoryBasicInfo32.Count; i++)
                {
                    if ((ulong)ProcessMemoryBasicInfo32[i].RegionSize > int.MaxValue)
                    {
                        long startAddress = (long)ProcessMemoryBasicInfo32[i].BaseAddress;
                        long endAddress = (long)ProcessMemoryBasicInfo32[i].BaseAddress + (long)(ProcessMemoryBasicInfo32[i].RegionSize - 1);
                        long region = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        for (long j = startAddress; j < endAddress; j += (region / 100))
                        {
                            byte[] buffer = new byte[region / 100];
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);

                            long pos = 0;
                            long index = 0;
                            do
                            {
                                byte[] buffer1Partial = new byte[buffer.Length - pos];
                                Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                                index = ByteIndexOf(buffer1Partial, searchBytes);

                                if (index != -1)
                                {
                                    resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo32[i].BaseAddress + pos));
                                }
                                pos += index;
                                if (index == 0)
                                {
                                    pos += searchBytes.Length;
                                    index = 1;
                                }
                            } while (index != -1 && index != 0);
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        int bytesRead = 0;
                        IntPtr baseAddress = ProcessMemoryBasicInfo32[i].BaseAddress;
                        byte[] buffer = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer, buffer.Length, out bytesRead);

                        long pos = 0;
                        long index = 0;
                        do
                        {
                            byte[] buffer1Partial = new byte[buffer.Length - pos];
                            Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                            index = ByteIndexOf(buffer1Partial, searchBytes);

                            if (index != -1)
                            {
                                resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo32[i].BaseAddress + pos));
                            }
                            pos += index;
                            if (index == 0)
                            {
                                pos += searchBytes.Length;
                                index = 1;
                            }
                        } while (index != -1 && index != 0);
                    }
                }
            }
            else if (ProcessMachineType == MachineType.x64)
            {
                byte[] buffer = new byte[int.MaxValue / 10];
                int bytesRead = 0;
                for (int i = 0; i < ProcessMemoryBasicInfo64.Count; i++)
                {
                    if (ProcessMemoryBasicInfo64[i].RegionSize > int.MaxValue)
                    {
                        ulong startAddress = ProcessMemoryBasicInfo64[i].BaseAddress;
                        ulong endAddress = ProcessMemoryBasicInfo64[i].BaseAddress + (ProcessMemoryBasicInfo64[i].RegionSize - 1);
                        ulong region = ProcessMemoryBasicInfo64[i].RegionSize;

                        for (ulong j = startAddress; j < endAddress; j += int.MaxValue / 10)
                        {
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            long pos = 0;
                            long index = 0;
                            do
                            {
                                byte[] buffer1Partial = new byte[buffer.Length - pos];
                                Array.Copy(buffer, pos, buffer1Partial, 0, buffer.Length - pos);
                                index = ByteIndexOf(buffer1Partial, searchBytes);

                                if (index != -1)
                                {
                                    resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo64[i].BaseAddress + pos));
                                }
                                pos += index;
                                if (index == 0)
                                {
                                    pos += searchBytes.Length;
                                    index = 1;
                                }
                            } while (index != -1 && index != 0);
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo64[i].RegionSize;
                        bytesRead = 0;
                        IntPtr baseAddress = (IntPtr)ProcessMemoryBasicInfo64[i].BaseAddress;
                        byte[] buffer1 = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer1, buffer1.Length, out bytesRead);
                        long pos = 0;
                        long index = 0;
                        do
                        {
                            byte[] buffer1Partial = new byte[buffer1.Length - pos];
                            Array.Copy(buffer1, pos, buffer1Partial, 0, buffer1.Length - pos);
                            index = ByteIndexOf(buffer1Partial, searchBytes);

                            if (index != -1)
                            {
                                resultAddresses.ReturnValue.Add((IntPtr)(index + (long)ProcessMemoryBasicInfo64[i].BaseAddress + pos));
                            }
                            pos += index;
                            if (index == 0)
                            {
                                pos += searchBytes.Length;
                                index = 1;
                            }
                        } while (index != -1 && index != 0);
                    }
                }
            }
            resultAddresses.ReturnValue = new HashSet<IntPtr>(resultAddresses.ReturnValue).ToList();
            resultAddresses.ReturnValue = Utilities.PtrRemover.RemovePointers(ProcessMachineType, resultAddresses.ReturnValue, ptrsToExclude);
            return resultAddresses;
        }
        #endregion

        #region SearchAllMemoryPPR
        /// <summary>
        /// Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
        /// Passing a list of module paths or names will exclude those modules from the search. 
        /// </summary>
        /// <param name="excludes">Takes a list of module names to be excluded from the search</param>
        /// <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        public ErcResult<Dictionary<IntPtr, string>> SearchAllMemoryPPR(List<string> excludes = null)
        {
            ErcResult<Dictionary<IntPtr, string>> ptrs = new ErcResult<Dictionary<IntPtr, string>>(ProcessCore);
            ptrs.ReturnValue = new Dictionary<IntPtr, string>();
            if (ProcessMachineType == MachineType.I386)
            {
                for (int i = 0; i < ProcessMemoryBasicInfo32.Count; i++)
                {
                    if ((ulong)ProcessMemoryBasicInfo32[i].RegionSize > int.MaxValue)
                    {
                        long start_address = (long)ProcessMemoryBasicInfo32[i].BaseAddress;
                        long end_address = (long)ProcessMemoryBasicInfo32[i].BaseAddress + (long)(ProcessMemoryBasicInfo32[i].RegionSize - 1);
                        long region = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        for (long j = start_address; j < end_address; j += (region / 100))
                        {
                            byte[] buffer = new byte[region / 100];
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                            if (pprs.Count > 0)
                            {
                                for (int k = 0; k < pprs.Count; k++)
                                {
                                    if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress)))
                                    {
                                        ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress), ProcessPath);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        int bytesRead = 0;
                        IntPtr baseAddress = ProcessMemoryBasicInfo32[i].BaseAddress;
                        byte[] buffer = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer, buffer.Length, out bytesRead);
                        List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                        if (pprs.Count > 0)
                        {
                            for (int k = 0; k < pprs.Count; k++)
                            {
                                if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress)))
                                {
                                    ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress), ProcessPath);
                                }
                            }
                        }
                    }
                }
            }
            else if (ProcessMachineType == MachineType.x64)
            {
                byte[] buffer = new byte[int.MaxValue / 10];
                int bytesRead = 0;
                for (int i = 0; i < ProcessMemoryBasicInfo64.Count; i++)
                {
                    if (ProcessMemoryBasicInfo64[i].RegionSize > int.MaxValue)
                    {
                        ulong startAddress = ProcessMemoryBasicInfo64[i].BaseAddress;
                        ulong endAddress = ProcessMemoryBasicInfo64[i].BaseAddress + (ProcessMemoryBasicInfo64[i].RegionSize - 1);
                        ulong region = ProcessMemoryBasicInfo64[i].RegionSize;

                        for (ulong j = startAddress; j < endAddress; j += int.MaxValue / 10)
                        {
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                            if (pprs.Count > 0)
                            {
                                for (int k = 0; k < pprs.Count; k++)
                                {
                                    if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress)))
                                    {
                                        ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress), ProcessPath);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo64[i].RegionSize;
                        bytesRead = 0;
                        IntPtr baseAddress = (IntPtr)ProcessMemoryBasicInfo64[i].BaseAddress;
                        byte[] buffer1 = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer1, buffer1.Length, out bytesRead);
                        List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer1);
                        if(pprs.Count > 0)
                        {
                            for (int k = 0; k < pprs.Count; k++)
                            {
                                if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress)))
                                {
                                    ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress), ProcessPath);
                                }
                            }
                        }
                    }
                }
            }
            List<ModuleInfo> modules = new List<ModuleInfo>();
            for(int i = 0; i < ModulesInfo.Count; i++)
            {
                if (excludes != null)
                {
                    if (!excludes.Contains(ModulesInfo[i].ModuleName) && !excludes.Contains(ModulesInfo[i].ModulePath))
                    {
                        modules.Add(ModulesInfo[i]);
                    }
                }
                else
                {
                    modules.Add(ModulesInfo[i]);
                }
            }
            for(int i = 0; i < modules.Count; i++)
            {

                IntPtr baseAddress = modules[i].ModuleBase;
                byte[] buffer = new byte[modules[i].ModuleSize];
                int bytesread = 0;

                ReadProcessMemory(ProcessHandle, modules[i].ModuleBase, buffer, buffer.Length, out bytesread);
                List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                if (pprs.Count > 0)
                {
                    for (int k = 0; k < pprs.Count; k++)
                    {
                        if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)modules[i].ModuleBase)))
                        {
                            ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)modules[i].ModuleBase), modules[i].ModulePath);
                        }
                    }
                }
            }
            return ptrs;
        }

        /// <summary>
        /// Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
        /// Passing a list of module paths or names will exclude those modules from the search. 
        /// </summary>
        /// <param name="excludes">Takes a list of module names to be excluded from the search</param>
        /// <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
        /// <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        public ErcResult<Dictionary<IntPtr, string>> SearchAllMemoryPPR(byte[] ptrsToExclude, List<string> excludes = null)
        {
            ErcResult<Dictionary<IntPtr, string>> ptrs = new ErcResult<Dictionary<IntPtr, string>>(ProcessCore);
            ptrs.ReturnValue = new Dictionary<IntPtr, string>();
            if (ProcessMachineType == MachineType.I386)
            {
                for (int i = 0; i < ProcessMemoryBasicInfo32.Count; i++)
                {
                    if ((ulong)ProcessMemoryBasicInfo32[i].RegionSize > int.MaxValue)
                    {
                        long start_address = (long)ProcessMemoryBasicInfo32[i].BaseAddress;
                        long end_address = (long)ProcessMemoryBasicInfo32[i].BaseAddress + (long)(ProcessMemoryBasicInfo32[i].RegionSize - 1);
                        long region = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        for (long j = start_address; j < end_address; j += (region / 100))
                        {
                            byte[] buffer = new byte[region / 100];
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                            if (pprs.Count > 0)
                            {
                                for (int k = 0; k < pprs.Count; k++)
                                {
                                    if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress)))
                                    {
                                        ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress), ProcessPath);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo32[i].RegionSize;
                        int bytesRead = 0;
                        IntPtr baseAddress = ProcessMemoryBasicInfo32[i].BaseAddress;
                        byte[] buffer = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer, buffer.Length, out bytesRead);
                        List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                        if (pprs.Count > 0)
                        {
                            for (int k = 0; k < pprs.Count; k++)
                            {
                                if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress)))
                                {
                                    ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)ProcessMemoryBasicInfo32[i].BaseAddress), ProcessPath);
                                }
                            }
                        }
                    }
                }
            }
            else if (ProcessMachineType == MachineType.x64)
            {
                byte[] buffer = new byte[int.MaxValue / 10];
                int bytesRead = 0;
                for (int i = 0; i < ProcessMemoryBasicInfo64.Count; i++)
                {
                    if (ProcessMemoryBasicInfo64[i].RegionSize > int.MaxValue)
                    {
                        ulong startAddress = ProcessMemoryBasicInfo64[i].BaseAddress;
                        ulong endAddress = ProcessMemoryBasicInfo64[i].BaseAddress + (ProcessMemoryBasicInfo64[i].RegionSize - 1);
                        ulong region = ProcessMemoryBasicInfo64[i].RegionSize;

                        for (ulong j = startAddress; j < endAddress; j += int.MaxValue / 10)
                        {
                            ReadProcessMemory(ProcessHandle, (IntPtr)j, buffer, buffer.Length, out bytesRead);
                            List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                            if (pprs.Count > 0)
                            {
                                for (int k = 0; k < pprs.Count; k++)
                                {
                                    if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress)))
                                    {
                                        ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress), ProcessPath);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        long bufferSize = (long)ProcessMemoryBasicInfo64[i].RegionSize;
                        bytesRead = 0;
                        IntPtr baseAddress = (IntPtr)ProcessMemoryBasicInfo64[i].BaseAddress;
                        byte[] buffer1 = new byte[bufferSize];

                        ReadProcessMemory(ProcessHandle, baseAddress, buffer1, buffer1.Length, out bytesRead);
                        List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer1);
                        if (pprs.Count > 0)
                        {
                            for (int k = 0; k < pprs.Count; k++)
                            {
                                if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress)))
                                {
                                    ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + ProcessMemoryBasicInfo64[i].BaseAddress), ProcessPath);
                                }
                            }
                        }
                    }
                }
            }
            List<ModuleInfo> modules = new List<ModuleInfo>();
            for (int i = 0; i < ModulesInfo.Count; i++)
            {
                if (excludes != null)
                {
                    if (!excludes.Contains(ModulesInfo[i].ModuleName) && !excludes.Contains(ModulesInfo[i].ModulePath))
                    {
                        modules.Add(ModulesInfo[i]);
                    }
                }
                else
                {
                    modules.Add(ModulesInfo[i]);
                }
            }
            for (int i = 0; i < modules.Count; i++)
            {

                IntPtr baseAddress = modules[i].ModuleBase;
                byte[] buffer = new byte[modules[i].ModuleSize];
                int bytesread = 0;

                ReadProcessMemory(ProcessHandle, modules[i].ModuleBase, buffer, buffer.Length, out bytesread);
                List<int> pprs = ERC.Utilities.Payloads.PopPopRet(buffer);
                if (pprs.Count > 0)
                {
                    for (int k = 0; k < pprs.Count; k++)
                    {
                        if (!ptrs.ReturnValue.ContainsKey((IntPtr)((ulong)pprs[k] + (ulong)modules[i].ModuleBase)))
                        {
                            ptrs.ReturnValue.Add((IntPtr)((ulong)pprs[k] + (ulong)modules[i].ModuleBase), modules[i].ModulePath);
                        }
                    }
                }
            }
            ptrs.ReturnValue = Utilities.PtrRemover.RemovePointers(ProcessMachineType, ptrs.ReturnValue, ptrsToExclude);
            return ptrs;
        }
        #endregion

        #region SearchMemory
        /// <summary>
        /// Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
        /// Specific modules can be exclude through passing a Listof strings containing module names or paths.
        /// </summary>
        /// <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
        /// <param name="searchBytes">Byte array to be searched for (optional)</param>
        /// <param name="searchString">String to be searched for (optional)</param>
        /// <param name="excludes">Modules to be excluded from the search (optional)</param>
        /// <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        public ErcResult<Dictionary<IntPtr, string>> SearchMemory(int searchType, byte[] searchBytes = null, string searchString = null, List<string> excludes = null)
        {
            ErcResult<Dictionary<IntPtr, string>> resultAddresses = new ErcResult<Dictionary<IntPtr, string>>(ProcessCore);
            if (searchBytes == null && searchString == null)
            {
                resultAddresses.Error = new ERCException("No search term provided. " +
                    "Either a byte array or string must be provided as the search term or there is nothing to search for.");
                resultAddresses.LogEvent();
                return resultAddresses;
            }
            resultAddresses.ReturnValue = new Dictionary<IntPtr, string>();
            switch (searchType)
            {
                case 0:
                    break;
                case 1:
                    searchBytes = Encoding.Unicode.GetBytes(searchString);
                    break;
                case 2:
                    searchBytes = Encoding.ASCII.GetBytes(searchString);
                    break;
                case 3:
                    searchBytes = Encoding.UTF8.GetBytes(searchString);
                    break;
                case 4:
                    searchBytes = Encoding.UTF7.GetBytes(searchString);
                    break;
                case 5:
                    searchBytes = Encoding.UTF32.GetBytes(searchString);
                    break;
                default:
                    resultAddresses.Error = new ERCException("Incorrect searchType value provided, value must be 0-4");
                    resultAddresses.LogEvent();
                    return resultAddresses;
            }
            var processPtrs = SearchProcessMemory(searchBytes);
            if(processPtrs.Error != null)
            {
                resultAddresses.Error = new ERCException("Error passed from Search_Process_Memory: " + processPtrs.Error.ToString());
                resultAddresses.LogEvent();
                return resultAddresses;
            }

            for(int i = 0; i < processPtrs.ReturnValue.Count; i++)
            {
                if (!resultAddresses.ReturnValue.ContainsKey(processPtrs.ReturnValue[i]))
                {
                    resultAddresses.ReturnValue.Add(processPtrs.ReturnValue[i], ProcessPath);
                }
            }

            List<ModuleInfo> modules = new List<ModuleInfo>();
            for (int i = 0; i < ModulesInfo.Count; i++)
            {
                if (excludes != null)
                {
                    if (!excludes.Contains(ModulesInfo[i].ModuleName) && !excludes.Contains(ModulesInfo[i].ModulePath))
                    {
                        modules.Add(ModulesInfo[i]);
                    }
                }
                else
                {
                    modules.Add(ModulesInfo[i]);
                }
            }
            for(int i = 0; i < modules.Count; i++)
            {
                var modulePtrs = modules[i].SearchModule(searchBytes);
                if(modulePtrs.ReturnValue.Count > 0)
                {
                    for(int j = 0; j < modulePtrs.ReturnValue.Count; j++)
                    {
                        if (!resultAddresses.ReturnValue.ContainsKey(modulePtrs.ReturnValue[j]))
                        {
                            resultAddresses.ReturnValue.Add(modulePtrs.ReturnValue[j], modules[i].ModulePath);
                        }
                    }
                }
            }
            return resultAddresses;
        }

        /// <summary>
        /// Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
        /// Specific modules can be exclude through passing a Listof strings containing module names or paths.
        /// </summary>
        /// <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
        /// <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
        /// <param name="searchBytes">Byte array to be searched for (optional)</param>
        /// <param name="searchString">String to be searched for (optional)</param>
        /// <param name="excludes">Modules to be excluded from the search (optional)</param>
        /// <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        public ErcResult<Dictionary<IntPtr, string>> SearchMemory(int searchType, byte[] ptrsToExclude, byte[] searchBytes = null, string searchString = null, List<string> excludes = null)
        {
            ErcResult<Dictionary<IntPtr, string>> resultAddresses = new ErcResult<Dictionary<IntPtr, string>>(ProcessCore);
            if (searchBytes == null && searchString == null)
            {
                resultAddresses.Error = new ERCException("No search term provided. " +
                    "Either a byte array or string must be provided as the search term or there is nothing to search for.");
                resultAddresses.LogEvent();
                return resultAddresses;
            }
            resultAddresses.ReturnValue = new Dictionary<IntPtr, string>();
            switch (searchType)
            {
                case 0:
                    break;
                case 1:
                    searchBytes = Encoding.Unicode.GetBytes(searchString);
                    break;
                case 2:
                    searchBytes = Encoding.ASCII.GetBytes(searchString);
                    break;
                case 3:
                    searchBytes = Encoding.UTF8.GetBytes(searchString);
                    break;
                case 4:
                    searchBytes = Encoding.UTF7.GetBytes(searchString);
                    break;
                case 5:
                    searchBytes = Encoding.UTF32.GetBytes(searchString);
                    break;
                default:
                    resultAddresses.Error = new ERCException("Incorrect searchType value provided, value must be 0-4");
                    resultAddresses.LogEvent();
                    return resultAddresses;
            }
            var processPtrs = SearchProcessMemory(searchBytes);
            if (processPtrs.Error != null)
            {
                resultAddresses.Error = new ERCException("Error passed from Search_Process_Memory: " + processPtrs.Error.ToString());
                resultAddresses.LogEvent();
                return resultAddresses;
            }

            for (int i = 0; i < processPtrs.ReturnValue.Count; i++)
            {
                if (!resultAddresses.ReturnValue.ContainsKey(processPtrs.ReturnValue[i]))
                {
                    resultAddresses.ReturnValue.Add(processPtrs.ReturnValue[i], ProcessPath);
                }
            }

            List<ModuleInfo> modules = new List<ModuleInfo>();
            for (int i = 0; i < ModulesInfo.Count; i++)
            {
                if (excludes != null)
                {
                    if (!excludes.Contains(ModulesInfo[i].ModuleName) && !excludes.Contains(ModulesInfo[i].ModulePath))
                    {
                        modules.Add(ModulesInfo[i]);
                    }
                }
                else
                {
                    modules.Add(ModulesInfo[i]);
                }
            }
            for (int i = 0; i < modules.Count; i++)
            {
                var modulePtrs = modules[i].SearchModule(searchBytes);
                if (modulePtrs.ReturnValue.Count > 0)
                {
                    for (int j = 0; j < modulePtrs.ReturnValue.Count; j++)
                    {
                        if (!resultAddresses.ReturnValue.ContainsKey(modulePtrs.ReturnValue[j]))
                        {
                            resultAddresses.ReturnValue.Add(modulePtrs.ReturnValue[j], modules[i].ModulePath);
                        }
                    }
                }
            }

            resultAddresses.ReturnValue = Utilities.PtrRemover.RemovePointers(ProcessMachineType, resultAddresses.ReturnValue, ptrsToExclude);
            
            return resultAddresses;
        }
        #endregion

        #region SearchModules
        /// <summary>
        /// Searches all modules loaded by a process for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
        /// Search can be limited to specific modules through passing a List of strings containing module names or paths.
        /// </summary>
        /// <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
        /// <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
        /// <param name="searchBytes">Byte array to be searched for (optional)</param>
        /// <param name="searchString">String to be searched for (optional)</param>
        /// <param name="includedModules">Modules to be included in the search (optional)</param>
        /// <param name="excludedModules">Modules to be excluded from the search (optional)</param>
        /// <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>>
        public ErcResult<Dictionary<IntPtr, string>> SearchModules(int searchType, byte[] ptrsToExclude = null, byte[] searchBytes = null, string searchString = null, List<string> includedModules = null, List<string> excludedModules = null)
        {
            ErcResult<Dictionary<IntPtr, string>> resultAddresses = new ErcResult<Dictionary<IntPtr, string>>(ProcessCore);
            if (searchBytes == null && searchString == null)
            {
                resultAddresses.Error = new ERCException("No search term provided. " +
                    "Either a byte array or string must be provided as the search term or there is nothing to search for.");
                resultAddresses.LogEvent();
                return resultAddresses;
            }
            resultAddresses.ReturnValue = new Dictionary<IntPtr, string>();
            switch (searchType)
            {
                case 0:
                    break;
                case 1:
                    searchBytes = Encoding.Unicode.GetBytes(searchString);
                    break;
                case 2:
                    searchBytes = Encoding.ASCII.GetBytes(searchString);
                    break;
                case 3:
                    searchBytes = Encoding.UTF8.GetBytes(searchString);
                    break;
                case 4:
                    searchBytes = Encoding.UTF7.GetBytes(searchString);
                    break;
                case 5:
                    searchBytes = Encoding.UTF32.GetBytes(searchString);
                    break;
                default:
                    resultAddresses.Error = new ERCException("Incorrect searchType value provided, value must be 0-4");
                    resultAddresses.LogEvent();
                    return resultAddresses;
            }

            List<ModuleInfo> modules = new List<ModuleInfo>();
            for (int i = 0; i < ModulesInfo.Count; i++)
            {
                if (includedModules != null)
                {
                    if (includedModules.Contains(ModulesInfo[i].ModuleName) || includedModules.Contains(ModulesInfo[i].ModulePath))
                    {
                        if(excludedModules != null)
                        {
                            if(!excludedModules.Contains(ModulesInfo[i].ModuleName) && !excludedModules.Contains(ModulesInfo[i].ModulePath))
                            {
                                modules.Add(ModulesInfo[i]);
                            }
                        }
                    }
                }
                else
                {
                    modules.Add(ModulesInfo[i]);
                }
            }
            for (int i = 0; i < modules.Count; i++)
            {
                var modulePtrs = modules[i].SearchModule(searchBytes);
                if (modulePtrs.ReturnValue.Count > 0)
                {
                    for (int j = 0; j < modulePtrs.ReturnValue.Count; j++)
                    {
                        if (!resultAddresses.ReturnValue.ContainsKey(modulePtrs.ReturnValue[j]))
                        {
                            resultAddresses.ReturnValue.Add(modulePtrs.ReturnValue[j], modules[i].ModulePath);
                        }
                    }
                }
            }

            if(ptrsToExclude != null)
            {
                resultAddresses.ReturnValue = Utilities.PtrRemover.RemovePointers(ProcessMachineType, resultAddresses.ReturnValue, ptrsToExclude);
            }
            return resultAddresses;
        }
        #endregion

        #region FindNRP
        /// <summary>
        /// Searches process registers and identifies pointers to buffers in memory containing a non repeating pattern. Functionality to identify SEH overwrites not yet implements.
        /// </summary>
        /// <param name="searchType">(Optional) 0 = search term is system default\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
        /// <param name="extended">(Optional) Include additional characters in the pattern (!#$%^ etc) in the to be searched</param>
        /// <returns>Returns a ERC_Result containing a List of RegisterOffset</returns>
        public ErcResult<List<RegisterInfo>> FindNRP(int searchType = 0, bool extended = false)
        {
            ErcResult<List<RegisterInfo>> offsets = new ErcResult<List<RegisterInfo>>(ProcessCore);
            List<string> nrps = new List<string>();
            string pattern = "";
            if(extended == false)
            {
                pattern = File.ReadAllText(ProcessCore.PatternStandardPath);
            }
            else
            {
                pattern = File.ReadAllText(ProcessCore.PatternExtendedPath);
            }

            string nrpHolder = "";
            int counter = 0;
            for(int i = 0; i < pattern.Length; i++)
            {
                if(counter != 2)
                {
                    nrpHolder += pattern[i];
                    counter++;
                }
                else
                {
                    nrpHolder += pattern[i];
                    nrps.Add(nrpHolder);
                    nrpHolder = "";
                    counter = 0;
                }
            }

            for (int i = 0; i < ThreadsInfo.Count; i++)
            {
                var context = ThreadsInfo[i].Get_Context();
                if(context.Error != null)
                {
                    context.LogEvent();
                    offsets.Error = context.Error;
                }
            }

            List<RegisterInfo> registers = new List<RegisterInfo>();
            if(ProcessMachineType == MachineType.I386)
            {
                for (int i = 0; i < ThreadsInfo.Count; i++)
                {
                    RegisterInfo regEdi = new RegisterInfo();
                    regEdi.Register = "EDI";
                    if (ThreadsInfo[i].Context32.Edi > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Edi = ThreadsInfo[i].Context32.Edi - int.MaxValue;
                    }
                    regEdi.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Edi;
                    regEdi.ThreadID = ThreadsInfo[i].ThreadID;
                    regEdi.StringOffset = -1;
                    regEdi.RegisterOffset = -1;
                    registers.Add(regEdi);
                    RegisterInfo regEsi = new RegisterInfo();
                    regEsi.Register = "ESI";
                    if (ThreadsInfo[i].Context32.Esi > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Esi = ThreadsInfo[i].Context32.Esi - int.MaxValue;
                    }
                    regEsi.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Esi;
                    regEsi.ThreadID = ThreadsInfo[i].ThreadID;
                    regEsi.StringOffset = -1;
                    regEsi.RegisterOffset = -1;
                    registers.Add(regEsi);
                    RegisterInfo regEbx = new RegisterInfo();
                    regEbx.Register = "EBX";
                    if (ThreadsInfo[i].Context32.Ebx > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Ebx = ThreadsInfo[i].Context32.Ebx - int.MaxValue;
                    }
                    regEbx.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Ebx;
                    regEbx.ThreadID = ThreadsInfo[i].ThreadID;
                    regEbx.StringOffset = -1;
                    regEbx.RegisterOffset = -1;
                    registers.Add(regEbx);
                    RegisterInfo regEdx = new RegisterInfo();
                    regEdx.Register = "EDX";
                    if (ThreadsInfo[i].Context32.Edx > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Edx = ThreadsInfo[i].Context32.Edx - int.MaxValue;
                    }
                    regEdx.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Edx;
                    regEdx.ThreadID = ThreadsInfo[i].ThreadID;
                    regEdx.StringOffset = -1;
                    regEdx.RegisterOffset = -1;
                    registers.Add(regEdx);
                    RegisterInfo regEcx = new RegisterInfo();
                    regEcx.Register = "ECX";
                    if (ThreadsInfo[i].Context32.Ecx > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Ecx = ThreadsInfo[i].Context32.Ecx - int.MaxValue;
                    }
                    regEcx.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Ecx;
                    regEcx.ThreadID = ThreadsInfo[i].ThreadID;
                    regEcx.StringOffset = -1;
                    regEcx.RegisterOffset = -1;
                    registers.Add(regEcx);
                    RegisterInfo regEax = new RegisterInfo();
                    regEax.Register = "EAX";
                    if(ThreadsInfo[i].Context32.Eax > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Eax = ThreadsInfo[i].Context32.Eax - int.MaxValue;
                    }
                    regEax.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Eax; //Arith problem here
                    regEax.ThreadID = ThreadsInfo[i].ThreadID;
                    regEax.StringOffset = -1;
                    regEax.RegisterOffset = -1;
                    registers.Add(regEax);
                    RegisterInfo regEsp = new RegisterInfo();
                    regEsp.Register = "ESP";
                    if (ThreadsInfo[i].Context32.Esp > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Esp = ThreadsInfo[i].Context32.Esp - int.MaxValue;
                    }
                    regEsp.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Esp;
                    regEsp.ThreadID = ThreadsInfo[i].ThreadID;
                    regEsp.StringOffset = -1;
                    regEsp.RegisterOffset = -1;
                    registers.Add(regEsp);
                    RegisterInfo regEbp = new RegisterInfo();
                    regEbp.Register = "EBP";
                    if (ThreadsInfo[i].Context32.Ebp > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Ebp = ThreadsInfo[i].Context32.Ebp - int.MaxValue;
                    }
                    regEbp.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Ebp;
                    regEbp.ThreadID = ThreadsInfo[i].ThreadID;
                    regEbp.StringOffset = -1;
                    regEbp.RegisterOffset = -1;
                    registers.Add(regEbp);
                    RegisterInfo regEIP = new RegisterInfo();
                    regEIP.Register = "EIP";
                    if (ThreadsInfo[i].Context32.Eip > int.MaxValue)
                    {
                        ThreadsInfo[i].Context32.Eip = ThreadsInfo[i].Context32.Eip - int.MaxValue;
                    }
                    regEIP.RegisterValue = (IntPtr)ThreadsInfo[i].Context32.Eip;
                    regEIP.ThreadID = ThreadsInfo[i].ThreadID;
                    registers.Add(regEIP);
                }

                for (int i = 0; i < registers.Count; i++)
                {
                    for (int j = 0; j < ProcessMemoryBasicInfo32.Count; j++)
                    {
                        ulong regionStart = (ulong)ProcessMemoryBasicInfo32[j].BaseAddress;
                        ulong regionEnd = (ulong)ProcessMemoryBasicInfo32[j].BaseAddress + (ulong)ProcessMemoryBasicInfo32[j].RegionSize;

                        if (registers[i].Register != "EIP" && registers[i].Register != "EBP" &&
                            (ulong)registers[i].RegisterValue > regionStart &&
                            (ulong)registers[i].RegisterValue < regionEnd)
                        {
                            ulong bufferSize = ((ulong)ProcessMemoryBasicInfo32[j].BaseAddress + (ulong)ProcessMemoryBasicInfo32[j].RegionSize) - (ulong)registers[i].RegisterValue;
                            byte[] buffer = new byte[bufferSize];
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, registers[i].RegisterValue, buffer, (int)bufferSize, out bytesRead);

                            string memoryString = "";
                            switch (searchType)
                            {
                                case 0:
                                    memoryString = Encoding.Default.GetString(buffer);
                                    break;
                                case 1:
                                    memoryString = Encoding.Unicode.GetString(buffer);
                                    break;
                                case 2:
                                    memoryString = Encoding.ASCII.GetString(buffer);
                                    break;
                                case 3:
                                    memoryString = Encoding.UTF8.GetString(buffer);
                                    break;
                                case 4:
                                    memoryString = Encoding.UTF7.GetString(buffer);
                                    break;
                                case 5:
                                    memoryString = Encoding.UTF32.GetString(buffer);
                                    break;
                                default:
                                    memoryString = Encoding.Default.GetString(buffer);
                                    break;
                            }
                            int length = -1;
                            for (int k = 0; k < nrps.Count; k++)
                            {
                                if (memoryString.Contains(nrps[k]) && pattern.Contains(nrps[k]))
                                {
                                    if (registers[i].StringOffset == -1)
                                    {
                                        registers[i].StringOffset = pattern.IndexOf(nrps[k]);
                                    }

                                    int index = memoryString.IndexOf(nrps[k]);
                                    if (registers[i].RegisterOffset == -1)
                                    {
                                        registers[i].RegisterOffset = index;
                                    }
                                    
                                    length += 3;
                                }
                            }
                            registers[i].BufferSize = length;
                        }
                        else if (registers[i].Register == "EIP")
                        {
                            string EIPValue = "";
                            switch (searchType)
                            {
                                case 0:
                                    EIPValue = Encoding.Default.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                case 1:
                                    EIPValue = Encoding.Unicode.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                case 2:
                                    EIPValue = Encoding.ASCII.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                case 3:
                                    EIPValue = Encoding.UTF8.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                case 4:
                                    EIPValue = Encoding.UTF7.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                case 5:
                                    EIPValue = Encoding.UTF32.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                                default:
                                    EIPValue = Encoding.Default.GetString(BitConverter.GetBytes((uint)registers[i].RegisterValue));
                                    break;
                            }
                            EIPValue = EIPValue.TrimEnd(null);
                            if (pattern.Contains(EIPValue))
                            {
                                registers[i].StringOffset = pattern.IndexOf(EIPValue);
                            }
                        }
                    }
                    if (Utilities.PatternTools.PatternOffset(Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")), ProcessCore).ReturnValue != "Value not found in pattern.")
                    {
                        if(Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")).Length > 0)
                        {
                            string regHex = Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X"));
                            string regPos = Utilities.PatternTools.PatternOffset(Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")), ProcessCore).ReturnValue;
                            if (!String.IsNullOrEmpty(regPos) && regPos.Any(char.IsDigit))
                            {
                                registers[i].StringOffset = Int32.Parse(Regex.Match(regPos, @"\d+").Value);
                                registers[i].overwritten = true;
                            }
                        }
                    }
                }
                for (int i = 0; i < ThreadsInfo.Count; i++)
                {
                    var pTeb = ThreadsInfo[i].PopulateTEB();
                    if (pTeb.Error == null)
                    {
                        var sehChain = ThreadsInfo[i].BuildSehChain();
                        if (sehChain.Error == null)
                        {
                            if (sehChain.ReturnValue.Count > 0)
                            {
                                for (int j = 0; j < sehChain.ReturnValue.Count; j++)
                                {
                                    string SEHValue = "";
                                    string nSEHValue = "";
                                    switch (searchType)
                                    {
                                        case 0:
                                            SEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 1:
                                            byte[] sehHolder1 = sehChain.ReturnValue[j].Item1;
                                            byte[] sehHolder2 = sehChain.ReturnValue[j].Item2;
                                            if (sehChain.ReturnValue[j].Item1[0] == 0x00)
                                            {
                                                byte[] newSEH = new byte[sehChain.ReturnValue[j].Item1.Length];
                                                Array.Copy(sehChain.ReturnValue[j].Item1, 1, newSEH, 0, sehChain.ReturnValue[j].Item1.Length - 1);
                                                newSEH[newSEH.Length - 1] = 0x00;
                                                sehHolder1 = newSEH;
                                            }
                                            if (sehChain.ReturnValue[j].Item2[0] == 0x00)
                                            {
                                                byte[] newSEH = new byte[sehChain.ReturnValue[j].Item2.Length];
                                                Array.Copy(sehChain.ReturnValue[j].Item2, 1, newSEH, 0, sehChain.ReturnValue[j].Item2.Length - 1);
                                                newSEH[newSEH.Length - 1] = 0x00;
                                                sehHolder2 = newSEH;
                                            }
                                            SEHValue = Encoding.Unicode.GetString(sehHolder1);
                                            nSEHValue = Encoding.Unicode.GetString(sehHolder2);
                                            break;
                                        case 2:
                                            SEHValue = Encoding.ASCII.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.ASCII.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 3:
                                            SEHValue = Encoding.UTF8.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF8.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 4:
                                            SEHValue = Encoding.UTF7.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF7.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 5:
                                            SEHValue = Encoding.UTF32.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF32.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        default:
                                            SEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                    }
                                    char[] sehArray = SEHValue.ToCharArray();
                                    Array.Reverse(sehArray);
                                    string ReversedSEHValue = new string(sehArray);
                                    RegisterInfo SEH = new RegisterInfo();
                                    char[] nsehArray = nSEHValue.ToCharArray();
                                    Array.Reverse(nsehArray);
                                    string nReversedSEHValue = new string(nsehArray);
                                    string combinedSeh = SEHValue + nSEHValue;
                                    string reversedCombinedSeh = ReversedSEHValue + nReversedSEHValue;
                                    if (pattern.Contains(combinedSeh) || pattern.Contains(reversedCombinedSeh))
                                    {
                                        SEH.Register = "SEH" + i.ToString();
                                        if (pattern.Contains(reversedCombinedSeh))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(reversedCombinedSeh);
                                        }
                                        else
                                        {
                                            SEH.StringOffset = pattern.IndexOf(combinedSeh);
                                        }
                                        SEH.ThreadID = ThreadsInfo[i].ThreadID;
                                        SEH.RegisterValue = (IntPtr)BitConverter.ToInt32(sehChain.ReturnValue[j].Item1, 0);
                                        registers.Add(SEH);
                                    }
                                    else if (pattern.Contains(SEHValue) || pattern.Contains(ReversedSEHValue) || pattern.Contains(nSEHValue) || pattern.Contains(nReversedSEHValue))
                                    {
                                        SEH.Register = "SEH" + i.ToString();
                                        if (pattern.Contains(ReversedSEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(ReversedSEHValue);
                                        }
                                        else if(pattern.Contains(SEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(SEHValue);
                                        }
                                        else if(pattern.Contains(nReversedSEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(nReversedSEHValue);
                                        }
                                        else
                                        {
                                            SEH.StringOffset = pattern.IndexOf(nSEHValue);
                                        }
                                        SEH.ThreadID = ThreadsInfo[i].ThreadID;
                                        SEH.RegisterValue = (IntPtr)BitConverter.ToInt32(sehChain.ReturnValue[j].Item1, 0);
                                        registers.Add(SEH);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if(ProcessMachineType == MachineType.x64)
            {
                for (int i = 0; i < ThreadsInfo.Count; i++)
                {
                    RegisterInfo regRax = new RegisterInfo();
                    regRax.Register = "Rax";
                    regRax.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rax;
                    regRax.ThreadID = ThreadsInfo[i].ThreadID;
                    regRax.StringOffset = -1;
                    regRax.RegisterOffset = -1;
                    registers.Add(regRax);
                    RegisterInfo regRbx = new RegisterInfo();
                    regRbx.Register = "RBX";
                    regRbx.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rbx;
                    regRbx.ThreadID = ThreadsInfo[i].ThreadID;
                    regRbx.StringOffset = -1;
                    regRbx.RegisterOffset = -1;
                    registers.Add(regRbx);
                    RegisterInfo regRcx = new RegisterInfo();
                    regRcx.Register = "RCX";
                    regRcx.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rcx;
                    regRcx.ThreadID = ThreadsInfo[i].ThreadID;
                    regRcx.StringOffset = -1;
                    regRcx.RegisterOffset = -1;
                    registers.Add(regRcx);
                    RegisterInfo regRdx = new RegisterInfo();
                    regRdx.Register = "RDX";
                    regRdx.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rdx;
                    regRdx.ThreadID = ThreadsInfo[i].ThreadID;
                    regRdx.StringOffset = -1;
                    regRdx.RegisterOffset = -1;
                    registers.Add(regRdx);
                    RegisterInfo regRsp = new RegisterInfo();
                    regRsp.Register = "RSP";
                    regRsp.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rsp;
                    regRsp.ThreadID = ThreadsInfo[i].ThreadID;
                    regRsp.StringOffset = -1;
                    regRsp.RegisterOffset = -1;
                    registers.Add(regRsp);
                    RegisterInfo regRbp = new RegisterInfo();
                    regRbp.Register = "RBP";
                    regRbp.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rbp;
                    regRbp.ThreadID = ThreadsInfo[i].ThreadID;
                    regRbp.StringOffset = -1;
                    regRbp.RegisterOffset = -1;
                    registers.Add(regRbp);
                    RegisterInfo regRsi = new RegisterInfo();
                    regRsi.Register = "RSI";
                    regRsi.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rsi;
                    regRsi.ThreadID = ThreadsInfo[i].ThreadID;
                    regRsi.StringOffset = -1;
                    regRsi.RegisterOffset = -1;
                    registers.Add(regRsi);
                    RegisterInfo regRdi = new RegisterInfo();
                    regRdi.Register = "RDI";
                    regRdi.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rdi;
                    regRdi.ThreadID = ThreadsInfo[i].ThreadID;
                    regRdi.StringOffset = -1;
                    regRdi.RegisterOffset = -1;
                    registers.Add(regRdi);
                    RegisterInfo regR8 = new RegisterInfo();
                    regR8.Register = "R8";
                    regR8.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R8;
                    regR8.ThreadID = ThreadsInfo[i].ThreadID;
                    regR8.StringOffset = -1;
                    regR8.RegisterOffset = -1;
                    registers.Add(regR8);
                    RegisterInfo regR9 = new RegisterInfo();
                    regR9.Register = "R9";
                    regR9.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R9;
                    regR9.ThreadID = ThreadsInfo[i].ThreadID;
                    regR9.StringOffset = -1;
                    regR9.RegisterOffset = -1;
                    registers.Add(regR9);
                    RegisterInfo regR10 = new RegisterInfo();
                    regR10.Register = "R10";
                    regR10.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R10;
                    regR10.ThreadID = ThreadsInfo[i].ThreadID;
                    regR10.StringOffset = -1;
                    regR10.RegisterOffset = -1;
                    registers.Add(regR10);
                    RegisterInfo regR11 = new RegisterInfo();
                    regR11.Register = "R11";
                    regR11.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R11;
                    regR11.ThreadID = ThreadsInfo[i].ThreadID;
                    regR11.StringOffset = -1;
                    regR11.RegisterOffset = -1;
                    registers.Add(regR11);
                    RegisterInfo regR12 = new RegisterInfo();
                    regR12.Register = "R12";
                    regR12.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R12;
                    regR12.ThreadID = ThreadsInfo[i].ThreadID;
                    regR12.StringOffset = -1;
                    regR12.RegisterOffset = -1;
                    registers.Add(regR12);
                    RegisterInfo regR13 = new RegisterInfo();
                    regR13.Register = "R13";
                    regR13.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R13;
                    regR13.ThreadID = ThreadsInfo[i].ThreadID;
                    regR13.StringOffset = -1;
                    regR13.RegisterOffset = -1;
                    registers.Add(regR13);
                    RegisterInfo regR14 = new RegisterInfo();
                    regR14.Register = "R14";
                    regR14.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R14;
                    regR14.ThreadID = ThreadsInfo[i].ThreadID;
                    regR14.StringOffset = -1;
                    regR14.RegisterOffset = -1;
                    registers.Add(regR14);
                    RegisterInfo regR15 = new RegisterInfo();
                    regR15.Register = "R15";
                    regR15.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.R15;
                    regR15.ThreadID = ThreadsInfo[i].ThreadID;
                    regR15.StringOffset = -1;
                    regR15.RegisterOffset = -1;
                    registers.Add(regR15);
                    RegisterInfo regRIP = new RegisterInfo();
                    regRIP.Register = "RIP";
                    regRIP.RegisterValue = (IntPtr)ThreadsInfo[i].Context64.Rip;
                    regRIP.ThreadID = ThreadsInfo[i].ThreadID;
                    registers.Add(regRIP);
                }

                for (int i = 0; i < registers.Count; i++)
                {
                    for (int j = 0; j < ProcessMemoryBasicInfo64.Count; j++)
                    {
                        ulong regionStart = ProcessMemoryBasicInfo64[j].BaseAddress;
                        ulong regionEnd = ProcessMemoryBasicInfo64[j].BaseAddress + ProcessMemoryBasicInfo64[j].RegionSize;

                        if (registers[i].Register != "RIP" && registers[i].Register != "RBP" &&
                            (ulong)registers[i].RegisterValue > regionStart &&
                            (ulong)registers[i].RegisterValue < regionEnd)
                        {
                            ulong bufferSize = (ProcessMemoryBasicInfo64[j].BaseAddress + ProcessMemoryBasicInfo64[j].RegionSize) - (ulong)registers[i].RegisterValue;
                            byte[] buffer = new byte[bufferSize];
                            int bytesRead = 0;
                            ReadProcessMemory(ProcessHandle, registers[i].RegisterValue, buffer, (int)bufferSize, out bytesRead);

                            string memoryString = "";
                            switch (searchType)
                            {
                                case 0:
                                    memoryString = Encoding.Default.GetString(buffer);
                                    break;
                                case 1:
                                    memoryString = Encoding.Unicode.GetString(buffer);
                                    break;
                                case 2:
                                    memoryString = Encoding.ASCII.GetString(buffer);
                                    break;
                                case 3:
                                    memoryString = Encoding.UTF8.GetString(buffer);
                                    break;
                                case 4:
                                    memoryString = Encoding.UTF7.GetString(buffer);
                                    break;
                                case 5:
                                    memoryString = Encoding.UTF32.GetString(buffer);
                                    break;
                                default:
                                    memoryString = Encoding.Default.GetString(buffer);
                                    break;
                            }
                            int length = 0;
                            for (int k = 0; k < nrps.Count; k++)
                            {
                                if (memoryString.Contains(nrps[k]) && pattern.Contains(nrps[k]))
                                {
                                    if (registers[i].StringOffset == -1)
                                    {
                                        registers[i].StringOffset = pattern.IndexOf(nrps[k]);
                                    }

                                    int index = memoryString.IndexOf(nrps[k]);
                                    if (registers[i].RegisterOffset == -1)
                                    {
                                        registers[i].RegisterOffset = index;
                                    }

                                    length += 3;
                                }
                            }
                            registers[i].BufferSize = length;
                        }
                        else if(registers[i].Register != "RIP")
                        {
                            string RIPValue = "";
                            switch (searchType)
                            {
                                case 0:
                                    RIPValue = Encoding.Default.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                case 1:
                                    RIPValue = Encoding.Unicode.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                case 2:
                                    RIPValue = Encoding.ASCII.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                case 3:
                                    RIPValue = Encoding.UTF8.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                case 4:
                                    RIPValue = Encoding.UTF7.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                case 5:
                                    RIPValue = Encoding.UTF32.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                                default:
                                    RIPValue = Encoding.Default.GetString(BitConverter.GetBytes((ulong)registers[i].RegisterValue));
                                    break;
                            }
                            char[] ripArray = RIPValue.ToCharArray();
                            Array.Reverse(ripArray);
                            RIPValue = new string(ripArray);
                            if (pattern.Contains(RIPValue))
                            {
                                registers[i].StringOffset = pattern.IndexOf(RIPValue);
                            }
                        }
                    }
                    if (Utilities.PatternTools.PatternOffset(Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")), ProcessCore).ReturnValue != "Value not found in pattern.")
                    {
                        if (Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")).Length > 0)
                        {
                            string regHex = Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X"));
                            string regPos = Utilities.PatternTools.PatternOffset(Utilities.Convert.HexToAscii(registers[i].RegisterValue.ToString("X")), ProcessCore).ReturnValue;
                            if (!String.IsNullOrEmpty(regPos) && regPos.Any(char.IsDigit))
                            {
                                registers[i].StringOffset = Int32.Parse(Regex.Match(regPos, @"\d+").Value);
                                registers[i].overwritten = true;
                            }
                        }
                    }
                }
                for(int i = 0; i < ThreadsInfo.Count; i++)
                {
                    var pTeb = ThreadsInfo[i].PopulateTEB();
                    if(pTeb.Error == null)
                    {
                        var sehChain = ThreadsInfo[i].BuildSehChain();
                        if(sehChain.Error == null)
                        {
                            if(sehChain.ReturnValue.Count > 0)
                            {
                                for(int j = 0; j < sehChain.ReturnValue.Count; j++)
                                {
                                    string SEHValue = "";
                                    string nSEHValue = "";
                                    switch (searchType)
                                    {
                                        case 0:
                                            SEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 1:
                                            byte[] sehHolder1 = sehChain.ReturnValue[j].Item1;
                                            byte[] sehHolder2 = sehChain.ReturnValue[j].Item2;
                                            if (sehChain.ReturnValue[j].Item1[0] == 0x00)
                                            {
                                                byte[] newSEH = new byte[sehChain.ReturnValue[j].Item1.Length];
                                                Array.Copy(sehChain.ReturnValue[j].Item1, 1, newSEH, 0, sehChain.ReturnValue[j].Item1.Length - 1);
                                                newSEH[newSEH.Length - 1] = 0x00;
                                                sehHolder1 = newSEH;
                                            }
                                            if (sehChain.ReturnValue[j].Item2[0] == 0x00)
                                            {
                                                byte[] newSEH = new byte[sehChain.ReturnValue[j].Item2.Length];
                                                Array.Copy(sehChain.ReturnValue[j].Item2, 1, newSEH, 0, sehChain.ReturnValue[j].Item2.Length - 1);
                                                newSEH[newSEH.Length - 1] = 0x00;
                                                sehHolder2 = newSEH;
                                            }
                                            SEHValue = Encoding.Unicode.GetString(sehHolder1);
                                            nSEHValue = Encoding.Unicode.GetString(sehHolder2);
                                            break;
                                        case 2:
                                            SEHValue = Encoding.ASCII.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.ASCII.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 3:
                                            SEHValue = Encoding.UTF8.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF8.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 4:
                                            SEHValue = Encoding.UTF7.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF7.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        case 5:
                                            SEHValue = Encoding.UTF32.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.UTF32.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                        default:
                                            SEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item1);
                                            nSEHValue = Encoding.Default.GetString(sehChain.ReturnValue[j].Item2);
                                            break;
                                    }
                                    char[] sehArray = SEHValue.ToCharArray();
                                    Array.Reverse(sehArray);
                                    string ReversedSEHValue = new string(sehArray);
                                    RegisterInfo SEH = new RegisterInfo();
                                    char[] nsehArray = nSEHValue.ToCharArray();
                                    Array.Reverse(nsehArray);
                                    string nReversedSEHValue = new string(nsehArray);
                                    string combinedSeh = SEHValue + nSEHValue;
                                    string reversedCombinedSeh = ReversedSEHValue + nReversedSEHValue;
                                    if (pattern.Contains(combinedSeh) || pattern.Contains(reversedCombinedSeh))
                                    {
                                        SEH.Register = "SEH" + i.ToString();
                                        if (pattern.Contains(reversedCombinedSeh))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(reversedCombinedSeh);
                                        }
                                        else
                                        {
                                            SEH.StringOffset = pattern.IndexOf(combinedSeh);
                                        }
                                        SEH.ThreadID = ThreadsInfo[i].ThreadID;
                                        SEH.RegisterValue = (IntPtr)BitConverter.ToInt64(sehChain.ReturnValue[j].Item1, 0);
                                        registers.Add(SEH);
                                    }
                                    else if (pattern.Contains(SEHValue) || pattern.Contains(ReversedSEHValue) || pattern.Contains(nSEHValue) || pattern.Contains(nReversedSEHValue))
                                    {
                                        SEH.Register = "SEH" + i.ToString();
                                        if (pattern.Contains(ReversedSEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(ReversedSEHValue);
                                        }
                                        else if (pattern.Contains(SEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(SEHValue);
                                        }
                                        else if (pattern.Contains(nReversedSEHValue))
                                        {
                                            SEH.StringOffset = pattern.IndexOf(nReversedSEHValue);
                                        }
                                        else
                                        {
                                            SEH.StringOffset = pattern.IndexOf(nSEHValue);
                                        }
                                        SEH.ThreadID = ThreadsInfo[i].ThreadID;
                                        SEH.RegisterValue = (IntPtr)BitConverter.ToInt64(sehChain.ReturnValue[j].Item1, 0);
                                        registers.Add(SEH);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                offsets.Error = new ERCException("Critical Error: Process returned incompatible machine type.");
                offsets.LogEvent();
            }
            offsets.ReturnValue = registers;
            return offsets;
        }
        #endregion

        #endregion

        #region BoyerMoore Search ByteArrays
        /// <summary>
        /// Private function, BoyerMoore string search algorithm modified to search for sets of bytes in a byte array. 
        /// Takes two byte arrays, array to be searched and array to search for.
        /// </summary>
        private static int ByteIndexOf(byte[] haystack, byte[] needle)
        {
            if (needle.Length == 0)
            {
                return 0;
            }

            int[] charTable = MakeCharTable(needle);
            int[] offsetTable = MakeOffsetTable(needle);
            for (int i = needle.Length - 1; i < haystack.Length;)
            {
                int j;
                for (j = needle.Length - 1; needle[j] == haystack[i]; --i, --j)
                {
                    if (j == 0)
                    {
                        return i;
                    }
                }

                i += Math.Max(offsetTable[needle.Length - 1 - j], charTable[haystack[i]]);
            }
            return -1;
        }

        private static int[] MakeCharTable(byte[] needle)
        {
            const int ALPHABET_SIZE = 256;
            int[] table = new int[ALPHABET_SIZE];
            for (int i = 0; i < table.Length; ++i)
            {
                table[i] = needle.Length;
            }

            for (int i = 0; i < needle.Length - 1; ++i)
            {
                table[needle[i]] = needle.Length - 1 - i;
            }

            return table;
        }

        private static int[] MakeOffsetTable(byte[] needle)
        {
            int[] table = new int[needle.Length];
            int lastPrefixPosition = needle.Length;
            for (int i = needle.Length - 1; i >= 0; --i)
            {
                if (IsPrefix(needle, i + 1))
                {
                    lastPrefixPosition = i + 1;
                }

                table[needle.Length - 1 - i] = lastPrefixPosition - i + needle.Length - 1;
            }

            for (int i = 0; i < needle.Length - 1; ++i)
            {
                int slen = SuffixLength(needle, i);
                table[slen] = needle.Length - 1 - i + slen;
            }

            return table;
        }

        private static bool IsPrefix(byte[] needle, int p)
        {
            for (int i = p, j = 0; i < needle.Length; ++i, ++j)
            {
                if (needle[i] != needle[j])
                {
                    return false;
                }
            }

            return true;
        }

        private static int SuffixLength(byte[] needle, int p)
        {
            int len = 0;
            for (int i = p, j = needle.Length - 1; i >= 0 && needle[i] == needle[j]; --i, --j)
            {
                len += 1;
            }

            return len;
        }

        #endregion

        #region CreateExcludesList
        /// <summary>
        /// Creates a list of modules to exclude from a search of memory.
        /// </summary>
        /// <returns>Returns an ErcResult containing a list of stringss</returns>
        public List<string> CreateExcludesList(bool aslr = false, bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false)
        {
            List<string> excludedModules = new List<string>();
            for(int i = 0; i < ModulesInfo.Count; i++)
            {
                bool add = false;
                if(aslr == true && ModulesInfo[i].ModuleASLR == true)
                {
                    add = true;
                }
                if (safeseh == true && ModulesInfo[i].ModuleSafeSEH == true)
                {
                    add = true;
                }
                if (rebase == true && ModulesInfo[i].ModuleRebase == true)
                {
                    add = true;
                }
                if (nxcompat == true && ModulesInfo[i].ModuleNXCompat == true)
                {
                    add = true;
                }
                if (osdll == true && ModulesInfo[i].ModuleOsDll == true)
                {
                    add = true;
                }
                if(add == true)
                {
                    excludedModules.Add(ModulesInfo[i].ModulePath);
                }
            }
            return excludedModules;
        }
        #endregion

        #region Accessors

        #region ToString
        /// <summary>
        /// Override of the ToString method. Returns information about the process in a pleasantly formatted string
        /// </summary>
        /// <returns>A string</returns>
        public override string ToString()
        {
            string ret = "";
            ret += "Process Name = " + ProcessName + Environment.NewLine;
            ret += "Process Description = " + ProcessDescription + Environment.NewLine;
            ret += "Process Path = " + ProcessPath + Environment.NewLine;
            ret += "Process ID = " + ProcessID + Environment.NewLine;
            if(ProcessMachineType == MachineType.I386)
            {
                ret += "Process Handle = 0x" + ProcessHandle.ToString("X8") + Environment.NewLine;
            }
            else
            {
                ret += "Process Handle = 0x" + ProcessHandle.ToString("X16") + Environment.NewLine;
            }
            ret += "Process Machine Type = " + ProcessMachineType.ToString() + Environment.NewLine;

            return ret;
        }
        #endregion

        #region Get Modules Handles
        /// <summary>
        /// Returns a list of module handles associated with the process.
        /// </summary>
        /// <returns>Returns a dictionary containing the handle and path of each module</returns>
        public ErcResult<Dictionary<string, IntPtr>> GetModuleHandles()
        {
            ErcResult<Dictionary<string, IntPtr>> ret = new ErcResult<Dictionary<string, IntPtr>>(ProcessCore);
            if (ProcessModuleHandles.Count > 0)
            {
                ret.ReturnValue = ProcessModuleHandles;
                return ret;
            }
            else
            {
                ret.Error = new ERCException("Error: An unknown eroor has occured whilst populating the modules list for this process. Check the error log for more detailed information.");
                return ret;
            }
        }
        #endregion

        #region Get Module Information
        /// <summary>
        /// Gets the list of ModuleInfo objects associated with the current process.
        /// </summary>
        /// <returns>Returns an ErcResult containing a list of ModuleInfo objects</returns>
        public ErcResult<List<ModuleInfo>> GetProcessModuleInformation()
        {
            ErcResult<List<ModuleInfo>> ret = new ErcResult<List<ModuleInfo>>(ProcessCore);
            if(ModulesInfo.Count > 0)
            {
                ret.ReturnValue = ModulesInfo;
                return ret;
            }
            else
            {
                ret.Error = new ERCException("Error: An unknown eroor has occured whilst populating the modules list for this process. Check the error log for more detailed information.");
                return ret;
            }
        }
        #endregion

        #region Get Thread Information
        /// <summary>
        /// Gets the list of ThreadInfo objects associated with the current process.
        /// </summary>
        /// <returns>Returns an ErcResult containing a list of ThreadInfo objects</returns>
        public ErcResult<List<ThreadInfo>> GetProcessThreadInformation()
        {
            ErcResult<List<ThreadInfo>> ret = new ErcResult<List<ThreadInfo>>(ProcessCore);
            if (ThreadsInfo.Count > 0)
            {
                ret.ReturnValue = ThreadsInfo;
                return ret;
            }
            else
            {
                ret.Error = new ERCException("Error: An unknown eroor has occured whilst populating the threads list for this process. Check the error log for more detailed information.");
                return ret;
            }
        }
        #endregion

        #region Dump Memory Region
        /// <summary>
        /// Reads process memory from a specific address for a set number of bytes. 
        /// </summary>
        /// <param name="startAddress">The address to start reading from.</param>
        /// <param name="length">Number of bytes to read.</param>
        /// <returns>Returns a bytes array containing the specified contents of process memory.</returns>
        public ErcResult<byte[]> DumpMemoryRegion(IntPtr startAddress, int length)
        {
            ErcResult<byte[]> result = new ErcResult<byte[]>(ProcessCore);
            byte[] bytes = new byte[length];
            try
            {
                int retValue = ErcCore.ReadProcessMemory(ProcessHandle, startAddress, bytes, length, out int bytesRead);
                if (retValue == 0)
                {
                    ERCException ex = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    result.ReturnValue = bytes;
                    throw ex;
                }
                else
                {
                    result.ReturnValue = bytes;
                }
            }
            catch(Exception e)
            {
                result.Error = e;
            }
            
            return result;
        }
        #endregion

        #endregion
    }
}



================================================
File: ERC/ERC/PtrRemover.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;

namespace ERC.Utilities
{
    /// <summary>
    /// Contains methods for identifying and removing pointers to unwanted data.
    /// </summary>
    public static class PtrRemover
    {
        /// <summary>
        /// Removes pointers which contain unwanted bytes. 
        /// </summary>
        /// <param name="mt">MachineType architecture of the associated process.</param>
        /// <param name="srcList">The list from which to remove the pointers</param>
        /// <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
        /// <returns>Returns a ErcResult of List IntPtr</returns>
        public static List<IntPtr> RemovePointers(MachineType mt, List<IntPtr> srcList, byte[] bytes)
        {
            if (bytes == null || bytes.Length == 0)
            {
                return srcList;
            }

            List<string> outText = new List<string>();
            bool nullByte = false;
            foreach (byte b in bytes)
            {
                if (b == 0x00)
                {
                    nullByte = true;
                }
            }
 
            for (int i = 0; i < srcList.Count; i++)
            {
                bool removed = false;
                var ptr = BitConverter.GetBytes((int)srcList[i]);
                for(int j = 0; j < ptr.Length; j++)
                {
                    for(int k = 0; k < bytes.Length; k++)
                    {
                        if (bytes[k] == ptr[j] && removed == false)
                        {
                            srcList.RemoveAt(i);
                            removed = true;
                            i--;
                            continue;
                        }
                        if(mt == MachineType.I386 && removed == false && nullByte == true)
                        {
                            if(srcList[i].ToString("X8").Length < 7)
                            {
                                srcList.RemoveAt(i);
                                removed = true;
                                i--;
                                continue;
                            }
                        }
                        else if(mt == MachineType.x64 && removed == false && nullByte == true)
                        {
                            if (srcList[i].ToString("X").Length < 15)
                            {
                                srcList.RemoveAt(i);
                                removed = true;
                                i--;
                                continue;
                            }
                        }
                    }
                }
            }

            return srcList;
        }

        /// <summary>
        /// Removes pointers which contain unwanted bytes. 
        /// </summary>
        /// <param name="mt">MachineType architecture of the associated process.</param>
        /// <param name="srcList">The list from which to remove the pointers</param>
        /// <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
        /// <returns>Returns a ErcResult of Dictionary IntPtr, String</returns>
        public static Dictionary<IntPtr, string> RemovePointers(MachineType mt, Dictionary<IntPtr, string> srcList, byte[] bytes)
        {
            if(bytes == null || bytes.Length == 0)
            {
                return srcList;
            }

            bool nullByte = false;
            foreach(byte b in bytes)
            {
                if(b == 0x00)
                {
                    nullByte = true;
                }
            }

            for (int i = 0; i < srcList.Count; i++)
            {
                bool removed = false;
                var ptr = BitConverter.GetBytes((long)srcList.ElementAt(i).Key);
                for (int j = 0; j < ptr.Length; j++)
                {
                    for (int k = 0; k < bytes.Length; k++)
                    {
                        if (bytes[k] == ptr[j] && removed == false)
                        {
                            srcList.Remove(srcList.ElementAt(i).Key);
                            removed = true;
                            i--;
                            continue;
                        }
                        if (mt == MachineType.I386 && removed == false && nullByte == true)
                        {
                            if (srcList.ElementAt(i).Key.ToString("X").Length < 7)
                            {
                                srcList.Remove(srcList.ElementAt(i).Key);
                                removed = true;
                                i--;
                                continue;
                            }
                        }
                        else if (mt == MachineType.x64 && removed == false && nullByte == true)
                        {
                            if (srcList.ElementAt(i).Key.ToString("X").Length < 15)
                            {
                                srcList.Remove(srcList.ElementAt(i).Key);
                                removed = true;
                                i--;
                                continue;
                            }
                        }
                    }
                }
            }
            return srcList;
        }

        #region Remove Pointers Protection
        /// <summary>
        /// Removes pointers from a dictionary when pointers do not have the protection level specified.
        /// </summary>
        /// <param name="info">ProcessInfo object of the associated process.</param>
        /// <param name="srcList">List of pointers.</param>
        /// <param name="protection">Specified protection level of pointers.</param>
        /// <returns>Returns a Dictionary of Intptr, string</returns>
        public static List<IntPtr> RemovePointersProtection(ProcessInfo info, List<IntPtr> srcList, string protection = "exec")
        {
            if (protection == null)
            {
                return srcList;
            }

            string[] elements = protection.Split(',');
            if(elements.Length > 3)
            {
                throw new ERCException("Supplied protection string is not supported.");
            }

            bool read = false, write = false, exec = false, all = false;
            foreach(string s in elements)
            {
                if (s.Contains("read"))
                {
                    read = true;
                }
                else if (s.Contains("write"))
                {
                    write = true;
                }
                else if (s.Contains("exec"))
                {
                    exec = true;
                }
                else if (s.Contains("all"))
                {
                    all = true;
                }
            }

            protection = "";
            if(read == true)
            {
                protection += "read";
            }
            if(write == true)
            {
                if(protection.Length > 0)
                {
                    protection += ",";
                }
                protection += "write";
            }
            if (exec == true)
            {
                if (protection.Length > 0)
                {
                    protection += ",";
                }
                protection += "exec";
            }
            if(all == true)
            {
                protection = "all";
            }

            uint[] acceptedProtectionValues = new uint[0];
            switch (protection.ToLower())
            {
                case "all":
                    return srcList;
                case "read":
                    acceptedProtectionValues = new uint[4];
                    acceptedProtectionValues[0] = 0x02;
                    acceptedProtectionValues[1] = 0x04;
                    acceptedProtectionValues[2] = 0x20;
                    acceptedProtectionValues[3] = 0x40;
                    break;
                case "write":
                    acceptedProtectionValues = new uint[4];
                    acceptedProtectionValues[0] = 0x04;
                    acceptedProtectionValues[1] = 0x08;
                    acceptedProtectionValues[2] = 0x40;
                    acceptedProtectionValues[3] = 0x80;
                    break;
                case "exec":
                    acceptedProtectionValues = new uint[4];
                    acceptedProtectionValues[0] = 0x10;
                    acceptedProtectionValues[1] = 0x20;
                    acceptedProtectionValues[2] = 0x40;
                    acceptedProtectionValues[3] = 0x80;
                    break;
                case "read,write":
                    acceptedProtectionValues = new uint[6];
                    acceptedProtectionValues[0] = 0x02;
                    acceptedProtectionValues[1] = 0x04;
                    acceptedProtectionValues[2] = 0x08;
                    acceptedProtectionValues[3] = 0x20;
                    acceptedProtectionValues[4] = 0x40;
                    acceptedProtectionValues[5] = 0x80;
                    break;
                case "read,exec":
                    acceptedProtectionValues = new uint[6];
                    acceptedProtectionValues[0] = 0x02;
                    acceptedProtectionValues[1] = 0x04;
                    acceptedProtectionValues[2] = 0x10;
                    acceptedProtectionValues[3] = 0x20;
                    acceptedProtectionValues[4] = 0x40;
                    acceptedProtectionValues[5] = 0x80;
                    break;
                case "write,exec":
                    acceptedProtectionValues = new uint[6];
                    acceptedProtectionValues[0] = 0x04;
                    acceptedProtectionValues[1] = 0x08;
                    acceptedProtectionValues[2] = 0x10;
                    acceptedProtectionValues[3] = 0x20;
                    acceptedProtectionValues[4] = 0x40;
                    acceptedProtectionValues[5] = 0x80;
                    break;
                case "read,write,exec":
                    acceptedProtectionValues = new uint[7];
                    acceptedProtectionValues[0] = 0x02;
                    acceptedProtectionValues[1] = 0x04;
                    acceptedProtectionValues[2] = 0x08;
                    acceptedProtectionValues[3] = 0x10;
                    acceptedProtectionValues[4] = 0x20;
                    acceptedProtectionValues[5] = 0x40;
                    acceptedProtectionValues[6] = 0x80;
                    break;
                default:
                    throw new ERCException("Supplied protection string is not supported.");
            }

            for(int i = 0; i < srcList.Count; i++)
            {
                IntPtr ptr = srcList[i];
                if (info.ProcessMachineType == MachineType.I386)
                {
                    for (int j = 0; j < info.ProcessMemoryBasicInfo32.Count; j++)
                    {
                        ulong topAddress = (ulong)info.ProcessMemoryBasicInfo32[j].BaseAddress + (ulong)info.ProcessMemoryBasicInfo32[j].RegionSize;
                        if ((ulong)srcList[i] > (ulong)info.ProcessMemoryBasicInfo32[j].BaseAddress && (ulong)srcList[i] < topAddress)
                        {
                            if (!acceptedProtectionValues.Contains(info.ProcessMemoryBasicInfo32[j].AllocationProtect) && srcList.Contains(ptr))
                            {
                                srcList.Remove(ptr);
                            }
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < info.ProcessMemoryBasicInfo64.Count; j++)
                    {
                        ulong topAddress = (ulong)info.ProcessMemoryBasicInfo64[j].BaseAddress + (ulong)info.ProcessMemoryBasicInfo64[j].RegionSize;
                        if ((ulong)srcList[i] > (ulong)info.ProcessMemoryBasicInfo64[j].BaseAddress && (ulong)srcList[i] < topAddress)
                        {
                            if (!acceptedProtectionValues.Contains(info.ProcessMemoryBasicInfo64[j].AllocationProtect) && srcList.Contains(ptr))
                            {
                                srcList.Remove(ptr);
                            }
                        }
                    }
                }
            }
            return srcList;
        }

        /// <summary>
        /// Removes pointers from a dictionary when pointers do not have the protection level specified.
        /// </summary>
        /// <param name="info">ProcessInfo object of the associated process.</param>
        /// <param name="srcList">List of pointers.</param>
        /// <param name="protection">Specified protection level of pointers.</param>
        /// <returns>Returns a Dictionary of Intptr, string</returns>
        public static List<IntPtr> RemovePointersProtection(ProcessInfo info, List<IntPtr> srcList, uint protection)
        {
            for (int i = 0; i < srcList.Count; i++)
            {
                IntPtr ptr = srcList[i];
                if (info.ProcessMachineType == MachineType.I386)
                {
                    for (int j = 0; j < info.ProcessMemoryBasicInfo32.Count; j++)
                    {
                        ulong topAddress = (ulong)info.ProcessMemoryBasicInfo32[j].BaseAddress + (ulong)info.ProcessMemoryBasicInfo32[j].RegionSize;
                        if ((ulong)srcList[i] > (ulong)info.ProcessMemoryBasicInfo32[j].BaseAddress && (ulong)srcList[i] < topAddress)
                        {
                            if (protection != info.ProcessMemoryBasicInfo32[j].AllocationProtect && srcList.Contains(ptr))
                            {
                                srcList.Remove(ptr);
                                i--;
                            }
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < info.ProcessMemoryBasicInfo64.Count; j++)
                    {
                        ulong topAddress = (ulong)info.ProcessMemoryBasicInfo64[j].BaseAddress + (ulong)info.ProcessMemoryBasicInfo64[j].RegionSize;
                        if ((ulong)srcList[i] > (ulong)info.ProcessMemoryBasicInfo64[j].BaseAddress && (ulong)srcList[i] < topAddress)
                        {
                            if (protection != info.ProcessMemoryBasicInfo64[j].AllocationProtect && srcList.Contains(ptr))
                            {
                                srcList.Remove(ptr);
                                i--;
                            }
                        }
                    }
                }
            }
            return srcList;
        }
    }
    #endregion
}



================================================
File: ERC/ERC/RopChainGenerator32.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using ERC;

namespace ERC.Utilities
{
    /// <summary> Attempts to create Rop chains from 32 bit processes. </summary>
    public class RopChainGenerator32
    {
        #region Class Variables
        private const int MEM_COMMIT = 0x1000;

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> VirtualAllocChain = new List <Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> HeapCreateChain = new List<Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> VirtualProtectChain = new List<Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> WriteProcessMemoryChain = new List<Tuple<byte[], string>>();

        RopMethod Methods;
        Dictionary<string, IntPtr> ApiAddresses = new Dictionary<string, IntPtr>();
        List<IntPtr> RopNops = new List<IntPtr>();
        List<byte[]> opcodes32 = new List<byte[]>();
        internal X86Lists x86Opcodes;
        internal X86Lists usableX86Opcodes;
        internal ProcessInfo RcgInfo;
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="_info">The ProcessInfo object.</param
        /// <param name="methods">Integer identifying which Rop mehtods to use</param>
        public RopChainGenerator32(ProcessInfo _info)
        {
            if (_info.ProcessMachineType == MachineType.I386)
            {
                x86Opcodes = new X86Lists();
            }
            else
            {
                throw new ArgumentException("Fatal Error: Unsupported processor version.");
            }

            RcgInfo = _info;
            //Populate 32 bit list
            byte[] pushEax = new byte[] { 0x50 };
            byte[] pushEbx = new byte[] { 0x53 };
            byte[] pushEcx = new byte[] { 0x51 };
            byte[] pushEdx = new byte[] { 0x52 };
            byte[] pushEsp = new byte[] { 0x54 };
            byte[] pushEbp = new byte[] { 0x55 };
            byte[] pushEsi = new byte[] { 0x56 };
            byte[] pushEdi = new byte[] { 0x57 };
            byte[] popEax = new byte[] { 0x58 };
            byte[] popEbx = new byte[] { 0x5B };
            byte[] popEcx = new byte[] { 0x59 };
            byte[] popEdx = new byte[] { 0x5A };
            byte[] popEsp = new byte[] { 0x5C };
            byte[] popEbp = new byte[] { 0x5D };
            byte[] popEsi = new byte[] { 0x5E };
            byte[] popEdi = new byte[] { 0x5F };
            byte[] pushad = new byte[] { 0x60 };
            byte[] incEax = new byte[] { 0X40 };
            byte[] incEbx = new byte[] { 0X43 };
            byte[] incEcx = new byte[] { 0X41 };
            byte[] incEdx = new byte[] { 0X42 };
            byte[] incEbp = new byte[] { 0X45 };
            byte[] incEsp = new byte[] { 0X44 };
            byte[] incEsi = new byte[] { 0X46 };
            byte[] incEdi = new byte[] { 0X47 };
            byte[] decEax = new byte[] { 0X48 };
            byte[] decEbx = new byte[] { 0X4B };
            byte[] decEcx = new byte[] { 0X49 };
            byte[] decEdx = new byte[] { 0X4A };
            byte[] decEbp = new byte[] { 0X4D };
            byte[] decEsp = new byte[] { 0X4C };
            byte[] decEsi = new byte[] { 0X4E };
            byte[] decEdi = new byte[] { 0X4F };
            byte[] jmpEsp = new byte[] { 0xFF, 0xE4 };
            byte[] callEsp = new byte[] { 0xFF, 0xD4 };
            byte[] xorEax = new byte[] { 0x31, 0xC0 };
            byte[] xorEbx = new byte[] { 0x31, 0xD8 };
            byte[] xorEcx = new byte[] { 0x31, 0xC9 };
            byte[] xorEdx = new byte[] { 0x31, 0xD2 };
            byte[] xorEsi = new byte[] { 0x31, 0xF6 };
            byte[] xorEdi = new byte[] { 0x31, 0xFF };
            byte[] add = new byte[] { 0x03 };
            byte[] sub = new byte[] { 0x2B };
            byte[] mov = new byte[] { 0x8B };
            byte[] and = new byte[] { 0x83 };

            opcodes32.Add(pushEax);
            opcodes32.Add(pushEbx);
            opcodes32.Add(pushEcx);
            opcodes32.Add(pushEdx);
            opcodes32.Add(pushEsp);
            opcodes32.Add(pushEbp);
            opcodes32.Add(pushEsi);
            opcodes32.Add(pushEdi);
            opcodes32.Add(popEax);
            opcodes32.Add(popEbx);
            opcodes32.Add(popEcx);
            opcodes32.Add(popEdx);
            opcodes32.Add(popEsp);
            opcodes32.Add(popEbp);
            opcodes32.Add(popEsi);
            opcodes32.Add(popEdi);
            opcodes32.Add(pushad);
            opcodes32.Add(incEax);
            opcodes32.Add(incEbx);
            opcodes32.Add(incEcx);
            opcodes32.Add(incEdx);
            opcodes32.Add(incEbp);
            opcodes32.Add(incEsp);
            opcodes32.Add(incEsi);
            opcodes32.Add(incEdi);
            opcodes32.Add(decEax);
            opcodes32.Add(decEbx);
            opcodes32.Add(decEcx);
            opcodes32.Add(decEdx);
            opcodes32.Add(decEbp);
            opcodes32.Add(decEsp);
            opcodes32.Add(decEsi);
            opcodes32.Add(decEdi);
            opcodes32.Add(jmpEsp);
            opcodes32.Add(callEsp);
            opcodes32.Add(xorEax);
            opcodes32.Add(xorEbx);
            opcodes32.Add(xorEcx);
            opcodes32.Add(xorEdx);
            opcodes32.Add(xorEsi);
            opcodes32.Add(xorEdi);
            opcodes32.Add(add);
            opcodes32.Add(sub);
            opcodes32.Add(mov);
            opcodes32.Add(and);
        }
        #endregion

        #region GenerateRopGadgets32
        /// <summary>
        /// Creates a list of ROP gadgets for a specific process.
        /// </summary>
        /// <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopGadgets32(byte[] ptrsToExclude = null, List<string> excludes = null)
        {
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x86Opcodes = new X86Lists();

            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
                return failed;
            }

            var ret2 = GetRopNops(excludes);
            if (ret1.Error != null && RopNops.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
                return failed;
            }

            var ret3 = PopulateOpcodes(RcgInfo);
            optimiseLists(RcgInfo);

            if(ptrsToExclude != null)
            {
                usableX86Opcodes.pushEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEax, ptrsToExclude);
                usableX86Opcodes.pushEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEbx, ptrsToExclude);
                usableX86Opcodes.pushEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEcx, ptrsToExclude);
                usableX86Opcodes.pushEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEdx, ptrsToExclude);
                usableX86Opcodes.pushEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEsp, ptrsToExclude);
                usableX86Opcodes.pushEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEbp, ptrsToExclude);
                usableX86Opcodes.pushEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEsi, ptrsToExclude);
                usableX86Opcodes.pushEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEdi, ptrsToExclude);
                usableX86Opcodes.jmpEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.jmpEsp, ptrsToExclude);
                usableX86Opcodes.callEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.callEsp, ptrsToExclude);
                usableX86Opcodes.xorEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEax, ptrsToExclude);
                usableX86Opcodes.xorEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEbx, ptrsToExclude);
                usableX86Opcodes.xorEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEcx, ptrsToExclude);
                usableX86Opcodes.xorEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEdx, ptrsToExclude);
                usableX86Opcodes.xorEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEsi, ptrsToExclude);
                usableX86Opcodes.xorEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEdi, ptrsToExclude);
                usableX86Opcodes.popEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEax, ptrsToExclude);
                usableX86Opcodes.popEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEbx, ptrsToExclude);
                usableX86Opcodes.popEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEcx, ptrsToExclude);
                usableX86Opcodes.popEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEdx, ptrsToExclude);
                usableX86Opcodes.popEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEsp, ptrsToExclude);
                usableX86Opcodes.popEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEbp, ptrsToExclude);
                usableX86Opcodes.popEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEsi, ptrsToExclude);
                usableX86Opcodes.popEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEdi, ptrsToExclude);
                usableX86Opcodes.pushad = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushad, ptrsToExclude);
                usableX86Opcodes.incEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEax, ptrsToExclude);
                usableX86Opcodes.incEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEbx, ptrsToExclude);
                usableX86Opcodes.incEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEcx, ptrsToExclude);
                usableX86Opcodes.incEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEdx, ptrsToExclude);
                usableX86Opcodes.incEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEbp, ptrsToExclude);
                usableX86Opcodes.incEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEsp, ptrsToExclude);
                usableX86Opcodes.incEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEsi, ptrsToExclude);
                usableX86Opcodes.incEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEdi, ptrsToExclude);
                usableX86Opcodes.decEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEax, ptrsToExclude);
                usableX86Opcodes.decEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEbx, ptrsToExclude);
                usableX86Opcodes.decEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEcx, ptrsToExclude);
                usableX86Opcodes.decEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEdx, ptrsToExclude);
                usableX86Opcodes.decEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEbp, ptrsToExclude);
                usableX86Opcodes.decEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEsp, ptrsToExclude);
                usableX86Opcodes.decEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEsi, ptrsToExclude);
                usableX86Opcodes.decEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEdi, ptrsToExclude);
                usableX86Opcodes.add = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.add, ptrsToExclude);
                usableX86Opcodes.sub = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.sub, ptrsToExclude);
                usableX86Opcodes.mov = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.mov, ptrsToExclude);
                usableX86Opcodes.and = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.and, ptrsToExclude);
            }

            DisplayOutput.RopChainGadgets32(this, true);
            return RopChain;
        }
        #endregion

        #region GenerateRopChain32
        /// <summary>
        /// Creates a RopChain for a specific process.
        /// </summary>
        /// <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
        /// <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopChain32(byte[] ptrsToExclude, byte[] startAddress = null, List<string> excludes = null, RopMethod methods = RopMethod.All)
        {
            Methods = methods;
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x86Opcodes = new X86Lists();

            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
                return failed;
            }

            if(excludes != null)
            {
                var ret2 = GetRopNops(excludes);
                if (ret1.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret1.Error;
                    return failed;
                }
            }
            else
            {
                var ret2 = GetRopNops();
                if (ret1.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret1.Error;
                    return failed;
                }
            }

            var ret3 = PopulateOpcodes(RcgInfo);
            optimiseLists(RcgInfo);

            usableX86Opcodes.pushEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEax, ptrsToExclude);
            usableX86Opcodes.pushEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEbx, ptrsToExclude);
            usableX86Opcodes.pushEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEcx, ptrsToExclude);
            usableX86Opcodes.pushEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEdx, ptrsToExclude);
            usableX86Opcodes.pushEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEsp, ptrsToExclude);
            usableX86Opcodes.pushEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEbp, ptrsToExclude);
            usableX86Opcodes.pushEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEsi, ptrsToExclude);
            usableX86Opcodes.pushEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushEdi, ptrsToExclude);
            usableX86Opcodes.jmpEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.jmpEsp, ptrsToExclude);
            usableX86Opcodes.callEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.callEsp, ptrsToExclude);
            usableX86Opcodes.xorEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEax, ptrsToExclude);
            usableX86Opcodes.xorEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEbx, ptrsToExclude);
            usableX86Opcodes.xorEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEcx, ptrsToExclude);
            usableX86Opcodes.xorEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEdx, ptrsToExclude);
            usableX86Opcodes.xorEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEsi, ptrsToExclude);
            usableX86Opcodes.xorEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.xorEdi, ptrsToExclude);
            usableX86Opcodes.popEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEax, ptrsToExclude);
            usableX86Opcodes.popEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEbx, ptrsToExclude);
            usableX86Opcodes.popEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEcx, ptrsToExclude);
            usableX86Opcodes.popEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEdx, ptrsToExclude);
            usableX86Opcodes.popEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEsp, ptrsToExclude);
            usableX86Opcodes.popEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEbp, ptrsToExclude);
            usableX86Opcodes.popEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEsi, ptrsToExclude);
            usableX86Opcodes.popEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.popEdi, ptrsToExclude);
            usableX86Opcodes.pushad = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.pushad, ptrsToExclude);
            usableX86Opcodes.incEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEax, ptrsToExclude);
            usableX86Opcodes.incEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEbx, ptrsToExclude);
            usableX86Opcodes.incEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEcx, ptrsToExclude);
            usableX86Opcodes.incEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEdx, ptrsToExclude);
            usableX86Opcodes.incEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEbp, ptrsToExclude);
            usableX86Opcodes.incEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEsp, ptrsToExclude);
            usableX86Opcodes.incEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEsi, ptrsToExclude);
            usableX86Opcodes.incEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.incEdi, ptrsToExclude);
            usableX86Opcodes.decEax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEax, ptrsToExclude);
            usableX86Opcodes.decEbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEbx, ptrsToExclude);
            usableX86Opcodes.decEcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEcx, ptrsToExclude);
            usableX86Opcodes.decEdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEdx, ptrsToExclude);
            usableX86Opcodes.decEbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEbp, ptrsToExclude);
            usableX86Opcodes.decEsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEsp, ptrsToExclude);
            usableX86Opcodes.decEsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEsi, ptrsToExclude);
            usableX86Opcodes.decEdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.decEdi, ptrsToExclude);
            usableX86Opcodes.add = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.add, ptrsToExclude);
            usableX86Opcodes.sub = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.sub, ptrsToExclude);
            usableX86Opcodes.mov = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.mov, ptrsToExclude);
            usableX86Opcodes.and = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX86Opcodes.and, ptrsToExclude);

            if (Methods.HasFlag(RopMethod.VirtualAlloc))
            {
                var vpaChain = GenerateVirtualAllocChain32(RcgInfo, startAddress);
                if (vpaChain.Error == null)
                {
                    VirtualAllocChain = vpaChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.HeapCreate))
            {
                var hcChain = GenerateHeapCreateChain32(RcgInfo);
                if (hcChain.Error == null)
                {
                    HeapCreateChain = hcChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.VirtualProtect))
            {
                var vpChain = GenerateVirtualProtectChain32(RcgInfo);
                if (vpChain.Error == null)
                {
                    VirtualProtectChain = vpChain.ReturnValue;
                }
            }

            var output = DisplayOutput.RopChainGadgets32(this);
            RopChain.ReturnValue = String.Join("\n", output);
            return RopChain;
        }

        /// <summary>
        /// Creates a RopChain for a specific process.
        /// </summary>
        /// <param name="startAddress">A Address to be used as the start location for which memory will be made executable.</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets.</param>
        /// <param name="methods">Enum value representing which methods to build rop chains with.</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopChain32(byte[] startAddress = null, List<string> excludes = null, RopMethod methods = RopMethod.All)
        {
            Methods = methods;
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x86Opcodes = new X86Lists();

            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
                return failed;
            }

            if(excludes != null)
            {
                var ret2 = GetRopNops(excludes);
                if (ret1.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret1.Error;
                    return failed;
                }
            }
            else
            {
                var ret2 = GetRopNops();
                if (ret1.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret1.Error;
                    return failed;
                }
            }

            var ret3 = PopulateOpcodes(RcgInfo);
            optimiseLists(RcgInfo);

            if (Methods.HasFlag(RopMethod.VirtualAlloc))
            {
                var vpaChain = GenerateVirtualAllocChain32(RcgInfo, startAddress);
                if (vpaChain.Error == null)
                {
                    VirtualAllocChain = vpaChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.HeapCreate))
            {
                var hcChain = GenerateHeapCreateChain32(RcgInfo);
                if (hcChain.Error == null)
                {
                    HeapCreateChain = hcChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.VirtualProtect))
            {
                var vpChain = GenerateVirtualProtectChain32(RcgInfo);
                if (vpChain.Error == null)
                {
                    VirtualProtectChain = vpChain.ReturnValue;
                }
            }

            var output = DisplayOutput.RopChainGadgets32(this);
            RopChain.ReturnValue = String.Join("\n", output);
            return RopChain;
        }
        #endregion

        #region GetApiAddresses
        /// <summary>
        /// Gets the handles of 4 functions associated with building ROP chains: VirtualAlloc, HeapCreate, VirtualProtect and WriteProcessMemory
        /// </summary>
        private ErcResult<int> GetApiAddresses(ProcessInfo info)
        {
            ErcResult<int> returnVar = new ErcResult<int>(info.ProcessCore);
            returnVar.ReturnValue = 0;

            IntPtr hModule = IntPtr.Zero;
            for (int i = 0; i < info.ModulesInfo.Count; i++)
            {
                if (info.ModulesInfo[i].ModuleName == "kernel32")
                {
                    hModule = info.ModulesInfo[i].ModuleBase;
                }
            }

            if (info.ProcessMachineType == MachineType.I386 && Environment.Is64BitOperatingSystem)
            {
                ApiAddresses.Add("VirtualAlloc", hModule + 0x166B0);
                ApiAddresses.Add("HeapCreate", hModule + 0x154F0);
                ApiAddresses.Add("VirtualProtect", hModule + 0x16770);
                ApiAddresses.Add("WriteProcessMemory", hModule + 0x168B0);
                return returnVar;
            }

            var virtAllocAddress = ErcCore.GetProcAddress(hModule, "VirtualAlloc");
            if (virtAllocAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("VirtualAlloc", virtAllocAddress);
            }

            var HeapCreateAddress = ErcCore.GetProcAddress(hModule, "HeapCreate");
            if (HeapCreateAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("HeapCreate", HeapCreateAddress);
            }

            var VirtualProtectAddress = ErcCore.GetProcAddress(hModule, "VirtualProtect");
            if (VirtualProtectAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("VirtualProtect", VirtualProtectAddress);
            }

            var WriteProcessMemoryAddress = ErcCore.GetProcAddress(hModule, "WriteProcessMemory");
            if (WriteProcessMemoryAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("WriteProcessMemory", WriteProcessMemoryAddress);
            }

            return returnVar;
        }
        #endregion

        #region GetRopNops
        /// <summary>
        /// Gets a list of RopNops from the current process memory.
        /// </summary>
        /// <param name="excludes">A list of modules to be excluded from the search</param>
        /// <returns>Returns a ErcResult containing a list of IntPtr</returns>
        private ErcResult<List<IntPtr>> GetRopNops(List<string> excludes = null)
        {
            ErcResult<List<IntPtr>> ropNopsResult = new ErcResult<List<IntPtr>>(RcgInfo.ProcessCore);
            ropNopsResult.ReturnValue = new List<IntPtr>();
            byte[] ropNop = new byte[] { 0xC3 };
            var ropPtrs = RcgInfo.SearchModules(0, searchBytes: ropNop, excludedModules: excludes);
            if (ropPtrs.Error != null)
            {
                ropNopsResult.Error = ropPtrs.Error;
            }
            foreach (KeyValuePair<IntPtr, string> k in ropPtrs.ReturnValue)
            {
                ropNopsResult.ReturnValue.Add(k.Key);
                RopNops.Add(k.Key);
            }
            return ropNopsResult;
        }

        private ErcResult<List<IntPtr>> GetRopNops(ProcessInfo info)
        {
            ErcResult<List<IntPtr>> ropNopsResult = new ErcResult<List<IntPtr>>(info.ProcessCore);
            ropNopsResult.ReturnValue = new List<IntPtr>();
            byte[] ropNop = new byte[] { 0xC3 };
            var ropPtrs = info.SearchModules(0, searchBytes: ropNop);
            if (ropPtrs.Error != null)
            {
                ropNopsResult.Error = ropPtrs.Error;
            }
            foreach (KeyValuePair<IntPtr, string> k in ropPtrs.ReturnValue)
            {
                ropNopsResult.ReturnValue.Add(k.Key);
                RopNops.Add(k.Key);
            }
            return ropNopsResult;
        }
        #endregion

        #region PopulateOpcodes
        private ErcResult<int> PopulateOpcodes(ProcessInfo info)
        {
            ErcResult<int> ret = new ErcResult<int>(info.ProcessCore);

            for (int i = 0; i < RopNops.Count; i++)
            {
                byte[] bytes = new byte[20];
                IntPtr baseAddress = RopNops[i] - 19;
                ErcCore.ReadProcessMemory(info.ProcessHandle, baseAddress, bytes, 20, out int bytesRead);
                if (bytesRead != 20)
                {
                    ret.Error = new ERCException("ReadProcessMemory Error: " + new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    ret.LogEvent();
                }
                var ret1 = ParseByteArrayForRopCodes(bytes, info, baseAddress);
                if (ret1.Error != null)
                {
                    ret.Error = ret1.Error;
                    return ret;
                }
            }
            return ret;
        }
        #endregion

        #region ParseByteArrayForRopCodes
        private ErcResult<int> ParseByteArrayForRopCodes(byte[] bytes, ProcessInfo info, IntPtr baseAddress)
        {
            ErcResult<int> ret = new ErcResult<int>(info.ProcessCore);
            bool pushEaxDone = false;
            bool pushEbxDone = false;
            bool pushEcxDone = false;
            bool pushEdxDone = false;
            bool pushEspDone = false;
            bool pushEbpDone = false;
            bool pushEsiDone = false;
            bool pushEdiDone = false;
            bool jmpEspDone = false;
            bool callEspDone = false;
            bool xorEaxDone = false;
            bool xorEbxDone = false;
            bool xorEcxDone = false;
            bool xorEdxDone = false;
            bool xorEsiDone = false;
            bool xorEdiDone = false;
            bool popEaxDone = false;
            bool popEbxDone = false;
            bool popEcxDone = false;
            bool popEdxDone = false;
            bool popEspDone = false;
            bool popEbpDone = false;
            bool popEsiDone = false;
            bool popEdiDone = false;
            bool pushadDone = false;
            bool incEaxDone = false;
            bool incEbxDone = false;
            bool incEcxDone = false;
            bool incEdxDone = false;
            bool incEbpDone = false;
            bool incEspDone = false;
            bool incEsiDone = false;
            bool incEdiDone = false;
            bool decEaxDone = false;
            bool decEbxDone = false;
            bool decEcxDone = false;
            bool decEdxDone = false;
            bool decEbpDone = false;
            bool decEspDone = false;
            bool decEsiDone = false;
            bool decEdiDone = false;
            bool addDone = false;
            bool subDone = false;
            bool movDone = false;
            bool andDone = false;

            for (int i = bytes.Length - 1; i > 0; i--)
            {
                for (int j = 0; j < opcodes32.Count; j++)
                {
                    if (bytes[i] == opcodes32[j][0] && opcodes32[j].Length == 1)
                    {
                        byte[] opcodes = new byte[bytes.Length - i];
                        switch (j)
                        {
                            case 0:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEax.ContainsKey(baseAddress + i) && pushEaxDone == false)
                                {
                                    pushEaxDone = true;
                                    x86Opcodes.pushEax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 1:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEbx.ContainsKey(baseAddress + i) && pushEbxDone == false)
                                {
                                    pushEbxDone = true;
                                    x86Opcodes.pushEbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 2:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEcx.ContainsKey(baseAddress + i) && pushEcxDone == false)
                                {
                                    pushEcxDone = true;
                                    x86Opcodes.pushEcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 3:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEdx.ContainsKey(baseAddress + i) && pushEdxDone == false)
                                {
                                    pushEdxDone = true;
                                    x86Opcodes.pushEdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 4:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEsp.ContainsKey(baseAddress + i) && pushEspDone == false)
                                {
                                    pushEspDone = true;
                                    x86Opcodes.pushEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 5:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEbp.ContainsKey(baseAddress + i) && pushEbpDone == false)
                                {
                                    pushEbpDone = true;
                                    x86Opcodes.pushEbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 6:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEsi.ContainsKey(baseAddress + i) && pushEsiDone == false)
                                {
                                    pushEsiDone = true;
                                    x86Opcodes.pushEsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 7:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushEdi.ContainsKey(baseAddress + i) && pushEdiDone == false)
                                {
                                    pushEdiDone = true;
                                    x86Opcodes.pushEdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 8:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEax.ContainsKey(baseAddress + i) && popEaxDone == false)
                                {
                                    popEaxDone = true;
                                    x86Opcodes.popEax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 9:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEbx.ContainsKey(baseAddress + i) && popEbxDone == false)
                                {
                                    popEbxDone = true;
                                    x86Opcodes.popEbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 10:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEcx.ContainsKey(baseAddress + i) && popEcxDone == false)
                                {
                                    popEcxDone = true;
                                    x86Opcodes.popEcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 11:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEdx.ContainsKey(baseAddress + i) && popEdxDone == false)
                                {
                                    popEdxDone = true;
                                    x86Opcodes.popEdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 12:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEsp.ContainsKey(baseAddress + i) && popEspDone == false)
                                {
                                    popEspDone = true;
                                    x86Opcodes.popEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 13:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEbp.ContainsKey(baseAddress + i) && popEbpDone == false)
                                {
                                    popEbpDone = true;
                                    x86Opcodes.popEbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 14:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEsi.ContainsKey(baseAddress + i) && popEsiDone == false)
                                {
                                    popEsiDone = true;
                                    x86Opcodes.popEsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 15:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.popEdi.ContainsKey(baseAddress + i) && popEdiDone == false)
                                {
                                    popEdiDone = true;
                                    x86Opcodes.popEdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 16:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.pushad.ContainsKey(baseAddress + i) && pushadDone == false)
                                {
                                    pushadDone = true;
                                    x86Opcodes.pushad.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 17:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEax.ContainsKey(baseAddress + i) && incEaxDone == false)
                                {
                                    incEaxDone = true;
                                    x86Opcodes.incEax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 18:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEbx.ContainsKey(baseAddress + i) && incEbxDone == false)
                                {
                                    incEbxDone = true;
                                    x86Opcodes.incEbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 19:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEcx.ContainsKey(baseAddress + i) && incEcxDone == false)
                                {
                                    incEcxDone = true;
                                    x86Opcodes.incEcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 20:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEdx.ContainsKey(baseAddress + i) && incEdxDone == false)
                                {
                                    incEdxDone = true;
                                    x86Opcodes.incEdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 21:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEbp.ContainsKey(baseAddress + i) && incEbpDone == false)
                                {
                                    incEbpDone = true;
                                    x86Opcodes.incEbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 22:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEsp.ContainsKey(baseAddress + i) && incEspDone == false)
                                {
                                    incEspDone = true;
                                    x86Opcodes.incEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 23:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEsi.ContainsKey(baseAddress + i) && incEsiDone == false)
                                {
                                    incEsiDone = true;
                                    x86Opcodes.incEsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 24:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.incEdi.ContainsKey(baseAddress + i) && incEdiDone == false)
                                {
                                    incEdiDone = true;
                                    x86Opcodes.incEdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 25:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEax.ContainsKey(baseAddress + i) && decEaxDone == false)
                                {
                                    decEaxDone = true;
                                    x86Opcodes.decEax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 26:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEbx.ContainsKey(baseAddress + i) && decEbxDone == false)
                                {
                                    decEbxDone = true;
                                    x86Opcodes.decEbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 27:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEcx.ContainsKey(baseAddress + i) && decEcxDone == false)
                                {
                                    decEcxDone = true;
                                    x86Opcodes.decEcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 28:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEdx.ContainsKey(baseAddress + i) && decEdxDone == false)
                                {
                                    decEdxDone = true;
                                    x86Opcodes.decEdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 29:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEbp.ContainsKey(baseAddress + i) && decEbpDone == false)
                                {
                                    decEbpDone = true;
                                    x86Opcodes.decEbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 30:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEsp.ContainsKey(baseAddress + i) && decEspDone == false)
                                {
                                    decEspDone = true;
                                    x86Opcodes.decEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 31:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEsi.ContainsKey(baseAddress + i) && decEsiDone == false)
                                {
                                    decEsiDone = true;
                                    x86Opcodes.decEsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 32:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.decEdi.ContainsKey(baseAddress + i) && decEdiDone == false)
                                {
                                    decEdiDone = true;
                                    x86Opcodes.decEdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 41:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.add.ContainsKey(baseAddress + i) && addDone == false)
                                {
                                    addDone = true;
                                    x86Opcodes.add.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 42:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.sub.ContainsKey(baseAddress + i) && subDone == false)
                                {
                                    subDone = true;
                                    x86Opcodes.sub.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 43:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.mov.ContainsKey(baseAddress + i) && movDone == false)
                                {
                                    movDone = true;
                                    x86Opcodes.mov.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 44:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x86Opcodes.and.ContainsKey(baseAddress + i) && andDone == false)
                                {
                                    andDone = true;
                                    x86Opcodes.and.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            default:
                                throw new ERCException("An error has occured in RopChainGenerator.ParseByteArrayForRopCodes whilst parsing single length x86 instructions");

                        }
                    }
                    else if (opcodes32[j].Length > 1)
                    {
                        if (bytes[i] == opcodes32[j][0] && i < bytes.Length - 1 && j < opcodes32.Count + 1 && bytes[i + 1] == opcodes32[j][1])
                        {
                            byte[] opcodes = new byte[bytes.Length - i];
                            switch (j)
                            {
                                case 33:
                                    opcodes = new byte[2];
                                    Array.Copy(bytes, i, opcodes, 0, 2);
                                    if (!x86Opcodes.jmpEsp.ContainsKey(baseAddress + i) && jmpEspDone == false)
                                    {
                                        jmpEspDone = true;
                                        x86Opcodes.jmpEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 34:
                                    opcodes = new byte[2];
                                    Array.Copy(bytes, i, opcodes, 0, 2);
                                    if (!x86Opcodes.callEsp.ContainsKey(baseAddress + i) && callEspDone == false)
                                    {
                                        callEspDone = true;
                                        x86Opcodes.callEsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 35:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEax.ContainsKey(baseAddress + i) && xorEaxDone == false)
                                    {
                                        xorEaxDone = true;
                                        x86Opcodes.xorEax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 36:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEbx.ContainsKey(baseAddress + i) && xorEbxDone == false)
                                    {
                                        xorEbxDone = true;
                                        x86Opcodes.xorEbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 37:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEcx.ContainsKey(baseAddress + i) && xorEcxDone == false)
                                    {
                                        xorEcxDone = true;
                                        x86Opcodes.xorEcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 38:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEdx.ContainsKey(baseAddress + i) && xorEdxDone == false)
                                    {
                                        xorEdxDone = true;
                                        x86Opcodes.xorEdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 39:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEsi.ContainsKey(baseAddress + i) && xorEsiDone == false)
                                    {
                                        xorEsiDone = true;
                                        x86Opcodes.xorEsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 40:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x86Opcodes.xorEdi.ContainsKey(baseAddress + i) && xorEdiDone == false)
                                    {
                                        xorEdiDone = true;
                                        x86Opcodes.xorEdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.I386, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                default:
                                    throw new ERCException("An error has occured in RopChainGenerator.ParseByteArrayForRopCodes whilst parsing double length x86 instructions");

                            }
                        }
                    }
                }
            }
            return ret;
        }
        #endregion

        #region Optimse Lists
        private void optimiseLists(ProcessInfo info)
        {
            usableX86Opcodes = new X86Lists();
            var thisList = x86Opcodes.pushEax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push eax") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push ebx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push ecx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push edx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push esp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push ebp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push esi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushEdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push edi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushEdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.jmpEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("jmp esp"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.jmpEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.callEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("call esp"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.callEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor eax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor ebx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor ecx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor edx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor esi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.xorEdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor edi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.xorEdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop eax") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop ebx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop ecx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop edx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop esp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop ebp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop esi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.popEdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop edi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.popEdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.pushad.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pushad") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.pushad.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc eax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc ebx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc ecx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc edx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc ebp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc esp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc esi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.incEdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc edi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.incEdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec eax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec ebx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec ecx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec edx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec ebp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec esp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec esi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.decEdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec edi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.decEdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.add.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("add") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.add.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.sub.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("sub") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.sub.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.mov.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("mov") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.mov.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x86Opcodes.and.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("and") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX86Opcodes.and.Add(thisList[i].Key, thisList[i].Value);
                }
            }
        }
        #endregion

        #region GenerateVirtualAllocChain32
        private ErcResult<List<Tuple<byte[], string>>> GenerateVirtualAllocChain32(ProcessInfo info, byte[] startAddress = null)
        {
            ////////////////////////////////////////////////////////////////
            // VirtualAlloc Template:                                     //
            // EAX: 90909090 -> Nop sled                                  //
            // ECX: 00000040 -> flProtect                                 //
            // EDX: 00001000 -> flAllocationType                          //
            // EBX: ???????? -> Int size (area to be set as executable)   //
            // ESP: ???????? -> No Change                                 //
            // EBP: ???????? -> Jmp Esp / Call Esp                        //
            // ESI: ???????? -> ApiAddresses["VirtualAlloc"]              //
            // EDI: ???????? -> RopNop                                    //
            //                                                            //
            // + place ptr to "jmp esp" on stack, below PUSHAD            //
            ////////////////////////////////////////////////////////////////

            ErcResult<List<Tuple<byte[], string>>> VirtualAlloc = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            VirtualAlloc.ReturnValue = new List<Tuple<byte[], string>>();
            Register32 regState32 = new Register32();
            regState32 |= Register32.ESP;
            RegisterModifiers32 regModified32 = new RegisterModifiers32();

            foreach (Register32 i in Enum.GetValues(typeof(Register32)))
            {
                SetRegisterModifier(regModified32.ESP, i, regModified32);
                SetRegisterModifier(i, regModified32.ESP, regModified32);
            }

            RegisterLists32 regLists32 = new RegisterLists32();

            while (!CompleteRegisters32(regState32))
            {
                byte[] nulls = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                
                #region Populate EDI
                if (!regState32.HasFlag(Register32.EDI))
                {
                    regLists32.ediList = null;
                    regLists32.ediList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEdi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            if (usableX86Opcodes.popEdi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEdi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEdi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEdi.ElementAt(i).Value));
                                regState32 |= Register32.EDI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEdi.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            var popInstruction = GetPopInstruction(Register32.EDI, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EDI, i);
                                if (movInstruction != null)
                                {
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    SetRegisterModifier(Register32.EDI, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EDI;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDI))
                    {
                        regLists32.ediList = null;
                        regLists32.ediList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ediList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDI must be allocated manually"));
                        regState32 |= Register32.EDI;
                    }
                }
                #endregion
                
                #region Populate ESI
                if (!regState32.HasFlag(Register32.ESI))
                {
                    regLists32.esiList = null;
                    regLists32.esiList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEsi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            if (usableX86Opcodes.popEsi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEsi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["VirtualAlloc"])), "Pointer to VirtualAlloc."));
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEsi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEsi.ElementAt(i).Value));
                                regState32 |= Register32.ESI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEsi.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.ESI))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.ESI))
                            {
                                var popInstruction = GetPopInstruction(Register32.ESI, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.ESI, i);
                                    if (movInstruction != null)
                                    {
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["VirtualAlloc"])), "Pointer to VirtualAlloc."));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                        SetRegisterModifier(Register32.ESI, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.ESI;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            regLists32.esiList = null;
                            regLists32.esiList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.esiList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. ESI must be allocated manually"));
                            regState32 |= Register32.ESI;
                        }
                    }
                }
                #endregion

                #region Populate EBP
                if (!regState32.HasFlag(Register32.EBP))
                {
                    regLists32.ebpList = null;
                    regLists32.ebpList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEbp.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            if (usableX86Opcodes.popEbp.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEbp.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEbp.ElementAt(i).Key)),
                                    usableX86Opcodes.popEbp.ElementAt(i).Value));
                                if (startAddress != null)
                                {
                                    regLists32.ebpList.Add(Tuple.Create(startAddress, "User supplied start address"));
                                }
                                else
                                {
                                    if (usableX86Opcodes.jmpEsp.Count > 0)
                                    {
                                        regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                            usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                    }
                                    else
                                    {
                                        regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                            usableX86Opcodes.callEsp.ElementAt(0).Value));
                                    }
                                }
                                regState32 |= Register32.EBP;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEbp.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBP))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EBP))
                            {
                                var popInstruction = GetPopInstruction(Register32.EBP, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.EBP, i);
                                    if (movInstruction != null)
                                    {
                                        if (usableX86Opcodes.jmpEsp.Count > 0)
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                        }
                                        else
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.callEsp.ElementAt(0).Value));
                                        }
                                        regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.ebpList.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                        SetRegisterModifier(Register32.EBP, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.EBP;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            regLists32.ebpList = null;
                            regLists32.ebpList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.ebpList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. EBP must be allocated manually"));
                            regState32 |= Register32.EBP;
                        }
                    }
                }
                #endregion

                #region Populate EBX
                // Populate EBX
                if (!regState32.HasFlag(Register32.EBX))
                {
                    regLists32.ebxList = null;
                    regLists32.ebxList = new List<Tuple<byte[], string>>();
                    var xorEbx = GetXorInstruction(Register32.EBX);
                    if (xorEbx != null)
                    {
                        regLists32.ebxList.Add(Tuple.Create(xorEbx.Item1, xorEbx.Item2));
                        if (usableX86Opcodes.incEbx.Count > 0)
                        {
                            if (usableX86Opcodes.incEbx.ElementAt(0).Value.Length <= 14)
                            {
                                regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.incEbx.ElementAt(0).Key)),
                                    usableX86Opcodes.incEbx.ElementAt(0).Value));
                                regState32 |= Register32.EBX;
                            }
                        }
                        
                    }
                    if (!regState32.HasFlag(Register32.EBX))
                    {
                        var zeroEbx = ZeroRegister(Register32.EBX, regModified32);
                        if (zeroEbx != null && usableX86Opcodes.incEbx.Count > 0 && usableX86Opcodes.incEbx.ElementAt(0).Value.Length <= 14)
                        {
                            for (int i = 0; i < zeroEbx.Count; i++)
                            {
                                regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(zeroEbx[i].Item1), zeroEbx[i].Item2));
                            }
                            regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(
                                BitConverter.GetBytes((long)usableX86Opcodes.incEbx.ElementAt(0).Key)),
                                usableX86Opcodes.incEbx.ElementAt(0).Value));
                            SetRegisterModifier(Register32.EBX, zeroEbx[0].Item3, regModified32);
                            regState32 &= ~zeroEbx[0].Item3;
                            regState32 |= Register32.EBX;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBX))
                    {
                        foreach(Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            var popInstruction = GetPopInstruction(Register32.EBX, i, regModified32);
                            if (popInstruction != null)
                            {
                                for (int j = 0; j < x86Opcodes.add.Count; j++)
                                {
                                    if (!regState32.HasFlag(Register32.EBX))
                                    {
                                        var strings = x86Opcodes.add.ElementAt(j).Value.Split(',');
                                        if (strings[0].Contains(" ebx") && strings[1].Contains(i.ToString().ToLower()))
                                        {
                                            regLists32.ebxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                            byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };//......................................replace this with a more long term solution. Dynamically allocate size based on the size category in 
                                            regLists32.ebxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                            regLists32.ebxList.Add(Tuple.Create(BitConverter.GetBytes((long)x86Opcodes.add.ElementAt(j).Key),
                                                x86Opcodes.add.ElementAt(j).Value));
                                            regLists32.ebxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                            bytes = new byte[] { 0x01, 0x01, 0x10, 0x01 };//......................................replace this with a more long term solution. Dynamically allocate size based on the size category in 
                                            regLists32.ebxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                            regLists32.ebxList.Add(Tuple.Create(BitConverter.GetBytes((long)x86Opcodes.add.ElementAt(j).Key),
                                            x86Opcodes.add.ElementAt(j).Value));
                                            SetRegisterModifier(Register32.EBX, i, regModified32);
                                            regState32 &= ~i;
                                            regState32 |= Register32.EBX;
                                        }
                                    }
                                }
                            }
                        }
                    }    
                    
                }
                if (!regState32.HasFlag(Register32.EBX))
                {
                    regLists32.ebxList = null;
                    regLists32.ebxList = new List<Tuple<byte[], string>>();
                    byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                    regLists32.ebxList.Add(Tuple.Create(nullBytes,
                        "Unable to find appropriate instruction. EBX must be allocated manually"));
                    regState32 |= Register32.EBX;
                }
                #endregion

                #region Populate EDX
                if (!regState32.HasFlag(Register32.EDX))
                {
                    regLists32.edxList = null;
                    regLists32.edxList = new List<Tuple<byte[], string>>();
                    var xorEDX = GetXorInstruction(Register32.EDX);
                    if(xorEDX != null)
                    {
                        foreach(Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EDX))
                            {
                                var popInstruction = GetPopInstruction(Register32.EDX, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var addInstruction = GetAddInstruction(Register32.EDX, i);
                                    if (addInstruction != null)
                                    {
                                        byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                        byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01 };
                                        regLists32.edxList.Add(Tuple.Create(xorEDX.Item1, xorEDX.Item2));
                                        
                                        regLists32.edxList.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00001000"));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        SetRegisterModifier(Register32.EDX, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.EDX;
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDX))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EDX))
                            {
                                var popInstruction = GetPopInstruction(Register32.EDX, i, regModified32);
                                if (popInstruction != null)
                                {
                                    foreach(Register32 j in Enum.GetValues(typeof(Register32)))
                                    {
                                        if (!regState32.HasFlag(Register32.EDX) && i != j)
                                        {
                                            var popInstruction2 = GetPopInstruction(Register32.EDX, j, regModified32);
                                            if (popInstruction2 != null)
                                            {
                                                var addInstruction = GetAddInstruction(i, j);
                                                if (addInstruction != null)
                                                {
                                                    var movInstruction = GetMovInstruction(Register32.EDX, i);
                                                    if (movInstruction != null)
                                                    {
                                                        byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                                        byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01 };
                                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                                        regLists32.edxList.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction2.Item1), popInstruction2.Item2));
                                                        regLists32.edxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00001000"));
                                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                                        SetRegisterModifier(Register32.EDX, i, regModified32);
                                                        SetRegisterModifier(Register32.EDX, j, regModified32);
                                                        regState32 &= ~i;
                                                        regState32 &= ~j;
                                                        regState32 |= Register32.EDX;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDX))
                    {
                        regLists32.edxList = null;
                        regLists32.edxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.edxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDX must be allocated manually"));
                        regState32 |= Register32.EDX;
                    }
                }
                #endregion

                #region Populate ECX
                if (!regState32.HasFlag(Register32.ECX))
                {
                    regLists32.ecxList = null;
                    regLists32.ecxList = new List<Tuple<byte[], string>>();
                    var xorECX = GetXorInstruction(Register32.ECX);
                    if (xorECX != null)
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.ECX))
                            {
                                var popInstruction = GetPopInstruction(Register32.ECX, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var addInstruction = GetAddInstruction(Register32.ECX, i);
                                    if (addInstruction != null)
                                    {
                                        byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                        byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01 };
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(xorECX.Item1), xorECX.Item2));
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.ecxList.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.ecxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00000040"));
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        SetRegisterModifier(Register32.ECX, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.ECX;
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.ECX))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.ECX))
                            {
                                var popInstruction = GetPopInstruction(Register32.ECX, i, regModified32);
                                if (popInstruction != null)
                                {
                                    foreach (Register32 j in Enum.GetValues(typeof(Register32)))
                                    {
                                        if (!regState32.HasFlag(Register32.ECX) && i != j)
                                        {
                                            var popInstruction2 = GetPopInstruction(Register32.ECX, j, regModified32);
                                            if (popInstruction2 != null)
                                            {
                                                var addInstruction = GetAddInstruction(i, j);
                                                if (addInstruction != null)
                                                {
                                                    var movInstruction = GetMovInstruction(Register32.ECX, i);
                                                    if (movInstruction != null)
                                                    {
                                                        byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                                        byte[] add2 = new byte[] { 0x41, 0x01, 0x01, 0x01 };
                                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                                        regLists32.ecxList.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction2.Item1), popInstruction2.Item2));
                                                        regLists32.ecxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00000040"));
                                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                                        SetRegisterModifier(Register32.ECX, i, regModified32);
                                                        SetRegisterModifier(Register32.ECX, j, regModified32);
                                                        regState32 &= ~i;
                                                        regState32 &= ~j;
                                                        regState32 |= Register32.ECX;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.ECX))
                    {
                        regLists32.edxList = null;
                        regLists32.edxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.edxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDX must be allocated manually"));
                        regState32 |= Register32.ECX;
                    }
                }
                #endregion

                #region Populate EAX
                if (!regState32.HasFlag(Register32.EAX))
                {
                    byte[] nops = new byte[] { 0x90, 0x90, 0x90, 0x90 };
                    regLists32.eaxList = null;
                    regLists32.eaxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEax.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            if (usableX86Opcodes.popEax.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEax.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEax.ElementAt(i).Key)),
                                    usableX86Opcodes.popEax.ElementAt(i).Value));
                                regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                regState32 |= Register32.EAX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEax.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            var popInstruction = GetPopInstruction(Register32.EAX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EAX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EAX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EAX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EAX))
                    {
                        regLists32.eaxList = null;
                        regLists32.eaxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.eaxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EAX must be allocated manually"));
                        regState32 |= Register32.EAX;
                    }
                }
                #endregion
            }
            VirtualAlloc.ReturnValue = BuildRopChain(regLists32, regModified32, true);
            return VirtualAlloc;
        }
        #endregion

        #region GenerateHeapCreateChain32
        private ErcResult<List<Tuple<byte[], string>>> GenerateHeapCreateChain32(ProcessInfo info)
        {
            ////////////////////////////////////////////////////////////////
            // HeapCreate Template:                                       //
            // EAX: 90909090 -> Nop sled                                  //
            // ECX: 00010000 -> dwMaximumSize                             //
            // EDX: 00001000 -> dwInitialSize                             //
            // EBX: 00040000 -> flOptions                                 //
            // ESP: ???????? -> No Change                                 //
            // EBP: ???????? -> Jmp Esp / Call Esp                        //
            // ESI: ???????? -> ApiAddresses["HeapCreate"]                //
            // EDI: ???????? -> RopNop                                    //
            ////////////////////////////////////////////////////////////////
            
            ErcResult<List<Tuple<byte[], string>>> HeapCreate = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            HeapCreate.ReturnValue = new List<Tuple<byte[], string>>();
            Register32 regState32 = new Register32();
            regState32 |= Register32.ESP;
            RegisterModifiers32 regModified32 = new RegisterModifiers32();

            foreach (Register32 i in Enum.GetValues(typeof(Register32)))
            {
                SetRegisterModifier(regModified32.ESP, i, regModified32);
                SetRegisterModifier(i, regModified32.ESP, regModified32);
            }

            RegisterLists32 regLists32 = new RegisterLists32();

            while (!CompleteRegisters32(regState32))
            {
                #region Populate EDI
                if (!regState32.HasFlag(Register32.EDI))
                {
                    regLists32.ediList = null;
                    regLists32.ediList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEdi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            if (usableX86Opcodes.popEdi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEdi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEdi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEdi.ElementAt(i).Value));
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                regState32 |= Register32.EDI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEdi.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            var popInstruction = GetPopInstruction(Register32.EDI, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EDI, i);
                                if (movInstruction != null)
                                {
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EDI, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EDI;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDI))
                    {
                        regLists32.ediList = null;
                        regLists32.ediList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ediList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDI must be allocated manually"));
                        regState32 |= Register32.EDI;
                    }
                }
                #endregion

                #region Populate ESI
                if (!regState32.HasFlag(Register32.ESI))
                {
                    regLists32.esiList = null;
                    regLists32.esiList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEsi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            if (usableX86Opcodes.popEsi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEsi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEsi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEsi.ElementAt(i).Value));
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["HeapCreate"])), "Pointer to HeapCreate."));
                                regState32 |= Register32.ESI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEsi.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.ESI))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.ESI))
                            {
                                var popInstruction = GetPopInstruction(Register32.ESI, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.ESI, i);
                                    if (movInstruction != null)
                                    {
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["HeapCreate"])), "Pointer to HeapCreate."));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                        SetRegisterModifier(Register32.ESI, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.ESI;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            regLists32.esiList = null;
                            regLists32.esiList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.esiList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. ESI must be allocated manually"));
                            regState32 |= Register32.ESI;
                        }
                    }
                }
                #endregion

                #region Populate EBP
                if (!regState32.HasFlag(Register32.EBP))
                {
                    regLists32.ebpList = null;
                    regLists32.ebpList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEbp.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            if (usableX86Opcodes.popEbp.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEbp.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEbp.ElementAt(i).Key)),
                                    usableX86Opcodes.popEbp.ElementAt(i).Value));
                                
                                if (usableX86Opcodes.jmpEsp.Count > 0)
                                {
                                    regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                        usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                }
                                else
                                {
                                    regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                        usableX86Opcodes.callEsp.ElementAt(0).Value));
                                }
                                
                                regState32 |= Register32.EBP;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEbp.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBP))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EBP))
                            {
                                var popInstruction = GetPopInstruction(Register32.EBP, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.EBP, i);
                                    if (movInstruction != null)
                                    {
                                        regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        if (usableX86Opcodes.jmpEsp.Count > 0)
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                        }
                                        else
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.callEsp.ElementAt(0).Value));
                                        }
                                        regLists32.ebpList.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                        SetRegisterModifier(Register32.EBP, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.EBP;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            regLists32.ebpList = null;
                            regLists32.ebpList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.ebpList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. EBP must be allocated manually"));
                            regState32 |= Register32.EBP;
                        }
                    }
                }
                #endregion

                #region Populate EBX
                // Populate EBX
                if (!regState32.HasFlag(Register32.EBX))
                {
                    byte[] flOptions = new byte[] { 0x00, 0x04, 0x00, 0x00 };
                    regLists32.ebxList = null;
                    regLists32.ebxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEbx.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EBX))
                        {
                            if (usableX86Opcodes.popEbx.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEbx.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEbx.ElementAt(i).Key)),
                                    usableX86Opcodes.popEbx.ElementAt(i).Value));
                                regLists32.ebxList.Add(Tuple.Create(flOptions, "flOptions"));
                                regState32 |= Register32.EBX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEbx.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EBX))
                        {
                            var popInstruction = GetPopInstruction(Register32.EBX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EBX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.ebxList.Add(Tuple.Create(flOptions, "flOptions"));
                                    regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EBX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EBX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBX))
                    {
                        regLists32.ebxList = null;
                        regLists32.ebxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ebxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EBX must be allocated manually"));
                        regState32 |= Register32.EBX;
                    }
                }
                #endregion

                #region Populate EDX
                if (!regState32.HasFlag(Register32.EDX))
                {
                    byte[] dwInitialSize = new byte[] { 0x00, 0x00, 0x10, 0x00 };
                    regLists32.edxList = null;
                    regLists32.edxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEdx.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EDX))
                        {
                            if (usableX86Opcodes.popEdx.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEdx.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEdx.ElementAt(i).Key)),
                                    usableX86Opcodes.popEdx.ElementAt(i).Value));
                                regLists32.edxList.Add(Tuple.Create(dwInitialSize, "dwInitialSize"));
                                regState32 |= Register32.EDX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEdx.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EDX))
                        {
                            var popInstruction = GetPopInstruction(Register32.EDX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EDX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.edxList.Add(Tuple.Create(dwInitialSize, "dwInitialSize"));
                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EDX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EDX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDX))
                    {
                        regLists32.edxList = null;
                        regLists32.edxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.edxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDX must be allocated manually"));
                        regState32 |= Register32.EDX;
                    }
                }
                #endregion

                #region Populate ECX
                if (!regState32.HasFlag(Register32.ECX))
                {
                    byte[] dwMaximumSize = new byte[] { 0x00, 0x01, 0x00, 0x00 };
                    regLists32.ecxList = null;
                    regLists32.ecxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEcx.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.ECX))
                        {
                            if (usableX86Opcodes.popEcx.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEcx.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEcx.ElementAt(i).Key)),
                                    usableX86Opcodes.popEcx.ElementAt(i).Value));
                                regLists32.ecxList.Add(Tuple.Create(dwMaximumSize, "dwMaximumSize"));
                                regState32 |= Register32.ECX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEcx.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.ECX))
                        {
                            var popInstruction = GetPopInstruction(Register32.ECX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.ECX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.ecxList.Add(Tuple.Create(dwMaximumSize, "dwMaximumSize"));
                                    regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.ECX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.ECX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.ECX))
                    {
                        regLists32.ecxList = null;
                        regLists32.ecxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ecxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. ECX must be allocated manually"));
                        regState32 |= Register32.ECX;
                    }
                }
                #endregion

                #region Populate EAX
                if (!regState32.HasFlag(Register32.EAX))
                {
                    byte[] nops = new byte[] { 0x90, 0x90, 0x90, 0x90 };
                    regLists32.eaxList = null;
                    regLists32.eaxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEax.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            if (usableX86Opcodes.popEax.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEax.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEax.ElementAt(i).Key)),
                                    usableX86Opcodes.popEax.ElementAt(i).Value));
                                regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                regState32 |= Register32.EAX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEax.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            var popInstruction = GetPopInstruction(Register32.EAX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EAX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EAX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EAX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EAX))
                    {
                        regLists32.eaxList = null;
                        regLists32.eaxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.eaxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EAX must be allocated manually"));
                        regState32 |= Register32.EAX;
                    }
                }
                #endregion
            }
            HeapCreate.ReturnValue = BuildRopChain(regLists32, regModified32);
            return HeapCreate;
        }
        #endregion

        #region GenerateVirtualProtectChain32
        private ErcResult<List<Tuple<byte[], string>>> GenerateVirtualProtectChain32(ProcessInfo info)
        {
            ////////////////////////////////////////////////////////////////
            // VirtualProtect Template:                                   //
            // EAX: 90909090 -> Nop sled                                  //
            // ECX: ???????? -> lpflOldProtect                            //
            // EDX: 00000040 -> flNewProtect                              //
            // EBX: ???????? -> Int size (area to be set as executable)   //
            // ESP: ???????? -> No Change                                 //
            // EBP: ???????? -> Jmp Esp / Call Esp                        //
            // ESI: ???????? -> ApiAddresses["VirtualProtect"]            //
            // EDI: ???????? -> RopNop                                    //
            //                                                            //
            // + place ptr to "jmp esp" on stack, below PUSHAD            //
            ////////////////////////////////////////////////////////////////

            ErcResult<List<Tuple<byte[], string>>> VirtualAlloc = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            VirtualAlloc.ReturnValue = new List<Tuple<byte[], string>>();
            Register32 regState32 = new Register32();
            regState32 |= Register32.ESP;
            RegisterModifiers32 regModified32 = new RegisterModifiers32();

            foreach (Register32 i in Enum.GetValues(typeof(Register32)))
            {
                SetRegisterModifier(regModified32.ESP, i, regModified32);
                SetRegisterModifier(i, regModified32.ESP, regModified32);
            }

            RegisterLists32 regLists32 = new RegisterLists32();

            while (!CompleteRegisters32(regState32))
            {
                #region Populate EDI
                if (!regState32.HasFlag(Register32.EDI))
                {
                    regLists32.ediList = null;
                    regLists32.ediList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEdi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            if (usableX86Opcodes.popEdi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEdi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEdi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEdi.ElementAt(i).Value));
                                regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                regState32 |= Register32.EDI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEdi.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EDI))
                        {
                            var popInstruction = GetPopInstruction(Register32.EDI, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EDI, i);
                                if (movInstruction != null)
                                {
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)RopNops[0])), "ROP NOP"));
                                    regLists32.ediList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EDI, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EDI;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDI))
                    {
                        regLists32.ediList = null;
                        regLists32.ediList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ediList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDI must be allocated manually"));
                        regState32 |= Register32.EDI;
                    }
                }
                #endregion

                #region Populate ESI
                if (!regState32.HasFlag(Register32.ESI))
                {
                    regLists32.esiList = null;
                    regLists32.esiList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEsi.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            if (usableX86Opcodes.popEsi.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEsi.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEsi.ElementAt(i).Key)),
                                    usableX86Opcodes.popEsi.ElementAt(i).Value));
                                regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["VirtualAlloc"])), "Pointer to VirtualAlloc."));
                                regState32 |= Register32.ESI;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEsi.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.ESI))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.ESI))
                            {
                                var popInstruction = GetPopInstruction(Register32.ESI, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.ESI, i);
                                    if (movInstruction != null)
                                    {
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)ApiAddresses["VirtualAlloc"])), "Pointer to VirtualAlloc."));
                                        regLists32.esiList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                        SetRegisterModifier(Register32.ESI, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.ESI;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.ESI))
                        {
                            regLists32.esiList = null;
                            regLists32.esiList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.esiList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. ESI must be allocated manually"));
                            regState32 |= Register32.ESI;
                        }
                    }
                }
                #endregion

                #region Populate EBP
                if (!regState32.HasFlag(Register32.EBP))
                {
                    regLists32.ebpList = null;
                    regLists32.ebpList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEbp.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            if (usableX86Opcodes.popEbp.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEbp.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEbp.ElementAt(i).Key)),
                                    usableX86Opcodes.popEbp.ElementAt(i).Value));
                                
                                if (usableX86Opcodes.jmpEsp.Count > 0)
                                {
                                    regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                        usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                }
                                else
                                {
                                    regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                        usableX86Opcodes.callEsp.ElementAt(0).Value));
                                }
                                
                                regState32 |= Register32.EBP;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEbp.Count;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBP))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EBP))
                            {
                                var popInstruction = GetPopInstruction(Register32.EBP, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var movInstruction = GetMovInstruction(Register32.EBP, i);
                                    if (movInstruction != null)
                                    {
                                        regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        if (usableX86Opcodes.jmpEsp.Count > 0)
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.jmpEsp.ElementAt(0).Value));
                                        }
                                        else
                                        {
                                            regLists32.ebpList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.callEsp.ElementAt(0).Key)),
                                                usableX86Opcodes.callEsp.ElementAt(0).Value));
                                        }
                                        regLists32.ebpList.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                        SetRegisterModifier(Register32.EBP, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.EBP;
                                    }
                                }
                            }
                        }
                        if (!regState32.HasFlag(Register32.EBP))
                        {
                            regLists32.ebpList = null;
                            regLists32.ebpList = new List<Tuple<byte[], string>>();
                            byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                            regLists32.ebpList.Add(Tuple.Create(nullBytes,
                                "Unable to find appropriate instruction. EBP must be allocated manually"));
                            regState32 |= Register32.EBP;
                        }
                    }
                }
                #endregion

                #region Populate EBX
                // Populate EBX
                if (!regState32.HasFlag(Register32.EBX))
                {
                    regLists32.ebxList = null;
                    regLists32.ebxList = new List<Tuple<byte[], string>>();
                    var xorEbx = GetXorInstruction(Register32.EBX);
                    if (xorEbx != null)
                    {
                        regLists32.ebxList.Add(Tuple.Create(xorEbx.Item1, xorEbx.Item2));
                        if (usableX86Opcodes.incEbx.Count > 0)
                        {
                            if (usableX86Opcodes.incEbx.ElementAt(0).Value.Length <= 14)
                            {
                                regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.incEbx.ElementAt(0).Key)),
                                    usableX86Opcodes.incEbx.ElementAt(0).Value));
                                regState32 |= Register32.EBX;
                            }
                        }

                    }
                    if (!regState32.HasFlag(Register32.EBX))
                    {
                        var zeroEbx = ZeroRegister(Register32.EBX, regModified32);
                        if (zeroEbx != null && usableX86Opcodes.incEbx.Count > 0 && usableX86Opcodes.incEbx.ElementAt(0).Value.Length <= 14)
                        {
                            for (int i = 0; i < zeroEbx.Count; i++)
                            {
                                regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(zeroEbx[i].Item1), zeroEbx[i].Item2));
                            }
                            regLists32.ebxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(
                                BitConverter.GetBytes((long)usableX86Opcodes.incEbx.ElementAt(0).Key)),
                                usableX86Opcodes.incEbx.ElementAt(0).Value));
                            SetRegisterModifier(Register32.EBX, zeroEbx[0].Item3, regModified32);
                            regState32 &= ~zeroEbx[0].Item3;
                            regState32 |= Register32.EBX;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EBX))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            var popInstruction = GetPopInstruction(Register32.EBP, i, regModified32);
                            if (popInstruction != null)
                            {
                                for (int j = 0; j < x86Opcodes.add.Count; j++)
                                {
                                    if (!regState32.HasFlag(Register32.EBX))
                                    {
                                        var strings = x86Opcodes.add.ElementAt(j).Value.Split(',');
                                        if (strings[0].Contains(" ebx") && strings[1].Contains(i.ToString().ToLower()))
                                        {
                                            regLists32.ebxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                            byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };//......................................replace this with a more long term solution. Dynamically allocate size based on the size category in 
                                            regLists32.ebxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                            regLists32.ebxList.Add(Tuple.Create(BitConverter.GetBytes((long)x86Opcodes.add.ElementAt(j).Key),
                                                x86Opcodes.add.ElementAt(j).Value));
                                            regLists32.ebxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                            bytes = new byte[] { 0x01, 0x01, 0x10, 0x01 };//......................................replace this with a more long term solution. Dynamically allocate size based on the size category in 
                                            regLists32.ebxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                            regLists32.ebxList.Add(Tuple.Create(BitConverter.GetBytes((long)x86Opcodes.add.ElementAt(j).Key),
                                            x86Opcodes.add.ElementAt(j).Value));
                                            SetRegisterModifier(Register32.EBX, i, regModified32);
                                            regState32 &= ~i;
                                            regState32 |= Register32.EBX;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                if (!regState32.HasFlag(Register32.EBX))
                {
                    regLists32.ebxList = null;
                    regLists32.ebxList = new List<Tuple<byte[], string>>();
                    byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                    regLists32.ebxList.Add(Tuple.Create(nullBytes,
                        "Unable to find appropriate instruction. EBX must be allocated manually"));
                    regState32 |= Register32.EBX;
                }
                #endregion

                #region Populate EDX
                //Populate EDX
                if (!regState32.HasFlag(Register32.EDX))
                {
                    regLists32.edxList = null;
                    regLists32.edxList = new List<Tuple<byte[], string>>();
                    var xorEDX = GetXorInstruction(Register32.EDX);
                    if (xorEDX != null)
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            if (!regState32.HasFlag(Register32.EDX))
                            {
                                var popInstruction = GetPopInstruction(Register32.EDX, i, regModified32);
                                if (popInstruction != null)
                                {
                                    var addInstruction = GetAddInstruction(Register32.EDX, i);
                                    if (addInstruction != null)
                                    {
                                        byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                        byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01 };
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(xorEDX.Item1), xorEDX.Item2));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                        regLists32.edxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00000040"));
                                        regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                        SetRegisterModifier(Register32.EDX, i, regModified32);
                                        regState32 &= ~i;
                                        regState32 |= Register32.EDX;
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDX))
                    {
                        foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                        {
                            var popInstruction = GetPopInstruction(Register32.EDX, i, regModified32);
                            if (popInstruction != null)
                            {
                                foreach (Register32 j in Enum.GetValues(typeof(Register32)))
                                {
                                    if (!regState32.HasFlag(Register32.EDX) && i != j)
                                    {
                                        var popInstruction2 = GetPopInstruction(Register32.EDX, j, regModified32);
                                        if (popInstruction2 != null)
                                        {
                                            var addInstruction = GetAddInstruction(i, j);
                                            if (addInstruction != null)
                                            {
                                                var movInstruction = GetMovInstruction(Register32.EDX, i);
                                                if (movInstruction != null)
                                                {
                                                    byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
                                                    byte[] add2 = new byte[] { 0x41, 0x01, 0x01, 0x01 };
                                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                                    regLists32.edxList.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction2.Item1), popInstruction2.Item2));
                                                    regLists32.edxList.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00001000"));
                                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(addInstruction.Item1), addInstruction.Item2));
                                                    regLists32.edxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                                    SetRegisterModifier(Register32.EDX, i, regModified32);
                                                    SetRegisterModifier(Register32.EDX, j, regModified32);
                                                    regState32 &= ~i;
                                                    regState32 &= ~j;
                                                    regState32 |= Register32.EDX;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.EDX))
                    {
                        regLists32.edxList = null;
                        regLists32.edxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.edxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EDX must be allocated manually"));
                        regState32 |= Register32.EDX;
                    }
                }
                #endregion

                #region Populate ECX
                //Populate ECX
                if (!regState32.HasFlag(Register32.ECX))
                {
                    regLists32.ecxList = null;
                    regLists32.ecxList = new List<Tuple<byte[], string>>();
                    var xorECX = GetXorInstruction(Register32.ECX);
                    if (xorECX != null)
                    {
                        if (!regState32.HasFlag(Register32.ECX))
                        {
                            var movInstruction = GetMovInstruction(Register32.ECX, Register32.ESP);

                            if (movInstruction != null && !movInstruction.Item2.Contains("invalid"))
                            {
                                regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                regState32 |= Register32.ECX;
                            }
                            else if (usableX86Opcodes.pushEsp.Count > 0 && usableX86Opcodes.popEcx.Count > 0)
                            {
                                bool pushEsp = false;
                                bool popEcx = false;
                                for(int i = 0; i < usableX86Opcodes.pushEsp.Count; i++)
                                {
                                    if (usableX86Opcodes.pushEsp.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.pushEsp.ElementAt(i).Value.Contains("invalid"))
                                    {
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                        pushEsp = true;
                                        i = usableX86Opcodes.pushEsp.Count + 1;
                                    }
                                }
                                for (int i = 0; i < usableX86Opcodes.popEcx.Count; i++)
                                {
                                    if (usableX86Opcodes.popEcx.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEcx.ElementAt(i).Value.Contains("invalid"))
                                    {
                                        regLists32.ecxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                        pushEsp = true;
                                        i = usableX86Opcodes.popEcx.Count + 1;
                                    }
                                }
                                if (pushEsp == true && popEcx == true)
                                {
                                    regState32 |= Register32.ECX;
                                }
                                else if(pushEsp == true && popEcx == false)
                                {
                                    byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                                    regLists32.ecxList.Add(Tuple.Create(nullBytes, "Unable to find POP ECX instruction. Must be filled manually"));
                                }
                                else if(pushEsp == false && popEcx == true)
                                {
                                    byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                                    regLists32.ecxList.Add(Tuple.Create(nullBytes, "Unable to find PUSH ESP instruction. Must be filled manually"));
                                }
                            }
                        }
                    }
                    if (!regState32.HasFlag(Register32.ECX))
                    {
                        regLists32.ecxList = null;
                        regLists32.ecxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.ecxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. ECX must be allocated manually"));
                        regState32 |= Register32.ECX;
                    }
                }
                #endregion

                #region Populate EAX
                if (!regState32.HasFlag(Register32.EAX))
                {
                    byte[] nops = new byte[] { 0x90, 0x90, 0x90, 0x90 };
                    regLists32.eaxList = null;
                    regLists32.eaxList = new List<Tuple<byte[], string>>();
                    for (int i = 0; i < usableX86Opcodes.popEax.Count; i++)
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            if (usableX86Opcodes.popEax.ElementAt(i).Value.Length <= 14 && !usableX86Opcodes.popEax.ElementAt(i).Value.Contains("invalid"))
                            {
                                regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.popEax.ElementAt(i).Key)),
                                    usableX86Opcodes.popEax.ElementAt(i).Value));
                                regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                regState32 |= Register32.EAX;
                            }
                        }
                        else
                        {
                            i = usableX86Opcodes.popEax.Count;
                        }
                    }
                    foreach (Register32 i in Enum.GetValues(typeof(Register32)))
                    {
                        if (!regState32.HasFlag(Register32.EAX))
                        {
                            var popInstruction = GetPopInstruction(Register32.EAX, i, regModified32);
                            if (popInstruction != null)
                            {
                                var movInstruction = GetMovInstruction(Register32.EAX, i);
                                if (movInstruction != null)
                                {
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(popInstruction.Item1), popInstruction.Item2));
                                    regLists32.eaxList.Add(Tuple.Create(nops, "NOPS"));
                                    regLists32.eaxList.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(movInstruction.Item1), movInstruction.Item2));
                                    SetRegisterModifier(Register32.EAX, i, regModified32);
                                    regState32 &= ~i;
                                    regState32 |= Register32.EAX;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (!regState32.HasFlag(Register32.EAX))
                    {
                        regLists32.eaxList = null;
                        regLists32.eaxList = new List<Tuple<byte[], string>>();
                        byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                        regLists32.eaxList.Add(Tuple.Create(nullBytes,
                            "Unable to find appropriate instruction. EAX must be allocated manually"));
                        regState32 |= Register32.EAX;
                    }
                }
                #endregion
            }
            VirtualAlloc.ReturnValue = BuildRopChain(regLists32, regModified32, true);
            return VirtualAlloc;
        }
        #endregion

        #region GenerateWriteProcessMemoryChain32
        private ErcResult<List<Tuple<byte[], string>>> GenerateWriteProcessMemoryChain32(ProcessInfo info, byte[] startAddress)
        {
            return null;
        }
        #endregion

        #region BuildRopChain
        private List<Tuple<byte[], string>> BuildRopChain(RegisterLists32 regLists32, RegisterModifiers32 regModified32, bool addJmpEsp = false)
        {
            List<Tuple<byte[], string>> ret = new List<Tuple<byte[], string>>();
            List<ushort> order = new List<ushort>();
            order.Add((ushort)regModified32.EAX);
            order.Add((ushort)regModified32.EBX);
            order.Add((ushort)regModified32.ECX);
            order.Add((ushort)regModified32.EDX);
            order.Add((ushort)regModified32.EBP);
            order.Add((ushort)regModified32.ESP);
            order.Add((ushort)regModified32.ESI);
            order.Add((ushort)regModified32.EDI);
            order = order.OrderByDescending(x => x).ToList();
            order = order.Distinct().ToList();
            for (int i = 0; i < order.Count; i++)
            {
                if((ushort)regModified32.EAX == order[i])
                {
                    for(int j = 0; j < regLists32.eaxList.Count; j++)
                    {
                        ret.Add(regLists32.eaxList[j]);
                    }
                }
                if ((ushort)regModified32.EBX == order[i])
                {
                    for (int j = 0; j < regLists32.ebxList.Count; j++)
                    {
                        ret.Add(regLists32.ebxList[j]);
                    }
                }
                if ((ushort)regModified32.ECX == order[i])
                {
                    for (int j = 0; j < regLists32.ecxList.Count; j++)
                    {
                        ret.Add(regLists32.ecxList[j]);
                    }
                }
                if ((ushort)regModified32.EDX == order[i])
                {
                    for (int j = 0; j < regLists32.edxList.Count; j++)
                    {
                        ret.Add(regLists32.edxList[j]);
                    }
                }
                if ((ushort)regModified32.EBP == order[i])
                {
                    for (int j = 0; j < regLists32.ebpList.Count; j++)
                    {
                        ret.Add(regLists32.ebpList[j]);
                    }
                }
                if ((ushort)regModified32.ESP == order[i])
                {
                    for (int j = 0; j < regLists32.espList.Count; j++)
                    {
                        ret.Add(regLists32.espList[j]);
                    }
                }
                if ((ushort)regModified32.ESI == order[i])
                {
                    for (int j = 0; j < regLists32.esiList.Count; j++)
                    {
                        ret.Add(regLists32.esiList[j]);
                    }
                }
                if ((ushort)regModified32.EDI == order[i])
                {
                    for (int j = 0; j < regLists32.ediList.Count; j++)
                    {
                        ret.Add(regLists32.ediList[j]);
                    }
                }
            }
            if (usableX86Opcodes.pushad.Count > 0 && usableX86Opcodes.pushad.ElementAt(0).Value.Length <= 15)
            ret.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.pushad.ElementAt(0).Key)), 
                usableX86Opcodes.pushad.ElementAt(0).Value));

            if(addJmpEsp == true)
            {
                ret.Add(Tuple.Create(ErcCore.X64toX32PointerModifier(BitConverter.GetBytes((long)usableX86Opcodes.jmpEsp.ElementAt(0).Key)),
                    usableX86Opcodes.jmpEsp.ElementAt(0).Value));
            }

            return ret;
        }
        #endregion 

        #region CalculateAddInstructions32 (Needs Work)
        private byte[] CalculateAddInstructions32(int size)
        {
            byte[] sizeBytes = BitConverter.GetBytes(size);
            byte[] modifiedBytes = new byte[4];

            Array.Copy(sizeBytes, 0, modifiedBytes, modifiedBytes.Length - sizeBytes.Length, sizeBytes.Length);

            for(int i = 0; i < modifiedBytes.Length; i++)
            {
                modifiedBytes[i] += 0x01;
            }
            return modifiedBytes;
        }
        #endregion

        #region ZeroRegister
        /// <summary>
        /// Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
        /// followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
        /// </summary>
        /// <param name="modifyingReg">The Register32 value for the register to be zeroed.</param>
        /// <param name="regModified32">The RegisterModifiers32 object.</param>
        /// <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        private List<Tuple<byte[], string, Register32>> ZeroRegister(Register32 modifyingReg, RegisterModifiers32 regModified32)
        {
            List<Tuple<byte[], string, Register32>> instructions = new List<Tuple<byte[], string, Register32>>();
            var xor = GetXorInstruction(modifyingReg);
            if (xor != null)
            {
                instructions.Add(xor);
                return instructions;
            }

            for (int i = 0; i < usableX86Opcodes.mov.Count; i++)
            {

                string[] gadgetElements = usableX86Opcodes.mov.ElementAt(i).Value.Split(',');
                if (gadgetElements[0].Contains(modifyingReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier32(gadgetElements[1]);
                    if (reg != Register32.NONE && !GetRegisterModified(modifyingReg, reg, regModified32))
                    {
                        var xorReg = GetXorInstruction(reg);
                        if (xorReg != null && !GetRegisterModified(modifyingReg, reg, regModified32))
                        {
                            instructions.Add(xorReg);
                            instructions.Add(Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.mov.ElementAt(i).Key), 
                                usableX86Opcodes.mov.ElementAt(i).Value, reg));
                            return instructions;
                        }
                    }
                }
            }
            return null;
        }
        #endregion

        #region SetRegisterModifier 32 bit
        /// <summary>
        /// Sets the flag of a Register32 enum in a RegisterModifiers32 class. This flag is used to identify whether setting the value of one 
        /// register involved editing another register. For example if setting EAX involved modifying EBX then RegisterModifiers32.EAX will have the EBX flag set. Any
        /// register should not be able to modify the value of any other register twice.
        /// 
        /// The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
        /// </summary>
        /// <param name="modifiedReg">The Registers32 which is being modified</param>
        /// <param name="modifyingReg">The Registers32 which is doing the modification</param>
        /// <param name="regModified32">The RegisterModifiers32 object.</param>
        private void SetRegisterModifier(Register32 modifyingReg, Register32 modifiedReg, RegisterModifiers32 regModified32)
        {
            switch (modifyingReg)
            {
                case Register32.EAX:
                    regModified32.EAX |= modifiedReg;
                    return;
                case Register32.EBX:
                    regModified32.EBX |= modifiedReg;
                    return;
                case Register32.ECX:
                    regModified32.ECX |= modifiedReg;
                    return;
                case Register32.EDX:
                    regModified32.EDX |= modifiedReg;
                    return;
                case Register32.EBP:
                    regModified32.EBP |= modifiedReg;
                    return;
                case Register32.ESP:
                    regModified32.ESP |= modifiedReg;
                    return;
                case Register32.ESI:
                    regModified32.ESI |= modifiedReg;
                    return;
                case Register32.EDI:
                    regModified32.EDI |= modifiedReg;
                    return;
            }
        }
        #endregion

        #region GetRegisterModifier 32 bit
        /// <summary>
        /// Returns a boolean indicating whether one register has modified the value of another register attempting to set the correct value.
        /// </summary>
        /// <param name="modifiedReg">The Registers32 which is being modified</param>
        /// <param name="modifyingReg">The Registers32 which is doing the modification</param>
        /// <param name="regModified32">The RegisterModifiers32 object.</param>
        /// <returns>A bool, true = register was modified by this register false = register was not modified by this register</returns>
        private bool GetRegisterModified(Register32 modifyingReg, Register32 modifiedReg, RegisterModifiers32 regModified32)
        {
            Register32 thisReg;
            bool modified = false;
            switch (modifyingReg)
            {
                case Register32.EAX:
                    thisReg = regModified32.EAX;
                    break;
                case Register32.EBX:
                    thisReg = regModified32.EBX;
                    break;
                case Register32.ECX:
                    thisReg = regModified32.ECX;
                    break;
                case Register32.EDX:
                    thisReg = regModified32.EDX;
                    break;
                case Register32.EBP:
                    thisReg = regModified32.EBP;
                    break;
                case Register32.ESP:
                    thisReg = regModified32.ESP;
                    break;
                case Register32.ESI:
                    thisReg = regModified32.ESI;
                    break;
                case Register32.EDI:
                    thisReg = regModified32.EDI;
                    break;
                default:
                    return true;
            }

            if (thisReg.HasFlag(modifiedReg))
            {
                modified = true;
            }
            return modified;
        }
        #endregion

        #region GetPopInstruction 32 bit
        private Tuple<byte[], string, Register32> GetPopInstruction(Register32 destReg, Register32 srcReg, RegisterModifiers32 regModified32)
        {
           switch(srcReg){
                case Register32.EAX:
                    for (int i = 0; i < usableX86Opcodes.popEax.Count; i++)
                    {
                        if (usableX86Opcodes.popEax.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.EAX, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEax.ElementAt(i).Key), usableX86Opcodes.popEax.ElementAt(i).Value, Register32.EAX);
                        }
                    }
                    break;
                case Register32.EBX:
                    for (int i = 0; i < usableX86Opcodes.popEbx.Count; i++)
                    {
                        if (usableX86Opcodes.popEbx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.EBX, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEbx.ElementAt(i).Key), usableX86Opcodes.popEbx.ElementAt(i).Value, Register32.EBX);
                        }
                    }
                    break;
                case Register32.ECX:
                    for (int i = 0; i < usableX86Opcodes.popEcx.Count; i++)
                    {
                        if (usableX86Opcodes.popEcx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.ECX, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEcx.ElementAt(i).Key), usableX86Opcodes.popEcx.ElementAt(i).Value, Register32.ECX);
                        }
                    }
                    break;
                case Register32.EDX:
                    for (int i = 0; i < usableX86Opcodes.popEdx.Count; i++)
                    {
                        if (usableX86Opcodes.popEdx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.EDX, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEdx.ElementAt(i).Key), usableX86Opcodes.popEdx.ElementAt(i).Value, Register32.EDX);
                        }
                    }
                    break;
                case Register32.EBP:
                    for (int i = 0; i < usableX86Opcodes.popEbp.Count; i++)
                    {
                        if (usableX86Opcodes.popEbp.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.EBP, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEbp.ElementAt(i).Key), usableX86Opcodes.popEbp.ElementAt(i).Value, Register32.EBP);
                        }
                    }
                    break;
                case Register32.ESP:
                    for (int i = 0; i < usableX86Opcodes.popEsp.Count; i++)
                    {
                        if (usableX86Opcodes.popEsp.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.ESP, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEsp.ElementAt(i).Key), usableX86Opcodes.popEsp.ElementAt(i).Value, Register32.ESP);
                        }
                    }
                    break;
                case Register32.ESI:
                    for (int i = 0; i < usableX86Opcodes.popEsi.Count; i++)
                    {
                        if (usableX86Opcodes.popEsi.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.ESI, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEsi.ElementAt(i).Key), usableX86Opcodes.popEsi.ElementAt(i).Value, Register32.ESI);
                        }
                    }
                    break;
                case Register32.EDI:
                    for (int i = 0; i < usableX86Opcodes.popEdi.Count; i++)
                    {
                        if (usableX86Opcodes.popEdi.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register32.EDI, regModified32))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.popEdi.ElementAt(i).Key), usableX86Opcodes.popEdi.ElementAt(i).Value, Register32.EDI);
                        }
                    }
                    break;
                default:
                    return null;
            }
            return null;
        }
        #endregion

        #region getXorInstruction 32 bit
        private Tuple<byte[], string, Register32> GetXorInstruction(Register32 reg)
        {
            switch (reg)
            {
                case Register32.EAX:
                    if (usableX86Opcodes.xorEax.Count > 0 && usableX86Opcodes.xorEax.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEax.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEax.ElementAt(0).Value, Register32.EAX);
                    }
                    break;
                case Register32.EBX:
                    if (usableX86Opcodes.xorEbx.Count > 0 && usableX86Opcodes.xorEbx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEbx.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEbx.ElementAt(0).Value, Register32.EBX);
                    }
                    break;
                case Register32.ECX:
                    if (usableX86Opcodes.xorEcx.Count > 0 && usableX86Opcodes.xorEcx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEcx.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEcx.ElementAt(0).Value, Register32.ECX);
                    }
                    break;
                case Register32.EDX:
                    if (usableX86Opcodes.xorEdx.Count > 0 && usableX86Opcodes.xorEdx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEdx.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEdx.ElementAt(0).Value, Register32.EDX);
                    }
                    break;
                case Register32.ESI:
                    if (usableX86Opcodes.xorEsi.Count > 0 && usableX86Opcodes.xorEsi.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEsi.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEsi.ElementAt(0).Value, Register32.ESI);
                    }
                    break;
                case Register32.EDI:
                    if (usableX86Opcodes.xorEdi.Count > 0 && usableX86Opcodes.xorEdi.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX86Opcodes.xorEdi.ElementAt(0).Key);
                        return Tuple.Create(gadget1, usableX86Opcodes.xorEdi.ElementAt(0).Value, Register32.EDI);
                    }
                    break;
                default:
                    break;
            }
            return null;
        }
        #endregion

        #region GetMovInstruction 32 bit
        /// <summary>
        /// Finds a mov instruction going from the src register to the destination register
        /// </summary>
        /// <param name="destReg">The destination register</param>
        /// <param name="srcReg">The source register</param>
        /// <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        private Tuple<byte[], string, Register32> GetMovInstruction(Register32 destReg, Register32 srcReg)
        {
            for (int i = 0; i < usableX86Opcodes.mov.Count; i++)
            {
                
                string[] gadgetElements = usableX86Opcodes.mov.ElementAt(i).Value.Split(',');

                if (gadgetElements[0].Contains(destReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier32(gadgetElements[1]);
                    if (reg == srcReg)
                    {
                        return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.mov.ElementAt(i).Key), 
                            usableX86Opcodes.mov.ElementAt(i).Value, reg);
                    }
                }
            }
            return null;
        }
        #endregion

        #region GetAddInstruction
        /// <summary>
        /// Finds a add instruction going from the src register to the destination register
        /// </summary>
        /// <param name="destReg">The destination register</param>
        /// <param name="srcReg">The source register</param>
        /// <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        private Tuple<byte[], string, Register32> GetAddInstruction(Register32 destReg, Register32 srcReg)
        {
            for (int i = 0; i < usableX86Opcodes.add.Count; i++)
            {
                string[] gadgetElements = usableX86Opcodes.add.ElementAt(i).Value.Split(',');
                if(gadgetElements[0].Contains(destReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier32(gadgetElements[1]);
                    if (reg == srcReg)
                    {
                        return Tuple.Create(BitConverter.GetBytes((long)usableX86Opcodes.add.ElementAt(i).Key),
                            usableX86Opcodes.add.ElementAt(i).Value, reg);
                    }
                }
            }
            return null;
        }
        #endregion

        #region registerIdentifier32
        private Register32 registerIdentifier32(string reg)
        {
            switch (reg)
            {
                case " eax":
                    return Register32.EAX;
                case " ebx":
                    return Register32.EBX;
                case " ecx":
                    return Register32.ECX;
                case " edx":
                    return Register32.EDX;
                case " ebp":
                    return Register32.EBP;
                case " esp":
                    return Register32.ESP;
                case " esi":
                    return Register32.ESI;
                case " edi":
                    return Register32.EDI;
                default:
                    return Register32.NONE;
            }
        }
        #endregion

        #region CompleteRegisters32
        /// <summary>
        /// Checks all values of a Registers32 enum and returns false if any of them are not set. 
        /// </summary>
        /// <param name="regState">The Registers32 object to be tested</param>
        /// <returns>A boolean value is returned</returns>
        private bool CompleteRegisters32(Register32 regState)
        {
            bool complete = true;

            if (!regState.HasFlag(Register32.EAX))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.EBX))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.ECX))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.EDX))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.EBP))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.ESP))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.ESI))
            {
                return false;
            }
            if (!regState.HasFlag(Register32.EDI))
            {
                return false;
            }

            return complete;
        }
        #endregion

        #region Registers32 
        private enum Register32 : ushort
        {
            NONE = 0,
            [Description(" eax")]
            EAX  = 1,
            [Description(" ebx")]
            EBX  = 2,
            [Description(" ecx")]
            ECX  = 4,
            [Description(" edx")]
            EDX  = 8,
            [Description(" ebp")]
            EBP  = 16,
            [Description(" esp")]
            ESP  = 32,
            [Description(" esi")]
            ESI  = 64,
            [Description(" edi")]
            EDI  = 128
        }
        #endregion

        #region Opcode List Holders
        /// <summary>
        /// Contains lists of instructions for specific registers.
        /// </summary>
        public class X86Lists
        {
            /// <summary>
            /// pushEax list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEbx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEcx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEdx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEbp list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEsi list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushEdi list.
            /// </summary>
            public Dictionary<IntPtr, string> pushEdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// jmpEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> jmpEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// callEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> callEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEax list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEbx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEcx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEdx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEsi list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorEdi list.
            /// </summary>
            public Dictionary<IntPtr, string> xorEdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEax list.
            /// </summary>
            public Dictionary<IntPtr, string> popEax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEbx list.
            /// </summary>
            public Dictionary<IntPtr, string> popEbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEcx list.
            /// </summary>
            public Dictionary<IntPtr, string> popEcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEdx list.
            /// </summary>
            public Dictionary<IntPtr, string> popEdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> popEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEbp list.
            /// </summary>
            public Dictionary<IntPtr, string> popEbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEsi list.
            /// </summary>
            public Dictionary<IntPtr, string> popEsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popEdi list.
            /// </summary>
            public Dictionary<IntPtr, string> popEdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushad list.
            /// </summary>
            public Dictionary<IntPtr, string> pushad = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEax list.
            /// </summary>
            public Dictionary<IntPtr, string> incEax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEbx list.
            /// </summary>
            public Dictionary<IntPtr, string> incEbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEcx list.
            /// </summary>
            public Dictionary<IntPtr, string> incEcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEdx list.
            /// </summary>
            public Dictionary<IntPtr, string> incEdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEbp list.
            /// </summary>
            public Dictionary<IntPtr, string> incEbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> incEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEsi list.
            /// </summary>
            public Dictionary<IntPtr, string> incEsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incEdi list.
            /// </summary>
            public Dictionary<IntPtr, string> incEdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEax list.
            /// </summary>
            public Dictionary<IntPtr, string> decEax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEbx list.
            /// </summary>
            public Dictionary<IntPtr, string> decEbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEcx list.
            /// </summary>
            public Dictionary<IntPtr, string> decEcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEdx list.
            /// </summary>
            public Dictionary<IntPtr, string> decEdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEbp list.
            /// </summary>
            public Dictionary<IntPtr, string> decEbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEsp list.
            /// </summary>
            public Dictionary<IntPtr, string> decEsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEsi list.
            /// </summary>
            public Dictionary<IntPtr, string> decEsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decEdi list.
            /// </summary>
            public Dictionary<IntPtr, string> decEdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// add list.
            /// </summary>
            public Dictionary<IntPtr, string> add = new Dictionary<IntPtr, string>();
            /// <summary>
            /// sub list.
            /// </summary>
            public Dictionary<IntPtr, string> sub = new Dictionary<IntPtr, string>();
            /// <summary>
            /// mov list.
            /// </summary>
            public Dictionary<IntPtr, string> mov = new Dictionary<IntPtr, string>();
            /// <summary>
            /// and list.
            /// </summary>
            public Dictionary<IntPtr, string> and = new Dictionary<IntPtr, string>();
        }
        #endregion

        private class RegisterModifiers32
        {
            public Register32 EAX;
            public Register32 EBX;
            public Register32 ECX;
            public Register32 EDX;
            public Register32 EBP;
            public Register32 ESP;
            public Register32 ESI;
            public Register32 EDI;
        }

        private class RegisterLists32
        {
            public List<Tuple<byte[], string>> eaxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> ebxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> ecxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> edxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> ebpList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> espList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> esiList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> ediList = new List<Tuple<byte[], string>>();
        }

        /// <summary>
        /// Enum of methods which can be used to generate a ROP chain.
        /// </summary>
        [Flags]
        public enum RopMethod : ushort
        {
            [Description(" VirtualAlloc")]          VirtualAlloc        = 1, 
            [Description(" HeapCreate")]            HeapCreate          = 2, 
            [Description(" VirtualProtect")]        VirtualProtect      = 4, 
            [Description(" WriteProcessMemory")]    WriteProcessMemory  = 8, 
            [Description(" All")]                   All                 = 15  
        }
    }
}



================================================
File: ERC/ERC/RopChainGenerator64.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.InteropServices;

namespace ERC.Utilities
{
    /// <summary> Attempts to create Rop chains from 64 bit processes. </summary>
    public class RopChainGenerator64
    {
        #region Class Variables
        private const int MEM_COMMIT = 0x1000;

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> VirtualAllocChain = new List<Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> HeapCreateChain = new List<Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> VirtualProtectChain = new List<Tuple<byte[], string>>();

        /// <summary>
        /// Contains a ROP chain which calls the VirtualAlloc method.
        /// </summary>
        public List<Tuple<byte[], string>> WriteProcessMemoryChain = new List<Tuple<byte[], string>>();

        RopMethod Methods;
        internal X64Lists x64Opcodes;
        internal X64Lists usableX64Opcodes;
        internal ProcessInfo RcgInfo;
        private Dictionary<string, IntPtr> ApiAddresses = new Dictionary<string, IntPtr>();
        private List<IntPtr> RopNops = new List<IntPtr>();
        private List<byte[]> opcodes64 = new List<byte[]>();
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="_info">ProcessInfo object for which a ROP chain will be generated</param>
        public RopChainGenerator64(ProcessInfo _info)
        {
            if (_info.ProcessMachineType == MachineType.x64)
            {
                x64Opcodes = new X64Lists();
            }
            else
            {
                throw new ArgumentException("Fatal Error: This is not a 64bit process.");
            }

            RcgInfo = _info;
            byte[] pushRax = new byte[] { 0x50 };
            byte[] pushRcx = new byte[] { 0x51 };
            byte[] pushRdx = new byte[] { 0x51 };
            byte[] pushRbx = new byte[] { 0x53 };
            byte[] pushRsp = new byte[] { 0x54 };
            byte[] pushRbp = new byte[] { 0x55 };
            byte[] pushRsi = new byte[] { 0x56 };
            byte[] pushRdi = new byte[] { 0x57 };
            byte[] pushR8 = new byte[] { 0x41, 0x50 };
            byte[] pushR9 = new byte[] { 0x41, 0x51 };
            byte[] pushR10 = new byte[] { 0x41, 0x52 };
            byte[] pushR11 = new byte[] { 0x41, 0x53 };
            byte[] pushR12 = new byte[] { 0x41, 0x54 };
            byte[] pushR13 = new byte[] { 0x41, 0x55 };
            byte[] pushR14 = new byte[] { 0x41, 0x56 };
            byte[] pushR15 = new byte[] { 0x41, 0x57 };
            byte[] popRax = new byte[] { 0x58 };
            byte[] popRbx = new byte[] { 0x5B };
            byte[] popRcx = new byte[] { 0x59 };
            byte[] popRdx = new byte[] { 0x5A };
            byte[] popRsp = new byte[] { 0x5C };
            byte[] popRbp = new byte[] { 0x5D };
            byte[] popRsi = new byte[] { 0x5E };
            byte[] popRdi = new byte[] { 0x5F };
            byte[] popR8 = new byte[] { 0x41, 0x58 };
            byte[] popR9 = new byte[] { 0x41, 0x59 };
            byte[] popR10 = new byte[] { 0x41, 0x5A };
            byte[] popR11 = new byte[] { 0x41, 0x5B };
            byte[] popR12 = new byte[] { 0x41, 0x5C };
            byte[] popR13 = new byte[] { 0x41, 0x5D };
            byte[] popR14 = new byte[] { 0x41, 0x5E };
            byte[] popR15 = new byte[] { 0x41, 0x5F };
            byte[] xorRax = new byte[] { 0x48, 0x31, 0xC0 };
            byte[] xorRbx = new byte[] { 0x48, 0x31, 0xD8 };
            byte[] xorRcx = new byte[] { 0x48, 0x31, 0xC9 };
            byte[] xorRdx = new byte[] { 0x48, 0x31, 0xD2 };
            byte[] xorRsi = new byte[] { 0x48, 0x31, 0xF6 };
            byte[] xorRdi = new byte[] { 0x48, 0x31, 0xFF };
            byte[] xorRsp = new byte[] { 0x48, 0x31, 0xE4 };
            byte[] xorRbp = new byte[] { 0x48, 0x31, 0xED };
            byte[] xorR8 = new byte[] { 0x48, 0x31, 0xC8 };
            byte[] xorR9 = new byte[] { 0x48, 0x31, 0xC9 };
            byte[] xorR10 = new byte[] { 0x48, 0x31, 0xD2 };
            byte[] xorR11 = new byte[] { 0x48, 0x31, 0xDB };
            byte[] xorR12 = new byte[] { 0x48, 0x31, 0xE4 };
            byte[] xorR13 = new byte[] { 0x48, 0x31, 0xED };
            byte[] xorR14 = new byte[] { 0x48, 0x31, 0xF6 };
            byte[] xorR15 = new byte[] { 0x48, 0x31, 0xFF };
            byte[] jmpRsp = new byte[] { 0xFF, 0xE4 };
            byte[] callRsp = new byte[] { 0xFF, 0xD4 };
            byte[] incRax = new byte[] { 0x48, 0xFF, 0xC0}; 
            byte[] incRbx = new byte[] { 0x48, 0xFF, 0xC3 };
            byte[] incRcx = new byte[] { 0x48, 0xFF, 0xC1 };
            byte[] incRdx = new byte[] { 0x48, 0xFF, 0xC2 };
            byte[] incRbp = new byte[] { 0x48, 0xFF, 0xC5 };
            byte[] incRsp = new byte[] { 0x48, 0xFF, 0xC4 };
            byte[] incRsi = new byte[] { 0x48, 0xFF, 0xC6 };
            byte[] incRdi = new byte[] { 0x48, 0xFF, 0xC7 };
            byte[] incR8 = new byte[] { 0x49, 0xFF, 0xC0 };
            byte[] incR9 = new byte[] { 0x49, 0xFF, 0xC1 };
            byte[] incR10 = new byte[] { 0x49, 0xFF, 0xC2 };
            byte[] incR11 = new byte[] { 0x49, 0xFF, 0xC3 };
            byte[] incR12 = new byte[] { 0x49, 0xFF, 0xC4 };
            byte[] incR13 = new byte[] { 0x49, 0xFF, 0xC5 };
            byte[] incR14 = new byte[] { 0x49, 0xFF, 0xC6 };
            byte[] incR15 = new byte[] { 0x49, 0xFF, 0xC7 };
            byte[] decRax = new byte[] { 0x48, 0xFF, 0xC8 };
            byte[] decRbx = new byte[] { 0x48, 0xFF, 0xCB };
            byte[] decRcx = new byte[] { 0x48, 0xFF, 0xC9 };
            byte[] decRdx = new byte[] { 0x48, 0xFF, 0xCA };
            byte[] decRbp = new byte[] { 0x48, 0xFF, 0xCD }; 
            byte[] decRsp = new byte[] { 0x48, 0xFF, 0xCC };
            byte[] decRsi = new byte[] { 0x48, 0xFF, 0xCE };
            byte[] decRdi = new byte[] { 0x48, 0xFF, 0xCF };
            byte[] decR8 = new byte[] { 0x49, 0xFF, 0xC8 };
            byte[] decR9 = new byte[] { 0x49, 0xFF, 0xC9 };
            byte[] decR10 = new byte[] { 0x49, 0xFF, 0xCA };
            byte[] decR11 = new byte[] { 0x49, 0xFF, 0xCB };
            byte[] decR12 = new byte[] { 0x49, 0xFF, 0xCC };
            byte[] decR13 = new byte[] { 0x49, 0xFF, 0xCD };
            byte[] decR14 = new byte[] { 0x49, 0xFF, 0xCE };
            byte[] decR15 = new byte[] { 0x49, 0xFF, 0xCF };
            byte[] add1 = new byte[] { 0x48, 0x01 };           
            byte[] add2 = new byte[] { 0x4C, 0x01 };
            byte[] add3 = new byte[] { 0x49, 0x01 };
            byte[] add4 = new byte[] { 0x4D, 0x01 };
            byte[] mov1 = new byte[] { 0x48, 0x89 };
            byte[] mov2 = new byte[] { 0x4C, 0x89 };
            byte[] mov3 = new byte[] { 0x49, 0x89 };
            byte[] mov4 = new byte[] { 0x4D, 0x89 };
            byte[] sub1 = new byte[] { 0x48, 0x29 };
            byte[] sub2 = new byte[] { 0x4C, 0x29 };
            byte[] sub3 = new byte[] { 0x49, 0x29 };
            byte[] sub4 = new byte[] { 0x4D, 0x29 };
            byte[] jmpRax = new byte[] { 0xFF, 0xD0 };
            byte[] callRax = new byte[] { 0xFF, 0xE0 };

            opcodes64.Add(pushRax);
            opcodes64.Add(pushRcx);
            opcodes64.Add(pushRdx);
            opcodes64.Add(pushRbx);
            opcodes64.Add(pushRsp);
            opcodes64.Add(pushRbp);
            opcodes64.Add(pushRsi);
            opcodes64.Add(pushRdi);
            opcodes64.Add(pushR8);
            opcodes64.Add(pushR9);
            opcodes64.Add(pushR10);
            opcodes64.Add(pushR11);
            opcodes64.Add(pushR12);
            opcodes64.Add(pushR13);
            opcodes64.Add(pushR14);
            opcodes64.Add(pushR15);
            opcodes64.Add(popRax);
            opcodes64.Add(popRbx);
            opcodes64.Add(popRcx);
            opcodes64.Add(popRdx);
            opcodes64.Add(popRsp);
            opcodes64.Add(popRbp);
            opcodes64.Add(popRsi);
            opcodes64.Add(popRdi);
            opcodes64.Add(popR8);
            opcodes64.Add(popR9);
            opcodes64.Add(popR10);
            opcodes64.Add(popR11);
            opcodes64.Add(popR12);
            opcodes64.Add(popR13);
            opcodes64.Add(popR14);
            opcodes64.Add(popR15);
            opcodes64.Add(xorRax);
            opcodes64.Add(xorRbx);
            opcodes64.Add(xorRcx);
            opcodes64.Add(xorRdx);
            opcodes64.Add(xorRsi);
            opcodes64.Add(xorRdi);
            opcodes64.Add(xorRsp);
            opcodes64.Add(xorRbp);
            opcodes64.Add(xorR8);
            opcodes64.Add(xorR9);
            opcodes64.Add(xorR10);
            opcodes64.Add(xorR11);
            opcodes64.Add(xorR12);
            opcodes64.Add(xorR13);
            opcodes64.Add(xorR14);
            opcodes64.Add(xorR15);
            opcodes64.Add(jmpRsp);
            opcodes64.Add(callRsp);
            opcodes64.Add(incRax);
            opcodes64.Add(incRbx);
            opcodes64.Add(incRcx);
            opcodes64.Add(incRdx);
            opcodes64.Add(incRbp);
            opcodes64.Add(incRsp);
            opcodes64.Add(incRsi);
            opcodes64.Add(incRdi);
            opcodes64.Add(incR8);
            opcodes64.Add(incR9);
            opcodes64.Add(incR10);
            opcodes64.Add(incR11);
            opcodes64.Add(incR12);
            opcodes64.Add(incR13);
            opcodes64.Add(incR14);
            opcodes64.Add(incR15);
            opcodes64.Add(decRax);
            opcodes64.Add(decRbx);
            opcodes64.Add(decRcx);
            opcodes64.Add(decRdx);
            opcodes64.Add(decRbp);
            opcodes64.Add(decRsp);
            opcodes64.Add(decRsi);
            opcodes64.Add(decRdi);
            opcodes64.Add(decR8);
            opcodes64.Add(decR9);
            opcodes64.Add(decR10);
            opcodes64.Add(decR11);
            opcodes64.Add(decR12);
            opcodes64.Add(decR13);
            opcodes64.Add(decR14);
            opcodes64.Add(decR15);
            opcodes64.Add(add1);
            opcodes64.Add(add2);
            opcodes64.Add(add3);
            opcodes64.Add(add4);
            opcodes64.Add(mov1);
            opcodes64.Add(mov2);
            opcodes64.Add(mov3);
            opcodes64.Add(mov4);
            opcodes64.Add(sub1);
            opcodes64.Add(sub2);
            opcodes64.Add(sub3);
            opcodes64.Add(sub4);
            opcodes64.Add(jmpRax);
            opcodes64.Add(callRax);
        }
        #endregion

        #region GenerateRopGadgets64
        /// <summary>
        /// Creates a list of ROP gadgets for a specific process.
        /// </summary>
        /// <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopGadgets64(byte[] ptrsToExclude = null, List<string> excludes = null)
        {
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x64Opcodes = new X64Lists();

            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
            }

            var ret2 = GetRopNops(RcgInfo, excludes);
            if (ret2.Error != null && RopNops.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret2.Error;
            }

            var ret3 = PopulateOpcodes(RcgInfo);
            if (ret3.Error != null)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret3.Error;
            }

            OptimiseLists(RcgInfo);
            usableX64Opcodes.pushRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRax, ptrsToExclude);
            usableX64Opcodes.pushRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRcx, ptrsToExclude);
            usableX64Opcodes.pushRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRdx, ptrsToExclude);
            usableX64Opcodes.pushRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRbx, ptrsToExclude);
            usableX64Opcodes.pushRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRsp, ptrsToExclude);
            usableX64Opcodes.pushRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRbp, ptrsToExclude);
            usableX64Opcodes.pushRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRsi, ptrsToExclude);
            usableX64Opcodes.pushRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRdi, ptrsToExclude);
            usableX64Opcodes.pushR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR8, ptrsToExclude);
            usableX64Opcodes.pushR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR9, ptrsToExclude);
            usableX64Opcodes.pushR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR10, ptrsToExclude);
            usableX64Opcodes.pushR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR11, ptrsToExclude);
            usableX64Opcodes.pushR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR12, ptrsToExclude);
            usableX64Opcodes.pushR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR13, ptrsToExclude);
            usableX64Opcodes.pushR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR14, ptrsToExclude);
            usableX64Opcodes.pushR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR15, ptrsToExclude);
            usableX64Opcodes.popRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRax, ptrsToExclude);
            usableX64Opcodes.popRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRbx, ptrsToExclude);
            usableX64Opcodes.popRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRcx, ptrsToExclude);
            usableX64Opcodes.popRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRdx, ptrsToExclude);
            usableX64Opcodes.popRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRsp, ptrsToExclude);
            usableX64Opcodes.popRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRbp, ptrsToExclude);
            usableX64Opcodes.popRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRsi, ptrsToExclude);
            usableX64Opcodes.popRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRdi, ptrsToExclude);
            usableX64Opcodes.popR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR8, ptrsToExclude);
            usableX64Opcodes.popR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR9, ptrsToExclude);
            usableX64Opcodes.popR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR10, ptrsToExclude);
            usableX64Opcodes.popR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR11, ptrsToExclude);
            usableX64Opcodes.popR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR12, ptrsToExclude);
            usableX64Opcodes.popR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR13, ptrsToExclude);
            usableX64Opcodes.popR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR14, ptrsToExclude);
            usableX64Opcodes.popR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR15, ptrsToExclude);
            usableX64Opcodes.xorRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRax, ptrsToExclude);
            usableX64Opcodes.xorRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRbx, ptrsToExclude);
            usableX64Opcodes.xorRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRcx, ptrsToExclude);
            usableX64Opcodes.xorRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRdx, ptrsToExclude);
            usableX64Opcodes.xorRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRsi, ptrsToExclude);
            usableX64Opcodes.xorRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRdi, ptrsToExclude);
            usableX64Opcodes.xorRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRsp, ptrsToExclude);
            usableX64Opcodes.xorRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRbp, ptrsToExclude);
            usableX64Opcodes.xorR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR8, ptrsToExclude);
            usableX64Opcodes.xorR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR9, ptrsToExclude);
            usableX64Opcodes.xorR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR10, ptrsToExclude);
            usableX64Opcodes.xorR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR11, ptrsToExclude);
            usableX64Opcodes.xorR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR12, ptrsToExclude);
            usableX64Opcodes.xorR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR13, ptrsToExclude);
            usableX64Opcodes.xorR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR14, ptrsToExclude);
            usableX64Opcodes.xorR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR15, ptrsToExclude);
            usableX64Opcodes.jmpRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.jmpRsp, ptrsToExclude);
            usableX64Opcodes.callRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.callRsp, ptrsToExclude);
            usableX64Opcodes.incRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRax, ptrsToExclude);
            usableX64Opcodes.incRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRbx, ptrsToExclude);
            usableX64Opcodes.incRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRcx, ptrsToExclude);
            usableX64Opcodes.incRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRdx, ptrsToExclude);
            usableX64Opcodes.incRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRbp, ptrsToExclude);
            usableX64Opcodes.incRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRsp, ptrsToExclude);
            usableX64Opcodes.incRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRsi, ptrsToExclude);
            usableX64Opcodes.incRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRdi, ptrsToExclude);
            usableX64Opcodes.incR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR8, ptrsToExclude);
            usableX64Opcodes.incR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR9, ptrsToExclude);
            usableX64Opcodes.incR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR10, ptrsToExclude);
            usableX64Opcodes.incR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR11, ptrsToExclude);
            usableX64Opcodes.incR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR12, ptrsToExclude);
            usableX64Opcodes.incR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR13, ptrsToExclude);
            usableX64Opcodes.incR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR14, ptrsToExclude);
            usableX64Opcodes.incR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR15, ptrsToExclude);
            usableX64Opcodes.decRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRax, ptrsToExclude);
            usableX64Opcodes.decRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRbx, ptrsToExclude);
            usableX64Opcodes.decRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRcx, ptrsToExclude);
            usableX64Opcodes.decRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRdx, ptrsToExclude);
            usableX64Opcodes.decRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRbp, ptrsToExclude);
            usableX64Opcodes.decRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRsp, ptrsToExclude);
            usableX64Opcodes.decRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRsi, ptrsToExclude);
            usableX64Opcodes.decRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRdi, ptrsToExclude);
            usableX64Opcodes.decR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR8, ptrsToExclude);
            usableX64Opcodes.decR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR9, ptrsToExclude);
            usableX64Opcodes.decR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR10, ptrsToExclude);
            usableX64Opcodes.decR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR11, ptrsToExclude);
            usableX64Opcodes.decR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR12, ptrsToExclude);
            usableX64Opcodes.decR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR13, ptrsToExclude);
            usableX64Opcodes.decR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR14, ptrsToExclude);
            usableX64Opcodes.decR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR15, ptrsToExclude);
            usableX64Opcodes.add = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.add, ptrsToExclude);
            usableX64Opcodes.mov = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.mov, ptrsToExclude);
            usableX64Opcodes.sub = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.sub, ptrsToExclude);

            DisplayOutput.RopChainGadgets64(this, true);
            return RopChain;
        }
        #endregion 

        #region GenerateRopChain64
        /// <summary>
        /// Creates a RopChain for a specific process.
        /// </summary>
        /// <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
        /// <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopChain64(byte[] ptrsToExclude, byte[] startAddress = null, List<string> excludes = null, RopMethod methods = RopMethod.All)
        {
            Methods = methods;
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x64Opcodes = new X64Lists();

            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
            }

            if (excludes != null)
            {
                var ret2 = GetRopNops(RcgInfo, excludes);
                if (ret2.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret2.Error;
                    return failed;
                }
            }
            else
            {
                var ret2 = GetRopNops(RcgInfo);
                if (ret2.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret2.Error;
                    return failed;
                }
            }

            var ret3 = PopulateOpcodes(RcgInfo);
            if (ret3.Error != null)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret3.Error;
            }

            OptimiseLists(RcgInfo);
            usableX64Opcodes.pushRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRax, ptrsToExclude);
            usableX64Opcodes.pushRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRcx, ptrsToExclude);
            usableX64Opcodes.pushRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRdx, ptrsToExclude);
            usableX64Opcodes.pushRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRbx, ptrsToExclude);
            usableX64Opcodes.pushRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRsp, ptrsToExclude);
            usableX64Opcodes.pushRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRbp, ptrsToExclude);
            usableX64Opcodes.pushRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRsi, ptrsToExclude);
            usableX64Opcodes.pushRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushRdi, ptrsToExclude);
            usableX64Opcodes.pushR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR8, ptrsToExclude);
            usableX64Opcodes.pushR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR9, ptrsToExclude);
            usableX64Opcodes.pushR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR10, ptrsToExclude);
            usableX64Opcodes.pushR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR11, ptrsToExclude);
            usableX64Opcodes.pushR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR12, ptrsToExclude);
            usableX64Opcodes.pushR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR13, ptrsToExclude);
            usableX64Opcodes.pushR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR14, ptrsToExclude);
            usableX64Opcodes.pushR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.pushR15, ptrsToExclude);
            usableX64Opcodes.popRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRax, ptrsToExclude);
            usableX64Opcodes.popRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRbx, ptrsToExclude);
            usableX64Opcodes.popRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRcx, ptrsToExclude);
            usableX64Opcodes.popRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRdx, ptrsToExclude);
            usableX64Opcodes.popRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRsp, ptrsToExclude);
            usableX64Opcodes.popRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRbp, ptrsToExclude);
            usableX64Opcodes.popRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRsi, ptrsToExclude);
            usableX64Opcodes.popRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popRdi, ptrsToExclude);
            usableX64Opcodes.popR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR8, ptrsToExclude);
            usableX64Opcodes.popR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR9, ptrsToExclude);
            usableX64Opcodes.popR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR10, ptrsToExclude);
            usableX64Opcodes.popR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR11, ptrsToExclude);
            usableX64Opcodes.popR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR12, ptrsToExclude);
            usableX64Opcodes.popR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR13, ptrsToExclude);
            usableX64Opcodes.popR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR14, ptrsToExclude);
            usableX64Opcodes.popR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.popR15, ptrsToExclude);
            usableX64Opcodes.xorRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRax, ptrsToExclude);
            usableX64Opcodes.xorRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRbx, ptrsToExclude);
            usableX64Opcodes.xorRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRcx, ptrsToExclude);
            usableX64Opcodes.xorRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRdx, ptrsToExclude);
            usableX64Opcodes.xorRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRsi, ptrsToExclude);
            usableX64Opcodes.xorRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRdi, ptrsToExclude);
            usableX64Opcodes.xorRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRsp, ptrsToExclude);
            usableX64Opcodes.xorRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorRbp, ptrsToExclude);
            usableX64Opcodes.xorR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR8, ptrsToExclude);
            usableX64Opcodes.xorR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR9, ptrsToExclude);
            usableX64Opcodes.xorR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR10, ptrsToExclude);
            usableX64Opcodes.xorR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR11, ptrsToExclude);
            usableX64Opcodes.xorR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR12, ptrsToExclude);
            usableX64Opcodes.xorR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR13, ptrsToExclude);
            usableX64Opcodes.xorR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR14, ptrsToExclude);
            usableX64Opcodes.xorR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.xorR15, ptrsToExclude);
            usableX64Opcodes.jmpRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.jmpRsp, ptrsToExclude);
            usableX64Opcodes.callRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.callRsp, ptrsToExclude);
            usableX64Opcodes.incRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRax, ptrsToExclude);
            usableX64Opcodes.incRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRbx, ptrsToExclude);
            usableX64Opcodes.incRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRcx, ptrsToExclude);
            usableX64Opcodes.incRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRdx, ptrsToExclude);
            usableX64Opcodes.incRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRbp, ptrsToExclude);
            usableX64Opcodes.incRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRsp, ptrsToExclude);
            usableX64Opcodes.incRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRsi, ptrsToExclude);
            usableX64Opcodes.incRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incRdi, ptrsToExclude);
            usableX64Opcodes.incR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR8, ptrsToExclude);
            usableX64Opcodes.incR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR9, ptrsToExclude);
            usableX64Opcodes.incR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR10, ptrsToExclude);
            usableX64Opcodes.incR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR11, ptrsToExclude);
            usableX64Opcodes.incR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR12, ptrsToExclude);
            usableX64Opcodes.incR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR13, ptrsToExclude);
            usableX64Opcodes.incR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR14, ptrsToExclude);
            usableX64Opcodes.incR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.incR15, ptrsToExclude);
            usableX64Opcodes.decRax = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRax, ptrsToExclude);
            usableX64Opcodes.decRbx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRbx, ptrsToExclude);
            usableX64Opcodes.decRcx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRcx, ptrsToExclude);
            usableX64Opcodes.decRdx = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRdx, ptrsToExclude);
            usableX64Opcodes.decRbp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRbp, ptrsToExclude);
            usableX64Opcodes.decRsp = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRsp, ptrsToExclude);
            usableX64Opcodes.decRsi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRsi, ptrsToExclude);
            usableX64Opcodes.decRdi = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decRdi, ptrsToExclude);
            usableX64Opcodes.decR8 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR8, ptrsToExclude);
            usableX64Opcodes.decR9 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR9, ptrsToExclude);
            usableX64Opcodes.decR10 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR10, ptrsToExclude);
            usableX64Opcodes.decR11 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR11, ptrsToExclude);
            usableX64Opcodes.decR12 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR12, ptrsToExclude);
            usableX64Opcodes.decR13 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR13, ptrsToExclude);
            usableX64Opcodes.decR14 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR14, ptrsToExclude);
            usableX64Opcodes.decR15 = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.decR15, ptrsToExclude);
            usableX64Opcodes.add = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.add, ptrsToExclude);
            usableX64Opcodes.mov = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.mov, ptrsToExclude);
            usableX64Opcodes.sub = PtrRemover.RemovePointers(RcgInfo.ProcessMachineType, usableX64Opcodes.sub, ptrsToExclude);

            if (Methods.HasFlag(RopMethod.VirtualAlloc))
            {
                var vpaChain = GenerateVirtualAllocChain64(RcgInfo);
                if (vpaChain.Error == null)
                {
                    VirtualAllocChain = vpaChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.HeapCreate))
            {
                var hcChain = GenerateHeapCreateChain64(RcgInfo);
                if (hcChain.Error == null)
                {
                    HeapCreateChain = hcChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.VirtualProtect))
            {
                var vpChain = GenerateVirtualProtectChain64(RcgInfo);
                if (vpChain.Error == null)
                {
                    VirtualProtectChain = vpChain.ReturnValue;
                }
            }

            var output = DisplayOutput.RopChainGadgets64(this);
            RopChain.ReturnValue = String.Join("\n", output);
            return RopChain;
        }

        /// <summary>
        /// Creates a RopChain for a specific process.
        /// </summary>
        /// <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
        /// <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
        /// <returns>Returns an ErcResult string containing</returns>
        public ErcResult<string> GenerateRopChain64(byte[] startAddress = null, List<string> excludes = null, RopMethod methods = RopMethod.All)
        {
            Methods = methods;
            ErcResult<string> RopChain = new ErcResult<string>(RcgInfo.ProcessCore);
            x64Opcodes = new X64Lists();

            Console.WriteLine("Getting API Addresses...");
            var ret1 = GetApiAddresses(RcgInfo);
            if (ret1.Error != null && ApiAddresses.Count <= 0)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret1.Error;
            }

            Console.WriteLine("Getting RopNops...");
            if(excludes != null)
            {
                var ret2 = GetRopNops(RcgInfo, excludes);
                if (ret2.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret2.Error;
                    return failed;
                }
            }
            else
            {
                var ret2 = GetRopNops(RcgInfo);
                if (ret2.Error != null && RopNops.Count <= 0)
                {
                    ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                    failed.ReturnValue = "An error has occured, check log file for more details.";
                    failed.Error = ret2.Error;
                    return failed;
                }
            }

            Console.WriteLine("Populating Opcodes...");
            var ret3 = PopulateOpcodes(RcgInfo);
            if (ret3.Error != null)
            {
                ErcResult<string> failed = new ErcResult<string>(RcgInfo.ProcessCore);
                failed.ReturnValue = "An error has occured, check log file for more details.";
                failed.Error = ret3.Error;
            }

            Console.WriteLine("Optimizing Lists...");
            OptimiseLists(RcgInfo);

            Console.WriteLine("Generating VirtualAlloc Chain...");
            if (Methods.HasFlag(RopMethod.VirtualAlloc))
            {
                var vpaChain = GenerateVirtualAllocChain64(RcgInfo);
                if (vpaChain.Error == null)
                {
                    VirtualAllocChain = vpaChain.ReturnValue;
                }
            }

            Console.WriteLine("Generating HeapCreate Chain...");
            if (Methods.HasFlag(RopMethod.HeapCreate))
            {
                var hcChain = GenerateHeapCreateChain64(RcgInfo);
                if (hcChain.Error == null)
                {
                    HeapCreateChain = hcChain.ReturnValue;
                }
            }

            if (Methods.HasFlag(RopMethod.VirtualProtect))
            {
                var vpChain = GenerateVirtualProtectChain64(RcgInfo);
                if (vpChain.Error == null)
                {
                    VirtualProtectChain = vpChain.ReturnValue;
                }
            }

            var output = DisplayOutput.RopChainGadgets64(this);
            RopChain.ReturnValue = String.Join("\n", output);
            return RopChain;
        }
        #endregion

        #region GetApiAddresses
        private ErcResult<int> GetApiAddresses(ProcessInfo info)
        {
            ErcResult<int> returnVar = new ErcResult<int>(info.ProcessCore);
            returnVar.ReturnValue = 0;

            IntPtr hModule = IntPtr.Zero;
            for (int i = 0; i < info.ModulesInfo.Count; i++)
            {
                if (info.ModulesInfo[i].ModuleName == "kernel32")
                {
                    hModule = info.ModulesInfo[i].ModuleBase;
                }
            }

            var virtAllocAddress = ErcCore.GetProcAddress(hModule, "VirtualAlloc");
            if (virtAllocAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("VirtualAlloc", virtAllocAddress);
            }

            var HeapCreateAddress = ErcCore.GetProcAddress(hModule, "HeapCreate");
            if (HeapCreateAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("HeapCreate", HeapCreateAddress);
            }

            var VirtualProtectAddress = ErcCore.GetProcAddress(hModule, "VirtualProtect");
            if (VirtualProtectAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("VirtualProtect", VirtualProtectAddress);
            }

            var WriteProcessMemoryAddress = ErcCore.GetProcAddress(hModule, "WriteProcessMemory");
            if (WriteProcessMemoryAddress == IntPtr.Zero)
            {
                returnVar.Error = new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                returnVar.LogEvent();
            }
            else
            {
                ApiAddresses.Add("WriteProcessMemory", WriteProcessMemoryAddress);
            }

            return returnVar;
        }
        #endregion

        #region GetRopNops
        private ErcResult<List<IntPtr>> GetRopNops(ProcessInfo info, List<string> excludes = null)
        {
            ErcResult<List<IntPtr>> ropNopsResult = new ErcResult<List<IntPtr>>(info.ProcessCore);
            ropNopsResult.ReturnValue = new List<IntPtr>();
            byte[] ropNop = new byte[] { 0xC3 };
            var ropPtrs = RcgInfo.SearchModules(0, searchBytes: ropNop, excludedModules: excludes);
            if (ropPtrs.Error != null)
            {
                ropNopsResult.Error = ropPtrs.Error;
            }
            foreach (KeyValuePair<IntPtr, string> k in ropPtrs.ReturnValue)
            {
                ropNopsResult.ReturnValue.Add(k.Key);
                RopNops.Add(k.Key);
            }
            return ropNopsResult;
        }

        private ErcResult<List<IntPtr>> GetRopNops(ProcessInfo info)
        {
            ErcResult<List<IntPtr>> ropNopsResult = new ErcResult<List<IntPtr>>(info.ProcessCore);
            ropNopsResult.ReturnValue = new List<IntPtr>();
            byte[] ropNop = new byte[] { 0xC3 };
            var ropPtrs = info.SearchModules(0, searchBytes: ropNop);
            if (ropPtrs.Error != null)
            {
                ropNopsResult.Error = ropPtrs.Error;
            }
            foreach (KeyValuePair<IntPtr, string> k in ropPtrs.ReturnValue)
            {
                ropNopsResult.ReturnValue.Add(k.Key);
                RopNops.Add(k.Key);
            }
            return ropNopsResult;
        }
        #endregion

        #region PopulateOpcodes
        private ErcResult<int> PopulateOpcodes(ProcessInfo info)
        {
            ErcResult<int> ret = new ErcResult<int>(info.ProcessCore);

            for (int i = 0; i < RopNops.Count; i++)
            {
                byte[] bytes = new byte[20];
                IntPtr baseAddress = RopNops[i] - 19;
                ErcCore.ReadProcessMemory(info.ProcessHandle, baseAddress, bytes, 20, out int bytesRead);
                if (bytesRead != 20)
                {
                    ret.Error = new ERCException("ReadProcessMemory Error: " + new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    ret.LogEvent();
                }
                var ret1 = ParseByteArrayForRopCodes(bytes, info, baseAddress);
                if (ret1.Error != null)
                {
                    ret.Error = ret1.Error;
                    return ret;
                }
            }
            return ret;
        }
        #endregion

        #region ParseByteArrayForRopCodes
        private ErcResult<int> ParseByteArrayForRopCodes(byte[] bytes, ProcessInfo info, IntPtr baseAddress)
        {
            ErcResult<int> ret = new ErcResult<int>(info.ProcessCore);
            bool pushRaxDone = false;
            bool pushRcxDone = false;
            bool pushRdxDone = false;
            bool pushRbxDone = false;
            bool pushRspDone = false;
            bool pushRbpDone = false;
            bool pushRsiDone = false;
            bool pushRdiDone = false;
            bool pushR8Done = false;
            bool pushR9Done = false;
            bool pushR10Done = false;
            bool pushR11Done = false;
            bool pushR12Done = false;
            bool pushR13Done = false;
            bool pushR14Done = false;
            bool pushR15Done = false;
            bool popRaxDone = false;
            bool popRbxDone = false;
            bool popRcxDone = false;
            bool popRdxDone = false;
            bool popRspDone = false;
            bool popRbpDone = false;
            bool popRsiDone = false;
            bool popRdiDone = false;
            bool popR8Done = false;
            bool popR9Done = false;
            bool popR10Done = false;
            bool popR11Done = false;
            bool popR12Done = false;
            bool popR13Done = false;
            bool popR14Done = false;
            bool popR15Done = false;
            bool xorRaxDone = false;
            bool xorRbxDone = false;
            bool xorRcxDone = false;
            bool xorRdxDone = false;
            bool xorRsiDone = false;
            bool xorRdiDone = false;
            bool xorRspDone = false;
            bool xorRbpDone = false;
            bool xorR8Done = false;
            bool xorR9Done = false;
            bool xorR10Done = false;
            bool xorR11Done = false;
            bool xorR12Done = false;
            bool xorR13Done = false;
            bool xorR14Done = false;
            bool xorR15Done = false;
            bool jmpRspDone = false;
            bool callRspDone = false;
            bool incRaxDone = false;
            bool incRbxDone = false;
            bool incRcxDone = false;
            bool incRdxDone = false;
            bool incRbpDone = false;
            bool incRspDone = false;
            bool incRsiDone = false;
            bool incRdiDone = false;
            bool incR8Done = false;
            bool incR9Done = false;
            bool incR10Done = false;
            bool incR11Done = false;
            bool incR12Done = false;
            bool incR13Done = false;
            bool incR14Done = false;
            bool incR15Done = false;
            bool decRaxDone = false;
            bool decRbxDone = false;
            bool decRcxDone = false;
            bool decRdxDone = false;
            bool decRbpDone = false;
            bool decRspDone = false;
            bool decRsiDone = false;
            bool decRdiDone = false;
            bool decR8Done = false;
            bool decR9Done = false;
            bool decR10Done = false;
            bool decR11Done = false;
            bool decR12Done = false;
            bool decR13Done = false;
            bool decR14Done = false;
            bool decR15Done = false;
            bool addDone = false;
            bool movDone = false;
            bool subDone = false;
            bool jmpRaxDone = false;
            bool callRaxDone = false;

            for (int i = bytes.Length - 1; i > 0; i--)
            {
                for (int j = 0; j < opcodes64.Count; j++)
                {
                    if (bytes[i] == opcodes64[j][0] && opcodes64[j].Length == 1)
                    {
                        byte[] opcodes = new byte[bytes.Length - i];
                        switch (j)
                        {
                            case 0:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRax.ContainsKey(baseAddress + i) && pushRaxDone == false)
                                {
                                    pushRaxDone = true;
                                    x64Opcodes.pushRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 1:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRbx.ContainsKey(baseAddress + i) && pushRbxDone == false)
                                {
                                    pushRbxDone = true;
                                    x64Opcodes.pushRbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 2:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRcx.ContainsKey(baseAddress + i) && pushRcxDone == false)
                                {
                                    pushRcxDone = true;
                                    x64Opcodes.pushRcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 3:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRdx.ContainsKey(baseAddress + i) && pushRdxDone == false)
                                {
                                    pushRdxDone = true;
                                    x64Opcodes.pushRdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 4:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRsp.ContainsKey(baseAddress + i) && pushRspDone == false)
                                {
                                    pushRspDone = true;
                                    x64Opcodes.pushRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 5:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRbp.ContainsKey(baseAddress + i) && pushRbpDone == false)
                                {
                                    pushRbpDone = true;
                                    x64Opcodes.pushRbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 6:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRsi.ContainsKey(baseAddress + i) && pushRsiDone == false)
                                {
                                    pushRsiDone = true;
                                    x64Opcodes.pushRsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 7:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.pushRdi.ContainsKey(baseAddress + i) && pushRdiDone == false)
                                {
                                    pushRdiDone = true;
                                    x64Opcodes.pushRdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 16:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRax.ContainsKey(baseAddress + i) && popRaxDone == false)
                                {
                                    popRaxDone = true;
                                    x64Opcodes.popRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 17:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRbx.ContainsKey(baseAddress + i) && popRbxDone == false)
                                {
                                    popRbxDone = true;
                                    x64Opcodes.popRbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 18:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRcx.ContainsKey(baseAddress + i) && popRcxDone == false)
                                {
                                    popRcxDone = true;
                                    x64Opcodes.popRcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 19:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRdx.ContainsKey(baseAddress + i) && popRdxDone == false)
                                {
                                    popRdxDone = true;
                                    x64Opcodes.popRdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 20:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRsp.ContainsKey(baseAddress + i) && popRspDone == false)
                                {
                                    popRspDone = true;
                                    x64Opcodes.popRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 21:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRbp.ContainsKey(baseAddress + i) && popRbpDone == false)
                                {
                                    popRbpDone = true;
                                    x64Opcodes.popRbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 22:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRsi.ContainsKey(baseAddress + i) && popRsiDone == false)
                                {
                                    popRsiDone = true;
                                    x64Opcodes.popRsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            case 23:
                                Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                if (!x64Opcodes.popRdi.ContainsKey(baseAddress + i) && popRdiDone == false)
                                {
                                    popRdiDone = true;
                                    x64Opcodes.popRdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                }
                                break;
                            default:
                                ret.Error = new ERCException("An error has occured in RopChainGenerator.ParseByteArrayForRopCodes whilst parsing single length x64 instructions");
                                break;
                        }
                    }
                    else if (opcodes64[j].Length == 2)
                    {
                        if (bytes[i] == opcodes64[j][0] && i < bytes.Length - 1 && j < opcodes64.Count + 1 && bytes[i + 1] == opcodes64[j][1])
                        {
                            byte[] opcodes = new byte[bytes.Length - i];
                            switch (j)
                            {
                                case 8:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR8.ContainsKey(baseAddress + i) && pushR8Done == false)
                                    {
                                        pushR8Done = true;
                                        x64Opcodes.pushR8.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 9:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR9.ContainsKey(baseAddress + i) && pushR9Done == false)
                                    {
                                        pushR9Done = true;
                                        x64Opcodes.pushR9.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 10:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR10.ContainsKey(baseAddress + i) && pushR10Done == false)
                                    {
                                        pushR10Done = true;
                                        x64Opcodes.pushR10.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 11:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR11.ContainsKey(baseAddress + i) && pushR11Done == false)
                                    {
                                        pushR11Done = true;
                                        x64Opcodes.pushR11.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 12:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR12.ContainsKey(baseAddress + i) && pushR12Done == false)
                                    {
                                        pushR12Done = true;
                                        x64Opcodes.pushR12.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 13:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR13.ContainsKey(baseAddress + i) && pushR13Done == false)
                                    {
                                        pushR13Done = true;
                                        x64Opcodes.pushR13.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 14:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR14.ContainsKey(baseAddress + i) && pushR14Done == false)
                                    {
                                        pushR14Done = true;
                                        x64Opcodes.pushR14.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 15:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.pushR15.ContainsKey(baseAddress + i) && pushR15Done == false)
                                    {
                                        pushR15Done = true;
                                        x64Opcodes.pushR15.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 24:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR8.ContainsKey(baseAddress + i) && popR8Done == false)
                                    {
                                        popR8Done = true;
                                        x64Opcodes.popR8.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 25:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR9.ContainsKey(baseAddress + i) && popR9Done == false)
                                    {
                                        popR9Done = true;
                                        x64Opcodes.popR9.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 26:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR10.ContainsKey(baseAddress + i) && popR10Done == false)
                                    {
                                        popR10Done = true;
                                        x64Opcodes.popR10.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 27:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR11.ContainsKey(baseAddress + i) && popR11Done == false)
                                    {
                                        popR11Done = true;
                                        x64Opcodes.popR11.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 28:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR12.ContainsKey(baseAddress + i) && popR12Done == false)
                                    {
                                        popR12Done = true;
                                        x64Opcodes.popR12.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 29:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR13.ContainsKey(baseAddress + i) && popR13Done == false)
                                    {
                                        popR13Done = true;
                                        x64Opcodes.popR13.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 30:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR14.ContainsKey(baseAddress + i) && popR14Done == false)
                                    {
                                        popR14Done = true;
                                        x64Opcodes.popR14.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 31:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.popR15.ContainsKey(baseAddress + i) && popR15Done == false)
                                    {
                                        popR15Done = true;
                                        x64Opcodes.popR15.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 48:
                                    opcodes = new byte[2];
                                    Array.Copy(bytes, i, opcodes, 0, 2);
                                    if (!x64Opcodes.jmpRsp.ContainsKey(baseAddress + i) && jmpRspDone == false)
                                    {
                                        jmpRspDone = true;
                                        x64Opcodes.jmpRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 49:
                                    opcodes = new byte[2];
                                    Array.Copy(bytes, i, opcodes, 0, 2);
                                    if (!x64Opcodes.callRsp.ContainsKey(baseAddress + i) && callRspDone == false)
                                    {
                                        callRspDone = true;
                                        x64Opcodes.callRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 82:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.add.ContainsKey(baseAddress + i) && addDone == false)
                                    {
                                        addDone = true;
                                        x64Opcodes.add.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 83:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.add.ContainsKey(baseAddress + i) && addDone == false)
                                    {
                                        addDone = true;
                                        x64Opcodes.add.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 84:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.add.ContainsKey(baseAddress + i) && addDone == false)
                                    {
                                        addDone = true;
                                        x64Opcodes.add.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 85:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.add.ContainsKey(baseAddress + i) && addDone == false)
                                    {
                                        addDone = true;
                                        x64Opcodes.add.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 86:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.mov.ContainsKey(baseAddress + i) && movDone == false)
                                    {
                                        movDone = true;
                                        x64Opcodes.mov.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 87:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.mov.ContainsKey(baseAddress + i) && movDone == false)
                                    {
                                        movDone = true;
                                        x64Opcodes.mov.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 88:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.mov.ContainsKey(baseAddress + i) && movDone == false)
                                    {
                                        movDone = true;
                                        x64Opcodes.mov.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 89:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.mov.ContainsKey(baseAddress + i) && movDone == false)
                                    {
                                        movDone = true;
                                        x64Opcodes.mov.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 90:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.sub.ContainsKey(baseAddress + i) && subDone == false)
                                    {
                                        subDone = true;
                                        x64Opcodes.sub.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 91:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.sub.ContainsKey(baseAddress + i) && subDone == false)
                                    {
                                        subDone = true;
                                        x64Opcodes.sub.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 92:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.sub.ContainsKey(baseAddress + i) && subDone == false)
                                    {
                                        subDone = true;
                                        x64Opcodes.sub.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 93:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.sub.ContainsKey(baseAddress + i) && subDone == false)
                                    {
                                        subDone = true;
                                        x64Opcodes.sub.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 94:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.callRax.ContainsKey(baseAddress + i) && callRaxDone == false)
                                    {
                                        callRaxDone = true;
                                        x64Opcodes.callRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 95:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.jmpRax.ContainsKey(baseAddress + i) && jmpRaxDone == false)
                                    {
                                        jmpRaxDone = true;
                                        x64Opcodes.jmpRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                default:
                                    ret.Error = new ERCException("An error has occured in RopChainGenerator.ParseByteArrayForRopCodes whilst parsing double length x64 instructions");
                                    break;
                            }
                        }
                    }
                    else if (opcodes64[j].Length > 2)
                    {
                        if (bytes[i] == opcodes64[j][0] && i < bytes.Length - 2 && j < opcodes64.Count + 2 && bytes[i + 1] == opcodes64[j][1] && bytes[i + 2] == opcodes64[j][2])
                        {
                            byte[] opcodes = new byte[bytes.Length - i];
                            switch (j)
                            {
                                case 50:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRax.ContainsKey(baseAddress + i) && incRaxDone == false)
                                    {
                                        incRaxDone = true;
                                        x64Opcodes.incRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 51:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRbx.ContainsKey(baseAddress + i) && incRbxDone == false)
                                    {
                                        incRbxDone = true;
                                        x64Opcodes.incRbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 52:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRcx.ContainsKey(baseAddress + i) && incRcxDone == false)
                                    {
                                        incRcxDone = true;
                                        x64Opcodes.incRcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 53:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRdx.ContainsKey(baseAddress + i) && incRdxDone == false)
                                    {
                                        incRdxDone = true;
                                        x64Opcodes.incRdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 54:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRbp.ContainsKey(baseAddress + i) && incRbpDone == false)
                                    {
                                        incRbpDone = true;
                                        x64Opcodes.incRbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 55:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRsp.ContainsKey(baseAddress + i) && incRspDone == false)
                                    {
                                        incRspDone = true;
                                        x64Opcodes.incRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 56:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRsi.ContainsKey(baseAddress + i) && incRsiDone == false)
                                    {
                                        incRsiDone = true;
                                        x64Opcodes.incRsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 57:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incRdi.ContainsKey(baseAddress + i) && incRdiDone == false)
                                    {
                                        incRdiDone = true;
                                        x64Opcodes.incRdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 58:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR8.ContainsKey(baseAddress + i) && incR8Done == false)
                                    {
                                        incR8Done = true;
                                        x64Opcodes.incR8.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 59:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR9.ContainsKey(baseAddress + i) && incR9Done == false)
                                    {
                                        incR9Done = true;
                                        x64Opcodes.incR9.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 60:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR10.ContainsKey(baseAddress + i) && incR10Done == false)
                                    {
                                        incR10Done = true;
                                        x64Opcodes.incR10.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 61:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR11.ContainsKey(baseAddress + i) && incR11Done == false)
                                    {
                                        incR11Done = true;
                                        x64Opcodes.incR11.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 62:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR12.ContainsKey(baseAddress + i) && incR12Done == false)
                                    {
                                        incR12Done = true;
                                        x64Opcodes.incR12.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 63:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR13.ContainsKey(baseAddress + i) && incR13Done == false)
                                    {
                                        incR13Done = true;
                                        x64Opcodes.incR13.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 64:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR14.ContainsKey(baseAddress + i) && incR14Done == false)
                                    {
                                        incR14Done = true;
                                        x64Opcodes.incR14.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 65:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.incR15.ContainsKey(baseAddress + i) && incR15Done == false)
                                    {
                                        incR15Done = true;
                                        x64Opcodes.incR15.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 66:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRax.ContainsKey(baseAddress + i) && decRaxDone == false)
                                    {
                                        decRaxDone = true;
                                        x64Opcodes.decRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 67:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRbx.ContainsKey(baseAddress + i) && decRbxDone == false)
                                    {
                                        decRbxDone = true;
                                        x64Opcodes.decRbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 68:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRcx.ContainsKey(baseAddress + i) && decRcxDone == false)
                                    {
                                        decRcxDone = true;
                                        x64Opcodes.decRcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 69:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRdx.ContainsKey(baseAddress + i) && decRdxDone == false)
                                    {
                                        decRdxDone = true;
                                        x64Opcodes.decRdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 70:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRbp.ContainsKey(baseAddress + i) && decRbpDone == false)
                                    {
                                        decRbpDone = true;
                                        x64Opcodes.decRbp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 71:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRsp.ContainsKey(baseAddress + i) && decRspDone == false)
                                    {
                                        decRspDone = true;
                                        x64Opcodes.decRsp.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 72:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRsi.ContainsKey(baseAddress + i) && decRsiDone == false)
                                    {
                                        decRsiDone = true;
                                        x64Opcodes.decRsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 73:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decRdi.ContainsKey(baseAddress + i) && decRdiDone == false)
                                    {
                                        decRdiDone = true;
                                        x64Opcodes.decRdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 74:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR8.ContainsKey(baseAddress + i) && decR8Done == false)
                                    {
                                        decR8Done = true;
                                        x64Opcodes.decR8.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 75:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR9.ContainsKey(baseAddress + i) && decR9Done == false)
                                    {
                                        decR9Done = true;
                                        x64Opcodes.decR9.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 76:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR10.ContainsKey(baseAddress + i) && decR10Done == false)
                                    {
                                        decR10Done = true;
                                        x64Opcodes.decR10.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 77:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR11.ContainsKey(baseAddress + i) && decR11Done == false)
                                    {
                                        decR11Done = true;
                                        x64Opcodes.decR11.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 78:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR12.ContainsKey(baseAddress + i) && decR12Done == false)
                                    {
                                        decR12Done = true;
                                        x64Opcodes.decR12.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 79:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR13.ContainsKey(baseAddress + i) && decR13Done == false)
                                    {
                                        decR13Done = true;
                                        x64Opcodes.decR13.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 80:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR14.ContainsKey(baseAddress + i) && decR14Done == false)
                                    {
                                        decR14Done = true;
                                        x64Opcodes.decR14.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 81:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.decR15.ContainsKey(baseAddress + i) && decR15Done == false)
                                    {
                                        decR15Done = true;
                                        x64Opcodes.decR15.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 32:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRax.ContainsKey(baseAddress + i) && xorRaxDone == false)
                                    {
                                        xorRaxDone = true;
                                        x64Opcodes.xorRax.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 33:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRbx.ContainsKey(baseAddress + i) && xorRbxDone == false)
                                    {
                                        xorRbxDone = true;
                                        x64Opcodes.xorRbx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 34:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRcx.ContainsKey(baseAddress + i) && xorRcxDone == false)
                                    {
                                        xorRcxDone = true;
                                        x64Opcodes.xorRcx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 35:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRdx.ContainsKey(baseAddress + i) && xorRdxDone == false)
                                    {
                                        xorRdxDone = true;
                                        x64Opcodes.xorRdx.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 36:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRsi.ContainsKey(baseAddress + i) && xorRsiDone == false)
                                    {
                                        xorRsiDone = true;
                                        x64Opcodes.xorRsi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 37:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorRdi.ContainsKey(baseAddress + i) && xorRdiDone == false)
                                    {
                                        xorRdiDone = true;
                                        x64Opcodes.xorRdi.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 38:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR8.ContainsKey(baseAddress + i) && xorR8Done == false)
                                    {
                                        xorR8Done = true;
                                        x64Opcodes.xorR8.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 39:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR9.ContainsKey(baseAddress + i) && xorR9Done == false)
                                    {
                                        xorR9Done = true;
                                        x64Opcodes.xorR9.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 40:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR10.ContainsKey(baseAddress + i) && xorR10Done == false)
                                    {
                                        xorR10Done = true;
                                        x64Opcodes.xorR10.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 41:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR11.ContainsKey(baseAddress + i) && xorR11Done == false)
                                    {
                                        xorR11Done = true;
                                        x64Opcodes.xorR11.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 42:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR12.ContainsKey(baseAddress + i) && xorR12Done == false)
                                    {
                                        xorR12Done = true;
                                        x64Opcodes.xorR12.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 43:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR13.ContainsKey(baseAddress + i) && xorR13Done == false)
                                    {
                                        xorR13Done = true;
                                        x64Opcodes.xorR13.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 44:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR14.ContainsKey(baseAddress + i) && xorR14Done == false)
                                    {
                                        xorR14Done = true;
                                        x64Opcodes.xorR14.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                case 45:
                                    Array.Copy(bytes, i, opcodes, 0, bytes.Length - i);
                                    if (!x64Opcodes.xorR15.ContainsKey(baseAddress + i) && xorR15Done == false)
                                    {
                                        xorR15Done = true;
                                        x64Opcodes.xorR15.Add(baseAddress + i, OpcodeDisassembler.Disassemble(opcodes, MachineType.x64, info.ProcessCore).ReturnValue.Replace(Environment.NewLine, ", "));
                                    }
                                    break;
                                default:
                                    ret.Error = new ERCException("An error has occured in RopChainGenerator.ParseByteArrayForRopCodes whilst parsing triple length x64 instructions");
                                    break;
                            }
                        }
                    }
                }
            }
            return ret;
        }
        #endregion

        #region OptimiseLists
        private void OptimiseLists(ProcessInfo info)
        {
            usableX64Opcodes = new X64Lists();
            var thisList = x64Opcodes.pushRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rax") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rbx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rcx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rdx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rsp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rbp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rsi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushRdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push rdi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushRdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR8.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r8") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR8.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR9.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r9") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR9.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR10.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r10") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR10.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR11.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r11") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR11.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR12.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r12") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR12.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR13.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r13") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR13.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR14.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r14") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR14.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.pushR15.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("push r15") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.pushR15.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.jmpRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("jmp rsp"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.jmpRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.callRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("call rsp"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.callRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rbx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rcx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rdx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rsi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorRdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor rdi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorRdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR8.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r8") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR8.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR9.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r9") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR9.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR10.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r10") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR10.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR11.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r11") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR11.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR12.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r12") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR12.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR13.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r13") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR13.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR14.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r14") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR14.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.xorR15.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("xor r15") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.xorR15.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rax") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rbx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rcx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rdx") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rsp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rbp") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rsi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popRdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop rdi") || !thisList[i].Value.Contains("ret") || thisList[i].Value.Any(char.IsDigit))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popRdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR8.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r8") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR8.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR9.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r9") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR9.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR10.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r10") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR10.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR11.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r11") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR11.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR12.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r12") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR12.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR13.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r13") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR13.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR14.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r14") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR14.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.popR15.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("pop r15") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.popR15.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rbx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rcx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rdx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rbp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rsp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rsi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incRdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc rdi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incRdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR8.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r8") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR8.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR9.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r9") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR9.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR10.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r10") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR10.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR11.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r11") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR11.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR12.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r12") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR12.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR13.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r13") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR13.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR14.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r14") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR14.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.incR15.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("inc r15") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.incR15.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rax") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRbx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rbx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRbx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRcx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rcx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRcx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRdx.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rdx") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRdx.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRbp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rbp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRbp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRsp.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rsp") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRsp.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRsi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rsi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRsi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decRdi.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec rdi") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decRdi.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR8.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r8") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR8.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR9.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r9") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR9.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR10.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r10") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR10.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR11.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r11") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR11.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR12.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r12") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR12.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR13.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r13") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR13.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR14.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r14") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR14.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.decR15.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("dec r15") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.decR15.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.add.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("add") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.add.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.mov.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("mov") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.mov.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.sub.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("sub") || !thisList[i].Value.Contains("ret"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.sub.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.jmpRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("jmp rax"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.jmpRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
            thisList = x64Opcodes.callRax.ToList();
            thisList.Sort((x, y) => x.Value.Length.CompareTo(y.Value.Length));
            for (int i = 0; i < thisList.Count; i++)
            {
                if (!thisList[i].Value.Contains("call rax"))
                {
                    thisList.RemoveAt(i);
                }
                else
                {
                    usableX64Opcodes.callRax.Add(thisList[i].Key, thisList[i].Value);
                }
            }
        }
        #endregion

        #region GenerateVirtualAllocChain64
        private ErcResult<List<Tuple<byte[], string>>> GenerateVirtualAllocChain64(ProcessInfo info)
        {
            ////////////////////////////////////////////////////////////////
            // VirtualAlloc Template:                                     //
            // RCX: 0x???????????????? ->  Pointer                        //
            // RDX: 0x0000000000000500 ->  dwSize                         //
            // R8 : 0x0000000000001000 ->  flAllocationType               //
            // R9 : 0x0000000000000040 ->  flProtect                      //
            //                                                            //
            // + place a pointer to VirtualAlloc on stack                 //
            // + place ptr to "jmp rsp" on stack                          //
            ////////////////////////////////////////////////////////////////

            ErcResult<List<Tuple<byte[], string>>> VirtualAlloc = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            VirtualAlloc.ReturnValue = new List<Tuple<byte[], string>>();
            Register64 regState64 = new Register64();
            regState64 |= Register64.RSP;
            RegisterModifiers64 regModified64 = new RegisterModifiers64();

            foreach (Register64 i in Enum.GetValues(typeof(Register64)))
            {
                SetRegisterModifier(regModified64.RSP, i, regModified64);
                SetRegisterModifier(i, regModified64.RSP, regModified64);
            }

            RegisterLists64 regLists64 = new RegisterLists64();

            #region Populate RCX
            regLists64.rcxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRcx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RCX))
                {
                    if (usableX64Opcodes.popRcx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRcx.ElementAt(i).Value.Contains("invalid"))
                    {
                        for (int j = 0; j< usableX64Opcodes.pushRsp.Count; j++)
                        {
                            if (usableX64Opcodes.pushRsp.ElementAt(j).Value.Length <= 15 && !usableX64Opcodes.pushRsp.ElementAt(j).Value.Contains("invalid"))
                            {
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.pushRsp.ElementAt(j).Key),
                                    usableX64Opcodes.pushRsp.ElementAt(j).Value));
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRcx.ElementAt(i).Key),
                                    usableX64Opcodes.popRcx.ElementAt(i).Value));
                                regState64 |= Register64.RCX;
                                i = usableX64Opcodes.popRcx.Count;
                                j = usableX64Opcodes.pushRsp.Count;
                            }
                        }
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRcx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                var movInstruction = GetMovInstruction(Register64.RCX, Register64.RSP, regModified64);
                if (movInstruction != null)
                {
                    regLists64.rcxList.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                    SetRegisterModifier(Register64.RCX, Register64.RSP, regModified64);
                    regState64 &= ~Register64.RSP;
                    regState64 |= Register64.RCX;
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                regLists64.rcxList = null;
                regLists64.rcxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rcxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. RCX must be allocated manually"));
                regState64 |= Register64.RCX;
            }
            #endregion

            #region Populate RDX
            SetRegisterModifier(Register64.RDX, Register64.RCX, regModified64);
            regLists64.rdxList = null;
            regLists64.rdxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRdx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RDX))
                {
                    if (usableX64Opcodes.popRdx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRdx.ElementAt(i).Value.Contains("invalid"))
                    {
                        byte[] dwSize = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        regLists64.rdxList.Add(Tuple.Create(dwSize, "dwSize"));
                        regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRdx.ElementAt(i).Key),
                            usableX64Opcodes.popRdx.ElementAt(i).Value));
                        regState64 |= Register64.RDX;
                        i = usableX64Opcodes.popRdx.Count;
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRdx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var xorEbx = GetXorInstruction(Register64.RDX);
                if (xorEbx != null)
                {
                    regLists64.rdxList.Add(Tuple.Create(xorEbx.Item1, xorEbx.Item2));
                    if (usableX64Opcodes.incRdx.Count > 0)
                    {
                        if (usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                        {
                            regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                                usableX64Opcodes.incRdx.ElementAt(0).Value));
                            regState64 |= Register64.RDX;
                        }
                    }

                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var zeroEbx = ZeroRegister(Register64.RDX, regModified64);
                if (zeroEbx != null && usableX64Opcodes.incRdx.Count > 0 && usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                {
                    for (int i = 0; i < zeroEbx.Count; i++)
                    {
                        regLists64.rdxList.Add(Tuple.Create(zeroEbx[i].Item1, zeroEbx[i].Item2));
                    }
                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                        usableX64Opcodes.incRdx.ElementAt(0).Value));
                    SetRegisterModifier(Register64.RDX, zeroEbx[0].Item3, regModified64);
                    regState64 &= ~zeroEbx[0].Item3;
                    regState64 |= Register64.RDX;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    var popInstruction = GetPopInstruction(Register64.RDX, i, regModified64);
                    if (popInstruction != null)
                    {
                        for (int j = 0; j < usableX64Opcodes.add.Count; j++)
                        {
                            if (!regState64.HasFlag(Register64.RDX))
                            {
                                var strings = usableX64Opcodes.add.ElementAt(j).Value.Split(',');
                                if (strings[0].Contains(" rdx") && strings[1].Contains(i.ToString().ToLower()))
                                {
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    bytes = new byte[] { 0x01, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    SetRegisterModifier(Register64.RDX, i, regModified64);
                                    regState64 &= ~i;
                                    regState64 |= Register64.RDX;
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                regLists64.rdxList = null;
                regLists64.rdxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rdxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. EBX must be allocated manually"));
                regState64 |= Register64.RDX;
            }
            #endregion

            #region Populate R8
            SetRegisterModifier(Register64.R8, Register64.RCX, regModified64);
            SetRegisterModifier(Register64.R8, Register64.RDX, regModified64);
            regLists64.r8List = null;
            regLists64.r8List = new List<Tuple<byte[], string>>();
            var xorR8 = GetXorInstruction(Register64.R8);
            if (xorR8 != null)
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            var addInstruction = GetAddInstruction(Register64.R8, i);
                            if (addInstruction != null)
                            {
                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                regLists64.r8List.Add(Tuple.Create(xorR8.Item1, xorR8.Item2));
                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000001000"));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                SetRegisterModifier(Register64.R8, i, regModified64);
                                regState64 &= ~i;
                                regState64 |= Register64.R8;
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            foreach (Register64 j in Enum.GetValues(typeof(Register64)))
                            {
                                if (!regState64.HasFlag(Register64.R8) && i != j)
                                {
                                    var popInstruction2 = GetPopInstruction(Register64.R8, j, regModified64);
                                    if (popInstruction2 != null)
                                    {
                                        var addInstruction = GetAddInstruction(i, j);
                                        if (addInstruction != null)
                                        {
                                            var movInstruction = GetMovInstruction(Register64.R8, i, regModified64);
                                            if (movInstruction != null)
                                            {
                                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction2.Item1, popInstruction2.Item2));
                                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000000500"));
                                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                                SetRegisterModifier(Register64.R8, i, regModified64);
                                                SetRegisterModifier(Register64.R8, j, regModified64);
                                                regState64 &= ~i;
                                                regState64 &= ~j;
                                                regState64 |= Register64.R8;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                for (int i = 0; i < usableX64Opcodes.popR8.Count; i++)
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        if (usableX64Opcodes.popR8.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popR8.ElementAt(i).Value.Contains("invalid"))
                        {
                            byte[] flAllocationType = { 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                            regLists64.r8List.Add(Tuple.Create(flAllocationType, "flAllocationType"));
                            regLists64.r8List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR8.ElementAt(i).Key),
                                usableX64Opcodes.popR8.ElementAt(i).Value));
                            regState64 |= Register64.R8;
                            i = usableX64Opcodes.popR8.Count;
                        }
                    }
                    else
                    {
                        i = usableX64Opcodes.popR8.Count;
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                regLists64.r8List = null;
                regLists64.r8List = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.r8List.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. R8 must be allocated manually"));
                regState64 |= Register64.R8;
            }
            #endregion

            #region Populate R9
            SetRegisterModifier(Register64.R9, Register64.RCX, regModified64);
            SetRegisterModifier(Register64.R9, Register64.RDX, regModified64);
            SetRegisterModifier(Register64.R9, Register64.R8, regModified64);
            regLists64.r9List = null;
            regLists64.r9List = new List<Tuple<byte[], string>>();
            var xorECX = GetXorInstruction(Register64.R9);
            if (xorECX != null)
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R9))
                    {
                        var popInstruction = GetPopInstruction(Register64.R9, i, regModified64);
                        if (popInstruction != null)
                        {
                            var addInstruction = GetAddInstruction(Register64.R9, i);
                            if (addInstruction != null)
                            {
                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                byte[] add2 = new byte[] { 0x41, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                regLists64.r9List.Add(Tuple.Create(xorECX.Item1, xorECX.Item2));
                                regLists64.r9List.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                regLists64.r9List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r9List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.r9List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00000040"));
                                regLists64.r9List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r9List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                SetRegisterModifier(Register64.R9, i, regModified64);
                                regState64 &= ~i;
                                regState64 |= Register64.R9;
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R9))
                    {
                        var popInstruction = GetPopInstruction(Register64.R9, i, regModified64);
                        if (popInstruction != null)
                        {
                            foreach (Register64 j in Enum.GetValues(typeof(Register64)))
                            {
                                if (!regState64.HasFlag(Register64.R9) && i != j)
                                {
                                    var popInstruction2 = GetPopInstruction(Register64.R9, j, regModified64);
                                    if (popInstruction2 != null)
                                    {
                                        var addInstruction = GetAddInstruction(i, j);
                                        if (addInstruction != null)
                                        {
                                            var movInstruction = GetMovInstruction(Register64.R9, i, regModified64);
                                            if (movInstruction != null)
                                            {
                                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                                byte[] add2 = new byte[] { 0x41, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                                regLists64.r9List.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                regLists64.r9List.Add(Tuple.Create(popInstruction2.Item1, popInstruction2.Item2));
                                                regLists64.r9List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x00000000000040"));
                                                regLists64.r9List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                                regLists64.r9List.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                                regLists64.r9List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                                SetRegisterModifier(Register64.R9, i, regModified64);
                                                SetRegisterModifier(Register64.R9, j, regModified64);
                                                regState64 &= ~i;
                                                regState64 &= ~j;
                                                regState64 |= Register64.R9;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                for (int i = 0; i < usableX64Opcodes.popR9.Count; i++)
                {
                    if (!regState64.HasFlag(Register64.R9))
                    {
                        if (usableX64Opcodes.popR9.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popR9.ElementAt(i).Value.Contains("invalid"))
                        {
                            byte[] flProtect = { 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                            regLists64.r9List.Add(Tuple.Create(flProtect, "flProtect"));
                            regLists64.r9List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR9.ElementAt(i).Key),
                                usableX64Opcodes.popR9.ElementAt(i).Value));
                            regState64 |= Register64.R9;
                            i = usableX64Opcodes.popR9.Count;
                        }
                    }
                    else
                    {
                        i = usableX64Opcodes.popR9.Count;
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                regLists64.r9List = null;
                regLists64.r9List = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.r9List.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. R9 must be allocated manually"));
                regState64 |= Register64.R9;
            }
            #endregion

            VirtualAlloc.ReturnValue = BuildRopChain(RopMethod.VirtualAlloc, regLists64, regModified64);
            return VirtualAlloc;
        }
        #endregion

        #region GenerateHeapCreateChain
        private ErcResult<List<Tuple<byte[], string>>> GenerateHeapCreateChain64(ProcessInfo info)
        {
            ////////////////////////////////////////////////////////////////
            // HeapCreate Template:                                       //
            // RCX: 0x0000000000040000 ->  flOptions                      //
            // RDX: 0x0000000000000500 ->  dwInitialSize                  //
            // R8 : 0x0000000000001000 ->  dwMaximumSize                  //
            //                                                            //
            // + place a pointer to HeapCreate on stack                   //
            // + place ptr to "jmp rsp" on stack                          //
            ////////////////////////////////////////////////////////////////

            ErcResult<List<Tuple<byte[], string>>> HeapCreate = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            HeapCreate.ReturnValue = new List<Tuple<byte[], string>>();
            Register64 regState64 = new Register64();
            regState64 |= Register64.RSP;
            RegisterModifiers64 regModified64 = new RegisterModifiers64();

            foreach (Register64 i in Enum.GetValues(typeof(Register64)))
            {
                SetRegisterModifier(regModified64.RSP, i, regModified64);
                SetRegisterModifier(i, regModified64.RSP, regModified64);
            }

            RegisterLists64 regLists64 = new RegisterLists64();

            #region Populate RCX
            regLists64.rcxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRcx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RCX))
                {
                    if (usableX64Opcodes.popRcx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRcx.ElementAt(i).Value.Contains("invalid"))
                    {
                        byte[] flOptions = new byte[] { 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        regLists64.rcxList.Add(Tuple.Create(flOptions,"flOptions"));
                        regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRcx.ElementAt(i).Key),
                            usableX64Opcodes.popRcx.ElementAt(i).Value));
                        regState64 |= Register64.RCX;
                        i = usableX64Opcodes.popRcx.Count;
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRcx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    var popInstruction = GetPopInstruction(Register64.RCX, i, regModified64);
                    if (popInstruction != null)
                    {
                        for (int j = 0; j < usableX64Opcodes.add.Count; j++)
                        {
                            var strings = usableX64Opcodes.add.ElementAt(j).Value.Split(',');
                            if (strings[0].Contains(" rcx") && strings[1].Contains(i.ToString().ToLower()))
                            {

                                byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                regLists64.rcxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                regLists64.rcxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                    usableX64Opcodes.add.ElementAt(j).Value));
                                bytes = new byte[] { 0x01, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                regLists64.rcxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                regLists64.rcxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                    usableX64Opcodes.add.ElementAt(j).Value));
                                SetRegisterModifier(Register64.RCX, i, regModified64);
                                regState64 &= ~i;
                                regState64 |= Register64.RCX;
                                j = usableX64Opcodes.add.Count + 1;
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                regLists64.rcxList = null;
                regLists64.rcxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rcxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. RCX must be allocated manually"));
                regState64 |= Register64.RCX;
            }
            #endregion

            #region Populate RDX
            SetRegisterModifier(Register64.RDX, Register64.RCX, regModified64);
            regLists64.rdxList = null;
            regLists64.rdxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRdx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RDX))
                {
                    if (usableX64Opcodes.popRdx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRdx.ElementAt(i).Value.Contains("invalid"))
                    {
                        byte[] dwSize = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        regLists64.rdxList.Add(Tuple.Create(dwSize, "dwSize"));
                        regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRdx.ElementAt(i).Key),
                            usableX64Opcodes.popRdx.ElementAt(i).Value));
                        regState64 |= Register64.RDX;
                        i = usableX64Opcodes.popRdx.Count;
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRdx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var xorEbx = GetXorInstruction(Register64.RDX);
                if (xorEbx != null)
                {
                    regLists64.rdxList.Add(Tuple.Create(xorEbx.Item1, xorEbx.Item2));
                    if (usableX64Opcodes.incRdx.Count > 0)
                    {
                        if (usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                        {
                            regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                                usableX64Opcodes.incRdx.ElementAt(0).Value));
                            regState64 |= Register64.RDX;
                        }
                    }

                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var zeroEbx = ZeroRegister(Register64.RDX, regModified64);
                if (zeroEbx != null && usableX64Opcodes.incRdx.Count > 0 && usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                {
                    for (int i = 0; i < zeroEbx.Count; i++)
                    {
                        regLists64.rdxList.Add(Tuple.Create(zeroEbx[i].Item1, zeroEbx[i].Item2));
                    }
                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                        usableX64Opcodes.incRdx.ElementAt(0).Value));
                    SetRegisterModifier(Register64.RDX, zeroEbx[0].Item3, regModified64);
                    regState64 &= ~zeroEbx[0].Item3;
                    regState64 |= Register64.RDX;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    var popInstruction = GetPopInstruction(Register64.RDX, i, regModified64);
                    if (popInstruction != null)
                    {
                        for (int j = 0; j < usableX64Opcodes.add.Count; j++)
                        {
                            if (!regState64.HasFlag(Register64.RDX))
                            {
                                var strings = usableX64Opcodes.add.ElementAt(j).Value.Split(',');
                                if (strings[0].Contains(" rdx") && strings[1].Contains(i.ToString().ToLower()))
                                {
                                    
                                    byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    bytes = new byte[] { 0x01, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    SetRegisterModifier(Register64.RDX, i, regModified64);
                                    regState64 &= ~i;
                                    regState64 |= Register64.RDX;
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                regLists64.rdxList = null;
                regLists64.rdxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rdxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. EBX must be allocated manually"));
                regState64 |= Register64.RDX;
            }
            #endregion

            #region Populate R8
            SetRegisterModifier(Register64.R8, Register64.RCX, regModified64);
            SetRegisterModifier(Register64.R8, Register64.RDX, regModified64);
            regLists64.r8List = null;
            regLists64.r8List = new List<Tuple<byte[], string>>();
            var xorR8 = GetXorInstruction(Register64.R8);
            if (xorR8 != null)
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            var addInstruction = GetAddInstruction(Register64.R8, i);
                            if (addInstruction != null)
                            {
                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                regLists64.r8List.Add(Tuple.Create(xorR8.Item1, xorR8.Item2));
                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000001000"));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                SetRegisterModifier(Register64.R8, i, regModified64);
                                regState64 &= ~i;
                                regState64 |= Register64.R8;
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            foreach (Register64 j in Enum.GetValues(typeof(Register64)))
                            {
                                if (!regState64.HasFlag(Register64.R8) && i != j)
                                {
                                    var popInstruction2 = GetPopInstruction(Register64.R8, j, regModified64);
                                    if (popInstruction2 != null)
                                    {
                                        var addInstruction = GetAddInstruction(i, j);
                                        if (addInstruction != null)
                                        {
                                            var movInstruction = GetMovInstruction(Register64.R8, i, regModified64);
                                            if (movInstruction != null)
                                            {
                                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction2.Item1, popInstruction2.Item2));
                                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000000500"));
                                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                                SetRegisterModifier(Register64.R8, i, regModified64);
                                                SetRegisterModifier(Register64.R8, j, regModified64);
                                                regState64 &= ~i;
                                                regState64 &= ~j;
                                                regState64 |= Register64.R8;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                for (int i = 0; i < usableX64Opcodes.popR8.Count; i++)
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        if (usableX64Opcodes.popR8.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popR8.ElementAt(i).Value.Contains("invalid"))
                        {
                            byte[] flAllocationType = { 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                            regLists64.r8List.Add(Tuple.Create(flAllocationType, "flAllocationType"));
                            regLists64.r8List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR8.ElementAt(i).Key),
                                usableX64Opcodes.popR8.ElementAt(i).Value));
                            regState64 |= Register64.R8;
                            i = usableX64Opcodes.popR8.Count;
                        }
                    }
                    else
                    {
                        i = usableX64Opcodes.popR8.Count;
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                regLists64.r8List = null;
                regLists64.r8List = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.r8List.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. R8 must be allocated manually"));
                regState64 |= Register64.R8;
            }
            #endregion

            HeapCreate.ReturnValue = BuildRopChain(RopMethod.HeapCreate, regLists64, regModified64);
            return HeapCreate;

        }
        #endregion

        #region GenerateVirtualProtectChain
        private ErcResult<List<Tuple<byte[], string>>> GenerateVirtualProtectChain64(ProcessInfo info)
        {
            ////////////////////////////////////////////////////////////////
            // VirtualProtect Template:                                   //
            // RCX: 0x???????????????? ->  Pointer                        //
            // RDX: 0x0000000000000500 ->  dwSize                         //
            // R8 : 0x0000000000001000 ->  flNewProtect                   //
            // R9 : 0x???????????????? ->  lpflOldProtect                 //
            //                                                            //
            // + place a pointer to VirtualProtect on stack               //
            // + place ptr to "jmp rsp" on stack                          //
            ////////////////////////////////////////////////////////////////

            ErcResult<List<Tuple<byte[], string>>> VirtualProtect = new ErcResult<List<Tuple<byte[], string>>>(info.ProcessCore);
            VirtualProtect.ReturnValue = new List<Tuple<byte[], string>>();
            Register64 regState64 = new Register64();
            regState64 |= Register64.RSP;
            RegisterModifiers64 regModified64 = new RegisterModifiers64();

            foreach (Register64 i in Enum.GetValues(typeof(Register64)))
            {
                SetRegisterModifier(regModified64.RSP, i, regModified64);
                SetRegisterModifier(i, regModified64.RSP, regModified64);
            }

            RegisterLists64 regLists64 = new RegisterLists64();

            #region Populate RCX
            regLists64.rcxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRcx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RCX))
                {
                    if (usableX64Opcodes.popRcx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRcx.ElementAt(i).Value.Contains("invalid"))
                    {
                        for (int j = 0; j < usableX64Opcodes.pushRsp.Count; j++)
                        {
                            if (usableX64Opcodes.pushRsp.ElementAt(j).Value.Length <= 15 && !usableX64Opcodes.pushRsp.ElementAt(j).Value.Contains("invalid"))
                            {
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.pushRsp.ElementAt(j).Key),
                                    usableX64Opcodes.pushRsp.ElementAt(j).Value));
                                regLists64.rcxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRcx.ElementAt(i).Key),
                                    usableX64Opcodes.popRcx.ElementAt(i).Value));
                                regState64 |= Register64.RCX;
                                i = usableX64Opcodes.popRcx.Count;
                                j = usableX64Opcodes.pushRsp.Count;
                            }
                        }
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRcx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                var movInstruction = GetMovInstruction(Register64.RCX, Register64.RSP, regModified64);
                if (movInstruction != null)
                {
                    regLists64.rcxList.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                    SetRegisterModifier(Register64.RCX, Register64.RSP, regModified64);
                    regState64 &= ~Register64.RSP;
                    regState64 |= Register64.RCX;
                }
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                regLists64.rcxList = null;
                regLists64.rcxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rcxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. RCX must be allocated manually"));
                regState64 |= Register64.RCX;
            }
            #endregion

            #region Populate RDX
            SetRegisterModifier(Register64.RDX, Register64.RCX, regModified64);
            regLists64.rdxList = null;
            regLists64.rdxList = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popRdx.Count; i++)
            {
                if (!regState64.HasFlag(Register64.RDX))
                {
                    if (usableX64Opcodes.popRdx.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popRdx.ElementAt(i).Value.Contains("invalid"))
                    {
                        byte[] dwSize = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        regLists64.rdxList.Add(Tuple.Create(dwSize, "dwSize"));
                        regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRdx.ElementAt(i).Key),
                            usableX64Opcodes.popRdx.ElementAt(i).Value));
                        regState64 |= Register64.RDX;
                        i = usableX64Opcodes.popRdx.Count;
                    }
                }
                else
                {
                    i = usableX64Opcodes.popRdx.Count;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var xorEbx = GetXorInstruction(Register64.RDX);
                if (xorEbx != null)
                {
                    regLists64.rdxList.Add(Tuple.Create(xorEbx.Item1, xorEbx.Item2));
                    if (usableX64Opcodes.incRdx.Count > 0)
                    {
                        if (usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                        {
                            regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                                usableX64Opcodes.incRdx.ElementAt(0).Value));
                            regState64 |= Register64.RDX;
                        }
                    }

                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                var zeroEbx = ZeroRegister(Register64.RDX, regModified64);
                if (zeroEbx != null && usableX64Opcodes.incRdx.Count > 0 && usableX64Opcodes.incRdx.ElementAt(0).Value.Length <= 14)
                {
                    for (int i = 0; i < zeroEbx.Count; i++)
                    {
                        regLists64.rdxList.Add(Tuple.Create(zeroEbx[i].Item1, zeroEbx[i].Item2));
                    }
                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.incRdx.ElementAt(0).Key),
                        usableX64Opcodes.incRdx.ElementAt(0).Value));
                    SetRegisterModifier(Register64.RDX, zeroEbx[0].Item3, regModified64);
                    regState64 &= ~zeroEbx[0].Item3;
                    regState64 |= Register64.RDX;
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    var popInstruction = GetPopInstruction(Register64.RDX, i, regModified64);
                    if (popInstruction != null)
                    {
                        for (int j = 0; j < usableX64Opcodes.add.Count; j++)
                        {
                            if (!regState64.HasFlag(Register64.RDX))
                            {
                                var strings = usableX64Opcodes.add.ElementAt(j).Value.Split(',');
                                if (strings[0].Contains(" rdx") && strings[1].Contains(i.ToString().ToLower()))
                                {
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    byte[] bytes = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    regLists64.rdxList.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                    bytes = new byte[] { 0x01, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                    regLists64.rdxList.Add(Tuple.Create(bytes, "To be popped into " + i.ToString()));
                                    regLists64.rdxList.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(j).Key),
                                        usableX64Opcodes.add.ElementAt(j).Value));
                                    SetRegisterModifier(Register64.RDX, i, regModified64);
                                    regState64 &= ~i;
                                    regState64 |= Register64.RDX;
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                regLists64.rdxList = null;
                regLists64.rdxList = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.rdxList.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. EBX must be allocated manually"));
                regState64 |= Register64.RDX;
            }
            #endregion

            #region Populate R8
            SetRegisterModifier(Register64.R8, Register64.RCX, regModified64);
            SetRegisterModifier(Register64.R8, Register64.RDX, regModified64);
            regLists64.r8List = null;
            regLists64.r8List = new List<Tuple<byte[], string>>();
            var xorR8 = GetXorInstruction(Register64.R8);
            if (xorR8 != null)
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            var addInstruction = GetAddInstruction(Register64.R8, i);
                            if (addInstruction != null)
                            {
                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                regLists64.r8List.Add(Tuple.Create(xorR8.Item1, xorR8.Item2));
                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + addInstruction.Item3.ToString()));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000001000"));
                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                SetRegisterModifier(Register64.R8, i, regModified64);
                                regState64 &= ~i;
                                regState64 |= Register64.R8;
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                foreach (Register64 i in Enum.GetValues(typeof(Register64)))
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        var popInstruction = GetPopInstruction(Register64.R8, i, regModified64);
                        if (popInstruction != null)
                        {
                            foreach (Register64 j in Enum.GetValues(typeof(Register64)))
                            {
                                if (!regState64.HasFlag(Register64.R8) && i != j)
                                {
                                    var popInstruction2 = GetPopInstruction(Register64.R8, j, regModified64);
                                    if (popInstruction2 != null)
                                    {
                                        var addInstruction = GetAddInstruction(i, j);
                                        if (addInstruction != null)
                                        {
                                            var movInstruction = GetMovInstruction(Register64.R8, i, regModified64);
                                            if (movInstruction != null)
                                            {
                                                byte[] add1 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                                                byte[] add2 = new byte[] { 0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
                                                regLists64.r8List.Add(Tuple.Create(add1, "To be placed into " + popInstruction.Item3.ToString()));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction2.Item1, popInstruction2.Item2));
                                                regLists64.r8List.Add(Tuple.Create(add2, "To be placed into " + addInstruction.Item3.ToString() + " combined = 0x0000000000001000"));
                                                regLists64.r8List.Add(Tuple.Create(addInstruction.Item1, addInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                                                regLists64.r8List.Add(Tuple.Create(popInstruction.Item1, popInstruction.Item2));
                                                SetRegisterModifier(Register64.R8, i, regModified64);
                                                SetRegisterModifier(Register64.R8, j, regModified64);
                                                regState64 &= ~i;
                                                regState64 &= ~j;
                                                regState64 |= Register64.R8;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                for (int i = 0; i < usableX64Opcodes.popR8.Count; i++)
                {
                    if (!regState64.HasFlag(Register64.R8))
                    {
                        if (usableX64Opcodes.popR8.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popR8.ElementAt(i).Value.Contains("invalid"))
                        {
                            byte[] flAllocationType = { 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                            regLists64.r8List.Add(Tuple.Create(flAllocationType, "flAllocationType"));
                            regLists64.r8List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR8.ElementAt(i).Key),
                                usableX64Opcodes.popR8.ElementAt(i).Value));
                            regState64 |= Register64.R8;
                            i = usableX64Opcodes.popR8.Count;
                        }
                    }
                    else
                    {
                        i = usableX64Opcodes.popR8.Count;
                    }
                }
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                regLists64.r8List = null;
                regLists64.r8List = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.r8List.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. R8 must be allocated manually"));
                regState64 |= Register64.R8;
            }
            #endregion

            #region Populate R9
            regLists64.r9List = new List<Tuple<byte[], string>>();
            for (int i = 0; i < usableX64Opcodes.popR9.Count; i++)
            {
                if (!regState64.HasFlag(Register64.R9))
                {
                    if (usableX64Opcodes.popR9.ElementAt(i).Value.Length <= 14 && !usableX64Opcodes.popR9.ElementAt(i).Value.Contains("invalid"))
                    {
                        for (int j = 0; j < usableX64Opcodes.pushRsp.Count; j++)
                        {
                            if (usableX64Opcodes.pushRsp.ElementAt(j).Value.Length <= 15 && !usableX64Opcodes.pushRsp.ElementAt(j).Value.Contains("invalid"))
                            {
                                regLists64.r9List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.pushRsp.ElementAt(j).Key),
                                    usableX64Opcodes.pushRsp.ElementAt(j).Value));
                                regLists64.r9List.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR9.ElementAt(i).Key),
                                    usableX64Opcodes.popR9.ElementAt(i).Value));
                                regState64 |= Register64.R9;
                                i = usableX64Opcodes.popR9.Count;
                                j = usableX64Opcodes.pushRsp.Count;
                            }
                        }
                    }
                }
                else
                {
                    i = usableX64Opcodes.popR9.Count;
                }
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                var movInstruction = GetMovInstruction(Register64.R9, Register64.RSP, regModified64);
                if (movInstruction != null)
                {
                    regLists64.r9List.Add(Tuple.Create(movInstruction.Item1, movInstruction.Item2));
                    SetRegisterModifier(Register64.R9, Register64.RSP, regModified64);
                    regState64 &= ~Register64.RSP;
                    regState64 |= Register64.R9;
                }
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                regLists64.r9List = null;
                regLists64.r9List = new List<Tuple<byte[], string>>();
                byte[] nullBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                regLists64.r9List.Add(Tuple.Create(nullBytes,
                    "Unable to find appropriate instruction. R9 must be allocated manually"));
                regState64 |= Register64.R9;
            }
            #endregion

            VirtualProtect.ReturnValue = BuildRopChain(RopMethod.VirtualProtect, regLists64, regModified64);
            return VirtualProtect;
        }
        #endregion

        #region BuildRopChain
            private List<Tuple<byte[], string>> BuildRopChain(RopMethod method, RegisterLists64 regLists64, RegisterModifiers64 regModified64)
        {
            List<Tuple<byte[], string>> ret = new List<Tuple<byte[], string>>();
            List<ushort> order = new List<ushort>();

            for (int i = 0; i < regLists64.rcxList.Count; i++)
            {
                ret.Add(regLists64.rcxList[i]);
            }

            for (int i = 0; i < regLists64.rdxList.Count; i++)
            {
                ret.Add(regLists64.rdxList[i]);
            }

            for (int i = 0; i < regLists64.r8List.Count; i++)
            {
                ret.Add(regLists64.r8List[i]);
            }

            for (int i = 0; i < regLists64.r9List.Count; i++)
            {
                ret.Add(regLists64.r9List[i]);
            }

            switch (method)
            {
                case RopMethod.VirtualAlloc:
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)ApiAddresses["VirtualAlloc"]), "Pointer to VirtualAlloc."));
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.jmpRsp.ElementAt(0).Key),
                        usableX64Opcodes.jmpRsp.ElementAt(0).Value));
                    break;
                case RopMethod.HeapCreate:
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)ApiAddresses["HeapCreate"]), "Pointer to HeapCreate."));
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.jmpRax.ElementAt(0).Key), usableX64Opcodes.jmpRax.ElementAt(0).Value));
                    break;
                case RopMethod.VirtualProtect:
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)ApiAddresses["VirtualProtect"]), "Pointer to VirtualProtect."));
                    ret.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.jmpRsp.ElementAt(0).Key),
                        usableX64Opcodes.jmpRsp.ElementAt(0).Value));
                    break;
                default:
                    break;
            }

            return ret;
        }
        #endregion

        #region CalculateAddInstructions64
        private byte[] CalculateAddInstructions64(int size)
        {
            byte[] sizeBytes = BitConverter.GetBytes(size);
            byte[] modifiedBytes = new byte[8];

            Array.Copy(sizeBytes, 0, modifiedBytes, modifiedBytes.Length - sizeBytes.Length, sizeBytes.Length);

            for (int i = 0; i < modifiedBytes.Length; i++)
            {
                modifiedBytes[i] += 0x01;
            }
            return modifiedBytes;
        }
        #endregion region

        #region ZeroRegister
        /// <summary>
        /// Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
        /// followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
        /// </summary>
        /// <param name="modifyingReg">The Register64 value for the register to be zeroed.</param>
        /// <param name="regModified64">The RegisterModifiers64 object.</param>
        /// <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        private List<Tuple<byte[], string, Register64>> ZeroRegister(Register64 modifyingReg, RegisterModifiers64 regModified64)
        {
            List<Tuple<byte[], string, Register64>> instructions = new List<Tuple<byte[], string, Register64>>();
            var xor = GetXorInstruction(modifyingReg);
            if (xor != null)
            {
                instructions.Add(xor);
                return instructions;
            }

            for (int i = 0; i < usableX64Opcodes.mov.Count; i++)
            {

                string[] gadgetElements = usableX64Opcodes.mov.ElementAt(i).Value.Split(',');
                if (gadgetElements[0].Contains(modifyingReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier64(gadgetElements[1]);
                    if (reg != Register64.NONE && !GetRegisterModified(modifyingReg, reg, regModified64))
                    {
                        var xorReg = GetXorInstruction(reg);
                        if (xorReg != null && !GetRegisterModified(modifyingReg, reg, regModified64))
                        {
                            instructions.Add(xorReg);
                            instructions.Add(Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.mov.ElementAt(i).Key).Reverse().ToArray(),
                                usableX64Opcodes.mov.ElementAt(i).Value, reg));
                            return instructions;
                        }
                    }
                }
            }
            return null;
        }
        #endregion

        #region SetRegisterModifier 64 bit
        /// <summary>
        /// Sets the flag of a Register64 enum in a RegisterModifiers64 class. This flag is used to identify whether setting the value of one 
        /// register involved editing another register. For example if setting EAX involved modifying RBX then RegisterModifiers32.RAX will have the RBX flag set. Any
        /// register should not be able to modify the value of any other register twice.
        /// 
        /// The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
        /// </summary>
        /// <param name="modifiedReg">The Register64 which is being modified</param>
        /// <param name="modifyingReg">The Register64 which is doing the modification</param>
        /// <param name="regModified64">The RegisterModifiers64 object.</param>
        private void SetRegisterModifier(Register64 modifyingReg, Register64 modifiedReg, RegisterModifiers64 regModified64)
        {
            switch (modifyingReg)
            {
                case Register64.RAX:
                    regModified64.RAX |= modifiedReg;
                    return;
                case Register64.RBX:
                    regModified64.RBX |= modifiedReg;
                    return;
                case Register64.RCX:
                    regModified64.RCX |= modifiedReg;
                    return;
                case Register64.RDX:
                    regModified64.RDX |= modifiedReg;
                    return;
                case Register64.RBP:
                    regModified64.RBP |= modifiedReg;
                    return;
                case Register64.RSP:
                    regModified64.RSP |= modifiedReg;
                    return;
                case Register64.RSI:
                    regModified64.RSI |= modifiedReg;
                    return;
                case Register64.RDI:
                    regModified64.RDI |= modifiedReg;
                    return;
                case Register64.R8:
                    regModified64.R8 |= modifiedReg;
                    return;
                case Register64.R9:
                    regModified64.R9 |= modifiedReg;
                    return;
                case Register64.R10:
                    regModified64.R10 |= modifiedReg;
                    return;
                case Register64.R11:
                    regModified64.R11 |= modifiedReg;
                    return;
                case Register64.R12:
                    regModified64.R12 |= modifiedReg;
                    return;
                case Register64.R13:
                    regModified64.R13 |= modifiedReg;
                    return;
                case Register64.R14:
                    regModified64.R14 |= modifiedReg;
                    return;
                case Register64.R15:
                    regModified64.R15 |= modifiedReg;
                    return;
            }
        }
        #endregion

        #region GetRegisterModifier 64 bit
        private bool GetRegisterModified(Register64 modifyingReg, Register64 modifiedReg, RegisterModifiers64 regModified64)
        {
            Register64 thisReg;
            bool modified = false;
            switch (modifyingReg)
            {
                case Register64.RAX:
                    thisReg = regModified64.RAX;
                    break;
                case Register64.RBX:
                    thisReg = regModified64.RBX;
                    break;
                case Register64.RCX:
                    thisReg = regModified64.RCX;
                    break;
                case Register64.RDX:
                    thisReg = regModified64.RDX;
                    break;
                case Register64.RBP:
                    thisReg = regModified64.RBP;
                    break;
                case Register64.RSP:
                    thisReg = regModified64.RSP;
                    break;
                case Register64.RSI:
                    thisReg = regModified64.RSI;
                    break;
                case Register64.RDI:
                    thisReg = regModified64.RDI;
                    break;
                case Register64.R8:
                    thisReg = regModified64.R9;
                    break;
                case Register64.R9:
                    thisReg = regModified64.R9;
                    break;
                case Register64.R10:
                    thisReg = regModified64.R10;
                    break;
                case Register64.R11:
                    thisReg = regModified64.R11;
                    break;
                case Register64.R12:
                    thisReg = regModified64.R12;
                    break;
                case Register64.R13:
                    thisReg = regModified64.R13;
                    break;
                case Register64.R14:
                    thisReg = regModified64.R14;
                    break;
                case Register64.R15:
                    thisReg = regModified64.R15;
                    break;
                default:
                    return true;
            }

            if (thisReg.HasFlag(modifiedReg))
            {
                modified = true;
            }
            return modified;
        }
        #endregion

        #region GetPopInstruction 64 bit
        private Tuple<byte[], string, Register64> GetPopInstruction(Register64 destReg, Register64 srcReg, RegisterModifiers64 regModified64)
        {
            switch (srcReg)
            {
                case Register64.RAX:
                    for (int i = 0; i < usableX64Opcodes.popRax.Count; i++)
                    {
                        if (usableX64Opcodes.popRax.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RAX, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRax.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRax.ElementAt(i).Value, Register64.RAX);
                        }
                    }
                    break;
                case Register64.RBX:
                    for (int i = 0; i < usableX64Opcodes.popRbx.Count; i++)
                    {
                        if (usableX64Opcodes.popRbx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RBX, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRbx.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRbx.ElementAt(i).Value, Register64.RBX);
                        }
                    }
                    break;
                case Register64.RCX:
                    for (int i = 0; i < usableX64Opcodes.popRcx.Count; i++)
                    {
                        if (usableX64Opcodes.popRcx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RCX, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRcx.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRcx.ElementAt(i).Value, Register64.RCX);
                        }
                    }
                    break;
                case Register64.RDX:
                    for (int i = 0; i < usableX64Opcodes.popRdx.Count; i++)
                    {
                        if (usableX64Opcodes.popRdx.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RDX, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRdx.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRdx.ElementAt(i).Value, Register64.RDX);
                        }
                    }
                    break;
                case Register64.RBP:
                    for (int i = 0; i < usableX64Opcodes.popRbp.Count; i++)
                    {
                        if (usableX64Opcodes.popRbp.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RBP, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRbp.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRbp.ElementAt(i).Value, Register64.RBP);
                        }
                    }
                    break;
                case Register64.RSP:
                    for (int i = 0; i < usableX64Opcodes.popRsp.Count; i++)
                    {
                        if (usableX64Opcodes.popRsp.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RSP, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRsp.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRsp.ElementAt(i).Value, Register64.RSP);
                        }
                    }
                    break;
                case Register64.RSI:
                    for (int i = 0; i < usableX64Opcodes.popRsi.Count; i++)
                    {
                        if (usableX64Opcodes.popRsi.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RSI, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRsi.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRsi.ElementAt(i).Value, Register64.RSI);
                        }
                    }
                    break;
                case Register64.RDI:
                    for (int i = 0; i < usableX64Opcodes.popRdi.Count; i++)
                    {
                        if (usableX64Opcodes.popRdi.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.RDI, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popRdi.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popRdi.ElementAt(i).Value, Register64.RDI);
                        }
                    }
                    break;
                case Register64.R8:
                    for (int i = 0; i < usableX64Opcodes.popR8.Count; i++)
                    {
                        if (usableX64Opcodes.popR8.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R8, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR8.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR8.ElementAt(i).Value, Register64.R8);
                        }
                    }
                    break;
                case Register64.R9:
                    for (int i = 0; i < usableX64Opcodes.popR9.Count; i++)
                    {
                        if (usableX64Opcodes.popR9.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R9, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR9.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR9.ElementAt(i).Value, Register64.R9);
                        }
                    }
                    break;
                case Register64.R10:
                    for (int i = 0; i < usableX64Opcodes.popR10.Count; i++)
                    {
                        if (usableX64Opcodes.popR10.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R10, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR10.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR10.ElementAt(i).Value, Register64.R10);
                        }
                    }
                    break;
                case Register64.R11:
                    for (int i = 0; i < usableX64Opcodes.popR11.Count; i++)
                    {
                        if (usableX64Opcodes.popR11.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R11, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR11.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR11.ElementAt(i).Value, Register64.R11);
                        }
                    }
                    break;
                case Register64.R12:
                    for (int i = 0; i < usableX64Opcodes.popR12.Count; i++)
                    {
                        if (usableX64Opcodes.popR12.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R12, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR12.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR12.ElementAt(i).Value, Register64.R12);
                        }
                    }
                    break;
                case Register64.R13:
                    for (int i = 0; i < usableX64Opcodes.popR13.Count; i++)
                    {
                        if (usableX64Opcodes.popR13.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R13, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR13.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR13.ElementAt(i).Value, Register64.R13);
                        }
                    }
                    break;
                case Register64.R14:
                    for (int i = 0; i < usableX64Opcodes.popR14.Count; i++)
                    {
                        if (usableX64Opcodes.popR14.ElementAt(i).Value.Length == 14 && !GetRegisterModified(destReg, Register64.R14, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR14.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR14.ElementAt(i).Value, Register64.R14);
                        }
                    }
                    break;
                case Register64.R15:
                    for (int i = 0; i < usableX64Opcodes.popR15.Count; i++)
                    {
                        if (usableX64Opcodes.popR15.ElementAt(i).Value.Length == 15 && !GetRegisterModified(destReg, Register64.R15, regModified64))
                        {
                            return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.popR15.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.popR15.ElementAt(i).Value, Register64.R15);
                        }
                    }
                    break;
                default:
                    return null;
            }
            return null;
        }
        #endregion

        #region getXorInstruction 64 bit
        private Tuple<byte[], string, Register64> GetXorInstruction(Register64 reg)
        {
            switch (reg)
            {
                case Register64.RAX:
                    if (usableX64Opcodes.xorRax.Count > 0 && usableX64Opcodes.xorRax.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRax.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRax.ElementAt(0).Value, Register64.RAX);
                    }
                    break;
                case Register64.RBX:
                    if (usableX64Opcodes.xorRbx.Count > 0 && usableX64Opcodes.xorRbx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRbx.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRbx.ElementAt(0).Value, Register64.RBX);
                    }
                    break;
                case Register64.RCX:
                    if (usableX64Opcodes.xorRcx.Count > 0 && usableX64Opcodes.xorRcx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRcx.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRcx.ElementAt(0).Value, Register64.RCX);
                    }
                    break;
                case Register64.RDX:
                    if (usableX64Opcodes.xorRdx.Count > 0 && usableX64Opcodes.xorRdx.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRdx.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRdx.ElementAt(0).Value, Register64.RDX);
                    }
                    break;
                case Register64.RSI:
                    if (usableX64Opcodes.xorRsi.Count > 0 && usableX64Opcodes.xorRsi.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRsi.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRsi.ElementAt(0).Value, Register64.RSI);
                    }
                    break;
                case Register64.RDI:
                    if (usableX64Opcodes.xorRdi.Count > 0 && usableX64Opcodes.xorRdi.ElementAt(0).Value.Length <= 19)
                    {
                        byte[] gadget1 = BitConverter.GetBytes((long)usableX64Opcodes.xorRdi.ElementAt(0).Key).Reverse().ToArray();
                        return Tuple.Create(gadget1, usableX64Opcodes.xorRdi.ElementAt(0).Value, Register64.RDI);
                    }
                    break;
                default:
                    break;
            }
            return null;
        }
        #endregion

        #region GetAddInstruction
        /// <summary>
        /// Finds a add instruction going from the src register to the destination register
        /// </summary>
        /// <param name="destReg">The destination register</param>
        /// <param name="srcReg">The source register</param>
        /// <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        private Tuple<byte[], string, Register64> GetAddInstruction(Register64 destReg, Register64 srcReg)
        {
            for (int i = 0; i < usableX64Opcodes.add.Count; i++)
            {
                string[] gadgetElements = usableX64Opcodes.add.ElementAt(i).Value.Split(',');
                if (gadgetElements[0].Contains(destReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier64(gadgetElements[1]);
                    if (reg == srcReg)
                    {
                        return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.add.ElementAt(i).Key).Reverse().ToArray(),
                            usableX64Opcodes.add.ElementAt(i).Value, reg);
                    }
                }
            }
            return null;
        }
        #endregion

        #region GetSubInstruction
        /// <summary>
        /// Finds a sub instruction going from the src register to the destination register
        /// </summary>
        /// <param name="destReg">The destination register</param>
        /// <param name="srcReg">The source register</param>
        /// <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        private Tuple<byte[], string, Register64> GetSubInstruction(Register64 destReg, Register64 srcReg)
        {
            for (int i = 0; i < usableX64Opcodes.sub.Count; i++)
            {
                string[] gadgetElements = usableX64Opcodes.sub.ElementAt(i).Value.Split(',');
                if (gadgetElements[0].Contains(destReg.ToString().ToLower()))
                {
                    var reg = registerIdentifier64(gadgetElements[1]);
                    if (reg == srcReg)
                    {
                        return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.sub.ElementAt(i).Key).Reverse().ToArray(),
                            usableX64Opcodes.sub.ElementAt(i).Value, reg);
                    }
                }
            }
            return null;
        }
        #endregion

        #region GetMovInstruction 64 bit
        /// <summary>
        /// Finds a mov instruction going from the src register to the destination register
        /// </summary>
        /// <param name="destReg">The destination register</param>
        /// <param name="srcReg">The source register</param>
        /// <param name="regModified64">The RegisterModifiers64 object.</param>
        /// <returns>Returns a dictionary of byte[] string containing a pointer to the instruction and the associated mnemonics</returns>
        private Tuple<byte[], string, Register64> GetMovInstruction(Register64 destReg, Register64 srcReg, RegisterModifiers64 regModified64)
        {
            for (int i = 0; i < usableX64Opcodes.mov.Count; i++)
            {
                string[] gadgetElements = usableX64Opcodes.mov.ElementAt(i).Value.Split(',');
                if (gadgetElements[0].Contains(destReg.ToString()))
                {
                    var reg = registerIdentifier64(gadgetElements[1]);
                    if (reg == srcReg)
                    {
                        return Tuple.Create(BitConverter.GetBytes((long)usableX64Opcodes.mov.ElementAt(i).Key).Reverse().ToArray(), usableX64Opcodes.mov.ElementAt(i).Value, reg);
                    }
                }
            }
            return null;
        }
        #endregion

        #region registerIdentifier64
        private Register64 registerIdentifier64(string reg)
        {
            switch (reg)
            {
                case " rax":
                    return Register64.RAX;
                case " rbx":
                    return Register64.RBX;
                case " rcx":
                    return Register64.RCX;
                case " rdx":
                    return Register64.RDX;
                case " rbp":
                    return Register64.RBP;
                case " rsp":
                    return Register64.RSP;
                case " rsi":
                    return Register64.RSI;
                case " rdi":
                    return Register64.RDI;
                case " r8":
                    return Register64.R8;
                case " r9":
                    return Register64.R9;
                case " r10":
                    return Register64.R10;
                case " r11":
                    return Register64.R11;
                case " r12":
                    return Register64.R12;
                case " r13":
                    return Register64.R13;
                case " r14":
                    return Register64.R14;
                case " r15":
                    return Register64.R15;
                default:
                    return Register64.NONE;
            }
        }
        #endregion

        #region CompleteRegisters64
        private bool CompleteRegisters64(Register64 regState64)
        {
            bool complete = true;

            if (!regState64.HasFlag(Register64.RAX))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RBX))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RCX))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RDX))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RBP))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RSP))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RSI))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.RDI))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R8))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R9))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R10))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R11))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R12))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R13))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R14))
            {
                return false;
            }
            if (!regState64.HasFlag(Register64.R15))
            {
                return false;
            }

            return complete;
        }
        #endregion

        #region Register64
        private enum Register64
        {
            NONE = 0,
            [Description(" rax")]
            RAX = 1,
            [Description(" rbx")]
            RBX = 2,
            [Description(" rcx")]
            RCX = 4,
            [Description(" rdx")]
            RDX = 8,
            [Description(" rbp")]
            RBP = 16,
            [Description(" rsp")]
            RSP = 32,
            [Description(" rsi")]
            RSI = 64,
            [Description(" rdi")]
            RDI = 128,
            [Description(" r8")]
            R8 = 256,
            [Description(" r9")]
            R9 = 512,
            [Description(" r10")]
            R10 = 1024,
            [Description(" r11")]
            R11 = 2048,
            [Description(" r12")]
            R12 = 4096,
            [Description(" r13")]
            R13 = 8192,
            [Description(" r14")]
            R14 = 16384,
            [Description(" r15")]
            R15 = 32768
        }
        #endregion

        private class RegisterModifiers64
        {
            public Register64 RAX;
            public Register64 RBX;
            public Register64 RCX;
            public Register64 RDX;
            public Register64 RBP;
            public Register64 RSP;
            public Register64 RSI;
            public Register64 RDI;
            public Register64 R8;
            public Register64 R9;
            public Register64 R10;
            public Register64 R11;
            public Register64 R12;
            public Register64 R13;
            public Register64 R14;
            public Register64 R15;
        }

        #region X64Lists
        /// <summary>
        /// Contains lists of instructions for specific registers.
        /// </summary>
        public class X64Lists
        {
            /// <summary>
            /// pushRax list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRcx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRdx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRbx list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRbp list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRsi list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushRdi list.
            /// </summary>
            public Dictionary<IntPtr, string> pushRdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR8 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR8 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR9 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR9 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR10 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR10 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR11 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR11 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR12 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR12 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR13 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR13 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR14 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR14 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// pushR15 list.
            /// </summary>
            public Dictionary<IntPtr, string> pushR15 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRax list.
            /// </summary>
            public Dictionary<IntPtr, string> popRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRbx list.
            /// </summary>
            public Dictionary<IntPtr, string> popRbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRcx list.
            /// </summary>
            public Dictionary<IntPtr, string> popRcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRdx list.
            /// </summary>
            public Dictionary<IntPtr, string> popRdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> popRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRbp list.
            /// </summary>
            public Dictionary<IntPtr, string> popRbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRsi list.
            /// </summary>
            public Dictionary<IntPtr, string> popRsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popRdi list.
            /// </summary>
            public Dictionary<IntPtr, string> popRdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR8 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR8 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR9 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR9 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR10 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR10 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR11 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR11 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR12 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR12 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR13 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR13 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR14 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR14 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// popR15 list.
            /// </summary>
            public Dictionary<IntPtr, string> popR15 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRax list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRbx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRcx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRdx list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRsi list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRdi list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorRbp list.
            /// </summary>
            public Dictionary<IntPtr, string> xorRbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR8 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR8 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR9 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR9 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR10 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR10 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR11 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR11 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR12 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR12 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR13 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR13 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR14 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR14 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// xorR15 list.
            /// </summary>
            public Dictionary<IntPtr, string> xorR15 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// jmpRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> jmpRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// callRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> callRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRax list.
            /// </summary>
            public Dictionary<IntPtr, string> incRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRbx list.
            /// </summary>
            public Dictionary<IntPtr, string> incRbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRcx list.
            /// </summary>
            public Dictionary<IntPtr, string> incRcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRdx list.
            /// </summary>
            public Dictionary<IntPtr, string> incRdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRbp list.
            /// </summary>
            public Dictionary<IntPtr, string> incRbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> incRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRsi list.
            /// </summary>
            public Dictionary<IntPtr, string> incRsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incRdi list.
            /// </summary>
            public Dictionary<IntPtr, string> incRdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR8 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR8 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR9 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR9 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR10 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR10 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR11 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR11 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR12 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR12 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR13 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR13 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR14 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR14 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// incR15 list.
            /// </summary>
            public Dictionary<IntPtr, string> incR15 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRax list.
            /// </summary>
            public Dictionary<IntPtr, string> decRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRbx list.
            /// </summary>
            public Dictionary<IntPtr, string> decRbx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRcx list.
            /// </summary>
            public Dictionary<IntPtr, string> decRcx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRdx list.
            /// </summary>
            public Dictionary<IntPtr, string> decRdx = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRbp list.
            /// </summary>
            public Dictionary<IntPtr, string> decRbp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRsp list.
            /// </summary>
            public Dictionary<IntPtr, string> decRsp = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRsi list.
            /// </summary>
            public Dictionary<IntPtr, string> decRsi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decRdi list.
            /// </summary>
            public Dictionary<IntPtr, string> decRdi = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR8 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR8 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR9 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR9 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR10 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR10 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR11 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR11 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR12 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR12 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR13 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR13 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR14 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR14 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// decR15 list.
            /// </summary>
            public Dictionary<IntPtr, string> decR15 = new Dictionary<IntPtr, string>();
            /// <summary>
            /// add list.
            /// </summary>
            public Dictionary<IntPtr, string> add = new Dictionary<IntPtr, string>();
            /// <summary>
            /// mov list.
            /// </summary>
            public Dictionary<IntPtr, string> mov = new Dictionary<IntPtr, string>();
            /// <summary>
            /// sub list.
            /// </summary>
            public Dictionary<IntPtr, string> sub = new Dictionary<IntPtr, string>();
            /// <summary>
            /// jmpRax list.
            /// </summary>
            public Dictionary<IntPtr, string> callRax = new Dictionary<IntPtr, string>();
            /// <summary>
            /// callRax list.
            /// </summary>
            public Dictionary<IntPtr, string> jmpRax = new Dictionary<IntPtr, string>();
        }
        #endregion

        private class RegisterLists64
        {
            public List<Tuple<byte[], string>> raxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rbxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rcxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rdxList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rbpList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rspList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rsiList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> rdiList = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r8List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r9List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r10List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r11List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r12List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r13List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r14List = new List<Tuple<byte[], string>>();
            public List<Tuple<byte[], string>> r15List = new List<Tuple<byte[], string>>();
        }

        /// <summary>
        /// Enum of methods which can be used to generate a ROP chain.
        /// </summary>
        [Flags]
        public enum RopMethod : ushort
        {
            [Description(" VirtualAlloc")] VirtualAlloc = 1,
            [Description(" HeapCreate")] HeapCreate = 2,
            [Description(" VirtualProtect")] VirtualProtect = 4,
            [Description(" WriteProcessMemory")] WriteProcessMemory = 8,
            [Description(" All")] All = 15
        }
    }
}



================================================
File: ERC/ERC/Thread_Info.cs
================================================
ï»¿using ERC.Structures;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace ERC
{
    /// <summary>
    /// Stores information about the current thread.
    /// </summary>
    public class ThreadInfo
    {
        #region Variables
        /// <summary>
        /// A handle for the current thread.
        /// </summary>
        public IntPtr ThreadHandle { get; private set; }
        /// <summary>
        /// The ID number of the current thread.
        /// </summary>
        public int ThreadID { get; private set; }
        /// <summary>
        /// x86 CPU Register values.
        /// </summary>
        public CONTEXT32 Context32;
        /// <summary>
        /// x64 CPU Register values.
        /// </summary>
        public CONTEXT64 Context64;

        internal bool ThreadFailed { get; private set; }

        internal MachineType X64 { get; set; }
        private ProcessThread ThreadCurrent { get; set; }
        private ProcessInfo ThreadProcess { get; set; }
        private ErcCore ThreadCore { get; set; }
        private ThreadBasicInformation ThreadBasicInfo = new ThreadBasicInformation();
        private TEB Teb;
        private List<Tuple<byte[], byte[]>> SehChain;
        #endregion

        #region Constructor
        internal ThreadInfo(ProcessThread thread, ErcCore core, ProcessInfo process)
        {
            ThreadID = thread.Id;
            ThreadCurrent = thread;
            ThreadCore = core;
            ThreadProcess = process;

            if (process.ProcessMachineType == MachineType.x64)
            {
                X64 = MachineType.x64;
            }
            else if(process.ProcessMachineType == MachineType.I386)
            {
                X64 = MachineType.I386;
            }

            try
            {
                ThreadHandle = ErcCore.OpenThread(ThreadAccess.All_ACCESS, false, (uint)thread.Id);
                if(ThreadHandle == null)
                {
                    ThreadFailed = true;
                    
                    throw new ERCException(new Win32Exception(Marshal.GetLastWin32Error()).Message);
                }
            }
            catch(ERCException e)
            {
                ErcResult<Exception> exceptionThrower = new ErcResult<Exception>(ThreadCore)
                {
                    Error = e
                };
                exceptionThrower.LogEvent();
            }

            var errorCheck = PopulateTEB(); 
            if (errorCheck.Error != null && errorCheck.Error.Message != "Error: No SEH chain has been generated yet. An SEH chain will not be generated until a crash occurs.")
            {
                throw errorCheck.Error;
            }
        }
        #endregion

        #region Get Thread Context
        /// <summary>
        /// Gets the register values of a thread and populates the CONTEXT structs. Should only be used on a suspended thread, results on an active thread are unreliable.
        /// </summary>
        /// <returns>Returns an ErcResult, the return value can be ignored, the object should only be checked for error values</returns>
        public ErcResult<string> Get_Context()
        {
            ErcResult<string> result = new ErcResult<string>(ThreadCore);
            
            if(X64 == MachineType.x64)
            {
                Context64 = new CONTEXT64();
                Context64.ContextFlags = CONTEXT_FLAGS.CONTEXT_ALL;
                try
                {
                    bool returnVar = ErcCore.GetThreadContext64(ThreadHandle, ref Context64);
                    if (returnVar == false)
                    {
                        throw new ERCException("Win32 Exception encountered when attempting to get thread context: " + 
                            new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    }
                }
                catch (ERCException e)
                {
                    result.Error = e;
                    result.LogEvent();
                    return result;
                }
                catch(Exception e)
                {
                    result.Error = e;
                    result.LogEvent(e);
                }
            }
            else if(Environment.Is64BitOperatingSystem == true && X64 != MachineType.x64)
            {
                Context32 = new CONTEXT32();
                Context32.ContextFlags = CONTEXT_FLAGS.CONTEXT_ALL;
                try
                {
                    bool returnVar = ErcCore.Wow64GetThreadContext(ThreadHandle, ref Context32);
                    if (returnVar == false)
                    {
                        throw new ERCException("Win32 Exception encountered when attempting to get thread context: " +
                            new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    }
                }
                catch (ERCException e)
                {
                    result.Error = e;
                    result.LogEvent();
                    return result;
                }
                catch (Exception e)
                {
                    result.Error = e;
                    result.LogEvent(e);
                }
            }
            else
            {
                Context32 = new CONTEXT32();
                Context32.ContextFlags = CONTEXT_FLAGS.CONTEXT_ALL;
                try
                {
                    bool returnVar = ErcCore.GetThreadContext32(ThreadHandle, ref Context32);
                    if (returnVar == false)
                    {
                        throw new ERCException("Win32 Exception encountered when attempting to get thread context: " +
                            new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    }
                }
                catch (ERCException e)
                {
                    result.Error = e;
                    result.LogEvent();
                    return result;
                }
                catch (Exception e)
                {
                    result.Error = e;
                    result.LogEvent(e);
                }
            }
            return result;
        }
        #endregion

        #region Thread Environment Block

        #region Populate TEB
        internal ErcResult<string> PopulateTEB()
        {
            ErcResult<string> returnString = new ErcResult<string>(ThreadCore);

            var retInt = ErcCore.ZwQueryInformationThread(ThreadHandle, 0,
                ref ThreadBasicInfo, Marshal.SizeOf(typeof(ThreadBasicInformation)), IntPtr.Zero);

            if (retInt != 0)
            {
                returnString.Error = new ERCException("NTSTATUS Error was thrown: 0x" + retInt.ToString("X"));
                return returnString;
            }

            byte[] tebBytes;
            int ret = 0;
            if(X64 == MachineType.x64)
            {
                tebBytes = new byte[0x16A0];
                ErcCore.ReadProcessMemory(ThreadProcess.ProcessHandle, ThreadBasicInfo.TebBaseAdress, tebBytes, 0x16A0, out ret);
            }
            else
            {
                tebBytes = new byte[3888];
                ErcCore.ReadProcessMemory(ThreadProcess.ProcessHandle, ThreadBasicInfo.TebBaseAdress, tebBytes, 3888, out ret);
            }
            

            if (ret == 0)
            {
                ERCException e = new ERCException("System error: An error occured when executing ReadProcessMemory\n Process Handle = 0x" 
                    + ThreadProcess.ProcessHandle.ToString("X") + "\nTEB Base Address = 0x" + ThreadBasicInfo.TebBaseAdress.ToString("X") +
                    "\nWin32Error = " + Utilities.Win32Errors.GetLastWin32Error());
                returnString.Error = e;
                return returnString;
            }

            if (X64 == MachineType.x64)
            {
                PopulateTEBStruct64(tebBytes);
            }
            else
            {
                PopulateTEBStruct32(tebBytes);
            }

            var bSehChain = BuildSehChain();
            if(bSehChain.Error != null)
            {
                returnString.Error = bSehChain.Error;
                return returnString;
            }

            return returnString;
        }
        #endregion

        #region PopulateTebStruct
        private void PopulateTEBStruct32(byte[] tebBytes)
        {
            Teb = new TEB();
            Teb.CurrentSehFrame = (IntPtr)BitConverter.ToInt32(tebBytes, 0x0);
            Teb.TopOfStack = (IntPtr)BitConverter.ToInt32(tebBytes, 0x4);
            Teb.BottomOfStack = (IntPtr)BitConverter.ToInt32(tebBytes, 0x8);
            Teb.SubSystemTeb = (IntPtr)BitConverter.ToInt32(tebBytes, 0xC);
            Teb.FiberData = (IntPtr)BitConverter.ToInt32(tebBytes, 0x10);
            Teb.ArbitraryDataSlot = (IntPtr)BitConverter.ToInt32(tebBytes, 0x14);
            Teb.Teb = (IntPtr)BitConverter.ToInt32(tebBytes, 0x18);
            Teb.EnvironmentPointer = (IntPtr)BitConverter.ToInt32(tebBytes, 0x1C);
            Teb.Identifiers.ProcessId = (IntPtr)BitConverter.ToInt32(tebBytes, 0x20);
            Teb.Identifiers.ThreadId = (IntPtr)BitConverter.ToInt32(tebBytes, 0x24);
            Teb.RpcHandle = (IntPtr)BitConverter.ToInt32(tebBytes, 0x28);
            Teb.Tls = (IntPtr)BitConverter.ToInt32(tebBytes, 0x2C);
            Teb.Peb = (IntPtr)BitConverter.ToInt32(tebBytes, 0x30);
            Teb.LastErrorNumber = BitConverter.ToInt32(tebBytes, 0x34);
            Teb.CriticalSectionsCount = BitConverter.ToInt32(tebBytes, 0x38);
            Teb.CsrClientThread = (IntPtr)BitConverter.ToInt32(tebBytes, 0x3C);
            Teb.Win32ThreadInfo = (IntPtr)BitConverter.ToInt32(tebBytes, 0x40);
            Teb.Win32ClientInfo = new byte[4];
            Array.Copy(tebBytes, 0x44, Teb.Win32ClientInfo, 0, 4);
            Teb.WoW64Reserved = (IntPtr)BitConverter.ToInt32(tebBytes, 0xC0);
            Teb.CurrentLocale = (IntPtr)BitConverter.ToInt32(tebBytes, 0xC4);
            Teb.FpSoftwareStatusRegister = (IntPtr)BitConverter.ToInt32(tebBytes, 0xC8);
            Teb.SystemReserved1 = new byte[216];
            Array.Copy(tebBytes, 0xCC, Teb.SystemReserved1, 0, 216);
            Teb.ExceptionCode = (IntPtr)BitConverter.ToInt32(tebBytes, 0x1A4);
            Teb.ActivationContextStack = new byte[4];
            Array.Copy(tebBytes, 0x1A8, Teb.ActivationContextStack, 0, 4);
            Teb.SpareBytes = new byte[24];
            Array.Copy(tebBytes, 0x1BC, Teb.SpareBytes, 0, 24);
            Teb.SystemReserved2 = new byte[40];
            Array.Copy(tebBytes, 0x1D4, Teb.SystemReserved2, 0, 40);
            Teb.GdiTebBatch = new byte[1248];
            Array.Copy(tebBytes, 0x1FC, Teb.GdiTebBatch, 0, 1248);
            Teb.GdiRegion = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6DC);
            Teb.GdiPen = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6E0);
            Teb.GdiBrush = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6E4);
            Teb.RealProcessId = BitConverter.ToInt32(tebBytes, 0x6E8);
            Teb.RealThreadId = BitConverter.ToInt32(tebBytes, 0x6EC);
            Teb.GdiCachedProcessHandle = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6F0);
            Teb.GdiClientProcessId = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6F4);
            Teb.GdiClientThreadId = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6F8);
            Teb.GdiThreadLocalInfo = (IntPtr)BitConverter.ToInt32(tebBytes, 0x6FC);
            Teb.UserReserved1 = new byte[20];
            Array.Copy(tebBytes, 0x700, Teb.UserReserved1, 0, 20);
            Teb.GlReserved1 = new byte[1248];
            Array.Copy(tebBytes, 0x714, Teb.GlReserved1, 0, 1248);
            Teb.LastStatusValue = BitConverter.ToInt32(tebBytes, 0xBF4);
            Teb.StaticUnicodeString = new byte[214];
            Array.Copy(tebBytes, 0xBF8, Teb.StaticUnicodeString, 0, 214);
            Teb.DeallocationStack = (IntPtr)BitConverter.ToInt32(tebBytes, 0xE0C);
            Teb.TlsSlots = new byte[100];
            Array.Copy(tebBytes, 0xE10, Teb.TlsSlots, 0, 100);
            Teb.TlsLinks = BitConverter.ToInt32(tebBytes, 0xF10);
            Teb.Vdm = (IntPtr)BitConverter.ToInt32(tebBytes, 0xF18);
            Teb.RpcReserved = (IntPtr)BitConverter.ToInt32(tebBytes, 0xF1C);
            Teb.ThreadErrorMode = (IntPtr)BitConverter.ToInt32(tebBytes, 0xF28);
        }

        private void PopulateTEBStruct64(byte[] tebBytes)
        {
            Teb = new TEB();
            Teb.CurrentSehFrame = (IntPtr)BitConverter.ToInt64(tebBytes, 0x0);
            Teb.TopOfStack = (IntPtr)BitConverter.ToInt64(tebBytes, 0x8);
            Teb.BottomOfStack = (IntPtr)BitConverter.ToInt64(tebBytes, 0x10);
            Teb.SubSystemTeb = (IntPtr)BitConverter.ToInt64(tebBytes, 0x18);
            Teb.FiberData = (IntPtr)BitConverter.ToInt64(tebBytes, 0x20);
            Teb.ArbitraryDataSlot = (IntPtr)BitConverter.ToInt64(tebBytes, 0x28);
            Teb.Teb = (IntPtr)BitConverter.ToInt64(tebBytes, 0x30);
            Teb.EnvironmentPointer = (IntPtr)BitConverter.ToInt64(tebBytes, 0x38);
            Teb.Identifiers.ProcessId = (IntPtr)BitConverter.ToInt64(tebBytes, 0x40);
            Teb.Identifiers.ThreadId = (IntPtr)BitConverter.ToInt64(tebBytes, 0x48);
            Teb.RpcHandle = (IntPtr)BitConverter.ToInt64(tebBytes, 0x50);
            Teb.Tls = (IntPtr)BitConverter.ToInt64(tebBytes, 0x58);
            Teb.Peb = (IntPtr)BitConverter.ToInt64(tebBytes, 0x60);
            Teb.LastErrorNumber = BitConverter.ToInt32(tebBytes, 0x68);
            Teb.CriticalSectionsCount = BitConverter.ToInt32(tebBytes, 0x6C);
            Teb.CsrClientThread = (IntPtr)BitConverter.ToInt64(tebBytes, 0x70);
            Teb.Win32ThreadInfo = (IntPtr)BitConverter.ToInt64(tebBytes, 0x78);
            Teb.Win32ClientInfo = new byte[4];
            Array.Copy(tebBytes, 0x80, Teb.Win32ClientInfo, 0, 4);
            Teb.CurrentLocale = (IntPtr)BitConverter.ToInt64(tebBytes, 0x84);
            Teb.FpSoftwareStatusRegister = (IntPtr)BitConverter.ToInt64(tebBytes, 0x8C);
            Teb.SystemReserved1 = new byte[216];
            Array.Copy(tebBytes, 0x94, Teb.SystemReserved1, 0, 216);
            Teb.ExceptionCode = (IntPtr)BitConverter.ToInt64(tebBytes, 0x16C);
            Teb.ActivationContextStack = new byte[4];
            Array.Copy(tebBytes, 0x174, Teb.ActivationContextStack, 0, 4);
            Teb.SpareBytes = new byte[24];
            Array.Copy(tebBytes, 0x178, Teb.SpareBytes, 0, 24);
            Teb.SystemReserved2 = new byte[40];
            Array.Copy(tebBytes, 0x190, Teb.SystemReserved2, 0, 40);
            Teb.GdiTebBatch = new byte[1248];
            Array.Copy(tebBytes, 0x1b8, Teb.GdiTebBatch, 0, 1248);
            Teb.GdiRegion = (IntPtr)BitConverter.ToInt64(tebBytes, 0x698);
            Teb.GdiPen = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6A0);
            Teb.GdiBrush = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6A8);
            Teb.RealProcessId = BitConverter.ToInt32(tebBytes, 0x6B0);
            Teb.RealThreadId = BitConverter.ToInt32(tebBytes, 0x6B4);
            Teb.GdiCachedProcessHandle = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6B8);
            Teb.GdiClientProcessId = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6C0);
            Teb.GdiClientThreadId = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6C8);
            Teb.GdiThreadLocalInfo = (IntPtr)BitConverter.ToInt64(tebBytes, 0x6D0);
            Teb.UserReserved1 = new byte[20];
            Array.Copy(tebBytes, 0x6D8, Teb.UserReserved1, 0, 20);
            Teb.GlReserved1 = new byte[1248];
            Array.Copy(tebBytes, 0x6EC, Teb.GlReserved1, 0, 1248);
            Teb.LastStatusValue = BitConverter.ToInt32(tebBytes, 0x1250);
            Teb.StaticUnicodeString = new byte[214];
            Array.Copy(tebBytes, 0x1258, Teb.StaticUnicodeString, 0, 214);
            Teb.DeallocationStack = (IntPtr)BitConverter.ToInt64(tebBytes, 0x1478);
            Teb.TlsSlots = new byte[520];
            Array.Copy(tebBytes, 0x1480, Teb.TlsSlots, 0, 520);
            Teb.TlsLinks = BitConverter.ToInt64(tebBytes, 0x1680);
            Teb.Vdm = (IntPtr)BitConverter.ToInt64(tebBytes, 0x1688);
            Teb.RpcReserved = (IntPtr)BitConverter.ToInt64(tebBytes, 0x1690);
            Teb.ThreadErrorMode = (IntPtr)BitConverter.ToInt64(tebBytes, 0x1698);
        }
        #endregion

        #region BuildSehChain
        internal ErcResult<List<Tuple<byte[], byte[]>>> BuildSehChain()
        {
            ErcResult<List<Tuple<byte[], byte[]>>> sehList = new ErcResult<List<Tuple<byte[], byte[]>>>(ThreadCore);
            sehList.ReturnValue = new List<Tuple<byte[], byte[]>>();

            if (Teb.Equals(default(TEB)))
            {
                sehList.Error = new Exception("Error: TEB structure for this thread has not yet been populated. Call PopulateTEB first");
                return sehList;
            }

            if(Teb.CurrentSehFrame == IntPtr.Zero)
            {
                sehList.Error = new Exception("Error: No SEH chain has been generated yet. An SEH chain will not be generated until a crash occurs.");
                return sehList;
            }

            byte[] sehEntry;
            byte[] sehFinal;

            int arraySize = 0;
            if(X64 == MachineType.x64)
            {
                arraySize = 8;
                sehEntry = new byte[arraySize];
                sehFinal = new byte[arraySize];
                sehEntry = BitConverter.GetBytes((long)Teb.CurrentSehFrame);
            }
            else
            {
                arraySize = 4;
                sehEntry = new byte[arraySize];
                sehFinal = new byte[arraySize];
                sehEntry = BitConverter.GetBytes((int)Teb.CurrentSehFrame);
            }
            
            for (int i = 0; i < sehFinal.Length; i++)
            {
                sehFinal[i] = 0xFF;
            }

            byte[] prevSEH = new byte[] { 0xFF };
            string pattern_standard = File.ReadAllText(ThreadCore.PatternStandardPath);
            string pattern_extended = File.ReadAllText(ThreadCore.PatternExtendedPath);
            while (!sehEntry.SequenceEqual(sehFinal))
            {
                byte[] reversedSehEntry = new byte[arraySize];
                byte[] nSeh = new byte[arraySize];
                byte[] sehHolder = new byte[arraySize * 2];
                
                int ret = 0;

                if(X64 == MachineType.x64)
                {
                    ret = ErcCore.ReadProcessMemory(ThreadProcess.ProcessHandle, (IntPtr)BitConverter.ToInt64(sehEntry, 0), sehHolder, arraySize * 2, out int retInt);
                    Array.Copy(sehHolder, 0, sehEntry, 0, arraySize);
                    Array.Copy(sehHolder, arraySize, nSeh, 0, arraySize);
                }
                else
                {
                    ret = ErcCore.ReadProcessMemory(ThreadProcess.ProcessHandle, (IntPtr)BitConverter.ToInt32(sehEntry, 0), sehHolder, arraySize * 2, out int retInt);
                    Array.Copy(sehHolder, 0, sehEntry, 0, arraySize);
                    Array.Copy(sehHolder, arraySize, nSeh, 0, arraySize);
                }

                if (ret != 0 && ret != 1)
                {
                    ERCException e = new ERCException("System error: An error occured when executing ReadProcessMemory\n Process Handle = 0x"
                    + ThreadProcess.ProcessHandle.ToString("X") + " TEB Current Seh = 0x" + Teb.CurrentSehFrame.ToString("X") +
                    " Return value = " + ret + Environment.NewLine + "Win32Exception: " + new Win32Exception(Marshal.GetLastWin32Error()).Message);
                    sehList.Error = e;
                    sehList.LogEvent();
                    return sehList;
                }

                Array.Reverse(nSeh);

                for(int i = 0; i < sehEntry.Length; i++)
                {
                    reversedSehEntry[i] = sehEntry[i];
                }

                Array.Reverse(reversedSehEntry, 0, reversedSehEntry.Length);
                if (prevSEH.SequenceEqual(reversedSehEntry))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }
                else if (!sehEntry.SequenceEqual(sehFinal) && !sehList.ReturnValue.Any(e => e.Item1.SequenceEqual(reversedSehEntry)))
                {
                    Tuple<byte[], byte[]> tuple = new Tuple<byte[], byte[]>(reversedSehEntry, nSeh);
                    sehList.ReturnValue.Add(tuple);
                }

                if (pattern_standard.Contains(Encoding.Unicode.GetString(reversedSehEntry)) ||
                    pattern_extended.Contains(Encoding.Unicode.GetString(reversedSehEntry)))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }

                if (pattern_standard.Contains(Encoding.ASCII.GetString(reversedSehEntry)) ||
                    pattern_extended.Contains(Encoding.ASCII.GetString(reversedSehEntry)))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }

                if (pattern_standard.Contains(Encoding.UTF32.GetString(reversedSehEntry)) ||
                    pattern_extended.Contains(Encoding.UTF32.GetString(reversedSehEntry)))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }

                if (pattern_standard.Contains(Encoding.UTF7.GetString(reversedSehEntry)) ||
                    pattern_extended.Contains(Encoding.UTF7.GetString(reversedSehEntry)))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }

                if (pattern_standard.Contains(Encoding.UTF8.GetString(reversedSehEntry)) ||
                    pattern_extended.Contains(Encoding.UTF8.GetString(reversedSehEntry)))
                {
                    sehEntry = new byte[sehFinal.Length];
                    Array.Copy(sehFinal, 0, sehEntry, 0, sehFinal.Length);
                }

                prevSEH = new byte[reversedSehEntry.Length];
                Array.Copy(reversedSehEntry, 0, prevSEH, 0, reversedSehEntry.Length);
            }

            SehChain = new List<Tuple<byte[], byte[]>>(sehList.ReturnValue);
            return sehList;
        }
        #endregion

        #endregion

        #region Accessors
        /// <summary>
        /// Gets the current SEH chain for the process.
        /// </summary>
        /// <returns>Returns a list of IntPtr containing the SEH chain</returns>
        public List<Tuple<IntPtr, IntPtr>> GetSehChain()
        {
            List<Tuple<IntPtr, IntPtr>> SehPtrs = new List<Tuple<IntPtr, IntPtr>>();
            var pteb = PopulateTEB();
            if (pteb.Error != null)
            {
                throw pteb.Error;
            }

            if(SehChain == null)
            {
                throw new Exception("Error: No SEH chain has been generated yet. An SEH chain will not be generated until a crash occurs.");
            }

            if(X64 == MachineType.x64)
            {
                for (int i = 0; i < SehChain.Count; i++)
                {
                    Tuple<IntPtr, IntPtr> tuple = new Tuple<IntPtr, IntPtr>((IntPtr)BitConverter.ToInt64(SehChain[i].Item1, 0), (IntPtr)BitConverter.ToInt64(SehChain[i].Item2, 0));
                    SehPtrs.Add(tuple);
                }
            }
            else
            {
                for (int i = 0; i < SehChain.Count; i++)
                {
                    Tuple<IntPtr, IntPtr> tuple = new Tuple<IntPtr, IntPtr>((IntPtr)BitConverter.ToInt32(SehChain[i].Item1, 0), (IntPtr)BitConverter.ToInt32(SehChain[i].Item2, 0));
                    SehPtrs.Add(tuple);
                }
            }
            return SehPtrs;
        }

        /// <summary>
        /// Gets the Thread environment block of the current thread.
        /// </summary>
        /// <returns>Returns a TEB struct</returns>
        public TEB GetTeb()
        {
            if (Teb.Equals(default(TEB)))
            {
                throw new Exception("Error: TEB structure for this thread has not yet been populated. Call PopulateTEB first");
            }
            return Teb;
        }

        /// <summary>
        /// Gets information specific to the current thread and returns it as a string.
        /// </summary>
        /// <returns>Returns a string</returns>
        public override string ToString()
        {
            string ret = "";
            if(X64 == MachineType.x64)
            {
                ret += "Thread Handle = " + "0x" + ThreadHandle.ToString("x16") + Environment.NewLine;
            }
            else
            {
                ret += "Thread Handle = " + "0x" + ThreadHandle.ToString("x8") + Environment.NewLine;
            }
            ret += "Thread ID = " + ThreadID + Environment.NewLine;
            ret += "Thread is running in a 64 bit process = " + X64 + Environment.NewLine;
            ret += "Thread Parent Process = " + ThreadProcess.ProcessName;
            if(!Context32.Equals(default(CONTEXT32)) && X64 == MachineType.I386)
            {
                ret += "Thread Context32 = Populated" + Environment.NewLine;
            }
            else if(!Context64.Equals(default(CONTEXT64)) && X64 == MachineType.x64)
            {
                ret += "Thread Context64 = Populated" + Environment.NewLine;
            }
            else if(X64 == MachineType.x64)
            {
                ret += "Thread Context64 = Unpopulated" + Environment.NewLine;
            }
            else
            {
                ret += "Thread Context32 = Unpopulated" + Environment.NewLine;
            }

            if (!Teb.Equals(default(TEB)))
            {
                ret += "Thread TEB = Populated" + Environment.NewLine;
            }
            else
            {
                ret += "Thread TEB = Unpopulated" + Environment.NewLine;
            }
            return ret;
        }
        #endregion
    }
}



================================================
File: ERC/ERC/Win32Errors.cs
================================================
ï»¿using System;
using System.Runtime.InteropServices;


namespace ERC.Utilities
{
    public static class Win32Errors
    {
        #region definitions
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr LocalFree(IntPtr hMem);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern int FormatMessage(FormatMessageFlags dwFlags, IntPtr lpSource, uint dwMessageId, uint dwLanguageId, ref IntPtr lpBuffer, uint nSize, IntPtr Arguments);

        [Flags]
        private enum FormatMessageFlags : uint
        {
            FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100,
            FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200,
            FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000,
            FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000,
            FORMAT_MESSAGE_FROM_HMODULE = 0x00000800,
            FORMAT_MESSAGE_FROM_STRING = 0x00000400,
        }
        #endregion

        /// <summary>
        /// Gets a user friendly string message for a system error code
        /// </summary>
        /// <returns>Error string</returns>
        public static string GetLastWin32Error(int errorCode = 0)
        {
            if (errorCode == 0)
            {
                errorCode = Marshal.GetLastWin32Error();
            }

            try
            {
                IntPtr lpMsgBuf = IntPtr.Zero;

                int dwChars = FormatMessage(
                    FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER | FormatMessageFlags.FORMAT_MESSAGE_FROM_SYSTEM | FormatMessageFlags.FORMAT_MESSAGE_IGNORE_INSERTS,
                    IntPtr.Zero,
                    (uint)errorCode,
                    0, // Default language
                    ref lpMsgBuf,
                    0,
                    IntPtr.Zero);
                if (dwChars == 0)
                {
                    // Handle the error.
                    int le = Marshal.GetLastWin32Error();
                    return "Unable to get error code string from System - Error " + le.ToString();
                }

                string sRet = Marshal.PtrToStringAnsi(lpMsgBuf);

                // Free the buffer.
                lpMsgBuf = LocalFree(lpMsgBuf);
                return sRet;
            }
            catch (Exception e)
            {
                return "Unable to get error code string from System -> " + e.ToString();
            }
        }
    }
}



================================================
File: ERC/ERC/.gitignore
================================================
###############
#    folder   #
###############
/**/DROP/
/**/TEMP/
/**/packages/
_site



================================================
File: ERC/docs/index.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>ERC.Net API Documentation. </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="ERC.Net API Documentation. ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="styles/docfx.vendor.css">
    <link rel="stylesheet" href="styles/docfx.css">
    <link rel="stylesheet" href="styles/main.css">
    <meta property="docfx:navrel" content="toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="index.html">
                <img id="logo" class="svg" src="logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        <div class="article row grid">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">
<h1 id="ercnet-api-documentation">ERC.Net API Documentation.</h1>

<p>Full documentation for the ERC.Net API can be found by clicking the &quot;API Documentation&quot; button in the nav bar above. A description of how to use the library along with some code samples can be found in the &quot;Articles&quot; section.</p>
<!--
# This is the **HOMEPAGE**.
Refer to [Markdown](http://daringfireball.net/projects/markdown/) for how to write markdown files.
## Quick Start Notes:
1. Add images to the *images* folder if the file is referencing an image.
-->
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="styles/docfx.js"></script>
    <script type="text/javascript" src="styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/manifest.json
================================================
{
  "homepages": [],
  "source_base_path": "C:/Users/tester/Documents/GitHub/ERC.net/docs",
  "xrefmap": "xrefmap.yml",
  "files": [
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.DisplayOutput.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.DisplayOutput.html",
          "hash": "uSYzKJoVWETKQVnHYkipvA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ERCException.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ERCException.html",
          "hash": "N9DFx+jCIZ1kehMpnWEwfA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ErcCore.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ErcCore.html",
          "hash": "9IZRrvUxvz8k3i52PlpDpg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ErcResult-1.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ErcResult-1.html",
          "hash": "WYfQ8G5E2EhB5JyUiEsovw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.MachineType.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.MachineType.html",
          "hash": "5yfM5V9gEwgoY9gz5QPOQQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ModuleInfo.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ModuleInfo.html",
          "hash": "9C6u6oFxGZw0ci6TbvgVeQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ProcessInfo.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ProcessInfo.html",
          "hash": "sKVlzd+yWeL3BNm4lpEUrA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.AllocationProtect.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.AllocationProtect.html",
          "hash": "cGNnldFfQKV3EK5eVwymSA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.CONTEXT32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.CONTEXT32.html",
          "hash": "RwgCozxQlmS3GhwBd3Dw3A=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.CONTEXT64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.CONTEXT64.html",
          "hash": "2NsD4+XIMA5EUY/Jub3HOA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.CONTEXT_FLAGS.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.CONTEXT_FLAGS.html",
          "hash": "KgT2JGr7eSSKweXru6j5wA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.ClientID.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.ClientID.html",
          "hash": "LICOYcjp530Ezdg3hoKggg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.FLOATING_SAVE_AREA.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.FLOATING_SAVE_AREA.html",
          "hash": "c8d30/NNm1Zc4R1V5QfceA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_DATA_DIRECTORY.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_DATA_DIRECTORY.html",
          "hash": "wjHXN/VAzWbAwXwaZPPzkg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_DOS_HEADER.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_DOS_HEADER.html",
          "hash": "GZ3UjpuCuEu5QP0JV5r5pA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_FILE_HEADER.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_FILE_HEADER.html",
          "hash": "Bwj5+Vi2cwjmpfezQIeWJw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html",
          "hash": "IZw6dOI0kjGT/rIgZyyJ+w=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html",
          "hash": "SRGb8SqJeShOcFFp754wHA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html",
          "hash": "4HNcZ+eu0Azhr++sqzkwgg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_NT_HEADERS32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_NT_HEADERS32.html",
          "hash": "FyBVNZyh6PWAt43ZY1BYXQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_NT_HEADERS64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_NT_HEADERS64.html",
          "hash": "DepcbKsMIOw6CTSU8OiQfQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html",
          "hash": "l2982mUrRICAzTA40DukpA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html",
          "hash": "Xvq+aAwnY3GqWPeSqtpwDA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.LIST_ENTRY.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.LIST_ENTRY.html",
          "hash": "VdcJQTRIBfiwnTnAJxVV8Q=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.LOADED_IMAGE.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.LOADED_IMAGE.html",
          "hash": "pQKbsgiHvrHqc3Iq4TeFLg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.LoadLibraryFlags.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.LoadLibraryFlags.html",
          "hash": "IohngiHhNws1gH5nfsoVWQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.M128A.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.M128A.html",
          "hash": "R7e838YgKIj+caDDgHKubQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.MEMORY_BASIC_INFORMATION32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html",
          "hash": "A1ojjPM1+mn/fBAMSaHiBQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.MEMORY_BASIC_INFORMATION64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html",
          "hash": "c/+N2Dtz+aT//bhbXa18sQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.MagicType.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.MagicType.html",
          "hash": "d96xnXpM9r/hRX0WDyZgNg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.ProcessAccessFlags.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.ProcessAccessFlags.html",
          "hash": "GA0ruj9C44NeOQvKji5Ybg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.RegisterInfo.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.RegisterInfo.html",
          "hash": "JJy1/LZFychjeoNs4M0mtg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.StateEnum.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.StateEnum.html",
          "hash": "VKUJ04gDA+xta4zFG33Ngw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.SubSystemType.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.SubSystemType.html",
          "hash": "WgwdwtSTKygAXIy18dedKg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.TEB.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.TEB.html",
          "hash": "K7hd9RXsGYVL+lwdcahYiA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.ThreadAccess.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.ThreadAccess.html",
          "hash": "u/xuZgP1viOxTzL9GLXXFA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.ThreadBasicInformation.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.ThreadBasicInformation.html",
          "hash": "9uMIulB2vsVa+/eeZaG4tw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.TypeEnum.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.TypeEnum.html",
          "hash": "4aV72qOxe2a5ZGTOO4QbvA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.XSAVE_FORMAT64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.XSAVE_FORMAT64.html",
          "hash": "HGoepyAi3CJHnVPs+v02VQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Structures.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Structures.html",
          "hash": "ds6+Dm2PmcnglrU7vE7xjQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.ThreadInfo.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.ThreadInfo.html",
          "hash": "PcgKJN9nURRIQMgQVYSOSA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.Convert.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.Convert.html",
          "hash": "O+EEBM/ljqjnImBqbsfkbg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.OpcodeAssembler.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.OpcodeAssembler.html",
          "hash": "eFBIH+zEd50gxvAsFQ9RZQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.OpcodeDisassembler.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.OpcodeDisassembler.html",
          "hash": "vSj1IFUSrpSh0ndWo8k03Q=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.PatternTools.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.PatternTools.html",
          "hash": "YxTA14LQM1CWI+JouDRrGw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.Payloads.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.Payloads.html",
          "hash": "phx0gCfYMmHTD0P6T9tS/Q=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.PtrRemover.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.PtrRemover.html",
          "hash": "GdQqodlX3mYCNIbnWreviA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.RopChainGenerator32.X86Lists.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.RopChainGenerator32.X86Lists.html",
          "hash": "U8cfWwlJmyWJTD2gG4Jp7A=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.RopChainGenerator32.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.RopChainGenerator32.html",
          "hash": "GCi3SaahGGNOfVZZf7zfEg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.RopChainGenerator64.X64Lists.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.RopChainGenerator64.X64Lists.html",
          "hash": "W3s053W0r4+bcZWgRh3hZA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.RopChainGenerator64.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.RopChainGenerator64.html",
          "hash": "Reqw0yjmak/1eo4nM+x75Q=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.Utilities.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.Utilities.html",
          "hash": "l9f45qJY/Tf5QvxzOAUGsw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/ERC.yml",
      "output": {
        ".html": {
          "relative_path": "api/ERC.html",
          "hash": "KZSG7RbnbE5JO6i9YQhQJg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "api/index.md",
      "output": {
        ".html": {
          "relative_path": "api/index.html",
          "hash": "hPYCWqYUEXVZVL3qVrcZ+g=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "api/toc.yml",
      "output": {
        ".html": {
          "relative_path": "api/toc.html",
          "hash": "HWdu7b5uaUb2KaI1afXOqQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "articles/LICENSE.md",
      "output": {
        ".html": {
          "relative_path": "articles/LICENSE.html",
          "hash": "eCZ6/K0A4mKe6kRRZan5+A=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "articles/intro.md",
      "output": {
        ".html": {
          "relative_path": "articles/intro.html",
          "hash": "VX1ZJ6Es1l7iI9bmpxoOrw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "articles/toc.yml",
      "output": {
        ".html": {
          "relative_path": "articles/toc.html",
          "hash": "gB8AESyvNru97tzIZofEEg=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "index.md",
      "output": {
        ".html": {
          "relative_path": "index.html",
          "hash": "5a++662pB3tOEugXxQ/cvQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "toc.yml",
      "output": {
        ".html": {
          "relative_path": "toc.html",
          "hash": "+rHUkRZHZRi5gd1aTU6lJA=="
        }
      },
      "is_incremental": false,
      "version": ""
    }
  ],
  "incremental_info": [
    {
      "status": {
        "can_incremental": false,
        "details": "Cannot build incrementally because last build info is missing.",
        "incrementalPhase": "build",
        "total_file_count": 0,
        "skipped_file_count": 0,
        "full_build_reason_code": "NoAvailableBuildCache"
      },
      "processors": {
        "ConceptualDocumentProcessor": {
          "can_incremental": false,
          "incrementalPhase": "build",
          "total_file_count": 4,
          "skipped_file_count": 0
        },
        "ManagedReferenceDocumentProcessor": {
          "can_incremental": false,
          "incrementalPhase": "build",
          "total_file_count": 53,
          "skipped_file_count": 0
        },
        "TocDocumentProcessor": {
          "can_incremental": false,
          "details": "Processor TocDocumentProcessor cannot support incremental build because the processor doesn't implement ISupportIncrementalDocumentProcessor interface.",
          "incrementalPhase": "build",
          "total_file_count": 0,
          "skipped_file_count": 0
        }
      }
    },
    {
      "status": {
        "can_incremental": false,
        "details": "Cannot support incremental post processing, the reason is: last post processor info is null.",
        "incrementalPhase": "postProcessing",
        "total_file_count": 0,
        "skipped_file_count": 0
      },
      "processors": {}
    }
  ],
  "version_info": {},
  "groups": [
    {
      "xrefmap": "xrefmap.yml"
    }
  ]
}


================================================
File: ERC/docs/search-stopwords.json
================================================
[
  "a",
  "able",
  "about",
  "across",
  "after",
  "all",
  "almost",
  "also",
  "am",
  "among",
  "an",
  "and",
  "any",
  "are",
  "as",
  "at",
  "be",
  "because",
  "been",
  "but",
  "by",
  "can",
  "cannot",
  "could",
  "dear",
  "did",
  "do",
  "does",
  "either",
  "else",
  "ever",
  "every",
  "for",
  "from",
  "get",
  "got",
  "had",
  "has",
  "have",
  "he",
  "her",
  "hers",
  "him",
  "his",
  "how",
  "however",
  "i",
  "if",
  "in",
  "into",
  "is",
  "it",
  "its",
  "just",
  "least",
  "let",
  "like",
  "likely",
  "may",
  "me",
  "might",
  "most",
  "must",
  "my",
  "neither",
  "no",
  "nor",
  "not",
  "of",
  "off",
  "often",
  "on",
  "only",
  "or",
  "other",
  "our",
  "own",
  "rather",
  "said",
  "say",
  "says",
  "she",
  "should",
  "since",
  "so",
  "some",
  "than",
  "that",
  "the",
  "their",
  "them",
  "then",
  "there",
  "these",
  "they",
  "this",
  "tis",
  "to",
  "too",
  "twas",
  "us",
  "wants",
  "was",
  "we",
  "were",
  "what",
  "when",
  "where",
  "which",
  "while",
  "who",
  "whom",
  "why",
  "will",
  "with",
  "would",
  "yet",
  "you",
  "your"
]



================================================
File: ERC/docs/toc.html
================================================
ï»¿
<div id="sidetoggle">
  <div>
    <div class="sidefilter">
      <form class="toc-filter">
        <span class="glyphicon glyphicon-filter filter-icon"></span>
        <span class="glyphicon glyphicon-remove clear-icon" id="toc_filter_clear"></span>
        <input type="text" id="toc_filter_input" placeholder="Enter here to filter..." onkeypress="if(event.keyCode==13) {return false;}">
      </form>
    </div>
    <div class="sidetoc">
      <div class="toc" id="toc">
          
          <ul class="nav level1">
                <li>
                    <a href="articles/intro.html" name="articles/toc.html" title="Articles">Articles</a>
                </li>
                <li>
                    <a href="api/index.html" name="api/toc.html" title="Api Documentation">Api Documentation</a>
                </li>
          </ul>
      </div>
    </div>
  </div>
</div>


================================================
File: ERC/docs/xrefmap.yml
================================================
### YamlMime:XRefMap
sorted: true
references:
- uid: ERC
  name: ERC
  href: api/ERC.html
  commentId: N:ERC
  fullName: ERC
  nameWithType: ERC
- uid: ERC.DisplayOutput
  name: DisplayOutput
  href: api/ERC.DisplayOutput.html
  commentId: T:ERC.DisplayOutput
  fullName: ERC.DisplayOutput
  nameWithType: DisplayOutput
- uid: ERC.DisplayOutput.AssembleOpcodes(System.String[],ERC.MachineType)
  name: AssembleOpcodes(String[], MachineType)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_AssembleOpcodes_System_String___ERC_MachineType_
  commentId: M:ERC.DisplayOutput.AssembleOpcodes(System.String[],ERC.MachineType)
  name.vb: AssembleOpcodes(String(), MachineType)
  fullName: ERC.DisplayOutput.AssembleOpcodes(System.String[], ERC.MachineType)
  fullName.vb: ERC.DisplayOutput.AssembleOpcodes(System.String(), ERC.MachineType)
  nameWithType: DisplayOutput.AssembleOpcodes(String[], MachineType)
  nameWithType.vb: DisplayOutput.AssembleOpcodes(String(), MachineType)
- uid: ERC.DisplayOutput.AssembleOpcodes(System.String[],System.UInt32)
  name: AssembleOpcodes(String[], UInt32)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_AssembleOpcodes_System_String___System_UInt32_
  commentId: M:ERC.DisplayOutput.AssembleOpcodes(System.String[],System.UInt32)
  name.vb: AssembleOpcodes(String(), UInt32)
  fullName: ERC.DisplayOutput.AssembleOpcodes(System.String[], System.UInt32)
  fullName.vb: ERC.DisplayOutput.AssembleOpcodes(System.String(), System.UInt32)
  nameWithType: DisplayOutput.AssembleOpcodes(String[], UInt32)
  nameWithType.vb: DisplayOutput.AssembleOpcodes(String(), UInt32)
- uid: ERC.DisplayOutput.AssembleOpcodes*
  name: AssembleOpcodes
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_AssembleOpcodes_
  commentId: Overload:ERC.DisplayOutput.AssembleOpcodes
  isSpec: "True"
  fullName: ERC.DisplayOutput.AssembleOpcodes
  nameWithType: DisplayOutput.AssembleOpcodes
- uid: ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  name: CompareByteArrayToMemoryRegion(ProcessInfo, IntPtr, Byte[])
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_CompareByteArrayToMemoryRegion_ERC_ProcessInfo_System_IntPtr_System_Byte___
  commentId: M:ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  name.vb: CompareByteArrayToMemoryRegion(ProcessInfo, IntPtr, Byte())
  fullName: ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo, System.IntPtr, System.Byte[])
  fullName.vb: ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo, System.IntPtr, System.Byte())
  nameWithType: DisplayOutput.CompareByteArrayToMemoryRegion(ProcessInfo, IntPtr, Byte[])
  nameWithType.vb: DisplayOutput.CompareByteArrayToMemoryRegion(ProcessInfo, IntPtr, Byte())
- uid: ERC.DisplayOutput.CompareByteArrayToMemoryRegion*
  name: CompareByteArrayToMemoryRegion
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_CompareByteArrayToMemoryRegion_
  commentId: Overload:ERC.DisplayOutput.CompareByteArrayToMemoryRegion
  isSpec: "True"
  fullName: ERC.DisplayOutput.CompareByteArrayToMemoryRegion
  nameWithType: DisplayOutput.CompareByteArrayToMemoryRegion
- uid: ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],ERC.MachineType)
  name: DisassembleOpcodes(Byte[], MachineType)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisassembleOpcodes_System_Byte___ERC_MachineType_
  commentId: M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],ERC.MachineType)
  name.vb: DisassembleOpcodes(Byte(), MachineType)
  fullName: ERC.DisplayOutput.DisassembleOpcodes(System.Byte[], ERC.MachineType)
  fullName.vb: ERC.DisplayOutput.DisassembleOpcodes(System.Byte(), ERC.MachineType)
  nameWithType: DisplayOutput.DisassembleOpcodes(Byte[], MachineType)
  nameWithType.vb: DisplayOutput.DisassembleOpcodes(Byte(), MachineType)
- uid: ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],System.UInt32)
  name: DisassembleOpcodes(Byte[], UInt32)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisassembleOpcodes_System_Byte___System_UInt32_
  commentId: M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],System.UInt32)
  name.vb: DisassembleOpcodes(Byte(), UInt32)
  fullName: ERC.DisplayOutput.DisassembleOpcodes(System.Byte[], System.UInt32)
  fullName.vb: ERC.DisplayOutput.DisassembleOpcodes(System.Byte(), System.UInt32)
  nameWithType: DisplayOutput.DisassembleOpcodes(Byte[], UInt32)
  nameWithType.vb: DisplayOutput.DisassembleOpcodes(Byte(), UInt32)
- uid: ERC.DisplayOutput.DisassembleOpcodes*
  name: DisassembleOpcodes
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisassembleOpcodes_
  commentId: Overload:ERC.DisplayOutput.DisassembleOpcodes
  isSpec: "True"
  fullName: ERC.DisplayOutput.DisassembleOpcodes
  nameWithType: DisplayOutput.DisassembleOpcodes
- uid: ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo,System.Boolean)
  name: DisplayProcessInfo(ProcessInfo, Boolean)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisplayProcessInfo_ERC_ProcessInfo_System_Boolean_
  commentId: M:ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo,System.Boolean)
  fullName: ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo, System.Boolean)
  nameWithType: DisplayOutput.DisplayProcessInfo(ProcessInfo, Boolean)
- uid: ERC.DisplayOutput.DisplayProcessInfo*
  name: DisplayProcessInfo
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisplayProcessInfo_
  commentId: Overload:ERC.DisplayOutput.DisplayProcessInfo
  isSpec: "True"
  fullName: ERC.DisplayOutput.DisplayProcessInfo
  nameWithType: DisplayOutput.DisplayProcessInfo
- uid: ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo,System.Boolean)
  name: DisplayThreadInfo(ProcessInfo, Boolean)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisplayThreadInfo_ERC_ProcessInfo_System_Boolean_
  commentId: M:ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo,System.Boolean)
  fullName: ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo, System.Boolean)
  nameWithType: DisplayOutput.DisplayThreadInfo(ProcessInfo, Boolean)
- uid: ERC.DisplayOutput.DisplayThreadInfo*
  name: DisplayThreadInfo
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DisplayThreadInfo_
  commentId: Overload:ERC.DisplayOutput.DisplayThreadInfo
  isSpec: "True"
  fullName: ERC.DisplayOutput.DisplayThreadInfo
  nameWithType: DisplayOutput.DisplayThreadInfo
- uid: ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo,System.IntPtr,System.Int32)
  name: DumpMemory(ProcessInfo, IntPtr, Int32)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DumpMemory_ERC_ProcessInfo_System_IntPtr_System_Int32_
  commentId: M:ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo,System.IntPtr,System.Int32)
  fullName: ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo, System.IntPtr, System.Int32)
  nameWithType: DisplayOutput.DumpMemory(ProcessInfo, IntPtr, Int32)
- uid: ERC.DisplayOutput.DumpMemory*
  name: DumpMemory
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_DumpMemory_
  commentId: Overload:ERC.DisplayOutput.DumpMemory
  isSpec: "True"
  fullName: ERC.DisplayOutput.DumpMemory
  nameWithType: DisplayOutput.DumpMemory
- uid: ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore,System.Byte[])
  name: GenerateByteArray(ErcCore, Byte[])
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateByteArray_ERC_ErcCore_System_Byte___
  commentId: M:ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore,System.Byte[])
  name.vb: GenerateByteArray(ErcCore, Byte())
  fullName: ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore, System.Byte[])
  fullName.vb: ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore, System.Byte())
  nameWithType: DisplayOutput.GenerateByteArray(ErcCore, Byte[])
  nameWithType.vb: DisplayOutput.GenerateByteArray(ErcCore, Byte())
- uid: ERC.DisplayOutput.GenerateByteArray*
  name: GenerateByteArray
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateByteArray_
  commentId: Overload:ERC.DisplayOutput.GenerateByteArray
  isSpec: "True"
  fullName: ERC.DisplayOutput.GenerateByteArray
  nameWithType: DisplayOutput.GenerateByteArray
- uid: ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore,System.String)
  name: GenerateEggHunters(ErcCore, String)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateEggHunters_ERC_ErcCore_System_String_
  commentId: M:ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore,System.String)
  fullName: ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore, System.String)
  nameWithType: DisplayOutput.GenerateEggHunters(ErcCore, String)
- uid: ERC.DisplayOutput.GenerateEggHunters*
  name: GenerateEggHunters
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateEggHunters_
  commentId: Overload:ERC.DisplayOutput.GenerateEggHunters
  isSpec: "True"
  fullName: ERC.DisplayOutput.GenerateEggHunters
  nameWithType: DisplayOutput.GenerateEggHunters
- uid: ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo,System.Int32,System.Boolean)
  name: GenerateFindNRPTable(ProcessInfo, Int32, Boolean)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateFindNRPTable_ERC_ProcessInfo_System_Int32_System_Boolean_
  commentId: M:ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo,System.Int32,System.Boolean)
  fullName: ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo, System.Int32, System.Boolean)
  nameWithType: DisplayOutput.GenerateFindNRPTable(ProcessInfo, Int32, Boolean)
- uid: ERC.DisplayOutput.GenerateFindNRPTable*
  name: GenerateFindNRPTable
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateFindNRPTable_
  commentId: Overload:ERC.DisplayOutput.GenerateFindNRPTable
  isSpec: "True"
  fullName: ERC.DisplayOutput.GenerateFindNRPTable
  nameWithType: DisplayOutput.GenerateFindNRPTable
- uid: ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo,System.Boolean)
  name: GenerateModuleInfoTable(ProcessInfo, Boolean)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateModuleInfoTable_ERC_ProcessInfo_System_Boolean_
  commentId: M:ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo,System.Boolean)
  fullName: ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo, System.Boolean)
  nameWithType: DisplayOutput.GenerateModuleInfoTable(ProcessInfo, Boolean)
- uid: ERC.DisplayOutput.GenerateModuleInfoTable*
  name: GenerateModuleInfoTable
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GenerateModuleInfoTable_
  commentId: Overload:ERC.DisplayOutput.GenerateModuleInfoTable
  isSpec: "True"
  fullName: ERC.DisplayOutput.GenerateModuleInfoTable
  nameWithType: DisplayOutput.GenerateModuleInfoTable
- uid: ERC.DisplayOutput.GeneratePattern(System.Int32,ERC.ErcCore,System.Boolean)
  name: GeneratePattern(Int32, ErcCore, Boolean)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GeneratePattern_System_Int32_ERC_ErcCore_System_Boolean_
  commentId: M:ERC.DisplayOutput.GeneratePattern(System.Int32,ERC.ErcCore,System.Boolean)
  fullName: ERC.DisplayOutput.GeneratePattern(System.Int32, ERC.ErcCore, System.Boolean)
  nameWithType: DisplayOutput.GeneratePattern(Int32, ErcCore, Boolean)
- uid: ERC.DisplayOutput.GeneratePattern*
  name: GeneratePattern
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GeneratePattern_
  commentId: Overload:ERC.DisplayOutput.GeneratePattern
  isSpec: "True"
  fullName: ERC.DisplayOutput.GeneratePattern
  nameWithType: DisplayOutput.GeneratePattern
- uid: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)
  name: GetSEHJumps(ProcessInfo, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GetSEHJumps_ERC_ProcessInfo_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Byte___System_String_
  commentId: M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)
  name.vb: GetSEHJumps(ProcessInfo, Boolean, Boolean, Boolean, Boolean, Boolean, Byte(), String)
  fullName: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Byte[], System.String)
  fullName.vb: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Byte(), System.String)
  nameWithType: DisplayOutput.GetSEHJumps(ProcessInfo, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)
  nameWithType.vb: DisplayOutput.GetSEHJumps(ProcessInfo, Boolean, Boolean, Boolean, Boolean, Boolean, Byte(), String)
- uid: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Byte[],System.Collections.Generic.List{System.String})
  name: GetSEHJumps(ProcessInfo, Byte[], List<String>)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GetSEHJumps_ERC_ProcessInfo_System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: GetSEHJumps(ProcessInfo, Byte(), List(Of String))
  fullName: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo, System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo, System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: DisplayOutput.GetSEHJumps(ProcessInfo, Byte[], List<String>)
  nameWithType.vb: DisplayOutput.GetSEHJumps(ProcessInfo, Byte(), List(Of String))
- uid: ERC.DisplayOutput.GetSEHJumps*
  name: GetSEHJumps
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_GetSEHJumps_
  commentId: Overload:ERC.DisplayOutput.GetSEHJumps
  isSpec: "True"
  fullName: ERC.DisplayOutput.GetSEHJumps
  nameWithType: DisplayOutput.GetSEHJumps
- uid: ERC.DisplayOutput.ListLocalProcesses
  name: ListLocalProcesses()
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_ListLocalProcesses
  commentId: M:ERC.DisplayOutput.ListLocalProcesses
  fullName: ERC.DisplayOutput.ListLocalProcesses()
  nameWithType: DisplayOutput.ListLocalProcesses()
- uid: ERC.DisplayOutput.ListLocalProcesses*
  name: ListLocalProcesses
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_ListLocalProcesses_
  commentId: Overload:ERC.DisplayOutput.ListLocalProcesses
  isSpec: "True"
  fullName: ERC.DisplayOutput.ListLocalProcesses
  nameWithType: DisplayOutput.ListLocalProcesses
- uid: ERC.DisplayOutput.ListRemoteProcesses(System.String)
  name: ListRemoteProcesses(String)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_ListRemoteProcesses_System_String_
  commentId: M:ERC.DisplayOutput.ListRemoteProcesses(System.String)
  fullName: ERC.DisplayOutput.ListRemoteProcesses(System.String)
  nameWithType: DisplayOutput.ListRemoteProcesses(String)
- uid: ERC.DisplayOutput.ListRemoteProcesses*
  name: ListRemoteProcesses
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_ListRemoteProcesses_
  commentId: Overload:ERC.DisplayOutput.ListRemoteProcesses
  isSpec: "True"
  fullName: ERC.DisplayOutput.ListRemoteProcesses
  nameWithType: DisplayOutput.ListRemoteProcesses
- uid: ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32)
  name: RopChainGadgets32(RopChainGenerator32)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_RopChainGadgets32_ERC_Utilities_RopChainGenerator32_
  commentId: M:ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32)
  fullName: ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32)
  nameWithType: DisplayOutput.RopChainGadgets32(RopChainGenerator32)
- uid: ERC.DisplayOutput.RopChainGadgets32*
  name: RopChainGadgets32
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_RopChainGadgets32_
  commentId: Overload:ERC.DisplayOutput.RopChainGadgets32
  isSpec: "True"
  fullName: ERC.DisplayOutput.RopChainGadgets32
  nameWithType: DisplayOutput.RopChainGadgets32
- uid: ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64)
  name: RopChainGadgets64(RopChainGenerator64)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_RopChainGadgets64_ERC_Utilities_RopChainGenerator64_
  commentId: M:ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64)
  fullName: ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64)
  nameWithType: DisplayOutput.RopChainGadgets64(RopChainGenerator64)
- uid: ERC.DisplayOutput.RopChainGadgets64*
  name: RopChainGadgets64
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_RopChainGadgets64_
  commentId: Overload:ERC.DisplayOutput.RopChainGadgets64
  isSpec: "True"
  fullName: ERC.DisplayOutput.RopChainGadgets64
  nameWithType: DisplayOutput.RopChainGadgets64
- uid: ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)
  name: SearchMemory(ProcessInfo, Int32, String, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_SearchMemory_ERC_ProcessInfo_System_Int32_System_String_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Byte___System_String_
  commentId: M:ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)
  name.vb: SearchMemory(ProcessInfo, Int32, String, Boolean, Boolean, Boolean, Boolean, Boolean, Byte(), String)
  fullName: ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo, System.Int32, System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Byte[], System.String)
  fullName.vb: ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo, System.Int32, System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Byte(), System.String)
  nameWithType: DisplayOutput.SearchMemory(ProcessInfo, Int32, String, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)
  nameWithType.vb: DisplayOutput.SearchMemory(ProcessInfo, Int32, String, Boolean, Boolean, Boolean, Boolean, Boolean, Byte(), String)
- uid: ERC.DisplayOutput.SearchMemory*
  name: SearchMemory
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_SearchMemory_
  commentId: Overload:ERC.DisplayOutput.SearchMemory
  isSpec: "True"
  fullName: ERC.DisplayOutput.SearchMemory
  nameWithType: DisplayOutput.SearchMemory
- uid: ERC.DisplayOutput.WriteToFile(System.String,System.String,System.String,System.Collections.Generic.List{System.String})
  name: WriteToFile(String, String, String, List<String>)
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_WriteToFile_System_String_System_String_System_String_System_Collections_Generic_List_System_String__
  commentId: M:ERC.DisplayOutput.WriteToFile(System.String,System.String,System.String,System.Collections.Generic.List{System.String})
  name.vb: WriteToFile(String, String, String, List(Of String))
  fullName: ERC.DisplayOutput.WriteToFile(System.String, System.String, System.String, System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.DisplayOutput.WriteToFile(System.String, System.String, System.String, System.Collections.Generic.List(Of System.String))
  nameWithType: DisplayOutput.WriteToFile(String, String, String, List<String>)
  nameWithType.vb: DisplayOutput.WriteToFile(String, String, String, List(Of String))
- uid: ERC.DisplayOutput.WriteToFile*
  name: WriteToFile
  href: api/ERC.DisplayOutput.html#ERC_DisplayOutput_WriteToFile_
  commentId: Overload:ERC.DisplayOutput.WriteToFile
  isSpec: "True"
  fullName: ERC.DisplayOutput.WriteToFile
  nameWithType: DisplayOutput.WriteToFile
- uid: ERC.ErcCore
  name: ErcCore
  href: api/ERC.ErcCore.html
  commentId: T:ERC.ErcCore
  fullName: ERC.ErcCore
  nameWithType: ErcCore
- uid: ERC.ErcCore.#ctor
  name: ErcCore()
  href: api/ERC.ErcCore.html#ERC_ErcCore__ctor
  commentId: M:ERC.ErcCore.#ctor
  fullName: ERC.ErcCore.ErcCore()
  nameWithType: ErcCore.ErcCore()
- uid: ERC.ErcCore.#ctor(ERC.ErcCore)
  name: ErcCore(ErcCore)
  href: api/ERC.ErcCore.html#ERC_ErcCore__ctor_ERC_ErcCore_
  commentId: M:ERC.ErcCore.#ctor(ERC.ErcCore)
  fullName: ERC.ErcCore.ErcCore(ERC.ErcCore)
  nameWithType: ErcCore.ErcCore(ErcCore)
- uid: ERC.ErcCore.#ctor*
  name: ErcCore
  href: api/ERC.ErcCore.html#ERC_ErcCore__ctor_
  commentId: Overload:ERC.ErcCore.#ctor
  isSpec: "True"
  fullName: ERC.ErcCore.ErcCore
  nameWithType: ErcCore.ErcCore
- uid: ERC.ErcCore.Author
  name: Author
  href: api/ERC.ErcCore.html#ERC_ErcCore_Author
  commentId: P:ERC.ErcCore.Author
  fullName: ERC.ErcCore.Author
  nameWithType: ErcCore.Author
- uid: ERC.ErcCore.Author*
  name: Author
  href: api/ERC.ErcCore.html#ERC_ErcCore_Author_
  commentId: Overload:ERC.ErcCore.Author
  isSpec: "True"
  fullName: ERC.ErcCore.Author
  nameWithType: ErcCore.Author
- uid: ERC.ErcCore.ErcVersion
  name: ErcVersion
  href: api/ERC.ErcCore.html#ERC_ErcCore_ErcVersion
  commentId: P:ERC.ErcCore.ErcVersion
  fullName: ERC.ErcCore.ErcVersion
  nameWithType: ErcCore.ErcVersion
- uid: ERC.ErcCore.ErcVersion*
  name: ErcVersion
  href: api/ERC.ErcCore.html#ERC_ErcCore_ErcVersion_
  commentId: Overload:ERC.ErcCore.ErcVersion
  isSpec: "True"
  fullName: ERC.ErcCore.ErcVersion
  nameWithType: ErcCore.ErcVersion
- uid: ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
  name: GetHandleInformation(IntPtr, out UInt32)
  href: api/ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__
  commentId: M:ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
  name.vb: GetHandleInformation(IntPtr, ByRef UInt32)
  fullName: ERC.ErcCore.GetHandleInformation(System.IntPtr, out System.UInt32)
  fullName.vb: ERC.ErcCore.GetHandleInformation(System.IntPtr, ByRef System.UInt32)
  nameWithType: ErcCore.GetHandleInformation(IntPtr, out UInt32)
  nameWithType.vb: ErcCore.GetHandleInformation(IntPtr, ByRef UInt32)
- uid: ERC.ErcCore.GetHandleInformation*
  name: GetHandleInformation
  href: api/ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_
  commentId: Overload:ERC.ErcCore.GetHandleInformation
  fullName: ERC.ErcCore.GetHandleInformation
  nameWithType: ErcCore.GetHandleInformation
- uid: ERC.ErcCore.LogEvent(System.Exception)
  name: LogEvent(Exception)
  href: api/ERC.ErcCore.html#ERC_ErcCore_LogEvent_System_Exception_
  commentId: M:ERC.ErcCore.LogEvent(System.Exception)
  fullName: ERC.ErcCore.LogEvent(System.Exception)
  nameWithType: ErcCore.LogEvent(Exception)
- uid: ERC.ErcCore.LogEvent*
  name: LogEvent
  href: api/ERC.ErcCore.html#ERC_ErcCore_LogEvent_
  commentId: Overload:ERC.ErcCore.LogEvent
  isSpec: "True"
  fullName: ERC.ErcCore.LogEvent
  nameWithType: ErcCore.LogEvent
- uid: ERC.ErcCore.PatternExtendedPath
  name: PatternExtendedPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath
  commentId: P:ERC.ErcCore.PatternExtendedPath
  fullName: ERC.ErcCore.PatternExtendedPath
  nameWithType: ErcCore.PatternExtendedPath
- uid: ERC.ErcCore.PatternExtendedPath*
  name: PatternExtendedPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath_
  commentId: Overload:ERC.ErcCore.PatternExtendedPath
  isSpec: "True"
  fullName: ERC.ErcCore.PatternExtendedPath
  nameWithType: ErcCore.PatternExtendedPath
- uid: ERC.ErcCore.PatternStandardPath
  name: PatternStandardPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath
  commentId: P:ERC.ErcCore.PatternStandardPath
  fullName: ERC.ErcCore.PatternStandardPath
  nameWithType: ErcCore.PatternStandardPath
- uid: ERC.ErcCore.PatternStandardPath*
  name: PatternStandardPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath_
  commentId: Overload:ERC.ErcCore.PatternStandardPath
  isSpec: "True"
  fullName: ERC.ErcCore.PatternStandardPath
  nameWithType: ErcCore.PatternStandardPath
- uid: ERC.ErcCore.SetAuthor(System.String)
  name: SetAuthor(String)
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetAuthor_System_String_
  commentId: M:ERC.ErcCore.SetAuthor(System.String)
  fullName: ERC.ErcCore.SetAuthor(System.String)
  nameWithType: ErcCore.SetAuthor(String)
- uid: ERC.ErcCore.SetAuthor*
  name: SetAuthor
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetAuthor_
  commentId: Overload:ERC.ErcCore.SetAuthor
  isSpec: "True"
  fullName: ERC.ErcCore.SetAuthor
  nameWithType: ErcCore.SetAuthor
- uid: ERC.ErcCore.SetErrorFile(System.String)
  name: SetErrorFile(String)
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_System_String_
  commentId: M:ERC.ErcCore.SetErrorFile(System.String)
  fullName: ERC.ErcCore.SetErrorFile(System.String)
  nameWithType: ErcCore.SetErrorFile(String)
- uid: ERC.ErcCore.SetErrorFile*
  name: SetErrorFile
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_
  commentId: Overload:ERC.ErcCore.SetErrorFile
  isSpec: "True"
  fullName: ERC.ErcCore.SetErrorFile
  nameWithType: ErcCore.SetErrorFile
- uid: ERC.ErcCore.SetPatternExtendedPath(System.String)
  name: SetPatternExtendedPath(String)
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_System_String_
  commentId: M:ERC.ErcCore.SetPatternExtendedPath(System.String)
  fullName: ERC.ErcCore.SetPatternExtendedPath(System.String)
  nameWithType: ErcCore.SetPatternExtendedPath(String)
- uid: ERC.ErcCore.SetPatternExtendedPath*
  name: SetPatternExtendedPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_
  commentId: Overload:ERC.ErcCore.SetPatternExtendedPath
  isSpec: "True"
  fullName: ERC.ErcCore.SetPatternExtendedPath
  nameWithType: ErcCore.SetPatternExtendedPath
- uid: ERC.ErcCore.SetPatternStandardPath(System.String)
  name: SetPatternStandardPath(String)
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_System_String_
  commentId: M:ERC.ErcCore.SetPatternStandardPath(System.String)
  fullName: ERC.ErcCore.SetPatternStandardPath(System.String)
  nameWithType: ErcCore.SetPatternStandardPath(String)
- uid: ERC.ErcCore.SetPatternStandardPath*
  name: SetPatternStandardPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_
  commentId: Overload:ERC.ErcCore.SetPatternStandardPath
  isSpec: "True"
  fullName: ERC.ErcCore.SetPatternStandardPath
  nameWithType: ErcCore.SetPatternStandardPath
- uid: ERC.ErcCore.SetWorkingDirectory(System.String)
  name: SetWorkingDirectory(String)
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_System_String_
  commentId: M:ERC.ErcCore.SetWorkingDirectory(System.String)
  fullName: ERC.ErcCore.SetWorkingDirectory(System.String)
  nameWithType: ErcCore.SetWorkingDirectory(String)
- uid: ERC.ErcCore.SetWorkingDirectory*
  name: SetWorkingDirectory
  href: api/ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_
  commentId: Overload:ERC.ErcCore.SetWorkingDirectory
  isSpec: "True"
  fullName: ERC.ErcCore.SetWorkingDirectory
  nameWithType: ErcCore.SetWorkingDirectory
- uid: ERC.ErcCore.SystemErrorLogPath
  name: SystemErrorLogPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath
  commentId: P:ERC.ErcCore.SystemErrorLogPath
  fullName: ERC.ErcCore.SystemErrorLogPath
  nameWithType: ErcCore.SystemErrorLogPath
- uid: ERC.ErcCore.SystemErrorLogPath*
  name: SystemErrorLogPath
  href: api/ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath_
  commentId: Overload:ERC.ErcCore.SystemErrorLogPath
  isSpec: "True"
  fullName: ERC.ErcCore.SystemErrorLogPath
  nameWithType: ErcCore.SystemErrorLogPath
- uid: ERC.ErcCore.WorkingDirectory
  name: WorkingDirectory
  href: api/ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory
  commentId: P:ERC.ErcCore.WorkingDirectory
  fullName: ERC.ErcCore.WorkingDirectory
  nameWithType: ErcCore.WorkingDirectory
- uid: ERC.ErcCore.WorkingDirectory*
  name: WorkingDirectory
  href: api/ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory_
  commentId: Overload:ERC.ErcCore.WorkingDirectory
  isSpec: "True"
  fullName: ERC.ErcCore.WorkingDirectory
  nameWithType: ErcCore.WorkingDirectory
- uid: ERC.ERCException
  name: ERCException
  href: api/ERC.ERCException.html
  commentId: T:ERC.ERCException
  fullName: ERC.ERCException
  nameWithType: ERCException
- uid: ERC.ERCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: ERCException(SerializationInfo, StreamingContext)
  href: api/ERC.ERCException.html#ERC_ERCException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_
  commentId: M:ERC.ERCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  fullName: ERC.ERCException.ERCException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType: ERCException.ERCException(SerializationInfo, StreamingContext)
- uid: ERC.ERCException.#ctor(System.String)
  name: ERCException(String)
  href: api/ERC.ERCException.html#ERC_ERCException__ctor_System_String_
  commentId: M:ERC.ERCException.#ctor(System.String)
  fullName: ERC.ERCException.ERCException(System.String)
  nameWithType: ERCException.ERCException(String)
- uid: ERC.ERCException.#ctor*
  name: ERCException
  href: api/ERC.ERCException.html#ERC_ERCException__ctor_
  commentId: Overload:ERC.ERCException.#ctor
  isSpec: "True"
  fullName: ERC.ERCException.ERCException
  nameWithType: ERCException.ERCException
- uid: ERC.ErcResult`1
  name: ErcResult<T>
  href: api/ERC.ErcResult-1.html
  commentId: T:ERC.ErcResult`1
  name.vb: ErcResult(Of T)
  fullName: ERC.ErcResult<T>
  fullName.vb: ERC.ErcResult(Of T)
  nameWithType: ErcResult<T>
  nameWithType.vb: ErcResult(Of T)
- uid: ERC.ErcResult`1.#ctor(ERC.ErcCore)
  name: ErcResult(ErcCore)
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1__ctor_ERC_ErcCore_
  commentId: M:ERC.ErcResult`1.#ctor(ERC.ErcCore)
  fullName: ERC.ErcResult<T>.ErcResult(ERC.ErcCore)
  fullName.vb: ERC.ErcResult(Of T).ErcResult(ERC.ErcCore)
  nameWithType: ErcResult<T>.ErcResult(ErcCore)
  nameWithType.vb: ErcResult(Of T).ErcResult(ErcCore)
- uid: ERC.ErcResult`1.#ctor(ERC.ErcCore,System.String)
  name: ErcResult(ErcCore, String)
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1__ctor_ERC_ErcCore_System_String_
  commentId: M:ERC.ErcResult`1.#ctor(ERC.ErcCore,System.String)
  fullName: ERC.ErcResult<T>.ErcResult(ERC.ErcCore, System.String)
  fullName.vb: ERC.ErcResult(Of T).ErcResult(ERC.ErcCore, System.String)
  nameWithType: ErcResult<T>.ErcResult(ErcCore, String)
  nameWithType.vb: ErcResult(Of T).ErcResult(ErcCore, String)
- uid: ERC.ErcResult`1.#ctor*
  name: ErcResult
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1__ctor_
  commentId: Overload:ERC.ErcResult`1.#ctor
  isSpec: "True"
  fullName: ERC.ErcResult<T>.ErcResult
  fullName.vb: ERC.ErcResult(Of T).ErcResult
  nameWithType: ErcResult<T>.ErcResult
  nameWithType.vb: ErcResult(Of T).ErcResult
- uid: ERC.ErcResult`1.Error
  name: Error
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_Error
  commentId: P:ERC.ErcResult`1.Error
  fullName: ERC.ErcResult<T>.Error
  fullName.vb: ERC.ErcResult(Of T).Error
  nameWithType: ErcResult<T>.Error
  nameWithType.vb: ErcResult(Of T).Error
- uid: ERC.ErcResult`1.Error*
  name: Error
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_Error_
  commentId: Overload:ERC.ErcResult`1.Error
  isSpec: "True"
  fullName: ERC.ErcResult<T>.Error
  fullName.vb: ERC.ErcResult(Of T).Error
  nameWithType: ErcResult<T>.Error
  nameWithType.vb: ErcResult(Of T).Error
- uid: ERC.ErcResult`1.LogEvent
  name: LogEvent()
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_LogEvent
  commentId: M:ERC.ErcResult`1.LogEvent
  fullName: ERC.ErcResult<T>.LogEvent()
  fullName.vb: ERC.ErcResult(Of T).LogEvent()
  nameWithType: ErcResult<T>.LogEvent()
  nameWithType.vb: ErcResult(Of T).LogEvent()
- uid: ERC.ErcResult`1.LogEvent*
  name: LogEvent
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_LogEvent_
  commentId: Overload:ERC.ErcResult`1.LogEvent
  isSpec: "True"
  fullName: ERC.ErcResult<T>.LogEvent
  fullName.vb: ERC.ErcResult(Of T).LogEvent
  nameWithType: ErcResult<T>.LogEvent
  nameWithType.vb: ErcResult(Of T).LogEvent
- uid: ERC.ErcResult`1.ReturnValue
  name: ReturnValue
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_ReturnValue
  commentId: P:ERC.ErcResult`1.ReturnValue
  fullName: ERC.ErcResult<T>.ReturnValue
  fullName.vb: ERC.ErcResult(Of T).ReturnValue
  nameWithType: ErcResult<T>.ReturnValue
  nameWithType.vb: ErcResult(Of T).ReturnValue
- uid: ERC.ErcResult`1.ReturnValue*
  name: ReturnValue
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_ReturnValue_
  commentId: Overload:ERC.ErcResult`1.ReturnValue
  isSpec: "True"
  fullName: ERC.ErcResult<T>.ReturnValue
  fullName.vb: ERC.ErcResult(Of T).ReturnValue
  nameWithType: ErcResult<T>.ReturnValue
  nameWithType.vb: ErcResult(Of T).ReturnValue
- uid: ERC.ErcResult`1.ToString
  name: ToString()
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_ToString
  commentId: M:ERC.ErcResult`1.ToString
  fullName: ERC.ErcResult<T>.ToString()
  fullName.vb: ERC.ErcResult(Of T).ToString()
  nameWithType: ErcResult<T>.ToString()
  nameWithType.vb: ErcResult(Of T).ToString()
- uid: ERC.ErcResult`1.ToString*
  name: ToString
  href: api/ERC.ErcResult-1.html#ERC_ErcResult_1_ToString_
  commentId: Overload:ERC.ErcResult`1.ToString
  isSpec: "True"
  fullName: ERC.ErcResult<T>.ToString
  fullName.vb: ERC.ErcResult(Of T).ToString
  nameWithType: ErcResult<T>.ToString
  nameWithType.vb: ErcResult(Of T).ToString
- uid: ERC.MachineType
  name: MachineType
  href: api/ERC.MachineType.html
  commentId: T:ERC.MachineType
  fullName: ERC.MachineType
  nameWithType: MachineType
- uid: ERC.MachineType.error
  name: error
  href: api/ERC.MachineType.html#ERC_MachineType_error
  commentId: F:ERC.MachineType.error
  fullName: ERC.MachineType.error
  nameWithType: MachineType.error
- uid: ERC.MachineType.I386
  name: I386
  href: api/ERC.MachineType.html#ERC_MachineType_I386
  commentId: F:ERC.MachineType.I386
  fullName: ERC.MachineType.I386
  nameWithType: MachineType.I386
- uid: ERC.MachineType.Itanium
  name: Itanium
  href: api/ERC.MachineType.html#ERC_MachineType_Itanium
  commentId: F:ERC.MachineType.Itanium
  fullName: ERC.MachineType.Itanium
  nameWithType: MachineType.Itanium
- uid: ERC.MachineType.Native
  name: Native
  href: api/ERC.MachineType.html#ERC_MachineType_Native
  commentId: F:ERC.MachineType.Native
  fullName: ERC.MachineType.Native
  nameWithType: MachineType.Native
- uid: ERC.MachineType.x64
  name: x64
  href: api/ERC.MachineType.html#ERC_MachineType_x64
  commentId: F:ERC.MachineType.x64
  fullName: ERC.MachineType.x64
  nameWithType: MachineType.x64
- uid: ERC.ModuleInfo
  name: ModuleInfo
  href: api/ERC.ModuleInfo.html
  commentId: T:ERC.ModuleInfo
  fullName: ERC.ModuleInfo
  nameWithType: ModuleInfo
- uid: ERC.ModuleInfo.ModuleASLR
  name: ModuleASLR
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleASLR
  commentId: P:ERC.ModuleInfo.ModuleASLR
  fullName: ERC.ModuleInfo.ModuleASLR
  nameWithType: ModuleInfo.ModuleASLR
- uid: ERC.ModuleInfo.ModuleASLR*
  name: ModuleASLR
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleASLR_
  commentId: Overload:ERC.ModuleInfo.ModuleASLR
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleASLR
  nameWithType: ModuleInfo.ModuleASLR
- uid: ERC.ModuleInfo.ModuleBase
  name: ModuleBase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleBase
  commentId: P:ERC.ModuleInfo.ModuleBase
  fullName: ERC.ModuleInfo.ModuleBase
  nameWithType: ModuleInfo.ModuleBase
- uid: ERC.ModuleInfo.ModuleBase*
  name: ModuleBase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleBase_
  commentId: Overload:ERC.ModuleInfo.ModuleBase
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleBase
  nameWithType: ModuleInfo.ModuleBase
- uid: ERC.ModuleInfo.ModuleCore
  name: ModuleCore
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleCore
  commentId: P:ERC.ModuleInfo.ModuleCore
  fullName: ERC.ModuleInfo.ModuleCore
  nameWithType: ModuleInfo.ModuleCore
- uid: ERC.ModuleInfo.ModuleCore*
  name: ModuleCore
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleCore_
  commentId: Overload:ERC.ModuleInfo.ModuleCore
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleCore
  nameWithType: ModuleInfo.ModuleCore
- uid: ERC.ModuleInfo.ModuleEntry
  name: ModuleEntry
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleEntry
  commentId: P:ERC.ModuleInfo.ModuleEntry
  fullName: ERC.ModuleInfo.ModuleEntry
  nameWithType: ModuleInfo.ModuleEntry
- uid: ERC.ModuleInfo.ModuleEntry*
  name: ModuleEntry
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleEntry_
  commentId: Overload:ERC.ModuleInfo.ModuleEntry
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleEntry
  nameWithType: ModuleInfo.ModuleEntry
- uid: ERC.ModuleInfo.ModuleFailed
  name: ModuleFailed
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleFailed
  commentId: F:ERC.ModuleInfo.ModuleFailed
  fullName: ERC.ModuleInfo.ModuleFailed
  nameWithType: ModuleInfo.ModuleFailed
- uid: ERC.ModuleInfo.ModuleImageBase
  name: ModuleImageBase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleImageBase
  commentId: P:ERC.ModuleInfo.ModuleImageBase
  fullName: ERC.ModuleInfo.ModuleImageBase
  nameWithType: ModuleInfo.ModuleImageBase
- uid: ERC.ModuleInfo.ModuleImageBase*
  name: ModuleImageBase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleImageBase_
  commentId: Overload:ERC.ModuleInfo.ModuleImageBase
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleImageBase
  nameWithType: ModuleInfo.ModuleImageBase
- uid: ERC.ModuleInfo.ModuleMachineType
  name: ModuleMachineType
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleMachineType
  commentId: P:ERC.ModuleInfo.ModuleMachineType
  fullName: ERC.ModuleInfo.ModuleMachineType
  nameWithType: ModuleInfo.ModuleMachineType
- uid: ERC.ModuleInfo.ModuleMachineType*
  name: ModuleMachineType
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleMachineType_
  commentId: Overload:ERC.ModuleInfo.ModuleMachineType
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleMachineType
  nameWithType: ModuleInfo.ModuleMachineType
- uid: ERC.ModuleInfo.ModuleName
  name: ModuleName
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleName
  commentId: P:ERC.ModuleInfo.ModuleName
  fullName: ERC.ModuleInfo.ModuleName
  nameWithType: ModuleInfo.ModuleName
- uid: ERC.ModuleInfo.ModuleName*
  name: ModuleName
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleName_
  commentId: Overload:ERC.ModuleInfo.ModuleName
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleName
  nameWithType: ModuleInfo.ModuleName
- uid: ERC.ModuleInfo.ModuleNXCompat
  name: ModuleNXCompat
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleNXCompat
  commentId: P:ERC.ModuleInfo.ModuleNXCompat
  fullName: ERC.ModuleInfo.ModuleNXCompat
  nameWithType: ModuleInfo.ModuleNXCompat
- uid: ERC.ModuleInfo.ModuleNXCompat*
  name: ModuleNXCompat
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleNXCompat_
  commentId: Overload:ERC.ModuleInfo.ModuleNXCompat
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleNXCompat
  nameWithType: ModuleInfo.ModuleNXCompat
- uid: ERC.ModuleInfo.ModuleOsDll
  name: ModuleOsDll
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleOsDll
  commentId: P:ERC.ModuleInfo.ModuleOsDll
  fullName: ERC.ModuleInfo.ModuleOsDll
  nameWithType: ModuleInfo.ModuleOsDll
- uid: ERC.ModuleInfo.ModuleOsDll*
  name: ModuleOsDll
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleOsDll_
  commentId: Overload:ERC.ModuleInfo.ModuleOsDll
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleOsDll
  nameWithType: ModuleInfo.ModuleOsDll
- uid: ERC.ModuleInfo.ModulePath
  name: ModulePath
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModulePath
  commentId: P:ERC.ModuleInfo.ModulePath
  fullName: ERC.ModuleInfo.ModulePath
  nameWithType: ModuleInfo.ModulePath
- uid: ERC.ModuleInfo.ModulePath*
  name: ModulePath
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModulePath_
  commentId: Overload:ERC.ModuleInfo.ModulePath
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModulePath
  nameWithType: ModuleInfo.ModulePath
- uid: ERC.ModuleInfo.ModuleProcess
  name: ModuleProcess
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProcess
  commentId: P:ERC.ModuleInfo.ModuleProcess
  fullName: ERC.ModuleInfo.ModuleProcess
  nameWithType: ModuleInfo.ModuleProcess
- uid: ERC.ModuleInfo.ModuleProcess*
  name: ModuleProcess
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProcess_
  commentId: Overload:ERC.ModuleInfo.ModuleProcess
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleProcess
  nameWithType: ModuleInfo.ModuleProcess
- uid: ERC.ModuleInfo.ModuleProduct
  name: ModuleProduct
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProduct
  commentId: P:ERC.ModuleInfo.ModuleProduct
  fullName: ERC.ModuleInfo.ModuleProduct
  nameWithType: ModuleInfo.ModuleProduct
- uid: ERC.ModuleInfo.ModuleProduct*
  name: ModuleProduct
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProduct_
  commentId: Overload:ERC.ModuleInfo.ModuleProduct
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleProduct
  nameWithType: ModuleInfo.ModuleProduct
- uid: ERC.ModuleInfo.ModuleProtection
  name: ModuleProtection
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProtection
  commentId: P:ERC.ModuleInfo.ModuleProtection
  fullName: ERC.ModuleInfo.ModuleProtection
  nameWithType: ModuleInfo.ModuleProtection
- uid: ERC.ModuleInfo.ModuleProtection*
  name: ModuleProtection
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleProtection_
  commentId: Overload:ERC.ModuleInfo.ModuleProtection
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleProtection
  nameWithType: ModuleInfo.ModuleProtection
- uid: ERC.ModuleInfo.ModuleRebase
  name: ModuleRebase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleRebase
  commentId: P:ERC.ModuleInfo.ModuleRebase
  fullName: ERC.ModuleInfo.ModuleRebase
  nameWithType: ModuleInfo.ModuleRebase
- uid: ERC.ModuleInfo.ModuleRebase*
  name: ModuleRebase
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleRebase_
  commentId: Overload:ERC.ModuleInfo.ModuleRebase
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleRebase
  nameWithType: ModuleInfo.ModuleRebase
- uid: ERC.ModuleInfo.ModuleSafeSEH
  name: ModuleSafeSEH
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleSafeSEH
  commentId: P:ERC.ModuleInfo.ModuleSafeSEH
  fullName: ERC.ModuleInfo.ModuleSafeSEH
  nameWithType: ModuleInfo.ModuleSafeSEH
- uid: ERC.ModuleInfo.ModuleSafeSEH*
  name: ModuleSafeSEH
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleSafeSEH_
  commentId: Overload:ERC.ModuleInfo.ModuleSafeSEH
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleSafeSEH
  nameWithType: ModuleInfo.ModuleSafeSEH
- uid: ERC.ModuleInfo.ModuleSize
  name: ModuleSize
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleSize
  commentId: P:ERC.ModuleInfo.ModuleSize
  fullName: ERC.ModuleInfo.ModuleSize
  nameWithType: ModuleInfo.ModuleSize
- uid: ERC.ModuleInfo.ModuleSize*
  name: ModuleSize
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleSize_
  commentId: Overload:ERC.ModuleInfo.ModuleSize
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleSize
  nameWithType: ModuleInfo.ModuleSize
- uid: ERC.ModuleInfo.ModuleVersion
  name: ModuleVersion
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleVersion
  commentId: P:ERC.ModuleInfo.ModuleVersion
  fullName: ERC.ModuleInfo.ModuleVersion
  nameWithType: ModuleInfo.ModuleVersion
- uid: ERC.ModuleInfo.ModuleVersion*
  name: ModuleVersion
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ModuleVersion_
  commentId: Overload:ERC.ModuleInfo.ModuleVersion
  isSpec: "True"
  fullName: ERC.ModuleInfo.ModuleVersion
  nameWithType: ModuleInfo.ModuleVersion
- uid: ERC.ModuleInfo.SearchModule(System.Byte[])
  name: SearchModule(Byte[])
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_SearchModule_System_Byte___
  commentId: M:ERC.ModuleInfo.SearchModule(System.Byte[])
  name.vb: SearchModule(Byte())
  fullName: ERC.ModuleInfo.SearchModule(System.Byte[])
  fullName.vb: ERC.ModuleInfo.SearchModule(System.Byte())
  nameWithType: ModuleInfo.SearchModule(Byte[])
  nameWithType.vb: ModuleInfo.SearchModule(Byte())
- uid: ERC.ModuleInfo.SearchModule*
  name: SearchModule
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_SearchModule_
  commentId: Overload:ERC.ModuleInfo.SearchModule
  isSpec: "True"
  fullName: ERC.ModuleInfo.SearchModule
  nameWithType: ModuleInfo.SearchModule
- uid: ERC.ModuleInfo.ToString
  name: ToString()
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ToString
  commentId: M:ERC.ModuleInfo.ToString
  fullName: ERC.ModuleInfo.ToString()
  nameWithType: ModuleInfo.ToString()
- uid: ERC.ModuleInfo.ToString*
  name: ToString
  href: api/ERC.ModuleInfo.html#ERC_ModuleInfo_ToString_
  commentId: Overload:ERC.ModuleInfo.ToString
  isSpec: "True"
  fullName: ERC.ModuleInfo.ToString
  nameWithType: ModuleInfo.ToString
- uid: ERC.ProcessInfo
  name: ProcessInfo
  href: api/ERC.ProcessInfo.html
  commentId: T:ERC.ProcessInfo
  fullName: ERC.ProcessInfo
  nameWithType: ProcessInfo
- uid: ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)
  name: ProcessInfo(ErcCore, Process)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo__ctor_ERC_ErcCore_System_Diagnostics_Process_
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ErcCore, System.Diagnostics.Process)
  nameWithType: ProcessInfo.ProcessInfo(ErcCore, Process)
- uid: ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)
  name: ProcessInfo(ErcCore, IntPtr)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo__ctor_ERC_ErcCore_System_IntPtr_
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ErcCore, System.IntPtr)
  nameWithType: ProcessInfo.ProcessInfo(ErcCore, IntPtr)
- uid: ERC.ProcessInfo.#ctor(ERC.ProcessInfo)
  name: ProcessInfo(ProcessInfo)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo__ctor_ERC_ProcessInfo_
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ProcessInfo)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ProcessInfo)
  nameWithType: ProcessInfo.ProcessInfo(ProcessInfo)
- uid: ERC.ProcessInfo.#ctor*
  name: ProcessInfo
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo__ctor_
  commentId: Overload:ERC.ProcessInfo.#ctor
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessInfo
  nameWithType: ProcessInfo.ProcessInfo
- uid: ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  name: CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_CreateExcludesList_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_
  commentId: M:ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  fullName: ERC.ProcessInfo.CreateExcludesList(System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  nameWithType: ProcessInfo.CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)
- uid: ERC.ProcessInfo.CreateExcludesList*
  name: CreateExcludesList
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_CreateExcludesList_
  commentId: Overload:ERC.ProcessInfo.CreateExcludesList
  isSpec: "True"
  fullName: ERC.ProcessInfo.CreateExcludesList
  nameWithType: ProcessInfo.CreateExcludesList
- uid: ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)
  name: DumpMemoryRegion(IntPtr, Int32)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_DumpMemoryRegion_System_IntPtr_System_Int32_
  commentId: M:ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)
  fullName: ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr, System.Int32)
  nameWithType: ProcessInfo.DumpMemoryRegion(IntPtr, Int32)
- uid: ERC.ProcessInfo.DumpMemoryRegion*
  name: DumpMemoryRegion
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_DumpMemoryRegion_
  commentId: Overload:ERC.ProcessInfo.DumpMemoryRegion
  isSpec: "True"
  fullName: ERC.ProcessInfo.DumpMemoryRegion
  nameWithType: ProcessInfo.DumpMemoryRegion
- uid: ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)
  name: FindNRP(Int32, Boolean)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_FindNRP_System_Int32_System_Boolean_
  commentId: M:ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)
  fullName: ERC.ProcessInfo.FindNRP(System.Int32, System.Boolean)
  nameWithType: ProcessInfo.FindNRP(Int32, Boolean)
- uid: ERC.ProcessInfo.FindNRP*
  name: FindNRP
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_FindNRP_
  commentId: Overload:ERC.ProcessInfo.FindNRP
  isSpec: "True"
  fullName: ERC.ProcessInfo.FindNRP
  nameWithType: ProcessInfo.FindNRP
- uid: ERC.ProcessInfo.GetModuleHandles
  name: GetModuleHandles()
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetModuleHandles
  commentId: M:ERC.ProcessInfo.GetModuleHandles
  fullName: ERC.ProcessInfo.GetModuleHandles()
  nameWithType: ProcessInfo.GetModuleHandles()
- uid: ERC.ProcessInfo.GetModuleHandles*
  name: GetModuleHandles
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetModuleHandles_
  commentId: Overload:ERC.ProcessInfo.GetModuleHandles
  isSpec: "True"
  fullName: ERC.ProcessInfo.GetModuleHandles
  nameWithType: ProcessInfo.GetModuleHandles
- uid: ERC.ProcessInfo.GetProcessModuleInformation
  name: GetProcessModuleInformation()
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModuleInformation
  commentId: M:ERC.ProcessInfo.GetProcessModuleInformation
  fullName: ERC.ProcessInfo.GetProcessModuleInformation()
  nameWithType: ProcessInfo.GetProcessModuleInformation()
- uid: ERC.ProcessInfo.GetProcessModuleInformation*
  name: GetProcessModuleInformation
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModuleInformation_
  commentId: Overload:ERC.ProcessInfo.GetProcessModuleInformation
  isSpec: "True"
  fullName: ERC.ProcessInfo.GetProcessModuleInformation
  nameWithType: ProcessInfo.GetProcessModuleInformation
- uid: ERC.ProcessInfo.GetProcessModules
  name: GetProcessModules()
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModules
  commentId: M:ERC.ProcessInfo.GetProcessModules
  fullName: ERC.ProcessInfo.GetProcessModules()
  nameWithType: ProcessInfo.GetProcessModules()
- uid: ERC.ProcessInfo.GetProcessModules*
  name: GetProcessModules
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModules_
  commentId: Overload:ERC.ProcessInfo.GetProcessModules
  isSpec: "True"
  fullName: ERC.ProcessInfo.GetProcessModules
  nameWithType: ProcessInfo.GetProcessModules
- uid: ERC.ProcessInfo.GetProcessThreadInformation
  name: GetProcessThreadInformation()
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessThreadInformation
  commentId: M:ERC.ProcessInfo.GetProcessThreadInformation
  fullName: ERC.ProcessInfo.GetProcessThreadInformation()
  nameWithType: ProcessInfo.GetProcessThreadInformation()
- uid: ERC.ProcessInfo.GetProcessThreadInformation*
  name: GetProcessThreadInformation
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessThreadInformation_
  commentId: Overload:ERC.ProcessInfo.GetProcessThreadInformation
  isSpec: "True"
  fullName: ERC.ProcessInfo.GetProcessThreadInformation
  nameWithType: ProcessInfo.GetProcessThreadInformation
- uid: ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  name: Is64Bit(Process)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_Is64Bit_System_Diagnostics_Process_
  commentId: M:ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  fullName: ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  nameWithType: ProcessInfo.Is64Bit(Process)
- uid: ERC.ProcessInfo.Is64Bit*
  name: Is64Bit
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_Is64Bit_
  commentId: Overload:ERC.ProcessInfo.Is64Bit
  isSpec: "True"
  fullName: ERC.ProcessInfo.Is64Bit
  nameWithType: ProcessInfo.Is64Bit
- uid: ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  name: ListLocalProcesses(ErcCore)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ListLocalProcesses_ERC_ErcCore_
  commentId: M:ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  fullName: ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  nameWithType: ProcessInfo.ListLocalProcesses(ErcCore)
- uid: ERC.ProcessInfo.ListLocalProcesses*
  name: ListLocalProcesses
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ListLocalProcesses_
  commentId: Overload:ERC.ProcessInfo.ListLocalProcesses
  isSpec: "True"
  fullName: ERC.ProcessInfo.ListLocalProcesses
  nameWithType: ProcessInfo.ListLocalProcesses
- uid: ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)
  name: ListRemoteProcesses(ErcCore, String)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ListRemoteProcesses_ERC_ErcCore_System_String_
  commentId: M:ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)
  fullName: ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore, System.String)
  nameWithType: ProcessInfo.ListRemoteProcesses(ErcCore, String)
- uid: ERC.ProcessInfo.ListRemoteProcesses*
  name: ListRemoteProcesses
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ListRemoteProcesses_
  commentId: Overload:ERC.ProcessInfo.ListRemoteProcesses
  isSpec: "True"
  fullName: ERC.ProcessInfo.ListRemoteProcesses
  nameWithType: ProcessInfo.ListRemoteProcesses
- uid: ERC.ProcessInfo.ModulesInfo
  name: ModulesInfo
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ModulesInfo
  commentId: F:ERC.ProcessInfo.ModulesInfo
  fullName: ERC.ProcessInfo.ModulesInfo
  nameWithType: ProcessInfo.ModulesInfo
- uid: ERC.ProcessInfo.ProcessCurrent
  name: ProcessCurrent
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessCurrent
  commentId: P:ERC.ProcessInfo.ProcessCurrent
  fullName: ERC.ProcessInfo.ProcessCurrent
  nameWithType: ProcessInfo.ProcessCurrent
- uid: ERC.ProcessInfo.ProcessCurrent*
  name: ProcessCurrent
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessCurrent_
  commentId: Overload:ERC.ProcessInfo.ProcessCurrent
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessCurrent
  nameWithType: ProcessInfo.ProcessCurrent
- uid: ERC.ProcessInfo.ProcessDescription
  name: ProcessDescription
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessDescription
  commentId: P:ERC.ProcessInfo.ProcessDescription
  fullName: ERC.ProcessInfo.ProcessDescription
  nameWithType: ProcessInfo.ProcessDescription
- uid: ERC.ProcessInfo.ProcessDescription*
  name: ProcessDescription
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessDescription_
  commentId: Overload:ERC.ProcessInfo.ProcessDescription
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessDescription
  nameWithType: ProcessInfo.ProcessDescription
- uid: ERC.ProcessInfo.ProcessHandle
  name: ProcessHandle
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessHandle
  commentId: P:ERC.ProcessInfo.ProcessHandle
  fullName: ERC.ProcessInfo.ProcessHandle
  nameWithType: ProcessInfo.ProcessHandle
- uid: ERC.ProcessInfo.ProcessHandle*
  name: ProcessHandle
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessHandle_
  commentId: Overload:ERC.ProcessInfo.ProcessHandle
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessHandle
  nameWithType: ProcessInfo.ProcessHandle
- uid: ERC.ProcessInfo.ProcessID
  name: ProcessID
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessID
  commentId: P:ERC.ProcessInfo.ProcessID
  fullName: ERC.ProcessInfo.ProcessID
  nameWithType: ProcessInfo.ProcessID
- uid: ERC.ProcessInfo.ProcessID*
  name: ProcessID
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessID_
  commentId: Overload:ERC.ProcessInfo.ProcessID
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessID
  nameWithType: ProcessInfo.ProcessID
- uid: ERC.ProcessInfo.ProcessMachineType
  name: ProcessMachineType
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessMachineType
  commentId: P:ERC.ProcessInfo.ProcessMachineType
  fullName: ERC.ProcessInfo.ProcessMachineType
  nameWithType: ProcessInfo.ProcessMachineType
- uid: ERC.ProcessInfo.ProcessMachineType*
  name: ProcessMachineType
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessMachineType_
  commentId: Overload:ERC.ProcessInfo.ProcessMachineType
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessMachineType
  nameWithType: ProcessInfo.ProcessMachineType
- uid: ERC.ProcessInfo.ProcessName
  name: ProcessName
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessName
  commentId: P:ERC.ProcessInfo.ProcessName
  fullName: ERC.ProcessInfo.ProcessName
  nameWithType: ProcessInfo.ProcessName
- uid: ERC.ProcessInfo.ProcessName*
  name: ProcessName
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessName_
  commentId: Overload:ERC.ProcessInfo.ProcessName
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessName
  nameWithType: ProcessInfo.ProcessName
- uid: ERC.ProcessInfo.ProcessPath
  name: ProcessPath
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessPath
  commentId: P:ERC.ProcessInfo.ProcessPath
  fullName: ERC.ProcessInfo.ProcessPath
  nameWithType: ProcessInfo.ProcessPath
- uid: ERC.ProcessInfo.ProcessPath*
  name: ProcessPath
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessPath_
  commentId: Overload:ERC.ProcessInfo.ProcessPath
  isSpec: "True"
  fullName: ERC.ProcessInfo.ProcessPath
  nameWithType: ProcessInfo.ProcessPath
- uid: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  name: SearchAllMemoryPPR(Byte[], List<String>)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: SearchAllMemoryPPR(Byte(), List(Of String))
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: ProcessInfo.SearchAllMemoryPPR(Byte[], List<String>)
  nameWithType.vb: ProcessInfo.SearchAllMemoryPPR(Byte(), List(Of String))
- uid: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  name: SearchAllMemoryPPR(List<String>)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Collections_Generic_List_System_String__
  commentId: M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  name.vb: SearchAllMemoryPPR(List(Of String))
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List(Of System.String))
  nameWithType: ProcessInfo.SearchAllMemoryPPR(List<String>)
  nameWithType.vb: ProcessInfo.SearchAllMemoryPPR(List(Of String))
- uid: ERC.ProcessInfo.SearchAllMemoryPPR*
  name: SearchAllMemoryPPR
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_
  commentId: Overload:ERC.ProcessInfo.SearchAllMemoryPPR
  isSpec: "True"
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR
  nameWithType: ProcessInfo.SearchAllMemoryPPR
- uid: ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  name: SearchMemory(Int32, Byte[], Byte[], String, List<String>)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_Byte___System_String_System_Collections_Generic_List_System_String__
  commentId: M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  name.vb: SearchMemory(Int32, Byte(), Byte(), String, List(Of String))
  fullName: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte[], System.Byte[], System.String, System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte(), System.Byte(), System.String, System.Collections.Generic.List(Of System.String))
  nameWithType: ProcessInfo.SearchMemory(Int32, Byte[], Byte[], String, List<String>)
  nameWithType.vb: ProcessInfo.SearchMemory(Int32, Byte(), Byte(), String, List(Of String))
- uid: ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  name: SearchMemory(Int32, Byte[], String, List<String>)
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_String_System_Collections_Generic_List_System_String__
  commentId: M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  name.vb: SearchMemory(Int32, Byte(), String, List(Of String))
  fullName: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte[], System.String, System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte(), System.String, System.Collections.Generic.List(Of System.String))
  nameWithType: ProcessInfo.SearchMemory(Int32, Byte[], String, List<String>)
  nameWithType.vb: ProcessInfo.SearchMemory(Int32, Byte(), String, List(Of String))
- uid: ERC.ProcessInfo.SearchMemory*
  name: SearchMemory
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_
  commentId: Overload:ERC.ProcessInfo.SearchMemory
  isSpec: "True"
  fullName: ERC.ProcessInfo.SearchMemory
  nameWithType: ProcessInfo.SearchMemory
- uid: ERC.ProcessInfo.ThreadsInfo
  name: ThreadsInfo
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ThreadsInfo
  commentId: F:ERC.ProcessInfo.ThreadsInfo
  fullName: ERC.ProcessInfo.ThreadsInfo
  nameWithType: ProcessInfo.ThreadsInfo
- uid: ERC.ProcessInfo.ToString
  name: ToString()
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ToString
  commentId: M:ERC.ProcessInfo.ToString
  fullName: ERC.ProcessInfo.ToString()
  nameWithType: ProcessInfo.ToString()
- uid: ERC.ProcessInfo.ToString*
  name: ToString
  href: api/ERC.ProcessInfo.html#ERC_ProcessInfo_ToString_
  commentId: Overload:ERC.ProcessInfo.ToString
  isSpec: "True"
  fullName: ERC.ProcessInfo.ToString
  nameWithType: ProcessInfo.ToString
- uid: ERC.Structures
  name: ERC.Structures
  href: api/ERC.Structures.html
  commentId: N:ERC.Structures
  fullName: ERC.Structures
  nameWithType: ERC.Structures
- uid: ERC.Structures.AllocationProtect
  name: AllocationProtect
  href: api/ERC.Structures.AllocationProtect.html
  commentId: T:ERC.Structures.AllocationProtect
  fullName: ERC.Structures.AllocationProtect
  nameWithType: AllocationProtect
- uid: ERC.Structures.AllocationProtect.PAGE_EXECUTE
  name: PAGE_EXECUTE
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_EXECUTE
  commentId: F:ERC.Structures.AllocationProtect.PAGE_EXECUTE
  fullName: ERC.Structures.AllocationProtect.PAGE_EXECUTE
  nameWithType: AllocationProtect.PAGE_EXECUTE
- uid: ERC.Structures.AllocationProtect.PAGE_EXECUTE_READ
  name: PAGE_EXECUTE_READ
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_EXECUTE_READ
  commentId: F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READ
  fullName: ERC.Structures.AllocationProtect.PAGE_EXECUTE_READ
  nameWithType: AllocationProtect.PAGE_EXECUTE_READ
- uid: ERC.Structures.AllocationProtect.PAGE_EXECUTE_READWRITE
  name: PAGE_EXECUTE_READWRITE
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_EXECUTE_READWRITE
  commentId: F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READWRITE
  fullName: ERC.Structures.AllocationProtect.PAGE_EXECUTE_READWRITE
  nameWithType: AllocationProtect.PAGE_EXECUTE_READWRITE
- uid: ERC.Structures.AllocationProtect.PAGE_EXECUTE_WRITECOPY
  name: PAGE_EXECUTE_WRITECOPY
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_EXECUTE_WRITECOPY
  commentId: F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_WRITECOPY
  fullName: ERC.Structures.AllocationProtect.PAGE_EXECUTE_WRITECOPY
  nameWithType: AllocationProtect.PAGE_EXECUTE_WRITECOPY
- uid: ERC.Structures.AllocationProtect.PAGE_GUARD
  name: PAGE_GUARD
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_GUARD
  commentId: F:ERC.Structures.AllocationProtect.PAGE_GUARD
  fullName: ERC.Structures.AllocationProtect.PAGE_GUARD
  nameWithType: AllocationProtect.PAGE_GUARD
- uid: ERC.Structures.AllocationProtect.PAGE_NOACCESS
  name: PAGE_NOACCESS
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_NOACCESS
  commentId: F:ERC.Structures.AllocationProtect.PAGE_NOACCESS
  fullName: ERC.Structures.AllocationProtect.PAGE_NOACCESS
  nameWithType: AllocationProtect.PAGE_NOACCESS
- uid: ERC.Structures.AllocationProtect.PAGE_NOCACHE
  name: PAGE_NOCACHE
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_NOCACHE
  commentId: F:ERC.Structures.AllocationProtect.PAGE_NOCACHE
  fullName: ERC.Structures.AllocationProtect.PAGE_NOCACHE
  nameWithType: AllocationProtect.PAGE_NOCACHE
- uid: ERC.Structures.AllocationProtect.PAGE_READONLY
  name: PAGE_READONLY
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_READONLY
  commentId: F:ERC.Structures.AllocationProtect.PAGE_READONLY
  fullName: ERC.Structures.AllocationProtect.PAGE_READONLY
  nameWithType: AllocationProtect.PAGE_READONLY
- uid: ERC.Structures.AllocationProtect.PAGE_READWRITE
  name: PAGE_READWRITE
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_READWRITE
  commentId: F:ERC.Structures.AllocationProtect.PAGE_READWRITE
  fullName: ERC.Structures.AllocationProtect.PAGE_READWRITE
  nameWithType: AllocationProtect.PAGE_READWRITE
- uid: ERC.Structures.AllocationProtect.PAGE_WRITECOMBINE
  name: PAGE_WRITECOMBINE
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_WRITECOMBINE
  commentId: F:ERC.Structures.AllocationProtect.PAGE_WRITECOMBINE
  fullName: ERC.Structures.AllocationProtect.PAGE_WRITECOMBINE
  nameWithType: AllocationProtect.PAGE_WRITECOMBINE
- uid: ERC.Structures.AllocationProtect.PAGE_WRITECOPY
  name: PAGE_WRITECOPY
  href: api/ERC.Structures.AllocationProtect.html#ERC_Structures_AllocationProtect_PAGE_WRITECOPY
  commentId: F:ERC.Structures.AllocationProtect.PAGE_WRITECOPY
  fullName: ERC.Structures.AllocationProtect.PAGE_WRITECOPY
  nameWithType: AllocationProtect.PAGE_WRITECOPY
- uid: ERC.Structures.ClientID
  name: ClientID
  href: api/ERC.Structures.ClientID.html
  commentId: T:ERC.Structures.ClientID
  fullName: ERC.Structures.ClientID
  nameWithType: ClientID
- uid: ERC.Structures.ClientID.ProcessId
  name: ProcessId
  href: api/ERC.Structures.ClientID.html#ERC_Structures_ClientID_ProcessId
  commentId: F:ERC.Structures.ClientID.ProcessId
  fullName: ERC.Structures.ClientID.ProcessId
  nameWithType: ClientID.ProcessId
- uid: ERC.Structures.ClientID.ThreadId
  name: ThreadId
  href: api/ERC.Structures.ClientID.html#ERC_Structures_ClientID_ThreadId
  commentId: F:ERC.Structures.ClientID.ThreadId
  fullName: ERC.Structures.ClientID.ThreadId
  nameWithType: ClientID.ThreadId
- uid: ERC.Structures.CONTEXT_FLAGS
  name: CONTEXT_FLAGS
  href: api/ERC.Structures.CONTEXT_FLAGS.html
  commentId: T:ERC.Structures.CONTEXT_FLAGS
  fullName: ERC.Structures.CONTEXT_FLAGS
  nameWithType: CONTEXT_FLAGS
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_ALL
  name: CONTEXT_ALL
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_ALL
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_ALL
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_ALL
  nameWithType: CONTEXT_FLAGS.CONTEXT_ALL
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_CONTROL
  name: CONTEXT_CONTROL
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_CONTROL
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_CONTROL
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_CONTROL
  nameWithType: CONTEXT_FLAGS.CONTEXT_CONTROL
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS
  name: CONTEXT_DEBUG_REGISTERS
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_DEBUG_REGISTERS
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS
  nameWithType: CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS
  name: CONTEXT_EXTENDED_REGISTERS
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_EXTENDED_REGISTERS
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS
  nameWithType: CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_FLOATING_POINT
  name: CONTEXT_FLOATING_POINT
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_FLOATING_POINT
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FLOATING_POINT
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_FLOATING_POINT
  nameWithType: CONTEXT_FLAGS.CONTEXT_FLOATING_POINT
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_FULL
  name: CONTEXT_FULL
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_FULL
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FULL
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_FULL
  nameWithType: CONTEXT_FLAGS.CONTEXT_FULL
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_i386
  name: CONTEXT_i386
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_i386
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i386
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_i386
  nameWithType: CONTEXT_FLAGS.CONTEXT_i386
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_i486
  name: CONTEXT_i486
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_i486
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i486
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_i486
  nameWithType: CONTEXT_FLAGS.CONTEXT_i486
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_INTEGER
  name: CONTEXT_INTEGER
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_INTEGER
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_INTEGER
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_INTEGER
  nameWithType: CONTEXT_FLAGS.CONTEXT_INTEGER
- uid: ERC.Structures.CONTEXT_FLAGS.CONTEXT_SEGMENTS
  name: CONTEXT_SEGMENTS
  href: api/ERC.Structures.CONTEXT_FLAGS.html#ERC_Structures_CONTEXT_FLAGS_CONTEXT_SEGMENTS
  commentId: F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_SEGMENTS
  fullName: ERC.Structures.CONTEXT_FLAGS.CONTEXT_SEGMENTS
  nameWithType: CONTEXT_FLAGS.CONTEXT_SEGMENTS
- uid: ERC.Structures.CONTEXT32
  name: CONTEXT32
  href: api/ERC.Structures.CONTEXT32.html
  commentId: T:ERC.Structures.CONTEXT32
  fullName: ERC.Structures.CONTEXT32
  nameWithType: CONTEXT32
- uid: ERC.Structures.CONTEXT32.ContextFlags
  name: ContextFlags
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_ContextFlags
  commentId: F:ERC.Structures.CONTEXT32.ContextFlags
  fullName: ERC.Structures.CONTEXT32.ContextFlags
  nameWithType: CONTEXT32.ContextFlags
- uid: ERC.Structures.CONTEXT32.Dr0
  name: Dr0
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr0
  commentId: F:ERC.Structures.CONTEXT32.Dr0
  fullName: ERC.Structures.CONTEXT32.Dr0
  nameWithType: CONTEXT32.Dr0
- uid: ERC.Structures.CONTEXT32.Dr1
  name: Dr1
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr1
  commentId: F:ERC.Structures.CONTEXT32.Dr1
  fullName: ERC.Structures.CONTEXT32.Dr1
  nameWithType: CONTEXT32.Dr1
- uid: ERC.Structures.CONTEXT32.Dr2
  name: Dr2
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr2
  commentId: F:ERC.Structures.CONTEXT32.Dr2
  fullName: ERC.Structures.CONTEXT32.Dr2
  nameWithType: CONTEXT32.Dr2
- uid: ERC.Structures.CONTEXT32.Dr3
  name: Dr3
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr3
  commentId: F:ERC.Structures.CONTEXT32.Dr3
  fullName: ERC.Structures.CONTEXT32.Dr3
  nameWithType: CONTEXT32.Dr3
- uid: ERC.Structures.CONTEXT32.Dr6
  name: Dr6
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr6
  commentId: F:ERC.Structures.CONTEXT32.Dr6
  fullName: ERC.Structures.CONTEXT32.Dr6
  nameWithType: CONTEXT32.Dr6
- uid: ERC.Structures.CONTEXT32.Dr7
  name: Dr7
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Dr7
  commentId: F:ERC.Structures.CONTEXT32.Dr7
  fullName: ERC.Structures.CONTEXT32.Dr7
  nameWithType: CONTEXT32.Dr7
- uid: ERC.Structures.CONTEXT32.Eax
  name: Eax
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Eax
  commentId: F:ERC.Structures.CONTEXT32.Eax
  fullName: ERC.Structures.CONTEXT32.Eax
  nameWithType: CONTEXT32.Eax
- uid: ERC.Structures.CONTEXT32.Ebp
  name: Ebp
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Ebp
  commentId: F:ERC.Structures.CONTEXT32.Ebp
  fullName: ERC.Structures.CONTEXT32.Ebp
  nameWithType: CONTEXT32.Ebp
- uid: ERC.Structures.CONTEXT32.Ebx
  name: Ebx
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Ebx
  commentId: F:ERC.Structures.CONTEXT32.Ebx
  fullName: ERC.Structures.CONTEXT32.Ebx
  nameWithType: CONTEXT32.Ebx
- uid: ERC.Structures.CONTEXT32.Ecx
  name: Ecx
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Ecx
  commentId: F:ERC.Structures.CONTEXT32.Ecx
  fullName: ERC.Structures.CONTEXT32.Ecx
  nameWithType: CONTEXT32.Ecx
- uid: ERC.Structures.CONTEXT32.Edi
  name: Edi
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Edi
  commentId: F:ERC.Structures.CONTEXT32.Edi
  fullName: ERC.Structures.CONTEXT32.Edi
  nameWithType: CONTEXT32.Edi
- uid: ERC.Structures.CONTEXT32.Edx
  name: Edx
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Edx
  commentId: F:ERC.Structures.CONTEXT32.Edx
  fullName: ERC.Structures.CONTEXT32.Edx
  nameWithType: CONTEXT32.Edx
- uid: ERC.Structures.CONTEXT32.EFlags
  name: EFlags
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_EFlags
  commentId: F:ERC.Structures.CONTEXT32.EFlags
  fullName: ERC.Structures.CONTEXT32.EFlags
  nameWithType: CONTEXT32.EFlags
- uid: ERC.Structures.CONTEXT32.Eip
  name: Eip
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Eip
  commentId: F:ERC.Structures.CONTEXT32.Eip
  fullName: ERC.Structures.CONTEXT32.Eip
  nameWithType: CONTEXT32.Eip
- uid: ERC.Structures.CONTEXT32.Esi
  name: Esi
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Esi
  commentId: F:ERC.Structures.CONTEXT32.Esi
  fullName: ERC.Structures.CONTEXT32.Esi
  nameWithType: CONTEXT32.Esi
- uid: ERC.Structures.CONTEXT32.Esp
  name: Esp
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_Esp
  commentId: F:ERC.Structures.CONTEXT32.Esp
  fullName: ERC.Structures.CONTEXT32.Esp
  nameWithType: CONTEXT32.Esp
- uid: ERC.Structures.CONTEXT32.ExtendedRegisters
  name: ExtendedRegisters
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_ExtendedRegisters
  commentId: F:ERC.Structures.CONTEXT32.ExtendedRegisters
  fullName: ERC.Structures.CONTEXT32.ExtendedRegisters
  nameWithType: CONTEXT32.ExtendedRegisters
- uid: ERC.Structures.CONTEXT32.FloatSave
  name: FloatSave
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_FloatSave
  commentId: F:ERC.Structures.CONTEXT32.FloatSave
  fullName: ERC.Structures.CONTEXT32.FloatSave
  nameWithType: CONTEXT32.FloatSave
- uid: ERC.Structures.CONTEXT32.SegCs
  name: SegCs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegCs
  commentId: F:ERC.Structures.CONTEXT32.SegCs
  fullName: ERC.Structures.CONTEXT32.SegCs
  nameWithType: CONTEXT32.SegCs
- uid: ERC.Structures.CONTEXT32.SegDs
  name: SegDs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegDs
  commentId: F:ERC.Structures.CONTEXT32.SegDs
  fullName: ERC.Structures.CONTEXT32.SegDs
  nameWithType: CONTEXT32.SegDs
- uid: ERC.Structures.CONTEXT32.SegEs
  name: SegEs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegEs
  commentId: F:ERC.Structures.CONTEXT32.SegEs
  fullName: ERC.Structures.CONTEXT32.SegEs
  nameWithType: CONTEXT32.SegEs
- uid: ERC.Structures.CONTEXT32.SegFs
  name: SegFs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegFs
  commentId: F:ERC.Structures.CONTEXT32.SegFs
  fullName: ERC.Structures.CONTEXT32.SegFs
  nameWithType: CONTEXT32.SegFs
- uid: ERC.Structures.CONTEXT32.SegGs
  name: SegGs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegGs
  commentId: F:ERC.Structures.CONTEXT32.SegGs
  fullName: ERC.Structures.CONTEXT32.SegGs
  nameWithType: CONTEXT32.SegGs
- uid: ERC.Structures.CONTEXT32.SegSs
  name: SegSs
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_SegSs
  commentId: F:ERC.Structures.CONTEXT32.SegSs
  fullName: ERC.Structures.CONTEXT32.SegSs
  nameWithType: CONTEXT32.SegSs
- uid: ERC.Structures.CONTEXT32.ToString
  name: ToString()
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_ToString
  commentId: M:ERC.Structures.CONTEXT32.ToString
  fullName: ERC.Structures.CONTEXT32.ToString()
  nameWithType: CONTEXT32.ToString()
- uid: ERC.Structures.CONTEXT32.ToString*
  name: ToString
  href: api/ERC.Structures.CONTEXT32.html#ERC_Structures_CONTEXT32_ToString_
  commentId: Overload:ERC.Structures.CONTEXT32.ToString
  isSpec: "True"
  fullName: ERC.Structures.CONTEXT32.ToString
  nameWithType: CONTEXT32.ToString
- uid: ERC.Structures.CONTEXT64
  name: CONTEXT64
  href: api/ERC.Structures.CONTEXT64.html
  commentId: T:ERC.Structures.CONTEXT64
  fullName: ERC.Structures.CONTEXT64
  nameWithType: CONTEXT64
- uid: ERC.Structures.CONTEXT64.ContextFlags
  name: ContextFlags
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_ContextFlags
  commentId: F:ERC.Structures.CONTEXT64.ContextFlags
  fullName: ERC.Structures.CONTEXT64.ContextFlags
  nameWithType: CONTEXT64.ContextFlags
- uid: ERC.Structures.CONTEXT64.DebugControl
  name: DebugControl
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_DebugControl
  commentId: F:ERC.Structures.CONTEXT64.DebugControl
  fullName: ERC.Structures.CONTEXT64.DebugControl
  nameWithType: CONTEXT64.DebugControl
- uid: ERC.Structures.CONTEXT64.Dr0
  name: Dr0
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr0
  commentId: F:ERC.Structures.CONTEXT64.Dr0
  fullName: ERC.Structures.CONTEXT64.Dr0
  nameWithType: CONTEXT64.Dr0
- uid: ERC.Structures.CONTEXT64.Dr1
  name: Dr1
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr1
  commentId: F:ERC.Structures.CONTEXT64.Dr1
  fullName: ERC.Structures.CONTEXT64.Dr1
  nameWithType: CONTEXT64.Dr1
- uid: ERC.Structures.CONTEXT64.Dr2
  name: Dr2
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr2
  commentId: F:ERC.Structures.CONTEXT64.Dr2
  fullName: ERC.Structures.CONTEXT64.Dr2
  nameWithType: CONTEXT64.Dr2
- uid: ERC.Structures.CONTEXT64.Dr3
  name: Dr3
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr3
  commentId: F:ERC.Structures.CONTEXT64.Dr3
  fullName: ERC.Structures.CONTEXT64.Dr3
  nameWithType: CONTEXT64.Dr3
- uid: ERC.Structures.CONTEXT64.Dr6
  name: Dr6
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr6
  commentId: F:ERC.Structures.CONTEXT64.Dr6
  fullName: ERC.Structures.CONTEXT64.Dr6
  nameWithType: CONTEXT64.Dr6
- uid: ERC.Structures.CONTEXT64.Dr7
  name: Dr7
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Dr7
  commentId: F:ERC.Structures.CONTEXT64.Dr7
  fullName: ERC.Structures.CONTEXT64.Dr7
  nameWithType: CONTEXT64.Dr7
- uid: ERC.Structures.CONTEXT64.DUMMYUNIONNAME
  name: DUMMYUNIONNAME
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_DUMMYUNIONNAME
  commentId: F:ERC.Structures.CONTEXT64.DUMMYUNIONNAME
  fullName: ERC.Structures.CONTEXT64.DUMMYUNIONNAME
  nameWithType: CONTEXT64.DUMMYUNIONNAME
- uid: ERC.Structures.CONTEXT64.EFlags
  name: EFlags
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_EFlags
  commentId: F:ERC.Structures.CONTEXT64.EFlags
  fullName: ERC.Structures.CONTEXT64.EFlags
  nameWithType: CONTEXT64.EFlags
- uid: ERC.Structures.CONTEXT64.LastBranchFromRip
  name: LastBranchFromRip
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_LastBranchFromRip
  commentId: F:ERC.Structures.CONTEXT64.LastBranchFromRip
  fullName: ERC.Structures.CONTEXT64.LastBranchFromRip
  nameWithType: CONTEXT64.LastBranchFromRip
- uid: ERC.Structures.CONTEXT64.LastBranchToRip
  name: LastBranchToRip
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_LastBranchToRip
  commentId: F:ERC.Structures.CONTEXT64.LastBranchToRip
  fullName: ERC.Structures.CONTEXT64.LastBranchToRip
  nameWithType: CONTEXT64.LastBranchToRip
- uid: ERC.Structures.CONTEXT64.LastExceptionFromRip
  name: LastExceptionFromRip
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_LastExceptionFromRip
  commentId: F:ERC.Structures.CONTEXT64.LastExceptionFromRip
  fullName: ERC.Structures.CONTEXT64.LastExceptionFromRip
  nameWithType: CONTEXT64.LastExceptionFromRip
- uid: ERC.Structures.CONTEXT64.LastExceptionToRip
  name: LastExceptionToRip
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_LastExceptionToRip
  commentId: F:ERC.Structures.CONTEXT64.LastExceptionToRip
  fullName: ERC.Structures.CONTEXT64.LastExceptionToRip
  nameWithType: CONTEXT64.LastExceptionToRip
- uid: ERC.Structures.CONTEXT64.MxCsr
  name: MxCsr
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_MxCsr
  commentId: F:ERC.Structures.CONTEXT64.MxCsr
  fullName: ERC.Structures.CONTEXT64.MxCsr
  nameWithType: CONTEXT64.MxCsr
- uid: ERC.Structures.CONTEXT64.P1Home
  name: P1Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P1Home
  commentId: F:ERC.Structures.CONTEXT64.P1Home
  fullName: ERC.Structures.CONTEXT64.P1Home
  nameWithType: CONTEXT64.P1Home
- uid: ERC.Structures.CONTEXT64.P2Home
  name: P2Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P2Home
  commentId: F:ERC.Structures.CONTEXT64.P2Home
  fullName: ERC.Structures.CONTEXT64.P2Home
  nameWithType: CONTEXT64.P2Home
- uid: ERC.Structures.CONTEXT64.P3Home
  name: P3Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P3Home
  commentId: F:ERC.Structures.CONTEXT64.P3Home
  fullName: ERC.Structures.CONTEXT64.P3Home
  nameWithType: CONTEXT64.P3Home
- uid: ERC.Structures.CONTEXT64.P4Home
  name: P4Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P4Home
  commentId: F:ERC.Structures.CONTEXT64.P4Home
  fullName: ERC.Structures.CONTEXT64.P4Home
  nameWithType: CONTEXT64.P4Home
- uid: ERC.Structures.CONTEXT64.P5Home
  name: P5Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P5Home
  commentId: F:ERC.Structures.CONTEXT64.P5Home
  fullName: ERC.Structures.CONTEXT64.P5Home
  nameWithType: CONTEXT64.P5Home
- uid: ERC.Structures.CONTEXT64.P6Home
  name: P6Home
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_P6Home
  commentId: F:ERC.Structures.CONTEXT64.P6Home
  fullName: ERC.Structures.CONTEXT64.P6Home
  nameWithType: CONTEXT64.P6Home
- uid: ERC.Structures.CONTEXT64.R10
  name: R10
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R10
  commentId: F:ERC.Structures.CONTEXT64.R10
  fullName: ERC.Structures.CONTEXT64.R10
  nameWithType: CONTEXT64.R10
- uid: ERC.Structures.CONTEXT64.R11
  name: R11
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R11
  commentId: F:ERC.Structures.CONTEXT64.R11
  fullName: ERC.Structures.CONTEXT64.R11
  nameWithType: CONTEXT64.R11
- uid: ERC.Structures.CONTEXT64.R12
  name: R12
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R12
  commentId: F:ERC.Structures.CONTEXT64.R12
  fullName: ERC.Structures.CONTEXT64.R12
  nameWithType: CONTEXT64.R12
- uid: ERC.Structures.CONTEXT64.R13
  name: R13
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R13
  commentId: F:ERC.Structures.CONTEXT64.R13
  fullName: ERC.Structures.CONTEXT64.R13
  nameWithType: CONTEXT64.R13
- uid: ERC.Structures.CONTEXT64.R14
  name: R14
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R14
  commentId: F:ERC.Structures.CONTEXT64.R14
  fullName: ERC.Structures.CONTEXT64.R14
  nameWithType: CONTEXT64.R14
- uid: ERC.Structures.CONTEXT64.R15
  name: R15
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R15
  commentId: F:ERC.Structures.CONTEXT64.R15
  fullName: ERC.Structures.CONTEXT64.R15
  nameWithType: CONTEXT64.R15
- uid: ERC.Structures.CONTEXT64.R8
  name: R8
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R8
  commentId: F:ERC.Structures.CONTEXT64.R8
  fullName: ERC.Structures.CONTEXT64.R8
  nameWithType: CONTEXT64.R8
- uid: ERC.Structures.CONTEXT64.R9
  name: R9
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_R9
  commentId: F:ERC.Structures.CONTEXT64.R9
  fullName: ERC.Structures.CONTEXT64.R9
  nameWithType: CONTEXT64.R9
- uid: ERC.Structures.CONTEXT64.Rax
  name: Rax
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rax
  commentId: F:ERC.Structures.CONTEXT64.Rax
  fullName: ERC.Structures.CONTEXT64.Rax
  nameWithType: CONTEXT64.Rax
- uid: ERC.Structures.CONTEXT64.Rbp
  name: Rbp
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rbp
  commentId: F:ERC.Structures.CONTEXT64.Rbp
  fullName: ERC.Structures.CONTEXT64.Rbp
  nameWithType: CONTEXT64.Rbp
- uid: ERC.Structures.CONTEXT64.Rbx
  name: Rbx
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rbx
  commentId: F:ERC.Structures.CONTEXT64.Rbx
  fullName: ERC.Structures.CONTEXT64.Rbx
  nameWithType: CONTEXT64.Rbx
- uid: ERC.Structures.CONTEXT64.Rcx
  name: Rcx
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rcx
  commentId: F:ERC.Structures.CONTEXT64.Rcx
  fullName: ERC.Structures.CONTEXT64.Rcx
  nameWithType: CONTEXT64.Rcx
- uid: ERC.Structures.CONTEXT64.Rdi
  name: Rdi
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rdi
  commentId: F:ERC.Structures.CONTEXT64.Rdi
  fullName: ERC.Structures.CONTEXT64.Rdi
  nameWithType: CONTEXT64.Rdi
- uid: ERC.Structures.CONTEXT64.Rdx
  name: Rdx
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rdx
  commentId: F:ERC.Structures.CONTEXT64.Rdx
  fullName: ERC.Structures.CONTEXT64.Rdx
  nameWithType: CONTEXT64.Rdx
- uid: ERC.Structures.CONTEXT64.Rip
  name: Rip
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rip
  commentId: F:ERC.Structures.CONTEXT64.Rip
  fullName: ERC.Structures.CONTEXT64.Rip
  nameWithType: CONTEXT64.Rip
- uid: ERC.Structures.CONTEXT64.Rsi
  name: Rsi
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rsi
  commentId: F:ERC.Structures.CONTEXT64.Rsi
  fullName: ERC.Structures.CONTEXT64.Rsi
  nameWithType: CONTEXT64.Rsi
- uid: ERC.Structures.CONTEXT64.Rsp
  name: Rsp
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_Rsp
  commentId: F:ERC.Structures.CONTEXT64.Rsp
  fullName: ERC.Structures.CONTEXT64.Rsp
  nameWithType: CONTEXT64.Rsp
- uid: ERC.Structures.CONTEXT64.SegCs
  name: SegCs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegCs
  commentId: F:ERC.Structures.CONTEXT64.SegCs
  fullName: ERC.Structures.CONTEXT64.SegCs
  nameWithType: CONTEXT64.SegCs
- uid: ERC.Structures.CONTEXT64.SegDs
  name: SegDs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegDs
  commentId: F:ERC.Structures.CONTEXT64.SegDs
  fullName: ERC.Structures.CONTEXT64.SegDs
  nameWithType: CONTEXT64.SegDs
- uid: ERC.Structures.CONTEXT64.SegEs
  name: SegEs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegEs
  commentId: F:ERC.Structures.CONTEXT64.SegEs
  fullName: ERC.Structures.CONTEXT64.SegEs
  nameWithType: CONTEXT64.SegEs
- uid: ERC.Structures.CONTEXT64.SegFs
  name: SegFs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegFs
  commentId: F:ERC.Structures.CONTEXT64.SegFs
  fullName: ERC.Structures.CONTEXT64.SegFs
  nameWithType: CONTEXT64.SegFs
- uid: ERC.Structures.CONTEXT64.SegGs
  name: SegGs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegGs
  commentId: F:ERC.Structures.CONTEXT64.SegGs
  fullName: ERC.Structures.CONTEXT64.SegGs
  nameWithType: CONTEXT64.SegGs
- uid: ERC.Structures.CONTEXT64.SegSs
  name: SegSs
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_SegSs
  commentId: F:ERC.Structures.CONTEXT64.SegSs
  fullName: ERC.Structures.CONTEXT64.SegSs
  nameWithType: CONTEXT64.SegSs
- uid: ERC.Structures.CONTEXT64.ToString
  name: ToString()
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_ToString
  commentId: M:ERC.Structures.CONTEXT64.ToString
  fullName: ERC.Structures.CONTEXT64.ToString()
  nameWithType: CONTEXT64.ToString()
- uid: ERC.Structures.CONTEXT64.ToString*
  name: ToString
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_ToString_
  commentId: Overload:ERC.Structures.CONTEXT64.ToString
  isSpec: "True"
  fullName: ERC.Structures.CONTEXT64.ToString
  nameWithType: CONTEXT64.ToString
- uid: ERC.Structures.CONTEXT64.VectorControl
  name: VectorControl
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_VectorControl
  commentId: F:ERC.Structures.CONTEXT64.VectorControl
  fullName: ERC.Structures.CONTEXT64.VectorControl
  nameWithType: CONTEXT64.VectorControl
- uid: ERC.Structures.CONTEXT64.VectorRegister
  name: VectorRegister
  href: api/ERC.Structures.CONTEXT64.html#ERC_Structures_CONTEXT64_VectorRegister
  commentId: F:ERC.Structures.CONTEXT64.VectorRegister
  fullName: ERC.Structures.CONTEXT64.VectorRegister
  nameWithType: CONTEXT64.VectorRegister
- uid: ERC.Structures.FLOATING_SAVE_AREA
  name: FLOATING_SAVE_AREA
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html
  commentId: T:ERC.Structures.FLOATING_SAVE_AREA
  fullName: ERC.Structures.FLOATING_SAVE_AREA
  nameWithType: FLOATING_SAVE_AREA
- uid: ERC.Structures.FLOATING_SAVE_AREA.ControlWord
  name: ControlWord
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_ControlWord
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.ControlWord
  fullName: ERC.Structures.FLOATING_SAVE_AREA.ControlWord
  nameWithType: FLOATING_SAVE_AREA.ControlWord
- uid: ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState
  name: Cr0NpxState
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_Cr0NpxState
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState
  fullName: ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState
  nameWithType: FLOATING_SAVE_AREA.Cr0NpxState
- uid: ERC.Structures.FLOATING_SAVE_AREA.DataOffset
  name: DataOffset
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_DataOffset
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.DataOffset
  fullName: ERC.Structures.FLOATING_SAVE_AREA.DataOffset
  nameWithType: FLOATING_SAVE_AREA.DataOffset
- uid: ERC.Structures.FLOATING_SAVE_AREA.DataSelector
  name: DataSelector
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_DataSelector
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.DataSelector
  fullName: ERC.Structures.FLOATING_SAVE_AREA.DataSelector
  nameWithType: FLOATING_SAVE_AREA.DataSelector
- uid: ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset
  name: ErrorOffset
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_ErrorOffset
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset
  fullName: ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset
  nameWithType: FLOATING_SAVE_AREA.ErrorOffset
- uid: ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector
  name: ErrorSelector
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_ErrorSelector
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector
  fullName: ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector
  nameWithType: FLOATING_SAVE_AREA.ErrorSelector
- uid: ERC.Structures.FLOATING_SAVE_AREA.RegisterArea
  name: RegisterArea
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_RegisterArea
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.RegisterArea
  fullName: ERC.Structures.FLOATING_SAVE_AREA.RegisterArea
  nameWithType: FLOATING_SAVE_AREA.RegisterArea
- uid: ERC.Structures.FLOATING_SAVE_AREA.StatusWord
  name: StatusWord
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_StatusWord
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.StatusWord
  fullName: ERC.Structures.FLOATING_SAVE_AREA.StatusWord
  nameWithType: FLOATING_SAVE_AREA.StatusWord
- uid: ERC.Structures.FLOATING_SAVE_AREA.TagWord
  name: TagWord
  href: api/ERC.Structures.FLOATING_SAVE_AREA.html#ERC_Structures_FLOATING_SAVE_AREA_TagWord
  commentId: F:ERC.Structures.FLOATING_SAVE_AREA.TagWord
  fullName: ERC.Structures.FLOATING_SAVE_AREA.TagWord
  nameWithType: FLOATING_SAVE_AREA.TagWord
- uid: ERC.Structures.IMAGE_DATA_DIRECTORY
  name: IMAGE_DATA_DIRECTORY
  href: api/ERC.Structures.IMAGE_DATA_DIRECTORY.html
  commentId: T:ERC.Structures.IMAGE_DATA_DIRECTORY
  fullName: ERC.Structures.IMAGE_DATA_DIRECTORY
  nameWithType: IMAGE_DATA_DIRECTORY
- uid: ERC.Structures.IMAGE_DATA_DIRECTORY.Size
  name: Size
  href: api/ERC.Structures.IMAGE_DATA_DIRECTORY.html#ERC_Structures_IMAGE_DATA_DIRECTORY_Size
  commentId: F:ERC.Structures.IMAGE_DATA_DIRECTORY.Size
  fullName: ERC.Structures.IMAGE_DATA_DIRECTORY.Size
  nameWithType: IMAGE_DATA_DIRECTORY.Size
- uid: ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress
  name: VirtualAddress
  href: api/ERC.Structures.IMAGE_DATA_DIRECTORY.html#ERC_Structures_IMAGE_DATA_DIRECTORY_VirtualAddress
  commentId: F:ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress
  fullName: ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress
  nameWithType: IMAGE_DATA_DIRECTORY.VirtualAddress
- uid: ERC.Structures.IMAGE_DOS_HEADER
  name: IMAGE_DOS_HEADER
  href: api/ERC.Structures.IMAGE_DOS_HEADER.html
  commentId: T:ERC.Structures.IMAGE_DOS_HEADER
  fullName: ERC.Structures.IMAGE_DOS_HEADER
  nameWithType: IMAGE_DOS_HEADER
- uid: ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr
  name: nt_head_ptr
  href: api/ERC.Structures.IMAGE_DOS_HEADER.html#ERC_Structures_IMAGE_DOS_HEADER_nt_head_ptr
  commentId: F:ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr
  fullName: ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr
  nameWithType: IMAGE_DOS_HEADER.nt_head_ptr
- uid: ERC.Structures.IMAGE_FILE_HEADER
  name: IMAGE_FILE_HEADER
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html
  commentId: T:ERC.Structures.IMAGE_FILE_HEADER
  fullName: ERC.Structures.IMAGE_FILE_HEADER
  nameWithType: IMAGE_FILE_HEADER
- uid: ERC.Structures.IMAGE_FILE_HEADER.Characteristics
  name: Characteristics
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_Characteristics
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.Characteristics
  fullName: ERC.Structures.IMAGE_FILE_HEADER.Characteristics
  nameWithType: IMAGE_FILE_HEADER.Characteristics
- uid: ERC.Structures.IMAGE_FILE_HEADER.Machine
  name: Machine
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_Machine
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.Machine
  fullName: ERC.Structures.IMAGE_FILE_HEADER.Machine
  nameWithType: IMAGE_FILE_HEADER.Machine
- uid: ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections
  name: NumberOfSections
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_NumberOfSections
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections
  fullName: ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections
  nameWithType: IMAGE_FILE_HEADER.NumberOfSections
- uid: ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols
  name: NumberOfSymbols
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_NumberOfSymbols
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols
  fullName: ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols
  nameWithType: IMAGE_FILE_HEADER.NumberOfSymbols
- uid: ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable
  name: PointerToSymbolTable
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_PointerToSymbolTable
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable
  fullName: ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable
  nameWithType: IMAGE_FILE_HEADER.PointerToSymbolTable
- uid: ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader
  name: SizeOfOptionalHeader
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_SizeOfOptionalHeader
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader
  fullName: ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader
  nameWithType: IMAGE_FILE_HEADER.SizeOfOptionalHeader
- uid: ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp
  name: TimeDateStamp
  href: api/ERC.Structures.IMAGE_FILE_HEADER.html#ERC_Structures_IMAGE_FILE_HEADER_TimeDateStamp
  commentId: F:ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp
  fullName: ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp
  nameWithType: IMAGE_FILE_HEADER.TimeDateStamp
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY
  name: IMAGE_LOAD_CONFIG_CODE_INTEGRITY
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html
  commentId: T:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY
  nameWithType: IMAGE_LOAD_CONFIG_CODE_INTEGRITY
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog
  name: Catalog
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html#ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Catalog
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog
  nameWithType: IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset
  name: CatalogOffset
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html#ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_CatalogOffset
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset
  nameWithType: IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags
  name: Flags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html#ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Flags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags
  nameWithType: IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved
  name: Reserved
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html#ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Reserved
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved
  nameWithType: IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32
  name: IMAGE_LOAD_CONFIG_DIRECTORY32
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html
  commentId: T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer
  name: CHPEMetadataPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CHPEMetadataPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity
  name: CodeIntegrity
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CodeIntegrity
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout
  name: CriticalSectionDefaultTimeout
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CriticalSectionDefaultTimeout
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion
  name: CSDVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CSDVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold
  name: DeCommitFreeBlockThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DeCommitFreeBlockThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold
  name: DeCommitTotalFreeThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DeCommitTotalFreeThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags
  name: DependentLoadFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DependentLoadFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable
  name: DynamicValueRelocTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset
  name: DynamicValueRelocTableOffset
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTableOffset
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection
  name: DynamicValueRelocTableSection
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTableSection
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList
  name: EditList
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_EditList
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.EditList
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer
  name: EnclaveConfigurationPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_EnclaveConfigurationPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear
  name: GlobalFlagsClear
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GlobalFlagsClear
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet
  name: GlobalFlagsSet
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GlobalFlagsSet
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount
  name: GuardAddressTakenIatEntryCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardAddressTakenIatEntryCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable
  name: GuardAddressTakenIatEntryTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardAddressTakenIatEntryTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer
  name: GuardCFCheckFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFCheckFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer
  name: GuardCFDispatchFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFDispatchFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount
  name: GuardCFFunctionCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFFunctionCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable
  name: GuardCFFunctionTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFFunctionTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags
  name: GuardFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount
  name: GuardLongJumpTargetCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardLongJumpTargetCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable
  name: GuardLongJumpTargetTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardLongJumpTargetTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine
  name: GuardRFFailureRoutine
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFFailureRoutine
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer
  name: GuardRFFailureRoutineFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFFailureRoutineFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer
  name: GuardRFVerifyStackPointerFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFVerifyStackPointerFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset
  name: HotPatchTableOffset
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_HotPatchTableOffset
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable
  name: LockPrefixTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_LockPrefixTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion
  name: MajorVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MajorVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize
  name: MaximumAllocationSize
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MaximumAllocationSize
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion
  name: MinorVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MinorVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask
  name: ProcessAffinityMask
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_ProcessAffinityMask
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags
  name: ProcessHeapFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_ProcessHeapFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2
  name: Reserved2
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Reserved2
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3
  name: Reserved3
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Reserved3
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie
  name: SecurityCookie
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SecurityCookie
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount
  name: SEHandlerCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SEHandlerCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable
  name: SEHandlerTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SEHandlerTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size
  name: Size
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Size
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.Size
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp
  name: TimeDateStamp
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_TimeDateStamp
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold
  name: VirtualMemoryThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_VirtualMemoryThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer
  name: VolatileMetadataPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_VolatileMetadataPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64
  name: IMAGE_LOAD_CONFIG_DIRECTORY64
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html
  commentId: T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer
  name: CHPEMetadataPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CHPEMetadataPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity
  name: CodeIntegrity
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CodeIntegrity
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout
  name: CriticalSectionDefaultTimeout
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CriticalSectionDefaultTimeout
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion
  name: CSDVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CSDVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold
  name: DeCommitFreeBlockThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DeCommitFreeBlockThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold
  name: DeCommitTotalFreeThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DeCommitTotalFreeThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags
  name: DependentLoadFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DependentLoadFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable
  name: DynamicValueRelocTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset
  name: DynamicValueRelocTableOffset
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTableOffset
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection
  name: DynamicValueRelocTableSection
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTableSection
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList
  name: EditList
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_EditList
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.EditList
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer
  name: EnclaveConfigurationPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_EnclaveConfigurationPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear
  name: GlobalFlagsClear
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GlobalFlagsClear
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet
  name: GlobalFlagsSet
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GlobalFlagsSet
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount
  name: GuardAddressTakenIatEntryCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardAddressTakenIatEntryCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable
  name: GuardAddressTakenIatEntryTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardAddressTakenIatEntryTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer
  name: GuardCFCheckFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFCheckFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer
  name: GuardCFDispatchFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFDispatchFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount
  name: GuardCFFunctionCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFFunctionCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable
  name: GuardCFFunctionTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFFunctionTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags
  name: GuardFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount
  name: GuardLongJumpTargetCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardLongJumpTargetCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable
  name: GuardLongJumpTargetTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardLongJumpTargetTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine
  name: GuardRFFailureRoutine
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFFailureRoutine
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer
  name: GuardRFFailureRoutineFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFFailureRoutineFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer
  name: GuardRFVerifyStackPointerFunctionPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFVerifyStackPointerFunctionPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset
  name: HotPatchTableOffset
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_HotPatchTableOffset
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable
  name: LockPrefixTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_LockPrefixTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion
  name: MajorVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MajorVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize
  name: MaximumAllocationSize
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MaximumAllocationSize
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion
  name: MinorVersion
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MinorVersion
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask
  name: ProcessAffinityMask
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_ProcessAffinityMask
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags
  name: ProcessHeapFlags
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_ProcessHeapFlags
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2
  name: Reserved2
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Reserved2
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3
  name: Reserved3
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Reserved3
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie
  name: SecurityCookie
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SecurityCookie
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount
  name: SEHandlerCount
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SEHandlerCount
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable
  name: SEHandlerTable
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SEHandlerTable
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size
  name: Size
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Size
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.Size
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp
  name: TimeDateStamp
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_TimeDateStamp
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold
  name: VirtualMemoryThreshold
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_VirtualMemoryThreshold
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold
- uid: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer
  name: VolatileMetadataPointer
  href: api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html#ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_VolatileMetadataPointer
  commentId: F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer
  fullName: ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer
  nameWithType: IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer
- uid: ERC.Structures.IMAGE_NT_HEADERS32
  name: IMAGE_NT_HEADERS32
  href: api/ERC.Structures.IMAGE_NT_HEADERS32.html
  commentId: T:ERC.Structures.IMAGE_NT_HEADERS32
  fullName: ERC.Structures.IMAGE_NT_HEADERS32
  nameWithType: IMAGE_NT_HEADERS32
- uid: ERC.Structures.IMAGE_NT_HEADERS32.FileHeader
  name: FileHeader
  href: api/ERC.Structures.IMAGE_NT_HEADERS32.html#ERC_Structures_IMAGE_NT_HEADERS32_FileHeader
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS32.FileHeader
  fullName: ERC.Structures.IMAGE_NT_HEADERS32.FileHeader
  nameWithType: IMAGE_NT_HEADERS32.FileHeader
- uid: ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader
  name: OptionalHeader
  href: api/ERC.Structures.IMAGE_NT_HEADERS32.html#ERC_Structures_IMAGE_NT_HEADERS32_OptionalHeader
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader
  fullName: ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader
  nameWithType: IMAGE_NT_HEADERS32.OptionalHeader
- uid: ERC.Structures.IMAGE_NT_HEADERS32.Signature
  name: Signature
  href: api/ERC.Structures.IMAGE_NT_HEADERS32.html#ERC_Structures_IMAGE_NT_HEADERS32_Signature
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS32.Signature
  fullName: ERC.Structures.IMAGE_NT_HEADERS32.Signature
  nameWithType: IMAGE_NT_HEADERS32.Signature
- uid: ERC.Structures.IMAGE_NT_HEADERS64
  name: IMAGE_NT_HEADERS64
  href: api/ERC.Structures.IMAGE_NT_HEADERS64.html
  commentId: T:ERC.Structures.IMAGE_NT_HEADERS64
  fullName: ERC.Structures.IMAGE_NT_HEADERS64
  nameWithType: IMAGE_NT_HEADERS64
- uid: ERC.Structures.IMAGE_NT_HEADERS64.FileHeader
  name: FileHeader
  href: api/ERC.Structures.IMAGE_NT_HEADERS64.html#ERC_Structures_IMAGE_NT_HEADERS64_FileHeader
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS64.FileHeader
  fullName: ERC.Structures.IMAGE_NT_HEADERS64.FileHeader
  nameWithType: IMAGE_NT_HEADERS64.FileHeader
- uid: ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader
  name: OptionalHeader
  href: api/ERC.Structures.IMAGE_NT_HEADERS64.html#ERC_Structures_IMAGE_NT_HEADERS64_OptionalHeader
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader
  fullName: ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader
  nameWithType: IMAGE_NT_HEADERS64.OptionalHeader
- uid: ERC.Structures.IMAGE_NT_HEADERS64.Signature
  name: Signature
  href: api/ERC.Structures.IMAGE_NT_HEADERS64.html#ERC_Structures_IMAGE_NT_HEADERS64_Signature
  commentId: F:ERC.Structures.IMAGE_NT_HEADERS64.Signature
  fullName: ERC.Structures.IMAGE_NT_HEADERS64.Signature
  nameWithType: IMAGE_NT_HEADERS64.Signature
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32
  name: IMAGE_OPTIONAL_HEADER32
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html
  commentId: T:ERC.Structures.IMAGE_OPTIONAL_HEADER32
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32
  nameWithType: IMAGE_OPTIONAL_HEADER32
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint
  name: AddressOfEntryPoint
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_AddressOfEntryPoint
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint
  nameWithType: IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture
  name: Architecture
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Architecture
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture
  nameWithType: IMAGE_OPTIONAL_HEADER32.Architecture
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode
  name: BaseOfCode
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseOfCode
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode
  nameWithType: IMAGE_OPTIONAL_HEADER32.BaseOfCode
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData
  name: BaseOfData
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseOfData
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData
  nameWithType: IMAGE_OPTIONAL_HEADER32.BaseOfData
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable
  name: BaseRelocationTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseRelocationTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.BaseRelocationTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport
  name: BoundImport
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_BoundImport
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport
  nameWithType: IMAGE_OPTIONAL_HEADER32.BoundImport
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable
  name: CertificateTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_CertificateTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.CertificateTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum
  name: CheckSum
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_CheckSum
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum
  nameWithType: IMAGE_OPTIONAL_HEADER32.CheckSum
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader
  name: CLRRuntimeHeader
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_CLRRuntimeHeader
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader
  nameWithType: IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug
  name: Debug
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Debug
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug
  nameWithType: IMAGE_OPTIONAL_HEADER32.Debug
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor
  name: DelayImportDescriptor
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_DelayImportDescriptor
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor
  nameWithType: IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics
  name: DllCharacteristics
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_DllCharacteristics
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics
  nameWithType: IMAGE_OPTIONAL_HEADER32.DllCharacteristics
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable
  name: ExceptionTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_ExceptionTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.ExceptionTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable
  name: ExportTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_ExportTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.ExportTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment
  name: FileAlignment
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_FileAlignment
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment
  nameWithType: IMAGE_OPTIONAL_HEADER32.FileAlignment
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr
  name: GlobalPtr
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_GlobalPtr
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr
  nameWithType: IMAGE_OPTIONAL_HEADER32.GlobalPtr
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT
  name: IAT
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_IAT
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT
  nameWithType: IMAGE_OPTIONAL_HEADER32.IAT
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase
  name: ImageBase
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_ImageBase
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase
  nameWithType: IMAGE_OPTIONAL_HEADER32.ImageBase
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable
  name: ImportTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_ImportTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.ImportTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable
  name: LoadConfigTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_LoadConfigTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.LoadConfigTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags
  name: LoaderFlags
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_LoaderFlags
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags
  nameWithType: IMAGE_OPTIONAL_HEADER32.LoaderFlags
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic
  name: Magic
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Magic
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic
  nameWithType: IMAGE_OPTIONAL_HEADER32.Magic
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion
  name: MajorImageVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorImageVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MajorImageVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion
  name: MajorLinkerVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorLinkerVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion
  name: MajorOperatingSystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorOperatingSystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion
  name: MajorSubsystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorSubsystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion
  name: MinorImageVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorImageVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MinorImageVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion
  name: MinorLinkerVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorLinkerVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion
  name: MinorOperatingSystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorOperatingSystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion
  name: MinorSubsystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorSubsystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes
  name: NumberOfRvaAndSizes
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_NumberOfRvaAndSizes
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes
  nameWithType: IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved
  name: Reserved
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Reserved
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved
  nameWithType: IMAGE_OPTIONAL_HEADER32.Reserved
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable
  name: ResourceTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_ResourceTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.ResourceTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment
  name: SectionAlignment
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SectionAlignment
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment
  nameWithType: IMAGE_OPTIONAL_HEADER32.SectionAlignment
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode
  name: SizeOfCode
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfCode
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfCode
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders
  name: SizeOfHeaders
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeaders
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfHeaders
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit
  name: SizeOfHeapCommit
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeapCommit
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve
  name: SizeOfHeapReserve
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeapReserve
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage
  name: SizeOfImage
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfImage
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfImage
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData
  name: SizeOfInitializedData
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfInitializedData
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit
  name: SizeOfStackCommit
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfStackCommit
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve
  name: SizeOfStackReserve
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfStackReserve
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData
  name: SizeOfUninitializedData
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfUninitializedData
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData
  nameWithType: IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem
  name: Subsystem
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Subsystem
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem
  nameWithType: IMAGE_OPTIONAL_HEADER32.Subsystem
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable
  name: TLSTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_TLSTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable
  nameWithType: IMAGE_OPTIONAL_HEADER32.TLSTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue
  name: Win32VersionValue
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html#ERC_Structures_IMAGE_OPTIONAL_HEADER32_Win32VersionValue
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue
  nameWithType: IMAGE_OPTIONAL_HEADER32.Win32VersionValue
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64
  name: IMAGE_OPTIONAL_HEADER64
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html
  commentId: T:ERC.Structures.IMAGE_OPTIONAL_HEADER64
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64
  nameWithType: IMAGE_OPTIONAL_HEADER64
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint
  name: AddressOfEntryPoint
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_AddressOfEntryPoint
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint
  nameWithType: IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture
  name: Architecture
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Architecture
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture
  nameWithType: IMAGE_OPTIONAL_HEADER64.Architecture
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode
  name: BaseOfCode
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_BaseOfCode
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode
  nameWithType: IMAGE_OPTIONAL_HEADER64.BaseOfCode
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable
  name: BaseRelocationTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_BaseRelocationTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.BaseRelocationTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport
  name: BoundImport
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_BoundImport
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport
  nameWithType: IMAGE_OPTIONAL_HEADER64.BoundImport
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable
  name: CertificateTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_CertificateTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.CertificateTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum
  name: CheckSum
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_CheckSum
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum
  nameWithType: IMAGE_OPTIONAL_HEADER64.CheckSum
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader
  name: CLRRuntimeHeader
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_CLRRuntimeHeader
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader
  nameWithType: IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug
  name: Debug
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Debug
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug
  nameWithType: IMAGE_OPTIONAL_HEADER64.Debug
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor
  name: DelayImportDescriptor
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_DelayImportDescriptor
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor
  nameWithType: IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics
  name: DllCharacteristics
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_DllCharacteristics
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics
  nameWithType: IMAGE_OPTIONAL_HEADER64.DllCharacteristics
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable
  name: ExceptionTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_ExceptionTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.ExceptionTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable
  name: ExportTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_ExportTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.ExportTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment
  name: FileAlignment
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_FileAlignment
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment
  nameWithType: IMAGE_OPTIONAL_HEADER64.FileAlignment
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr
  name: GlobalPtr
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_GlobalPtr
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr
  nameWithType: IMAGE_OPTIONAL_HEADER64.GlobalPtr
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT
  name: IAT
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_IAT
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT
  nameWithType: IMAGE_OPTIONAL_HEADER64.IAT
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase
  name: ImageBase
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_ImageBase
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase
  nameWithType: IMAGE_OPTIONAL_HEADER64.ImageBase
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable
  name: ImportTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_ImportTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.ImportTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable
  name: LoadConfigTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_LoadConfigTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.LoadConfigTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags
  name: LoaderFlags
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_LoaderFlags
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags
  nameWithType: IMAGE_OPTIONAL_HEADER64.LoaderFlags
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic
  name: Magic
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Magic
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic
  nameWithType: IMAGE_OPTIONAL_HEADER64.Magic
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion
  name: MajorImageVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorImageVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MajorImageVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion
  name: MajorLinkerVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorLinkerVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion
  name: MajorOperatingSystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorOperatingSystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion
  name: MajorSubsystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorSubsystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion
  name: MinorImageVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorImageVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MinorImageVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion
  name: MinorLinkerVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorLinkerVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion
  name: MinorOperatingSystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorOperatingSystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion
  name: MinorSubsystemVersion
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorSubsystemVersion
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion
  nameWithType: IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes
  name: NumberOfRvaAndSizes
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_NumberOfRvaAndSizes
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes
  nameWithType: IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved
  name: Reserved
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Reserved
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved
  nameWithType: IMAGE_OPTIONAL_HEADER64.Reserved
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable
  name: ResourceTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_ResourceTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.ResourceTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment
  name: SectionAlignment
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SectionAlignment
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment
  nameWithType: IMAGE_OPTIONAL_HEADER64.SectionAlignment
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode
  name: SizeOfCode
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfCode
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfCode
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders
  name: SizeOfHeaders
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeaders
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfHeaders
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit
  name: SizeOfHeapCommit
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeapCommit
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve
  name: SizeOfHeapReserve
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeapReserve
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage
  name: SizeOfImage
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfImage
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfImage
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData
  name: SizeOfInitializedData
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfInitializedData
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit
  name: SizeOfStackCommit
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfStackCommit
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve
  name: SizeOfStackReserve
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfStackReserve
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData
  name: SizeOfUninitializedData
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfUninitializedData
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData
  nameWithType: IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem
  name: Subsystem
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Subsystem
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem
  nameWithType: IMAGE_OPTIONAL_HEADER64.Subsystem
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable
  name: TLSTable
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_TLSTable
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable
  nameWithType: IMAGE_OPTIONAL_HEADER64.TLSTable
- uid: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue
  name: Win32VersionValue
  href: api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html#ERC_Structures_IMAGE_OPTIONAL_HEADER64_Win32VersionValue
  commentId: F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue
  fullName: ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue
  nameWithType: IMAGE_OPTIONAL_HEADER64.Win32VersionValue
- uid: ERC.Structures.LIST_ENTRY
  name: LIST_ENTRY
  href: api/ERC.Structures.LIST_ENTRY.html
  commentId: T:ERC.Structures.LIST_ENTRY
  fullName: ERC.Structures.LIST_ENTRY
  nameWithType: LIST_ENTRY
- uid: ERC.Structures.LIST_ENTRY.Blink
  name: Blink
  href: api/ERC.Structures.LIST_ENTRY.html#ERC_Structures_LIST_ENTRY_Blink
  commentId: F:ERC.Structures.LIST_ENTRY.Blink
  fullName: ERC.Structures.LIST_ENTRY.Blink
  nameWithType: LIST_ENTRY.Blink
- uid: ERC.Structures.LIST_ENTRY.Flink
  name: Flink
  href: api/ERC.Structures.LIST_ENTRY.html#ERC_Structures_LIST_ENTRY_Flink
  commentId: F:ERC.Structures.LIST_ENTRY.Flink
  fullName: ERC.Structures.LIST_ENTRY.Flink
  nameWithType: LIST_ENTRY.Flink
- uid: ERC.Structures.LOADED_IMAGE
  name: LOADED_IMAGE
  href: api/ERC.Structures.LOADED_IMAGE.html
  commentId: T:ERC.Structures.LOADED_IMAGE
  fullName: ERC.Structures.LOADED_IMAGE
  nameWithType: LOADED_IMAGE
- uid: ERC.Structures.LOADED_IMAGE.Characteristics
  name: Characteristics
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_Characteristics
  commentId: F:ERC.Structures.LOADED_IMAGE.Characteristics
  fullName: ERC.Structures.LOADED_IMAGE.Characteristics
  nameWithType: LOADED_IMAGE.Characteristics
- uid: ERC.Structures.LOADED_IMAGE.fDOSImage
  name: fDOSImage
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_fDOSImage
  commentId: F:ERC.Structures.LOADED_IMAGE.fDOSImage
  fullName: ERC.Structures.LOADED_IMAGE.fDOSImage
  nameWithType: LOADED_IMAGE.fDOSImage
- uid: ERC.Structures.LOADED_IMAGE.FileHeader
  name: FileHeader
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_FileHeader
  commentId: F:ERC.Structures.LOADED_IMAGE.FileHeader
  fullName: ERC.Structures.LOADED_IMAGE.FileHeader
  nameWithType: LOADED_IMAGE.FileHeader
- uid: ERC.Structures.LOADED_IMAGE.fReadOnly
  name: fReadOnly
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_fReadOnly
  commentId: F:ERC.Structures.LOADED_IMAGE.fReadOnly
  fullName: ERC.Structures.LOADED_IMAGE.fReadOnly
  nameWithType: LOADED_IMAGE.fReadOnly
- uid: ERC.Structures.LOADED_IMAGE.fSystemImage
  name: fSystemImage
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_fSystemImage
  commentId: F:ERC.Structures.LOADED_IMAGE.fSystemImage
  fullName: ERC.Structures.LOADED_IMAGE.fSystemImage
  nameWithType: LOADED_IMAGE.fSystemImage
- uid: ERC.Structures.LOADED_IMAGE.hFile
  name: hFile
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_hFile
  commentId: F:ERC.Structures.LOADED_IMAGE.hFile
  fullName: ERC.Structures.LOADED_IMAGE.hFile
  nameWithType: LOADED_IMAGE.hFile
- uid: ERC.Structures.LOADED_IMAGE.LastRvaSection
  name: LastRvaSection
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_LastRvaSection
  commentId: F:ERC.Structures.LOADED_IMAGE.LastRvaSection
  fullName: ERC.Structures.LOADED_IMAGE.LastRvaSection
  nameWithType: LOADED_IMAGE.LastRvaSection
- uid: ERC.Structures.LOADED_IMAGE.Links
  name: Links
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_Links
  commentId: F:ERC.Structures.LOADED_IMAGE.Links
  fullName: ERC.Structures.LOADED_IMAGE.Links
  nameWithType: LOADED_IMAGE.Links
- uid: ERC.Structures.LOADED_IMAGE.MappedAddress
  name: MappedAddress
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_MappedAddress
  commentId: F:ERC.Structures.LOADED_IMAGE.MappedAddress
  fullName: ERC.Structures.LOADED_IMAGE.MappedAddress
  nameWithType: LOADED_IMAGE.MappedAddress
- uid: ERC.Structures.LOADED_IMAGE.ModuleName
  name: ModuleName
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_ModuleName
  commentId: F:ERC.Structures.LOADED_IMAGE.ModuleName
  fullName: ERC.Structures.LOADED_IMAGE.ModuleName
  nameWithType: LOADED_IMAGE.ModuleName
- uid: ERC.Structures.LOADED_IMAGE.NumberOfSections
  name: NumberOfSections
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_NumberOfSections
  commentId: F:ERC.Structures.LOADED_IMAGE.NumberOfSections
  fullName: ERC.Structures.LOADED_IMAGE.NumberOfSections
  nameWithType: LOADED_IMAGE.NumberOfSections
- uid: ERC.Structures.LOADED_IMAGE.Sections
  name: Sections
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_Sections
  commentId: F:ERC.Structures.LOADED_IMAGE.Sections
  fullName: ERC.Structures.LOADED_IMAGE.Sections
  nameWithType: LOADED_IMAGE.Sections
- uid: ERC.Structures.LOADED_IMAGE.SizeOfImage
  name: SizeOfImage
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_SizeOfImage
  commentId: F:ERC.Structures.LOADED_IMAGE.SizeOfImage
  fullName: ERC.Structures.LOADED_IMAGE.SizeOfImage
  nameWithType: LOADED_IMAGE.SizeOfImage
- uid: ERC.Structures.LOADED_IMAGE.Version
  name: Version
  href: api/ERC.Structures.LOADED_IMAGE.html#ERC_Structures_LOADED_IMAGE_Version
  commentId: F:ERC.Structures.LOADED_IMAGE.Version
  fullName: ERC.Structures.LOADED_IMAGE.Version
  nameWithType: LOADED_IMAGE.Version
- uid: ERC.Structures.LoadLibraryFlags
  name: LoadLibraryFlags
  href: api/ERC.Structures.LoadLibraryFlags.html
  commentId: T:ERC.Structures.LoadLibraryFlags
  fullName: ERC.Structures.LoadLibraryFlags
  nameWithType: LoadLibraryFlags
- uid: ERC.Structures.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES
  name: DONT_RESOLVE_DLL_REFERENCES
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_DONT_RESOLVE_DLL_REFERENCES
  commentId: F:ERC.Structures.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES
  fullName: ERC.Structures.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES
  nameWithType: LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES
- uid: ERC.Structures.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL
  name: LOAD_IGNORE_CODE_AUTHZ_LEVEL
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_IGNORE_CODE_AUTHZ_LEVEL
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL
  nameWithType: LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE
  name: LOAD_LIBRARY_AS_DATAFILE
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_DATAFILE
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
  name: LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE
  name: LOAD_LIBRARY_AS_IMAGE_RESOURCE
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_IMAGE_RESOURCE
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR
  name: LOAD_LIBRARY_SEARCH_APPLICATION_DIR
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_APPLICATION_DIR
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
  name: LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
  name: LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32
  name: LOAD_LIBRARY_SEARCH_SYSTEM32
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_SYSTEM32
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32
- uid: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS
  name: LOAD_LIBRARY_SEARCH_USER_DIRS
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_USER_DIRS
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS
  nameWithType: LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS
- uid: ERC.Structures.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH
  name: LOAD_WITH_ALTERED_SEARCH_PATH
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_LOAD_WITH_ALTERED_SEARCH_PATH
  commentId: F:ERC.Structures.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH
  fullName: ERC.Structures.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH
  nameWithType: LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH
- uid: ERC.Structures.LoadLibraryFlags.None
  name: None
  href: api/ERC.Structures.LoadLibraryFlags.html#ERC_Structures_LoadLibraryFlags_None
  commentId: F:ERC.Structures.LoadLibraryFlags.None
  fullName: ERC.Structures.LoadLibraryFlags.None
  nameWithType: LoadLibraryFlags.None
- uid: ERC.Structures.M128A
  name: M128A
  href: api/ERC.Structures.M128A.html
  commentId: T:ERC.Structures.M128A
  fullName: ERC.Structures.M128A
  nameWithType: M128A
- uid: ERC.Structures.M128A.High
  name: High
  href: api/ERC.Structures.M128A.html#ERC_Structures_M128A_High
  commentId: F:ERC.Structures.M128A.High
  fullName: ERC.Structures.M128A.High
  nameWithType: M128A.High
- uid: ERC.Structures.M128A.Low
  name: Low
  href: api/ERC.Structures.M128A.html#ERC_Structures_M128A_Low
  commentId: F:ERC.Structures.M128A.Low
  fullName: ERC.Structures.M128A.Low
  nameWithType: M128A.Low
- uid: ERC.Structures.M128A.ToString
  name: ToString()
  href: api/ERC.Structures.M128A.html#ERC_Structures_M128A_ToString
  commentId: M:ERC.Structures.M128A.ToString
  fullName: ERC.Structures.M128A.ToString()
  nameWithType: M128A.ToString()
- uid: ERC.Structures.M128A.ToString*
  name: ToString
  href: api/ERC.Structures.M128A.html#ERC_Structures_M128A_ToString_
  commentId: Overload:ERC.Structures.M128A.ToString
  isSpec: "True"
  fullName: ERC.Structures.M128A.ToString
  nameWithType: M128A.ToString
- uid: ERC.Structures.MagicType
  name: MagicType
  href: api/ERC.Structures.MagicType.html
  commentId: T:ERC.Structures.MagicType
  fullName: ERC.Structures.MagicType
  nameWithType: MagicType
- uid: ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
  name: IMAGE_NT_OPTIONAL_HDR32_MAGIC
  href: api/ERC.Structures.MagicType.html#ERC_Structures_MagicType_IMAGE_NT_OPTIONAL_HDR32_MAGIC
  commentId: F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
  fullName: ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
  nameWithType: MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
- uid: ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
  name: IMAGE_NT_OPTIONAL_HDR64_MAGIC
  href: api/ERC.Structures.MagicType.html#ERC_Structures_MagicType_IMAGE_NT_OPTIONAL_HDR64_MAGIC
  commentId: F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
  fullName: ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
  nameWithType: MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32
  name: MEMORY_BASIC_INFORMATION32
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html
  commentId: T:ERC.Structures.MEMORY_BASIC_INFORMATION32
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32
  nameWithType: MEMORY_BASIC_INFORMATION32
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase
  name: AllocationBase
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_AllocationBase
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase
  nameWithType: MEMORY_BASIC_INFORMATION32.AllocationBase
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect
  name: AllocationProtect
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_AllocationProtect
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect
  nameWithType: MEMORY_BASIC_INFORMATION32.AllocationProtect
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress
  name: BaseAddress
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_BaseAddress
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress
  nameWithType: MEMORY_BASIC_INFORMATION32.BaseAddress
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect
  name: Protect
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_Protect
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect
  nameWithType: MEMORY_BASIC_INFORMATION32.Protect
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize
  name: RegionSize
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_RegionSize
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize
  nameWithType: MEMORY_BASIC_INFORMATION32.RegionSize
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.State
  name: State
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_State
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.State
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.State
  nameWithType: MEMORY_BASIC_INFORMATION32.State
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION32.Type
  name: Type
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html#ERC_Structures_MEMORY_BASIC_INFORMATION32_Type
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Type
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION32.Type
  nameWithType: MEMORY_BASIC_INFORMATION32.Type
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64
  name: MEMORY_BASIC_INFORMATION64
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html
  commentId: T:ERC.Structures.MEMORY_BASIC_INFORMATION64
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64
  nameWithType: MEMORY_BASIC_INFORMATION64
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1
  name: __alignment1
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64___alignment1
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1
  nameWithType: MEMORY_BASIC_INFORMATION64.__alignment1
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2
  name: __alignment2
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64___alignment2
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2
  nameWithType: MEMORY_BASIC_INFORMATION64.__alignment2
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase
  name: AllocationBase
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_AllocationBase
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase
  nameWithType: MEMORY_BASIC_INFORMATION64.AllocationBase
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect
  name: AllocationProtect
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_AllocationProtect
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect
  nameWithType: MEMORY_BASIC_INFORMATION64.AllocationProtect
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress
  name: BaseAddress
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_BaseAddress
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress
  nameWithType: MEMORY_BASIC_INFORMATION64.BaseAddress
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect
  name: Protect
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_Protect
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect
  nameWithType: MEMORY_BASIC_INFORMATION64.Protect
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize
  name: RegionSize
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_RegionSize
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize
  nameWithType: MEMORY_BASIC_INFORMATION64.RegionSize
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.State
  name: State
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_State
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.State
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.State
  nameWithType: MEMORY_BASIC_INFORMATION64.State
- uid: ERC.Structures.MEMORY_BASIC_INFORMATION64.Type
  name: Type
  href: api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html#ERC_Structures_MEMORY_BASIC_INFORMATION64_Type
  commentId: F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Type
  fullName: ERC.Structures.MEMORY_BASIC_INFORMATION64.Type
  nameWithType: MEMORY_BASIC_INFORMATION64.Type
- uid: ERC.Structures.ProcessAccessFlags
  name: ProcessAccessFlags
  href: api/ERC.Structures.ProcessAccessFlags.html
  commentId: T:ERC.Structures.ProcessAccessFlags
  fullName: ERC.Structures.ProcessAccessFlags
  nameWithType: ProcessAccessFlags
- uid: ERC.Structures.ProcessAccessFlags.All
  name: All
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_All
  commentId: F:ERC.Structures.ProcessAccessFlags.All
  fullName: ERC.Structures.ProcessAccessFlags.All
  nameWithType: ProcessAccessFlags.All
- uid: ERC.Structures.ProcessAccessFlags.CreateProcess
  name: CreateProcess
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_CreateProcess
  commentId: F:ERC.Structures.ProcessAccessFlags.CreateProcess
  fullName: ERC.Structures.ProcessAccessFlags.CreateProcess
  nameWithType: ProcessAccessFlags.CreateProcess
- uid: ERC.Structures.ProcessAccessFlags.CreateThread
  name: CreateThread
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_CreateThread
  commentId: F:ERC.Structures.ProcessAccessFlags.CreateThread
  fullName: ERC.Structures.ProcessAccessFlags.CreateThread
  nameWithType: ProcessAccessFlags.CreateThread
- uid: ERC.Structures.ProcessAccessFlags.DuplicateHandle
  name: DuplicateHandle
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_DuplicateHandle
  commentId: F:ERC.Structures.ProcessAccessFlags.DuplicateHandle
  fullName: ERC.Structures.ProcessAccessFlags.DuplicateHandle
  nameWithType: ProcessAccessFlags.DuplicateHandle
- uid: ERC.Structures.ProcessAccessFlags.QueryInformation
  name: QueryInformation
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_QueryInformation
  commentId: F:ERC.Structures.ProcessAccessFlags.QueryInformation
  fullName: ERC.Structures.ProcessAccessFlags.QueryInformation
  nameWithType: ProcessAccessFlags.QueryInformation
- uid: ERC.Structures.ProcessAccessFlags.QueryLimitedInformation
  name: QueryLimitedInformation
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_QueryLimitedInformation
  commentId: F:ERC.Structures.ProcessAccessFlags.QueryLimitedInformation
  fullName: ERC.Structures.ProcessAccessFlags.QueryLimitedInformation
  nameWithType: ProcessAccessFlags.QueryLimitedInformation
- uid: ERC.Structures.ProcessAccessFlags.SetInformation
  name: SetInformation
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_SetInformation
  commentId: F:ERC.Structures.ProcessAccessFlags.SetInformation
  fullName: ERC.Structures.ProcessAccessFlags.SetInformation
  nameWithType: ProcessAccessFlags.SetInformation
- uid: ERC.Structures.ProcessAccessFlags.SetQuota
  name: SetQuota
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_SetQuota
  commentId: F:ERC.Structures.ProcessAccessFlags.SetQuota
  fullName: ERC.Structures.ProcessAccessFlags.SetQuota
  nameWithType: ProcessAccessFlags.SetQuota
- uid: ERC.Structures.ProcessAccessFlags.Synchronize
  name: Synchronize
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_Synchronize
  commentId: F:ERC.Structures.ProcessAccessFlags.Synchronize
  fullName: ERC.Structures.ProcessAccessFlags.Synchronize
  nameWithType: ProcessAccessFlags.Synchronize
- uid: ERC.Structures.ProcessAccessFlags.Terminate
  name: Terminate
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_Terminate
  commentId: F:ERC.Structures.ProcessAccessFlags.Terminate
  fullName: ERC.Structures.ProcessAccessFlags.Terminate
  nameWithType: ProcessAccessFlags.Terminate
- uid: ERC.Structures.ProcessAccessFlags.VirtualMemoryOperation
  name: VirtualMemoryOperation
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_VirtualMemoryOperation
  commentId: F:ERC.Structures.ProcessAccessFlags.VirtualMemoryOperation
  fullName: ERC.Structures.ProcessAccessFlags.VirtualMemoryOperation
  nameWithType: ProcessAccessFlags.VirtualMemoryOperation
- uid: ERC.Structures.ProcessAccessFlags.VirtualMemoryRead
  name: VirtualMemoryRead
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_VirtualMemoryRead
  commentId: F:ERC.Structures.ProcessAccessFlags.VirtualMemoryRead
  fullName: ERC.Structures.ProcessAccessFlags.VirtualMemoryRead
  nameWithType: ProcessAccessFlags.VirtualMemoryRead
- uid: ERC.Structures.ProcessAccessFlags.VirtualMemoryWrite
  name: VirtualMemoryWrite
  href: api/ERC.Structures.ProcessAccessFlags.html#ERC_Structures_ProcessAccessFlags_VirtualMemoryWrite
  commentId: F:ERC.Structures.ProcessAccessFlags.VirtualMemoryWrite
  fullName: ERC.Structures.ProcessAccessFlags.VirtualMemoryWrite
  nameWithType: ProcessAccessFlags.VirtualMemoryWrite
- uid: ERC.Structures.RegisterInfo
  name: RegisterInfo
  href: api/ERC.Structures.RegisterInfo.html
  commentId: T:ERC.Structures.RegisterInfo
  fullName: ERC.Structures.RegisterInfo
  nameWithType: RegisterInfo
- uid: ERC.Structures.RegisterInfo.BufferSize
  name: BufferSize
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_BufferSize
  commentId: P:ERC.Structures.RegisterInfo.BufferSize
  fullName: ERC.Structures.RegisterInfo.BufferSize
  nameWithType: RegisterInfo.BufferSize
- uid: ERC.Structures.RegisterInfo.BufferSize*
  name: BufferSize
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_BufferSize_
  commentId: Overload:ERC.Structures.RegisterInfo.BufferSize
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.BufferSize
  nameWithType: RegisterInfo.BufferSize
- uid: ERC.Structures.RegisterInfo.overwritten
  name: overwritten
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_overwritten
  commentId: P:ERC.Structures.RegisterInfo.overwritten
  fullName: ERC.Structures.RegisterInfo.overwritten
  nameWithType: RegisterInfo.overwritten
- uid: ERC.Structures.RegisterInfo.overwritten*
  name: overwritten
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_overwritten_
  commentId: Overload:ERC.Structures.RegisterInfo.overwritten
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.overwritten
  nameWithType: RegisterInfo.overwritten
- uid: ERC.Structures.RegisterInfo.Register
  name: Register
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_Register
  commentId: P:ERC.Structures.RegisterInfo.Register
  fullName: ERC.Structures.RegisterInfo.Register
  nameWithType: RegisterInfo.Register
- uid: ERC.Structures.RegisterInfo.Register*
  name: Register
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_Register_
  commentId: Overload:ERC.Structures.RegisterInfo.Register
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.Register
  nameWithType: RegisterInfo.Register
- uid: ERC.Structures.RegisterInfo.RegisterOffset
  name: RegisterOffset
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_RegisterOffset
  commentId: P:ERC.Structures.RegisterInfo.RegisterOffset
  fullName: ERC.Structures.RegisterInfo.RegisterOffset
  nameWithType: RegisterInfo.RegisterOffset
- uid: ERC.Structures.RegisterInfo.RegisterOffset*
  name: RegisterOffset
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_RegisterOffset_
  commentId: Overload:ERC.Structures.RegisterInfo.RegisterOffset
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.RegisterOffset
  nameWithType: RegisterInfo.RegisterOffset
- uid: ERC.Structures.RegisterInfo.RegisterValue
  name: RegisterValue
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_RegisterValue
  commentId: P:ERC.Structures.RegisterInfo.RegisterValue
  fullName: ERC.Structures.RegisterInfo.RegisterValue
  nameWithType: RegisterInfo.RegisterValue
- uid: ERC.Structures.RegisterInfo.RegisterValue*
  name: RegisterValue
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_RegisterValue_
  commentId: Overload:ERC.Structures.RegisterInfo.RegisterValue
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.RegisterValue
  nameWithType: RegisterInfo.RegisterValue
- uid: ERC.Structures.RegisterInfo.StringOffset
  name: StringOffset
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_StringOffset
  commentId: P:ERC.Structures.RegisterInfo.StringOffset
  fullName: ERC.Structures.RegisterInfo.StringOffset
  nameWithType: RegisterInfo.StringOffset
- uid: ERC.Structures.RegisterInfo.StringOffset*
  name: StringOffset
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_StringOffset_
  commentId: Overload:ERC.Structures.RegisterInfo.StringOffset
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.StringOffset
  nameWithType: RegisterInfo.StringOffset
- uid: ERC.Structures.RegisterInfo.ThreadID
  name: ThreadID
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_ThreadID
  commentId: P:ERC.Structures.RegisterInfo.ThreadID
  fullName: ERC.Structures.RegisterInfo.ThreadID
  nameWithType: RegisterInfo.ThreadID
- uid: ERC.Structures.RegisterInfo.ThreadID*
  name: ThreadID
  href: api/ERC.Structures.RegisterInfo.html#ERC_Structures_RegisterInfo_ThreadID_
  commentId: Overload:ERC.Structures.RegisterInfo.ThreadID
  isSpec: "True"
  fullName: ERC.Structures.RegisterInfo.ThreadID
  nameWithType: RegisterInfo.ThreadID
- uid: ERC.Structures.StateEnum
  name: StateEnum
  href: api/ERC.Structures.StateEnum.html
  commentId: T:ERC.Structures.StateEnum
  fullName: ERC.Structures.StateEnum
  nameWithType: StateEnum
- uid: ERC.Structures.StateEnum.MEM_COMMIT
  name: MEM_COMMIT
  href: api/ERC.Structures.StateEnum.html#ERC_Structures_StateEnum_MEM_COMMIT
  commentId: F:ERC.Structures.StateEnum.MEM_COMMIT
  fullName: ERC.Structures.StateEnum.MEM_COMMIT
  nameWithType: StateEnum.MEM_COMMIT
- uid: ERC.Structures.StateEnum.MEM_FREE
  name: MEM_FREE
  href: api/ERC.Structures.StateEnum.html#ERC_Structures_StateEnum_MEM_FREE
  commentId: F:ERC.Structures.StateEnum.MEM_FREE
  fullName: ERC.Structures.StateEnum.MEM_FREE
  nameWithType: StateEnum.MEM_FREE
- uid: ERC.Structures.StateEnum.MEM_RESERVE
  name: MEM_RESERVE
  href: api/ERC.Structures.StateEnum.html#ERC_Structures_StateEnum_MEM_RESERVE
  commentId: F:ERC.Structures.StateEnum.MEM_RESERVE
  fullName: ERC.Structures.StateEnum.MEM_RESERVE
  nameWithType: StateEnum.MEM_RESERVE
- uid: ERC.Structures.SubSystemType
  name: SubSystemType
  href: api/ERC.Structures.SubSystemType.html
  commentId: T:ERC.Structures.SubSystemType
  fullName: ERC.Structures.SubSystemType
  nameWithType: SubSystemType
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION
  name: IMAGE_SUBSYSTEM_EFI_APPLICATION
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_APPLICATION
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
  name: IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM
  name: IMAGE_SUBSYSTEM_EFI_ROM
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_ROM
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
  name: IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_NATIVE
  name: IMAGE_SUBSYSTEM_NATIVE
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_NATIVE
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_NATIVE
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_NATIVE
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_NATIVE
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI
  name: IMAGE_SUBSYSTEM_POSIX_CUI
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_POSIX_CUI
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN
  name: IMAGE_SUBSYSTEM_UNKNOWN
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_UNKNOWN
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
  name: IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI
  name: IMAGE_SUBSYSTEM_WINDOWS_CUI
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_CUI
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI
  name: IMAGE_SUBSYSTEM_WINDOWS_GUI
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_GUI
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI
- uid: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_XBOX
  name: IMAGE_SUBSYSTEM_XBOX
  href: api/ERC.Structures.SubSystemType.html#ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_XBOX
  commentId: F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_XBOX
  fullName: ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_XBOX
  nameWithType: SubSystemType.IMAGE_SUBSYSTEM_XBOX
- uid: ERC.Structures.TEB
  name: TEB
  href: api/ERC.Structures.TEB.html
  commentId: T:ERC.Structures.TEB
  fullName: ERC.Structures.TEB
  nameWithType: TEB
- uid: ERC.Structures.TEB.ActivationContextStack
  name: ActivationContextStack
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_ActivationContextStack
  commentId: F:ERC.Structures.TEB.ActivationContextStack
  fullName: ERC.Structures.TEB.ActivationContextStack
  nameWithType: TEB.ActivationContextStack
- uid: ERC.Structures.TEB.ArbitraryDataSlot
  name: ArbitraryDataSlot
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_ArbitraryDataSlot
  commentId: F:ERC.Structures.TEB.ArbitraryDataSlot
  fullName: ERC.Structures.TEB.ArbitraryDataSlot
  nameWithType: TEB.ArbitraryDataSlot
- uid: ERC.Structures.TEB.BottomOfStack
  name: BottomOfStack
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_BottomOfStack
  commentId: F:ERC.Structures.TEB.BottomOfStack
  fullName: ERC.Structures.TEB.BottomOfStack
  nameWithType: TEB.BottomOfStack
- uid: ERC.Structures.TEB.CriticalSectionsCount
  name: CriticalSectionsCount
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_CriticalSectionsCount
  commentId: F:ERC.Structures.TEB.CriticalSectionsCount
  fullName: ERC.Structures.TEB.CriticalSectionsCount
  nameWithType: TEB.CriticalSectionsCount
- uid: ERC.Structures.TEB.CsrClientThread
  name: CsrClientThread
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_CsrClientThread
  commentId: F:ERC.Structures.TEB.CsrClientThread
  fullName: ERC.Structures.TEB.CsrClientThread
  nameWithType: TEB.CsrClientThread
- uid: ERC.Structures.TEB.CurrentLocale
  name: CurrentLocale
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_CurrentLocale
  commentId: F:ERC.Structures.TEB.CurrentLocale
  fullName: ERC.Structures.TEB.CurrentLocale
  nameWithType: TEB.CurrentLocale
- uid: ERC.Structures.TEB.CurrentSehFrame
  name: CurrentSehFrame
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_CurrentSehFrame
  commentId: F:ERC.Structures.TEB.CurrentSehFrame
  fullName: ERC.Structures.TEB.CurrentSehFrame
  nameWithType: TEB.CurrentSehFrame
- uid: ERC.Structures.TEB.DeallocationStack
  name: DeallocationStack
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_DeallocationStack
  commentId: F:ERC.Structures.TEB.DeallocationStack
  fullName: ERC.Structures.TEB.DeallocationStack
  nameWithType: TEB.DeallocationStack
- uid: ERC.Structures.TEB.EnvironmentPointer
  name: EnvironmentPointer
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_EnvironmentPointer
  commentId: F:ERC.Structures.TEB.EnvironmentPointer
  fullName: ERC.Structures.TEB.EnvironmentPointer
  nameWithType: TEB.EnvironmentPointer
- uid: ERC.Structures.TEB.ExceptionCode
  name: ExceptionCode
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_ExceptionCode
  commentId: F:ERC.Structures.TEB.ExceptionCode
  fullName: ERC.Structures.TEB.ExceptionCode
  nameWithType: TEB.ExceptionCode
- uid: ERC.Structures.TEB.FiberData
  name: FiberData
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_FiberData
  commentId: F:ERC.Structures.TEB.FiberData
  fullName: ERC.Structures.TEB.FiberData
  nameWithType: TEB.FiberData
- uid: ERC.Structures.TEB.FpSoftwareStatusRegister
  name: FpSoftwareStatusRegister
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_FpSoftwareStatusRegister
  commentId: F:ERC.Structures.TEB.FpSoftwareStatusRegister
  fullName: ERC.Structures.TEB.FpSoftwareStatusRegister
  nameWithType: TEB.FpSoftwareStatusRegister
- uid: ERC.Structures.TEB.GdiBrush
  name: GdiBrush
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiBrush
  commentId: F:ERC.Structures.TEB.GdiBrush
  fullName: ERC.Structures.TEB.GdiBrush
  nameWithType: TEB.GdiBrush
- uid: ERC.Structures.TEB.GdiCachedProcessHandle
  name: GdiCachedProcessHandle
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiCachedProcessHandle
  commentId: F:ERC.Structures.TEB.GdiCachedProcessHandle
  fullName: ERC.Structures.TEB.GdiCachedProcessHandle
  nameWithType: TEB.GdiCachedProcessHandle
- uid: ERC.Structures.TEB.GdiClientProcessId
  name: GdiClientProcessId
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiClientProcessId
  commentId: F:ERC.Structures.TEB.GdiClientProcessId
  fullName: ERC.Structures.TEB.GdiClientProcessId
  nameWithType: TEB.GdiClientProcessId
- uid: ERC.Structures.TEB.GdiClientThreadId
  name: GdiClientThreadId
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiClientThreadId
  commentId: F:ERC.Structures.TEB.GdiClientThreadId
  fullName: ERC.Structures.TEB.GdiClientThreadId
  nameWithType: TEB.GdiClientThreadId
- uid: ERC.Structures.TEB.GdiPen
  name: GdiPen
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiPen
  commentId: F:ERC.Structures.TEB.GdiPen
  fullName: ERC.Structures.TEB.GdiPen
  nameWithType: TEB.GdiPen
- uid: ERC.Structures.TEB.GdiRegion
  name: GdiRegion
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiRegion
  commentId: F:ERC.Structures.TEB.GdiRegion
  fullName: ERC.Structures.TEB.GdiRegion
  nameWithType: TEB.GdiRegion
- uid: ERC.Structures.TEB.GdiTebBatch
  name: GdiTebBatch
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiTebBatch
  commentId: F:ERC.Structures.TEB.GdiTebBatch
  fullName: ERC.Structures.TEB.GdiTebBatch
  nameWithType: TEB.GdiTebBatch
- uid: ERC.Structures.TEB.GdiThreadLocalInfo
  name: GdiThreadLocalInfo
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GdiThreadLocalInfo
  commentId: F:ERC.Structures.TEB.GdiThreadLocalInfo
  fullName: ERC.Structures.TEB.GdiThreadLocalInfo
  nameWithType: TEB.GdiThreadLocalInfo
- uid: ERC.Structures.TEB.GlReserved1
  name: GlReserved1
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_GlReserved1
  commentId: F:ERC.Structures.TEB.GlReserved1
  fullName: ERC.Structures.TEB.GlReserved1
  nameWithType: TEB.GlReserved1
- uid: ERC.Structures.TEB.Identifiers
  name: Identifiers
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Identifiers
  commentId: F:ERC.Structures.TEB.Identifiers
  fullName: ERC.Structures.TEB.Identifiers
  nameWithType: TEB.Identifiers
- uid: ERC.Structures.TEB.LastErrorNumber
  name: LastErrorNumber
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_LastErrorNumber
  commentId: F:ERC.Structures.TEB.LastErrorNumber
  fullName: ERC.Structures.TEB.LastErrorNumber
  nameWithType: TEB.LastErrorNumber
- uid: ERC.Structures.TEB.LastStatusValue
  name: LastStatusValue
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_LastStatusValue
  commentId: F:ERC.Structures.TEB.LastStatusValue
  fullName: ERC.Structures.TEB.LastStatusValue
  nameWithType: TEB.LastStatusValue
- uid: ERC.Structures.TEB.Peb
  name: Peb
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Peb
  commentId: F:ERC.Structures.TEB.Peb
  fullName: ERC.Structures.TEB.Peb
  nameWithType: TEB.Peb
- uid: ERC.Structures.TEB.RealProcessId
  name: RealProcessId
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_RealProcessId
  commentId: F:ERC.Structures.TEB.RealProcessId
  fullName: ERC.Structures.TEB.RealProcessId
  nameWithType: TEB.RealProcessId
- uid: ERC.Structures.TEB.RealThreadId
  name: RealThreadId
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_RealThreadId
  commentId: F:ERC.Structures.TEB.RealThreadId
  fullName: ERC.Structures.TEB.RealThreadId
  nameWithType: TEB.RealThreadId
- uid: ERC.Structures.TEB.RpcHandle
  name: RpcHandle
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_RpcHandle
  commentId: F:ERC.Structures.TEB.RpcHandle
  fullName: ERC.Structures.TEB.RpcHandle
  nameWithType: TEB.RpcHandle
- uid: ERC.Structures.TEB.RpcReserved
  name: RpcReserved
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_RpcReserved
  commentId: F:ERC.Structures.TEB.RpcReserved
  fullName: ERC.Structures.TEB.RpcReserved
  nameWithType: TEB.RpcReserved
- uid: ERC.Structures.TEB.SpareBytes
  name: SpareBytes
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_SpareBytes
  commentId: F:ERC.Structures.TEB.SpareBytes
  fullName: ERC.Structures.TEB.SpareBytes
  nameWithType: TEB.SpareBytes
- uid: ERC.Structures.TEB.StaticUnicodeString
  name: StaticUnicodeString
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_StaticUnicodeString
  commentId: F:ERC.Structures.TEB.StaticUnicodeString
  fullName: ERC.Structures.TEB.StaticUnicodeString
  nameWithType: TEB.StaticUnicodeString
- uid: ERC.Structures.TEB.SubSystemTeb
  name: SubSystemTeb
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_SubSystemTeb
  commentId: F:ERC.Structures.TEB.SubSystemTeb
  fullName: ERC.Structures.TEB.SubSystemTeb
  nameWithType: TEB.SubSystemTeb
- uid: ERC.Structures.TEB.SystemReserved1
  name: SystemReserved1
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_SystemReserved1
  commentId: F:ERC.Structures.TEB.SystemReserved1
  fullName: ERC.Structures.TEB.SystemReserved1
  nameWithType: TEB.SystemReserved1
- uid: ERC.Structures.TEB.SystemReserved2
  name: SystemReserved2
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_SystemReserved2
  commentId: F:ERC.Structures.TEB.SystemReserved2
  fullName: ERC.Structures.TEB.SystemReserved2
  nameWithType: TEB.SystemReserved2
- uid: ERC.Structures.TEB.Teb
  name: Teb
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Teb
  commentId: F:ERC.Structures.TEB.Teb
  fullName: ERC.Structures.TEB.Teb
  nameWithType: TEB.Teb
- uid: ERC.Structures.TEB.ThreadErrorMode
  name: ThreadErrorMode
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_ThreadErrorMode
  commentId: F:ERC.Structures.TEB.ThreadErrorMode
  fullName: ERC.Structures.TEB.ThreadErrorMode
  nameWithType: TEB.ThreadErrorMode
- uid: ERC.Structures.TEB.Tls
  name: Tls
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Tls
  commentId: F:ERC.Structures.TEB.Tls
  fullName: ERC.Structures.TEB.Tls
  nameWithType: TEB.Tls
- uid: ERC.Structures.TEB.TlsLinks
  name: TlsLinks
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_TlsLinks
  commentId: F:ERC.Structures.TEB.TlsLinks
  fullName: ERC.Structures.TEB.TlsLinks
  nameWithType: TEB.TlsLinks
- uid: ERC.Structures.TEB.TlsSlots
  name: TlsSlots
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_TlsSlots
  commentId: F:ERC.Structures.TEB.TlsSlots
  fullName: ERC.Structures.TEB.TlsSlots
  nameWithType: TEB.TlsSlots
- uid: ERC.Structures.TEB.TopOfStack
  name: TopOfStack
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_TopOfStack
  commentId: F:ERC.Structures.TEB.TopOfStack
  fullName: ERC.Structures.TEB.TopOfStack
  nameWithType: TEB.TopOfStack
- uid: ERC.Structures.TEB.UserReserved1
  name: UserReserved1
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_UserReserved1
  commentId: F:ERC.Structures.TEB.UserReserved1
  fullName: ERC.Structures.TEB.UserReserved1
  nameWithType: TEB.UserReserved1
- uid: ERC.Structures.TEB.Vdm
  name: Vdm
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Vdm
  commentId: F:ERC.Structures.TEB.Vdm
  fullName: ERC.Structures.TEB.Vdm
  nameWithType: TEB.Vdm
- uid: ERC.Structures.TEB.Win32ClientInfo
  name: Win32ClientInfo
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Win32ClientInfo
  commentId: F:ERC.Structures.TEB.Win32ClientInfo
  fullName: ERC.Structures.TEB.Win32ClientInfo
  nameWithType: TEB.Win32ClientInfo
- uid: ERC.Structures.TEB.Win32ThreadInfo
  name: Win32ThreadInfo
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_Win32ThreadInfo
  commentId: F:ERC.Structures.TEB.Win32ThreadInfo
  fullName: ERC.Structures.TEB.Win32ThreadInfo
  nameWithType: TEB.Win32ThreadInfo
- uid: ERC.Structures.TEB.WoW64Reserved
  name: WoW64Reserved
  href: api/ERC.Structures.TEB.html#ERC_Structures_TEB_WoW64Reserved
  commentId: F:ERC.Structures.TEB.WoW64Reserved
  fullName: ERC.Structures.TEB.WoW64Reserved
  nameWithType: TEB.WoW64Reserved
- uid: ERC.Structures.ThreadAccess
  name: ThreadAccess
  href: api/ERC.Structures.ThreadAccess.html
  commentId: T:ERC.Structures.ThreadAccess
  fullName: ERC.Structures.ThreadAccess
  nameWithType: ThreadAccess
- uid: ERC.Structures.ThreadAccess.All_ACCESS
  name: All_ACCESS
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_All_ACCESS
  commentId: F:ERC.Structures.ThreadAccess.All_ACCESS
  fullName: ERC.Structures.ThreadAccess.All_ACCESS
  nameWithType: ThreadAccess.All_ACCESS
- uid: ERC.Structures.ThreadAccess.DIRECT_IMPERSONATION
  name: DIRECT_IMPERSONATION
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_DIRECT_IMPERSONATION
  commentId: F:ERC.Structures.ThreadAccess.DIRECT_IMPERSONATION
  fullName: ERC.Structures.ThreadAccess.DIRECT_IMPERSONATION
  nameWithType: ThreadAccess.DIRECT_IMPERSONATION
- uid: ERC.Structures.ThreadAccess.GET_CONTEXT
  name: GET_CONTEXT
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_GET_CONTEXT
  commentId: F:ERC.Structures.ThreadAccess.GET_CONTEXT
  fullName: ERC.Structures.ThreadAccess.GET_CONTEXT
  nameWithType: ThreadAccess.GET_CONTEXT
- uid: ERC.Structures.ThreadAccess.IMPERSONATE
  name: IMPERSONATE
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_IMPERSONATE
  commentId: F:ERC.Structures.ThreadAccess.IMPERSONATE
  fullName: ERC.Structures.ThreadAccess.IMPERSONATE
  nameWithType: ThreadAccess.IMPERSONATE
- uid: ERC.Structures.ThreadAccess.QUERY_INFORMATION
  name: QUERY_INFORMATION
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_QUERY_INFORMATION
  commentId: F:ERC.Structures.ThreadAccess.QUERY_INFORMATION
  fullName: ERC.Structures.ThreadAccess.QUERY_INFORMATION
  nameWithType: ThreadAccess.QUERY_INFORMATION
- uid: ERC.Structures.ThreadAccess.SET_CONTEXT
  name: SET_CONTEXT
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_SET_CONTEXT
  commentId: F:ERC.Structures.ThreadAccess.SET_CONTEXT
  fullName: ERC.Structures.ThreadAccess.SET_CONTEXT
  nameWithType: ThreadAccess.SET_CONTEXT
- uid: ERC.Structures.ThreadAccess.SET_INFORMATION
  name: SET_INFORMATION
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_SET_INFORMATION
  commentId: F:ERC.Structures.ThreadAccess.SET_INFORMATION
  fullName: ERC.Structures.ThreadAccess.SET_INFORMATION
  nameWithType: ThreadAccess.SET_INFORMATION
- uid: ERC.Structures.ThreadAccess.SET_THREAD_TOKEN
  name: SET_THREAD_TOKEN
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_SET_THREAD_TOKEN
  commentId: F:ERC.Structures.ThreadAccess.SET_THREAD_TOKEN
  fullName: ERC.Structures.ThreadAccess.SET_THREAD_TOKEN
  nameWithType: ThreadAccess.SET_THREAD_TOKEN
- uid: ERC.Structures.ThreadAccess.SUSPEND_RESUME
  name: SUSPEND_RESUME
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_SUSPEND_RESUME
  commentId: F:ERC.Structures.ThreadAccess.SUSPEND_RESUME
  fullName: ERC.Structures.ThreadAccess.SUSPEND_RESUME
  nameWithType: ThreadAccess.SUSPEND_RESUME
- uid: ERC.Structures.ThreadAccess.TERMINATE
  name: TERMINATE
  href: api/ERC.Structures.ThreadAccess.html#ERC_Structures_ThreadAccess_TERMINATE
  commentId: F:ERC.Structures.ThreadAccess.TERMINATE
  fullName: ERC.Structures.ThreadAccess.TERMINATE
  nameWithType: ThreadAccess.TERMINATE
- uid: ERC.Structures.ThreadBasicInformation
  name: ThreadBasicInformation
  href: api/ERC.Structures.ThreadBasicInformation.html
  commentId: T:ERC.Structures.ThreadBasicInformation
  fullName: ERC.Structures.ThreadBasicInformation
  nameWithType: ThreadBasicInformation
- uid: ERC.Structures.ThreadBasicInformation.AffinityMask
  name: AffinityMask
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_AffinityMask
  commentId: F:ERC.Structures.ThreadBasicInformation.AffinityMask
  fullName: ERC.Structures.ThreadBasicInformation.AffinityMask
  nameWithType: ThreadBasicInformation.AffinityMask
- uid: ERC.Structures.ThreadBasicInformation.BasePriority
  name: BasePriority
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_BasePriority
  commentId: F:ERC.Structures.ThreadBasicInformation.BasePriority
  fullName: ERC.Structures.ThreadBasicInformation.BasePriority
  nameWithType: ThreadBasicInformation.BasePriority
- uid: ERC.Structures.ThreadBasicInformation.ExitStatus
  name: ExitStatus
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_ExitStatus
  commentId: F:ERC.Structures.ThreadBasicInformation.ExitStatus
  fullName: ERC.Structures.ThreadBasicInformation.ExitStatus
  nameWithType: ThreadBasicInformation.ExitStatus
- uid: ERC.Structures.ThreadBasicInformation.Identifiers
  name: Identifiers
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_Identifiers
  commentId: F:ERC.Structures.ThreadBasicInformation.Identifiers
  fullName: ERC.Structures.ThreadBasicInformation.Identifiers
  nameWithType: ThreadBasicInformation.Identifiers
- uid: ERC.Structures.ThreadBasicInformation.Priority
  name: Priority
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_Priority
  commentId: F:ERC.Structures.ThreadBasicInformation.Priority
  fullName: ERC.Structures.ThreadBasicInformation.Priority
  nameWithType: ThreadBasicInformation.Priority
- uid: ERC.Structures.ThreadBasicInformation.TebBaseAdress
  name: TebBaseAdress
  href: api/ERC.Structures.ThreadBasicInformation.html#ERC_Structures_ThreadBasicInformation_TebBaseAdress
  commentId: F:ERC.Structures.ThreadBasicInformation.TebBaseAdress
  fullName: ERC.Structures.ThreadBasicInformation.TebBaseAdress
  nameWithType: ThreadBasicInformation.TebBaseAdress
- uid: ERC.Structures.TypeEnum
  name: TypeEnum
  href: api/ERC.Structures.TypeEnum.html
  commentId: T:ERC.Structures.TypeEnum
  fullName: ERC.Structures.TypeEnum
  nameWithType: TypeEnum
- uid: ERC.Structures.TypeEnum.MEM_IMAGE
  name: MEM_IMAGE
  href: api/ERC.Structures.TypeEnum.html#ERC_Structures_TypeEnum_MEM_IMAGE
  commentId: F:ERC.Structures.TypeEnum.MEM_IMAGE
  fullName: ERC.Structures.TypeEnum.MEM_IMAGE
  nameWithType: TypeEnum.MEM_IMAGE
- uid: ERC.Structures.TypeEnum.MEM_MAPPED
  name: MEM_MAPPED
  href: api/ERC.Structures.TypeEnum.html#ERC_Structures_TypeEnum_MEM_MAPPED
  commentId: F:ERC.Structures.TypeEnum.MEM_MAPPED
  fullName: ERC.Structures.TypeEnum.MEM_MAPPED
  nameWithType: TypeEnum.MEM_MAPPED
- uid: ERC.Structures.TypeEnum.MEM_PRIVATE
  name: MEM_PRIVATE
  href: api/ERC.Structures.TypeEnum.html#ERC_Structures_TypeEnum_MEM_PRIVATE
  commentId: F:ERC.Structures.TypeEnum.MEM_PRIVATE
  fullName: ERC.Structures.TypeEnum.MEM_PRIVATE
  nameWithType: TypeEnum.MEM_PRIVATE
- uid: ERC.Structures.XSAVE_FORMAT64
  name: XSAVE_FORMAT64
  href: api/ERC.Structures.XSAVE_FORMAT64.html
  commentId: T:ERC.Structures.XSAVE_FORMAT64
  fullName: ERC.Structures.XSAVE_FORMAT64
  nameWithType: XSAVE_FORMAT64
- uid: ERC.Structures.XSAVE_FORMAT64.ControlWord
  name: ControlWord
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_ControlWord
  commentId: F:ERC.Structures.XSAVE_FORMAT64.ControlWord
  fullName: ERC.Structures.XSAVE_FORMAT64.ControlWord
  nameWithType: XSAVE_FORMAT64.ControlWord
- uid: ERC.Structures.XSAVE_FORMAT64.DataOffset
  name: DataOffset
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_DataOffset
  commentId: F:ERC.Structures.XSAVE_FORMAT64.DataOffset
  fullName: ERC.Structures.XSAVE_FORMAT64.DataOffset
  nameWithType: XSAVE_FORMAT64.DataOffset
- uid: ERC.Structures.XSAVE_FORMAT64.DataSelector
  name: DataSelector
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_DataSelector
  commentId: F:ERC.Structures.XSAVE_FORMAT64.DataSelector
  fullName: ERC.Structures.XSAVE_FORMAT64.DataSelector
  nameWithType: XSAVE_FORMAT64.DataSelector
- uid: ERC.Structures.XSAVE_FORMAT64.ErrorOffset
  name: ErrorOffset
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_ErrorOffset
  commentId: F:ERC.Structures.XSAVE_FORMAT64.ErrorOffset
  fullName: ERC.Structures.XSAVE_FORMAT64.ErrorOffset
  nameWithType: XSAVE_FORMAT64.ErrorOffset
- uid: ERC.Structures.XSAVE_FORMAT64.ErrorOpcode
  name: ErrorOpcode
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_ErrorOpcode
  commentId: F:ERC.Structures.XSAVE_FORMAT64.ErrorOpcode
  fullName: ERC.Structures.XSAVE_FORMAT64.ErrorOpcode
  nameWithType: XSAVE_FORMAT64.ErrorOpcode
- uid: ERC.Structures.XSAVE_FORMAT64.ErrorSelector
  name: ErrorSelector
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_ErrorSelector
  commentId: F:ERC.Structures.XSAVE_FORMAT64.ErrorSelector
  fullName: ERC.Structures.XSAVE_FORMAT64.ErrorSelector
  nameWithType: XSAVE_FORMAT64.ErrorSelector
- uid: ERC.Structures.XSAVE_FORMAT64.FloatRegisters
  name: FloatRegisters
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_FloatRegisters
  commentId: F:ERC.Structures.XSAVE_FORMAT64.FloatRegisters
  fullName: ERC.Structures.XSAVE_FORMAT64.FloatRegisters
  nameWithType: XSAVE_FORMAT64.FloatRegisters
- uid: ERC.Structures.XSAVE_FORMAT64.MxCsr
  name: MxCsr
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_MxCsr
  commentId: F:ERC.Structures.XSAVE_FORMAT64.MxCsr
  fullName: ERC.Structures.XSAVE_FORMAT64.MxCsr
  nameWithType: XSAVE_FORMAT64.MxCsr
- uid: ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask
  name: MxCsr_Mask
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_MxCsr_Mask
  commentId: F:ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask
  fullName: ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask
  nameWithType: XSAVE_FORMAT64.MxCsr_Mask
- uid: ERC.Structures.XSAVE_FORMAT64.Reserved1
  name: Reserved1
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_Reserved1
  commentId: F:ERC.Structures.XSAVE_FORMAT64.Reserved1
  fullName: ERC.Structures.XSAVE_FORMAT64.Reserved1
  nameWithType: XSAVE_FORMAT64.Reserved1
- uid: ERC.Structures.XSAVE_FORMAT64.Reserved2
  name: Reserved2
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_Reserved2
  commentId: F:ERC.Structures.XSAVE_FORMAT64.Reserved2
  fullName: ERC.Structures.XSAVE_FORMAT64.Reserved2
  nameWithType: XSAVE_FORMAT64.Reserved2
- uid: ERC.Structures.XSAVE_FORMAT64.Reserved3
  name: Reserved3
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_Reserved3
  commentId: F:ERC.Structures.XSAVE_FORMAT64.Reserved3
  fullName: ERC.Structures.XSAVE_FORMAT64.Reserved3
  nameWithType: XSAVE_FORMAT64.Reserved3
- uid: ERC.Structures.XSAVE_FORMAT64.Reserved4
  name: Reserved4
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_Reserved4
  commentId: F:ERC.Structures.XSAVE_FORMAT64.Reserved4
  fullName: ERC.Structures.XSAVE_FORMAT64.Reserved4
  nameWithType: XSAVE_FORMAT64.Reserved4
- uid: ERC.Structures.XSAVE_FORMAT64.StatusWord
  name: StatusWord
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_StatusWord
  commentId: F:ERC.Structures.XSAVE_FORMAT64.StatusWord
  fullName: ERC.Structures.XSAVE_FORMAT64.StatusWord
  nameWithType: XSAVE_FORMAT64.StatusWord
- uid: ERC.Structures.XSAVE_FORMAT64.TagWord
  name: TagWord
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_TagWord
  commentId: F:ERC.Structures.XSAVE_FORMAT64.TagWord
  fullName: ERC.Structures.XSAVE_FORMAT64.TagWord
  nameWithType: XSAVE_FORMAT64.TagWord
- uid: ERC.Structures.XSAVE_FORMAT64.XmmRegisters
  name: XmmRegisters
  href: api/ERC.Structures.XSAVE_FORMAT64.html#ERC_Structures_XSAVE_FORMAT64_XmmRegisters
  commentId: F:ERC.Structures.XSAVE_FORMAT64.XmmRegisters
  fullName: ERC.Structures.XSAVE_FORMAT64.XmmRegisters
  nameWithType: XSAVE_FORMAT64.XmmRegisters
- uid: ERC.ThreadInfo
  name: ThreadInfo
  href: api/ERC.ThreadInfo.html
  commentId: T:ERC.ThreadInfo
  fullName: ERC.ThreadInfo
  nameWithType: ThreadInfo
- uid: ERC.ThreadInfo.Context32
  name: Context32
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_Context32
  commentId: F:ERC.ThreadInfo.Context32
  fullName: ERC.ThreadInfo.Context32
  nameWithType: ThreadInfo.Context32
- uid: ERC.ThreadInfo.Context64
  name: Context64
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_Context64
  commentId: F:ERC.ThreadInfo.Context64
  fullName: ERC.ThreadInfo.Context64
  nameWithType: ThreadInfo.Context64
- uid: ERC.ThreadInfo.Get_Context
  name: Get_Context()
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_Get_Context
  commentId: M:ERC.ThreadInfo.Get_Context
  fullName: ERC.ThreadInfo.Get_Context()
  nameWithType: ThreadInfo.Get_Context()
- uid: ERC.ThreadInfo.Get_Context*
  name: Get_Context
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_Get_Context_
  commentId: Overload:ERC.ThreadInfo.Get_Context
  isSpec: "True"
  fullName: ERC.ThreadInfo.Get_Context
  nameWithType: ThreadInfo.Get_Context
- uid: ERC.ThreadInfo.GetSehChain
  name: GetSehChain()
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_GetSehChain
  commentId: M:ERC.ThreadInfo.GetSehChain
  fullName: ERC.ThreadInfo.GetSehChain()
  nameWithType: ThreadInfo.GetSehChain()
- uid: ERC.ThreadInfo.GetSehChain*
  name: GetSehChain
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_GetSehChain_
  commentId: Overload:ERC.ThreadInfo.GetSehChain
  isSpec: "True"
  fullName: ERC.ThreadInfo.GetSehChain
  nameWithType: ThreadInfo.GetSehChain
- uid: ERC.ThreadInfo.GetTeb
  name: GetTeb()
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_GetTeb
  commentId: M:ERC.ThreadInfo.GetTeb
  fullName: ERC.ThreadInfo.GetTeb()
  nameWithType: ThreadInfo.GetTeb()
- uid: ERC.ThreadInfo.GetTeb*
  name: GetTeb
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_GetTeb_
  commentId: Overload:ERC.ThreadInfo.GetTeb
  isSpec: "True"
  fullName: ERC.ThreadInfo.GetTeb
  nameWithType: ThreadInfo.GetTeb
- uid: ERC.ThreadInfo.ThreadHandle
  name: ThreadHandle
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ThreadHandle
  commentId: P:ERC.ThreadInfo.ThreadHandle
  fullName: ERC.ThreadInfo.ThreadHandle
  nameWithType: ThreadInfo.ThreadHandle
- uid: ERC.ThreadInfo.ThreadHandle*
  name: ThreadHandle
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ThreadHandle_
  commentId: Overload:ERC.ThreadInfo.ThreadHandle
  isSpec: "True"
  fullName: ERC.ThreadInfo.ThreadHandle
  nameWithType: ThreadInfo.ThreadHandle
- uid: ERC.ThreadInfo.ThreadID
  name: ThreadID
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ThreadID
  commentId: P:ERC.ThreadInfo.ThreadID
  fullName: ERC.ThreadInfo.ThreadID
  nameWithType: ThreadInfo.ThreadID
- uid: ERC.ThreadInfo.ThreadID*
  name: ThreadID
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ThreadID_
  commentId: Overload:ERC.ThreadInfo.ThreadID
  isSpec: "True"
  fullName: ERC.ThreadInfo.ThreadID
  nameWithType: ThreadInfo.ThreadID
- uid: ERC.ThreadInfo.ToString
  name: ToString()
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ToString
  commentId: M:ERC.ThreadInfo.ToString
  fullName: ERC.ThreadInfo.ToString()
  nameWithType: ThreadInfo.ToString()
- uid: ERC.ThreadInfo.ToString*
  name: ToString
  href: api/ERC.ThreadInfo.html#ERC_ThreadInfo_ToString_
  commentId: Overload:ERC.ThreadInfo.ToString
  isSpec: "True"
  fullName: ERC.ThreadInfo.ToString
  nameWithType: ThreadInfo.ToString
- uid: ERC.Utilities
  name: ERC.Utilities
  href: api/ERC.Utilities.html
  commentId: N:ERC.Utilities
  fullName: ERC.Utilities
  nameWithType: ERC.Utilities
- uid: ERC.Utilities.Convert
  name: Convert
  href: api/ERC.Utilities.Convert.html
  commentId: T:ERC.Utilities.Convert
  fullName: ERC.Utilities.Convert
  nameWithType: Convert
- uid: ERC.Utilities.Convert.AsciiToBytes(System.String)
  name: AsciiToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_AsciiToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.AsciiToBytes(System.String)
  fullName: ERC.Utilities.Convert.AsciiToBytes(System.String)
  nameWithType: Convert.AsciiToBytes(String)
- uid: ERC.Utilities.Convert.AsciiToBytes*
  name: AsciiToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_AsciiToBytes_
  commentId: Overload:ERC.Utilities.Convert.AsciiToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.AsciiToBytes
  nameWithType: Convert.AsciiToBytes
- uid: ERC.Utilities.Convert.AsciiToHex(System.String)
  name: AsciiToHex(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_AsciiToHex_System_String_
  commentId: M:ERC.Utilities.Convert.AsciiToHex(System.String)
  fullName: ERC.Utilities.Convert.AsciiToHex(System.String)
  nameWithType: Convert.AsciiToHex(String)
- uid: ERC.Utilities.Convert.AsciiToHex*
  name: AsciiToHex
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_AsciiToHex_
  commentId: Overload:ERC.Utilities.Convert.AsciiToHex
  isSpec: "True"
  fullName: ERC.Utilities.Convert.AsciiToHex
  nameWithType: Convert.AsciiToHex
- uid: ERC.Utilities.Convert.HexToAscii(System.String)
  name: HexToAscii(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_HexToAscii_System_String_
  commentId: M:ERC.Utilities.Convert.HexToAscii(System.String)
  fullName: ERC.Utilities.Convert.HexToAscii(System.String)
  nameWithType: Convert.HexToAscii(String)
- uid: ERC.Utilities.Convert.HexToAscii*
  name: HexToAscii
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_HexToAscii_
  commentId: Overload:ERC.Utilities.Convert.HexToAscii
  isSpec: "True"
  fullName: ERC.Utilities.Convert.HexToAscii
  nameWithType: Convert.HexToAscii
- uid: ERC.Utilities.Convert.HexToBytes(System.String)
  name: HexToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_HexToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.HexToBytes(System.String)
  fullName: ERC.Utilities.Convert.HexToBytes(System.String)
  nameWithType: Convert.HexToBytes(String)
- uid: ERC.Utilities.Convert.HexToBytes*
  name: HexToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_HexToBytes_
  commentId: Overload:ERC.Utilities.Convert.HexToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.HexToBytes
  nameWithType: Convert.HexToBytes
- uid: ERC.Utilities.Convert.UnicodeToBytes(System.String)
  name: UnicodeToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UnicodeToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.UnicodeToBytes(System.String)
  fullName: ERC.Utilities.Convert.UnicodeToBytes(System.String)
  nameWithType: Convert.UnicodeToBytes(String)
- uid: ERC.Utilities.Convert.UnicodeToBytes*
  name: UnicodeToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UnicodeToBytes_
  commentId: Overload:ERC.Utilities.Convert.UnicodeToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UnicodeToBytes
  nameWithType: Convert.UnicodeToBytes
- uid: ERC.Utilities.Convert.UnicodeToHex(System.String)
  name: UnicodeToHex(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UnicodeToHex_System_String_
  commentId: M:ERC.Utilities.Convert.UnicodeToHex(System.String)
  fullName: ERC.Utilities.Convert.UnicodeToHex(System.String)
  nameWithType: Convert.UnicodeToHex(String)
- uid: ERC.Utilities.Convert.UnicodeToHex*
  name: UnicodeToHex
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UnicodeToHex_
  commentId: Overload:ERC.Utilities.Convert.UnicodeToHex
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UnicodeToHex
  nameWithType: Convert.UnicodeToHex
- uid: ERC.Utilities.Convert.UTF32ToBytes(System.String)
  name: UTF32ToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF32ToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.UTF32ToBytes(System.String)
  fullName: ERC.Utilities.Convert.UTF32ToBytes(System.String)
  nameWithType: Convert.UTF32ToBytes(String)
- uid: ERC.Utilities.Convert.UTF32ToBytes*
  name: UTF32ToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF32ToBytes_
  commentId: Overload:ERC.Utilities.Convert.UTF32ToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF32ToBytes
  nameWithType: Convert.UTF32ToBytes
- uid: ERC.Utilities.Convert.UTF32ToHex(System.String)
  name: UTF32ToHex(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF32ToHex_System_String_
  commentId: M:ERC.Utilities.Convert.UTF32ToHex(System.String)
  fullName: ERC.Utilities.Convert.UTF32ToHex(System.String)
  nameWithType: Convert.UTF32ToHex(String)
- uid: ERC.Utilities.Convert.UTF32ToHex*
  name: UTF32ToHex
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF32ToHex_
  commentId: Overload:ERC.Utilities.Convert.UTF32ToHex
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF32ToHex
  nameWithType: Convert.UTF32ToHex
- uid: ERC.Utilities.Convert.UTF7ToBytes(System.String)
  name: UTF7ToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF7ToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.UTF7ToBytes(System.String)
  fullName: ERC.Utilities.Convert.UTF7ToBytes(System.String)
  nameWithType: Convert.UTF7ToBytes(String)
- uid: ERC.Utilities.Convert.UTF7ToBytes*
  name: UTF7ToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF7ToBytes_
  commentId: Overload:ERC.Utilities.Convert.UTF7ToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF7ToBytes
  nameWithType: Convert.UTF7ToBytes
- uid: ERC.Utilities.Convert.UTF7ToHex(System.String)
  name: UTF7ToHex(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF7ToHex_System_String_
  commentId: M:ERC.Utilities.Convert.UTF7ToHex(System.String)
  fullName: ERC.Utilities.Convert.UTF7ToHex(System.String)
  nameWithType: Convert.UTF7ToHex(String)
- uid: ERC.Utilities.Convert.UTF7ToHex*
  name: UTF7ToHex
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF7ToHex_
  commentId: Overload:ERC.Utilities.Convert.UTF7ToHex
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF7ToHex
  nameWithType: Convert.UTF7ToHex
- uid: ERC.Utilities.Convert.UTF8ToBytes(System.String)
  name: UTF8ToBytes(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF8ToBytes_System_String_
  commentId: M:ERC.Utilities.Convert.UTF8ToBytes(System.String)
  fullName: ERC.Utilities.Convert.UTF8ToBytes(System.String)
  nameWithType: Convert.UTF8ToBytes(String)
- uid: ERC.Utilities.Convert.UTF8ToBytes*
  name: UTF8ToBytes
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF8ToBytes_
  commentId: Overload:ERC.Utilities.Convert.UTF8ToBytes
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF8ToBytes
  nameWithType: Convert.UTF8ToBytes
- uid: ERC.Utilities.Convert.UTF8ToHex(System.String)
  name: UTF8ToHex(String)
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF8ToHex_System_String_
  commentId: M:ERC.Utilities.Convert.UTF8ToHex(System.String)
  fullName: ERC.Utilities.Convert.UTF8ToHex(System.String)
  nameWithType: Convert.UTF8ToHex(String)
- uid: ERC.Utilities.Convert.UTF8ToHex*
  name: UTF8ToHex
  href: api/ERC.Utilities.Convert.html#ERC_Utilities_Convert_UTF8ToHex_
  commentId: Overload:ERC.Utilities.Convert.UTF8ToHex
  isSpec: "True"
  fullName: ERC.Utilities.Convert.UTF8ToHex
  nameWithType: Convert.UTF8ToHex
- uid: ERC.Utilities.OpcodeAssembler
  name: OpcodeAssembler
  href: api/ERC.Utilities.OpcodeAssembler.html
  commentId: T:ERC.Utilities.OpcodeAssembler
  fullName: ERC.Utilities.OpcodeAssembler
  nameWithType: OpcodeAssembler
- uid: ERC.Utilities.OpcodeAssembler.#ctor(ERC.ProcessInfo)
  name: OpcodeAssembler(ProcessInfo)
  href: api/ERC.Utilities.OpcodeAssembler.html#ERC_Utilities_OpcodeAssembler__ctor_ERC_ProcessInfo_
  commentId: M:ERC.Utilities.OpcodeAssembler.#ctor(ERC.ProcessInfo)
  fullName: ERC.Utilities.OpcodeAssembler.OpcodeAssembler(ERC.ProcessInfo)
  nameWithType: OpcodeAssembler.OpcodeAssembler(ProcessInfo)
- uid: ERC.Utilities.OpcodeAssembler.#ctor*
  name: OpcodeAssembler
  href: api/ERC.Utilities.OpcodeAssembler.html#ERC_Utilities_OpcodeAssembler__ctor_
  commentId: Overload:ERC.Utilities.OpcodeAssembler.#ctor
  isSpec: "True"
  fullName: ERC.Utilities.OpcodeAssembler.OpcodeAssembler
  nameWithType: OpcodeAssembler.OpcodeAssembler
- uid: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String})
  name: AssembleOpcodes(List<String>)
  href: api/ERC.Utilities.OpcodeAssembler.html#ERC_Utilities_OpcodeAssembler_AssembleOpcodes_System_Collections_Generic_List_System_String__
  commentId: M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String})
  name.vb: AssembleOpcodes(List(Of String))
  fullName: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List(Of System.String))
  nameWithType: OpcodeAssembler.AssembleOpcodes(List<String>)
  nameWithType.vb: OpcodeAssembler.AssembleOpcodes(List(Of String))
- uid: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String},ERC.MachineType)
  name: AssembleOpcodes(List<String>, MachineType)
  href: api/ERC.Utilities.OpcodeAssembler.html#ERC_Utilities_OpcodeAssembler_AssembleOpcodes_System_Collections_Generic_List_System_String__ERC_MachineType_
  commentId: M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String},ERC.MachineType)
  name.vb: AssembleOpcodes(List(Of String), MachineType)
  fullName: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List<System.String>, ERC.MachineType)
  fullName.vb: ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List(Of System.String), ERC.MachineType)
  nameWithType: OpcodeAssembler.AssembleOpcodes(List<String>, MachineType)
  nameWithType.vb: OpcodeAssembler.AssembleOpcodes(List(Of String), MachineType)
- uid: ERC.Utilities.OpcodeAssembler.AssembleOpcodes*
  name: AssembleOpcodes
  href: api/ERC.Utilities.OpcodeAssembler.html#ERC_Utilities_OpcodeAssembler_AssembleOpcodes_
  commentId: Overload:ERC.Utilities.OpcodeAssembler.AssembleOpcodes
  isSpec: "True"
  fullName: ERC.Utilities.OpcodeAssembler.AssembleOpcodes
  nameWithType: OpcodeAssembler.AssembleOpcodes
- uid: ERC.Utilities.OpcodeDisassembler
  name: OpcodeDisassembler
  href: api/ERC.Utilities.OpcodeDisassembler.html
  commentId: T:ERC.Utilities.OpcodeDisassembler
  fullName: ERC.Utilities.OpcodeDisassembler
  nameWithType: OpcodeDisassembler
- uid: ERC.Utilities.OpcodeDisassembler.#ctor(ERC.ProcessInfo)
  name: OpcodeDisassembler(ProcessInfo)
  href: api/ERC.Utilities.OpcodeDisassembler.html#ERC_Utilities_OpcodeDisassembler__ctor_ERC_ProcessInfo_
  commentId: M:ERC.Utilities.OpcodeDisassembler.#ctor(ERC.ProcessInfo)
  fullName: ERC.Utilities.OpcodeDisassembler.OpcodeDisassembler(ERC.ProcessInfo)
  nameWithType: OpcodeDisassembler.OpcodeDisassembler(ProcessInfo)
- uid: ERC.Utilities.OpcodeDisassembler.#ctor*
  name: OpcodeDisassembler
  href: api/ERC.Utilities.OpcodeDisassembler.html#ERC_Utilities_OpcodeDisassembler__ctor_
  commentId: Overload:ERC.Utilities.OpcodeDisassembler.#ctor
  isSpec: "True"
  fullName: ERC.Utilities.OpcodeDisassembler.OpcodeDisassembler
  nameWithType: OpcodeDisassembler.OpcodeDisassembler
- uid: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])
  name: Disassemble(Byte[])
  href: api/ERC.Utilities.OpcodeDisassembler.html#ERC_Utilities_OpcodeDisassembler_Disassemble_System_Byte___
  commentId: M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])
  name.vb: Disassemble(Byte())
  fullName: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])
  fullName.vb: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte())
  nameWithType: OpcodeDisassembler.Disassemble(Byte[])
  nameWithType.vb: OpcodeDisassembler.Disassemble(Byte())
- uid: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType)
  name: Disassemble(Byte[], MachineType)
  href: api/ERC.Utilities.OpcodeDisassembler.html#ERC_Utilities_OpcodeDisassembler_Disassemble_System_Byte___ERC_MachineType_
  commentId: M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType)
  name.vb: Disassemble(Byte(), MachineType)
  fullName: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[], ERC.MachineType)
  fullName.vb: ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte(), ERC.MachineType)
  nameWithType: OpcodeDisassembler.Disassemble(Byte[], MachineType)
  nameWithType.vb: OpcodeDisassembler.Disassemble(Byte(), MachineType)
- uid: ERC.Utilities.OpcodeDisassembler.Disassemble*
  name: Disassemble
  href: api/ERC.Utilities.OpcodeDisassembler.html#ERC_Utilities_OpcodeDisassembler_Disassemble_
  commentId: Overload:ERC.Utilities.OpcodeDisassembler.Disassemble
  isSpec: "True"
  fullName: ERC.Utilities.OpcodeDisassembler.Disassemble
  nameWithType: OpcodeDisassembler.Disassemble
- uid: ERC.Utilities.PatternTools
  name: PatternTools
  href: api/ERC.Utilities.PatternTools.html
  commentId: T:ERC.Utilities.PatternTools
  fullName: ERC.Utilities.PatternTools
  nameWithType: PatternTools
- uid: ERC.Utilities.PatternTools.PatternCreate(System.Int32,ERC.ErcCore,System.Boolean)
  name: PatternCreate(Int32, ErcCore, Boolean)
  href: api/ERC.Utilities.PatternTools.html#ERC_Utilities_PatternTools_PatternCreate_System_Int32_ERC_ErcCore_System_Boolean_
  commentId: M:ERC.Utilities.PatternTools.PatternCreate(System.Int32,ERC.ErcCore,System.Boolean)
  fullName: ERC.Utilities.PatternTools.PatternCreate(System.Int32, ERC.ErcCore, System.Boolean)
  nameWithType: PatternTools.PatternCreate(Int32, ErcCore, Boolean)
- uid: ERC.Utilities.PatternTools.PatternCreate*
  name: PatternCreate
  href: api/ERC.Utilities.PatternTools.html#ERC_Utilities_PatternTools_PatternCreate_
  commentId: Overload:ERC.Utilities.PatternTools.PatternCreate
  isSpec: "True"
  fullName: ERC.Utilities.PatternTools.PatternCreate
  nameWithType: PatternTools.PatternCreate
- uid: ERC.Utilities.PatternTools.PatternOffset(System.String,ERC.ErcCore,System.Boolean)
  name: PatternOffset(String, ErcCore, Boolean)
  href: api/ERC.Utilities.PatternTools.html#ERC_Utilities_PatternTools_PatternOffset_System_String_ERC_ErcCore_System_Boolean_
  commentId: M:ERC.Utilities.PatternTools.PatternOffset(System.String,ERC.ErcCore,System.Boolean)
  fullName: ERC.Utilities.PatternTools.PatternOffset(System.String, ERC.ErcCore, System.Boolean)
  nameWithType: PatternTools.PatternOffset(String, ErcCore, Boolean)
- uid: ERC.Utilities.PatternTools.PatternOffset*
  name: PatternOffset
  href: api/ERC.Utilities.PatternTools.html#ERC_Utilities_PatternTools_PatternOffset_
  commentId: Overload:ERC.Utilities.PatternTools.PatternOffset
  isSpec: "True"
  fullName: ERC.Utilities.PatternTools.PatternOffset
  nameWithType: PatternTools.PatternOffset
- uid: ERC.Utilities.Payloads
  name: Payloads
  href: api/ERC.Utilities.Payloads.html
  commentId: T:ERC.Utilities.Payloads
  fullName: ERC.Utilities.Payloads
  nameWithType: Payloads
- uid: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  name: ByteArrayConstructor(Byte[])
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_ByteArrayConstructor_System_Byte___
  commentId: M:ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  name.vb: ByteArrayConstructor(Byte())
  fullName: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  fullName.vb: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte())
  nameWithType: Payloads.ByteArrayConstructor(Byte[])
  nameWithType.vb: Payloads.ByteArrayConstructor(Byte())
- uid: ERC.Utilities.Payloads.ByteArrayConstructor*
  name: ByteArrayConstructor
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_ByteArrayConstructor_
  commentId: Overload:ERC.Utilities.Payloads.ByteArrayConstructor
  isSpec: "True"
  fullName: ERC.Utilities.Payloads.ByteArrayConstructor
  nameWithType: Payloads.ByteArrayConstructor
- uid: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  name: ByteCompare(ProcessInfo, IntPtr, Byte[])
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_ByteCompare_ERC_ProcessInfo_System_IntPtr_System_Byte___
  commentId: M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  name.vb: ByteCompare(ProcessInfo, IntPtr, Byte())
  fullName: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.Byte[])
  fullName.vb: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.Byte())
  nameWithType: Payloads.ByteCompare(ProcessInfo, IntPtr, Byte[])
  nameWithType.vb: Payloads.ByteCompare(ProcessInfo, IntPtr, Byte())
- uid: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  name: ByteCompare(ProcessInfo, IntPtr, String)
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_ByteCompare_ERC_ProcessInfo_System_IntPtr_System_String_
  commentId: M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  fullName: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.String)
  nameWithType: Payloads.ByteCompare(ProcessInfo, IntPtr, String)
- uid: ERC.Utilities.Payloads.ByteCompare*
  name: ByteCompare
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_ByteCompare_
  commentId: Overload:ERC.Utilities.Payloads.ByteCompare
  isSpec: "True"
  fullName: ERC.Utilities.Payloads.ByteCompare
  nameWithType: Payloads.ByteCompare
- uid: ERC.Utilities.Payloads.DefaultEgg
  name: DefaultEgg
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_DefaultEgg
  commentId: F:ERC.Utilities.Payloads.DefaultEgg
  fullName: ERC.Utilities.Payloads.DefaultEgg
  nameWithType: Payloads.DefaultEgg
- uid: ERC.Utilities.Payloads.EggHunter32
  name: EggHunter32
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunter32
  commentId: F:ERC.Utilities.Payloads.EggHunter32
  fullName: ERC.Utilities.Payloads.EggHunter32
  nameWithType: Payloads.EggHunter32
- uid: ERC.Utilities.Payloads.EggHunter641
  name: EggHunter641
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunter641
  commentId: F:ERC.Utilities.Payloads.EggHunter641
  fullName: ERC.Utilities.Payloads.EggHunter641
  nameWithType: Payloads.EggHunter641
- uid: ERC.Utilities.Payloads.EggHunter642
  name: EggHunter642
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunter642
  commentId: F:ERC.Utilities.Payloads.EggHunter642
  fullName: ERC.Utilities.Payloads.EggHunter642
  nameWithType: Payloads.EggHunter642
- uid: ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  name: EggHunterConstructor(String)
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunterConstructor_System_String_
  commentId: M:ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  fullName: ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  nameWithType: Payloads.EggHunterConstructor(String)
- uid: ERC.Utilities.Payloads.EggHunterConstructor*
  name: EggHunterConstructor
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunterConstructor_
  commentId: Overload:ERC.Utilities.Payloads.EggHunterConstructor
  isSpec: "True"
  fullName: ERC.Utilities.Payloads.EggHunterConstructor
  nameWithType: Payloads.EggHunterConstructor
- uid: ERC.Utilities.Payloads.EggHunterWOW64
  name: EggHunterWOW64
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_EggHunterWOW64
  commentId: F:ERC.Utilities.Payloads.EggHunterWOW64
  fullName: ERC.Utilities.Payloads.EggHunterWOW64
  nameWithType: Payloads.EggHunterWOW64
- uid: ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  name: PopPopRet(Byte[])
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_PopPopRet_System_Byte___
  commentId: M:ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  name.vb: PopPopRet(Byte())
  fullName: ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  fullName.vb: ERC.Utilities.Payloads.PopPopRet(System.Byte())
  nameWithType: Payloads.PopPopRet(Byte[])
  nameWithType.vb: Payloads.PopPopRet(Byte())
- uid: ERC.Utilities.Payloads.PopPopRet*
  name: PopPopRet
  href: api/ERC.Utilities.Payloads.html#ERC_Utilities_Payloads_PopPopRet_
  commentId: Overload:ERC.Utilities.Payloads.PopPopRet
  isSpec: "True"
  fullName: ERC.Utilities.Payloads.PopPopRet
  nameWithType: Payloads.PopPopRet
- uid: ERC.Utilities.PtrRemover
  name: PtrRemover
  href: api/ERC.Utilities.PtrRemover.html
  commentId: T:ERC.Utilities.PtrRemover
  fullName: ERC.Utilities.PtrRemover
  nameWithType: PtrRemover
- uid: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.Dictionary{System.IntPtr,System.String},System.Byte[])
  name: RemovePointers(MachineType, Dictionary<IntPtr, String>, Byte[])
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointers_ERC_MachineType_System_Collections_Generic_Dictionary_System_IntPtr_System_String__System_Byte___
  commentId: M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.Dictionary{System.IntPtr,System.String},System.Byte[])
  name.vb: RemovePointers(MachineType, Dictionary(Of IntPtr, String), Byte())
  fullName: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType, System.Collections.Generic.Dictionary<System.IntPtr, System.String>, System.Byte[])
  fullName.vb: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType, System.Collections.Generic.Dictionary(Of System.IntPtr, System.String), System.Byte())
  nameWithType: PtrRemover.RemovePointers(MachineType, Dictionary<IntPtr, String>, Byte[])
  nameWithType.vb: PtrRemover.RemovePointers(MachineType, Dictionary(Of IntPtr, String), Byte())
- uid: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.List{System.IntPtr},System.Byte[])
  name: RemovePointers(MachineType, List<IntPtr>, Byte[])
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointers_ERC_MachineType_System_Collections_Generic_List_System_IntPtr__System_Byte___
  commentId: M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.List{System.IntPtr},System.Byte[])
  name.vb: RemovePointers(MachineType, List(Of IntPtr), Byte())
  fullName: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType, System.Collections.Generic.List<System.IntPtr>, System.Byte[])
  fullName.vb: ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType, System.Collections.Generic.List(Of System.IntPtr), System.Byte())
  nameWithType: PtrRemover.RemovePointers(MachineType, List<IntPtr>, Byte[])
  nameWithType.vb: PtrRemover.RemovePointers(MachineType, List(Of IntPtr), Byte())
- uid: ERC.Utilities.PtrRemover.RemovePointers*
  name: RemovePointers
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointers_
  commentId: Overload:ERC.Utilities.PtrRemover.RemovePointers
  isSpec: "True"
  fullName: ERC.Utilities.PtrRemover.RemovePointers
  nameWithType: PtrRemover.RemovePointers
- uid: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.String)
  name: RemovePointersProtection(ProcessInfo, List<IntPtr>, String)
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointersProtection_ERC_ProcessInfo_System_Collections_Generic_List_System_IntPtr__System_String_
  commentId: M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.String)
  name.vb: RemovePointersProtection(ProcessInfo, List(Of IntPtr), String)
  fullName: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo, System.Collections.Generic.List<System.IntPtr>, System.String)
  fullName.vb: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo, System.Collections.Generic.List(Of System.IntPtr), System.String)
  nameWithType: PtrRemover.RemovePointersProtection(ProcessInfo, List<IntPtr>, String)
  nameWithType.vb: PtrRemover.RemovePointersProtection(ProcessInfo, List(Of IntPtr), String)
- uid: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.UInt32)
  name: RemovePointersProtection(ProcessInfo, List<IntPtr>, UInt32)
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointersProtection_ERC_ProcessInfo_System_Collections_Generic_List_System_IntPtr__System_UInt32_
  commentId: M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.UInt32)
  name.vb: RemovePointersProtection(ProcessInfo, List(Of IntPtr), UInt32)
  fullName: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo, System.Collections.Generic.List<System.IntPtr>, System.UInt32)
  fullName.vb: ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo, System.Collections.Generic.List(Of System.IntPtr), System.UInt32)
  nameWithType: PtrRemover.RemovePointersProtection(ProcessInfo, List<IntPtr>, UInt32)
  nameWithType.vb: PtrRemover.RemovePointersProtection(ProcessInfo, List(Of IntPtr), UInt32)
- uid: ERC.Utilities.PtrRemover.RemovePointersProtection*
  name: RemovePointersProtection
  href: api/ERC.Utilities.PtrRemover.html#ERC_Utilities_PtrRemover_RemovePointersProtection_
  commentId: Overload:ERC.Utilities.PtrRemover.RemovePointersProtection
  isSpec: "True"
  fullName: ERC.Utilities.PtrRemover.RemovePointersProtection
  nameWithType: PtrRemover.RemovePointersProtection
- uid: ERC.Utilities.RopChainGenerator32
  name: RopChainGenerator32
  href: api/ERC.Utilities.RopChainGenerator32.html
  commentId: T:ERC.Utilities.RopChainGenerator32
  fullName: ERC.Utilities.RopChainGenerator32
  nameWithType: RopChainGenerator32
- uid: ERC.Utilities.RopChainGenerator32.#ctor(ERC.ProcessInfo)
  name: RopChainGenerator32(ProcessInfo)
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32__ctor_ERC_ProcessInfo_
  commentId: M:ERC.Utilities.RopChainGenerator32.#ctor(ERC.ProcessInfo)
  fullName: ERC.Utilities.RopChainGenerator32.RopChainGenerator32(ERC.ProcessInfo)
  nameWithType: RopChainGenerator32.RopChainGenerator32(ProcessInfo)
- uid: ERC.Utilities.RopChainGenerator32.#ctor*
  name: RopChainGenerator32
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32__ctor_
  commentId: Overload:ERC.Utilities.RopChainGenerator32.#ctor
  isSpec: "True"
  fullName: ERC.Utilities.RopChainGenerator32.RopChainGenerator32
  nameWithType: RopChainGenerator32.RopChainGenerator32
- uid: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})
  name: GenerateRopChain32(Byte[], Byte[], List<String>)
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32_GenerateRopChain32_System_Byte___System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: GenerateRopChain32(Byte(), Byte(), List(Of String))
  fullName: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[], System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte(), System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: RopChainGenerator32.GenerateRopChain32(Byte[], Byte[], List<String>)
  nameWithType.vb: RopChainGenerator32.GenerateRopChain32(Byte(), Byte(), List(Of String))
- uid: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Collections.Generic.List{System.String})
  name: GenerateRopChain32(Byte[], List<String>)
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32_GenerateRopChain32_System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: GenerateRopChain32(Byte(), List(Of String))
  fullName: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: RopChainGenerator32.GenerateRopChain32(Byte[], List<String>)
  nameWithType.vb: RopChainGenerator32.GenerateRopChain32(Byte(), List(Of String))
- uid: ERC.Utilities.RopChainGenerator32.GenerateRopChain32*
  name: GenerateRopChain32
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32_GenerateRopChain32_
  commentId: Overload:ERC.Utilities.RopChainGenerator32.GenerateRopChain32
  isSpec: "True"
  fullName: ERC.Utilities.RopChainGenerator32.GenerateRopChain32
  nameWithType: RopChainGenerator32.GenerateRopChain32
- uid: ERC.Utilities.RopChainGenerator32.VirtualAllocChain
  name: VirtualAllocChain
  href: api/ERC.Utilities.RopChainGenerator32.html#ERC_Utilities_RopChainGenerator32_VirtualAllocChain
  commentId: F:ERC.Utilities.RopChainGenerator32.VirtualAllocChain
  fullName: ERC.Utilities.RopChainGenerator32.VirtualAllocChain
  nameWithType: RopChainGenerator32.VirtualAllocChain
- uid: ERC.Utilities.RopChainGenerator32.X86Lists
  name: RopChainGenerator32.X86Lists
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html
  commentId: T:ERC.Utilities.RopChainGenerator32.X86Lists
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists
  nameWithType: RopChainGenerator32.X86Lists
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.add
  name: add
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_add
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.add
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.add
  nameWithType: RopChainGenerator32.X86Lists.add
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.and
  name: and
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_and
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.and
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.and
  nameWithType: RopChainGenerator32.X86Lists.and
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.callEsp
  name: callEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_callEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.callEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.callEsp
  nameWithType: RopChainGenerator32.X86Lists.callEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEax
  name: decEax
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEax
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEax
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEax
  nameWithType: RopChainGenerator32.X86Lists.decEax
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEbp
  name: decEbp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEbp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEbp
  nameWithType: RopChainGenerator32.X86Lists.decEbp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEbx
  name: decEbx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEbx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEbx
  nameWithType: RopChainGenerator32.X86Lists.decEbx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEcx
  name: decEcx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEcx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEcx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEcx
  nameWithType: RopChainGenerator32.X86Lists.decEcx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEdi
  name: decEdi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEdi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEdi
  nameWithType: RopChainGenerator32.X86Lists.decEdi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEdx
  name: decEdx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEdx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEdx
  nameWithType: RopChainGenerator32.X86Lists.decEdx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEsi
  name: decEsi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEsi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEsi
  nameWithType: RopChainGenerator32.X86Lists.decEsi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.decEsp
  name: decEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_decEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.decEsp
  nameWithType: RopChainGenerator32.X86Lists.decEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEax
  name: incEax
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEax
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEax
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEax
  nameWithType: RopChainGenerator32.X86Lists.incEax
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEbp
  name: incEbp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEbp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEbp
  nameWithType: RopChainGenerator32.X86Lists.incEbp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEbx
  name: incEbx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEbx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEbx
  nameWithType: RopChainGenerator32.X86Lists.incEbx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEcx
  name: incEcx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEcx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEcx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEcx
  nameWithType: RopChainGenerator32.X86Lists.incEcx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEdi
  name: incEdi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEdi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEdi
  nameWithType: RopChainGenerator32.X86Lists.incEdi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEdx
  name: incEdx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEdx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEdx
  nameWithType: RopChainGenerator32.X86Lists.incEdx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEsi
  name: incEsi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEsi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEsi
  nameWithType: RopChainGenerator32.X86Lists.incEsi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.incEsp
  name: incEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_incEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.incEsp
  nameWithType: RopChainGenerator32.X86Lists.incEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp
  name: jmpEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_jmpEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp
  nameWithType: RopChainGenerator32.X86Lists.jmpEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.mov
  name: mov
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_mov
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.mov
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.mov
  nameWithType: RopChainGenerator32.X86Lists.mov
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEax
  name: popEax
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEax
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEax
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEax
  nameWithType: RopChainGenerator32.X86Lists.popEax
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEbp
  name: popEbp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEbp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEbp
  nameWithType: RopChainGenerator32.X86Lists.popEbp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEbx
  name: popEbx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEbx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEbx
  nameWithType: RopChainGenerator32.X86Lists.popEbx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEcx
  name: popEcx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEcx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEcx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEcx
  nameWithType: RopChainGenerator32.X86Lists.popEcx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEdi
  name: popEdi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEdi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEdi
  nameWithType: RopChainGenerator32.X86Lists.popEdi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEdx
  name: popEdx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEdx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEdx
  nameWithType: RopChainGenerator32.X86Lists.popEdx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEsi
  name: popEsi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEsi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEsi
  nameWithType: RopChainGenerator32.X86Lists.popEsi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.popEsp
  name: popEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_popEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.popEsp
  nameWithType: RopChainGenerator32.X86Lists.popEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushad
  name: pushad
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushad
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushad
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushad
  nameWithType: RopChainGenerator32.X86Lists.pushad
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEax
  name: pushEax
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEax
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEax
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEax
  nameWithType: RopChainGenerator32.X86Lists.pushEax
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp
  name: pushEbp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEbp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp
  nameWithType: RopChainGenerator32.X86Lists.pushEbp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx
  name: pushEbx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEbx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx
  nameWithType: RopChainGenerator32.X86Lists.pushEbx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx
  name: pushEcx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEcx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx
  nameWithType: RopChainGenerator32.X86Lists.pushEcx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi
  name: pushEdi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEdi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi
  nameWithType: RopChainGenerator32.X86Lists.pushEdi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx
  name: pushEdx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEdx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx
  nameWithType: RopChainGenerator32.X86Lists.pushEdx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi
  name: pushEsi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEsi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi
  nameWithType: RopChainGenerator32.X86Lists.pushEsi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp
  name: pushEsp
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_pushEsp
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp
  nameWithType: RopChainGenerator32.X86Lists.pushEsp
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.sub
  name: sub
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_sub
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.sub
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.sub
  nameWithType: RopChainGenerator32.X86Lists.sub
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEax
  name: xorEax
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEax
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEax
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEax
  nameWithType: RopChainGenerator32.X86Lists.xorEax
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx
  name: xorEbx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEbx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx
  nameWithType: RopChainGenerator32.X86Lists.xorEbx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx
  name: xorEcx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEcx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx
  nameWithType: RopChainGenerator32.X86Lists.xorEcx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi
  name: xorEdi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEdi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi
  nameWithType: RopChainGenerator32.X86Lists.xorEdi
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx
  name: xorEdx
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEdx
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx
  nameWithType: RopChainGenerator32.X86Lists.xorEdx
- uid: ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi
  name: xorEsi
  href: api/ERC.Utilities.RopChainGenerator32.X86Lists.html#ERC_Utilities_RopChainGenerator32_X86Lists_xorEsi
  commentId: F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi
  fullName: ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi
  nameWithType: RopChainGenerator32.X86Lists.xorEsi
- uid: ERC.Utilities.RopChainGenerator64
  name: RopChainGenerator64
  href: api/ERC.Utilities.RopChainGenerator64.html
  commentId: T:ERC.Utilities.RopChainGenerator64
  fullName: ERC.Utilities.RopChainGenerator64
  nameWithType: RopChainGenerator64
- uid: ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)
  name: RopChainGenerator64(ProcessInfo)
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64__ctor_ERC_ProcessInfo_
  commentId: M:ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)
  fullName: ERC.Utilities.RopChainGenerator64.RopChainGenerator64(ERC.ProcessInfo)
  nameWithType: RopChainGenerator64.RopChainGenerator64(ProcessInfo)
- uid: ERC.Utilities.RopChainGenerator64.#ctor*
  name: RopChainGenerator64
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64__ctor_
  commentId: Overload:ERC.Utilities.RopChainGenerator64.#ctor
  isSpec: "True"
  fullName: ERC.Utilities.RopChainGenerator64.RopChainGenerator64
  nameWithType: RopChainGenerator64.RopChainGenerator64
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})
  name: GenerateRopChain64(Byte[], Byte[], List<String>)
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64_GenerateRopChain64_System_Byte___System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: GenerateRopChain64(Byte(), Byte(), List(Of String))
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[], System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte(), System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: RopChainGenerator64.GenerateRopChain64(Byte[], Byte[], List<String>)
  nameWithType.vb: RopChainGenerator64.GenerateRopChain64(Byte(), Byte(), List(Of String))
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String})
  name: GenerateRopChain64(Byte[], List<String>)
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64_GenerateRopChain64_System_Byte___System_Collections_Generic_List_System_String__
  commentId: M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String})
  name.vb: GenerateRopChain64(Byte(), List(Of String))
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[], System.Collections.Generic.List<System.String>)
  fullName.vb: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte(), System.Collections.Generic.List(Of System.String))
  nameWithType: RopChainGenerator64.GenerateRopChain64(Byte[], List<String>)
  nameWithType.vb: RopChainGenerator64.GenerateRopChain64(Byte(), List(Of String))
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64*
  name: GenerateRopChain64
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64_GenerateRopChain64_
  commentId: Overload:ERC.Utilities.RopChainGenerator64.GenerateRopChain64
  isSpec: "True"
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64
  nameWithType: RopChainGenerator64.GenerateRopChain64
- uid: ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  name: VirtualAllocChain
  href: api/ERC.Utilities.RopChainGenerator64.html#ERC_Utilities_RopChainGenerator64_VirtualAllocChain
  commentId: F:ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  fullName: ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  nameWithType: RopChainGenerator64.VirtualAllocChain
- uid: ERC.Utilities.RopChainGenerator64.X64Lists
  name: RopChainGenerator64.X64Lists
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html
  commentId: T:ERC.Utilities.RopChainGenerator64.X64Lists
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists
  nameWithType: RopChainGenerator64.X64Lists
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.add
  name: add
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_add
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.add
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.add
  nameWithType: RopChainGenerator64.X64Lists.add
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.callRsp
  name: callRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_callRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.callRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.callRsp
  nameWithType: RopChainGenerator64.X64Lists.callRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR10
  name: decR10
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR10
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR10
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR10
  nameWithType: RopChainGenerator64.X64Lists.decR10
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR11
  name: decR11
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR11
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR11
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR11
  nameWithType: RopChainGenerator64.X64Lists.decR11
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR12
  name: decR12
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR12
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR12
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR12
  nameWithType: RopChainGenerator64.X64Lists.decR12
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR13
  name: decR13
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR13
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR13
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR13
  nameWithType: RopChainGenerator64.X64Lists.decR13
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR14
  name: decR14
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR14
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR14
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR14
  nameWithType: RopChainGenerator64.X64Lists.decR14
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR15
  name: decR15
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR15
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR15
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR15
  nameWithType: RopChainGenerator64.X64Lists.decR15
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR8
  name: decR8
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR8
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR8
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR8
  nameWithType: RopChainGenerator64.X64Lists.decR8
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decR9
  name: decR9
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decR9
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decR9
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decR9
  nameWithType: RopChainGenerator64.X64Lists.decR9
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRax
  name: decRax
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRax
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRax
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRax
  nameWithType: RopChainGenerator64.X64Lists.decRax
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRbp
  name: decRbp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRbp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRbp
  nameWithType: RopChainGenerator64.X64Lists.decRbp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRbx
  name: decRbx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRbx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRbx
  nameWithType: RopChainGenerator64.X64Lists.decRbx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRcx
  name: decRcx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRcx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRcx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRcx
  nameWithType: RopChainGenerator64.X64Lists.decRcx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRdi
  name: decRdi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRdi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRdi
  nameWithType: RopChainGenerator64.X64Lists.decRdi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRdx
  name: decRdx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRdx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRdx
  nameWithType: RopChainGenerator64.X64Lists.decRdx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRsi
  name: decRsi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRsi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRsi
  nameWithType: RopChainGenerator64.X64Lists.decRsi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.decRsp
  name: decRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_decRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.decRsp
  nameWithType: RopChainGenerator64.X64Lists.decRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR10
  name: incR10
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR10
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR10
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR10
  nameWithType: RopChainGenerator64.X64Lists.incR10
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR11
  name: incR11
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR11
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR11
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR11
  nameWithType: RopChainGenerator64.X64Lists.incR11
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR12
  name: incR12
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR12
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR12
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR12
  nameWithType: RopChainGenerator64.X64Lists.incR12
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR13
  name: incR13
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR13
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR13
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR13
  nameWithType: RopChainGenerator64.X64Lists.incR13
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR14
  name: incR14
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR14
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR14
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR14
  nameWithType: RopChainGenerator64.X64Lists.incR14
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR15
  name: incR15
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR15
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR15
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR15
  nameWithType: RopChainGenerator64.X64Lists.incR15
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR8
  name: incR8
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR8
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR8
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR8
  nameWithType: RopChainGenerator64.X64Lists.incR8
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incR9
  name: incR9
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incR9
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incR9
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incR9
  nameWithType: RopChainGenerator64.X64Lists.incR9
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRax
  name: incRax
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRax
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRax
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRax
  nameWithType: RopChainGenerator64.X64Lists.incRax
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRbp
  name: incRbp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRbp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRbp
  nameWithType: RopChainGenerator64.X64Lists.incRbp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRbx
  name: incRbx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRbx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRbx
  nameWithType: RopChainGenerator64.X64Lists.incRbx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRcx
  name: incRcx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRcx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRcx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRcx
  nameWithType: RopChainGenerator64.X64Lists.incRcx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRdi
  name: incRdi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRdi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRdi
  nameWithType: RopChainGenerator64.X64Lists.incRdi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRdx
  name: incRdx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRdx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRdx
  nameWithType: RopChainGenerator64.X64Lists.incRdx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRsi
  name: incRsi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRsi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRsi
  nameWithType: RopChainGenerator64.X64Lists.incRsi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.incRsp
  name: incRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_incRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.incRsp
  nameWithType: RopChainGenerator64.X64Lists.incRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp
  name: jmpRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_jmpRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp
  nameWithType: RopChainGenerator64.X64Lists.jmpRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.mov
  name: mov
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_mov
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.mov
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.mov
  nameWithType: RopChainGenerator64.X64Lists.mov
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR10
  name: popR10
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR10
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR10
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR10
  nameWithType: RopChainGenerator64.X64Lists.popR10
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR11
  name: popR11
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR11
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR11
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR11
  nameWithType: RopChainGenerator64.X64Lists.popR11
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR12
  name: popR12
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR12
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR12
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR12
  nameWithType: RopChainGenerator64.X64Lists.popR12
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR13
  name: popR13
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR13
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR13
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR13
  nameWithType: RopChainGenerator64.X64Lists.popR13
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR14
  name: popR14
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR14
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR14
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR14
  nameWithType: RopChainGenerator64.X64Lists.popR14
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR15
  name: popR15
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR15
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR15
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR15
  nameWithType: RopChainGenerator64.X64Lists.popR15
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR8
  name: popR8
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR8
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR8
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR8
  nameWithType: RopChainGenerator64.X64Lists.popR8
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popR9
  name: popR9
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popR9
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popR9
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popR9
  nameWithType: RopChainGenerator64.X64Lists.popR9
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRax
  name: popRax
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRax
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRax
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRax
  nameWithType: RopChainGenerator64.X64Lists.popRax
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRbp
  name: popRbp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRbp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRbp
  nameWithType: RopChainGenerator64.X64Lists.popRbp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRbx
  name: popRbx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRbx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRbx
  nameWithType: RopChainGenerator64.X64Lists.popRbx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRcx
  name: popRcx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRcx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRcx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRcx
  nameWithType: RopChainGenerator64.X64Lists.popRcx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRdi
  name: popRdi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRdi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRdi
  nameWithType: RopChainGenerator64.X64Lists.popRdi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRdx
  name: popRdx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRdx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRdx
  nameWithType: RopChainGenerator64.X64Lists.popRdx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRsi
  name: popRsi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRsi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRsi
  nameWithType: RopChainGenerator64.X64Lists.popRsi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.popRsp
  name: popRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_popRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.popRsp
  nameWithType: RopChainGenerator64.X64Lists.popRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR10
  name: pushR10
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR10
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR10
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR10
  nameWithType: RopChainGenerator64.X64Lists.pushR10
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR11
  name: pushR11
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR11
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR11
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR11
  nameWithType: RopChainGenerator64.X64Lists.pushR11
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR12
  name: pushR12
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR12
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR12
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR12
  nameWithType: RopChainGenerator64.X64Lists.pushR12
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR13
  name: pushR13
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR13
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR13
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR13
  nameWithType: RopChainGenerator64.X64Lists.pushR13
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR14
  name: pushR14
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR14
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR14
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR14
  nameWithType: RopChainGenerator64.X64Lists.pushR14
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR15
  name: pushR15
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR15
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR15
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR15
  nameWithType: RopChainGenerator64.X64Lists.pushR15
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR8
  name: pushR8
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR8
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR8
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR8
  nameWithType: RopChainGenerator64.X64Lists.pushR8
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushR9
  name: pushR9
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushR9
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR9
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushR9
  nameWithType: RopChainGenerator64.X64Lists.pushR9
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRax
  name: pushRax
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRax
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRax
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRax
  nameWithType: RopChainGenerator64.X64Lists.pushRax
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp
  name: pushRbp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRbp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp
  nameWithType: RopChainGenerator64.X64Lists.pushRbp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx
  name: pushRbx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRbx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx
  nameWithType: RopChainGenerator64.X64Lists.pushRbx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx
  name: pushRcx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRcx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx
  nameWithType: RopChainGenerator64.X64Lists.pushRcx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi
  name: pushRdi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRdi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi
  nameWithType: RopChainGenerator64.X64Lists.pushRdi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx
  name: pushRdx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRdx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx
  nameWithType: RopChainGenerator64.X64Lists.pushRdx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi
  name: pushRsi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRsi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi
  nameWithType: RopChainGenerator64.X64Lists.pushRsi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp
  name: pushRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_pushRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp
  nameWithType: RopChainGenerator64.X64Lists.pushRsp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.sub
  name: sub
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_sub
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.sub
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.sub
  nameWithType: RopChainGenerator64.X64Lists.sub
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR10
  name: xorR10
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR10
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR10
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR10
  nameWithType: RopChainGenerator64.X64Lists.xorR10
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR11
  name: xorR11
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR11
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR11
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR11
  nameWithType: RopChainGenerator64.X64Lists.xorR11
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR12
  name: xorR12
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR12
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR12
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR12
  nameWithType: RopChainGenerator64.X64Lists.xorR12
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR13
  name: xorR13
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR13
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR13
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR13
  nameWithType: RopChainGenerator64.X64Lists.xorR13
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR14
  name: xorR14
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR14
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR14
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR14
  nameWithType: RopChainGenerator64.X64Lists.xorR14
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR15
  name: xorR15
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR15
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR15
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR15
  nameWithType: RopChainGenerator64.X64Lists.xorR15
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR8
  name: xorR8
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR8
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR8
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR8
  nameWithType: RopChainGenerator64.X64Lists.xorR8
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorR9
  name: xorR9
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorR9
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR9
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorR9
  nameWithType: RopChainGenerator64.X64Lists.xorR9
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRax
  name: xorRax
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRax
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRax
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRax
  nameWithType: RopChainGenerator64.X64Lists.xorRax
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp
  name: xorRbp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRbp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp
  nameWithType: RopChainGenerator64.X64Lists.xorRbp
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx
  name: xorRbx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRbx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx
  nameWithType: RopChainGenerator64.X64Lists.xorRbx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx
  name: xorRcx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRcx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx
  nameWithType: RopChainGenerator64.X64Lists.xorRcx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi
  name: xorRdi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRdi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi
  nameWithType: RopChainGenerator64.X64Lists.xorRdi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx
  name: xorRdx
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRdx
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx
  nameWithType: RopChainGenerator64.X64Lists.xorRdx
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi
  name: xorRsi
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRsi
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi
  nameWithType: RopChainGenerator64.X64Lists.xorRsi
- uid: ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp
  name: xorRsp
  href: api/ERC.Utilities.RopChainGenerator64.X64Lists.html#ERC_Utilities_RopChainGenerator64_X64Lists_xorRsp
  commentId: F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp
  fullName: ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp
  nameWithType: RopChainGenerator64.X64Lists.xorRsp



================================================
File: ERC/docs/api/ERC.DisplayOutput.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class DisplayOutput
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class DisplayOutput
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.DisplayOutput">
  
  
  <h1 id="ERC_DisplayOutput" data-uid="ERC.DisplayOutput" class="text-break">Class DisplayOutput
  </h1>
  <div class="markdown level0 summary"><p>Provides output in various human readable formats of data from the library.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">DisplayOutput</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_DisplayOutput_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class DisplayOutput</code></pre>
  </div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_DisplayOutput_AssembleOpcodes_" data-uid="ERC.DisplayOutput.AssembleOpcodes*"></a>
  <h4 id="ERC_DisplayOutput_AssembleOpcodes_System_String___ERC_MachineType_" data-uid="ERC.DisplayOutput.AssembleOpcodes(System.String[],ERC.MachineType)">AssembleOpcodes(String[], MachineType)</h4>
  <div class="markdown level1 summary"><p>Converts a collection of instructions into the associated opcodes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string[] AssembleOpcodes(string[] instructions, MachineType machine)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">instructions</span></td>
        <td><p>An array containing either x86 or x64 instructions.</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">machine</span></td>
        <td><p>MachineType of the instruction set to be assembled.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><p>Returns null if the method fails.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_AssembleOpcodes_" data-uid="ERC.DisplayOutput.AssembleOpcodes*"></a>
  <h4 id="ERC_DisplayOutput_AssembleOpcodes_System_String___System_UInt32_" data-uid="ERC.DisplayOutput.AssembleOpcodes(System.String[],System.UInt32)">AssembleOpcodes(String[], UInt32)</h4>
  <div class="markdown level1 summary"><p>Converts a collection of instructions into the associated opcodes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string[] AssembleOpcodes(string[] instructions, uint machine)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">instructions</span></td>
        <td><p>An array containing either x86 or x64 instructions.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td><span class="parametername">machine</span></td>
        <td><p>Uint representing the machine type (x86 = 0, x64 = 1)</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><p>Returns null if the method fails.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_CompareByteArrayToMemoryRegion_" data-uid="ERC.DisplayOutput.CompareByteArrayToMemoryRegion*"></a>
  <h4 id="ERC_DisplayOutput_CompareByteArrayToMemoryRegion_ERC_ProcessInfo_System_IntPtr_System_Byte___" data-uid="ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo,System.IntPtr,System.Byte[])">CompareByteArrayToMemoryRegion(ProcessInfo, IntPtr, Byte[])</h4>
  <div class="markdown level1 summary"><p>Compares a the values contained in a memory region to the values in the supplied byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string[] CompareByteArrayToMemoryRegion(ProcessInfo info, IntPtr startAddress, byte[] byteArray)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The processInfo object that contains the memory region.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>The memory address to start the search at.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">byteArray</span></td>
        <td><p>The byte array the region will be compared against.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><p>Returns a string detailing differences between the two.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_DisassembleOpcodes_" data-uid="ERC.DisplayOutput.DisassembleOpcodes*"></a>
  <h4 id="ERC_DisplayOutput_DisassembleOpcodes_System_Byte___ERC_MachineType_" data-uid="ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],ERC.MachineType)">DisassembleOpcodes(Byte[], MachineType)</h4>
  <div class="markdown level1 summary"><p>Converts a collection of opcodes into the associated instructions.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string[] DisassembleOpcodes(byte[] opcodes, MachineType machine)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">opcodes</span></td>
        <td><p>An array containing either x86 or x64 opcodes.</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">machine</span></td>
        <td><p>MachineType of the instruction set to be assembled.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><p>Returns null if the method fails.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_DisassembleOpcodes_" data-uid="ERC.DisplayOutput.DisassembleOpcodes*"></a>
  <h4 id="ERC_DisplayOutput_DisassembleOpcodes_System_Byte___System_UInt32_" data-uid="ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],System.UInt32)">DisassembleOpcodes(Byte[], UInt32)</h4>
  <div class="markdown level1 summary"><p>Converts a collection of opcodes into the associated instructions.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string[] DisassembleOpcodes(byte[] opcodes, uint machine)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">opcodes</span></td>
        <td><p>An array containing either x86 or x64 opcodes.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td><span class="parametername">machine</span></td>
        <td><p>Uint representing the machine type (x86 = 0, x64 = 1)</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><p>Returns null if the method fails.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_DisplayProcessInfo_" data-uid="ERC.DisplayOutput.DisplayProcessInfo*"></a>
  <h4 id="ERC_DisplayOutput_DisplayProcessInfo_ERC_ProcessInfo_System_Boolean_" data-uid="ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo,System.Boolean)">DisplayProcessInfo(ProcessInfo, Boolean)</h4>
  <div class="markdown level1 summary"><p>Displays information related to the provided ProcessInfo object.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string DisplayProcessInfo(ProcessInfo info, bool outputToFile = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The ProcessInfo object of which the module information will be displayed</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">outputToFile</span></td>
        <td><p>Set to false to surpress file output.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_DisplayThreadInfo_" data-uid="ERC.DisplayOutput.DisplayThreadInfo*"></a>
  <h4 id="ERC_DisplayOutput_DisplayThreadInfo_ERC_ProcessInfo_System_Boolean_" data-uid="ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo,System.Boolean)">DisplayThreadInfo(ProcessInfo, Boolean)</h4>
  <div class="markdown level1 summary"><p>Displays information about all threads related to a specific process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string DisplayThreadInfo(ProcessInfo info, bool outputToFile = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">outputToFile</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_DumpMemory_" data-uid="ERC.DisplayOutput.DumpMemory*"></a>
  <h4 id="ERC_DisplayOutput_DumpMemory_ERC_ProcessInfo_System_IntPtr_System_Int32_" data-uid="ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo,System.IntPtr,System.Int32)">DumpMemory(ProcessInfo, IntPtr, Int32)</h4>
  <div class="markdown level1 summary"><p>Reads a set of bytes from process memory and provides a string contianing the results.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;string&gt; DumpMemory(ProcessInfo info, IntPtr startAddress, int length)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>ProcessInfo object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>The address to start reading from.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">length</span></td>
        <td><p>The number of bytes to read.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>A string containing the bytes read from memroy</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GenerateByteArray_" data-uid="ERC.DisplayOutput.GenerateByteArray*"></a>
  <h4 id="ERC_DisplayOutput_GenerateByteArray_ERC_ErcCore_System_Byte___" data-uid="ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore,System.Byte[])">GenerateByteArray(ErcCore, Byte[])</h4>
  <div class="markdown level1 summary"><p>Generates an array of all possible bytes for use when identifying bad characters. Writes the output to disk in the working directory.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] GenerateByteArray(ErcCore core, byte[] unwantedBytes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">unwantedBytes</span></td>
        <td><p>An array of bytes to be excluded from the final byte array</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>Returns a byte array of all possible bytes.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GenerateEggHunters_" data-uid="ERC.DisplayOutput.GenerateEggHunters*"></a>
  <h4 id="ERC_DisplayOutput_GenerateEggHunters_ERC_ErcCore_System_String_" data-uid="ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore,System.String)">GenerateEggHunters(ErcCore, String)</h4>
  <div class="markdown level1 summary"><p>Generates a collection of EggHunter payloads.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string GenerateEggHunters(ErcCore core = null, string tag = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>(Optional) If an ErcCore object is provided the output will also be written out to the working directory</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">tag</span></td>
        <td><p>(Optional) If a tag is provided the payloads will be altered to search for that tag, the default tag is ERCD</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>Returns a string containing all EggHunters</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GenerateFindNRPTable_" data-uid="ERC.DisplayOutput.GenerateFindNRPTable*"></a>
  <h4 id="ERC_DisplayOutput_GenerateFindNRPTable_ERC_ProcessInfo_System_Int32_System_Boolean_" data-uid="ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo,System.Int32,System.Boolean)">GenerateFindNRPTable(ProcessInfo, Int32, Boolean)</h4>
  <div class="markdown level1 summary"><p>Searches the memory of a process for a non repeating pattern.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; GenerateFindNRPTable(ProcessInfo info, int searchType = 0, bool extended = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The ProcessInfo object of the process to be searched</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">searchType</span></td>
        <td><p>Integer specifiying the format of the string: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">extended</span></td>
        <td><p>Whether the extended character range is to be used when searching for the non repeating pattern</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns a List of strings containing the locations the repeating pattern was identified</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GenerateModuleInfoTable_" data-uid="ERC.DisplayOutput.GenerateModuleInfoTable*"></a>
  <h4 id="ERC_DisplayOutput_GenerateModuleInfoTable_ERC_ProcessInfo_System_Boolean_" data-uid="ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo,System.Boolean)">GenerateModuleInfoTable(ProcessInfo, Boolean)</h4>
  <div class="markdown level1 summary"><p>Aquires filename and writes out all module data to the current working directory. Requires a Process_Info object to be passed as a parameter.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string GenerateModuleInfoTable(ProcessInfo info, bool outputToFile = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The ProcessInfo object of which the module information will be displayed</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">outputToFile</span></td>
        <td><p>Set to false to surpress file output.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>Returns a formatted string of all results</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GeneratePattern_" data-uid="ERC.DisplayOutput.GeneratePattern*"></a>
  <h4 id="ERC_DisplayOutput_GeneratePattern_System_Int32_ERC_ErcCore_System_Boolean_" data-uid="ERC.DisplayOutput.GeneratePattern(System.Int32,ERC.ErcCore,System.Boolean)">GeneratePattern(Int32, ErcCore, Boolean)</h4>
  <div class="markdown level1 summary"><p>Creates a file in the ErcCore working directory containing a string of non repeating characters.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string GeneratePattern(int length, ErcCore core, bool extended = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">length</span></td>
        <td><p>The length of the string to be created</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">extended</span></td>
        <td><p>A optional boolean specifying whether to use the extended character set. Default is false.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>Returns a string containing the pattern generated.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GetSEHJumps_" data-uid="ERC.DisplayOutput.GetSEHJumps*"></a>
  <h4 id="ERC_DisplayOutput_GetSEHJumps_ERC_ProcessInfo_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Byte___System_String_" data-uid="ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">GetSEHJumps(ProcessInfo, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)</h4>
  <div class="markdown level1 summary"><p>Searches all memory associated with a given process and associated modules for POP X POP X RET instructions.
Passing a list of module paths or names will exclude those modules from the search.
Similar to Search_All_Memory_PPR however provides output in an easily readable format.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; GetSEHJumps(ProcessInfo info, bool aslr = false, bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false, byte[] unwantedBytes = null, string protection = &quot;exec&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The ProcessInfo object which will be searched for POP POP RET instructions.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">aslr</span></td>
        <td><p>Remove ASLR libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">safeseh</span></td>
        <td><p>Remove SafeSEH libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">rebase</span></td>
        <td><p>Remove rebasable libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">nxcompat</span></td>
        <td><p>Remove NXCompat libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">osdll</span></td>
        <td><p>Remove OS Dlls.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">unwantedBytes</span></td>
        <td><p>Addresses containing values in this byte array will be ignored.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">protection</span></td>
        <td><p>String containing protection level returned pointers will.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult containing a list of strings detailing the pointers, opcodes and base files of suitable instruction sets.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_GetSEHJumps_" data-uid="ERC.DisplayOutput.GetSEHJumps*"></a>
  <h4 id="ERC_DisplayOutput_GetSEHJumps_ERC_ProcessInfo_System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Byte[],System.Collections.Generic.List{System.String})">GetSEHJumps(ProcessInfo, Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Searches all memory associated with a given process and associated modules for POP X POP X RET instructions.
Passing a list of module paths or names will exclude those modules from the search.
Similar to Search_All_Memory_PPR however provides output in an easily readable format.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; GetSEHJumps(ProcessInfo info, byte[] ptrsToExclude, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The ProcessInfo object which will be searched for POP POP RET instructions</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">ptrsToExclude</span></td>
        <td><p>Ptrs containing these byte values will be discarded.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>Modules to be ignored when searching for the instruction sets.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult containing a list of strings detailing the pointers, opcodes and base files of suitable instruction sets.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_ListLocalProcesses_" data-uid="ERC.DisplayOutput.ListLocalProcesses*"></a>
  <h4 id="ERC_DisplayOutput_ListLocalProcesses" data-uid="ERC.DisplayOutput.ListLocalProcesses">ListLocalProcesses()</h4>
  <div class="markdown level1 summary"><p>Lists usable processes running on the local machine.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string ListLocalProcesses()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string containing details of processes running on the local machine.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_ListRemoteProcesses_" data-uid="ERC.DisplayOutput.ListRemoteProcesses*"></a>
  <h4 id="ERC_DisplayOutput_ListRemoteProcesses_System_String_" data-uid="ERC.DisplayOutput.ListRemoteProcesses(System.String)">ListRemoteProcesses(String)</h4>
  <div class="markdown level1 summary"><p>Lists usable processes running on the remote machine.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string ListRemoteProcesses(string machineName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">machineName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string containing details of processes running on the remote machine.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_RopChainGadgets32_" data-uid="ERC.DisplayOutput.RopChainGadgets32*"></a>
  <h4 id="ERC_DisplayOutput_RopChainGadgets32_ERC_Utilities_RopChainGenerator32_" data-uid="ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32)">RopChainGadgets32(RopChainGenerator32)</h4>
  <div class="markdown level1 summary"><p>Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; RopChainGadgets32(RopChainGenerator32 rcg)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Utilities.RopChainGenerator32.html">RopChainGenerator32</a></td>
        <td><span class="parametername">rcg</span></td>
        <td><p>The ROP chain generator object</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns a List of strings</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_RopChainGadgets64_" data-uid="ERC.DisplayOutput.RopChainGadgets64*"></a>
  <h4 id="ERC_DisplayOutput_RopChainGadgets64_ERC_Utilities_RopChainGenerator64_" data-uid="ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64)">RopChainGadgets64(RopChainGenerator64)</h4>
  <div class="markdown level1 summary"><p>Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; RopChainGadgets64(RopChainGenerator64 rcg)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Utilities.RopChainGenerator64.html">RopChainGenerator64</a></td>
        <td><span class="parametername">rcg</span></td>
        <td><p>The ROP chain generator object</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns a List of strings</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_SearchMemory_" data-uid="ERC.DisplayOutput.SearchMemory*"></a>
  <h4 id="ERC_DisplayOutput_SearchMemory_ERC_ProcessInfo_System_Int32_System_String_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Byte___System_String_" data-uid="ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">SearchMemory(ProcessInfo, Int32, String, Boolean, Boolean, Boolean, Boolean, Boolean, Byte[], String)</h4>
  <div class="markdown level1 summary"><p>Searches the memory of a process and it's loaded modules for a string or byte combination.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;string&gt; SearchMemory(ProcessInfo info, int searchType, string searchString, bool aslr = false, bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false, byte[] unwantedBytes = null, string protection = &quot;exec&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The processInfo object for the process</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">searchType</span></td>
        <td><p>The type of data to be searched for.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">searchString</span></td>
        <td><p>The string to search for.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">aslr</span></td>
        <td><p>Remove ASLR libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">safeseh</span></td>
        <td><p>Remove SafeSEH libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">rebase</span></td>
        <td><p>Remove rebasable libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">nxcompat</span></td>
        <td><p>Remove NXCompat libraries.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">osdll</span></td>
        <td><p>Remove OS Dlls.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">unwantedBytes</span></td>
        <td><p>Addresses containing values in this byte array will be ignored.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">protection</span></td>
        <td><p>String containing protection level returned pointers will.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_DisplayOutput_WriteToFile_" data-uid="ERC.DisplayOutput.WriteToFile*"></a>
  <h4 id="ERC_DisplayOutput_WriteToFile_System_String_System_String_System_String_System_Collections_Generic_List_System_String__" data-uid="ERC.DisplayOutput.WriteToFile(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">WriteToFile(String, String, String, List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Writes a list of strings to a file. Takes a directory, filename and prefix along with a List of strings.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static void WriteToFile(string directory, string prefix, string extension, List&lt;string&gt; content)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">directory</span></td>
        <td><p>The directory to be used</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">prefix</span></td>
        <td><p>A prefix for the file name e.g. &quot;modules_&quot; or &quot;Pattern_&quot; etc</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">extension</span></td>
        <td><p>The file extension to be used e.g. &quot;.txt&quot;</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">content</span></td>
        <td><p>A list of strings to be written to disk</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ERCException.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ERCException
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ERCException
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ERCException">
  
  
  <h1 id="ERC_ERCException" data-uid="ERC.ERCException" class="text-break">Class ERCException
  </h1>
  <div class="markdown level0 summary"><p>Custom exception handler.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">System.Exception</span></div>
    <div class="level2"><span class="xref">ERCException</span></div>
  </div>
  <div classs="implements">
    <h5>Implements</h5>
    <div><span class="xref">System.Runtime.Serialization.ISerializable</span></div>
    <div><span class="xref">System.Runtime.InteropServices._Exception</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Exception.GetBaseException()</span>
    </div>
    <div>
      <span class="xref">System.Exception.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</span>
    </div>
    <div>
      <span class="xref">System.Exception.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Exception.Message</span>
    </div>
    <div>
      <span class="xref">System.Exception.Data</span>
    </div>
    <div>
      <span class="xref">System.Exception.InnerException</span>
    </div>
    <div>
      <span class="xref">System.Exception.TargetSite</span>
    </div>
    <div>
      <span class="xref">System.Exception.StackTrace</span>
    </div>
    <div>
      <span class="xref">System.Exception.HelpLink</span>
    </div>
    <div>
      <span class="xref">System.Exception.Source</span>
    </div>
    <div>
      <span class="xref">System.Exception.HResult</span>
    </div>
    <div>
      <span class="xref">System.Exception.SerializeObjectState</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ERCException_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Serializable]
public class ERCException : Exception, ISerializable, _Exception</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_ERCException__ctor_" data-uid="ERC.ERCException.#ctor*"></a>
  <h4 id="ERC_ERCException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_" data-uid="ERC.ERCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">ERCException(SerializationInfo, StreamingContext)</h4>
  <div class="markdown level1 summary"><p>Creates a serializable exception.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected ERCException(SerializationInfo info, StreamingContext ctxt)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Runtime.Serialization.SerializationInfo</span></td>
        <td><span class="parametername">info</span></td>
        <td><p>Stores all the data needed to serialize or deserialize an object.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Runtime.Serialization.StreamingContext</span></td>
        <td><span class="parametername">ctxt</span></td>
        <td><p>Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ERCException__ctor_" data-uid="ERC.ERCException.#ctor*"></a>
  <h4 id="ERC_ERCException__ctor_System_String_" data-uid="ERC.ERCException.#ctor(System.String)">ERCException(String)</h4>
  <div class="markdown level1 summary"><p>Constructor for the ERCException class.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ERCException(string message)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">message</span></td>
        <td><p>The message associated with the Exception</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="implements">Implements</h3>
  <div>
      <span class="xref">System.Runtime.Serialization.ISerializable</span>
  </div>
  <div>
      <span class="xref">System.Runtime.InteropServices._Exception</span>
  </div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ErcCore.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ErcCore
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ErcCore
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ErcCore">
  
  
  <h1 id="ERC_ErcCore" data-uid="ERC.ErcCore" class="text-break">Class ErcCore
  </h1>
  <div class="markdown level0 summary"><p>A single instance of this object should be instantiated at a minimum. It is used for storing global variables such as the working directory etc.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">ErcCore</span></div>
      <div class="level2"><a class="xref" href="ERC.ErcResult-1.html">ErcResult&lt;T&gt;</a></div>
      <div class="level2"><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ErcCore_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ErcCore</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_ErcCore__ctor_" data-uid="ERC.ErcCore.#ctor*"></a>
  <h4 id="ERC_ErcCore__ctor" data-uid="ERC.ErcCore.#ctor">ErcCore()</h4>
  <div class="markdown level1 summary"><p>Constructor.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcCore()</code></pre>
  </div>
  
  
  <a id="ERC_ErcCore__ctor_" data-uid="ERC.ErcCore.#ctor*"></a>
  <h4 id="ERC_ErcCore__ctor_ERC_ErcCore_" data-uid="ERC.ErcCore.#ctor(ERC.ErcCore)">ErcCore(ErcCore)</h4>
  <div class="markdown level1 summary"><p>Constructor to be used when creating an object that inherits from an ErcCore object.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected ErcCore(ErcCore parent)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">parent</span></td>
        <td><p>The ErcCore object to be inherited from.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_ErcCore_Author_" data-uid="ERC.ErcCore.Author*"></a>
  <h4 id="ERC_ErcCore_Author" data-uid="ERC.ErcCore.Author">Author</h4>
  <div class="markdown level1 summary"><p>The Author to be credited in output files.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Author { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_ErcVersion_" data-uid="ERC.ErcCore.ErcVersion*"></a>
  <h4 id="ERC_ErcCore_ErcVersion" data-uid="ERC.ErcCore.ErcVersion">ErcVersion</h4>
  <div class="markdown level1 summary"><p>The current version of the ERC.Net library</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ErcVersion { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_PatternExtendedPath_" data-uid="ERC.ErcCore.PatternExtendedPath*"></a>
  <h4 id="ERC_ErcCore_PatternExtendedPath" data-uid="ERC.ErcCore.PatternExtendedPath">PatternExtendedPath</h4>
  <div class="markdown level1 summary"><p>Path to the file containing the extended pattern to be used.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string PatternExtendedPath { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_PatternStandardPath_" data-uid="ERC.ErcCore.PatternStandardPath*"></a>
  <h4 id="ERC_ErcCore_PatternStandardPath" data-uid="ERC.ErcCore.PatternStandardPath">PatternStandardPath</h4>
  <div class="markdown level1 summary"><p>Path to the file containing the standard pattern to be used.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string PatternStandardPath { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SystemErrorLogPath_" data-uid="ERC.ErcCore.SystemErrorLogPath*"></a>
  <h4 id="ERC_ErcCore_SystemErrorLogPath" data-uid="ERC.ErcCore.SystemErrorLogPath">SystemErrorLogPath</h4>
  <div class="markdown level1 summary"><p>Path where error details should be logged.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string SystemErrorLogPath { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_WorkingDirectory_" data-uid="ERC.ErcCore.WorkingDirectory*"></a>
  <h4 id="ERC_ErcCore_WorkingDirectory" data-uid="ERC.ErcCore.WorkingDirectory">WorkingDirectory</h4>
  <div class="markdown level1 summary"><p>The directory where output files will be saved.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string WorkingDirectory { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_ErcCore_GetHandleInformation_" data-uid="ERC.ErcCore.GetHandleInformation*"></a>
  <h4 id="ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__" data-uid="ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)">GetHandleInformation(IntPtr, out UInt32)</h4>
  <div class="markdown level1 summary"><p>Retrieves certain properties of an object handle.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static bool GetHandleInformation(IntPtr hObject, out uint lpdwFlags)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">hObject</span></td>
        <td><p>A handle to an object whose information is to be retrieved.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td><span class="parametername">lpdwFlags</span></td>
        <td><p>A pointer to a variable that receives a set of bit flags that specify properties of the object handle or 0. The following values are defined.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><p>If the function succeeds, the return value is true.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_LogEvent_" data-uid="ERC.ErcCore.LogEvent*"></a>
  <h4 id="ERC_ErcCore_LogEvent_System_Exception_" data-uid="ERC.ErcCore.LogEvent(System.Exception)">LogEvent(Exception)</h4>
  <div class="markdown level1 summary"><p>Logs events to the error log path in the XML file. This file is only appended to and never replaced.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void LogEvent(Exception e)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Exception</span></td>
        <td><span class="parametername">e</span></td>
        <td><p>The exception to log</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SetAuthor_" data-uid="ERC.ErcCore.SetAuthor*"></a>
  <h4 id="ERC_ErcCore_SetAuthor_System_String_" data-uid="ERC.ErcCore.SetAuthor(System.String)">SetAuthor(String)</h4>
  <div class="markdown level1 summary"><p>Sets the name of the author for use when outputing results to disk.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetAuthor(string author)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">author</span></td>
        <td><p>String containing the name of the author</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SetErrorFile_" data-uid="ERC.ErcCore.SetErrorFile*"></a>
  <h4 id="ERC_ErcCore_SetErrorFile_System_String_" data-uid="ERC.ErcCore.SetErrorFile(System.String)">SetErrorFile(String)</h4>
  <div class="markdown level1 summary"><p>Sets the error log file to a user specified filepath.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetErrorFile(string path)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">path</span></td>
        <td><p>The new error log filepath.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SetPatternExtendedPath_" data-uid="ERC.ErcCore.SetPatternExtendedPath*"></a>
  <h4 id="ERC_ErcCore_SetPatternExtendedPath_System_String_" data-uid="ERC.ErcCore.SetPatternExtendedPath(System.String)">SetPatternExtendedPath(String)</h4>
  <div class="markdown level1 summary"><p>Sets the extended pattern file path. Any pattern can replace the extended pattern when searching however the new pattern must be written to a file and the file path set here.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetPatternExtendedPath(string path)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">path</span></td>
        <td><p>The filepath of the new extended pattern file</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SetPatternStandardPath_" data-uid="ERC.ErcCore.SetPatternStandardPath*"></a>
  <h4 id="ERC_ErcCore_SetPatternStandardPath_System_String_" data-uid="ERC.ErcCore.SetPatternStandardPath(System.String)">SetPatternStandardPath(String)</h4>
  <div class="markdown level1 summary"><p>Sets the standard pattern file path. Any pattern can replace the standard pattern when searching however the new pattern must be written to a file and the file path set here.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetPatternStandardPath(string path)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">path</span></td>
        <td><p>The filepath of the new standard pattern file</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcCore_SetWorkingDirectory_" data-uid="ERC.ErcCore.SetWorkingDirectory*"></a>
  <h4 id="ERC_ErcCore_SetWorkingDirectory_System_String_" data-uid="ERC.ErcCore.SetWorkingDirectory(System.String)">SetWorkingDirectory(String)</h4>
  <div class="markdown level1 summary"><p>Changes the working directory in both the XML file and associated ErcCore object</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetWorkingDirectory(string path)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">path</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ErcResult-1.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ErcResult&lt;T&gt;
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ErcResult&lt;T&gt;
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ErcResult`1">
  
  
  <h1 id="ERC_ErcResult_1" data-uid="ERC.ErcResult`1" class="text-break">Class ErcResult&lt;T&gt;
  </h1>
  <div class="markdown level0 summary"><p>A basic object which contains a generic type and exception.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><a class="xref" href="ERC.ErcCore.html">ErcCore</a></div>
    <div class="level2"><span class="xref">ErcResult&lt;T&gt;</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_ErcVersion">ErcCore.ErcVersion</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory">ErcCore.WorkingDirectory</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_Author">ErcCore.Author</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath">ErcCore.SystemErrorLogPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath">ErcCore.PatternStandardPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath">ErcCore.PatternExtendedPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__">ErcCore.GetHandleInformation(IntPtr, UInt32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_System_String_">ErcCore.SetWorkingDirectory(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_System_String_">ErcCore.SetPatternStandardPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_System_String_">ErcCore.SetPatternExtendedPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetAuthor_System_String_">ErcCore.SetAuthor(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_System_String_">ErcCore.SetErrorFile(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_LogEvent_System_Exception_">ErcCore.LogEvent(Exception)</a>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ErcResult_1_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ErcResult&lt;T&gt; : ErcCore</code></pre>
  </div>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>A generic type</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_ErcResult_1__ctor_" data-uid="ERC.ErcResult`1.#ctor*"></a>
  <h4 id="ERC_ErcResult_1__ctor_ERC_ErcCore_" data-uid="ERC.ErcResult`1.#ctor(ERC.ErcCore)">ErcResult(ErcCore)</h4>
  <div class="markdown level1 summary"><p>Base constructor.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult(ErcCore core)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>The ErcCore object to inherit from.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcResult_1__ctor_" data-uid="ERC.ErcResult`1.#ctor*"></a>
  <h4 id="ERC_ErcResult_1__ctor_ERC_ErcCore_System_String_" data-uid="ERC.ErcResult`1.#ctor(ERC.ErcCore,System.String)">ErcResult(ErcCore, String)</h4>
  <div class="markdown level1 summary"><p>Base constructor with a custom location for exceptions to be logged.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult(ErcCore core, string errorFile)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>The ErcCore object to inherit from.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">errorFile</span></td>
        <td><p>The location to log exceptions.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_ErcResult_1_Error_" data-uid="ERC.ErcResult`1.Error*"></a>
  <h4 id="ERC_ErcResult_1_Error" data-uid="ERC.ErcResult`1.Error">Error</h4>
  <div class="markdown level1 summary"><p>Exception to be logged by LogEvent().</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Exception Error { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Exception</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ErcResult_1_ReturnValue_" data-uid="ERC.ErcResult`1.ReturnValue*"></a>
  <h4 id="ERC_ErcResult_1_ReturnValue" data-uid="ERC.ErcResult`1.ReturnValue">ReturnValue</h4>
  <div class="markdown level1 summary"><p>Generic Type.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public T ReturnValue { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_ErcResult_1_LogEvent_" data-uid="ERC.ErcResult`1.LogEvent*"></a>
  <h4 id="ERC_ErcResult_1_LogEvent" data-uid="ERC.ErcResult`1.LogEvent">LogEvent()</h4>
  <div class="markdown level1 summary"><p>Logs an event to the ErrorLogFile value.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void LogEvent()</code></pre>
  </div>
  
  
  <a id="ERC_ErcResult_1_ToString_" data-uid="ERC.ErcResult`1.ToString*"></a>
  <h4 id="ERC_ErcResult_1_ToString" data-uid="ERC.ErcResult`1.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Override of the ToString method. Returns a string containing values relevant to the object.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string containing information about the object.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.Object.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.MachineType.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum MachineType
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum MachineType
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.MachineType">
  
  
  <h1 id="ERC_MachineType" data-uid="ERC.MachineType" class="text-break">Enum MachineType
  </h1>
  <div class="markdown level0 summary"><p>Enum containing types of machine architectures.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_MachineType_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum MachineType</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_MachineType_error">error</td>
        <td><p>Type is unknown or unset.</p>
</td>
      </tr>
      <tr>
        <td id="ERC_MachineType_I386">I386</td>
        <td><p>x86.</p>
</td>
      </tr>
      <tr>
        <td id="ERC_MachineType_Itanium">Itanium</td>
        <td><p>Itanium.</p>
</td>
      </tr>
      <tr>
        <td id="ERC_MachineType_Native">Native</td>
        <td><p>Native.</p>
</td>
      </tr>
      <tr>
        <td id="ERC_MachineType_x64">x64</td>
        <td><p>x64.</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ModuleInfo.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ModuleInfo
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ModuleInfo
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ModuleInfo">
  
  
  <h1 id="ERC_ModuleInfo" data-uid="ERC.ModuleInfo" class="text-break">Class ModuleInfo
  </h1>
  <div class="markdown level0 summary"><p>Contains all information relating to a specific module.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">ModuleInfo</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ModuleInfo_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ModuleInfo</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_ModuleInfo_ModuleFailed" data-uid="ERC.ModuleInfo.ModuleFailed">ModuleFailed</h4>
  <div class="markdown level1 summary"><p>An errpr was encountered whilst processing the module.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleFailed</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_ModuleInfo_ModuleASLR_" data-uid="ERC.ModuleInfo.ModuleASLR*"></a>
  <h4 id="ERC_ModuleInfo_ModuleASLR" data-uid="ERC.ModuleInfo.ModuleASLR">ModuleASLR</h4>
  <div class="markdown level1 summary"><p>Module supports ASLR.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleASLR { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleBase_" data-uid="ERC.ModuleInfo.ModuleBase*"></a>
  <h4 id="ERC_ModuleInfo_ModuleBase" data-uid="ERC.ModuleInfo.ModuleBase">ModuleBase</h4>
  <div class="markdown level1 summary"><p>Module base pointer.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ModuleBase { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleCore_" data-uid="ERC.ModuleInfo.ModuleCore*"></a>
  <h4 id="ERC_ModuleInfo_ModuleCore" data-uid="ERC.ModuleInfo.ModuleCore">ModuleCore</h4>
  <div class="markdown level1 summary"><p>Associated ErcCore object.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcCore ModuleCore { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleEntry_" data-uid="ERC.ModuleInfo.ModuleEntry*"></a>
  <h4 id="ERC_ModuleInfo_ModuleEntry" data-uid="ERC.ModuleInfo.ModuleEntry">ModuleEntry</h4>
  <div class="markdown level1 summary"><p>Module entry point.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ModuleEntry { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleImageBase_" data-uid="ERC.ModuleInfo.ModuleImageBase*"></a>
  <h4 id="ERC_ModuleInfo_ModuleImageBase" data-uid="ERC.ModuleInfo.ModuleImageBase">ModuleImageBase</h4>
  <div class="markdown level1 summary"><p>Module image base.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ModuleImageBase { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleMachineType_" data-uid="ERC.ModuleInfo.ModuleMachineType*"></a>
  <h4 id="ERC_ModuleInfo_ModuleMachineType" data-uid="ERC.ModuleInfo.ModuleMachineType">ModuleMachineType</h4>
  <div class="markdown level1 summary"><p>Machine type of the module.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public MachineType ModuleMachineType { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleName_" data-uid="ERC.ModuleInfo.ModuleName*"></a>
  <h4 id="ERC_ModuleInfo_ModuleName" data-uid="ERC.ModuleInfo.ModuleName">ModuleName</h4>
  <div class="markdown level1 summary"><p>Module name.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ModuleName { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleNXCompat_" data-uid="ERC.ModuleInfo.ModuleNXCompat*"></a>
  <h4 id="ERC_ModuleInfo_ModuleNXCompat" data-uid="ERC.ModuleInfo.ModuleNXCompat">ModuleNXCompat</h4>
  <div class="markdown level1 summary"><p>Module is DEP enabled.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleNXCompat { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleOsDll_" data-uid="ERC.ModuleInfo.ModuleOsDll*"></a>
  <h4 id="ERC_ModuleInfo_ModuleOsDll" data-uid="ERC.ModuleInfo.ModuleOsDll">ModuleOsDll</h4>
  <div class="markdown level1 summary"><p>Module is an OS dll.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleOsDll { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModulePath_" data-uid="ERC.ModuleInfo.ModulePath*"></a>
  <h4 id="ERC_ModuleInfo_ModulePath" data-uid="ERC.ModuleInfo.ModulePath">ModulePath</h4>
  <div class="markdown level1 summary"><p>Module path.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ModulePath { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleProcess_" data-uid="ERC.ModuleInfo.ModuleProcess*"></a>
  <h4 id="ERC_ModuleInfo_ModuleProcess" data-uid="ERC.ModuleInfo.ModuleProcess">ModuleProcess</h4>
  <div class="markdown level1 summary"><p>Process where the module is loaded.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Process ModuleProcess { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Diagnostics.Process</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleProduct_" data-uid="ERC.ModuleInfo.ModuleProduct*"></a>
  <h4 id="ERC_ModuleInfo_ModuleProduct" data-uid="ERC.ModuleInfo.ModuleProduct">ModuleProduct</h4>
  <div class="markdown level1 summary"><p>Module product.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ModuleProduct { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleProtection_" data-uid="ERC.ModuleInfo.ModuleProtection*"></a>
  <h4 id="ERC_ModuleInfo_ModuleProtection" data-uid="ERC.ModuleInfo.ModuleProtection">ModuleProtection</h4>
  <div class="markdown level1 summary"><p>Memory protection of this module.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ModuleProtection { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleRebase_" data-uid="ERC.ModuleInfo.ModuleRebase*"></a>
  <h4 id="ERC_ModuleInfo_ModuleRebase" data-uid="ERC.ModuleInfo.ModuleRebase">ModuleRebase</h4>
  <div class="markdown level1 summary"><p>Module can be rebased.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleRebase { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleSafeSEH_" data-uid="ERC.ModuleInfo.ModuleSafeSEH*"></a>
  <h4 id="ERC_ModuleInfo_ModuleSafeSEH" data-uid="ERC.ModuleInfo.ModuleSafeSEH">ModuleSafeSEH</h4>
  <div class="markdown level1 summary"><p>Module supports SafeSEH</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool ModuleSafeSEH { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleSize_" data-uid="ERC.ModuleInfo.ModuleSize*"></a>
  <h4 id="ERC_ModuleInfo_ModuleSize" data-uid="ERC.ModuleInfo.ModuleSize">ModuleSize</h4>
  <div class="markdown level1 summary"><p>Module size.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int ModuleSize { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ModuleVersion_" data-uid="ERC.ModuleInfo.ModuleVersion*"></a>
  <h4 id="ERC_ModuleInfo_ModuleVersion" data-uid="ERC.ModuleInfo.ModuleVersion">ModuleVersion</h4>
  <div class="markdown level1 summary"><p>Module version.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ModuleVersion { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_ModuleInfo_SearchModule_" data-uid="ERC.ModuleInfo.SearchModule*"></a>
  <h4 id="ERC_ModuleInfo_SearchModule_System_Byte___" data-uid="ERC.ModuleInfo.SearchModule(System.Byte[])">SearchModule(Byte[])</h4>
  <div class="markdown level1 summary"><p>Searches for a string of bytes within a specific module. Takes a byte array to be searched for.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;List&lt;IntPtr&gt;&gt; SearchModule(byte[] searchBytes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">searchBytes</span></td>
        <td><p>A byte array to be searched for</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;&gt;</td>
        <td><p>Returns ERC_Result of pointers to the search term</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ModuleInfo_ToString_" data-uid="ERC.ModuleInfo.ToString*"></a>
  <h4 id="ERC_ModuleInfo_ToString" data-uid="ERC.ModuleInfo.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Override of the ToString method. Provides a data associated with the module.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string containing relevant data.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.Object.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ProcessInfo.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ProcessInfo
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ProcessInfo
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ProcessInfo">
  
  
  <h1 id="ERC_ProcessInfo" data-uid="ERC.ProcessInfo" class="text-break">Class ProcessInfo
  </h1>
  <div class="markdown level0 summary"><p>Contains information needed for the associated functions relating to the process.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><a class="xref" href="ERC.ErcCore.html">ErcCore</a></div>
    <div class="level2"><span class="xref">ProcessInfo</span></div>
      <div class="level3"><a class="xref" href="ERC.Utilities.OpcodeAssembler.html">OpcodeAssembler</a></div>
      <div class="level3"><a class="xref" href="ERC.Utilities.OpcodeDisassembler.html">OpcodeDisassembler</a></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_ErcVersion">ErcCore.ErcVersion</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory">ErcCore.WorkingDirectory</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_Author">ErcCore.Author</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath">ErcCore.SystemErrorLogPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath">ErcCore.PatternStandardPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath">ErcCore.PatternExtendedPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__">ErcCore.GetHandleInformation(IntPtr, UInt32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_System_String_">ErcCore.SetWorkingDirectory(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_System_String_">ErcCore.SetPatternStandardPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_System_String_">ErcCore.SetPatternExtendedPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetAuthor_System_String_">ErcCore.SetAuthor(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_System_String_">ErcCore.SetErrorFile(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_LogEvent_System_Exception_">ErcCore.LogEvent(Exception)</a>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ProcessInfo_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ProcessInfo : ErcCore</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_ProcessInfo__ctor_" data-uid="ERC.ProcessInfo.#ctor*"></a>
  <h4 id="ERC_ProcessInfo__ctor_ERC_ErcCore_System_Diagnostics_Process_" data-uid="ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)">ProcessInfo(ErcCore, Process)</h4>
  <div class="markdown level1 summary"><p>Constructor for the Process_Info object, requires an ERC_Core object and a Process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ProcessInfo(ErcCore core, Process process)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Diagnostics.Process</span></td>
        <td><span class="parametername">process</span></td>
        <td><p>The process to gather information from</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo__ctor_" data-uid="ERC.ProcessInfo.#ctor*"></a>
  <h4 id="ERC_ProcessInfo__ctor_ERC_ErcCore_System_IntPtr_" data-uid="ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)">ProcessInfo(ErcCore, IntPtr)</h4>
  <div class="markdown level1 summary"><p>Constructor for the Process_Info object, requires an ERC_Core object and a Process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ProcessInfo(ErcCore core, IntPtr handle)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">handle</span></td>
        <td><p>The handle for the process to gather information from</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo__ctor_" data-uid="ERC.ProcessInfo.#ctor*"></a>
  <h4 id="ERC_ProcessInfo__ctor_ERC_ProcessInfo_" data-uid="ERC.ProcessInfo.#ctor(ERC.ProcessInfo)">ProcessInfo(ProcessInfo)</h4>
  <div class="markdown level1 summary"><p>Constructor to use when inheriting from ProcessInfo.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected ProcessInfo(ProcessInfo parent)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">parent</span></td>
        <td><p>The object to inherit from</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_ProcessInfo_ModulesInfo" data-uid="ERC.ProcessInfo.ModulesInfo">ModulesInfo</h4>
  <div class="markdown level1 summary"><p>A list containing ModuleInfo objects associuted with the process. ///</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;ModuleInfo&gt; ModulesInfo</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<a class="xref" href="ERC.ModuleInfo.html">ModuleInfo</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_ProcessInfo_ThreadsInfo" data-uid="ERC.ProcessInfo.ThreadsInfo">ThreadsInfo</h4>
  <div class="markdown level1 summary"><p>A list containing ThreadInfo objects associuted with the process. ///</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;ThreadInfo&gt; ThreadsInfo</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<a class="xref" href="ERC.ThreadInfo.html">ThreadInfo</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_ProcessInfo_ProcessCurrent_" data-uid="ERC.ProcessInfo.ProcessCurrent*"></a>
  <h4 id="ERC_ProcessInfo_ProcessCurrent" data-uid="ERC.ProcessInfo.ProcessCurrent">ProcessCurrent</h4>
  <div class="markdown level1 summary"><p>.Net Process object for this process</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Process ProcessCurrent { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Diagnostics.Process</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessDescription_" data-uid="ERC.ProcessInfo.ProcessDescription*"></a>
  <h4 id="ERC_ProcessInfo_ProcessDescription" data-uid="ERC.ProcessInfo.ProcessDescription">ProcessDescription</h4>
  <div class="markdown level1 summary"><p>Process description.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ProcessDescription { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessHandle_" data-uid="ERC.ProcessInfo.ProcessHandle*"></a>
  <h4 id="ERC_ProcessInfo_ProcessHandle" data-uid="ERC.ProcessInfo.ProcessHandle">ProcessHandle</h4>
  <div class="markdown level1 summary"><p>Handle for the process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ProcessHandle { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessID_" data-uid="ERC.ProcessInfo.ProcessID*"></a>
  <h4 id="ERC_ProcessInfo_ProcessID" data-uid="ERC.ProcessInfo.ProcessID">ProcessID</h4>
  <div class="markdown level1 summary"><p>Process ID.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int ProcessID { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessMachineType_" data-uid="ERC.ProcessInfo.ProcessMachineType*"></a>
  <h4 id="ERC_ProcessInfo_ProcessMachineType" data-uid="ERC.ProcessInfo.ProcessMachineType">ProcessMachineType</h4>
  <div class="markdown level1 summary"><p>The machine type the process runs on. Eg. x86 or x64</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public MachineType ProcessMachineType { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessName_" data-uid="ERC.ProcessInfo.ProcessName*"></a>
  <h4 id="ERC_ProcessInfo_ProcessName" data-uid="ERC.ProcessInfo.ProcessName">ProcessName</h4>
  <div class="markdown level1 summary"><p>Name of the process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ProcessName { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ProcessPath_" data-uid="ERC.ProcessInfo.ProcessPath*"></a>
  <h4 id="ERC_ProcessInfo_ProcessPath" data-uid="ERC.ProcessInfo.ProcessPath">ProcessPath</h4>
  <div class="markdown level1 summary"><p>Path for the projects main module.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ProcessPath { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_ProcessInfo_CreateExcludesList_" data-uid="ERC.ProcessInfo.CreateExcludesList*"></a>
  <h4 id="ERC_ProcessInfo_CreateExcludesList_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_" data-uid="ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)</h4>
  <div class="markdown level1 summary"><p>Creates a list of modules to exclude from a search of memory.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;string&gt; CreateExcludesList(bool aslr = false, bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">aslr</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">safeseh</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">rebase</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">nxcompat</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">osdll</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult containing a list of stringss</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_DumpMemoryRegion_" data-uid="ERC.ProcessInfo.DumpMemoryRegion*"></a>
  <h4 id="ERC_ProcessInfo_DumpMemoryRegion_System_IntPtr_System_Int32_" data-uid="ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)">DumpMemoryRegion(IntPtr, Int32)</h4>
  <div class="markdown level1 summary"><p>Reads process memory from a specific address for a set number of bytes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;byte[]&gt; DumpMemoryRegion(IntPtr startAddress, int length)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>The address to start reading from.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">length</span></td>
        <td><p>Number of bytes to read.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns a bytes array containing the specified contents of process memory.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_FindNRP_" data-uid="ERC.ProcessInfo.FindNRP*"></a>
  <h4 id="ERC_ProcessInfo_FindNRP_System_Int32_System_Boolean_" data-uid="ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)">FindNRP(Int32, Boolean)</h4>
  <div class="markdown level1 summary"><p>Searches process registers and identifies pointers to buffers in memory containing a non repeating pattern. Functionality to identify SEH overwrites not yet implements.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;List&lt;RegisterInfo&gt;&gt; FindNRP(int searchType = 0, bool extended = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">searchType</span></td>
        <td><p>(Optional) 0 = search term is system default\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">extended</span></td>
        <td><p>(Optional) Include additional characters in the pattern (!#$%^ etc) in the to be searched</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.List</span>&lt;<a class="xref" href="ERC.Structures.RegisterInfo.html">RegisterInfo</a>&gt;&gt;</td>
        <td><p>Returns a ERC_Result containing a List of RegisterOffset</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_GetModuleHandles_" data-uid="ERC.ProcessInfo.GetModuleHandles*"></a>
  <h4 id="ERC_ProcessInfo_GetModuleHandles" data-uid="ERC.ProcessInfo.GetModuleHandles">GetModuleHandles()</h4>
  <div class="markdown level1 summary"><p>Returns a list of module handles associated with the process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;string, IntPtr&gt;&gt; GetModuleHandles()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.String</span>, <span class="xref">System.IntPtr</span>&gt;&gt;</td>
        <td><p>Returns a dictionary containing the handle and path of each module</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_GetProcessModuleInformation_" data-uid="ERC.ProcessInfo.GetProcessModuleInformation*"></a>
  <h4 id="ERC_ProcessInfo_GetProcessModuleInformation" data-uid="ERC.ProcessInfo.GetProcessModuleInformation">GetProcessModuleInformation()</h4>
  <div class="markdown level1 summary"><p>Gets the list of ModuleInfo objects associated with the current process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;List&lt;ModuleInfo&gt;&gt; GetProcessModuleInformation()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.List</span>&lt;<a class="xref" href="ERC.ModuleInfo.html">ModuleInfo</a>&gt;&gt;</td>
        <td><p>Returns an ErcResult containing a list of ModuleInfo objects</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_GetProcessModules_" data-uid="ERC.ProcessInfo.GetProcessModules*"></a>
  <h4 id="ERC_ProcessInfo_GetProcessModules" data-uid="ERC.ProcessInfo.GetProcessModules">GetProcessModules()</h4>
  <div class="markdown level1 summary"><p>Returns a list of files loaded by the current process as List String</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;string, IntPtr&gt;&gt; GetProcessModules()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.String</span>, <span class="xref">System.IntPtr</span>&gt;&gt;</td>
        <td><p>Returns an ErcResult containing a Dictionary of module names and the associated handles</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_GetProcessThreadInformation_" data-uid="ERC.ProcessInfo.GetProcessThreadInformation*"></a>
  <h4 id="ERC_ProcessInfo_GetProcessThreadInformation" data-uid="ERC.ProcessInfo.GetProcessThreadInformation">GetProcessThreadInformation()</h4>
  <div class="markdown level1 summary"><p>Gets the list of ThreadInfo objects associated with the current process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;List&lt;ThreadInfo&gt;&gt; GetProcessThreadInformation()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.List</span>&lt;<a class="xref" href="ERC.ThreadInfo.html">ThreadInfo</a>&gt;&gt;</td>
        <td><p>Returns an ErcResult containing a list of ThreadInfo objects</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_Is64Bit_" data-uid="ERC.ProcessInfo.Is64Bit*"></a>
  <h4 id="ERC_ProcessInfo_Is64Bit_System_Diagnostics_Process_" data-uid="ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)">Is64Bit(Process)</h4>
  <div class="markdown level1 summary"><p>Identifies if a process is 64bit or 32 bit, returns true for 64bit and false for 32bit.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static bool Is64Bit(Process process)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Diagnostics.Process</span></td>
        <td><span class="parametername">process</span></td>
        <td><p>The process to be used</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><p>Returns true if the process is 64bit and false if it is not.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ListLocalProcesses_" data-uid="ERC.ProcessInfo.ListLocalProcesses*"></a>
  <h4 id="ERC_ProcessInfo_ListLocalProcesses_ERC_ErcCore_" data-uid="ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)">ListLocalProcesses(ErcCore)</h4>
  <div class="markdown level1 summary"><p>Gets a list of running processes on the host and removes unusable processes (such as system processes etc)</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;Process[]&gt; ListLocalProcesses(ErcCore core)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Diagnostics.Process</span>[]&gt;</td>
        <td><p>Returns an ErcResult containing a list of all supported processes</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ListRemoteProcesses_" data-uid="ERC.ProcessInfo.ListRemoteProcesses*"></a>
  <h4 id="ERC_ProcessInfo_ListRemoteProcesses_ERC_ErcCore_System_String_" data-uid="ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)">ListRemoteProcesses(ErcCore, String)</h4>
  <div class="markdown level1 summary"><p>Gets a list of running processes on the host and removes unusable processes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;Process[]&gt; ListRemoteProcesses(ErcCore core, string machineName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">machineName</span></td>
        <td><p>The computer from which to read the list of processes. Can be either the hostname or IP address.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Diagnostics.Process</span>[]&gt;</td>
        <td><p>Returns an ErcResult containing a list of all supported processes</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_SearchAllMemoryPPR_" data-uid="ERC.ProcessInfo.SearchAllMemoryPPR*"></a>
  <h4 id="ERC_ProcessInfo_SearchAllMemoryPPR_System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})">SearchAllMemoryPPR(Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Searches all memory associated with a given process and associated modules for POP X POP X RET instructions.
Passing a list of module paths or names will exclude those modules from the search.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;IntPtr, string&gt;&gt; SearchAllMemoryPPR(byte[] ptrsToExclude, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">ptrsToExclude</span></td>
        <td><p>Takes a byte array of values used to disqualify pointers</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>Takes a list of module names to be excluded from the search</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;&gt;</td>
        <td><p>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_SearchAllMemoryPPR_" data-uid="ERC.ProcessInfo.SearchAllMemoryPPR*"></a>
  <h4 id="ERC_ProcessInfo_SearchAllMemoryPPR_System_Collections_Generic_List_System_String__" data-uid="ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})">SearchAllMemoryPPR(List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Searches all memory associated with a given process and associated modules for POP X POP X RET instructions.
Passing a list of module paths or names will exclude those modules from the search.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;IntPtr, string&gt;&gt; SearchAllMemoryPPR(List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>Takes a list of module names to be excluded from the search</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;&gt;</td>
        <td><p>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_SearchMemory_" data-uid="ERC.ProcessInfo.SearchMemory*"></a>
  <h4 id="ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_Byte___System_String_System_Collections_Generic_List_System_String__" data-uid="ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})">SearchMemory(Int32, Byte[], Byte[], String, List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
Specific modules can be exclude through passing a Listof strings containing module names or paths.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;IntPtr, string&gt;&gt; SearchMemory(int searchType, byte[] ptrsToExclude, byte[] searchBytes = null, string searchString = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">searchType</span></td>
        <td><p>0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">ptrsToExclude</span></td>
        <td><p>Takes a byte array of values used to disqualify pointers</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">searchBytes</span></td>
        <td><p>Byte array to be searched for (optional)</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">searchString</span></td>
        <td><p>String to be searched for (optional)</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>Modules to be excluded from the search (optional)</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;&gt;</td>
        <td><p>Returns an ERC_Result containing pointers to all instances of the search query.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_SearchMemory_" data-uid="ERC.ProcessInfo.SearchMemory*"></a>
  <h4 id="ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_String_System_Collections_Generic_List_System_String__" data-uid="ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})">SearchMemory(Int32, Byte[], String, List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
Specific modules can be exclude through passing a Listof strings containing module names or paths.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;Dictionary&lt;IntPtr, string&gt;&gt; SearchMemory(int searchType, byte[] searchBytes = null, string searchString = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">searchType</span></td>
        <td><p>0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">searchBytes</span></td>
        <td><p>Byte array to be searched for (optional)</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">searchString</span></td>
        <td><p>String to be searched for (optional)</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>Modules to be excluded from the search (optional)</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;&gt;</td>
        <td><p>Returns an ERC_Result containing pointers to all instances of the search query.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ProcessInfo_ToString_" data-uid="ERC.ProcessInfo.ToString*"></a>
  <h4 id="ERC_ProcessInfo_ToString" data-uid="ERC.ProcessInfo.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Override of the ToString method. Returns information about the process in a pleasantly formatted string</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.Object.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.AllocationProtect.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum AllocationProtect
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum AllocationProtect
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.AllocationProtect">
  
  
  <h1 id="ERC_Structures_AllocationProtect" data-uid="ERC.Structures.AllocationProtect" class="text-break">Enum AllocationProtect
  </h1>
  <div class="markdown level0 summary"><p>AllocationProtect.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_AllocationProtect_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum AllocationProtect : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_EXECUTE">PAGE_EXECUTE</td>
        <td><p>PAGE_EXECUTE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_EXECUTE_READ">PAGE_EXECUTE_READ</td>
        <td><p>PAGE_EXECUTE_READ</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_EXECUTE_READWRITE">PAGE_EXECUTE_READWRITE</td>
        <td><p>PAGE_EXECUTE_READWRITE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_EXECUTE_WRITECOPY">PAGE_EXECUTE_WRITECOPY</td>
        <td><p>PAGE_EXECUTE_WRITECOPY</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_GUARD">PAGE_GUARD</td>
        <td><p>PAGE_GUARD</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_NOACCESS">PAGE_NOACCESS</td>
        <td><p>PAGE_NOACCESS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_NOCACHE">PAGE_NOCACHE</td>
        <td><p>PAGE_NOCACHE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_READONLY">PAGE_READONLY</td>
        <td><p>PAGE_READONLY</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_READWRITE">PAGE_READWRITE</td>
        <td><p>PAGE_READWRITE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_WRITECOMBINE">PAGE_WRITECOMBINE</td>
        <td><p>PAGE_WRITECOMBINE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_AllocationProtect_PAGE_WRITECOPY">PAGE_WRITECOPY</td>
        <td><p>PAGE_WRITECOPY</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.CONTEXT32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct CONTEXT32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct CONTEXT32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.CONTEXT32">
  
  
  <h1 id="ERC_Structures_CONTEXT32" data-uid="ERC.Structures.CONTEXT32" class="text-break">Struct CONTEXT32
  </h1>
  <div class="markdown level0 summary"><p>Structure for holding x86 register values.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_CONTEXT32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct CONTEXT32</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_CONTEXT32_ContextFlags" data-uid="ERC.Structures.CONTEXT32.ContextFlags">ContextFlags</h4>
  <div class="markdown level1 summary"><p>ContextFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public CONTEXT_FLAGS ContextFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.CONTEXT_FLAGS.html">CONTEXT_FLAGS</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr0" data-uid="ERC.Structures.CONTEXT32.Dr0">Dr0</h4>
  <div class="markdown level1 summary"><p>Dr0</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr0</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr1" data-uid="ERC.Structures.CONTEXT32.Dr1">Dr1</h4>
  <div class="markdown level1 summary"><p>Dr1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr2" data-uid="ERC.Structures.CONTEXT32.Dr2">Dr2</h4>
  <div class="markdown level1 summary"><p>Dr2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr3" data-uid="ERC.Structures.CONTEXT32.Dr3">Dr3</h4>
  <div class="markdown level1 summary"><p>Dr3</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr3</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr6" data-uid="ERC.Structures.CONTEXT32.Dr6">Dr6</h4>
  <div class="markdown level1 summary"><p>Dr6</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr6</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Dr7" data-uid="ERC.Structures.CONTEXT32.Dr7">Dr7</h4>
  <div class="markdown level1 summary"><p>Dr7</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Dr7</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Eax" data-uid="ERC.Structures.CONTEXT32.Eax">Eax</h4>
  <div class="markdown level1 summary"><p>Eax</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Eax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Ebp" data-uid="ERC.Structures.CONTEXT32.Ebp">Ebp</h4>
  <div class="markdown level1 summary"><p>Ebp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Ebp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Ebx" data-uid="ERC.Structures.CONTEXT32.Ebx">Ebx</h4>
  <div class="markdown level1 summary"><p>Ebx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Ebx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Ecx" data-uid="ERC.Structures.CONTEXT32.Ecx">Ecx</h4>
  <div class="markdown level1 summary"><p>Ecx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Ecx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Edi" data-uid="ERC.Structures.CONTEXT32.Edi">Edi</h4>
  <div class="markdown level1 summary"><p>Edi</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Edi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Edx" data-uid="ERC.Structures.CONTEXT32.Edx">Edx</h4>
  <div class="markdown level1 summary"><p>Edx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Edx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_EFlags" data-uid="ERC.Structures.CONTEXT32.EFlags">EFlags</h4>
  <div class="markdown level1 summary"><p>EFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint EFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Eip" data-uid="ERC.Structures.CONTEXT32.Eip">Eip</h4>
  <div class="markdown level1 summary"><p>Eip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Eip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Esi" data-uid="ERC.Structures.CONTEXT32.Esi">Esi</h4>
  <div class="markdown level1 summary"><p>Esi</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Esi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_Esp" data-uid="ERC.Structures.CONTEXT32.Esp">Esp</h4>
  <div class="markdown level1 summary"><p>Esp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Esp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_ExtendedRegisters" data-uid="ERC.Structures.CONTEXT32.ExtendedRegisters">ExtendedRegisters</h4>
  <div class="markdown level1 summary"><p>ExtendedRegisters</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] ExtendedRegisters</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_FloatSave" data-uid="ERC.Structures.CONTEXT32.FloatSave">FloatSave</h4>
  <div class="markdown level1 summary"><p>FloatSave</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public FLOATING_SAVE_AREA FloatSave</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.FLOATING_SAVE_AREA.html">FLOATING_SAVE_AREA</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegCs" data-uid="ERC.Structures.CONTEXT32.SegCs">SegCs</h4>
  <div class="markdown level1 summary"><p>SegCs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegCs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegDs" data-uid="ERC.Structures.CONTEXT32.SegDs">SegDs</h4>
  <div class="markdown level1 summary"><p>SegDs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegDs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegEs" data-uid="ERC.Structures.CONTEXT32.SegEs">SegEs</h4>
  <div class="markdown level1 summary"><p>SegEs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegEs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegFs" data-uid="ERC.Structures.CONTEXT32.SegFs">SegFs</h4>
  <div class="markdown level1 summary"><p>SegFs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegFs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegGs" data-uid="ERC.Structures.CONTEXT32.SegGs">SegGs</h4>
  <div class="markdown level1 summary"><p>SegGs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegGs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT32_SegSs" data-uid="ERC.Structures.CONTEXT32.SegSs">SegSs</h4>
  <div class="markdown level1 summary"><p>SegSs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SegSs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Structures_CONTEXT32_ToString_" data-uid="ERC.Structures.CONTEXT32.ToString*"></a>
  <h4 id="ERC_Structures_CONTEXT32_ToString" data-uid="ERC.Structures.CONTEXT32.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Overridden ToString method, returns register values for the current thread.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>String</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.ValueType.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.CONTEXT64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct CONTEXT64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct CONTEXT64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.CONTEXT64">
  
  
  <h1 id="ERC_Structures_CONTEXT64" data-uid="ERC.Structures.CONTEXT64" class="text-break">Struct CONTEXT64
  </h1>
  <div class="markdown level0 summary"><p>Structure for holding x64 register values.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_CONTEXT64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct CONTEXT64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_CONTEXT64_ContextFlags" data-uid="ERC.Structures.CONTEXT64.ContextFlags">ContextFlags</h4>
  <div class="markdown level1 summary"><p>ContextFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public CONTEXT_FLAGS ContextFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.CONTEXT_FLAGS.html">CONTEXT_FLAGS</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_DebugControl" data-uid="ERC.Structures.CONTEXT64.DebugControl">DebugControl</h4>
  <div class="markdown level1 summary"><p>DebugControl</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong DebugControl</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr0" data-uid="ERC.Structures.CONTEXT64.Dr0">Dr0</h4>
  <div class="markdown level1 summary"><p>Dr0</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr0</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr1" data-uid="ERC.Structures.CONTEXT64.Dr1">Dr1</h4>
  <div class="markdown level1 summary"><p>Dr1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr2" data-uid="ERC.Structures.CONTEXT64.Dr2">Dr2</h4>
  <div class="markdown level1 summary"><p>Dr2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr3" data-uid="ERC.Structures.CONTEXT64.Dr3">Dr3</h4>
  <div class="markdown level1 summary"><p>Dr3</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr3</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr6" data-uid="ERC.Structures.CONTEXT64.Dr6">Dr6</h4>
  <div class="markdown level1 summary"><p>Dr6</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr6</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Dr7" data-uid="ERC.Structures.CONTEXT64.Dr7">Dr7</h4>
  <div class="markdown level1 summary"><p>Dr7</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Dr7</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_DUMMYUNIONNAME" data-uid="ERC.Structures.CONTEXT64.DUMMYUNIONNAME">DUMMYUNIONNAME</h4>
  <div class="markdown level1 summary"><p>DUMMYUNIONNAME</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public XSAVE_FORMAT64 DUMMYUNIONNAME</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.XSAVE_FORMAT64.html">XSAVE_FORMAT64</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_EFlags" data-uid="ERC.Structures.CONTEXT64.EFlags">EFlags</h4>
  <div class="markdown level1 summary"><p>EFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint EFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_LastBranchFromRip" data-uid="ERC.Structures.CONTEXT64.LastBranchFromRip">LastBranchFromRip</h4>
  <div class="markdown level1 summary"><p>LastBranchFromRip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong LastBranchFromRip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_LastBranchToRip" data-uid="ERC.Structures.CONTEXT64.LastBranchToRip">LastBranchToRip</h4>
  <div class="markdown level1 summary"><p>LastBranchToRip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong LastBranchToRip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_LastExceptionFromRip" data-uid="ERC.Structures.CONTEXT64.LastExceptionFromRip">LastExceptionFromRip</h4>
  <div class="markdown level1 summary"><p>LastExceptionFromRip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong LastExceptionFromRip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_LastExceptionToRip" data-uid="ERC.Structures.CONTEXT64.LastExceptionToRip">LastExceptionToRip</h4>
  <div class="markdown level1 summary"><p>LastExceptionToRip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong LastExceptionToRip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_MxCsr" data-uid="ERC.Structures.CONTEXT64.MxCsr">MxCsr</h4>
  <div class="markdown level1 summary"><p>MxCsr</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint MxCsr</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P1Home" data-uid="ERC.Structures.CONTEXT64.P1Home">P1Home</h4>
  <div class="markdown level1 summary"><p>P1Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P1Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P2Home" data-uid="ERC.Structures.CONTEXT64.P2Home">P2Home</h4>
  <div class="markdown level1 summary"><p>P2Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P2Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P3Home" data-uid="ERC.Structures.CONTEXT64.P3Home">P3Home</h4>
  <div class="markdown level1 summary"><p>P3Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P3Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P4Home" data-uid="ERC.Structures.CONTEXT64.P4Home">P4Home</h4>
  <div class="markdown level1 summary"><p>P4Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P4Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P5Home" data-uid="ERC.Structures.CONTEXT64.P5Home">P5Home</h4>
  <div class="markdown level1 summary"><p>P5Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P5Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_P6Home" data-uid="ERC.Structures.CONTEXT64.P6Home">P6Home</h4>
  <div class="markdown level1 summary"><p>P6Home</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong P6Home</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R10" data-uid="ERC.Structures.CONTEXT64.R10">R10</h4>
  <div class="markdown level1 summary"><p>R10</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R11" data-uid="ERC.Structures.CONTEXT64.R11">R11</h4>
  <div class="markdown level1 summary"><p>R11</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R12" data-uid="ERC.Structures.CONTEXT64.R12">R12</h4>
  <div class="markdown level1 summary"><p>R12</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R13" data-uid="ERC.Structures.CONTEXT64.R13">R13</h4>
  <div class="markdown level1 summary"><p>R13</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R14" data-uid="ERC.Structures.CONTEXT64.R14">R14</h4>
  <div class="markdown level1 summary"><p>R14</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R15" data-uid="ERC.Structures.CONTEXT64.R15">R15</h4>
  <div class="markdown level1 summary"><p>R15</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R8" data-uid="ERC.Structures.CONTEXT64.R8">R8</h4>
  <div class="markdown level1 summary"><p>R8</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_R9" data-uid="ERC.Structures.CONTEXT64.R9">R9</h4>
  <div class="markdown level1 summary"><p>R9</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong R9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rax" data-uid="ERC.Structures.CONTEXT64.Rax">Rax</h4>
  <div class="markdown level1 summary"><p>Rax</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rbp" data-uid="ERC.Structures.CONTEXT64.Rbp">Rbp</h4>
  <div class="markdown level1 summary"><p>Rbp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rbx" data-uid="ERC.Structures.CONTEXT64.Rbx">Rbx</h4>
  <div class="markdown level1 summary"><p>Rbx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rcx" data-uid="ERC.Structures.CONTEXT64.Rcx">Rcx</h4>
  <div class="markdown level1 summary"><p>Rcx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rdi" data-uid="ERC.Structures.CONTEXT64.Rdi">Rdi</h4>
  <div class="markdown level1 summary"><p>Rdi</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rdx" data-uid="ERC.Structures.CONTEXT64.Rdx">Rdx</h4>
  <div class="markdown level1 summary"><p>Rdx</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rip" data-uid="ERC.Structures.CONTEXT64.Rip">Rip</h4>
  <div class="markdown level1 summary"><p>Rip</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rip</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rsi" data-uid="ERC.Structures.CONTEXT64.Rsi">Rsi</h4>
  <div class="markdown level1 summary"><p>Rsi</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_Rsp" data-uid="ERC.Structures.CONTEXT64.Rsp">Rsp</h4>
  <div class="markdown level1 summary"><p>Rsp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong Rsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegCs" data-uid="ERC.Structures.CONTEXT64.SegCs">SegCs</h4>
  <div class="markdown level1 summary"><p>SegCs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegCs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegDs" data-uid="ERC.Structures.CONTEXT64.SegDs">SegDs</h4>
  <div class="markdown level1 summary"><p>SegDs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegDs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegEs" data-uid="ERC.Structures.CONTEXT64.SegEs">SegEs</h4>
  <div class="markdown level1 summary"><p>SegEs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegEs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegFs" data-uid="ERC.Structures.CONTEXT64.SegFs">SegFs</h4>
  <div class="markdown level1 summary"><p>SegFs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegFs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegGs" data-uid="ERC.Structures.CONTEXT64.SegGs">SegGs</h4>
  <div class="markdown level1 summary"><p>SegGs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegGs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_SegSs" data-uid="ERC.Structures.CONTEXT64.SegSs">SegSs</h4>
  <div class="markdown level1 summary"><p>SegSs</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SegSs</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_VectorControl" data-uid="ERC.Structures.CONTEXT64.VectorControl">VectorControl</h4>
  <div class="markdown level1 summary"><p>VectorControl</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong VectorControl</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_CONTEXT64_VectorRegister" data-uid="ERC.Structures.CONTEXT64.VectorRegister">VectorRegister</h4>
  <div class="markdown level1 summary"><p>VectorRegister</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public M128A[] VectorRegister</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.M128A.html">M128A</a>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Structures_CONTEXT64_ToString_" data-uid="ERC.Structures.CONTEXT64.ToString*"></a>
  <h4 id="ERC_Structures_CONTEXT64_ToString" data-uid="ERC.Structures.CONTEXT64.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Overridden ToString method, returns register values for the current thread.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>String</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.ValueType.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.CONTEXT_FLAGS.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum CONTEXT_FLAGS
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum CONTEXT_FLAGS
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.CONTEXT_FLAGS">
  
  
  <h1 id="ERC_Structures_CONTEXT_FLAGS" data-uid="ERC.Structures.CONTEXT_FLAGS" class="text-break">Enum CONTEXT_FLAGS
  </h1>
  <div class="markdown level0 summary"><p>CONTEXT_FLAGS</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_CONTEXT_FLAGS_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum CONTEXT_FLAGS : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_ALL">CONTEXT_ALL</td>
        <td><p>CONTEXT_ALL</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_CONTROL">CONTEXT_CONTROL</td>
        <td><p>CONTEXT_CONTROL</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_DEBUG_REGISTERS">CONTEXT_DEBUG_REGISTERS</td>
        <td><p>CONTEXT_DEBUG_REGISTERS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_EXTENDED_REGISTERS">CONTEXT_EXTENDED_REGISTERS</td>
        <td><p>CONTEXT_EXTENDED_REGISTERS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_FLOATING_POINT">CONTEXT_FLOATING_POINT</td>
        <td><p>CONTEXT_FLOATING_POINT</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_FULL">CONTEXT_FULL</td>
        <td><p>CONTEXT_FULL</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_i386">CONTEXT_i386</td>
        <td><p>CONTEXT_i386</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_i486">CONTEXT_i486</td>
        <td><p>CONTEXT_i486</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_INTEGER">CONTEXT_INTEGER</td>
        <td><p>CONTEXT_INTEGER</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_CONTEXT_FLAGS_CONTEXT_SEGMENTS">CONTEXT_SEGMENTS</td>
        <td><p>CONTEXT_SEGMENTS</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.ClientID.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct ClientID
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct ClientID
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.ClientID">
  
  
  <h1 id="ERC_Structures_ClientID" data-uid="ERC.Structures.ClientID" class="text-break">Struct ClientID
  </h1>
  <div class="markdown level0 summary"><p>ClientID</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_ClientID_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct ClientID</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_ClientID_ProcessId" data-uid="ERC.Structures.ClientID.ProcessId">ProcessId</h4>
  <div class="markdown level1 summary"><p>ProcessID</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ProcessId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ClientID_ThreadId" data-uid="ERC.Structures.ClientID.ThreadId">ThreadId</h4>
  <div class="markdown level1 summary"><p>ThreadID</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ThreadId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.FLOATING_SAVE_AREA.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct FLOATING_SAVE_AREA
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct FLOATING_SAVE_AREA
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.FLOATING_SAVE_AREA">
  
  
  <h1 id="ERC_Structures_FLOATING_SAVE_AREA" data-uid="ERC.Structures.FLOATING_SAVE_AREA" class="text-break">Struct FLOATING_SAVE_AREA
  </h1>
  <div class="markdown level0 summary"><p>x86 Save area data. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_FLOATING_SAVE_AREA_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct FLOATING_SAVE_AREA</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_ControlWord" data-uid="ERC.Structures.FLOATING_SAVE_AREA.ControlWord">ControlWord</h4>
  <div class="markdown level1 summary"><p>ControlWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ControlWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_Cr0NpxState" data-uid="ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState">Cr0NpxState</h4>
  <div class="markdown level1 summary"><p>Cr0NpxState</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Cr0NpxState</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_DataOffset" data-uid="ERC.Structures.FLOATING_SAVE_AREA.DataOffset">DataOffset</h4>
  <div class="markdown level1 summary"><p>DataOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DataOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_DataSelector" data-uid="ERC.Structures.FLOATING_SAVE_AREA.DataSelector">DataSelector</h4>
  <div class="markdown level1 summary"><p>DataSelector</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DataSelector</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_ErrorOffset" data-uid="ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset">ErrorOffset</h4>
  <div class="markdown level1 summary"><p>ErrorOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ErrorOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_ErrorSelector" data-uid="ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector">ErrorSelector</h4>
  <div class="markdown level1 summary"><p>ErrorSelector</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ErrorSelector</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_RegisterArea" data-uid="ERC.Structures.FLOATING_SAVE_AREA.RegisterArea">RegisterArea</h4>
  <div class="markdown level1 summary"><p>RegisterArea</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] RegisterArea</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_StatusWord" data-uid="ERC.Structures.FLOATING_SAVE_AREA.StatusWord">StatusWord</h4>
  <div class="markdown level1 summary"><p>StatusWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint StatusWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_FLOATING_SAVE_AREA_TagWord" data-uid="ERC.Structures.FLOATING_SAVE_AREA.TagWord">TagWord</h4>
  <div class="markdown level1 summary"><p>TagWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint TagWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_DATA_DIRECTORY.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_DATA_DIRECTORY
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_DATA_DIRECTORY
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_DATA_DIRECTORY">
  
  
  <h1 id="ERC_Structures_IMAGE_DATA_DIRECTORY" data-uid="ERC.Structures.IMAGE_DATA_DIRECTORY" class="text-break">Struct IMAGE_DATA_DIRECTORY
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_DATA_DIRECTORY. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_DATA_DIRECTORY_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_DATA_DIRECTORY</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_DATA_DIRECTORY_Size" data-uid="ERC.Structures.IMAGE_DATA_DIRECTORY.Size">Size</h4>
  <div class="markdown level1 summary"><p>Size.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Size</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_DATA_DIRECTORY_VirtualAddress" data-uid="ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress">VirtualAddress</h4>
  <div class="markdown level1 summary"><p>VirtualAddress.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint VirtualAddress</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_DOS_HEADER.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_DOS_HEADER
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_DOS_HEADER
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_DOS_HEADER">
  
  
  <h1 id="ERC_Structures_IMAGE_DOS_HEADER" data-uid="ERC.Structures.IMAGE_DOS_HEADER" class="text-break">Struct IMAGE_DOS_HEADER
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_DOS_HEADER.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_DOS_HEADER_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_DOS_HEADER</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_DOS_HEADER_nt_head_ptr" data-uid="ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr">nt_head_ptr</h4>
  <div class="markdown level1 summary"><p>A pointer to the IMAGE_NT_HEADER.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int nt_head_ptr</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_FILE_HEADER.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_FILE_HEADER
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_FILE_HEADER
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_FILE_HEADER">
  
  
  <h1 id="ERC_Structures_IMAGE_FILE_HEADER" data-uid="ERC.Structures.IMAGE_FILE_HEADER" class="text-break">Struct IMAGE_FILE_HEADER
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_FILE_HEADER. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_FILE_HEADER_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_FILE_HEADER</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_Characteristics" data-uid="ERC.Structures.IMAGE_FILE_HEADER.Characteristics">Characteristics</h4>
  <div class="markdown level1 summary"><p>Characteristics</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Characteristics</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_Machine" data-uid="ERC.Structures.IMAGE_FILE_HEADER.Machine">Machine</h4>
  <div class="markdown level1 summary"><p>Machine</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Machine</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_NumberOfSections" data-uid="ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections">NumberOfSections</h4>
  <div class="markdown level1 summary"><p>NumberOfSections</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort NumberOfSections</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_NumberOfSymbols" data-uid="ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols">NumberOfSymbols</h4>
  <div class="markdown level1 summary"><p>NumberOfSymbols</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint NumberOfSymbols</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_PointerToSymbolTable" data-uid="ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable">PointerToSymbolTable</h4>
  <div class="markdown level1 summary"><p>PointerToSymbolTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint PointerToSymbolTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_SizeOfOptionalHeader" data-uid="ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader">SizeOfOptionalHeader</h4>
  <div class="markdown level1 summary"><p>SizeOfOptionalHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort SizeOfOptionalHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_FILE_HEADER_TimeDateStamp" data-uid="ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp">TimeDateStamp</h4>
  <div class="markdown level1 summary"><p>TimeDateStamp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint TimeDateStamp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY">
  
  
  <h1 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY" class="text-break">Struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_LOAD_CONFIG_CODE_INTEGRITY.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Catalog" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog">Catalog</h4>
  <div class="markdown level1 summary"><p>Catalog</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Catalog</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_CatalogOffset" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset">CatalogOffset</h4>
  <div class="markdown level1 summary"><p>CatalogOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CatalogOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Flags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags">Flags</h4>
  <div class="markdown level1 summary"><p>Flags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Flags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_CODE_INTEGRITY_Reserved" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved">Reserved</h4>
  <div class="markdown level1 summary"><p>Reserved</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Reserved</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_LOAD_CONFIG_DIRECTORY32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_LOAD_CONFIG_DIRECTORY32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32">
  
  
  <h1 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32" class="text-break">Struct IMAGE_LOAD_CONFIG_DIRECTORY32
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_LOAD_CONFIG_DIRECTORY32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_LOAD_CONFIG_DIRECTORY32</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CHPEMetadataPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer">CHPEMetadataPointer</h4>
  <div class="markdown level1 summary"><p>CHPEMetadataPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CHPEMetadataPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CodeIntegrity" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity">CodeIntegrity</h4>
  <div class="markdown level1 summary"><p>CodeIntegrity</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html">IMAGE_LOAD_CONFIG_CODE_INTEGRITY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CriticalSectionDefaultTimeout" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout">CriticalSectionDefaultTimeout</h4>
  <div class="markdown level1 summary"><p>CriticalSectionDefaultTimeout</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CriticalSectionDefaultTimeout</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_CSDVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion">CSDVersion</h4>
  <div class="markdown level1 summary"><p>CSDVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort CSDVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DeCommitFreeBlockThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold">DeCommitFreeBlockThreshold</h4>
  <div class="markdown level1 summary"><p>DeCommitFreeBlockThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DeCommitFreeBlockThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DeCommitTotalFreeThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold">DeCommitTotalFreeThreshold</h4>
  <div class="markdown level1 summary"><p>DeCommitTotalFreeThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DeCommitTotalFreeThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DependentLoadFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags">DependentLoadFlags</h4>
  <div class="markdown level1 summary"><p>DependentLoadFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DependentLoadFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable">DynamicValueRelocTable</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DynamicValueRelocTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTableOffset" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset">DynamicValueRelocTableOffset</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTableOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DynamicValueRelocTableOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_DynamicValueRelocTableSection" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection">DynamicValueRelocTableSection</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTableSection</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DynamicValueRelocTableSection</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_EditList" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList">EditList</h4>
  <div class="markdown level1 summary"><p>EditList</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint EditList</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_EnclaveConfigurationPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer">EnclaveConfigurationPointer</h4>
  <div class="markdown level1 summary"><p>EnclaveConfigurationPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint EnclaveConfigurationPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GlobalFlagsClear" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear">GlobalFlagsClear</h4>
  <div class="markdown level1 summary"><p>GlobalFlagsClear</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GlobalFlagsClear</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GlobalFlagsSet" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet">GlobalFlagsSet</h4>
  <div class="markdown level1 summary"><p>GlobalFlagsSet</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GlobalFlagsSet</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardAddressTakenIatEntryCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount">GuardAddressTakenIatEntryCount</h4>
  <div class="markdown level1 summary"><p>GuardAddressTakenIatEntryCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardAddressTakenIatEntryCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardAddressTakenIatEntryTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable">GuardAddressTakenIatEntryTable</h4>
  <div class="markdown level1 summary"><p>GuardAddressTakenIatEntryTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardAddressTakenIatEntryTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFCheckFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer">GuardCFCheckFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardCFCheckFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardCFCheckFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFDispatchFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer">GuardCFDispatchFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardCFDispatchFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardCFDispatchFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFFunctionCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount">GuardCFFunctionCount</h4>
  <div class="markdown level1 summary"><p>GuardCFFunctionCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardCFFunctionCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardCFFunctionTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable">GuardCFFunctionTable</h4>
  <div class="markdown level1 summary"><p>GuardCFFunctionTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardCFFunctionTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags">GuardFlags</h4>
  <div class="markdown level1 summary"><p>GuardFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardLongJumpTargetCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount">GuardLongJumpTargetCount</h4>
  <div class="markdown level1 summary"><p>GuardLongJumpTargetCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardLongJumpTargetCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardLongJumpTargetTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable">GuardLongJumpTargetTable</h4>
  <div class="markdown level1 summary"><p>GuardLongJumpTargetTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardLongJumpTargetTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFFailureRoutine" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine">GuardRFFailureRoutine</h4>
  <div class="markdown level1 summary"><p>GuardRFFailureRoutine</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardRFFailureRoutine</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFFailureRoutineFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer">GuardRFFailureRoutineFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardRFFailureRoutineFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardRFFailureRoutineFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_GuardRFVerifyStackPointerFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer">GuardRFVerifyStackPointerFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardRFVerifyStackPointerFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardRFVerifyStackPointerFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_HotPatchTableOffset" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset">HotPatchTableOffset</h4>
  <div class="markdown level1 summary"><p>HotPatchTableOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint HotPatchTableOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_LockPrefixTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable">LockPrefixTable</h4>
  <div class="markdown level1 summary"><p>LockPrefixTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint LockPrefixTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MajorVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion">MajorVersion</h4>
  <div class="markdown level1 summary"><p>MajorVersio</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MaximumAllocationSize" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize">MaximumAllocationSize</h4>
  <div class="markdown level1 summary"><p>MaximumAllocationSize</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint MaximumAllocationSize</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_MinorVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion">MinorVersion</h4>
  <div class="markdown level1 summary"><p>MinorVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_ProcessAffinityMask" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask">ProcessAffinityMask</h4>
  <div class="markdown level1 summary"><p>ProcessAffinityMask</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ProcessAffinityMask</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_ProcessHeapFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags">ProcessHeapFlags</h4>
  <div class="markdown level1 summary"><p>ProcessHeapFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ProcessHeapFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Reserved2" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2">Reserved2</h4>
  <div class="markdown level1 summary"><p>Reserved2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Reserved2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Reserved3" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3">Reserved3</h4>
  <div class="markdown level1 summary"><p>Reserved3</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Reserved3</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SecurityCookie" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie">SecurityCookie</h4>
  <div class="markdown level1 summary"><p>SecurityCookie</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SecurityCookie</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SEHandlerCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount">SEHandlerCount</h4>
  <div class="markdown level1 summary"><p>SEHandlerCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SEHandlerCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_SEHandlerTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable">SEHandlerTable</h4>
  <div class="markdown level1 summary"><p>SEHandlerTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SEHandlerTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_Size" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size">Size</h4>
  <div class="markdown level1 summary"><p>Size</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Size</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_TimeDateStamp" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp">TimeDateStamp</h4>
  <div class="markdown level1 summary"><p>TimeDateStamp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint TimeDateStamp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_VirtualMemoryThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold">VirtualMemoryThreshold</h4>
  <div class="markdown level1 summary"><p>VirtualMemoryThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint VirtualMemoryThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY32_VolatileMetadataPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer">VolatileMetadataPointer</h4>
  <div class="markdown level1 summary"><p>VolatileMetadataPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint VolatileMetadataPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_LOAD_CONFIG_DIRECTORY64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_LOAD_CONFIG_DIRECTORY64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64">
  
  
  <h1 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64" class="text-break">Struct IMAGE_LOAD_CONFIG_DIRECTORY64
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_LOAD_CONFIG_DIRECTORY32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_LOAD_CONFIG_DIRECTORY64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CHPEMetadataPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer">CHPEMetadataPointer</h4>
  <div class="markdown level1 summary"><p>CHPEMetadataPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong CHPEMetadataPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CodeIntegrity" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity">CodeIntegrity</h4>
  <div class="markdown level1 summary"><p>CodeIntegrity</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html">IMAGE_LOAD_CONFIG_CODE_INTEGRITY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CriticalSectionDefaultTimeout" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout">CriticalSectionDefaultTimeout</h4>
  <div class="markdown level1 summary"><p>CriticalSectionDefaultTimeout</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CriticalSectionDefaultTimeout</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_CSDVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion">CSDVersion</h4>
  <div class="markdown level1 summary"><p>CSDVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort CSDVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DeCommitFreeBlockThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold">DeCommitFreeBlockThreshold</h4>
  <div class="markdown level1 summary"><p>DeCommitFreeBlockThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong DeCommitFreeBlockThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DeCommitTotalFreeThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold">DeCommitTotalFreeThreshold</h4>
  <div class="markdown level1 summary"><p>DeCommitTotalFreeThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong DeCommitTotalFreeThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DependentLoadFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags">DependentLoadFlags</h4>
  <div class="markdown level1 summary"><p>DependentLoadFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DependentLoadFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable">DynamicValueRelocTable</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong DynamicValueRelocTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTableOffset" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset">DynamicValueRelocTableOffset</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTableOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DynamicValueRelocTableOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_DynamicValueRelocTableSection" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection">DynamicValueRelocTableSection</h4>
  <div class="markdown level1 summary"><p>DynamicValueRelocTableSection</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DynamicValueRelocTableSection</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_EditList" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList">EditList</h4>
  <div class="markdown level1 summary"><p>EditList</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong EditList</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_EnclaveConfigurationPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer">EnclaveConfigurationPointer</h4>
  <div class="markdown level1 summary"><p>EnclaveConfigurationPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong EnclaveConfigurationPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GlobalFlagsClear" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear">GlobalFlagsClear</h4>
  <div class="markdown level1 summary"><p>GlobalFlagsClear</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GlobalFlagsClear</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GlobalFlagsSet" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet">GlobalFlagsSet</h4>
  <div class="markdown level1 summary"><p>GlobalFlagsSet</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GlobalFlagsSet</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardAddressTakenIatEntryCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount">GuardAddressTakenIatEntryCount</h4>
  <div class="markdown level1 summary"><p>GuardAddressTakenIatEntryCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardAddressTakenIatEntryCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardAddressTakenIatEntryTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable">GuardAddressTakenIatEntryTable</h4>
  <div class="markdown level1 summary"><p>GuardAddressTakenIatEntryTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardAddressTakenIatEntryTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFCheckFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer">GuardCFCheckFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardCFCheckFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardCFCheckFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFDispatchFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer">GuardCFDispatchFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardCFDispatchFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardCFDispatchFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFFunctionCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount">GuardCFFunctionCount</h4>
  <div class="markdown level1 summary"><p>GuardCFFunctionCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardCFFunctionCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardCFFunctionTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable">GuardCFFunctionTable</h4>
  <div class="markdown level1 summary"><p>GuardCFFunctionTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardCFFunctionTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags">GuardFlags</h4>
  <div class="markdown level1 summary"><p>GuardFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint GuardFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardLongJumpTargetCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount">GuardLongJumpTargetCount</h4>
  <div class="markdown level1 summary"><p>GuardLongJumpTargetCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardLongJumpTargetCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardLongJumpTargetTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable">GuardLongJumpTargetTable</h4>
  <div class="markdown level1 summary"><p>GuardLongJumpTargetTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardLongJumpTargetTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFFailureRoutine" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine">GuardRFFailureRoutine</h4>
  <div class="markdown level1 summary"><p>GuardRFFailureRoutine</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardRFFailureRoutine</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFFailureRoutineFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer">GuardRFFailureRoutineFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardRFFailureRoutineFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardRFFailureRoutineFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_GuardRFVerifyStackPointerFunctionPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer">GuardRFVerifyStackPointerFunctionPointer</h4>
  <div class="markdown level1 summary"><p>GuardRFVerifyStackPointerFunctionPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong GuardRFVerifyStackPointerFunctionPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_HotPatchTableOffset" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset">HotPatchTableOffset</h4>
  <div class="markdown level1 summary"><p>HotPatchTableOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint HotPatchTableOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_LockPrefixTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable">LockPrefixTable</h4>
  <div class="markdown level1 summary"><p>LockPrefixTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong LockPrefixTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MajorVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion">MajorVersion</h4>
  <div class="markdown level1 summary"><p>MajorVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MaximumAllocationSize" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize">MaximumAllocationSize</h4>
  <div class="markdown level1 summary"><p>MaximumAllocationSize</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong MaximumAllocationSize</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_MinorVersion" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion">MinorVersion</h4>
  <div class="markdown level1 summary"><p>MinorVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_ProcessAffinityMask" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask">ProcessAffinityMask</h4>
  <div class="markdown level1 summary"><p>ProcessAffinityMask</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong ProcessAffinityMask</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_ProcessHeapFlags" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags">ProcessHeapFlags</h4>
  <div class="markdown level1 summary"><p>ProcessHeapFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ProcessHeapFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Reserved2" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2">Reserved2</h4>
  <div class="markdown level1 summary"><p>Reserved2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Reserved2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Reserved3" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3">Reserved3</h4>
  <div class="markdown level1 summary"><p>Reserved3</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Reserved3</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SecurityCookie" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie">SecurityCookie</h4>
  <div class="markdown level1 summary"><p>SecurityCookie</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SecurityCookie</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SEHandlerCount" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount">SEHandlerCount</h4>
  <div class="markdown level1 summary"><p>SEHandlerCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SEHandlerCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_SEHandlerTable" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable">SEHandlerTable</h4>
  <div class="markdown level1 summary"><p>SEHandlerTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SEHandlerTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_Size" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size">Size</h4>
  <div class="markdown level1 summary"><p>Size</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Size</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_TimeDateStamp" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp">TimeDateStamp</h4>
  <div class="markdown level1 summary"><p>TimeDateStamp</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint TimeDateStamp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_VirtualMemoryThreshold" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold">VirtualMemoryThreshold</h4>
  <div class="markdown level1 summary"><p>VirtualMemoryThreshold</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong VirtualMemoryThreshold</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_LOAD_CONFIG_DIRECTORY64_VolatileMetadataPointer" data-uid="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer">VolatileMetadataPointer</h4>
  <div class="markdown level1 summary"><p>VolatileMetadataPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong VolatileMetadataPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_NT_HEADERS32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_NT_HEADERS32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_NT_HEADERS32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_NT_HEADERS32">
  
  
  <h1 id="ERC_Structures_IMAGE_NT_HEADERS32" data-uid="ERC.Structures.IMAGE_NT_HEADERS32" class="text-break">Struct IMAGE_NT_HEADERS32
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_NT_HEADER 32 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_NT_HEADERS32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_NT_HEADERS32</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS32_FileHeader" data-uid="ERC.Structures.IMAGE_NT_HEADERS32.FileHeader">FileHeader</h4>
  <div class="markdown level1 summary"><p>FileHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_FILE_HEADER FileHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_FILE_HEADER.html">IMAGE_FILE_HEADER</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS32_OptionalHeader" data-uid="ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader">OptionalHeader</h4>
  <div class="markdown level1 summary"><p>OptionalHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_OPTIONAL_HEADER32 OptionalHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_OPTIONAL_HEADER32.html">IMAGE_OPTIONAL_HEADER32</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS32_Signature" data-uid="ERC.Structures.IMAGE_NT_HEADERS32.Signature">Signature</h4>
  <div class="markdown level1 summary"><p>Signature</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Signature</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_NT_HEADERS64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_NT_HEADERS64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_NT_HEADERS64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_NT_HEADERS64">
  
  
  <h1 id="ERC_Structures_IMAGE_NT_HEADERS64" data-uid="ERC.Structures.IMAGE_NT_HEADERS64" class="text-break">Struct IMAGE_NT_HEADERS64
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_NT_HEADER 64 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_NT_HEADERS64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_NT_HEADERS64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS64_FileHeader" data-uid="ERC.Structures.IMAGE_NT_HEADERS64.FileHeader">FileHeader</h4>
  <div class="markdown level1 summary"><p>FileHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_FILE_HEADER FileHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_FILE_HEADER.html">IMAGE_FILE_HEADER</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS64_OptionalHeader" data-uid="ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader">OptionalHeader</h4>
  <div class="markdown level1 summary"><p>OptionalHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_OPTIONAL_HEADER64 OptionalHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_OPTIONAL_HEADER64.html">IMAGE_OPTIONAL_HEADER64</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_NT_HEADERS64_Signature" data-uid="ERC.Structures.IMAGE_NT_HEADERS64.Signature">Signature</h4>
  <div class="markdown level1 summary"><p>Signature</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Signature</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_OPTIONAL_HEADER32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_OPTIONAL_HEADER32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_OPTIONAL_HEADER32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32">
  
  
  <h1 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32" class="text-break">Struct IMAGE_OPTIONAL_HEADER32
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_OPTIONAL_HEADER 32 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_OPTIONAL_HEADER32</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_AddressOfEntryPoint" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint">AddressOfEntryPoint</h4>
  <div class="markdown level1 summary"><p>AddressOfEntryPoint</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint AddressOfEntryPoint</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Architecture" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture">Architecture</h4>
  <div class="markdown level1 summary"><p>Architecture</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Architecture</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseOfCode" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode">BaseOfCode</h4>
  <div class="markdown level1 summary"><p>BaseOfCode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint BaseOfCode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseOfData" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData">BaseOfData</h4>
  <div class="markdown level1 summary"><p>BaseOfData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint BaseOfData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_BaseRelocationTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable">BaseRelocationTable</h4>
  <div class="markdown level1 summary"><p>BaseRelocationTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY BaseRelocationTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_BoundImport" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport">BoundImport</h4>
  <div class="markdown level1 summary"><p>BoundImport</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY BoundImport</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_CertificateTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable">CertificateTable</h4>
  <div class="markdown level1 summary"><p>CertificateTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY CertificateTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_CheckSum" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum">CheckSum</h4>
  <div class="markdown level1 summary"><p>CheckSum</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CheckSum</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_CLRRuntimeHeader" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader">CLRRuntimeHeader</h4>
  <div class="markdown level1 summary"><p>CLRRuntimeHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY CLRRuntimeHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Debug" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug">Debug</h4>
  <div class="markdown level1 summary"><p>Debug</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Debug</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_DelayImportDescriptor" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor">DelayImportDescriptor</h4>
  <div class="markdown level1 summary"><p>DelayImportDescriptor</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY DelayImportDescriptor</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_DllCharacteristics" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics">DllCharacteristics</h4>
  <div class="markdown level1 summary"><p>DllCharacteristics</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DllCharacteristics</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_ExceptionTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable">ExceptionTable</h4>
  <div class="markdown level1 summary"><p>ExceptionTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ExceptionTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_ExportTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable">ExportTable</h4>
  <div class="markdown level1 summary"><p>ExportTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ExportTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_FileAlignment" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment">FileAlignment</h4>
  <div class="markdown level1 summary"><p>FileAlignment</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint FileAlignment</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_GlobalPtr" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr">GlobalPtr</h4>
  <div class="markdown level1 summary"><p>GlobalPtr</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY GlobalPtr</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_IAT" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT">IAT</h4>
  <div class="markdown level1 summary"><p>IAT</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY IAT</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_ImageBase" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase">ImageBase</h4>
  <div class="markdown level1 summary"><p>ImageBase</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ImageBase</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_ImportTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable">ImportTable</h4>
  <div class="markdown level1 summary"><p>ImportTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ImportTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_LoadConfigTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable">LoadConfigTable</h4>
  <div class="markdown level1 summary"><p>LoadConfigTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY LoadConfigTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_LoaderFlags" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags">LoaderFlags</h4>
  <div class="markdown level1 summary"><p>LoaderFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint LoaderFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Magic" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic">Magic</h4>
  <div class="markdown level1 summary"><p>Magic</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public MagicType Magic</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.MagicType.html">MagicType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorImageVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion">MajorImageVersion</h4>
  <div class="markdown level1 summary"><p>MajorImageVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorImageVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorLinkerVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion">MajorLinkerVersion</h4>
  <div class="markdown level1 summary"><p>MajorLinkerVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte MajorLinkerVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorOperatingSystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion">MajorOperatingSystemVersion</h4>
  <div class="markdown level1 summary"><p>MajorOperatingSystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorOperatingSystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MajorSubsystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion">MajorSubsystemVersion</h4>
  <div class="markdown level1 summary"><p>MajorSubsystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorSubsystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorImageVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion">MinorImageVersion</h4>
  <div class="markdown level1 summary"><p>MinorImageVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorImageVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorLinkerVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion">MinorLinkerVersion</h4>
  <div class="markdown level1 summary"><p>MinorLinkerVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte MinorLinkerVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorOperatingSystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion">MinorOperatingSystemVersion</h4>
  <div class="markdown level1 summary"><p>MinorOperatingSystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorOperatingSystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_MinorSubsystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion">MinorSubsystemVersion</h4>
  <div class="markdown level1 summary"><p>MinorSubsystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorSubsystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_NumberOfRvaAndSizes" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes">NumberOfRvaAndSizes</h4>
  <div class="markdown level1 summary"><p>NumberOfRvaAndSizes</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint NumberOfRvaAndSizes</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Reserved" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved">Reserved</h4>
  <div class="markdown level1 summary"><p>Reserved</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Reserved</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_ResourceTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable">ResourceTable</h4>
  <div class="markdown level1 summary"><p>ResourceTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ResourceTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SectionAlignment" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment">SectionAlignment</h4>
  <div class="markdown level1 summary"><p>SectionAlignment</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SectionAlignment</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfCode" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode">SizeOfCode</h4>
  <div class="markdown level1 summary"><p>SizeOfCode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfCode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeaders" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders">SizeOfHeaders</h4>
  <div class="markdown level1 summary"><p>SizeOfHeaders</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfHeaders</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeapCommit" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit">SizeOfHeapCommit</h4>
  <div class="markdown level1 summary"><p>SizeOfHeapCommit</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfHeapCommit</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfHeapReserve" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve">SizeOfHeapReserve</h4>
  <div class="markdown level1 summary"><p>SizeOfHeapReserve</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfHeapReserve</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfImage" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage">SizeOfImage</h4>
  <div class="markdown level1 summary"><p>SizeOfImage</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfImage</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfInitializedData" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData">SizeOfInitializedData</h4>
  <div class="markdown level1 summary"><p>SizeOfInitializedData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfInitializedData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfStackCommit" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit">SizeOfStackCommit</h4>
  <div class="markdown level1 summary"><p>SizeOfStackCommit</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfStackCommit</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfStackReserve" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve">SizeOfStackReserve</h4>
  <div class="markdown level1 summary"><p>SizeOfStackReserve</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfStackReserve</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_SizeOfUninitializedData" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData">SizeOfUninitializedData</h4>
  <div class="markdown level1 summary"><p>SizeOfUninitializedData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfUninitializedData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Subsystem" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem">Subsystem</h4>
  <div class="markdown level1 summary"><p>Subsystem</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SubSystemType Subsystem</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.SubSystemType.html">SubSystemType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_TLSTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable">TLSTable</h4>
  <div class="markdown level1 summary"><p>TLSTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY TLSTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER32_Win32VersionValue" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue">Win32VersionValue</h4>
  <div class="markdown level1 summary"><p>Win32VersionValue</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Win32VersionValue</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.IMAGE_OPTIONAL_HEADER64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct IMAGE_OPTIONAL_HEADER64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct IMAGE_OPTIONAL_HEADER64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64">
  
  
  <h1 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64" class="text-break">Struct IMAGE_OPTIONAL_HEADER64
  </h1>
  <div class="markdown level0 summary"><p>IMAGE_OPTIONAL_HEADER 64 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct IMAGE_OPTIONAL_HEADER64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_AddressOfEntryPoint" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint">AddressOfEntryPoint</h4>
  <div class="markdown level1 summary"><p>AddressOfEntryPoint</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint AddressOfEntryPoint</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Architecture" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture">Architecture</h4>
  <div class="markdown level1 summary"><p>Architecture</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Architecture</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_BaseOfCode" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode">BaseOfCode</h4>
  <div class="markdown level1 summary"><p>BaseOfCode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint BaseOfCode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_BaseRelocationTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable">BaseRelocationTable</h4>
  <div class="markdown level1 summary"><p>BaseRelocationTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY BaseRelocationTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_BoundImport" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport">BoundImport</h4>
  <div class="markdown level1 summary"><p>BoundImport</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY BoundImport</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_CertificateTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable">CertificateTable</h4>
  <div class="markdown level1 summary"><p>CertificateTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY CertificateTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_CheckSum" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum">CheckSum</h4>
  <div class="markdown level1 summary"><p>CheckSum</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint CheckSum</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_CLRRuntimeHeader" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader">CLRRuntimeHeader</h4>
  <div class="markdown level1 summary"><p>CLRRuntimeHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY CLRRuntimeHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Debug" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug">Debug</h4>
  <div class="markdown level1 summary"><p>Debug</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Debug</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_DelayImportDescriptor" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor">DelayImportDescriptor</h4>
  <div class="markdown level1 summary"><p>DelayImportDescriptor</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY DelayImportDescriptor</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_DllCharacteristics" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics">DllCharacteristics</h4>
  <div class="markdown level1 summary"><p>DllCharacteristics</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DllCharacteristics</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_ExceptionTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable">ExceptionTable</h4>
  <div class="markdown level1 summary"><p>ExceptionTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ExceptionTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_ExportTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable">ExportTable</h4>
  <div class="markdown level1 summary"><p>ExportTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ExportTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_FileAlignment" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment">FileAlignment</h4>
  <div class="markdown level1 summary"><p>FileAlignment</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint FileAlignment</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_GlobalPtr" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr">GlobalPtr</h4>
  <div class="markdown level1 summary"><p>GlobalPtr</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY GlobalPtr</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_IAT" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT">IAT</h4>
  <div class="markdown level1 summary"><p>IAT</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY IAT</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_ImageBase" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase">ImageBase</h4>
  <div class="markdown level1 summary"><p>ImageBase</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong ImageBase</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_ImportTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable">ImportTable</h4>
  <div class="markdown level1 summary"><p>ImportTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ImportTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_LoadConfigTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable">LoadConfigTable</h4>
  <div class="markdown level1 summary"><p>LoadConfigTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY LoadConfigTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_LoaderFlags" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags">LoaderFlags</h4>
  <div class="markdown level1 summary"><p>LoaderFlags</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint LoaderFlags</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Magic" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic">Magic</h4>
  <div class="markdown level1 summary"><p>Magic</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public MagicType Magic</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.MagicType.html">MagicType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorImageVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion">MajorImageVersion</h4>
  <div class="markdown level1 summary"><p>MajorImageVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorImageVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorLinkerVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion">MajorLinkerVersion</h4>
  <div class="markdown level1 summary"><p>MajorLinkerVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte MajorLinkerVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorOperatingSystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion">MajorOperatingSystemVersion</h4>
  <div class="markdown level1 summary"><p>MajorOperatingSystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorOperatingSystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MajorSubsystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion">MajorSubsystemVersion</h4>
  <div class="markdown level1 summary"><p>MajorSubsystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MajorSubsystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorImageVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion">MinorImageVersion</h4>
  <div class="markdown level1 summary"><p>MinorImageVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorImageVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorLinkerVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion">MinorLinkerVersion</h4>
  <div class="markdown level1 summary"><p>MinorLinkerVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte MinorLinkerVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorOperatingSystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion">MinorOperatingSystemVersion</h4>
  <div class="markdown level1 summary"><p>MinorOperatingSystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorOperatingSystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_MinorSubsystemVersion" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion">MinorSubsystemVersion</h4>
  <div class="markdown level1 summary"><p>MinorSubsystemVersion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort MinorSubsystemVersion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_NumberOfRvaAndSizes" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes">NumberOfRvaAndSizes</h4>
  <div class="markdown level1 summary"><p>NumberOfRvaAndSizes</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint NumberOfRvaAndSizes</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Reserved" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved">Reserved</h4>
  <div class="markdown level1 summary"><p>Reserved</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY Reserved</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_ResourceTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable">ResourceTable</h4>
  <div class="markdown level1 summary"><p>ResourceTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY ResourceTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SectionAlignment" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment">SectionAlignment</h4>
  <div class="markdown level1 summary"><p>SectionAlignment</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SectionAlignment</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfCode" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode">SizeOfCode</h4>
  <div class="markdown level1 summary"><p>SizeOfCode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfCode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeaders" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders">SizeOfHeaders</h4>
  <div class="markdown level1 summary"><p>SizeOfHeaders</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfHeaders</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeapCommit" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit">SizeOfHeapCommit</h4>
  <div class="markdown level1 summary"><p>SizeOfHeapCommit</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SizeOfHeapCommit</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfHeapReserve" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve">SizeOfHeapReserve</h4>
  <div class="markdown level1 summary"><p>SizeOfHeapReserve</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SizeOfHeapReserve</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfImage" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage">SizeOfImage</h4>
  <div class="markdown level1 summary"><p>SizeOfImage</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfImage</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfInitializedData" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData">SizeOfInitializedData</h4>
  <div class="markdown level1 summary"><p>SizeOfInitializedData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfInitializedData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfStackCommit" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit">SizeOfStackCommit</h4>
  <div class="markdown level1 summary"><p>SizeOfStackCommit</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SizeOfStackCommit</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfStackReserve" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve">SizeOfStackReserve</h4>
  <div class="markdown level1 summary"><p>SizeOfStackReserve</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong SizeOfStackReserve</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_SizeOfUninitializedData" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData">SizeOfUninitializedData</h4>
  <div class="markdown level1 summary"><p>SizeOfUninitializedData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfUninitializedData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Subsystem" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem">Subsystem</h4>
  <div class="markdown level1 summary"><p>Subsystem</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SubSystemType Subsystem</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.SubSystemType.html">SubSystemType</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_TLSTable" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable">TLSTable</h4>
  <div class="markdown level1 summary"><p>TLSTable</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IMAGE_DATA_DIRECTORY TLSTable</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_IMAGE_OPTIONAL_HEADER64_Win32VersionValue" data-uid="ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue">Win32VersionValue</h4>
  <div class="markdown level1 summary"><p>Win32VersionValue</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Win32VersionValue</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.LIST_ENTRY.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct LIST_ENTRY
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct LIST_ENTRY
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.LIST_ENTRY">
  
  
  <h1 id="ERC_Structures_LIST_ENTRY" data-uid="ERC.Structures.LIST_ENTRY" class="text-break">Struct LIST_ENTRY
  </h1>
  <div class="markdown level0 summary"><p>Describes an entry in a doubly linked list or serves as the header for such a list. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry">https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_LIST_ENTRY_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct LIST_ENTRY</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_LIST_ENTRY_Blink" data-uid="ERC.Structures.LIST_ENTRY.Blink">Blink</h4>
  <div class="markdown level1 summary"><p>Blink points to the previous entry in the list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Blink</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LIST_ENTRY_Flink" data-uid="ERC.Structures.LIST_ENTRY.Flink">Flink</h4>
  <div class="markdown level1 summary"><p>Flink points to the next entry in the list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Flink</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.LOADED_IMAGE.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct LOADED_IMAGE
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct LOADED_IMAGE
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.LOADED_IMAGE">
  
  
  <h1 id="ERC_Structures_LOADED_IMAGE" data-uid="ERC.Structures.LOADED_IMAGE" class="text-break">Struct LOADED_IMAGE
  </h1>
  <div class="markdown level0 summary"><p>LOADED_IMAGE. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image">https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_LOADED_IMAGE_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct LOADED_IMAGE</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_Characteristics" data-uid="ERC.Structures.LOADED_IMAGE.Characteristics">Characteristics</h4>
  <div class="markdown level1 summary"><p>Characteristics</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Characteristics</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_fDOSImage" data-uid="ERC.Structures.LOADED_IMAGE.fDOSImage">fDOSImage</h4>
  <div class="markdown level1 summary"><p>fDOSImage</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool fDOSImage</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_FileHeader" data-uid="ERC.Structures.LOADED_IMAGE.FileHeader">FileHeader</h4>
  <div class="markdown level1 summary"><p>FileHeader</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr FileHeader</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_fReadOnly" data-uid="ERC.Structures.LOADED_IMAGE.fReadOnly">fReadOnly</h4>
  <div class="markdown level1 summary"><p>fReadOnly</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool fReadOnly</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_fSystemImage" data-uid="ERC.Structures.LOADED_IMAGE.fSystemImage">fSystemImage</h4>
  <div class="markdown level1 summary"><p>fSystemImage</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool fSystemImage</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_hFile" data-uid="ERC.Structures.LOADED_IMAGE.hFile">hFile</h4>
  <div class="markdown level1 summary"><p>hFile</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr hFile</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_LastRvaSection" data-uid="ERC.Structures.LOADED_IMAGE.LastRvaSection">LastRvaSection</h4>
  <div class="markdown level1 summary"><p>LastRvaSection</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr LastRvaSection</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_Links" data-uid="ERC.Structures.LOADED_IMAGE.Links">Links</h4>
  <div class="markdown level1 summary"><p>Links</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public LIST_ENTRY Links</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.LIST_ENTRY.html">LIST_ENTRY</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_MappedAddress" data-uid="ERC.Structures.LOADED_IMAGE.MappedAddress">MappedAddress</h4>
  <div class="markdown level1 summary"><p>MappedAddress</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr MappedAddress</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_ModuleName" data-uid="ERC.Structures.LOADED_IMAGE.ModuleName">ModuleName</h4>
  <div class="markdown level1 summary"><p>ModuleName</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ModuleName</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_NumberOfSections" data-uid="ERC.Structures.LOADED_IMAGE.NumberOfSections">NumberOfSections</h4>
  <div class="markdown level1 summary"><p>NumberOfSections</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint NumberOfSections</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_Sections" data-uid="ERC.Structures.LOADED_IMAGE.Sections">Sections</h4>
  <div class="markdown level1 summary"><p>Sections</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Sections</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_SizeOfImage" data-uid="ERC.Structures.LOADED_IMAGE.SizeOfImage">SizeOfImage</h4>
  <div class="markdown level1 summary"><p>SizeOfImage</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint SizeOfImage</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_LOADED_IMAGE_Version" data-uid="ERC.Structures.LOADED_IMAGE.Version">Version</h4>
  <div class="markdown level1 summary"><p>Version</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte Version</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.LoadLibraryFlags.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum LoadLibraryFlags
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum LoadLibraryFlags
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.LoadLibraryFlags">
  
  
  <h1 id="ERC_Structures_LoadLibraryFlags" data-uid="ERC.Structures.LoadLibraryFlags" class="text-break">Enum LoadLibraryFlags
  </h1>
  <div class="markdown level0 summary"><p>LoadLibraryFlags</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_LoadLibraryFlags_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Flags]
public enum LoadLibraryFlags : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_DONT_RESOLVE_DLL_REFERENCES">DONT_RESOLVE_DLL_REFERENCES</td>
        <td><p>DONT_RESOLVE_DLL_REFERENCES</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_IGNORE_CODE_AUTHZ_LEVEL">LOAD_IGNORE_CODE_AUTHZ_LEVEL</td>
        <td><p>LOAD_IGNORE_CODE_AUTHZ_LEVEL</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_DATAFILE">LOAD_LIBRARY_AS_DATAFILE</td>
        <td><p>LOAD_LIBRARY_AS_DATAFILE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE</td>
        <td><p>LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_AS_IMAGE_RESOURCE">LOAD_LIBRARY_AS_IMAGE_RESOURCE</td>
        <td><p>LOAD_LIBRARY_AS_IMAGE_RESOURCE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_APPLICATION_DIR">LOAD_LIBRARY_SEARCH_APPLICATION_DIR</td>
        <td><p>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">LOAD_LIBRARY_SEARCH_DEFAULT_DIRS</td>
        <td><p>LOAD_LIBRARY_SEARCH_DEFAULT_DIRS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR</td>
        <td><p>LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_SYSTEM32">LOAD_LIBRARY_SEARCH_SYSTEM32</td>
        <td><p>LOAD_LIBRARY_SEARCH_SYSTEM32</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_LIBRARY_SEARCH_USER_DIRS">LOAD_LIBRARY_SEARCH_USER_DIRS</td>
        <td><p>LOAD_LIBRARY_SEARCH_USER_DIRS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_LOAD_WITH_ALTERED_SEARCH_PATH">LOAD_WITH_ALTERED_SEARCH_PATH</td>
        <td><p>LOAD_WITH_ALTERED_SEARCH_PATH</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_LoadLibraryFlags_None">None</td>
        <td><p>None</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.M128A.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct M128A
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct M128A
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.M128A">
  
  
  <h1 id="ERC_Structures_M128A" data-uid="ERC.Structures.M128A" class="text-break">Struct M128A
  </h1>
  <div class="markdown level0 summary"><p>M128A</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_M128A_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct M128A</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_M128A_High" data-uid="ERC.Structures.M128A.High">High</h4>
  <div class="markdown level1 summary"><p>High</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong High</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_M128A_Low" data-uid="ERC.Structures.M128A.Low">Low</h4>
  <div class="markdown level1 summary"><p>Low</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public long Low</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Structures_M128A_ToString_" data-uid="ERC.Structures.M128A.ToString*"></a>
  <h4 id="ERC_Structures_M128A_ToString" data-uid="ERC.Structures.M128A.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>ToString Override</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>Returns a String</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.ValueType.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.MEMORY_BASIC_INFORMATION32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct MEMORY_BASIC_INFORMATION32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct MEMORY_BASIC_INFORMATION32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32">
  
  
  <h1 id="ERC_Structures_MEMORY_BASIC_INFORMATION32" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32" class="text-break">Struct MEMORY_BASIC_INFORMATION32
  </h1>
  <div class="markdown level0 summary"><p>MEMORY_BASIC_INFORMATION32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct MEMORY_BASIC_INFORMATION32</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_AllocationBase" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase">AllocationBase</h4>
  <div class="markdown level1 summary"><p>AllocationBase</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr AllocationBase</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_AllocationProtect" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect">AllocationProtect</h4>
  <div class="markdown level1 summary"><p>AllocationProtec</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint AllocationProtect</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_BaseAddress" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress">BaseAddress</h4>
  <div class="markdown level1 summary"><p>BaseAddress</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr BaseAddress</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_Protect" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect">Protect</h4>
  <div class="markdown level1 summary"><p>Protect</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Protect</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_RegionSize" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize">RegionSize</h4>
  <div class="markdown level1 summary"><p>RegionSize</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr RegionSize</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_State" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.State">State</h4>
  <div class="markdown level1 summary"><p>State</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public StateEnum State</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.StateEnum.html">StateEnum</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION32_Type" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION32.Type">Type</h4>
  <div class="markdown level1 summary"><p>Type</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public TypeEnum Type</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.TypeEnum.html">TypeEnum</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.MEMORY_BASIC_INFORMATION64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct MEMORY_BASIC_INFORMATION64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct MEMORY_BASIC_INFORMATION64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64">
  
  
  <h1 id="ERC_Structures_MEMORY_BASIC_INFORMATION64" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64" class="text-break">Struct MEMORY_BASIC_INFORMATION64
  </h1>
  <div class="markdown level0 summary"><p>MEMORY_BASIC_INFORMATION32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information</a></p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct MEMORY_BASIC_INFORMATION64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64___alignment1" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1">__alignment1</h4>
  <div class="markdown level1 summary"><p>__alignment1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int __alignment1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64___alignment2" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2">__alignment2</h4>
  <div class="markdown level1 summary"><p>__alignment2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int __alignment2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_AllocationBase" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase">AllocationBase</h4>
  <div class="markdown level1 summary"><p>AllocationBase</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong AllocationBase</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_AllocationProtect" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect">AllocationProtect</h4>
  <div class="markdown level1 summary"><p>AllocationProtect</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint AllocationProtect</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_BaseAddress" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress">BaseAddress</h4>
  <div class="markdown level1 summary"><p>BaseAddress</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong BaseAddress</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_Protect" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect">Protect</h4>
  <div class="markdown level1 summary"><p>Protect</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int Protect</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_RegionSize" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize">RegionSize</h4>
  <div class="markdown level1 summary"><p>RegionSize</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ulong RegionSize</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_State" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.State">State</h4>
  <div class="markdown level1 summary"><p>State</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public StateEnum State</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.StateEnum.html">StateEnum</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_MEMORY_BASIC_INFORMATION64_Type" data-uid="ERC.Structures.MEMORY_BASIC_INFORMATION64.Type">Type</h4>
  <div class="markdown level1 summary"><p>Type</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public TypeEnum Type</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.TypeEnum.html">TypeEnum</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.MagicType.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum MagicType
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum MagicType
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.MagicType">
  
  
  <h1 id="ERC_Structures_MagicType" data-uid="ERC.Structures.MagicType" class="text-break">Enum MagicType
  </h1>
  <div class="markdown level0 summary"><p>Image Option Header Magic Type.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_MagicType_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum MagicType : ushort</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_MagicType_IMAGE_NT_OPTIONAL_HDR32_MAGIC">IMAGE_NT_OPTIONAL_HDR32_MAGIC</td>
        <td><p>IMAGE_NT_OPTIONAL_HDR32_MAGIC</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_MagicType_IMAGE_NT_OPTIONAL_HDR64_MAGIC">IMAGE_NT_OPTIONAL_HDR64_MAGIC</td>
        <td><p>IMAGE_NT_OPTIONAL_HDR64_MAGIC</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.ProcessAccessFlags.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum ProcessAccessFlags
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum ProcessAccessFlags
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.ProcessAccessFlags">
  
  
  <h1 id="ERC_Structures_ProcessAccessFlags" data-uid="ERC.Structures.ProcessAccessFlags" class="text-break">Enum ProcessAccessFlags
  </h1>
  <div class="markdown level0 summary"><p>ProcessAccessFlags</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_ProcessAccessFlags_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Flags]
public enum ProcessAccessFlags : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_All">All</td>
        <td><p>All</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_CreateProcess">CreateProcess</td>
        <td><p>CreateProcess</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_CreateThread">CreateThread</td>
        <td><p>CreateThread</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_DuplicateHandle">DuplicateHandle</td>
        <td><p>DuplicateHandle</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_QueryInformation">QueryInformation</td>
        <td><p>QueryInformation</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_QueryLimitedInformation">QueryLimitedInformation</td>
        <td><p>QueryLimitedInformation</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_SetInformation">SetInformation</td>
        <td><p>SetInformation</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_SetQuota">SetQuota</td>
        <td><p>SetQuota</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_Synchronize">Synchronize</td>
        <td><p>Synchronize</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_Terminate">Terminate</td>
        <td><p>Terminate</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_VirtualMemoryOperation">VirtualMemoryOperation</td>
        <td><p>VirtualMemoryOperation</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_VirtualMemoryRead">VirtualMemoryRead</td>
        <td><p>VirtualMemoryRead</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ProcessAccessFlags_VirtualMemoryWrite">VirtualMemoryWrite</td>
        <td><p>VirtualMemoryWrite</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.RegisterInfo.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class RegisterInfo
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class RegisterInfo
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.RegisterInfo">
  
  
  <h1 id="ERC_Structures_RegisterInfo" data-uid="ERC.Structures.RegisterInfo" class="text-break">Class RegisterInfo
  </h1>
  <div class="markdown level0 summary"><p>Register information</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">RegisterInfo</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_RegisterInfo_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class RegisterInfo</code></pre>
  </div>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_Structures_RegisterInfo_BufferSize_" data-uid="ERC.Structures.RegisterInfo.BufferSize*"></a>
  <h4 id="ERC_Structures_RegisterInfo_BufferSize" data-uid="ERC.Structures.RegisterInfo.BufferSize">BufferSize</h4>
  <div class="markdown level1 summary"><p>Buffer size.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int BufferSize { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_overwritten_" data-uid="ERC.Structures.RegisterInfo.overwritten*"></a>
  <h4 id="ERC_Structures_RegisterInfo_overwritten" data-uid="ERC.Structures.RegisterInfo.overwritten">overwritten</h4>
  <div class="markdown level1 summary"><p>Overwritten.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool overwritten { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_Register_" data-uid="ERC.Structures.RegisterInfo.Register*"></a>
  <h4 id="ERC_Structures_RegisterInfo_Register" data-uid="ERC.Structures.RegisterInfo.Register">Register</h4>
  <div class="markdown level1 summary"><p>Register name.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Register { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_RegisterOffset_" data-uid="ERC.Structures.RegisterInfo.RegisterOffset*"></a>
  <h4 id="ERC_Structures_RegisterInfo_RegisterOffset" data-uid="ERC.Structures.RegisterInfo.RegisterOffset">RegisterOffset</h4>
  <div class="markdown level1 summary"><p>Register Offset.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int RegisterOffset { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_RegisterValue_" data-uid="ERC.Structures.RegisterInfo.RegisterValue*"></a>
  <h4 id="ERC_Structures_RegisterInfo_RegisterValue" data-uid="ERC.Structures.RegisterInfo.RegisterValue">RegisterValue</h4>
  <div class="markdown level1 summary"><p>Register value.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr RegisterValue { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_StringOffset_" data-uid="ERC.Structures.RegisterInfo.StringOffset*"></a>
  <h4 id="ERC_Structures_RegisterInfo_StringOffset" data-uid="ERC.Structures.RegisterInfo.StringOffset">StringOffset</h4>
  <div class="markdown level1 summary"><p>String offset.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int StringOffset { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Structures_RegisterInfo_ThreadID_" data-uid="ERC.Structures.RegisterInfo.ThreadID*"></a>
  <h4 id="ERC_Structures_RegisterInfo_ThreadID" data-uid="ERC.Structures.RegisterInfo.ThreadID">ThreadID</h4>
  <div class="markdown level1 summary"><p>Thread ID.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int ThreadID { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.StateEnum.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum StateEnum
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum StateEnum
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.StateEnum">
  
  
  <h1 id="ERC_Structures_StateEnum" data-uid="ERC.Structures.StateEnum" class="text-break">Enum StateEnum
  </h1>
  <div class="markdown level0 summary"><p>StateEnum</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_StateEnum_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum StateEnum : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_StateEnum_MEM_COMMIT">MEM_COMMIT</td>
        <td><p>MEM_COMMIT</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_StateEnum_MEM_FREE">MEM_FREE</td>
        <td><p>MEM_FREE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_StateEnum_MEM_RESERVE">MEM_RESERVE</td>
        <td><p>MEM_RESERVE</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.SubSystemType.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum SubSystemType
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum SubSystemType
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.SubSystemType">
  
  
  <h1 id="ERC_Structures_SubSystemType" data-uid="ERC.Structures.SubSystemType" class="text-break">Enum SubSystemType
  </h1>
  <div class="markdown level0 summary"><p>Image Option Header SubSystem Type.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_SubSystemType_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum SubSystemType : ushort</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_APPLICATION">IMAGE_SUBSYSTEM_EFI_APPLICATION</td>
        <td><p>IMAGE_SUBSYSTEM_EFI_APPLICATION</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</td>
        <td><p>IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_ROM">IMAGE_SUBSYSTEM_EFI_ROM</td>
        <td><p>IMAGE_SUBSYSTEM_EFI_ROM</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</td>
        <td><p>IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_NATIVE">IMAGE_SUBSYSTEM_NATIVE</td>
        <td><p>IMAGE_SUBSYSTEM_NATIVE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_POSIX_CUI">IMAGE_SUBSYSTEM_POSIX_CUI</td>
        <td><p>IMAGE_SUBSYSTEM_POSIX_CUI</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_UNKNOWN">IMAGE_SUBSYSTEM_UNKNOWN</td>
        <td><p>IMAGE_SUBSYSTEM_UNKNOWN</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</td>
        <td><p>IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_CUI">IMAGE_SUBSYSTEM_WINDOWS_CUI</td>
        <td><p>IMAGE_SUBSYSTEM_WINDOWS_CUI</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_WINDOWS_GUI">IMAGE_SUBSYSTEM_WINDOWS_GUI</td>
        <td><p>IMAGE_SUBSYSTEM_WINDOWS_GUI</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_SubSystemType_IMAGE_SUBSYSTEM_XBOX">IMAGE_SUBSYSTEM_XBOX</td>
        <td><p>IMAGE_SUBSYSTEM_XBOX</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.TEB.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct TEB
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct TEB
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.TEB">
  
  
  <h1 id="ERC_Structures_TEB" data-uid="ERC.Structures.TEB" class="text-break">Struct TEB
  </h1>
  <div class="markdown level0 summary"><p>Thread Environment Block.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_TEB_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct TEB</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_TEB_ActivationContextStack" data-uid="ERC.Structures.TEB.ActivationContextStack">ActivationContextStack</h4>
  <div class="markdown level1 summary"><p>ActivationContextStack</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] ActivationContextStack</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_ArbitraryDataSlot" data-uid="ERC.Structures.TEB.ArbitraryDataSlot">ArbitraryDataSlot</h4>
  <div class="markdown level1 summary"><p>ArbitraryDataSlot</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ArbitraryDataSlot</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_BottomOfStack" data-uid="ERC.Structures.TEB.BottomOfStack">BottomOfStack</h4>
  <div class="markdown level1 summary"><p>BottomOfStack</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr BottomOfStack</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_CriticalSectionsCount" data-uid="ERC.Structures.TEB.CriticalSectionsCount">CriticalSectionsCount</h4>
  <div class="markdown level1 summary"><p>CriticalSectionsCount</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int CriticalSectionsCount</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_CsrClientThread" data-uid="ERC.Structures.TEB.CsrClientThread">CsrClientThread</h4>
  <div class="markdown level1 summary"><p>CsrClientThread</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr CsrClientThread</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_CurrentLocale" data-uid="ERC.Structures.TEB.CurrentLocale">CurrentLocale</h4>
  <div class="markdown level1 summary"><p>CurrentLocale</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr CurrentLocale</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_CurrentSehFrame" data-uid="ERC.Structures.TEB.CurrentSehFrame">CurrentSehFrame</h4>
  <div class="markdown level1 summary"><p>CurrentSehFrame</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr CurrentSehFrame</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_DeallocationStack" data-uid="ERC.Structures.TEB.DeallocationStack">DeallocationStack</h4>
  <div class="markdown level1 summary"><p>DeallocationStack</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr DeallocationStack</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_EnvironmentPointer" data-uid="ERC.Structures.TEB.EnvironmentPointer">EnvironmentPointer</h4>
  <div class="markdown level1 summary"><p>EnvironmentPointer</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr EnvironmentPointer</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_ExceptionCode" data-uid="ERC.Structures.TEB.ExceptionCode">ExceptionCode</h4>
  <div class="markdown level1 summary"><p>ExceptionCode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ExceptionCode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_FiberData" data-uid="ERC.Structures.TEB.FiberData">FiberData</h4>
  <div class="markdown level1 summary"><p>FiberData</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr FiberData</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_FpSoftwareStatusRegister" data-uid="ERC.Structures.TEB.FpSoftwareStatusRegister">FpSoftwareStatusRegister</h4>
  <div class="markdown level1 summary"><p>FpSoftwareStatusRegister</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr FpSoftwareStatusRegister</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiBrush" data-uid="ERC.Structures.TEB.GdiBrush">GdiBrush</h4>
  <div class="markdown level1 summary"><p>GdiBrush</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiBrush</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiCachedProcessHandle" data-uid="ERC.Structures.TEB.GdiCachedProcessHandle">GdiCachedProcessHandle</h4>
  <div class="markdown level1 summary"><p>GdiCachedProcessHandle</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiCachedProcessHandle</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiClientProcessId" data-uid="ERC.Structures.TEB.GdiClientProcessId">GdiClientProcessId</h4>
  <div class="markdown level1 summary"><p>GdiClientProcessId</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiClientProcessId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiClientThreadId" data-uid="ERC.Structures.TEB.GdiClientThreadId">GdiClientThreadId</h4>
  <div class="markdown level1 summary"><p>GdiClientThreadId</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiClientThreadId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiPen" data-uid="ERC.Structures.TEB.GdiPen">GdiPen</h4>
  <div class="markdown level1 summary"><p>GdiPen</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiPen</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiRegion" data-uid="ERC.Structures.TEB.GdiRegion">GdiRegion</h4>
  <div class="markdown level1 summary"><p>GdiRegion</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiRegion</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiTebBatch" data-uid="ERC.Structures.TEB.GdiTebBatch">GdiTebBatch</h4>
  <div class="markdown level1 summary"><p>GdiTebBatch</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] GdiTebBatch</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GdiThreadLocalInfo" data-uid="ERC.Structures.TEB.GdiThreadLocalInfo">GdiThreadLocalInfo</h4>
  <div class="markdown level1 summary"><p>GdiThreadLocalInfo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr GdiThreadLocalInfo</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_GlReserved1" data-uid="ERC.Structures.TEB.GlReserved1">GlReserved1</h4>
  <div class="markdown level1 summary"><p>GlReserved1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] GlReserved1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Identifiers" data-uid="ERC.Structures.TEB.Identifiers">Identifiers</h4>
  <div class="markdown level1 summary"><p>Identifiers</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ClientID Identifiers</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.ClientID.html">ClientID</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_LastErrorNumber" data-uid="ERC.Structures.TEB.LastErrorNumber">LastErrorNumber</h4>
  <div class="markdown level1 summary"><p>LastErrorNumber</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int LastErrorNumber</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_LastStatusValue" data-uid="ERC.Structures.TEB.LastStatusValue">LastStatusValue</h4>
  <div class="markdown level1 summary"><p>LastStatusValue</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int LastStatusValue</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Peb" data-uid="ERC.Structures.TEB.Peb">Peb</h4>
  <div class="markdown level1 summary"><p>Peb</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Peb</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_RealProcessId" data-uid="ERC.Structures.TEB.RealProcessId">RealProcessId</h4>
  <div class="markdown level1 summary"><p>RealProcessId</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int RealProcessId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_RealThreadId" data-uid="ERC.Structures.TEB.RealThreadId">RealThreadId</h4>
  <div class="markdown level1 summary"><p>RealThreadId</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int RealThreadId</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_RpcHandle" data-uid="ERC.Structures.TEB.RpcHandle">RpcHandle</h4>
  <div class="markdown level1 summary"><p>RpcHandle</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr RpcHandle</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_RpcReserved" data-uid="ERC.Structures.TEB.RpcReserved">RpcReserved</h4>
  <div class="markdown level1 summary"><p>RpcReserved</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr RpcReserved</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_SpareBytes" data-uid="ERC.Structures.TEB.SpareBytes">SpareBytes</h4>
  <div class="markdown level1 summary"><p>SpareBytes</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] SpareBytes</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_StaticUnicodeString" data-uid="ERC.Structures.TEB.StaticUnicodeString">StaticUnicodeString</h4>
  <div class="markdown level1 summary"><p>StaticUnicodeString</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] StaticUnicodeString</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_SubSystemTeb" data-uid="ERC.Structures.TEB.SubSystemTeb">SubSystemTeb</h4>
  <div class="markdown level1 summary"><p>SubSystemTeb</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr SubSystemTeb</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_SystemReserved1" data-uid="ERC.Structures.TEB.SystemReserved1">SystemReserved1</h4>
  <div class="markdown level1 summary"><p>SystemReserved1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] SystemReserved1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_SystemReserved2" data-uid="ERC.Structures.TEB.SystemReserved2">SystemReserved2</h4>
  <div class="markdown level1 summary"><p>SystemReserved2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] SystemReserved2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Teb" data-uid="ERC.Structures.TEB.Teb">Teb</h4>
  <div class="markdown level1 summary"><p>Teb</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Teb</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_ThreadErrorMode" data-uid="ERC.Structures.TEB.ThreadErrorMode">ThreadErrorMode</h4>
  <div class="markdown level1 summary"><p>ThreadErrorMode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ThreadErrorMode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Tls" data-uid="ERC.Structures.TEB.Tls">Tls</h4>
  <div class="markdown level1 summary"><p>Tls</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Tls</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_TlsLinks" data-uid="ERC.Structures.TEB.TlsLinks">TlsLinks</h4>
  <div class="markdown level1 summary"><p>TlsLinks</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public long TlsLinks</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int64</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_TlsSlots" data-uid="ERC.Structures.TEB.TlsSlots">TlsSlots</h4>
  <div class="markdown level1 summary"><p>TlsSlots</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] TlsSlots</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_TopOfStack" data-uid="ERC.Structures.TEB.TopOfStack">TopOfStack</h4>
  <div class="markdown level1 summary"><p>TopOfStack</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr TopOfStack</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_UserReserved1" data-uid="ERC.Structures.TEB.UserReserved1">UserReserved1</h4>
  <div class="markdown level1 summary"><p>UserReserved1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] UserReserved1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Vdm" data-uid="ERC.Structures.TEB.Vdm">Vdm</h4>
  <div class="markdown level1 summary"><p>Vdm</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Vdm</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Win32ClientInfo" data-uid="ERC.Structures.TEB.Win32ClientInfo">Win32ClientInfo</h4>
  <div class="markdown level1 summary"><p>Win32ClientInfo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] Win32ClientInfo</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_Win32ThreadInfo" data-uid="ERC.Structures.TEB.Win32ThreadInfo">Win32ThreadInfo</h4>
  <div class="markdown level1 summary"><p>Win32ThreadInfo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr Win32ThreadInfo</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_TEB_WoW64Reserved" data-uid="ERC.Structures.TEB.WoW64Reserved">WoW64Reserved</h4>
  <div class="markdown level1 summary"><p>WoW64Reserved</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr WoW64Reserved</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.ThreadAccess.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum ThreadAccess
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum ThreadAccess
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.ThreadAccess">
  
  
  <h1 id="ERC_Structures_ThreadAccess" data-uid="ERC.Structures.ThreadAccess" class="text-break">Enum ThreadAccess
  </h1>
  <div class="markdown level0 summary"><p>Enum to specify access level required when accessing a thread.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_ThreadAccess_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Flags]
public enum ThreadAccess</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_ThreadAccess_All_ACCESS">All_ACCESS</td>
        <td><p>All_ACCESS</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_DIRECT_IMPERSONATION">DIRECT_IMPERSONATION</td>
        <td><p>DIRECT_IMPERSONATION</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_GET_CONTEXT">GET_CONTEXT</td>
        <td><p>GET_CONTEXT</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_IMPERSONATE">IMPERSONATE</td>
        <td><p>IMPERSONATE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_QUERY_INFORMATION">QUERY_INFORMATION</td>
        <td><p>QUERY_INFORMATION</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_SET_CONTEXT">SET_CONTEXT</td>
        <td><p>SET_CONTEXT</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_SET_INFORMATION">SET_INFORMATION</td>
        <td><p>SET_INFORMATION</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_SET_THREAD_TOKEN">SET_THREAD_TOKEN</td>
        <td><p>SET_THREAD_TOKEN</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_SUSPEND_RESUME">SUSPEND_RESUME</td>
        <td><p>SUSPEND_RESUME</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_ThreadAccess_TERMINATE">TERMINATE</td>
        <td><p>TERMINATE</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.ThreadBasicInformation.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct ThreadBasicInformation
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct ThreadBasicInformation
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.ThreadBasicInformation">
  
  
  <h1 id="ERC_Structures_ThreadBasicInformation" data-uid="ERC.Structures.ThreadBasicInformation" class="text-break">Struct ThreadBasicInformation
  </h1>
  <div class="markdown level0 summary"><p>ThreadBasicInformation</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_ThreadBasicInformation_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct ThreadBasicInformation</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_AffinityMask" data-uid="ERC.Structures.ThreadBasicInformation.AffinityMask">AffinityMask</h4>
  <div class="markdown level1 summary"><p>AffinityMask</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint AffinityMask</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_BasePriority" data-uid="ERC.Structures.ThreadBasicInformation.BasePriority">BasePriority</h4>
  <div class="markdown level1 summary"><p>BasePriority</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint BasePriority</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_ExitStatus" data-uid="ERC.Structures.ThreadBasicInformation.ExitStatus">ExitStatus</h4>
  <div class="markdown level1 summary"><p>ExitStatus</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ExitStatus</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_Identifiers" data-uid="ERC.Structures.ThreadBasicInformation.Identifiers">Identifiers</h4>
  <div class="markdown level1 summary"><p>Identifiers</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ClientID Identifiers</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.ClientID.html">ClientID</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_Priority" data-uid="ERC.Structures.ThreadBasicInformation.Priority">Priority</h4>
  <div class="markdown level1 summary"><p>Priority</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint Priority</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_ThreadBasicInformation_TebBaseAdress" data-uid="ERC.Structures.ThreadBasicInformation.TebBaseAdress">TebBaseAdress</h4>
  <div class="markdown level1 summary"><p>TebBaseAdress</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr TebBaseAdress</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.TypeEnum.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Enum TypeEnum
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Enum TypeEnum
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.TypeEnum">
  
  
  <h1 id="ERC_Structures_TypeEnum" data-uid="ERC.Structures.TypeEnum" class="text-break">Enum TypeEnum
  </h1>
  <div class="markdown level0 summary"><p>TypeEnum</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_TypeEnum_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public enum TypeEnum : uint</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    <thead>
    <tbody>
      <tr>
        <td id="ERC_Structures_TypeEnum_MEM_IMAGE">MEM_IMAGE</td>
        <td><p>MEM_IMAGE</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_TypeEnum_MEM_MAPPED">MEM_MAPPED</td>
        <td><p>MEM_MAPPED</p>
</td>
      </tr>
      <tr>
        <td id="ERC_Structures_TypeEnum_MEM_PRIVATE">MEM_PRIVATE</td>
        <td><p>MEM_PRIVATE</p>
</td>
      </tr>
    </tbody>
  </thead></thead></table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.XSAVE_FORMAT64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Struct XSAVE_FORMAT64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Struct XSAVE_FORMAT64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures.XSAVE_FORMAT64">
  
  
  <h1 id="ERC_Structures_XSAVE_FORMAT64" data-uid="ERC.Structures.XSAVE_FORMAT64" class="text-break">Struct XSAVE_FORMAT64
  </h1>
  <div class="markdown level0 summary"><p>x64 Save area data.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.ValueType.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.ValueType.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.ValueType.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Structures.html">ERC.Structures</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Structures_XSAVE_FORMAT64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public struct XSAVE_FORMAT64</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_ControlWord" data-uid="ERC.Structures.XSAVE_FORMAT64.ControlWord">ControlWord</h4>
  <div class="markdown level1 summary"><p>ControlWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort ControlWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_DataOffset" data-uid="ERC.Structures.XSAVE_FORMAT64.DataOffset">DataOffset</h4>
  <div class="markdown level1 summary"><p>DataOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint DataOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_DataSelector" data-uid="ERC.Structures.XSAVE_FORMAT64.DataSelector">DataSelector</h4>
  <div class="markdown level1 summary"><p>DataSelector</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort DataSelector</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_ErrorOffset" data-uid="ERC.Structures.XSAVE_FORMAT64.ErrorOffset">ErrorOffset</h4>
  <div class="markdown level1 summary"><p>ErrorOffset</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint ErrorOffset</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_ErrorOpcode" data-uid="ERC.Structures.XSAVE_FORMAT64.ErrorOpcode">ErrorOpcode</h4>
  <div class="markdown level1 summary"><p>ErrorOpcode</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort ErrorOpcode</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_ErrorSelector" data-uid="ERC.Structures.XSAVE_FORMAT64.ErrorSelector">ErrorSelector</h4>
  <div class="markdown level1 summary"><p>ErrorSelector</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort ErrorSelector</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_FloatRegisters" data-uid="ERC.Structures.XSAVE_FORMAT64.FloatRegisters">FloatRegisters</h4>
  <div class="markdown level1 summary"><p>FloatRegisters</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public M128A[] FloatRegisters</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.M128A.html">M128A</a>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_MxCsr" data-uid="ERC.Structures.XSAVE_FORMAT64.MxCsr">MxCsr</h4>
  <div class="markdown level1 summary"><p>MxCsr</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint MxCsr</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_MxCsr_Mask" data-uid="ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask">MxCsr_Mask</h4>
  <div class="markdown level1 summary"><p>MxCsr_Mask</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public uint MxCsr_Mask</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_Reserved1" data-uid="ERC.Structures.XSAVE_FORMAT64.Reserved1">Reserved1</h4>
  <div class="markdown level1 summary"><p>Reserved1</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte Reserved1</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_Reserved2" data-uid="ERC.Structures.XSAVE_FORMAT64.Reserved2">Reserved2</h4>
  <div class="markdown level1 summary"><p>Reserved2</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Reserved2</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_Reserved3" data-uid="ERC.Structures.XSAVE_FORMAT64.Reserved3">Reserved3</h4>
  <div class="markdown level1 summary"><p>Reserved3</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort Reserved3</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_Reserved4" data-uid="ERC.Structures.XSAVE_FORMAT64.Reserved4">Reserved4</h4>
  <div class="markdown level1 summary"><p>Reserved4</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte[] Reserved4</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_StatusWord" data-uid="ERC.Structures.XSAVE_FORMAT64.StatusWord">StatusWord</h4>
  <div class="markdown level1 summary"><p>StatusWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ushort StatusWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_TagWord" data-uid="ERC.Structures.XSAVE_FORMAT64.TagWord">TagWord</h4>
  <div class="markdown level1 summary"><p>TagWord</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public byte TagWord</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Structures_XSAVE_FORMAT64_XmmRegisters" data-uid="ERC.Structures.XSAVE_FORMAT64.XmmRegisters">XmmRegisters</h4>
  <div class="markdown level1 summary"><p>XmmRegisters</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public M128A[] XmmRegisters</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.M128A.html">M128A</a>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Structures.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Namespace ERC.Structures
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Namespace ERC.Structures
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Structures">
  
  <h1 id="ERC_Structures" data-uid="ERC.Structures" class="text-break">Namespace ERC.Structures
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="markdown level0 remarks"></div>
    <h3 id="classes">Classes
  </h3>
      <h4><a class="xref" href="ERC.Structures.RegisterInfo.html">RegisterInfo</a></h4>
      <section><p>Register information</p>
</section>
    <h3 id="structs">Structs
  </h3>
      <h4><a class="xref" href="ERC.Structures.ClientID.html">ClientID</a></h4>
      <section><p>ClientID</p>
</section>
      <h4><a class="xref" href="ERC.Structures.CONTEXT32.html">CONTEXT32</a></h4>
      <section><p>Structure for holding x86 register values.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.CONTEXT64.html">CONTEXT64</a></h4>
      <section><p>Structure for holding x64 register values.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.FLOATING_SAVE_AREA.html">FLOATING_SAVE_AREA</a></h4>
      <section><p>x86 Save area data. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_DATA_DIRECTORY.html">IMAGE_DATA_DIRECTORY</a></h4>
      <section><p>IMAGE_DATA_DIRECTORY. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_DOS_HEADER.html">IMAGE_DOS_HEADER</a></h4>
      <section><p>IMAGE_DOS_HEADER.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_FILE_HEADER.html">IMAGE_FILE_HEADER</a></h4>
      <section><p>IMAGE_FILE_HEADER. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html">IMAGE_LOAD_CONFIG_CODE_INTEGRITY</a></h4>
      <section><p>IMAGE_LOAD_CONFIG_CODE_INTEGRITY.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html">IMAGE_LOAD_CONFIG_DIRECTORY32</a></h4>
      <section><p>IMAGE_LOAD_CONFIG_DIRECTORY32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html">IMAGE_LOAD_CONFIG_DIRECTORY64</a></h4>
      <section><p>IMAGE_LOAD_CONFIG_DIRECTORY32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_NT_HEADERS32.html">IMAGE_NT_HEADERS32</a></h4>
      <section><p>IMAGE_NT_HEADER 32 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_NT_HEADERS64.html">IMAGE_NT_HEADERS64</a></h4>
      <section><p>IMAGE_NT_HEADER 64 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_OPTIONAL_HEADER32.html">IMAGE_OPTIONAL_HEADER32</a></h4>
      <section><p>IMAGE_OPTIONAL_HEADER 32 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.IMAGE_OPTIONAL_HEADER64.html">IMAGE_OPTIONAL_HEADER64</a></h4>
      <section><p>IMAGE_OPTIONAL_HEADER 64 bit variant. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.LIST_ENTRY.html">LIST_ENTRY</a></h4>
      <section><p>Describes an entry in a doubly linked list or serves as the header for such a list. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry">https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.LOADED_IMAGE.html">LOADED_IMAGE</a></h4>
      <section><p>LOADED_IMAGE. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image">https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.M128A.html">M128A</a></h4>
      <section><p>M128A</p>
</section>
      <h4><a class="xref" href="ERC.Structures.MEMORY_BASIC_INFORMATION32.html">MEMORY_BASIC_INFORMATION32</a></h4>
      <section><p>MEMORY_BASIC_INFORMATION32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.MEMORY_BASIC_INFORMATION64.html">MEMORY_BASIC_INFORMATION64</a></h4>
      <section><p>MEMORY_BASIC_INFORMATION32. See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information</a></p>
</section>
      <h4><a class="xref" href="ERC.Structures.TEB.html">TEB</a></h4>
      <section><p>Thread Environment Block.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.ThreadBasicInformation.html">ThreadBasicInformation</a></h4>
      <section><p>ThreadBasicInformation</p>
</section>
      <h4><a class="xref" href="ERC.Structures.XSAVE_FORMAT64.html">XSAVE_FORMAT64</a></h4>
      <section><p>x64 Save area data.</p>
</section>
    <h3 id="enums">Enums
  </h3>
      <h4><a class="xref" href="ERC.Structures.AllocationProtect.html">AllocationProtect</a></h4>
      <section><p>AllocationProtect.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.CONTEXT_FLAGS.html">CONTEXT_FLAGS</a></h4>
      <section><p>CONTEXT_FLAGS</p>
</section>
      <h4><a class="xref" href="ERC.Structures.LoadLibraryFlags.html">LoadLibraryFlags</a></h4>
      <section><p>LoadLibraryFlags</p>
</section>
      <h4><a class="xref" href="ERC.Structures.MagicType.html">MagicType</a></h4>
      <section><p>Image Option Header Magic Type.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.ProcessAccessFlags.html">ProcessAccessFlags</a></h4>
      <section><p>ProcessAccessFlags</p>
</section>
      <h4><a class="xref" href="ERC.Structures.StateEnum.html">StateEnum</a></h4>
      <section><p>StateEnum</p>
</section>
      <h4><a class="xref" href="ERC.Structures.SubSystemType.html">SubSystemType</a></h4>
      <section><p>Image Option Header SubSystem Type.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.ThreadAccess.html">ThreadAccess</a></h4>
      <section><p>Enum to specify access level required when accessing a thread.</p>
</section>
      <h4><a class="xref" href="ERC.Structures.TypeEnum.html">TypeEnum</a></h4>
      <section><p>TypeEnum</p>
</section>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.ThreadInfo.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ThreadInfo
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ThreadInfo
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.ThreadInfo">
  
  
  <h1 id="ERC_ThreadInfo" data-uid="ERC.ThreadInfo" class="text-break">Class ThreadInfo
  </h1>
  <div class="markdown level0 summary"><p>Stores information about the current thread.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">ThreadInfo</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.html">ERC</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_ThreadInfo_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ThreadInfo</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_ThreadInfo_Context32" data-uid="ERC.ThreadInfo.Context32">Context32</h4>
  <div class="markdown level1 summary"><p>x86 CPU Register values.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public CONTEXT32 Context32</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.CONTEXT32.html">CONTEXT32</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_ThreadInfo_Context64" data-uid="ERC.ThreadInfo.Context64">Context64</h4>
  <div class="markdown level1 summary"><p>x64 CPU Register values.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public CONTEXT64 Context64</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.CONTEXT64.html">CONTEXT64</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="ERC_ThreadInfo_ThreadHandle_" data-uid="ERC.ThreadInfo.ThreadHandle*"></a>
  <h4 id="ERC_ThreadInfo_ThreadHandle" data-uid="ERC.ThreadInfo.ThreadHandle">ThreadHandle</h4>
  <div class="markdown level1 summary"><p>A handle for the current thread.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IntPtr ThreadHandle { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ThreadInfo_ThreadID_" data-uid="ERC.ThreadInfo.ThreadID*"></a>
  <h4 id="ERC_ThreadInfo_ThreadID" data-uid="ERC.ThreadInfo.ThreadID">ThreadID</h4>
  <div class="markdown level1 summary"><p>The ID number of the current thread.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int ThreadID { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_ThreadInfo_Get_Context_" data-uid="ERC.ThreadInfo.Get_Context*"></a>
  <h4 id="ERC_ThreadInfo_Get_Context" data-uid="ERC.ThreadInfo.Get_Context">Get_Context()</h4>
  <div class="markdown level1 summary"><p>Gets the register values of a thread and populates the CONTEXT structs. Should only be used on a suspended thread, results on an active thread are unreliable.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; Get_Context()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult, the return value can be ignored, the object should only be checked for error values</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ThreadInfo_GetSehChain_" data-uid="ERC.ThreadInfo.GetSehChain*"></a>
  <h4 id="ERC_ThreadInfo_GetSehChain" data-uid="ERC.ThreadInfo.GetSehChain">GetSehChain()</h4>
  <div class="markdown level1 summary"><p>Gets the current SEH chain for the process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;IntPtr&gt; GetSehChain()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><p>Returns a list of IntPtr containing the SEH chain</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ThreadInfo_GetTeb_" data-uid="ERC.ThreadInfo.GetTeb*"></a>
  <h4 id="ERC_ThreadInfo_GetTeb" data-uid="ERC.ThreadInfo.GetTeb">GetTeb()</h4>
  <div class="markdown level1 summary"><p>Gets the Thread environment block of the current thread.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public TEB GetTeb()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.Structures.TEB.html">TEB</a></td>
        <td><p>Returns a TEB struct</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_ThreadInfo_ToString_" data-uid="ERC.ThreadInfo.ToString*"></a>
  <h4 id="ERC_ThreadInfo_ToString" data-uid="ERC.ThreadInfo.ToString">ToString()</h4>
  <div class="markdown level1 summary"><p>Gets information specific to the current thread and returns it as a string.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string ToString()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>Returns a string</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><span class="xref">System.Object.ToString()</span></div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.Convert.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class Convert
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class Convert
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.Convert">
  
  
  <h1 id="ERC_Utilities_Convert" data-uid="ERC.Utilities.Convert" class="text-break">Class Convert
  </h1>
  <div class="markdown level0 summary"><p>Static class containing methods for common conversions.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">Convert</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_Convert_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class Convert</code></pre>
  </div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_Convert_AsciiToBytes_" data-uid="ERC.Utilities.Convert.AsciiToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_AsciiToBytes_System_String_" data-uid="ERC.Utilities.Convert.AsciiToBytes(System.String)">AsciiToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts an ASCII string to a byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] AsciiToBytes(string ascii)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">ascii</span></td>
        <td><p>An ASCII string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array containing the associated values.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_AsciiToHex_" data-uid="ERC.Utilities.Convert.AsciiToHex*"></a>
  <h4 id="ERC_Utilities_Convert_AsciiToHex_System_String_" data-uid="ERC.Utilities.Convert.AsciiToHex(System.String)">AsciiToHex(String)</h4>
  <div class="markdown level1 summary"><p>Converts an ASCII string to a hex string</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string AsciiToHex(string ascii)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">ascii</span></td>
        <td><p>An ASCII string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A hex string.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_HexToAscii_" data-uid="ERC.Utilities.Convert.HexToAscii*"></a>
  <h4 id="ERC_Utilities_Convert_HexToAscii_System_String_" data-uid="ERC.Utilities.Convert.HexToAscii(System.String)">HexToAscii(String)</h4>
  <div class="markdown level1 summary"><p>Converts a hex string to ASCII.&quot;</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string HexToAscii(string hex)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">hex</span></td>
        <td><p>A string containing hex characters.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A string containing the equivalent ASCII values</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_HexToBytes_" data-uid="ERC.Utilities.Convert.HexToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_HexToBytes_System_String_" data-uid="ERC.Utilities.Convert.HexToBytes(System.String)">HexToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts a hex string to the equivalent bytes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] HexToBytes(string hex)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">hex</span></td>
        <td><p>A string containing hex characters.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array containing the associated values.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UnicodeToBytes_" data-uid="ERC.Utilities.Convert.UnicodeToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_UnicodeToBytes_System_String_" data-uid="ERC.Utilities.Convert.UnicodeToBytes(System.String)">UnicodeToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts a Unicode string to a byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] UnicodeToBytes(string unicode)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">unicode</span></td>
        <td><p>A Unicode string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UnicodeToHex_" data-uid="ERC.Utilities.Convert.UnicodeToHex*"></a>
  <h4 id="ERC_Utilities_Convert_UnicodeToHex_System_String_" data-uid="ERC.Utilities.Convert.UnicodeToHex(System.String)">UnicodeToHex(String)</h4>
  <div class="markdown level1 summary"><p>Converts a Unicode string to a hex string.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string UnicodeToHex(string unicode)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">unicode</span></td>
        <td><p>A Unicode string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A hex string.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF32ToBytes_" data-uid="ERC.Utilities.Convert.UTF32ToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_UTF32ToBytes_System_String_" data-uid="ERC.Utilities.Convert.UTF32ToBytes(System.String)">UTF32ToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-32 string to a byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] UTF32ToBytes(string utf32)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf32</span></td>
        <td><p>A UTF-32 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF32ToHex_" data-uid="ERC.Utilities.Convert.UTF32ToHex*"></a>
  <h4 id="ERC_Utilities_Convert_UTF32ToHex_System_String_" data-uid="ERC.Utilities.Convert.UTF32ToHex(System.String)">UTF32ToHex(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-32 string to a hex string.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string UTF32ToHex(string utf32)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf32</span></td>
        <td><p>A UTF-32 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A hex string.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF7ToBytes_" data-uid="ERC.Utilities.Convert.UTF7ToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_UTF7ToBytes_System_String_" data-uid="ERC.Utilities.Convert.UTF7ToBytes(System.String)">UTF7ToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-7 string to a byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] UTF7ToBytes(string utf7)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf7</span></td>
        <td><p>A UTF-7 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF7ToHex_" data-uid="ERC.Utilities.Convert.UTF7ToHex*"></a>
  <h4 id="ERC_Utilities_Convert_UTF7ToHex_System_String_" data-uid="ERC.Utilities.Convert.UTF7ToHex(System.String)">UTF7ToHex(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-7 string to a hex string.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string UTF7ToHex(string utf7)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf7</span></td>
        <td><p>A UTF-7 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A hex string.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF8ToBytes_" data-uid="ERC.Utilities.Convert.UTF8ToBytes*"></a>
  <h4 id="ERC_Utilities_Convert_UTF8ToBytes_System_String_" data-uid="ERC.Utilities.Convert.UTF8ToBytes(System.String)">UTF8ToBytes(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-8 string to a byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] UTF8ToBytes(string utf8)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf8</span></td>
        <td><p>A UTF-8 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>A byte array.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Convert_UTF8ToHex_" data-uid="ERC.Utilities.Convert.UTF8ToHex*"></a>
  <h4 id="ERC_Utilities_Convert_UTF8ToHex_System_String_" data-uid="ERC.Utilities.Convert.UTF8ToHex(System.String)">UTF8ToHex(String)</h4>
  <div class="markdown level1 summary"><p>Converts a UTF-8 string to a hex string.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string UTF8ToHex(string utf8)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">utf8</span></td>
        <td><p>A UTF-8 string.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><p>A hex string.</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.OpcodeAssembler.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class OpcodeAssembler
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class OpcodeAssembler
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.OpcodeAssembler">
  
  
  <h1 id="ERC_Utilities_OpcodeAssembler" data-uid="ERC.Utilities.OpcodeAssembler" class="text-break">Class OpcodeAssembler
  </h1>
  <div class="markdown level0 summary"><p>OpcodeAssembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as
a static function to assemble instructions.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><a class="xref" href="ERC.ErcCore.html">ErcCore</a></div>
    <div class="level2"><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></div>
    <div class="level3"><span class="xref">OpcodeAssembler</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessName">ProcessInfo.ProcessName</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessDescription">ProcessInfo.ProcessDescription</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessPath">ProcessInfo.ProcessPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessID">ProcessInfo.ProcessID</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessHandle">ProcessInfo.ProcessHandle</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessCurrent">ProcessInfo.ProcessCurrent</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessMachineType">ProcessInfo.ProcessMachineType</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ModulesInfo">ProcessInfo.ModulesInfo</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ThreadsInfo">ProcessInfo.ThreadsInfo</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ListLocalProcesses_ERC_ErcCore_">ProcessInfo.ListLocalProcesses(ErcCore)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ListRemoteProcesses_ERC_ErcCore_System_String_">ProcessInfo.ListRemoteProcesses(ErcCore, String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModules">ProcessInfo.GetProcessModules()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_Is64Bit_System_Diagnostics_Process_">ProcessInfo.Is64Bit(Process)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Collections_Generic_List_System_String__">ProcessInfo.SearchAllMemoryPPR(List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Byte___System_Collections_Generic_List_System_String__">ProcessInfo.SearchAllMemoryPPR(Byte[], List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_String_System_Collections_Generic_List_System_String__">ProcessInfo.SearchMemory(Int32, Byte[], String, List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_Byte___System_String_System_Collections_Generic_List_System_String__">ProcessInfo.SearchMemory(Int32, Byte[], Byte[], String, List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_FindNRP_System_Int32_System_Boolean_">ProcessInfo.FindNRP(Int32, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_CreateExcludesList_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_">ProcessInfo.CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ToString">ProcessInfo.ToString()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetModuleHandles">ProcessInfo.GetModuleHandles()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModuleInformation">ProcessInfo.GetProcessModuleInformation()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessThreadInformation">ProcessInfo.GetProcessThreadInformation()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_DumpMemoryRegion_System_IntPtr_System_Int32_">ProcessInfo.DumpMemoryRegion(IntPtr, Int32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_ErcVersion">ErcCore.ErcVersion</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory">ErcCore.WorkingDirectory</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_Author">ErcCore.Author</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath">ErcCore.SystemErrorLogPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath">ErcCore.PatternStandardPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath">ErcCore.PatternExtendedPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__">ErcCore.GetHandleInformation(IntPtr, UInt32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_System_String_">ErcCore.SetWorkingDirectory(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_System_String_">ErcCore.SetPatternStandardPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_System_String_">ErcCore.SetPatternExtendedPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetAuthor_System_String_">ErcCore.SetAuthor(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_System_String_">ErcCore.SetErrorFile(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_LogEvent_System_Exception_">ErcCore.LogEvent(Exception)</a>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_OpcodeAssembler_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class OpcodeAssembler : ProcessInfo</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_Utilities_OpcodeAssembler__ctor_" data-uid="ERC.Utilities.OpcodeAssembler.#ctor*"></a>
  <h4 id="ERC_Utilities_OpcodeAssembler__ctor_ERC_ProcessInfo_" data-uid="ERC.Utilities.OpcodeAssembler.#ctor(ERC.ProcessInfo)">OpcodeAssembler(ProcessInfo)</h4>
  <div class="markdown level1 summary"><p>Constructor.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpcodeAssembler(ProcessInfo parent)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">parent</span></td>
        <td><p>ProcessInfo object to be inherited from.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_OpcodeAssembler_AssembleOpcodes_" data-uid="ERC.Utilities.OpcodeAssembler.AssembleOpcodes*"></a>
  <h4 id="ERC_Utilities_OpcodeAssembler_AssembleOpcodes_System_Collections_Generic_List_System_String__" data-uid="ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String})">AssembleOpcodes(List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Takes either an array or list of strings containing assembly instructions and returns the associated opcodes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;byte[]&gt; AssembleOpcodes(List&lt;string&gt; instructions)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">instructions</span></td>
        <td><p>The instructions to be assembled</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns an ErcResult byte array containing the assembled instructions</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_OpcodeAssembler_AssembleOpcodes_" data-uid="ERC.Utilities.OpcodeAssembler.AssembleOpcodes*"></a>
  <h4 id="ERC_Utilities_OpcodeAssembler_AssembleOpcodes_System_Collections_Generic_List_System_String__ERC_MachineType_" data-uid="ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String},ERC.MachineType)">AssembleOpcodes(List&lt;String&gt;, MachineType)</h4>
  <div class="markdown level1 summary"><p>Takes either an array or list of strings containing assembly instructions, a MachineType of I386 or x64,
an instance of the ERC_Core object and returns the associated opcodes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;byte[]&gt; AssembleOpcodes(List&lt;string&gt; instructions, MachineType machineType)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">instructions</span></td>
        <td><p>The instructions to be assemble=d</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">machineType</span></td>
        <td><p>a ERC.MachineType of either I386 or x64</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns an ERC_Result byte array containing the assembled instructions</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.OpcodeDisassembler.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class OpcodeDisassembler
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class OpcodeDisassembler
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.OpcodeDisassembler">
  
  
  <h1 id="ERC_Utilities_OpcodeDisassembler" data-uid="ERC.Utilities.OpcodeDisassembler" class="text-break">Class OpcodeDisassembler
  </h1>
  <div class="markdown level0 summary"><p>OpcodeDisassembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as
a static function to disassemble opcodes.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><a class="xref" href="ERC.ErcCore.html">ErcCore</a></div>
    <div class="level2"><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></div>
    <div class="level3"><span class="xref">OpcodeDisassembler</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessName">ProcessInfo.ProcessName</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessDescription">ProcessInfo.ProcessDescription</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessPath">ProcessInfo.ProcessPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessID">ProcessInfo.ProcessID</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessHandle">ProcessInfo.ProcessHandle</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessCurrent">ProcessInfo.ProcessCurrent</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ProcessMachineType">ProcessInfo.ProcessMachineType</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ModulesInfo">ProcessInfo.ModulesInfo</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ThreadsInfo">ProcessInfo.ThreadsInfo</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ListLocalProcesses_ERC_ErcCore_">ProcessInfo.ListLocalProcesses(ErcCore)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ListRemoteProcesses_ERC_ErcCore_System_String_">ProcessInfo.ListRemoteProcesses(ErcCore, String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModules">ProcessInfo.GetProcessModules()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_Is64Bit_System_Diagnostics_Process_">ProcessInfo.Is64Bit(Process)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Collections_Generic_List_System_String__">ProcessInfo.SearchAllMemoryPPR(List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchAllMemoryPPR_System_Byte___System_Collections_Generic_List_System_String__">ProcessInfo.SearchAllMemoryPPR(Byte[], List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_String_System_Collections_Generic_List_System_String__">ProcessInfo.SearchMemory(Int32, Byte[], String, List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_SearchMemory_System_Int32_System_Byte___System_Byte___System_String_System_Collections_Generic_List_System_String__">ProcessInfo.SearchMemory(Int32, Byte[], Byte[], String, List&lt;String&gt;)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_FindNRP_System_Int32_System_Boolean_">ProcessInfo.FindNRP(Int32, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_CreateExcludesList_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_">ProcessInfo.CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_ToString">ProcessInfo.ToString()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetModuleHandles">ProcessInfo.GetModuleHandles()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessModuleInformation">ProcessInfo.GetProcessModuleInformation()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_GetProcessThreadInformation">ProcessInfo.GetProcessThreadInformation()</a>
    </div>
    <div>
      <a class="xref" href="ERC.ProcessInfo.html#ERC_ProcessInfo_DumpMemoryRegion_System_IntPtr_System_Int32_">ProcessInfo.DumpMemoryRegion(IntPtr, Int32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_ErcVersion">ErcCore.ErcVersion</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_WorkingDirectory">ErcCore.WorkingDirectory</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_Author">ErcCore.Author</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SystemErrorLogPath">ErcCore.SystemErrorLogPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternStandardPath">ErcCore.PatternStandardPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_PatternExtendedPath">ErcCore.PatternExtendedPath</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_GetHandleInformation_System_IntPtr_System_UInt32__">ErcCore.GetHandleInformation(IntPtr, UInt32)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetWorkingDirectory_System_String_">ErcCore.SetWorkingDirectory(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternStandardPath_System_String_">ErcCore.SetPatternStandardPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetPatternExtendedPath_System_String_">ErcCore.SetPatternExtendedPath(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetAuthor_System_String_">ErcCore.SetAuthor(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_SetErrorFile_System_String_">ErcCore.SetErrorFile(String)</a>
    </div>
    <div>
      <a class="xref" href="ERC.ErcCore.html#ERC_ErcCore_LogEvent_System_Exception_">ErcCore.LogEvent(Exception)</a>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_OpcodeDisassembler_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class OpcodeDisassembler : ProcessInfo</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_Utilities_OpcodeDisassembler__ctor_" data-uid="ERC.Utilities.OpcodeDisassembler.#ctor*"></a>
  <h4 id="ERC_Utilities_OpcodeDisassembler__ctor_ERC_ProcessInfo_" data-uid="ERC.Utilities.OpcodeDisassembler.#ctor(ERC.ProcessInfo)">OpcodeDisassembler(ProcessInfo)</h4>
  <div class="markdown level1 summary"><p>Constructor.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpcodeDisassembler(ProcessInfo parent)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">parent</span></td>
        <td><p>ProcessInfo object to be inherited from.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_OpcodeDisassembler_Disassemble_" data-uid="ERC.Utilities.OpcodeDisassembler.Disassemble*"></a>
  <h4 id="ERC_Utilities_OpcodeDisassembler_Disassemble_System_Byte___" data-uid="ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])">Disassemble(Byte[])</h4>
  <div class="markdown level1 summary"><p>Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; Disassemble(byte[] opcodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">opcodes</span></td>
        <td><p>The opcodes to be disassembled</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ERC_Result containing associated instructions.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_OpcodeDisassembler_Disassemble_" data-uid="ERC.Utilities.OpcodeDisassembler.Disassemble*"></a>
  <h4 id="ERC_Utilities_OpcodeDisassembler_Disassemble_System_Byte___ERC_MachineType_" data-uid="ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType)">Disassemble(Byte[], MachineType)</h4>
  <div class="markdown level1 summary"><p>Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64,
an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;string&gt; Disassemble(byte[] opcodes, MachineType machineType)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">opcodes</span></td>
        <td><p>A byte array containing opcodes to be disassembled</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">machineType</span></td>
        <td><p>a ERC.MachineType of either I386 or x64</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ERC_Result containing associated instructions.</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.PatternTools.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class PatternTools
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class PatternTools
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.PatternTools">
  
  
  <h1 id="ERC_Utilities_PatternTools" data-uid="ERC.Utilities.PatternTools" class="text-break">Class PatternTools
  </h1>
  <div class="markdown level0 summary"><p>Static class used to build a non repeating pattern and identify the position of a string in a non repeating pattern.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">PatternTools</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_PatternTools_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class PatternTools</code></pre>
  </div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_PatternTools_PatternCreate_" data-uid="ERC.Utilities.PatternTools.PatternCreate*"></a>
  <h4 id="ERC_Utilities_PatternTools_PatternCreate_System_Int32_ERC_ErcCore_System_Boolean_" data-uid="ERC.Utilities.PatternTools.PatternCreate(System.Int32,ERC.ErcCore,System.Boolean)">PatternCreate(Int32, ErcCore, Boolean)</h4>
  <div class="markdown level1 summary"><p>Creates a string of non repeating characters.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;string&gt; PatternCreate(int length, ErcCore core, bool extended = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">length</span></td>
        <td><p>The length of the pattern to be created as integer</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">extended</span></td>
        <td><p>(Optional) bool specifying whether the extended character set should be used</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult string containing the generated pattern</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_PatternTools_PatternOffset_" data-uid="ERC.Utilities.PatternTools.PatternOffset*"></a>
  <h4 id="ERC_Utilities_PatternTools_PatternOffset_System_String_ERC_ErcCore_System_Boolean_" data-uid="ERC.Utilities.PatternTools.PatternOffset(System.String,ERC.ErcCore,System.Boolean)">PatternOffset(String, ErcCore, Boolean)</h4>
  <div class="markdown level1 summary"><p>Takes a string of characters and returns the location of the first character in a pattern created by Pattern_Create.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static ErcResult&lt;string&gt; PatternOffset(string pattern, ErcCore core, bool extended = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">pattern</span></td>
        <td><p>The pattern to be searched for.</p>
</td>
      </tr>
      <tr>
        <td><a class="xref" href="ERC.ErcCore.html">ErcCore</a></td>
        <td><span class="parametername">core</span></td>
        <td><p>An ErcCore object</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">extended</span></td>
        <td><p>(Optional) bool specifying whether the extended character set should be used</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult int containing the offset of the supplied pattern within the generated pattern</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.Payloads.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class Payloads
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class Payloads
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.Payloads">
  
  
  <h1 id="ERC_Utilities_Payloads" data-uid="ERC.Utilities.Payloads" class="text-break">Class Payloads
  </h1>
  <div class="markdown level0 summary"><p>A collecton of methods which generate payloads.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">Payloads</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_Payloads_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class Payloads</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Utilities_Payloads_DefaultEgg" data-uid="ERC.Utilities.Payloads.DefaultEgg">DefaultEgg</h4>
  <div class="markdown level1 summary"><p>Default egg hunter tag.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static string DefaultEgg</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_Payloads_EggHunter32" data-uid="ERC.Utilities.Payloads.EggHunter32">EggHunter32</h4>
  <div class="markdown level1 summary"><p>A 32 bit egg hunter.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] EggHunter32</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_Payloads_EggHunter641" data-uid="ERC.Utilities.Payloads.EggHunter641">EggHunter641</h4>
  <div class="markdown level1 summary"><p>A 64 bit egg hunter.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] EggHunter641</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_Payloads_EggHunter642" data-uid="ERC.Utilities.Payloads.EggHunter642">EggHunter642</h4>
  <div class="markdown level1 summary"><p>A second 64 bit egg hunter.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] EggHunter642</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_Payloads_EggHunterWOW64" data-uid="ERC.Utilities.Payloads.EggHunterWOW64">EggHunterWOW64</h4>
  <div class="markdown level1 summary"><p>An egg hunter that will work on 32 bit systems or 32 bit processes running under WOW64.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] EggHunterWOW64</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_Payloads_ByteArrayConstructor_" data-uid="ERC.Utilities.Payloads.ByteArrayConstructor*"></a>
  <h4 id="ERC_Utilities_Payloads_ByteArrayConstructor_System_Byte___" data-uid="ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])">ByteArrayConstructor(Byte[])</h4>
  <div class="markdown level1 summary"><p>Creates an array of all possible byte values except those passed to the function.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static byte[] ByteArrayConstructor(byte[] unwantedBytes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">unwantedBytes</span></td>
        <td><p>Takes a byte array of bytes to be excluded</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><p>Returns an array of all other possible bytes.</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Payloads_ByteCompare_" data-uid="ERC.Utilities.Payloads.ByteCompare*"></a>
  <h4 id="ERC_Utilities_Payloads_ByteCompare_ERC_ProcessInfo_System_IntPtr_System_Byte___" data-uid="ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])">ByteCompare(ProcessInfo, IntPtr, Byte[])</h4>
  <div class="markdown level1 summary"><p>Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify
bytes which can not be passed into a program without corrupting the input.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Tuple&lt;bool, byte[], byte[]&gt; ByteCompare(ProcessInfo info, IntPtr startAddress, byte[] bytes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The process to compare memory from</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>The address at which to start the comparison</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">bytes</span></td>
        <td><p>The byte array containing the bytes to be compared</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Tuple</span>&lt;<span class="xref">System.Boolean</span>, <span class="xref">System.Byte</span>[], <span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing
the bytes provided and a byte array containing the bytes read from process memory</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Payloads_ByteCompare_" data-uid="ERC.Utilities.Payloads.ByteCompare*"></a>
  <h4 id="ERC_Utilities_Payloads_ByteCompare_ERC_ProcessInfo_System_IntPtr_System_String_" data-uid="ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)">ByteCompare(ProcessInfo, IntPtr, String)</h4>
  <div class="markdown level1 summary"><p>Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify
bytes which can not be passed into a program without corrupting the input.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Tuple&lt;bool, byte[], byte[]&gt; ByteCompare(ProcessInfo info, IntPtr startAddress, string byteFilePath)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>The process to compare memory from</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.IntPtr</span></td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>The address at which to start the comparison</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">byteFilePath</span></td>
        <td><p>The path to a file containing the bytes to be compared</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Tuple</span>&lt;<span class="xref">System.Boolean</span>, <span class="xref">System.Byte</span>[], <span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing
the bytes provided and a byte array containing the bytes read from process memory</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Payloads_EggHunterConstructor_" data-uid="ERC.Utilities.Payloads.EggHunterConstructor*"></a>
  <h4 id="ERC_Utilities_Payloads_EggHunterConstructor_System_String_" data-uid="ERC.Utilities.Payloads.EggHunterConstructor(System.String)">EggHunterConstructor(String)</h4>
  <div class="markdown level1 summary"><p>Generates a selection of EggHunter payloads. A custom tag can be specified, if no tag is specified EggHunters will search for the default tag (ERCD)</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Dictionary&lt;string, byte[]&gt; EggHunterConstructor(string tag = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">tag</span></td>
        <td><p>A custom tag which the egg hunters will search for.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.String</span>, <span class="xref">System.Byte</span>[]&gt;</td>
        <td><p>Returns a dictionary containing a list of EggHunters and string detailing them</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_Payloads_PopPopRet_" data-uid="ERC.Utilities.Payloads.PopPopRet*"></a>
  <h4 id="ERC_Utilities_Payloads_PopPopRet_System_Byte___" data-uid="ERC.Utilities.Payloads.PopPopRet(System.Byte[])">PopPopRet(Byte[])</h4>
  <div class="markdown level1 summary"><p>Finds all instances of POP X POP X RET in a given byte array.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;int&gt; PopPopRet(byte[] data)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">data</span></td>
        <td><p>Byte array to be searched</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.Int32</span>&gt;</td>
        <td><p>Returns an array of integers containing the offsets of the instruction sets.</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.PtrRemover.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class PtrRemover
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class PtrRemover
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.PtrRemover">
  
  
  <h1 id="ERC_Utilities_PtrRemover" data-uid="ERC.Utilities.PtrRemover" class="text-break">Class PtrRemover
  </h1>
  <div class="markdown level0 summary"><p>Contains methods for identifying and removing pointers to unwanted data.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">PtrRemover</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_PtrRemover_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class PtrRemover</code></pre>
  </div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_PtrRemover_RemovePointers_" data-uid="ERC.Utilities.PtrRemover.RemovePointers*"></a>
  <h4 id="ERC_Utilities_PtrRemover_RemovePointers_ERC_MachineType_System_Collections_Generic_Dictionary_System_IntPtr_System_String__System_Byte___" data-uid="ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.Dictionary{System.IntPtr,System.String},System.Byte[])">RemovePointers(MachineType, Dictionary&lt;IntPtr, String&gt;, Byte[])</h4>
  <div class="markdown level1 summary"><p>Removes pointers which contain unwanted bytes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Dictionary&lt;IntPtr, string&gt; RemovePointers(MachineType mt, Dictionary&lt;IntPtr, string&gt; srcList, byte[] bytes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">mt</span></td>
        <td><p>MachineType architecture of the associated process.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">srcList</span></td>
        <td><p>The list from which to remove the pointers</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">bytes</span></td>
        <td><p>If a pointer contains any of these bytes it will be discarded</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td><p>Returns a ErcResult of Dictionary IntPtr, String</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_PtrRemover_RemovePointers_" data-uid="ERC.Utilities.PtrRemover.RemovePointers*"></a>
  <h4 id="ERC_Utilities_PtrRemover_RemovePointers_ERC_MachineType_System_Collections_Generic_List_System_IntPtr__System_Byte___" data-uid="ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.List{System.IntPtr},System.Byte[])">RemovePointers(MachineType, List&lt;IntPtr&gt;, Byte[])</h4>
  <div class="markdown level1 summary"><p>Removes pointers which contain unwanted bytes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;IntPtr&gt; RemovePointers(MachineType mt, List&lt;IntPtr&gt; srcList, byte[] bytes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.MachineType.html">MachineType</a></td>
        <td><span class="parametername">mt</span></td>
        <td><p>MachineType architecture of the associated process.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><span class="parametername">srcList</span></td>
        <td><p>The list from which to remove the pointers</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">bytes</span></td>
        <td><p>If a pointer contains any of these bytes it will be discarded</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><p>Returns a ErcResult of List IntPtr</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_PtrRemover_RemovePointersProtection_" data-uid="ERC.Utilities.PtrRemover.RemovePointersProtection*"></a>
  <h4 id="ERC_Utilities_PtrRemover_RemovePointersProtection_ERC_ProcessInfo_System_Collections_Generic_List_System_IntPtr__System_String_" data-uid="ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.String)">RemovePointersProtection(ProcessInfo, List&lt;IntPtr&gt;, String)</h4>
  <div class="markdown level1 summary"><p>Removes pointers from a dictionary when pointers do not have the protection level specified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;IntPtr&gt; RemovePointersProtection(ProcessInfo info, List&lt;IntPtr&gt; srcList, string protection = &quot;exec&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>ProcessInfo object of the associated process.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><span class="parametername">srcList</span></td>
        <td><p>List of pointers.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">protection</span></td>
        <td><p>Specified protection level of pointers.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><p>Returns a Dictionary of Intptr, string</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_PtrRemover_RemovePointersProtection_" data-uid="ERC.Utilities.PtrRemover.RemovePointersProtection*"></a>
  <h4 id="ERC_Utilities_PtrRemover_RemovePointersProtection_ERC_ProcessInfo_System_Collections_Generic_List_System_IntPtr__System_UInt32_" data-uid="ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.UInt32)">RemovePointersProtection(ProcessInfo, List&lt;IntPtr&gt;, UInt32)</h4>
  <div class="markdown level1 summary"><p>Removes pointers from a dictionary when pointers do not have the protection level specified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static List&lt;IntPtr&gt; RemovePointersProtection(ProcessInfo info, List&lt;IntPtr&gt; srcList, uint protection)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">info</span></td>
        <td><p>ProcessInfo object of the associated process.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><span class="parametername">srcList</span></td>
        <td><p>List of pointers.</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt32</span></td>
        <td><span class="parametername">protection</span></td>
        <td><p>Specified protection level of pointers.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.IntPtr</span>&gt;</td>
        <td><p>Returns a Dictionary of Intptr, string</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.RopChainGenerator32.X86Lists.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class RopChainGenerator32.X86Lists
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class RopChainGenerator32.X86Lists
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists">
  
  
  <h1 id="ERC_Utilities_RopChainGenerator32_X86Lists" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists" class="text-break">Class RopChainGenerator32.X86Lists
  </h1>
  <div class="markdown level0 summary"><p>Contains lists of instructions for specific registers.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">RopChainGenerator32.X86Lists</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_RopChainGenerator32_X86Lists_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class X86Lists</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_add" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.add">add</h4>
  <div class="markdown level1 summary"><p>add list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; add</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_and" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.and">and</h4>
  <div class="markdown level1 summary"><p>and list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; and</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_callEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.callEsp">callEsp</h4>
  <div class="markdown level1 summary"><p>callEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; callEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEax" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEax">decEax</h4>
  <div class="markdown level1 summary"><p>decEax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEbp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEbp">decEbp</h4>
  <div class="markdown level1 summary"><p>decEbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEbx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEbx">decEbx</h4>
  <div class="markdown level1 summary"><p>decEbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEcx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEcx">decEcx</h4>
  <div class="markdown level1 summary"><p>decEcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEdi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEdi">decEdi</h4>
  <div class="markdown level1 summary"><p>decEdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEdx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEdx">decEdx</h4>
  <div class="markdown level1 summary"><p>decEdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEsi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEsi">decEsi</h4>
  <div class="markdown level1 summary"><p>decEsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_decEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.decEsp">decEsp</h4>
  <div class="markdown level1 summary"><p>decEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEax" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEax">incEax</h4>
  <div class="markdown level1 summary"><p>incEax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEbp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEbp">incEbp</h4>
  <div class="markdown level1 summary"><p>incEbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEbx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEbx">incEbx</h4>
  <div class="markdown level1 summary"><p>incEbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEcx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEcx">incEcx</h4>
  <div class="markdown level1 summary"><p>incEcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEdi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEdi">incEdi</h4>
  <div class="markdown level1 summary"><p>incEdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEdx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEdx">incEdx</h4>
  <div class="markdown level1 summary"><p>incEdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEsi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEsi">incEsi</h4>
  <div class="markdown level1 summary"><p>incEsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_incEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.incEsp">incEsp</h4>
  <div class="markdown level1 summary"><p>incEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_jmpEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp">jmpEsp</h4>
  <div class="markdown level1 summary"><p>jmpEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; jmpEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_mov" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.mov">mov</h4>
  <div class="markdown level1 summary"><p>mov list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; mov</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEax" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEax">popEax</h4>
  <div class="markdown level1 summary"><p>popEax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEbp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEbp">popEbp</h4>
  <div class="markdown level1 summary"><p>popEbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEbx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEbx">popEbx</h4>
  <div class="markdown level1 summary"><p>popEbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEcx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEcx">popEcx</h4>
  <div class="markdown level1 summary"><p>popEcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEdi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEdi">popEdi</h4>
  <div class="markdown level1 summary"><p>popEdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEdx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEdx">popEdx</h4>
  <div class="markdown level1 summary"><p>popEdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEsi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEsi">popEsi</h4>
  <div class="markdown level1 summary"><p>popEsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_popEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.popEsp">popEsp</h4>
  <div class="markdown level1 summary"><p>popEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushad" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushad">pushad</h4>
  <div class="markdown level1 summary"><p>pushad list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushad</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEax" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEax">pushEax</h4>
  <div class="markdown level1 summary"><p>pushEax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEbp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp">pushEbp</h4>
  <div class="markdown level1 summary"><p>pushEbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEbx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx">pushEbx</h4>
  <div class="markdown level1 summary"><p>pushEbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEcx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx">pushEcx</h4>
  <div class="markdown level1 summary"><p>pushEcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEdi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi">pushEdi</h4>
  <div class="markdown level1 summary"><p>pushEdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEdx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx">pushEdx</h4>
  <div class="markdown level1 summary"><p>pushEdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEsi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi">pushEsi</h4>
  <div class="markdown level1 summary"><p>pushEsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_pushEsp" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp">pushEsp</h4>
  <div class="markdown level1 summary"><p>pushEsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushEsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_sub" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.sub">sub</h4>
  <div class="markdown level1 summary"><p>sub list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; sub</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEax" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEax">xorEax</h4>
  <div class="markdown level1 summary"><p>xorEax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEbx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx">xorEbx</h4>
  <div class="markdown level1 summary"><p>xorEbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEcx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx">xorEcx</h4>
  <div class="markdown level1 summary"><p>xorEcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEdi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi">xorEdi</h4>
  <div class="markdown level1 summary"><p>xorEdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEdx" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx">xorEdx</h4>
  <div class="markdown level1 summary"><p>xorEdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_X86Lists_xorEsi" data-uid="ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi">xorEsi</h4>
  <div class="markdown level1 summary"><p>xorEsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorEsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.RopChainGenerator32.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class RopChainGenerator32
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class RopChainGenerator32
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.RopChainGenerator32">
  
  
  <h1 id="ERC_Utilities_RopChainGenerator32" data-uid="ERC.Utilities.RopChainGenerator32" class="text-break">Class RopChainGenerator32
  </h1>
  <div class="markdown level0 summary"><p>Attempts to create Rop chains from 64 bit processes.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">RopChainGenerator32</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_RopChainGenerator32_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class RopChainGenerator32</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_Utilities_RopChainGenerator32__ctor_" data-uid="ERC.Utilities.RopChainGenerator32.#ctor*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator32__ctor_ERC_ProcessInfo_" data-uid="ERC.Utilities.RopChainGenerator32.#ctor(ERC.ProcessInfo)">RopChainGenerator32(ProcessInfo)</h4>
  <div class="markdown level1 summary"><p>Constructor.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public RopChainGenerator32(ProcessInfo _info)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">_info</span></td>
        <td><p>The ProcessInfo object.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator32_VirtualAllocChain" data-uid="ERC.Utilities.RopChainGenerator32.VirtualAllocChain">VirtualAllocChain</h4>
  <div class="markdown level1 summary"><p>Contains a ROP chain which calls the VirtualAlloc method.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;Tuple&lt;byte[], string&gt;&gt; VirtualAllocChain</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.Tuple</span>&lt;<span class="xref">System.Byte</span>[], <span class="xref">System.String</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_RopChainGenerator32_GenerateRopChain32_" data-uid="ERC.Utilities.RopChainGenerator32.GenerateRopChain32*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator32_GenerateRopChain32_System_Byte___System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})">GenerateRopChain32(Byte[], Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Creates a RopChain for a specific process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; GenerateRopChain32(byte[] ptrsToExclude, byte[] startAddress = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">ptrsToExclude</span></td>
        <td><p>Takes a byte array of values used to disqualify ROP gadgets</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>A Address to be used as the start location for which memory will be made executable</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>A list of modules to be excluded from the search for ROP gadgets</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult string containing</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_RopChainGenerator32_GenerateRopChain32_" data-uid="ERC.Utilities.RopChainGenerator32.GenerateRopChain32*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator32_GenerateRopChain32_System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Collections.Generic.List{System.String})">GenerateRopChain32(Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Creates a RopChain for a specific process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; GenerateRopChain32(byte[] startAddress = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>A Address to be used as the start location for which memory will be made executable</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>A list of modules to be excluded from the search for ROP gadgets</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult string containing</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.RopChainGenerator64.X64Lists.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class RopChainGenerator64.X64Lists
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class RopChainGenerator64.X64Lists
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists">
  
  
  <h1 id="ERC_Utilities_RopChainGenerator64_X64Lists" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists" class="text-break">Class RopChainGenerator64.X64Lists
  </h1>
  <div class="markdown level0 summary"><p>Contains lists of instructions for specific registers.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">RopChainGenerator64.X64Lists</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_RopChainGenerator64_X64Lists_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class X64Lists</code></pre>
  </div>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_add" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.add">add</h4>
  <div class="markdown level1 summary"><p>add list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; add</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_callRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.callRsp">callRsp</h4>
  <div class="markdown level1 summary"><p>callRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; callRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR10" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR10">decR10</h4>
  <div class="markdown level1 summary"><p>decR10 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR11" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR11">decR11</h4>
  <div class="markdown level1 summary"><p>decR11 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR12" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR12">decR12</h4>
  <div class="markdown level1 summary"><p>decR12 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR13" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR13">decR13</h4>
  <div class="markdown level1 summary"><p>decR13 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR14" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR14">decR14</h4>
  <div class="markdown level1 summary"><p>decR14 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR15" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR15">decR15</h4>
  <div class="markdown level1 summary"><p>decR15 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR8" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR8">decR8</h4>
  <div class="markdown level1 summary"><p>decR8 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decR9" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decR9">decR9</h4>
  <div class="markdown level1 summary"><p>decR9 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decR9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRax" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRax">decRax</h4>
  <div class="markdown level1 summary"><p>decRax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRbp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRbp">decRbp</h4>
  <div class="markdown level1 summary"><p>decRbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRbx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRbx">decRbx</h4>
  <div class="markdown level1 summary"><p>decRbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRcx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRcx">decRcx</h4>
  <div class="markdown level1 summary"><p>decRcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRdi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRdi">decRdi</h4>
  <div class="markdown level1 summary"><p>decRdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRdx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRdx">decRdx</h4>
  <div class="markdown level1 summary"><p>decRdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRsi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRsi">decRsi</h4>
  <div class="markdown level1 summary"><p>decRsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_decRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.decRsp">decRsp</h4>
  <div class="markdown level1 summary"><p>decRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; decRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR10" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR10">incR10</h4>
  <div class="markdown level1 summary"><p>incR10 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR11" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR11">incR11</h4>
  <div class="markdown level1 summary"><p>incR11 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR12" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR12">incR12</h4>
  <div class="markdown level1 summary"><p>incR12 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR13" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR13">incR13</h4>
  <div class="markdown level1 summary"><p>incR13 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR14" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR14">incR14</h4>
  <div class="markdown level1 summary"><p>incR14 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR15" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR15">incR15</h4>
  <div class="markdown level1 summary"><p>incR15 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR8" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR8">incR8</h4>
  <div class="markdown level1 summary"><p>incR8 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incR9" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incR9">incR9</h4>
  <div class="markdown level1 summary"><p>incR9 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incR9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRax" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRax">incRax</h4>
  <div class="markdown level1 summary"><p>incRax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRbp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRbp">incRbp</h4>
  <div class="markdown level1 summary"><p>incRbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRbx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRbx">incRbx</h4>
  <div class="markdown level1 summary"><p>incRbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRcx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRcx">incRcx</h4>
  <div class="markdown level1 summary"><p>incRcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRdi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRdi">incRdi</h4>
  <div class="markdown level1 summary"><p>incRdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRdx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRdx">incRdx</h4>
  <div class="markdown level1 summary"><p>incRdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRsi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRsi">incRsi</h4>
  <div class="markdown level1 summary"><p>incRsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_incRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.incRsp">incRsp</h4>
  <div class="markdown level1 summary"><p>incRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; incRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_jmpRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp">jmpRsp</h4>
  <div class="markdown level1 summary"><p>jmpRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; jmpRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_mov" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.mov">mov</h4>
  <div class="markdown level1 summary"><p>mov list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; mov</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR10" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR10">popR10</h4>
  <div class="markdown level1 summary"><p>popR10 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR11" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR11">popR11</h4>
  <div class="markdown level1 summary"><p>popR11 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR12" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR12">popR12</h4>
  <div class="markdown level1 summary"><p>popR12 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR13" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR13">popR13</h4>
  <div class="markdown level1 summary"><p>popR13 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR14" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR14">popR14</h4>
  <div class="markdown level1 summary"><p>popR14 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR15" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR15">popR15</h4>
  <div class="markdown level1 summary"><p>popR15 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR8" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR8">popR8</h4>
  <div class="markdown level1 summary"><p>popR8 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popR9" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popR9">popR9</h4>
  <div class="markdown level1 summary"><p>popR9 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popR9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRax" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRax">popRax</h4>
  <div class="markdown level1 summary"><p>popRax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRbp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRbp">popRbp</h4>
  <div class="markdown level1 summary"><p>popRbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRbx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRbx">popRbx</h4>
  <div class="markdown level1 summary"><p>popRbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRcx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRcx">popRcx</h4>
  <div class="markdown level1 summary"><p>popRcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRdi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRdi">popRdi</h4>
  <div class="markdown level1 summary"><p>popRdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRdx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRdx">popRdx</h4>
  <div class="markdown level1 summary"><p>popRdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRsi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRsi">popRsi</h4>
  <div class="markdown level1 summary"><p>popRsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_popRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.popRsp">popRsp</h4>
  <div class="markdown level1 summary"><p>popRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; popRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR10" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR10">pushR10</h4>
  <div class="markdown level1 summary"><p>pushR10 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR11" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR11">pushR11</h4>
  <div class="markdown level1 summary"><p>pushR11 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR12" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR12">pushR12</h4>
  <div class="markdown level1 summary"><p>pushR12 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR13" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR13">pushR13</h4>
  <div class="markdown level1 summary"><p>pushR13 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR14" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR14">pushR14</h4>
  <div class="markdown level1 summary"><p>pushR14 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR15" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR15">pushR15</h4>
  <div class="markdown level1 summary"><p>pushR15 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR8" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR8">pushR8</h4>
  <div class="markdown level1 summary"><p>pushR8 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushR9" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushR9">pushR9</h4>
  <div class="markdown level1 summary"><p>pushR9 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushR9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRax" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRax">pushRax</h4>
  <div class="markdown level1 summary"><p>pushRax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRbp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp">pushRbp</h4>
  <div class="markdown level1 summary"><p>pushRbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRbx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx">pushRbx</h4>
  <div class="markdown level1 summary"><p>pushRbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRcx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx">pushRcx</h4>
  <div class="markdown level1 summary"><p>pushRcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRdi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi">pushRdi</h4>
  <div class="markdown level1 summary"><p>pushRdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRdx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx">pushRdx</h4>
  <div class="markdown level1 summary"><p>pushRdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRsi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi">pushRsi</h4>
  <div class="markdown level1 summary"><p>pushRsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_pushRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp">pushRsp</h4>
  <div class="markdown level1 summary"><p>pushRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; pushRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_sub" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.sub">sub</h4>
  <div class="markdown level1 summary"><p>sub list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; sub</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR10" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR10">xorR10</h4>
  <div class="markdown level1 summary"><p>xorR10 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR10</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR11" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR11">xorR11</h4>
  <div class="markdown level1 summary"><p>xorR11 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR11</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR12" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR12">xorR12</h4>
  <div class="markdown level1 summary"><p>xorR12 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR12</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR13" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR13">xorR13</h4>
  <div class="markdown level1 summary"><p>xorR13 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR13</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR14" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR14">xorR14</h4>
  <div class="markdown level1 summary"><p>xorR14 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR14</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR15" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR15">xorR15</h4>
  <div class="markdown level1 summary"><p>xorR15 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR15</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR8" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR8">xorR8</h4>
  <div class="markdown level1 summary"><p>xorR8 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR8</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorR9" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorR9">xorR9</h4>
  <div class="markdown level1 summary"><p>xorR9 list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorR9</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRax" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRax">xorRax</h4>
  <div class="markdown level1 summary"><p>xorRax list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRax</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRbp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp">xorRbp</h4>
  <div class="markdown level1 summary"><p>xorRbp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRbp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRbx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx">xorRbx</h4>
  <div class="markdown level1 summary"><p>xorRbx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRbx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRcx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx">xorRcx</h4>
  <div class="markdown level1 summary"><p>xorRcx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRcx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRdi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi">xorRdi</h4>
  <div class="markdown level1 summary"><p>xorRdi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRdi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRdx" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx">xorRdx</h4>
  <div class="markdown level1 summary"><p>xorRdx list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRdx</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRsi" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi">xorRsi</h4>
  <div class="markdown level1 summary"><p>xorRsi list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRsi</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_X64Lists_xorRsp" data-uid="ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp">xorRsp</h4>
  <div class="markdown level1 summary"><p>xorRsp list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Dictionary&lt;IntPtr, string&gt; xorRsp</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.IntPtr</span>, <span class="xref">System.String</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.RopChainGenerator64.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class RopChainGenerator64
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class RopChainGenerator64
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities.RopChainGenerator64">
  
  
  <h1 id="ERC_Utilities_RopChainGenerator64" data-uid="ERC.Utilities.RopChainGenerator64" class="text-break">Class RopChainGenerator64
  </h1>
  <div class="markdown level0 summary"><p>Attempts to create Rop chains from 64 bit processes.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">RopChainGenerator64</span></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="ERC.Utilities.html">ERC.Utilities</a></h6>
  <h6><strong>Assembly</strong>: ERC.Net.dll</h6>
  <h5 id="ERC_Utilities_RopChainGenerator64_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class RopChainGenerator64</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="ERC_Utilities_RopChainGenerator64__ctor_" data-uid="ERC.Utilities.RopChainGenerator64.#ctor*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator64__ctor_ERC_ProcessInfo_" data-uid="ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)">RopChainGenerator64(ProcessInfo)</h4>
  <div class="markdown level1 summary"><p>Constructor</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public RopChainGenerator64(ProcessInfo _info)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></td>
        <td><span class="parametername">_info</span></td>
        <td><p>ProcessInfo object for which a ROP chain will be generated</p>
</td>
      </tr>
    </tbody>
  </table>
  <h3 id="fields">Fields
  </h3>
  
  
  <h4 id="ERC_Utilities_RopChainGenerator64_VirtualAllocChain" data-uid="ERC.Utilities.RopChainGenerator64.VirtualAllocChain">VirtualAllocChain</h4>
  <div class="markdown level1 summary"><p>Contains a ROP chain which calls the VirtualAlloc method.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public List&lt;Tuple&lt;byte[], string&gt;&gt; VirtualAllocChain</code></pre>
  </div>
  <h5 class="fieldValue">Field Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.Tuple</span>&lt;<span class="xref">System.Byte</span>[], <span class="xref">System.String</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="ERC_Utilities_RopChainGenerator64_GenerateRopChain64_" data-uid="ERC.Utilities.RopChainGenerator64.GenerateRopChain64*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator64_GenerateRopChain64_System_Byte___System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String})">GenerateRopChain64(Byte[], Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Creates a RopChain for a specific process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; GenerateRopChain64(byte[] ptrsToExclude, byte[] startAddress = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">ptrsToExclude</span></td>
        <td><p>Takes a byte array of values used to disqualify ROP gadgets</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>A Address to be used as the start location for which memory will be made executable</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>A list of modules to be excluded from the search for ROP gadgets</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult string containing</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="ERC_Utilities_RopChainGenerator64_GenerateRopChain64_" data-uid="ERC.Utilities.RopChainGenerator64.GenerateRopChain64*"></a>
  <h4 id="ERC_Utilities_RopChainGenerator64_GenerateRopChain64_System_Byte___System_Collections_Generic_List_System_String__" data-uid="ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String})">GenerateRopChain64(Byte[], List&lt;String&gt;)</h4>
  <div class="markdown level1 summary"><p>Creates a RopChain for a specific process.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ErcResult&lt;string&gt; GenerateRopChain64(byte[] startAddress = null, List&lt;string&gt; excludes = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Byte</span>[]</td>
        <td><span class="parametername">startAddress</span></td>
        <td><p>A Address to be used as the start location for which memory will be made executable</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.List</span>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">excludes</span></td>
        <td><p>A list of modules to be excluded from the search for ROP gadgets</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="ERC.ErcResult-1.html">ErcResult</a>&lt;<span class="xref">System.String</span>&gt;</td>
        <td><p>Returns an ErcResult string containing</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.Utilities.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Namespace ERC.Utilities
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Namespace ERC.Utilities
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC.Utilities">
  
  <h1 id="ERC_Utilities" data-uid="ERC.Utilities" class="text-break">Namespace ERC.Utilities
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="markdown level0 remarks"></div>
    <h3 id="classes">Classes
  </h3>
      <h4><a class="xref" href="ERC.Utilities.Convert.html">Convert</a></h4>
      <section><p>Static class containing methods for common conversions.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.OpcodeAssembler.html">OpcodeAssembler</a></h4>
      <section><p>OpcodeAssembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as
a static function to assemble instructions.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.OpcodeDisassembler.html">OpcodeDisassembler</a></h4>
      <section><p>OpcodeDisassembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as
a static function to disassemble opcodes.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.PatternTools.html">PatternTools</a></h4>
      <section><p>Static class used to build a non repeating pattern and identify the position of a string in a non repeating pattern.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.Payloads.html">Payloads</a></h4>
      <section><p>A collecton of methods which generate payloads.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.PtrRemover.html">PtrRemover</a></h4>
      <section><p>Contains methods for identifying and removing pointers to unwanted data.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.RopChainGenerator32.html">RopChainGenerator32</a></h4>
      <section><p>Attempts to create Rop chains from 64 bit processes.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.RopChainGenerator32.X86Lists.html">RopChainGenerator32.X86Lists</a></h4>
      <section><p>Contains lists of instructions for specific registers.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.RopChainGenerator64.html">RopChainGenerator64</a></h4>
      <section><p>Attempts to create Rop chains from 64 bit processes.</p>
</section>
      <h4><a class="xref" href="ERC.Utilities.RopChainGenerator64.X64Lists.html">RopChainGenerator64.X64Lists</a></h4>
      <section><p>Contains lists of instructions for specific registers.</p>
</section>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/ERC.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Namespace ERC
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Namespace ERC
   ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ERC">
  
  <h1 id="ERC" data-uid="ERC" class="text-break">Namespace ERC
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="markdown level0 remarks"></div>
    <h3 id="classes">Classes
  </h3>
      <h4><a class="xref" href="ERC.DisplayOutput.html">DisplayOutput</a></h4>
      <section><p>Provides output in various human readable formats of data from the library.</p>
</section>
      <h4><a class="xref" href="ERC.ErcCore.html">ErcCore</a></h4>
      <section><p>A single instance of this object should be instantiated at a minimum. It is used for storing global variables such as the working directory etc.</p>
</section>
      <h4><a class="xref" href="ERC.ERCException.html">ERCException</a></h4>
      <section><p>Custom exception handler.</p>
</section>
      <h4><a class="xref" href="ERC.ErcResult-1.html">ErcResult&lt;T&gt;</a></h4>
      <section><p>A basic object which contains a generic type and exception.</p>
</section>
      <h4><a class="xref" href="ERC.ModuleInfo.html">ModuleInfo</a></h4>
      <section><p>Contains all information relating to a specific module.</p>
</section>
      <h4><a class="xref" href="ERC.ProcessInfo.html">ProcessInfo</a></h4>
      <section><p>Contains information needed for the associated functions relating to the process.</p>
</section>
      <h4><a class="xref" href="ERC.ThreadInfo.html">ThreadInfo</a></h4>
      <section><p>Stores information about the current thread.</p>
</section>
    <h3 id="enums">Enums
  </h3>
      <h4><a class="xref" href="ERC.MachineType.html">MachineType</a></h4>
      <section><p>Enum containing types of machine architectures.</p>
</section>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/index.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>ERC.Net </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="ERC.Net ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">
<h1 id="ercnet">ERC.Net</h1>

<p>In the left panel, you find the API documentation for all accessible structures and functionality of the ERC.Net library.</p>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/api/toc.html
================================================
ï»¿
<div id="sidetoggle">
  <div>
    <div class="sidefilter">
      <form class="toc-filter">
        <span class="glyphicon glyphicon-filter filter-icon"></span>
        <span class="glyphicon glyphicon-remove clear-icon" id="toc_filter_clear"></span>
        <input type="text" id="toc_filter_input" placeholder="Enter here to filter..." onkeypress="if(event.keyCode==13) {return false;}">
      </form>
    </div>
    <div class="sidetoc">
      <div class="toc" id="toc">
          
          <ul class="nav level1">
                <li>
                    <span class="expand-stub"></span>
                    <a href="ERC.html" name="" title="ERC">ERC</a>
                    
                    <ul class="nav level2">
                          <li>
                              <a href="ERC.DisplayOutput.html" name="" title="DisplayOutput">DisplayOutput</a>
                          </li>
                          <li>
                              <a href="ERC.ErcCore.html" name="" title="ErcCore">ErcCore</a>
                          </li>
                          <li>
                              <a href="ERC.ERCException.html" name="" title="ERCException">ERCException</a>
                          </li>
                          <li>
                              <a href="ERC.ErcResult-1.html" name="" title="ErcResult&lt;T&gt;">ErcResult&lt;T&gt;</a>
                          </li>
                          <li>
                              <a href="ERC.MachineType.html" name="" title="MachineType">MachineType</a>
                          </li>
                          <li>
                              <a href="ERC.ModuleInfo.html" name="" title="ModuleInfo">ModuleInfo</a>
                          </li>
                          <li>
                              <a href="ERC.ProcessInfo.html" name="" title="ProcessInfo">ProcessInfo</a>
                          </li>
                          <li>
                              <a href="ERC.ThreadInfo.html" name="" title="ThreadInfo">ThreadInfo</a>
                          </li>
                    </ul>
                </li>
                <li>
                    <span class="expand-stub"></span>
                    <a href="ERC.Structures.html" name="" title="ERC.Structures">ERC.Structures</a>
                    
                    <ul class="nav level2">
                          <li>
                              <a href="ERC.Structures.AllocationProtect.html" name="" title="AllocationProtect">AllocationProtect</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.ClientID.html" name="" title="ClientID">ClientID</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.CONTEXT_FLAGS.html" name="" title="CONTEXT_FLAGS">CONTEXT_FLAGS</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.CONTEXT32.html" name="" title="CONTEXT32">CONTEXT32</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.CONTEXT64.html" name="" title="CONTEXT64">CONTEXT64</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.FLOATING_SAVE_AREA.html" name="" title="FLOATING_SAVE_AREA">FLOATING_SAVE_AREA</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_DATA_DIRECTORY.html" name="" title="IMAGE_DATA_DIRECTORY">IMAGE_DATA_DIRECTORY</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_DOS_HEADER.html" name="" title="IMAGE_DOS_HEADER">IMAGE_DOS_HEADER</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_FILE_HEADER.html" name="" title="IMAGE_FILE_HEADER">IMAGE_FILE_HEADER</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.html" name="" title="IMAGE_LOAD_CONFIG_CODE_INTEGRITY">IMAGE_LOAD_CONFIG_CODE_INTEGRITY</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.html" name="" title="IMAGE_LOAD_CONFIG_DIRECTORY32">IMAGE_LOAD_CONFIG_DIRECTORY32</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.html" name="" title="IMAGE_LOAD_CONFIG_DIRECTORY64">IMAGE_LOAD_CONFIG_DIRECTORY64</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_NT_HEADERS32.html" name="" title="IMAGE_NT_HEADERS32">IMAGE_NT_HEADERS32</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_NT_HEADERS64.html" name="" title="IMAGE_NT_HEADERS64">IMAGE_NT_HEADERS64</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_OPTIONAL_HEADER32.html" name="" title="IMAGE_OPTIONAL_HEADER32">IMAGE_OPTIONAL_HEADER32</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.IMAGE_OPTIONAL_HEADER64.html" name="" title="IMAGE_OPTIONAL_HEADER64">IMAGE_OPTIONAL_HEADER64</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.LIST_ENTRY.html" name="" title="LIST_ENTRY">LIST_ENTRY</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.LOADED_IMAGE.html" name="" title="LOADED_IMAGE">LOADED_IMAGE</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.LoadLibraryFlags.html" name="" title="LoadLibraryFlags">LoadLibraryFlags</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.M128A.html" name="" title="M128A">M128A</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.MagicType.html" name="" title="MagicType">MagicType</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.MEMORY_BASIC_INFORMATION32.html" name="" title="MEMORY_BASIC_INFORMATION32">MEMORY_BASIC_INFORMATION32</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.MEMORY_BASIC_INFORMATION64.html" name="" title="MEMORY_BASIC_INFORMATION64">MEMORY_BASIC_INFORMATION64</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.ProcessAccessFlags.html" name="" title="ProcessAccessFlags">ProcessAccessFlags</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.RegisterInfo.html" name="" title="RegisterInfo">RegisterInfo</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.StateEnum.html" name="" title="StateEnum">StateEnum</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.SubSystemType.html" name="" title="SubSystemType">SubSystemType</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.TEB.html" name="" title="TEB">TEB</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.ThreadAccess.html" name="" title="ThreadAccess">ThreadAccess</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.ThreadBasicInformation.html" name="" title="ThreadBasicInformation">ThreadBasicInformation</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.TypeEnum.html" name="" title="TypeEnum">TypeEnum</a>
                          </li>
                          <li>
                              <a href="ERC.Structures.XSAVE_FORMAT64.html" name="" title="XSAVE_FORMAT64">XSAVE_FORMAT64</a>
                          </li>
                    </ul>
                </li>
                <li>
                    <span class="expand-stub"></span>
                    <a href="ERC.Utilities.html" name="" title="ERC.Utilities">ERC.Utilities</a>
                    
                    <ul class="nav level2">
                          <li>
                              <a href="ERC.Utilities.Convert.html" name="" title="Convert">Convert</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.OpcodeAssembler.html" name="" title="OpcodeAssembler">OpcodeAssembler</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.OpcodeDisassembler.html" name="" title="OpcodeDisassembler">OpcodeDisassembler</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.PatternTools.html" name="" title="PatternTools">PatternTools</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.Payloads.html" name="" title="Payloads">Payloads</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.PtrRemover.html" name="" title="PtrRemover">PtrRemover</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.RopChainGenerator32.html" name="" title="RopChainGenerator32">RopChainGenerator32</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.RopChainGenerator32.X86Lists.html" name="" title="RopChainGenerator32.X86Lists">RopChainGenerator32.X86Lists</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.RopChainGenerator64.html" name="" title="RopChainGenerator64">RopChainGenerator64</a>
                          </li>
                          <li>
                              <a href="ERC.Utilities.RopChainGenerator64.X64Lists.html" name="" title="RopChainGenerator64.X64Lists">RopChainGenerator64.X64Lists</a>
                          </li>
                    </ul>
                </li>
          </ul>
      </div>
    </div>
  </div>
</div>


================================================
File: ERC/docs/articles/LICENSE.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title> </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content=" ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">

<pre><code>                GNU GENERAL PUBLIC LICENSE
                   Version 3, 29 June 2007
</code></pre>
<p>Copyright (C) 2007 Free Software Foundation, Inc. <a href="https://fsf.org/">https://fsf.org/</a>
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.</p>
<pre><code>                        Preamble
</code></pre>
<p>The GNU General Public License is a free, copyleft license for
software and other kinds of works.</p>
<p>The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.</p>
<p>When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.</p>
<p>To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.</p>
<p>For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.</p>
<p>Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.</p>
<p>For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.</p>
<p>Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.</p>
<p>Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.</p>
<p>The precise terms and conditions for copying, distribution and
modification follow.</p>
<pre><code>                   TERMS AND CONDITIONS
</code></pre>
<ol start="0">
<li>Definitions.</li>
</ol>
<p>&quot;This License&quot; refers to version 3 of the GNU General Public License.</p>
<p>&quot;Copyright&quot; also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.</p>
<p>&quot;The Program&quot; refers to any copyrightable work licensed under this
License.  Each licensee is addressed as &quot;you&quot;.  &quot;Licensees&quot; and
&quot;recipients&quot; may be individuals or organizations.</p>
<p>To &quot;modify&quot; a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a &quot;modified version&quot; of the
earlier work or a work &quot;based on&quot; the earlier work.</p>
<p>A &quot;covered work&quot; means either the unmodified Program or a work based
on the Program.</p>
<p>To &quot;propagate&quot; a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.</p>
<p>To &quot;convey&quot; a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.</p>
<p>An interactive user interface displays &quot;Appropriate Legal Notices&quot;
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.</p>
<ol>
<li>Source Code.</li>
</ol>
<p>The &quot;source code&quot; for a work means the preferred form of the work
for making modifications to it.  &quot;Object code&quot; means any non-source
form of a work.</p>
<p>A &quot;Standard Interface&quot; means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.</p>
<p>The &quot;System Libraries&quot; of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
&quot;Major Component&quot;, in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.</p>
<p>The &quot;Corresponding Source&quot; for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.</p>
<p>The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.</p>
<p>The Corresponding Source for a work in source code form is that
same work.</p>
<ol start="2">
<li>Basic Permissions.</li>
</ol>
<p>All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.</p>
<p>You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.</p>
<p>Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.</p>
<ol start="3">
<li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li>
</ol>
<p>No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.</p>
<p>When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.</p>
<ol start="4">
<li>Conveying Verbatim Copies.</li>
</ol>
<p>You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.</p>
<p>You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.</p>
<ol start="5">
<li>Conveying Modified Source Versions.</li>
</ol>
<p>You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:</p>
<pre><code>a) The work must carry prominent notices stating that you modified
it, and giving a relevant date.

b) The work must carry prominent notices stating that it is
released under this License and any conditions added under section
7.  This requirement modifies the requirement in section 4 to
&quot;keep intact all notices&quot;.

c) You must license the entire work, as a whole, under this
License to anyone who comes into possession of a copy.  This
License will therefore apply, along with any applicable section 7
additional terms, to the whole of the work, and all its parts,
regardless of how they are packaged.  This License gives no
permission to license the work in any other way, but it does not
invalidate such permission if you have separately received it.

d) If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your
work need not make them do so.
</code></pre>
<p>A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
&quot;aggregate&quot; if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.</p>
<ol start="6">
<li>Conveying Non-Source Forms.</li>
</ol>
<p>You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:</p>
<pre><code>a) Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium
customarily used for software interchange.

b) Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a
written offer, valid for at least three years and valid for as
long as you offer spare parts or customer support for that product
model, to give anyone who possesses the object code either (1) a
copy of the Corresponding Source for all the software in the
product that is covered by this License, on a durable physical
medium customarily used for software interchange, for a price no
more than your reasonable cost of physically performing this
conveying of source, or (2) access to copy the
Corresponding Source from a network server at no charge.

c) Convey individual copies of the object code with a copy of the
written offer to provide the Corresponding Source.  This
alternative is allowed only occasionally and noncommercially, and
only if you received the object code with such an offer, in accord
with subsection 6b.

d) Convey the object code by offering access from a designated
place (gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to
copy the object code is a network server, the Corresponding Source
may be on a different server (operated by you or a third party)
that supports equivalent copying facilities, provided you maintain
clear directions next to the object code saying where to find the
Corresponding Source.  Regardless of what server hosts the
Corresponding Source, you remain obligated to ensure that it is
available for as long as needed to satisfy these requirements.

e) Convey the object code using peer-to-peer transmission, provided
you inform other peers where the object code and Corresponding
Source of the work are being offered to the general public at no
charge under subsection 6d.
</code></pre>
<p>A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.</p>
<p>A &quot;User Product&quot; is either (1) a &quot;consumer product&quot;, which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, &quot;normally used&quot; refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.</p>
<p>&quot;Installation Information&quot; for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.</p>
<p>If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).</p>
<p>The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.</p>
<p>Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.</p>
<ol start="7">
<li>Additional Terms.</li>
</ol>
<p>&quot;Additional permissions&quot; are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.</p>
<p>When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.</p>
<p>Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:</p>
<pre><code>a) Disclaiming warranty or limiting liability differently from the
terms of sections 15 and 16 of this License; or

b) Requiring preservation of specified reasonable legal notices or
author attributions in that material or in the Appropriate Legal
Notices displayed by works containing it; or

c) Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

d) Limiting the use for publicity purposes of names of licensors or
authors of the material; or

e) Declining to grant rights under trademark law for use of some
trade names, trademarks, or service marks; or

f) Requiring indemnification of licensors and authors of that
material by anyone who conveys the material (or modified versions of
it) with contractual assumptions of liability to the recipient, for
any liability that these contractual assumptions directly impose on
those licensors and authors.
</code></pre>
<p>All other non-permissive additional terms are considered &quot;further
restrictions&quot; within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.</p>
<p>If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.</p>
<p>Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.</p>
<ol start="8">
<li>Termination.</li>
</ol>
<p>You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).</p>
<p>However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.</p>
<ol start="9">
<li>Acceptance Not Required for Having Copies.</li>
</ol>
<p>You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.</p>
<ol start="10">
<li>Automatic Licensing of Downstream Recipients.</li>
</ol>
<p>Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.</p>
<p>An &quot;entity transaction&quot; is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.</p>
<p>You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.</p>
<ol start="11">
<li>Patents.</li>
</ol>
<p>A &quot;contributor&quot; is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's &quot;contributor version&quot;.</p>
<p>A contributor's &quot;essential patent claims&quot; are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, &quot;control&quot; includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.</p>
<p>Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.</p>
<p>In the following three paragraphs, a &quot;patent license&quot; is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To &quot;grant&quot; such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.</p>
<p>If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  &quot;Knowingly relying&quot; means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.</p>
<p>If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.</p>
<p>A patent license is &quot;discriminatory&quot; if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.</p>
<p>Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.</p>
<ol start="12">
<li>No Surrender of Others' Freedom.</li>
</ol>
<p>If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.</p>
<ol start="13">
<li>Use with the GNU Affero General Public License.</li>
</ol>
<p>Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.</p>
<ol start="14">
<li>Revised Versions of this License.</li>
</ol>
<p>The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.</p>
<p>Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License &quot;or any later version&quot; applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.</p>
<p>If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.</p>
<p>Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.</p>
<ol start="15">
<li>Disclaimer of Warranty.</li>
</ol>
<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>
<ol start="16">
<li>Limitation of Liability.</li>
</ol>
<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.</p>
<ol start="17">
<li>Interpretation of Sections 15 and 16.</li>
</ol>
<p>If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.</p>
<pre><code>                 END OF TERMS AND CONDITIONS

        How to Apply These Terms to Your New Programs
</code></pre>
<p>If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.</p>
<p>To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the &quot;copyright&quot; line and a pointer to where the full notice is found.</p>
<pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
</code></pre>
<p>Also add information on how to contact you by electronic and paper mail.</p>
<p>If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:</p>
<pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;
This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show c' for details.
</code></pre>
<p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an &quot;about box&quot;.</p>
<p>You should also get your employer (if you work as a programmer) or school,
if any, to sign a &quot;copyright disclaimer&quot; for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.</p>
<p>The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<a href="https://www.gnu.org/licenses/why-not-lgpl.html">https://www.gnu.org/licenses/why-not-lgpl.html</a>.</p>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/articles/intro.html
================================================
ï»¿<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>ERC.Net </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="ERC.Net ">
    <meta name="generator" content="docfx 2.49.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">
<h1 id="ercnet">ERC.Net</h1>

<p>ERC.Net is a collection of tools designed to assist in debugging Windows application crashes. ERC.Net supports both 64 and 32 bit applications, can parse DLL/EXE headers, identify compile time flags such as ASLR, DEP and SafeSEH, generate non repeating patterns, generate platform specific egg hunters, identify process information such as loaded modules and running threads, read the TEB of a specific thread, assist with identifying numerous types of memory vulnerabilities and has numerous other use cases.</p>
<h2 id="installing">Installing</h2>
<p>Install one of the nuget packages (<a href="https://www.nuget.org/packages/ERC.Net-x86/">x86</a>/<a href="https://www.nuget.org/packages/ERC.Net-x64/">x64</a>) or download the source code from <a href="https://github.com/Andy53/ERC.net">Github</a>, build the library and then link it in your project.</p>
<h3 id="prerequisites">Prerequisites</h3>
<p>Visual studio<br>
.Net 4.7.2<br>
C#</p>
<h3 id="getting-started">Getting Started</h3>
<p>Below are a set of examples detailing how to use the basic functionality provided by ERC.Net</p>
<p>Creating a sting of non repeating characters:</p>
<pre><code class="lang-csharp">using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternCreate(1000, core);
            Console.WriteLine(&quot;Pattern:&quot; + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Identifying the position of a sting within a non repeating string:</p>
<pre><code class="lang-csharp">using System;
using ERC;
using ERC.Utilities;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var p = PatternTools.PatternOffset(&quot;Aa9&quot;, core);
            Console.WriteLine(&quot;Pattern Offset:&quot; + Environment.NewLine + p.ReturnValue);
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Display a list of all applicable local processes:</p>
<pre><code class="lang-csharp">using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var test = ProcessInfo.ListLocalProcesses(core);
            foreach (Process process in test.ReturnValue)
            {
                Console.WriteLine(&quot;Name: {0} ID: {1}&quot;, process.ProcessName, process.Id);
            }
            Console.WriteLine(Environment.NewLine);
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Search Process Memory for a string (the string being searched for in &quot;anonymous&quot;, the program being searched is notepad) and return a list of pointers to that string in process memory:</p>
<pre><code class="lang-csharp">using System;
using System.Collections.Generic;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;notepad&quot;))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var listy = info.SearchMemory(1, searchString: &quot;anonymous&quot;);
            foreach (KeyValuePair&lt;IntPtr, string&gt; s in listy.ReturnValue)
            {
                Console.WriteLine(&quot;0x&quot; + s.Key.ToString(&quot;x16&quot;) + &quot; Filepath: &quot; + s.Value);
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>An example of how to assemble mnemonics into opcodes:</p>
<pre><code class="lang-csharp">using System;
using System.Collections.Generic;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            List&lt;string&gt; instructions = new List&lt;string&gt;();
            instructions.Add(&quot;ret&quot;);

            foreach (string s in instructions)
            {
                List&lt;string&gt; strings = new List&lt;string&gt;();
                strings.Add(s);
                var asmResult = ERC.Utilities.OpcodeAssembler.AssembleOpcodes(strings, MachineType.x64);
                Console.WriteLine(s + &quot; = &quot; + BitConverter.ToString(asmResult.ReturnValue).Replace(&quot;-&quot;, &quot;&quot;));
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>An example of how to disassemble opcodes into mnemonics:</p>
<pre><code class="lang-csharp">using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            byte[] opcodes = new byte[] { 0xC3 };
            var result = ERC.Utilities.OpcodeDisassembler.Disassemble(opcodes, MachineType.x64);
            Console.WriteLine(result.ReturnValue + Environment.NewLine);
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Display information about all modules associated with a process:</p>
<pre><code class="lang-csharp">using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine(&quot;Outputting module info&quot;);
            output_module_info();
            Console.ReadKey();
        }

        public static void output_module_info()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;notepad&quot;))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            Console.WriteLine(&quot;Here&quot;);
            Console.WriteLine(DisplayOutput.GenerateModuleInfoTable(info));
        }
    }
}
</code></pre>
<p>Generate a byte array of all possible bytes excluding 0xA1, 0xB1, 0xC1 and 0xD1 then save it to a file in C::</p>
<pre><code class="lang-csharp">using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            byte[] unwantedBytes = new byte[] { 0xA1, 0xB1, 0xC1, 0xD1 };
            var bytes = DisplayOutput.GenerateByteArray(unwantedBytes, core);
            Console.WriteLine(BitConverter.ToString(bytes).Replace(&quot;-&quot;, &quot; &quot;));
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Return the value of all registers (Context) for a given thread:</p>
<pre><code class="lang-csharp">using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;notepad&quot;))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            for (int i = 0; i &lt; info.ThreadsInfo.Count; i++)
            {
                info.ThreadsInfo[i].Get_Context();
                Console.WriteLine(info.ThreadsInfo[i].Context64.ToString());
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Return a pointer and mnemonics for all SEH jumps in the given process and associated modules:</p>
<pre><code class="lang-csharp">using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;notepad&quot;))
                {
                    thisProcess = process1;
                }
            }

            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var tester = DisplayOutput.GetSEHJumps(info);
            foreach (string s in tester.ReturnValue)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Generate a collection of egghunters with the tag &quot;AAAA&quot;:</p>
<pre><code class="lang-csharp">using System;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            var eggs = DisplayOutput.GenerateEggHunters(core, &quot;AAAA&quot;);
            Console.WriteLine(eggs);
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Display the SEH chain for a thread (the process must have entered an error state for this to be populated):</p>
<pre><code class="lang-csharp">using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;notepad&quot;))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var test = info.ThreadsInfo[0].GetSehChain();
            foreach (IntPtr i in test)
            {
                Console.WriteLine(&quot;Ptr: {0}&quot;, i.ToString(&quot;X8&quot;));
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Find a non repeating pattern in memory and display which registers point to (or near) it:</p>
<pre><code class="lang-csharp">using System;
using System.Diagnostics;
using ERC;

namespace ERC_Test_App
{
    class Program
    {
        static void Main()
        {
            ErcCore core = new ErcCore();
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;Vulnerable Application Name&quot;))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            var strings = DisplayOutput.GenerateFindNRPTable(info, 2, false);
            foreach (string s in strings)
            {
                Console.WriteLine(s);
            }
            Console.ReadKey();
        }
    }
}
</code></pre>
<p>Generate a 32bit ROP chain for the current process:</p>
<pre><code class="lang-csharp">using System;
using ERC;
using System.Diagnostics;
using System.Collections.Generic;
using ERC.Utilities;

namespace ERC_test_app
{
    class Program
    {
        static void Main(string[] args)
        {
            public static ErcCore core = new ErcCore();
            Console.WriteLine(&quot;Generate RopChain 32&quot;);
            GenerateRopChain32();*/
            Console.ReadKey();
        }

        public static void GenerateRopChain32()
        {
            Process[] processes = Process.GetProcesses();
            Process thisProcess = null;
            foreach (Process process1 in processes)
            {
                if (process1.ProcessName.Contains(&quot;Word&quot;))
                {
                    thisProcess = process1;
                }
            }
            ProcessInfo info = new ProcessInfo(core, thisProcess);
            RopChainGenerator32 RCG = new RopChainGenerator32(info);
            RCG.GenerateRopChain32();
        }
    }
}
</code></pre>
<h2 id="versioning">Versioning</h2>
<p>We use <a href="http://semver.org/">SemVer</a> for versioning. For the versions available, see the <a href="https://github.com/Andy53/ERC.net/tags">tags on this repository</a>.</p>
<h2 id="authors">Authors</h2>
<ul>
<li><strong>Andy Bowden</strong> - <a href="https://github.com/Andy53">Andy53</a></li>
</ul>
<h2 id="license">License</h2>
<p>This project is licensed under the GNU General Public License v3.0 - see the <a href="LICENSE.html">LICENSE.md</a> file for details</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<ul>
<li>Hat tip to anyone whose code was used</li>
<li>Inspiration</li>
<li>Other things</li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>



================================================
File: ERC/docs/articles/toc.html
================================================
ï»¿
<div id="sidetoggle">
  <div>
    <div class="sidefilter">
      <form class="toc-filter">
        <span class="glyphicon glyphicon-filter filter-icon"></span>
        <span class="glyphicon glyphicon-remove clear-icon" id="toc_filter_clear"></span>
        <input type="text" id="toc_filter_input" placeholder="Enter here to filter..." onkeypress="if(event.keyCode==13) {return false;}">
      </form>
    </div>
    <div class="sidetoc">
      <div class="toc" id="toc">
          
          <ul class="nav level1">
                <li>
                    <a href="intro.html" name="" title="Introduction">Introduction</a>
                </li>
          </ul>
      </div>
    </div>
  </div>
</div>


================================================
File: ERC/docs/fonts/glyphicons-halflings-regular.eot
================================================
[Non-text file]


================================================
File: ERC/docs/fonts/glyphicons-halflings-regular.ttf
================================================
[Non-text file]


================================================
File: ERC/docs/fonts/glyphicons-halflings-regular.woff
================================================
[Non-text file]


================================================
File: ERC/docs/fonts/glyphicons-halflings-regular.woff2
================================================
[Non-text file]


================================================
File: ERC/docs/styles/docfx.css
================================================
/* Copyright (c) Microsoft Corporation. All Rights Reserved. Licensed under the MIT License. See License.txt in the project root for license information. */
html,
body {
  font-family: 'Segoe UI', Tahoma, Helvetica, sans-serif;
  height: 100%;
}
button,
a {
  color: #337ab7;
  cursor: pointer;
}
button:hover,
button:focus,
a:hover,
a:focus {
  color: #23527c;
  text-decoration: none;
}
a.disable,
a.disable:hover {
  text-decoration: none;
  cursor: default;
  color: #000000;
}

h1, h2, h3, h4, h5, h6, .text-break {
    word-wrap: break-word;
    word-break: break-word;
}

h1 mark,
h2 mark,
h3 mark,
h4 mark,
h5 mark,
h6 mark {
  padding: 0;
}

.inheritance .level0:before,
.inheritance .level1:before,
.inheritance .level2:before,
.inheritance .level3:before,
.inheritance .level4:before,
.inheritance .level5:before {
    content: 'â†³';
    margin-right: 5px;
}

.inheritance .level0 {
    margin-left: 0em;
}

.inheritance .level1 {
    margin-left: 1em;
}

.inheritance .level2 {
    margin-left: 2em;
}

.inheritance .level3 {
    margin-left: 3em;
}

.inheritance .level4 {
    margin-left: 4em;
}

.inheritance .level5 {
    margin-left: 5em;
}

span.parametername,
span.paramref,
span.typeparamref {
    font-style: italic;
}
span.languagekeyword{
    font-weight: bold;
}

svg:hover path {
    fill: #ffffff;
}

.hljs {
  display: inline;
  background-color: inherit;
  padding: 0;
}
/* additional spacing fixes */
.btn + .btn {
  margin-left: 10px;
}
.btn.pull-right {
  margin-left: 10px;
  margin-top: 5px;
}
.table {
  margin-bottom: 10px;
}
table p {
  margin-bottom: 0;
}
table a {
  display: inline-block;
}

/* Make hidden attribute compatible with old browser.*/
[hidden] {
  display: none !important;
}

h1,
.h1,
h2,
.h2,
h3,
.h3 {
  margin-top: 15px;
  margin-bottom: 10px;
  font-weight: 400;
}
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  margin-top: 10px;
  margin-bottom: 5px;
}
.navbar {
  margin-bottom: 0;
}
#wrapper {
  min-height: 100%;
  position: relative;
}
/* blends header footer and content together with gradient effect */
.grad-top {
  /* For Safari 5.1 to 6.0 */
  /* For Opera 11.1 to 12.0 */
  /* For Firefox 3.6 to 15 */
  background: linear-gradient(rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0));
  /* Standard syntax */
  height: 5px;
}
.grad-bottom {
  /* For Safari 5.1 to 6.0 */
  /* For Opera 11.1 to 12.0 */
  /* For Firefox 3.6 to 15 */
  background: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.05));
  /* Standard syntax */
  height: 5px;
}
.divider {
  margin: 0 5px;
  color: #cccccc;
}
hr {
  border-color: #cccccc;
}
header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
}
header .navbar {
  border-width: 0 0 1px;
  border-radius: 0;
}
.navbar-brand {
  font-size: inherit;
  padding: 0;
}
.navbar-collapse {
  margin: 0 -15px;
}
.subnav {
  min-height: 40px;
}

.inheritance h5, .inheritedMembers h5{
  padding-bottom: 5px;
  border-bottom: 1px solid #ccc;
}

article h1, article h2, article h3, article h4{
  margin-top: 25px;
}

article h4{
  border-bottom: 1px solid #ccc;
}

article span.small.pull-right{
  margin-top: 20px;
}

article section {
  margin-left: 1em;
}

/*.expand-all {
  padding: 10px 0;
}*/
.breadcrumb {
  margin: 0;
  padding: 10px 0;
  background-color: inherit;
  white-space: nowrap;
}
.breadcrumb > li + li:before {
  content: "\00a0/";
}
#autocollapse.collapsed .navbar-header {
  float: none;
}
#autocollapse.collapsed .navbar-toggle {
  display: block;
}
#autocollapse.collapsed .navbar-collapse {
  border-top: 1px solid transparent;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
}
#autocollapse.collapsed .navbar-collapse.collapse {
  display: none !important;
}
#autocollapse.collapsed .navbar-nav {
  float: none !important;
  margin: 7.5px -15px;
}
#autocollapse.collapsed .navbar-nav > li {
  float: none;
}
#autocollapse.collapsed .navbar-nav > li > a {
  padding-top: 10px;
  padding-bottom: 10px;
}
#autocollapse.collapsed .collapse.in,
#autocollapse.collapsed .collapsing {
  display: block !important;
}
#autocollapse.collapsed .collapse.in .navbar-right,
#autocollapse.collapsed .collapsing .navbar-right {
  float: none !important;
}
#autocollapse .form-group {
  width: 100%;
}
#autocollapse .form-control {
  width: 100%;
}
#autocollapse .navbar-header {
  margin-left: 0;
  margin-right: 0;
}
#autocollapse .navbar-brand {
  margin-left: 0;
}
.collapse.in,
.collapsing {
  text-align: center;
}
.collapsing .navbar-form {
  margin: 0 auto;
  max-width: 400px;
  padding: 10px 15px;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);
}
.collapsed .collapse.in .navbar-form {
  margin: 0 auto;
  max-width: 400px;
  padding: 10px 15px;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);
}
.navbar .navbar-nav {
  display: inline-block;
}
.docs-search {
  background: white;
  vertical-align: middle;
}
.docs-search > .search-query {
  font-size: 14px;
  border: 0;
  width: 120%;
  color: #555;
}
.docs-search > .search-query:focus {
  outline: 0;
}
.search-results-frame {
  clear: both;
  display: table;
  width: 100%;
}
.search-results.ng-hide {
  display: none;
}
.search-results-container {
  padding-bottom: 1em;
  border-top: 1px solid #111;
  background: rgba(25, 25, 25, 0.5);
}
.search-results-container .search-results-group {
  padding-top: 50px !important;
  padding: 10px;
}
.search-results-group-heading {
  font-family: "Open Sans";
  padding-left: 10px;
  color: white;
}
.search-close {
  position: absolute;
  left: 50%;
  margin-left: -100px;
  color: white;
  text-align: center;
  padding: 5px;
  background: #333;
  border-top-right-radius: 5px;
  border-top-left-radius: 5px;
  width: 200px;
  box-shadow: 0 0 10px #111;
}
#search {
  display: none;
}

/* Search results display*/
#search-results {
  max-width: 960px !important;
  margin-top: 120px;
  margin-bottom: 115px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.8;
  display: none;
}

#search-results>.search-list {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 50px;
}

#search-results p {
  text-align: center;
}

#search-results p .index-loading {
  animation: index-loading 1.5s infinite linear;
  -webkit-animation: index-loading 1.5s infinite linear;
  -o-animation: index-loading 1.5s infinite linear;
  font-size: 2.5rem;
}

@keyframes index-loading {
    from { transform: scale(1) rotate(0deg);}
    to { transform: scale(1) rotate(360deg);}
}

@-webkit-keyframes index-loading {
    from { -webkit-transform: rotate(0deg);}
    to { -webkit-transform: rotate(360deg);}
}

@-o-keyframes index-loading {
    from { -o-transform: rotate(0deg);}
    to { -o-transform: rotate(360deg);}
}

#search-results .sr-items {
  font-size: 24px;
}

.sr-item {
  margin-bottom: 25px;
}

.sr-item>.item-href {
  font-size: 14px;
  color: #093;
}

.sr-item>.item-brief {
  font-size: 13px;
}

.pagination>li>a {
  color: #47A7A0
}

.pagination>.active>a {
  background-color: #47A7A0;
  border-color: #47A7A0;
}

.fixed_header {
  position: fixed;
  width: 100%;
  padding-bottom: 10px;
  padding-top: 10px;
  margin: 0px;
  top: 0;
  z-index: 9999;
  left: 0;
}

.fixed_header+.toc{
  margin-top: 50px;
  margin-left: 0;
}

.sidenav, .fixed_header, .toc  {
  background-color: #f1f1f1;
}

.sidetoc {
  position: fixed;
  width: 260px;
  top: 150px;
  bottom: 0;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: #f1f1f1;
  border-left: 1px solid #e7e7e7;
  border-right: 1px solid #e7e7e7;
  z-index: 1;
}

.sidetoc.shiftup {
  bottom: 70px;
}

body .toc{
  background-color: #f1f1f1;
  overflow-x: hidden;
}

.sidetoggle.ng-hide {
  display: block !important;
}
.sidetoc-expand > .caret {
  margin-left: 0px;
  margin-top: -2px;
}
.sidetoc-expand > .caret-side {
  border-left: 4px solid;
  border-top: 4px solid transparent;
  border-bottom: 4px solid transparent;
  margin-left: 4px;
  margin-top: -4px;
}
.sidetoc-heading {
  font-weight: 500;
}

.toc {
  margin: 0px 0 0 10px;
  padding: 0 10px;
}
.expand-stub {
  position: absolute;
  left: -10px;
}
.toc .nav > li > a.sidetoc-expand {
  position: absolute;
  top: 0;
  left: 0;
}
.toc .nav > li > a {
  color: #666666;
  margin-left: 5px;
  display: block;
  padding: 0;
}
.toc .nav > li > a:hover,
.toc .nav > li > a:focus {
  color: #000000;
  background: none;
  text-decoration: inherit;
}
.toc .nav > li.active > a {
  color: #337ab7;
}
.toc .nav > li.active > a:hover,
.toc .nav > li.active > a:focus {
  color: #23527c;
}

.toc .nav > li> .expand-stub {
  cursor: pointer;
}

.toc .nav > li.active > .expand-stub::before,
.toc .nav > li.in > .expand-stub::before,
.toc .nav > li.in.active > .expand-stub::before,
.toc .nav > li.filtered > .expand-stub::before {
    content: "-";
}

.toc .nav > li > .expand-stub::before,
.toc .nav > li.active > .expand-stub::before {
    content: "+";
}

.toc .nav > li.filtered > ul,
.toc .nav > li.in > ul {
  display: block;
}

.toc .nav > li > ul {
  display: none;
}

.toc ul{
  font-size: 12px;
  margin: 0 0 0 3px;
}

.toc .level1 > li {
  font-weight: bold;
  margin-top: 10px;
  position: relative;
  font-size: 16px;
}
.toc .level2 {
  font-weight: normal;
  margin: 5px 0 0 15px;
  font-size: 14px;
}
.toc-toggle {
  display: none;
  margin: 0 15px 0px 15px;
}
.sidefilter {
  position: fixed;
  top: 90px;
  width: 260px;
  background-color: #f1f1f1;
  padding: 15px;
  border-left: 1px solid #e7e7e7;
  border-right: 1px solid #e7e7e7;
  z-index: 1;
}
.toc-filter {
  border-radius: 5px;
  background: #fff;
  color: #666666;
  padding: 5px;
  position: relative;
  margin: 0 5px 0 5px;
}
.toc-filter > input {
  border: 0;
  color: #666666;
  padding-left: 20px;
  padding-right: 20px;
  width: 100%;
}
.toc-filter > input:focus {
  outline: 0;
}
.toc-filter > .filter-icon {
  position: absolute;
  top: 10px;
  left: 5px;
}
.toc-filter > .clear-icon {
  position: absolute;
  top: 10px;
  right: 5px;
}
.article {
  margin-top: 120px;
  margin-bottom: 115px;
}

#_content>a{
  margin-top: 105px;
}

.article.grid-right {
  margin-left: 280px;
}

.inheritance hr {
  margin-top: 5px;
  margin-bottom: 5px;
}
.article img {
  max-width: 100%;
}
.sideaffix {
  margin-top: 50px;
  font-size: 12px;
  max-height: 100%;
  overflow: hidden;
  top: 100px;
  bottom: 10px;
  position: fixed;
}
.sideaffix.shiftup {
  bottom: 70px;
}
.affix {
  position: relative;
  height: 100%;
}
.sideaffix > div.contribution {
  margin-bottom: 20px;
}
.sideaffix > div.contribution > ul > li > a.contribution-link {
  padding: 6px 10px;
  font-weight: bold;
  font-size: 14px;
}
.sideaffix > div.contribution > ul > li > a.contribution-link:hover {
  background-color: #ffffff;
}
.sideaffix ul.nav > li > a:focus {
  background: none;
}
.affix h5 {
  font-weight: bold;
  text-transform: uppercase;
  padding-left: 10px;
  font-size: 12px;
}
.affix > ul.level1 {
  overflow: hidden;
  padding-bottom: 10px;
  height: calc(100% - 100px);
}
.affix ul > li > a:before {
  color: #cccccc;
  position: absolute;
}
.affix ul > li > a:hover {
  background: none;
  color: #666666;
}
.affix ul > li.active > a,
.affix ul > li.active > a:before {
  color: #337ab7;
}
.affix ul > li > a {
  padding: 5px 12px;
  color: #666666;
}
.affix > ul > li.active:last-child {
  margin-bottom: 50px;
}
.affix > ul > li > a:before {
  content: "|";
  font-size: 16px;
  top: 1px;
  left: 0;
}
.affix > ul > li.active > a,
.affix > ul > li.active > a:before {
  color: #337ab7;
  font-weight: bold;
}
.affix ul ul > li > a {
  padding: 2px 15px;
}
.affix ul ul > li > a:before {
  content: ">";
  font-size: 14px;
  top: -1px;
  left: 5px;
}
.affix ul > li > a:before,
.affix ul ul {
  display: none;
}
.affix ul > li.active > ul,
.affix ul > li.active > a:before,
.affix ul > li > a:hover:before {
  display: block;
  white-space: nowrap;
}
.codewrapper {
  position: relative;
}
.trydiv {
  height: 0px;
}
.tryspan {
  position: absolute;
  top: 0px;
  right: 0px;
  border-style: solid;
  border-radius: 0px 4px;
  box-sizing: border-box;
  border-width: 1px;
  border-color: #cccccc;
  text-align: center;
  padding: 2px 8px;
  background-color: white;
  font-size: 12px;
  cursor: pointer;
  z-index: 100;
  display: none;
  color: #767676;
}
.tryspan:hover {
  background-color: #3b8bd0;
  color: white;
  border-color: #3b8bd0;
}
.codewrapper:hover .tryspan {
  display: block;
}
.sample-response .response-content{
  max-height: 200px;
}
footer {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
}
.footer {
  border-top: 1px solid #e7e7e7;
  background-color: #f8f8f8;
  padding: 15px 0;
}
@media (min-width: 768px) {
  #sidetoggle.collapse {
    display: block;
  }
  .topnav .navbar-nav {
    float: none;
    white-space: nowrap;
  }
  .topnav .navbar-nav > li {
    float: none;
    display: inline-block;
  }
}
@media only screen and (max-width: 768px) {
  #mobile-indicator {
    display: block;
  }
  /* TOC display for responsive */
  .article {
    margin-top: 30px !important;
  }
  header {
    position: static;
  }
  .topnav {
    text-align: center;
  }
  .sidenav {
    padding: 15px 0;
    margin-left: -15px;
    margin-right: -15px;
  }
  .sidefilter {
    position: static;
    width: auto;
    float: none;
    border: none;
  }
  .sidetoc {
    position: static;
    width: auto;
    float: none;
    padding-bottom: 0px;
    border: none;
  }
  .toc .nav > li, .toc .nav > li >a {
    display: inline-block;
  }
  .toc li:after {
    margin-left: -3px;
    margin-right: 5px;
    content: ", ";
    color: #666666;
  }
  .toc .level1 > li {
    display: block;
  }
  
  .toc .level1 > li:after {
    display: none;
  }
  .article.grid-right {
    margin-left: 0;
  }
  .grad-top,
  .grad-bottom {
    display: none;
  }
  .toc-toggle {
    display: block;
  }
  .sidetoggle.ng-hide {
    display: none !important;
  }
  /*.expand-all {
    display: none;
  }*/
  .sideaffix {
    display: none;
  }
  .mobile-hide {
    display: none;
  }
  .breadcrumb {
    white-space: inherit;
  }

  /* workaround for #hashtag url is no longer needed*/
  h1:before,
  h2:before,
  h3:before,
  h4:before {
      content: '';
      display: none;
  }
}

/* For toc iframe */
@media (max-width: 260px) {
  .toc .level2 > li {
    display: block;
  }

  .toc .level2 > li:after {
    display: none;
  }
}

/* For code snippet line highlight */
pre > code .line-highlight {
  background-color: #ffffcc;
}

/* Alerts */
.alert h5 {
    text-transform: uppercase;
    font-weight: bold;
    margin-top: 0;
}

.alert h5:before {
    position:relative;
    top:1px;
    display:inline-block;
    font-family:'Glyphicons Halflings';
    line-height:1;
    -webkit-font-smoothing:antialiased;
    -moz-osx-font-smoothing:grayscale;
    margin-right: 5px;
    font-weight: normal;
}

.alert-info h5:before {
    content:"\e086"
}

.alert-warning h5:before {
    content:"\e127"
}

.alert-danger h5:before {
    content:"\e107"
}

/* For Embedded Video */
div.embeddedvideo {
    padding-top: 56.25%;
    position: relative;
    width: 100%;
}

div.embeddedvideo iframe {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}

/* For printer */
@media print{
  .article.grid-right {
    margin-top: 0px;
    margin-left: 0px;
  }
  .sideaffix {
    display: none;
  }
  .mobile-hide {
    display: none;
  }
  .footer {
    display: none;
  }
}

/* For tabbed content */

.tabGroup {
  margin-top: 1rem; }
  .tabGroup ul[role="tablist"] {
    margin: 0;
    padding: 0;
    list-style: none; }
    .tabGroup ul[role="tablist"] > li {
      list-style: none;
      display: inline-block; }
  .tabGroup a[role="tab"] {
    color: #6e6e6e;
    box-sizing: border-box;
    display: inline-block;
    padding: 5px 7.5px;
    text-decoration: none;
    border-bottom: 2px solid #fff; }
    .tabGroup a[role="tab"]:hover, .tabGroup a[role="tab"]:focus, .tabGroup a[role="tab"][aria-selected="true"] {
      border-bottom: 2px solid #0050C5; }
    .tabGroup a[role="tab"][aria-selected="true"] {
      color: #222; }
    .tabGroup a[role="tab"]:hover, .tabGroup a[role="tab"]:focus {
      color: #0050C5; }
    .tabGroup a[role="tab"]:focus {
      outline: 1px solid #0050C5;
      outline-offset: -1px; }
  @media (min-width: 768px) {
    .tabGroup a[role="tab"] {
      padding: 5px 15px; } }
  .tabGroup section[role="tabpanel"] {
    border: 1px solid #e0e0e0;
    padding: 15px;
    margin: 0;
    overflow: hidden; }
    .tabGroup section[role="tabpanel"] > .codeHeader,
    .tabGroup section[role="tabpanel"] > pre {
      margin-left: -16px;
      margin-right: -16px; }
    .tabGroup section[role="tabpanel"] > :first-child {
      margin-top: 0; }
    .tabGroup section[role="tabpanel"] > pre:last-child {
      display: block;
      margin-bottom: -16px; }

.mainContainer[dir='rtl'] main ul[role="tablist"] {
  margin: 0; }



================================================
File: ERC/docs/styles/docfx.js
================================================
// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.
$(function () {
  var active = 'active';
  var expanded = 'in';
  var collapsed = 'collapsed';
  var filtered = 'filtered';
  var show = 'show';
  var hide = 'hide';
  var util = new utility();

  workAroundFixedHeaderForAnchors();
  highlight();
  enableSearch();

  renderTables();
  renderAlerts();
  renderLinks();
  renderNavbar();
  renderSidebar();
  renderAffix();
  renderFooter();
  renderLogo();

  breakText();
  renderTabs();

  window.refresh = function (article) {
    // Update markup result
    if (typeof article == 'undefined' || typeof article.content == 'undefined')
      console.error("Null Argument");
    $("article.content").html(article.content);

    highlight();
    renderTables();
    renderAlerts();
    renderAffix();
    renderTabs();
  }

  // Add this event listener when needed
  // window.addEventListener('content-update', contentUpdate);

  function breakText() {
    $(".xref").addClass("text-break");
    var texts = $(".text-break");
    texts.each(function () {
      $(this).breakWord();
    });
  }

  // Styling for tables in conceptual documents using Bootstrap.
  // See http://getbootstrap.com/css/#tables
  function renderTables() {
    $('table').addClass('table table-bordered table-striped table-condensed').wrap('<div class=\"table-responsive\"></div>');
  }

  // Styling for alerts.
  function renderAlerts() {
    $('.NOTE, .TIP').addClass('alert alert-info');
    $('.WARNING').addClass('alert alert-warning');
    $('.IMPORTANT, .CAUTION').addClass('alert alert-danger');
  }

  // Enable anchors for headings.
  (function () {
    anchors.options = {
      placement: 'left',
      visible: 'touch'
    };
    anchors.add('article h2:not(.no-anchor), article h3:not(.no-anchor), article h4:not(.no-anchor)');
  })();

  // Open links to different host in a new window.
  function renderLinks() {
    if ($("meta[property='docfx:newtab']").attr("content") === "true") {
      $(document.links).filter(function () {
        return this.hostname !== window.location.hostname;
      }).attr('target', '_blank');
    }
  }

  // Enable highlight.js
  function highlight() {
    $('pre code').each(function (i, block) {
      hljs.highlightBlock(block);
    });
    $('pre code[highlight-lines]').each(function (i, block) {
      if (block.innerHTML === "") return;
      var lines = block.innerHTML.split('\n');

      queryString = block.getAttribute('highlight-lines');
      if (!queryString) return;

      var ranges = queryString.split(',');
      for (var j = 0, range; range = ranges[j++];) {
        var found = range.match(/^(\d+)\-(\d+)?$/);
        if (found) {
          // consider region as `{startlinenumber}-{endlinenumber}`, in which {endlinenumber} is optional
          var start = +found[1];
          var end = +found[2];
          if (isNaN(end) || end > lines.length) {
            end = lines.length;
          }
        } else {
          // consider region as a sigine line number
          if (isNaN(range)) continue;
          var start = +range;
          var end = start;
        }
        if (start <= 0 || end <= 0 || start > end || start > lines.length) {
          // skip current region if invalid
          continue;
        }
        lines[start - 1] = '<span class="line-highlight">' + lines[start - 1];
        lines[end - 1] = lines[end - 1] + '</span>';
      }

      block.innerHTML = lines.join('\n');
    });
  }

  // Support full-text-search
  function enableSearch() {
    var query;
    var relHref = $("meta[property='docfx\\:rel']").attr("content");
    if (typeof relHref === 'undefined') {
      return;
    }
    try {
      var worker = new Worker(relHref + 'styles/search-worker.js');
      if (!worker && !window.worker) {
        localSearch();
      } else {
        webWorkerSearch();
      }

      renderSearchBox();
      highlightKeywords();
      addSearchEvent();
    } catch (e) {
      console.error(e);
    }

    //Adjust the position of search box in navbar
    function renderSearchBox() {
      autoCollapse();
      $(window).on('resize', autoCollapse);
      $(document).on('click', '.navbar-collapse.in', function (e) {
        if ($(e.target).is('a')) {
          $(this).collapse('hide');
        }
      });

      function autoCollapse() {
        var navbar = $('#autocollapse');
        if (navbar.height() === null) {
          setTimeout(autoCollapse, 300);
        }
        navbar.removeClass(collapsed);
        if (navbar.height() > 60) {
          navbar.addClass(collapsed);
        }
      }
    }

    // Search factory
    function localSearch() {
      console.log("using local search");
      var lunrIndex = lunr(function () {
        this.ref('href');
        this.field('title', { boost: 50 });
        this.field('keywords', { boost: 20 });
      });
      lunr.tokenizer.seperator = /[\s\-\.]+/;
      var searchData = {};
      var searchDataRequest = new XMLHttpRequest();

      var indexPath = relHref + "index.json";
      if (indexPath) {
        searchDataRequest.open('GET', indexPath);
        searchDataRequest.onload = function () {
          if (this.status != 200) {
            return;
          }
          searchData = JSON.parse(this.responseText);
          for (var prop in searchData) {
            if (searchData.hasOwnProperty(prop)) {
              lunrIndex.add(searchData[prop]);
            }
          }
        }
        searchDataRequest.send();
      }

      $("body").bind("queryReady", function () {
        var hits = lunrIndex.search(query);
        var results = [];
        hits.forEach(function (hit) {
          var item = searchData[hit.ref];
          results.push({ 'href': item.href, 'title': item.title, 'keywords': item.keywords });
        });
        handleSearchResults(results);
      });
    }

    function webWorkerSearch() {
      console.log("using Web Worker");
      var indexReady = $.Deferred();

      worker.onmessage = function (oEvent) {
        switch (oEvent.data.e) {
          case 'index-ready':
            indexReady.resolve();
            break;
          case 'query-ready':
            var hits = oEvent.data.d;
            handleSearchResults(hits);
            break;
        }
      }

      indexReady.promise().done(function () {
        $("body").bind("queryReady", function () {
          worker.postMessage({ q: query });
        });
        if (query && (query.length >= 3)) {
          worker.postMessage({ q: query });
        }
      });
    }

    // Highlight the searching keywords
    function highlightKeywords() {
      var q = url('?q');
      if (q !== null) {
        var keywords = q.split("%20");
        keywords.forEach(function (keyword) {
          if (keyword !== "") {
            $('.data-searchable *').mark(keyword);
            $('article *').mark(keyword);
          }
        });
      }
    }

    function addSearchEvent() {
      $('body').bind("searchEvent", function () {
        $('#search-query').keypress(function (e) {
          return e.which !== 13;
        });

        $('#search-query').keyup(function () {
          query = $(this).val();
          if (query.length < 3) {
            flipContents("show");
          } else {
            flipContents("hide");
            $("body").trigger("queryReady");
            $('#search-results>.search-list').text('Search Results for "' + query + '"');
          }
        }).off("keydown");
      });
    }

    function flipContents(action) {
      if (action === "show") {
        $('.hide-when-search').show();
        $('#search-results').hide();
      } else {
        $('.hide-when-search').hide();
        $('#search-results').show();
      }
    }

    function relativeUrlToAbsoluteUrl(currentUrl, relativeUrl) {
      var currentItems = currentUrl.split(/\/+/);
      var relativeItems = relativeUrl.split(/\/+/);
      var depth = currentItems.length - 1;
      var items = [];
      for (var i = 0; i < relativeItems.length; i++) {
        if (relativeItems[i] === '..') {
          depth--;
        } else if (relativeItems[i] !== '.') {
          items.push(relativeItems[i]);
        }
      }
      return currentItems.slice(0, depth).concat(items).join('/');
    }

    function extractContentBrief(content) {
      var briefOffset = 512;
      var words = query.split(/\s+/g);
      var queryIndex = content.indexOf(words[0]);
      var briefContent;
      if (queryIndex > briefOffset) {
        return "..." + content.slice(queryIndex - briefOffset, queryIndex + briefOffset) + "...";
      } else if (queryIndex <= briefOffset) {
        return content.slice(0, queryIndex + briefOffset) + "...";
      }
    }

    function handleSearchResults(hits) {
      var numPerPage = 10;
      $('#pagination').empty();
      $('#pagination').removeData("twbs-pagination");
      if (hits.length === 0) {
        $('#search-results>.sr-items').html('<p>No results found</p>');
      } else {
        $('#pagination').twbsPagination({
          totalPages: Math.ceil(hits.length / numPerPage),
          visiblePages: 5,
          onPageClick: function (event, page) {
            var start = (page - 1) * numPerPage;
            var curHits = hits.slice(start, start + numPerPage);
            $('#search-results>.sr-items').empty().append(
              curHits.map(function (hit) {
                var currentUrl = window.location.href;
                var itemRawHref = relativeUrlToAbsoluteUrl(currentUrl, relHref + hit.href);
                var itemHref = relHref + hit.href + "?q=" + query;
                var itemTitle = hit.title;
                var itemBrief = extractContentBrief(hit.keywords);

                var itemNode = $('<div>').attr('class', 'sr-item');
                var itemTitleNode = $('<div>').attr('class', 'item-title').append($('<a>').attr('href', itemHref).attr("target", "_blank").text(itemTitle));
                var itemHrefNode = $('<div>').attr('class', 'item-href').text(itemRawHref);
                var itemBriefNode = $('<div>').attr('class', 'item-brief').text(itemBrief);
                itemNode.append(itemTitleNode).append(itemHrefNode).append(itemBriefNode);
                return itemNode;
              })
            );
            query.split(/\s+/).forEach(function (word) {
              if (word !== '') {
                $('#search-results>.sr-items *').mark(word);
              }
            });
          }
        });
      }
    }
  };

  // Update href in navbar
  function renderNavbar() {
    var navbar = $('#navbar ul')[0];
    if (typeof (navbar) === 'undefined') {
      loadNavbar();
    } else {
      $('#navbar ul a.active').parents('li').addClass(active);
      renderBreadcrumb();
      showSearch();
    }
    
    function showSearch() {
      if ($('#search-results').length !== 0) {
          $('#search').show();
          $('body').trigger("searchEvent");
      }
    }

    function loadNavbar() {
      var navbarPath = $("meta[property='docfx\\:navrel']").attr("content");
      if (!navbarPath) {
        return;
      }
      navbarPath = navbarPath.replace(/\\/g, '/');
      var tocPath = $("meta[property='docfx\\:tocrel']").attr("content") || '';
      if (tocPath) tocPath = tocPath.replace(/\\/g, '/');
      $.get(navbarPath, function (data) {
        $(data).find("#toc>ul").appendTo("#navbar");
        showSearch();
        var index = navbarPath.lastIndexOf('/');
        var navrel = '';
        if (index > -1) {
          navrel = navbarPath.substr(0, index + 1);
        }
        $('#navbar>ul').addClass('navbar-nav');
        var currentAbsPath = util.getAbsolutePath(window.location.pathname);
        // set active item
        $('#navbar').find('a[href]').each(function (i, e) {
          var href = $(e).attr("href");
          if (util.isRelativePath(href)) {
            href = navrel + href;
            $(e).attr("href", href);

            var isActive = false;
            var originalHref = e.name;
            if (originalHref) {
              originalHref = navrel + originalHref;
              if (util.getDirectory(util.getAbsolutePath(originalHref)) === util.getDirectory(util.getAbsolutePath(tocPath))) {
                isActive = true;
              }
            } else {
              if (util.getAbsolutePath(href) === currentAbsPath) {
                var dropdown = $(e).attr('data-toggle') == "dropdown"
                if (!dropdown) {
                  isActive = true;
                }
              }
            }
            if (isActive) {
              $(e).addClass(active);
            }
          }
        });
        renderNavbar();
      });
    }
  }

  function renderSidebar() {
    var sidetoc = $('#sidetoggle .sidetoc')[0];
    if (typeof (sidetoc) === 'undefined') {
      loadToc();
    } else {
      registerTocEvents();
      if ($('footer').is(':visible')) {
        $('.sidetoc').addClass('shiftup');
      }

      // Scroll to active item
      var top = 0;
      $('#toc a.active').parents('li').each(function (i, e) {
        $(e).addClass(active).addClass(expanded);
        $(e).children('a').addClass(active);
        top += $(e).position().top;
      })
      $('.sidetoc').scrollTop(top - 50);

      if ($('footer').is(':visible')) {
        $('.sidetoc').addClass('shiftup');
      }

      renderBreadcrumb();
    }

    function registerTocEvents() {
      var tocFilterInput = $('#toc_filter_input');
      var tocFilterClearButton = $('#toc_filter_clear');
        
      $('.toc .nav > li > .expand-stub').click(function (e) {
        $(e.target).parent().toggleClass(expanded);
      });
      $('.toc .nav > li > .expand-stub + a:not([href])').click(function (e) {
        $(e.target).parent().toggleClass(expanded);
      });
      tocFilterInput.on('input', function (e) {
        var val = this.value;
        //Save filter string to local session storage
        if (typeof(Storage) !== "undefined") {
          sessionStorage.filterString = val;
        }
        if (val === '') {
          // Clear 'filtered' class
          $('#toc li').removeClass(filtered).removeClass(hide);
          tocFilterClearButton.fadeOut();
          return;
        }
        tocFilterClearButton.fadeIn();

        // set all parent nodes status
        $('#toc li>a').filter(function (i, e) {
          return $(e).siblings().length > 0
        }).each(function (i, anchor) {
          var parent = $(anchor).parent();
          parent.addClass(hide);
          parent.removeClass(show);
          parent.removeClass(filtered);
        })
        
        // Get leaf nodes
        $('#toc li>a').filter(function (i, e) {
          return $(e).siblings().length === 0
        }).each(function (i, anchor) {
          var text = $(anchor).attr('title');
          var parent = $(anchor).parent();
          var parentNodes = parent.parents('ul>li');
          for (var i = 0; i < parentNodes.length; i++) {
            var parentText = $(parentNodes[i]).children('a').attr('title');
            if (parentText) text = parentText + '.' + text;
          };
          if (filterNavItem(text, val)) {
            parent.addClass(show);
            parent.removeClass(hide);
          } else {
            parent.addClass(hide);
            parent.removeClass(show);
          }
        });
        $('#toc li>a').filter(function (i, e) {
          return $(e).siblings().length > 0
        }).each(function (i, anchor) {
          var parent = $(anchor).parent();
          if (parent.find('li.show').length > 0) {
            parent.addClass(show);
            parent.addClass(filtered);
            parent.removeClass(hide);
          } else {
            parent.addClass(hide);
            parent.removeClass(show);
            parent.removeClass(filtered);
          }
        })

        function filterNavItem(name, text) {
          if (!text) return true;
          if (name && name.toLowerCase().indexOf(text.toLowerCase()) > -1) return true;
          return false;
        }
      });
      
      // toc filter clear button
      tocFilterClearButton.hide();
      tocFilterClearButton.on("click", function(e){
        tocFilterInput.val("");
        tocFilterInput.trigger('input');
        if (typeof(Storage) !== "undefined") {
          sessionStorage.filterString = "";
        }
      });

      //Set toc filter from local session storage on page load
      if (typeof(Storage) !== "undefined") {
        tocFilterInput.val(sessionStorage.filterString);
        tocFilterInput.trigger('input');
      }
    }

    function loadToc() {
      var tocPath = $("meta[property='docfx\\:tocrel']").attr("content");
      if (!tocPath) {
        return;
      }
      tocPath = tocPath.replace(/\\/g, '/');
      $('#sidetoc').load(tocPath + " #sidetoggle > div", function () {
        var index = tocPath.lastIndexOf('/');
        var tocrel = '';
        if (index > -1) {
          tocrel = tocPath.substr(0, index + 1);
        }
        var currentHref = util.getAbsolutePath(window.location.pathname);
        $('#sidetoc').find('a[href]').each(function (i, e) {
          var href = $(e).attr("href");
          if (util.isRelativePath(href)) {
            href = tocrel + href;
            $(e).attr("href", href);
          }

          if (util.getAbsolutePath(e.href) === currentHref) {
            $(e).addClass(active);
          }

          $(e).breakWord();
        });

        renderSidebar();
      });
    }
  }

  function renderBreadcrumb() {
    var breadcrumb = [];
    $('#navbar a.active').each(function (i, e) {
      breadcrumb.push({
        href: e.href,
        name: e.innerHTML
      });
    })
    $('#toc a.active').each(function (i, e) {
      breadcrumb.push({
        href: e.href,
        name: e.innerHTML
      });
    })

    var html = util.formList(breadcrumb, 'breadcrumb');
    $('#breadcrumb').html(html);
  }

  //Setup Affix
  function renderAffix() {
    var hierarchy = getHierarchy();
    if (hierarchy && hierarchy.length > 0) {
      var html = '<h5 class="title">In This Article</h5>'
      html += util.formList(hierarchy, ['nav', 'bs-docs-sidenav']);
      $("#affix").empty().append(html);
      if ($('footer').is(':visible')) {
        $(".sideaffix").css("bottom", "70px");
      }
      $('#affix a').click(function(e) {
        var scrollspy = $('[data-spy="scroll"]').data()['bs.scrollspy'];
        var target = e.target.hash;
        if (scrollspy && target) {
          scrollspy.activate(target);
        }
      });
    }

    function getHierarchy() {
      // supported headers are h1, h2, h3, and h4
      var $headers = $($.map(['h1', 'h2', 'h3', 'h4'], function (h) { return ".article article " + h; }).join(", "));

      // a stack of hierarchy items that are currently being built
      var stack = [];
      $headers.each(function (i, e) {
        if (!e.id) {
          return;
        }

        var item = {
          name: htmlEncode($(e).text()),
          href: "#" + e.id,
          items: []
        };

        if (!stack.length) {
          stack.push({ type: e.tagName, siblings: [item] });
          return;
        }

        var frame = stack[stack.length - 1];
        if (e.tagName === frame.type) {
          frame.siblings.push(item);
        } else if (e.tagName[1] > frame.type[1]) {
          // we are looking at a child of the last element of frame.siblings.
          // push a frame onto the stack. After we've finished building this item's children,
          // we'll attach it as a child of the last element
          stack.push({ type: e.tagName, siblings: [item] });
        } else {  // e.tagName[1] < frame.type[1]
          // we are looking at a sibling of an ancestor of the current item.
          // pop frames from the stack, building items as we go, until we reach the correct level at which to attach this item.
          while (e.tagName[1] < stack[stack.length - 1].type[1]) {
            buildParent();
          }
          if (e.tagName === stack[stack.length - 1].type) {
            stack[stack.length - 1].siblings.push(item);
          } else {
            stack.push({ type: e.tagName, siblings: [item] });
          }
        }
      });
      while (stack.length > 1) {
        buildParent();
      }

      function buildParent() {
        var childrenToAttach = stack.pop();
        var parentFrame = stack[stack.length - 1];
        var parent = parentFrame.siblings[parentFrame.siblings.length - 1];
        $.each(childrenToAttach.siblings, function (i, child) {
          parent.items.push(child);
        });
      }
      if (stack.length > 0) {

        var topLevel = stack.pop().siblings;
        if (topLevel.length === 1) {  // if there's only one topmost header, dump it
          return topLevel[0].items;
        }
        return topLevel;
      }
      return undefined;
    }

    function htmlEncode(str) {
      if (!str) return str;
      return str
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
    }

    function htmlDecode(value) {
      if (!str) return str;
      return value
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&');
    }

    function cssEscape(str) {
      // see: http://stackoverflow.com/questions/2786538/need-to-escape-a-special-character-in-a-jquery-selector-string#answer-2837646
      if (!str) return str;
      return str
        .replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, "\\$&");
    }
  }

  // Show footer
  function renderFooter() {
    initFooter();
    $(window).on("scroll", showFooterCore);

    function initFooter() {
      if (needFooter()) {
        shiftUpBottomCss();
        $("footer").show();
      } else {
        resetBottomCss();
        $("footer").hide();
      }
    }

    function showFooterCore() {
      if (needFooter()) {
        shiftUpBottomCss();
        $("footer").fadeIn();
      } else {
        resetBottomCss();
        $("footer").fadeOut();
      }
    }

    function needFooter() {
      var scrollHeight = $(document).height();
      var scrollPosition = $(window).height() + $(window).scrollTop();
      return (scrollHeight - scrollPosition) < 1;
    }

    function resetBottomCss() {
      $(".sidetoc").removeClass("shiftup");
      $(".sideaffix").removeClass("shiftup");
    }

    function shiftUpBottomCss() {
      $(".sidetoc").addClass("shiftup");
      $(".sideaffix").addClass("shiftup");
    }
  }

  function renderLogo() {
    // For LOGO SVG
    // Replace SVG with inline SVG
    // http://stackoverflow.com/questions/11978995/how-to-change-color-of-svg-image-using-css-jquery-svg-image-replacement
    jQuery('img.svg').each(function () {
      var $img = jQuery(this);
      var imgID = $img.attr('id');
      var imgClass = $img.attr('class');
      var imgURL = $img.attr('src');

      jQuery.get(imgURL, function (data) {
        // Get the SVG tag, ignore the rest
        var $svg = jQuery(data).find('svg');

        // Add replaced image's ID to the new SVG
        if (typeof imgID !== 'undefined') {
          $svg = $svg.attr('id', imgID);
        }
        // Add replaced image's classes to the new SVG
        if (typeof imgClass !== 'undefined') {
          $svg = $svg.attr('class', imgClass + ' replaced-svg');
        }

        // Remove any invalid XML tags as per http://validator.w3.org
        $svg = $svg.removeAttr('xmlns:a');

        // Replace image with new SVG
        $img.replaceWith($svg);

      }, 'xml');
    });
  }

  function renderTabs() {
    var contentAttrs = {
      id: 'data-bi-id',
      name: 'data-bi-name',
      type: 'data-bi-type'
    };

    var Tab = (function () {
      function Tab(li, a, section) {
        this.li = li;
        this.a = a;
        this.section = section;
      }
      Object.defineProperty(Tab.prototype, "tabIds", {
        get: function () { return this.a.getAttribute('data-tab').split(' '); },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tab.prototype, "condition", {
        get: function () { return this.a.getAttribute('data-condition'); },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tab.prototype, "visible", {
        get: function () { return !this.li.hasAttribute('hidden'); },
        set: function (value) {
          if (value) {
            this.li.removeAttribute('hidden');
            this.li.removeAttribute('aria-hidden');
          }
          else {
            this.li.setAttribute('hidden', 'hidden');
            this.li.setAttribute('aria-hidden', 'true');
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tab.prototype, "selected", {
        get: function () { return !this.section.hasAttribute('hidden'); },
        set: function (value) {
          if (value) {
            this.a.setAttribute('aria-selected', 'true');
            this.a.tabIndex = 0;
            this.section.removeAttribute('hidden');
            this.section.removeAttribute('aria-hidden');
          }
          else {
            this.a.setAttribute('aria-selected', 'false');
            this.a.tabIndex = -1;
            this.section.setAttribute('hidden', 'hidden');
            this.section.setAttribute('aria-hidden', 'true');
          }
        },
        enumerable: true,
        configurable: true
      });
      Tab.prototype.focus = function () {
        this.a.focus();
      };
      return Tab;
    }());

    initTabs(document.body);

    function initTabs(container) {
      var queryStringTabs = readTabsQueryStringParam();
      var elements = container.querySelectorAll('.tabGroup');
      var state = { groups: [], selectedTabs: [] };
      for (var i = 0; i < elements.length; i++) {
        var group = initTabGroup(elements.item(i));
        if (!group.independent) {
          updateVisibilityAndSelection(group, state);
          state.groups.push(group);
        }
      }
      container.addEventListener('click', function (event) { return handleClick(event, state); });
      if (state.groups.length === 0) {
        return state;
      }
      selectTabs(queryStringTabs, container);
      updateTabsQueryStringParam(state);
      notifyContentUpdated();
      return state;
    }

    function initTabGroup(element) {
      var group = {
        independent: element.hasAttribute('data-tab-group-independent'),
        tabs: []
      };
      var li = element.firstElementChild.firstElementChild;
      while (li) {
        var a = li.firstElementChild;
        a.setAttribute(contentAttrs.name, 'tab');
        var dataTab = a.getAttribute('data-tab').replace(/\+/g, ' ');
        a.setAttribute('data-tab', dataTab);
        var section = element.querySelector("[id=\"" + a.getAttribute('aria-controls') + "\"]");
        var tab = new Tab(li, a, section);
        group.tabs.push(tab);
        li = li.nextElementSibling;
      }
      element.setAttribute(contentAttrs.name, 'tab-group');
      element.tabGroup = group;
      return group;
    }

    function updateVisibilityAndSelection(group, state) {
      var anySelected = false;
      var firstVisibleTab;
      for (var _i = 0, _a = group.tabs; _i < _a.length; _i++) {
        var tab = _a[_i];
        tab.visible = tab.condition === null || state.selectedTabs.indexOf(tab.condition) !== -1;
        if (tab.visible) {
          if (!firstVisibleTab) {
            firstVisibleTab = tab;
          }
        }
        tab.selected = tab.visible && arraysIntersect(state.selectedTabs, tab.tabIds);
        anySelected = anySelected || tab.selected;
      }
      if (!anySelected) {
        for (var _b = 0, _c = group.tabs; _b < _c.length; _b++) {
          var tabIds = _c[_b].tabIds;
          for (var _d = 0, tabIds_1 = tabIds; _d < tabIds_1.length; _d++) {
            var tabId = tabIds_1[_d];
            var index = state.selectedTabs.indexOf(tabId);
            if (index === -1) {
              continue;
            }
            state.selectedTabs.splice(index, 1);
          }
        }
        var tab = firstVisibleTab;
        tab.selected = true;
        state.selectedTabs.push(tab.tabIds[0]);
      }
    }

    function getTabInfoFromEvent(event) {
      if (!(event.target instanceof HTMLElement)) {
        return null;
      }
      var anchor = event.target.closest('a[data-tab]');
      if (anchor === null) {
        return null;
      }
      var tabIds = anchor.getAttribute('data-tab').split(' ');
      var group = anchor.parentElement.parentElement.parentElement.tabGroup;
      if (group === undefined) {
        return null;
      }
      return { tabIds: tabIds, group: group, anchor: anchor };
    }

    function handleClick(event, state) {
      var info = getTabInfoFromEvent(event);
      if (info === null) {
        return;
      }
      event.preventDefault();
      info.anchor.href = 'javascript:';
      setTimeout(function () { return info.anchor.href = '#' + info.anchor.getAttribute('aria-controls'); });
      var tabIds = info.tabIds, group = info.group;
      var originalTop = info.anchor.getBoundingClientRect().top;
      if (group.independent) {
        for (var _i = 0, _a = group.tabs; _i < _a.length; _i++) {
          var tab = _a[_i];
          tab.selected = arraysIntersect(tab.tabIds, tabIds);
        }
      }
      else {
        if (arraysIntersect(state.selectedTabs, tabIds)) {
          return;
        }
        var previousTabId = group.tabs.filter(function (t) { return t.selected; })[0].tabIds[0];
        state.selectedTabs.splice(state.selectedTabs.indexOf(previousTabId), 1, tabIds[0]);
        for (var _b = 0, _c = state.groups; _b < _c.length; _b++) {
          var group_1 = _c[_b];
          updateVisibilityAndSelection(group_1, state);
        }
        updateTabsQueryStringParam(state);
      }
      notifyContentUpdated();
      var top = info.anchor.getBoundingClientRect().top;
      if (top !== originalTop && event instanceof MouseEvent) {
        window.scrollTo(0, window.pageYOffset + top - originalTop);
      }
    }

    function selectTabs(tabIds) {
      for (var _i = 0, tabIds_1 = tabIds; _i < tabIds_1.length; _i++) {
        var tabId = tabIds_1[_i];
        var a = document.querySelector(".tabGroup > ul > li > a[data-tab=\"" + tabId + "\"]:not([hidden])");
        if (a === null) {
          return;
        }
        a.dispatchEvent(new CustomEvent('click', { bubbles: true }));
      }
    }

    function readTabsQueryStringParam() {
      var qs = parseQueryString();
      var t = qs.tabs;
      if (t === undefined || t === '') {
        return [];
      }
      return t.split(',');
    }

    function updateTabsQueryStringParam(state) {
      var qs = parseQueryString();
      qs.tabs = state.selectedTabs.join();
      var url = location.protocol + "//" + location.host + location.pathname + "?" + toQueryString(qs) + location.hash;
      if (location.href === url) {
        return;
      }
      history.replaceState({}, document.title, url);
    }

    function toQueryString(args) {
      var parts = [];
      for (var name_1 in args) {
        if (args.hasOwnProperty(name_1) && args[name_1] !== '' && args[name_1] !== null && args[name_1] !== undefined) {
          parts.push(encodeURIComponent(name_1) + '=' + encodeURIComponent(args[name_1]));
        }
      }
      return parts.join('&');
    }

    function parseQueryString(queryString) {
      var match;
      var pl = /\+/g;
      var search = /([^&=]+)=?([^&]*)/g;
      var decode = function (s) { return decodeURIComponent(s.replace(pl, ' ')); };
      if (queryString === undefined) {
        queryString = '';
      }
      queryString = queryString.substring(1);
      var urlParams = {};
      while (match = search.exec(queryString)) {
        urlParams[decode(match[1])] = decode(match[2]);
      }
      return urlParams;
    }

    function arraysIntersect(a, b) {
      for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
        var itemA = a_1[_i];
        for (var _a = 0, b_1 = b; _a < b_1.length; _a++) {
          var itemB = b_1[_a];
          if (itemA === itemB) {
            return true;
          }
        }
      }
      return false;
    }

    function notifyContentUpdated() {
      // Dispatch this event when needed
      // window.dispatchEvent(new CustomEvent('content-update'));
    }
  }

  function utility() {
    this.getAbsolutePath = getAbsolutePath;
    this.isRelativePath = isRelativePath;
    this.isAbsolutePath = isAbsolutePath;
    this.getDirectory = getDirectory;
    this.formList = formList;

    function getAbsolutePath(href) {
      // Use anchor to normalize href
      var anchor = $('<a href="' + href + '"></a>')[0];
      // Ignore protocal, remove search and query
      return anchor.host + anchor.pathname;
    }

    function isRelativePath(href) {
      if (href === undefined || href === '' || href[0] === '/') {
        return false;
      }
      return !isAbsolutePath(href);
    }

    function isAbsolutePath(href) {
      return (/^(?:[a-z]+:)?\/\//i).test(href);
    }

    function getDirectory(href) {
      if (!href) return '';
      var index = href.lastIndexOf('/');
      if (index == -1) return '';
      if (index > -1) {
        return href.substr(0, index);
      }
    }

    function formList(item, classes) {
      var level = 1;
      var model = {
        items: item
      };
      var cls = [].concat(classes).join(" ");
      return getList(model, cls);

      function getList(model, cls) {
        if (!model || !model.items) return null;
        var l = model.items.length;
        if (l === 0) return null;
        var html = '<ul class="level' + level + ' ' + (cls || '') + '">';
        level++;
        for (var i = 0; i < l; i++) {
          var item = model.items[i];
          var href = item.href;
          var name = item.name;
          if (!name) continue;
          html += href ? '<li><a href="' + href + '">' + name + '</a>' : '<li>' + name;
          html += getList(item, cls) || '';
          html += '</li>';
        }
        html += '</ul>';
        return html;
      }
    }

    /**
     * Add <wbr> into long word.
     * @param {String} text - The word to break. It should be in plain text without HTML tags.
     */
    function breakPlainText(text) {
      if (!text) return text;
      return text.replace(/([a-z])([A-Z])|(\.)(\w)/g, '$1$3<wbr>$2$4')
    }

    /**
     * Add <wbr> into long word. The jQuery element should contain no html tags.
     * If the jQuery element contains tags, this function will not change the element.
     */
    $.fn.breakWord = function () {
      if (this.html() == this.text()) {
        this.html(function (index, text) {
          return breakPlainText(text);
        })
      }
      return this;
    }
  }

  // adjusted from https://stackoverflow.com/a/13067009/1523776
  function workAroundFixedHeaderForAnchors() {
    var HISTORY_SUPPORT = !!(history && history.pushState);
    var ANCHOR_REGEX = /^#[^ ]+$/;

    function getFixedOffset() {
      return $('header').first().height();
    }

    /**
     * If the provided href is an anchor which resolves to an element on the
     * page, scroll to it.
     * @param  {String} href
     * @return {Boolean} - Was the href an anchor.
     */
    function scrollIfAnchor(href, pushToHistory) {
      var match, rect, anchorOffset;

      if (!ANCHOR_REGEX.test(href)) {
        return false;
      }

      match = document.getElementById(href.slice(1));

      if (match) {
        rect = match.getBoundingClientRect();
        anchorOffset = window.pageYOffset + rect.top - getFixedOffset();
        window.scrollTo(window.pageXOffset, anchorOffset);

        // Add the state to history as-per normal anchor links
        if (HISTORY_SUPPORT && pushToHistory) {
          history.pushState({}, document.title, location.pathname + href);
        }
      }

      return !!match;
    }

    /**
     * Attempt to scroll to the current location's hash.
     */
    function scrollToCurrent() {
      scrollIfAnchor(window.location.hash);
    }

    /**
     * If the click event's target was an anchor, fix the scroll position.
     */
    function delegateAnchors(e) {
      var elem = e.target;

      if (scrollIfAnchor(elem.getAttribute('href'), true)) {
        e.preventDefault();
      }
    }

    $(window).on('hashchange', scrollToCurrent);

    $(window).load(function () {
        // scroll to the anchor if present, offset by the header
        scrollToCurrent();
    });

    $(document).ready(function () {
        // Exclude tabbed content case
        $('a:not([data-tab])').click(function (e) { delegateAnchors(e); });
    });
  }
});



================================================
File: ERC/docs/styles/docfx.vendor.css
================================================
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
.label,sub,sup{vertical-align:baseline}
hr,img{border:0}
body,figure{margin:0}
.btn-group>.btn-group,.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.dropdown-menu{float:left}
.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.pre-scrollable{max-height:340px}
html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}
article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}
audio,canvas,progress,video{display:inline-block;vertical-align:baseline}
audio:not([controls]){display:none;height:0}
[hidden],template{display:none}
a{background-color:transparent}
a:active,a:hover{outline:0}
b,optgroup,strong{font-weight:700}
dfn{font-style:italic}
h1{margin:.67em 0}
mark{color:#000;background:#ff0}
sub,sup{position:relative;font-size:75%;line-height:0}
sup{top:-.5em}
sub{bottom:-.25em}
img{vertical-align:middle}
svg:not(:root){overflow:hidden}
hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}
pre,textarea{overflow:auto}
code,kbd,pre,samp{font-size:1em}
button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}
.glyphicon,address{font-style:normal}
button{overflow:visible}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}
input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}
input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}
input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}
table{border-spacing:0;border-collapse:collapse}
td,th{padding:0}
/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */
@media print{blockquote,img,pre,tr{page-break-inside:avoid}
*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important}
a,a:visited{text-decoration:underline}
a[href]:after{content:" (" attr(href) ")"}
abbr[title]:after{content:" (" attr(title) ")"}
a[href^="javascript:"]:after,a[href^="#"]:after{content:""}
blockquote,pre{border:1px solid #999}
thead{display:table-header-group}
img{max-width:100%!important}
h2,h3,p{orphans:3;widows:3}
h2,h3{page-break-after:avoid}
.navbar{display:none}
.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}
.label{border:1px solid #000}
.table{border-collapse:collapse!important}
.table td,.table th{background-color:#fff!important}
.table-bordered td,.table-bordered th{border:1px solid #ddd!important}
}
.dropdown-menu,.modal-content{-webkit-background-clip:padding-box}
.btn,.btn-danger.active,.btn-danger:active,.btn-default.active,.btn-default:active,.btn-info.active,.btn-info:active,.btn-primary.active,.btn-primary:active,.btn-warning.active,.btn-warning:active,.btn.active,.btn:active,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover,.form-control,.navbar-toggle,.open>.dropdown-toggle.btn-danger,.open>.dropdown-toggle.btn-default,.open>.dropdown-toggle.btn-info,.open>.dropdown-toggle.btn-primary,.open>.dropdown-toggle.btn-warning{background-image:none}
.img-thumbnail,body{background-color:#fff}
@font-face{font-family:'Glyphicons Halflings';src:url(../fonts/glyphicons-halflings-regular.eot);src:url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'),url(../fonts/glyphicons-halflings-regular.woff) format('woff'),url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'),url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')}
.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
.glyphicon-asterisk:before{content:"\002a"}
.glyphicon-plus:before{content:"\002b"}
.glyphicon-eur:before,.glyphicon-euro:before{content:"\20ac"}
.glyphicon-minus:before{content:"\2212"}
.glyphicon-cloud:before{content:"\2601"}
.glyphicon-envelope:before{content:"\2709"}
.glyphicon-pencil:before{content:"\270f"}
.glyphicon-glass:before{content:"\e001"}
.glyphicon-music:before{content:"\e002"}
.glyphicon-search:before{content:"\e003"}
.glyphicon-heart:before{content:"\e005"}
.glyphicon-star:before{content:"\e006"}
.glyphicon-star-empty:before{content:"\e007"}
.glyphicon-user:before{content:"\e008"}
.glyphicon-film:before{content:"\e009"}
.glyphicon-th-large:before{content:"\e010"}
.glyphicon-th:before{content:"\e011"}
.glyphicon-th-list:before{content:"\e012"}
.glyphicon-ok:before{content:"\e013"}
.glyphicon-remove:before{content:"\e014"}
.glyphicon-zoom-in:before{content:"\e015"}
.glyphicon-zoom-out:before{content:"\e016"}
.glyphicon-off:before{content:"\e017"}
.glyphicon-signal:before{content:"\e018"}
.glyphicon-cog:before{content:"\e019"}
.glyphicon-trash:before{content:"\e020"}
.glyphicon-home:before{content:"\e021"}
.glyphicon-file:before{content:"\e022"}
.glyphicon-time:before{content:"\e023"}
.glyphicon-road:before{content:"\e024"}
.glyphicon-download-alt:before{content:"\e025"}
.glyphicon-download:before{content:"\e026"}
.glyphicon-upload:before{content:"\e027"}
.glyphicon-inbox:before{content:"\e028"}
.glyphicon-play-circle:before{content:"\e029"}
.glyphicon-repeat:before{content:"\e030"}
.glyphicon-refresh:before{content:"\e031"}
.glyphicon-list-alt:before{content:"\e032"}
.glyphicon-lock:before{content:"\e033"}
.glyphicon-flag:before{content:"\e034"}
.glyphicon-headphones:before{content:"\e035"}
.glyphicon-volume-off:before{content:"\e036"}
.glyphicon-volume-down:before{content:"\e037"}
.glyphicon-volume-up:before{content:"\e038"}
.glyphicon-qrcode:before{content:"\e039"}
.glyphicon-barcode:before{content:"\e040"}
.glyphicon-tag:before{content:"\e041"}
.glyphicon-tags:before{content:"\e042"}
.glyphicon-book:before{content:"\e043"}
.glyphicon-bookmark:before{content:"\e044"}
.glyphicon-print:before{content:"\e045"}
.glyphicon-camera:before{content:"\e046"}
.glyphicon-font:before{content:"\e047"}
.glyphicon-bold:before{content:"\e048"}
.glyphicon-italic:before{content:"\e049"}
.glyphicon-text-height:before{content:"\e050"}
.glyphicon-text-width:before{content:"\e051"}
.glyphicon-align-left:before{content:"\e052"}
.glyphicon-align-center:before{content:"\e053"}
.glyphicon-align-right:before{content:"\e054"}
.glyphicon-align-justify:before{content:"\e055"}
.glyphicon-list:before{content:"\e056"}
.glyphicon-indent-left:before{content:"\e057"}
.glyphicon-indent-right:before{content:"\e058"}
.glyphicon-facetime-video:before{content:"\e059"}
.glyphicon-picture:before{content:"\e060"}
.glyphicon-map-marker:before{content:"\e062"}
.glyphicon-adjust:before{content:"\e063"}
.glyphicon-tint:before{content:"\e064"}
.glyphicon-edit:before{content:"\e065"}
.glyphicon-share:before{content:"\e066"}
.glyphicon-check:before{content:"\e067"}
.glyphicon-move:before{content:"\e068"}
.glyphicon-step-backward:before{content:"\e069"}
.glyphicon-fast-backward:before{content:"\e070"}
.glyphicon-backward:before{content:"\e071"}
.glyphicon-play:before{content:"\e072"}
.glyphicon-pause:before{content:"\e073"}
.glyphicon-stop:before{content:"\e074"}
.glyphicon-forward:before{content:"\e075"}
.glyphicon-fast-forward:before{content:"\e076"}
.glyphicon-step-forward:before{content:"\e077"}
.glyphicon-eject:before{content:"\e078"}
.glyphicon-chevron-left:before{content:"\e079"}
.glyphicon-chevron-right:before{content:"\e080"}
.glyphicon-plus-sign:before{content:"\e081"}
.glyphicon-minus-sign:before{content:"\e082"}
.glyphicon-remove-sign:before{content:"\e083"}
.glyphicon-ok-sign:before{content:"\e084"}
.glyphicon-question-sign:before{content:"\e085"}
.glyphicon-info-sign:before{content:"\e086"}
.glyphicon-screenshot:before{content:"\e087"}
.glyphicon-remove-circle:before{content:"\e088"}
.glyphicon-ok-circle:before{content:"\e089"}
.glyphicon-ban-circle:before{content:"\e090"}
.glyphicon-arrow-left:before{content:"\e091"}
.glyphicon-arrow-right:before{content:"\e092"}
.glyphicon-arrow-up:before{content:"\e093"}
.glyphicon-arrow-down:before{content:"\e094"}
.glyphicon-share-alt:before{content:"\e095"}
.glyphicon-resize-full:before{content:"\e096"}
.glyphicon-resize-small:before{content:"\e097"}
.glyphicon-exclamation-sign:before{content:"\e101"}
.glyphicon-gift:before{content:"\e102"}
.glyphicon-leaf:before{content:"\e103"}
.glyphicon-fire:before{content:"\e104"}
.glyphicon-eye-open:before{content:"\e105"}
.glyphicon-eye-close:before{content:"\e106"}
.glyphicon-warning-sign:before{content:"\e107"}
.glyphicon-plane:before{content:"\e108"}
.glyphicon-calendar:before{content:"\e109"}
.glyphicon-random:before{content:"\e110"}
.glyphicon-comment:before{content:"\e111"}
.glyphicon-magnet:before{content:"\e112"}
.glyphicon-chevron-up:before{content:"\e113"}
.glyphicon-chevron-down:before{content:"\e114"}
.glyphicon-retweet:before{content:"\e115"}
.glyphicon-shopping-cart:before{content:"\e116"}
.glyphicon-folder-close:before{content:"\e117"}
.glyphicon-folder-open:before{content:"\e118"}
.glyphicon-resize-vertical:before{content:"\e119"}
.glyphicon-resize-horizontal:before{content:"\e120"}
.glyphicon-hdd:before{content:"\e121"}
.glyphicon-bullhorn:before{content:"\e122"}
.glyphicon-bell:before{content:"\e123"}
.glyphicon-certificate:before{content:"\e124"}
.glyphicon-thumbs-up:before{content:"\e125"}
.glyphicon-thumbs-down:before{content:"\e126"}
.glyphicon-hand-right:before{content:"\e127"}
.glyphicon-hand-left:before{content:"\e128"}
.glyphicon-hand-up:before{content:"\e129"}
.glyphicon-hand-down:before{content:"\e130"}
.glyphicon-circle-arrow-right:before{content:"\e131"}
.glyphicon-circle-arrow-left:before{content:"\e132"}
.glyphicon-circle-arrow-up:before{content:"\e133"}
.glyphicon-circle-arrow-down:before{content:"\e134"}
.glyphicon-globe:before{content:"\e135"}
.glyphicon-wrench:before{content:"\e136"}
.glyphicon-tasks:before{content:"\e137"}
.glyphicon-filter:before{content:"\e138"}
.glyphicon-briefcase:before{content:"\e139"}
.glyphicon-fullscreen:before{content:"\e140"}
.glyphicon-dashboard:before{content:"\e141"}
.glyphicon-paperclip:before{content:"\e142"}
.glyphicon-heart-empty:before{content:"\e143"}
.glyphicon-link:before{content:"\e144"}
.glyphicon-phone:before{content:"\e145"}
.glyphicon-pushpin:before{content:"\e146"}
.glyphicon-usd:before{content:"\e148"}
.glyphicon-gbp:before{content:"\e149"}
.glyphicon-sort:before{content:"\e150"}
.glyphicon-sort-by-alphabet:before{content:"\e151"}
.glyphicon-sort-by-alphabet-alt:before{content:"\e152"}
.glyphicon-sort-by-order:before{content:"\e153"}
.glyphicon-sort-by-order-alt:before{content:"\e154"}
.glyphicon-sort-by-attributes:before{content:"\e155"}
.glyphicon-sort-by-attributes-alt:before{content:"\e156"}
.glyphicon-unchecked:before{content:"\e157"}
.glyphicon-expand:before{content:"\e158"}
.glyphicon-collapse-down:before{content:"\e159"}
.glyphicon-collapse-up:before{content:"\e160"}
.glyphicon-log-in:before{content:"\e161"}
.glyphicon-flash:before{content:"\e162"}
.glyphicon-log-out:before{content:"\e163"}
.glyphicon-new-window:before{content:"\e164"}
.glyphicon-record:before{content:"\e165"}
.glyphicon-save:before{content:"\e166"}
.glyphicon-open:before{content:"\e167"}
.glyphicon-saved:before{content:"\e168"}
.glyphicon-import:before{content:"\e169"}
.glyphicon-export:before{content:"\e170"}
.glyphicon-send:before{content:"\e171"}
.glyphicon-floppy-disk:before{content:"\e172"}
.glyphicon-floppy-saved:before{content:"\e173"}
.glyphicon-floppy-remove:before{content:"\e174"}
.glyphicon-floppy-save:before{content:"\e175"}
.glyphicon-floppy-open:before{content:"\e176"}
.glyphicon-credit-card:before{content:"\e177"}
.glyphicon-transfer:before{content:"\e178"}
.glyphicon-cutlery:before{content:"\e179"}
.glyphicon-header:before{content:"\e180"}
.glyphicon-compressed:before{content:"\e181"}
.glyphicon-earphone:before{content:"\e182"}
.glyphicon-phone-alt:before{content:"\e183"}
.glyphicon-tower:before{content:"\e184"}
.glyphicon-stats:before{content:"\e185"}
.glyphicon-sd-video:before{content:"\e186"}
.glyphicon-hd-video:before{content:"\e187"}
.glyphicon-subtitles:before{content:"\e188"}
.glyphicon-sound-stereo:before{content:"\e189"}
.glyphicon-sound-dolby:before{content:"\e190"}
.glyphicon-sound-5-1:before{content:"\e191"}
.glyphicon-sound-6-1:before{content:"\e192"}
.glyphicon-sound-7-1:before{content:"\e193"}
.glyphicon-copyright-mark:before{content:"\e194"}
.glyphicon-registration-mark:before{content:"\e195"}
.glyphicon-cloud-download:before{content:"\e197"}
.glyphicon-cloud-upload:before{content:"\e198"}
.glyphicon-tree-conifer:before{content:"\e199"}
.glyphicon-tree-deciduous:before{content:"\e200"}
.glyphicon-cd:before{content:"\e201"}
.glyphicon-save-file:before{content:"\e202"}
.glyphicon-open-file:before{content:"\e203"}
.glyphicon-level-up:before{content:"\e204"}
.glyphicon-copy:before{content:"\e205"}
.glyphicon-paste:before{content:"\e206"}
.glyphicon-alert:before{content:"\e209"}
.glyphicon-equalizer:before{content:"\e210"}
.glyphicon-king:before{content:"\e211"}
.glyphicon-queen:before{content:"\e212"}
.glyphicon-pawn:before{content:"\e213"}
.glyphicon-bishop:before{content:"\e214"}
.glyphicon-knight:before{content:"\e215"}
.glyphicon-baby-formula:before{content:"\e216"}
.glyphicon-tent:before{content:"\26fa"}
.glyphicon-blackboard:before{content:"\e218"}
.glyphicon-bed:before{content:"\e219"}
.glyphicon-apple:before{content:"\f8ff"}
.glyphicon-erase:before{content:"\e221"}
.glyphicon-hourglass:before{content:"\231b"}
.glyphicon-lamp:before{content:"\e223"}
.glyphicon-duplicate:before{content:"\e224"}
.glyphicon-piggy-bank:before{content:"\e225"}
.glyphicon-scissors:before{content:"\e226"}
.glyphicon-bitcoin:before,.glyphicon-btc:before,.glyphicon-xbt:before{content:"\e227"}
.glyphicon-jpy:before,.glyphicon-yen:before{content:"\00a5"}
.glyphicon-rub:before,.glyphicon-ruble:before{content:"\20bd"}
.glyphicon-scale:before{content:"\e230"}
.glyphicon-ice-lolly:before{content:"\e231"}
.glyphicon-ice-lolly-tasted:before{content:"\e232"}
.glyphicon-education:before{content:"\e233"}
.glyphicon-option-horizontal:before{content:"\e234"}
.glyphicon-option-vertical:before{content:"\e235"}
.glyphicon-menu-hamburger:before{content:"\e236"}
.glyphicon-modal-window:before{content:"\e237"}
.glyphicon-oil:before{content:"\e238"}
.glyphicon-grain:before{content:"\e239"}
.glyphicon-sunglasses:before{content:"\e240"}
.glyphicon-text-size:before{content:"\e241"}
.glyphicon-text-color:before{content:"\e242"}
.glyphicon-text-background:before{content:"\e243"}
.glyphicon-object-align-top:before{content:"\e244"}
.glyphicon-object-align-bottom:before{content:"\e245"}
.glyphicon-object-align-horizontal:before{content:"\e246"}
.glyphicon-object-align-left:before{content:"\e247"}
.glyphicon-object-align-vertical:before{content:"\e248"}
.glyphicon-object-align-right:before{content:"\e249"}
.glyphicon-triangle-right:before{content:"\e250"}
.glyphicon-triangle-left:before{content:"\e251"}
.glyphicon-triangle-bottom:before{content:"\e252"}
.glyphicon-triangle-top:before{content:"\e253"}
.glyphicon-console:before{content:"\e254"}
.glyphicon-superscript:before{content:"\e255"}
.glyphicon-subscript:before{content:"\e256"}
.glyphicon-menu-left:before{content:"\e257"}
.glyphicon-menu-right:before{content:"\e258"}
.glyphicon-menu-down:before{content:"\e259"}
.glyphicon-menu-up:before{content:"\e260"}
*,:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}
html{font-size:10px;-webkit-tap-highlight-color:transparent}
body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333}
button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}
a{color:#337ab7;text-decoration:none}
a:focus,a:hover{color:#23527c;text-decoration:underline}
a:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}
.carousel-inner>.item>a>img,.carousel-inner>.item>img,.img-responsive,.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto}
.img-rounded{border-radius:6px}
.img-thumbnail{display:inline-block;max-width:100%;height:auto;padding:4px;line-height:1.42857143;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}
.img-circle{border-radius:50%}
hr{margin-top:20px;margin-bottom:20px;border-top:1px solid #eee}
.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}
.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}
[role=button]{cursor:pointer}
.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}
.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}
.h1,.h2,.h3,h1,h2,h3{margin-top:20px;margin-bottom:10px}
.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}
.h4,.h5,.h6,h4,h5,h6{margin-top:10px;margin-bottom:10px}
.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}
.h1,h1{font-size:36px}
.h2,h2{font-size:30px}
.h3,h3{font-size:24px}
.h4,h4{font-size:18px}
.h5,h5{font-size:14px}
.h6,h6{font-size:12px}
p{margin:0 0 10px}
.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}
dt,kbd kbd,label{font-weight:700}
address,blockquote .small,blockquote footer,blockquote small,dd,dt,pre{line-height:1.42857143}
@media (min-width:768px){.lead{font-size:21px}
}
.small,small{font-size:85%}
.mark,mark{padding:.2em;background-color:#fcf8e3}
.list-inline,.list-unstyled{padding-left:0;list-style:none}
.text-left{text-align:left}
.text-right{text-align:right}
.text-center{text-align:center}
.text-justify{text-align:justify}
.text-nowrap{white-space:nowrap}
.text-lowercase{text-transform:lowercase}
.text-uppercase{text-transform:uppercase}
.text-capitalize{text-transform:capitalize}
.text-muted{color:#777}
.text-primary{color:#337ab7}
a.text-primary:focus,a.text-primary:hover{color:#286090}
.text-success{color:#3c763d}
a.text-success:focus,a.text-success:hover{color:#2b542c}
.text-info{color:#31708f}
a.text-info:focus,a.text-info:hover{color:#245269}
.text-warning{color:#8a6d3b}
a.text-warning:focus,a.text-warning:hover{color:#66512c}
.text-danger{color:#a94442}
a.text-danger:focus,a.text-danger:hover{color:#843534}
.bg-primary{color:#fff;background-color:#337ab7}
a.bg-primary:focus,a.bg-primary:hover{background-color:#286090}
.bg-success{background-color:#dff0d8}
a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}
.bg-info{background-color:#d9edf7}
a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}
.bg-warning{background-color:#fcf8e3}
a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}
.bg-danger{background-color:#f2dede}
a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}
pre code,table{background-color:transparent}
.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}
dl,ol,ul{margin-top:0}
blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child,ol ol,ol ul,ul ol,ul ul{margin-bottom:0}
address,dl{margin-bottom:20px}
ol,ul{margin-bottom:10px}
.list-inline{margin-left:-5px}
.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}
dd{margin-left:0}
@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}
.dl-horizontal dd{margin-left:180px}
.container{width:750px}
}
abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}
.initialism{font-size:90%;text-transform:uppercase}
blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}
blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;color:#777}
legend,pre{display:block;color:#333}
blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\2014 \00A0'}
.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;text-align:right;border-right:5px solid #eee;border-left:0}
code,kbd{padding:2px 4px;font-size:90%}
caption,th{text-align:left}
.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}
.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\00A0 \2014'}
code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,"Courier New",monospace}
code{color:#c7254e;background-color:#f9f2f4;border-radius:4px}
kbd{color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}
kbd kbd{padding:0;font-size:100%;-webkit-box-shadow:none;box-shadow:none}
pre{padding:9.5px;margin:0 0 10px;font-size:13px;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}
.container,.container-fluid{margin-right:auto;margin-left:auto}
pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;border-radius:0}
.container,.container-fluid{padding-right:15px;padding-left:15px}
.pre-scrollable{overflow-y:scroll}
@media (min-width:992px){.container{width:970px}
}
@media (min-width:1200px){.container{width:1170px}
}
.row{margin-right:-15px;margin-left:-15px}
.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}
.col-xs-12{width:100%}
.col-xs-11{width:91.66666667%}
.col-xs-10{width:83.33333333%}
.col-xs-9{width:75%}
.col-xs-8{width:66.66666667%}
.col-xs-7{width:58.33333333%}
.col-xs-6{width:50%}
.col-xs-5{width:41.66666667%}
.col-xs-4{width:33.33333333%}
.col-xs-3{width:25%}
.col-xs-2{width:16.66666667%}
.col-xs-1{width:8.33333333%}
.col-xs-pull-12{right:100%}
.col-xs-pull-11{right:91.66666667%}
.col-xs-pull-10{right:83.33333333%}
.col-xs-pull-9{right:75%}
.col-xs-pull-8{right:66.66666667%}
.col-xs-pull-7{right:58.33333333%}
.col-xs-pull-6{right:50%}
.col-xs-pull-5{right:41.66666667%}
.col-xs-pull-4{right:33.33333333%}
.col-xs-pull-3{right:25%}
.col-xs-pull-2{right:16.66666667%}
.col-xs-pull-1{right:8.33333333%}
.col-xs-pull-0{right:auto}
.col-xs-push-12{left:100%}
.col-xs-push-11{left:91.66666667%}
.col-xs-push-10{left:83.33333333%}
.col-xs-push-9{left:75%}
.col-xs-push-8{left:66.66666667%}
.col-xs-push-7{left:58.33333333%}
.col-xs-push-6{left:50%}
.col-xs-push-5{left:41.66666667%}
.col-xs-push-4{left:33.33333333%}
.col-xs-push-3{left:25%}
.col-xs-push-2{left:16.66666667%}
.col-xs-push-1{left:8.33333333%}
.col-xs-push-0{left:auto}
.col-xs-offset-12{margin-left:100%}
.col-xs-offset-11{margin-left:91.66666667%}
.col-xs-offset-10{margin-left:83.33333333%}
.col-xs-offset-9{margin-left:75%}
.col-xs-offset-8{margin-left:66.66666667%}
.col-xs-offset-7{margin-left:58.33333333%}
.col-xs-offset-6{margin-left:50%}
.col-xs-offset-5{margin-left:41.66666667%}
.col-xs-offset-4{margin-left:33.33333333%}
.col-xs-offset-3{margin-left:25%}
.col-xs-offset-2{margin-left:16.66666667%}
.col-xs-offset-1{margin-left:8.33333333%}
.col-xs-offset-0{margin-left:0}
@media (min-width:768px){.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}
.col-sm-12{width:100%}
.col-sm-11{width:91.66666667%}
.col-sm-10{width:83.33333333%}
.col-sm-9{width:75%}
.col-sm-8{width:66.66666667%}
.col-sm-7{width:58.33333333%}
.col-sm-6{width:50%}
.col-sm-5{width:41.66666667%}
.col-sm-4{width:33.33333333%}
.col-sm-3{width:25%}
.col-sm-2{width:16.66666667%}
.col-sm-1{width:8.33333333%}
.col-sm-pull-12{right:100%}
.col-sm-pull-11{right:91.66666667%}
.col-sm-pull-10{right:83.33333333%}
.col-sm-pull-9{right:75%}
.col-sm-pull-8{right:66.66666667%}
.col-sm-pull-7{right:58.33333333%}
.col-sm-pull-6{right:50%}
.col-sm-pull-5{right:41.66666667%}
.col-sm-pull-4{right:33.33333333%}
.col-sm-pull-3{right:25%}
.col-sm-pull-2{right:16.66666667%}
.col-sm-pull-1{right:8.33333333%}
.col-sm-pull-0{right:auto}
.col-sm-push-12{left:100%}
.col-sm-push-11{left:91.66666667%}
.col-sm-push-10{left:83.33333333%}
.col-sm-push-9{left:75%}
.col-sm-push-8{left:66.66666667%}
.col-sm-push-7{left:58.33333333%}
.col-sm-push-6{left:50%}
.col-sm-push-5{left:41.66666667%}
.col-sm-push-4{left:33.33333333%}
.col-sm-push-3{left:25%}
.col-sm-push-2{left:16.66666667%}
.col-sm-push-1{left:8.33333333%}
.col-sm-push-0{left:auto}
.col-sm-offset-12{margin-left:100%}
.col-sm-offset-11{margin-left:91.66666667%}
.col-sm-offset-10{margin-left:83.33333333%}
.col-sm-offset-9{margin-left:75%}
.col-sm-offset-8{margin-left:66.66666667%}
.col-sm-offset-7{margin-left:58.33333333%}
.col-sm-offset-6{margin-left:50%}
.col-sm-offset-5{margin-left:41.66666667%}
.col-sm-offset-4{margin-left:33.33333333%}
.col-sm-offset-3{margin-left:25%}
.col-sm-offset-2{margin-left:16.66666667%}
.col-sm-offset-1{margin-left:8.33333333%}
.col-sm-offset-0{margin-left:0}
}
@media (min-width:992px){.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}
.col-md-12{width:100%}
.col-md-11{width:91.66666667%}
.col-md-10{width:83.33333333%}
.col-md-9{width:75%}
.col-md-8{width:66.66666667%}
.col-md-7{width:58.33333333%}
.col-md-6{width:50%}
.col-md-5{width:41.66666667%}
.col-md-4{width:33.33333333%}
.col-md-3{width:25%}
.col-md-2{width:16.66666667%}
.col-md-1{width:8.33333333%}
.col-md-pull-12{right:100%}
.col-md-pull-11{right:91.66666667%}
.col-md-pull-10{right:83.33333333%}
.col-md-pull-9{right:75%}
.col-md-pull-8{right:66.66666667%}
.col-md-pull-7{right:58.33333333%}
.col-md-pull-6{right:50%}
.col-md-pull-5{right:41.66666667%}
.col-md-pull-4{right:33.33333333%}
.col-md-pull-3{right:25%}
.col-md-pull-2{right:16.66666667%}
.col-md-pull-1{right:8.33333333%}
.col-md-pull-0{right:auto}
.col-md-push-12{left:100%}
.col-md-push-11{left:91.66666667%}
.col-md-push-10{left:83.33333333%}
.col-md-push-9{left:75%}
.col-md-push-8{left:66.66666667%}
.col-md-push-7{left:58.33333333%}
.col-md-push-6{left:50%}
.col-md-push-5{left:41.66666667%}
.col-md-push-4{left:33.33333333%}
.col-md-push-3{left:25%}
.col-md-push-2{left:16.66666667%}
.col-md-push-1{left:8.33333333%}
.col-md-push-0{left:auto}
.col-md-offset-12{margin-left:100%}
.col-md-offset-11{margin-left:91.66666667%}
.col-md-offset-10{margin-left:83.33333333%}
.col-md-offset-9{margin-left:75%}
.col-md-offset-8{margin-left:66.66666667%}
.col-md-offset-7{margin-left:58.33333333%}
.col-md-offset-6{margin-left:50%}
.col-md-offset-5{margin-left:41.66666667%}
.col-md-offset-4{margin-left:33.33333333%}
.col-md-offset-3{margin-left:25%}
.col-md-offset-2{margin-left:16.66666667%}
.col-md-offset-1{margin-left:8.33333333%}
.col-md-offset-0{margin-left:0}
}
@media (min-width:1200px){.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}
.col-lg-12{width:100%}
.col-lg-11{width:91.66666667%}
.col-lg-10{width:83.33333333%}
.col-lg-9{width:75%}
.col-lg-8{width:66.66666667%}
.col-lg-7{width:58.33333333%}
.col-lg-6{width:50%}
.col-lg-5{width:41.66666667%}
.col-lg-4{width:33.33333333%}
.col-lg-3{width:25%}
.col-lg-2{width:16.66666667%}
.col-lg-1{width:8.33333333%}
.col-lg-pull-12{right:100%}
.col-lg-pull-11{right:91.66666667%}
.col-lg-pull-10{right:83.33333333%}
.col-lg-pull-9{right:75%}
.col-lg-pull-8{right:66.66666667%}
.col-lg-pull-7{right:58.33333333%}
.col-lg-pull-6{right:50%}
.col-lg-pull-5{right:41.66666667%}
.col-lg-pull-4{right:33.33333333%}
.col-lg-pull-3{right:25%}
.col-lg-pull-2{right:16.66666667%}
.col-lg-pull-1{right:8.33333333%}
.col-lg-pull-0{right:auto}
.col-lg-push-12{left:100%}
.col-lg-push-11{left:91.66666667%}
.col-lg-push-10{left:83.33333333%}
.col-lg-push-9{left:75%}
.col-lg-push-8{left:66.66666667%}
.col-lg-push-7{left:58.33333333%}
.col-lg-push-6{left:50%}
.col-lg-push-5{left:41.66666667%}
.col-lg-push-4{left:33.33333333%}
.col-lg-push-3{left:25%}
.col-lg-push-2{left:16.66666667%}
.col-lg-push-1{left:8.33333333%}
.col-lg-push-0{left:auto}
.col-lg-offset-12{margin-left:100%}
.col-lg-offset-11{margin-left:91.66666667%}
.col-lg-offset-10{margin-left:83.33333333%}
.col-lg-offset-9{margin-left:75%}
.col-lg-offset-8{margin-left:66.66666667%}
.col-lg-offset-7{margin-left:58.33333333%}
.col-lg-offset-6{margin-left:50%}
.col-lg-offset-5{margin-left:41.66666667%}
.col-lg-offset-4{margin-left:33.33333333%}
.col-lg-offset-3{margin-left:25%}
.col-lg-offset-2{margin-left:16.66666667%}
.col-lg-offset-1{margin-left:8.33333333%}
.col-lg-offset-0{margin-left:0}
}
caption{padding-top:8px;padding-bottom:8px;color:#777}
.table{width:100%;max-width:100%;margin-bottom:20px}
.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}
.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}
.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}
.table>tbody+tbody{border-top:2px solid #ddd}
.table .table{background-color:#fff}
.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}
.table-bordered,.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}
.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}
.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}
.table-hover>tbody>tr:hover,.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}
table col[class*=col-]{position:static;display:table-column;float:none}
table td[class*=col-],table th[class*=col-]{position:static;display:table-cell;float:none}
.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}
.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}
.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}
.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}
.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}
.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}
.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}
.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}
.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}
.table-responsive{min-height:.01%;overflow-x:auto}
@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}
.table-responsive>.table{margin-bottom:0}
.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}
.table-responsive>.table-bordered{border:0}
.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}
.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}
.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}
}
fieldset,legend{padding:0;border:0}
fieldset{min-width:0;margin:0}
legend{width:100%;margin-bottom:20px;font-size:21px;line-height:inherit;border-bottom:1px solid #e5e5e5}
label{display:inline-block;max-width:100%;margin-bottom:5px}
input[type=search]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none}
input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\9;line-height:normal}
.form-control,output{font-size:14px;line-height:1.42857143;color:#555;display:block}
input[type=file]{display:block}
input[type=range]{display:block;width:100%}
select[multiple],select[size]{height:auto}
input[type=file]:focus,input[type=checkbox]:focus,input[type=radio]:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}
output{padding-top:7px}
.form-control{width:100%;height:34px;padding:6px 12px;background-color:#fff;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}
.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}
.form-control::-moz-placeholder{color:#999;opacity:1}
.form-control:-ms-input-placeholder{color:#999}
.form-control::-webkit-input-placeholder{color:#999}
.has-success .checkbox,.has-success .checkbox-inline,.has-success .control-label,.has-success .form-control-feedback,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.checkbox label,.has-success.checkbox-inline label,.has-success.radio label,.has-success.radio-inline label{color:#3c763d}
.form-control::-ms-expand{background-color:transparent;border:0}
.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}
.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}
textarea.form-control{height:auto}
@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=time].form-control,input[type=datetime-local].form-control,input[type=month].form-control{line-height:34px}
.input-group-sm input[type=date],.input-group-sm input[type=time],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],input[type=date].input-sm,input[type=time].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm{line-height:30px}
.input-group-lg input[type=date],.input-group-lg input[type=time],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],input[type=date].input-lg,input[type=time].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg{line-height:46px}
}
.form-group{margin-bottom:15px}
.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}
.checkbox label,.radio label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}
.checkbox input[type=checkbox],.checkbox-inline input[type=checkbox],.radio input[type=radio],.radio-inline input[type=radio]{position:absolute;margin-top:4px\9;margin-left:-20px}
.checkbox+.checkbox,.radio+.radio{margin-top:-5px}
.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;font-weight:400;vertical-align:middle;cursor:pointer}
.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}
.checkbox-inline.disabled,.checkbox.disabled label,.radio-inline.disabled,.radio.disabled label,fieldset[disabled] .checkbox label,fieldset[disabled] .checkbox-inline,fieldset[disabled] .radio label,fieldset[disabled] .radio-inline,fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}
.form-control-static{min-height:34px;padding-top:7px;padding-bottom:7px;margin-bottom:0}
.form-control-static.input-lg,.form-control-static.input-sm{padding-right:0;padding-left:0}
.form-group-sm .form-control,.input-sm{padding:5px 10px;border-radius:3px;font-size:12px}
.input-sm{height:30px;line-height:1.5}
select.input-sm{height:30px;line-height:30px}
select[multiple].input-sm,textarea.input-sm{height:auto}
.form-group-sm .form-control{height:30px;line-height:1.5}
.form-group-lg .form-control,.input-lg{border-radius:6px;padding:10px 16px;font-size:18px}
.form-group-sm select.form-control{height:30px;line-height:30px}
.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}
.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}
.input-lg{height:46px;line-height:1.3333333}
select.input-lg{height:46px;line-height:46px}
select[multiple].input-lg,textarea.input-lg{height:auto}
.form-group-lg .form-control{height:46px;line-height:1.3333333}
.form-group-lg select.form-control{height:46px;line-height:46px}
.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}
.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}
.has-feedback{position:relative}
.has-feedback .form-control{padding-right:42.5px}
.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}
.collapsing,.dropdown,.dropup{position:relative}
.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}
.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}
.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}
.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}
.has-success .input-group-addon{color:#3c763d;background-color:#dff0d8;border-color:#3c763d}
.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning .control-label,.has-warning .form-control-feedback,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.checkbox label,.has-warning.checkbox-inline label,.has-warning.radio label,.has-warning.radio-inline label{color:#8a6d3b}
.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}
.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}
.has-warning .input-group-addon{color:#8a6d3b;background-color:#fcf8e3;border-color:#8a6d3b}
.has-error .checkbox,.has-error .checkbox-inline,.has-error .control-label,.has-error .form-control-feedback,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.checkbox label,.has-error.checkbox-inline label,.has-error.radio label,.has-error.radio-inline label{color:#a94442}
.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}
.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}
.has-error .input-group-addon{color:#a94442;background-color:#f2dede;border-color:#a94442}
.has-feedback label~.form-control-feedback{top:25px}
.has-feedback label.sr-only~.form-control-feedback{top:0}
.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}
@media (min-width:768px){.form-inline .form-control-static,.form-inline .form-group{display:inline-block}
.form-inline .control-label,.form-inline .form-group{margin-bottom:0;vertical-align:middle}
.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}
.form-inline .input-group{display:inline-table;vertical-align:middle}
.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}
.form-inline .input-group>.form-control{width:100%}
.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}
.form-inline .checkbox label,.form-inline .radio label{padding-left:0}
.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}
.form-inline .has-feedback .form-control-feedback{top:0}
.form-horizontal .control-label{padding-top:7px;margin-bottom:0;text-align:right}
}
.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{padding-top:7px;margin-top:0;margin-bottom:0}
.form-horizontal .checkbox,.form-horizontal .radio{min-height:27px}
.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}
.form-horizontal .has-feedback .form-control-feedback{right:15px}
@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}
.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}
}
.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;border-radius:4px}
.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}
.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}
.btn.active,.btn:active{outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}
.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none;opacity:.65}
a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}
.btn-default{color:#333;background-color:#fff;border-color:#ccc}
.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}
.btn-default.active,.btn-default:active,.btn-default:hover,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}
.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.dropdown-toggle.btn-default.focus,.open>.dropdown-toggle.btn-default:focus,.open>.dropdown-toggle.btn-default:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}
.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}
.btn-default .badge{color:#fff;background-color:#333}
.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}
.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#286090;border-color:#122b40}
.btn-primary.active,.btn-primary:active,.btn-primary:hover,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}
.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.dropdown-toggle.btn-primary.focus,.open>.dropdown-toggle.btn-primary:focus,.open>.dropdown-toggle.btn-primary:hover{color:#fff;background-color:#204d74;border-color:#122b40}
.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#337ab7;border-color:#2e6da4}
.btn-primary .badge{color:#337ab7;background-color:#fff}
.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}
.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}
.btn-success.active,.btn-success:active,.btn-success:hover,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}
.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.dropdown-toggle.btn-success.focus,.open>.dropdown-toggle.btn-success:focus,.open>.dropdown-toggle.btn-success:hover{color:#fff;background-color:#398439;border-color:#255625}
.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{background-image:none}
.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}
.btn-success .badge{color:#5cb85c;background-color:#fff}
.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}
.btn-info.focus,.btn-info:focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}
.btn-info.active,.btn-info:active,.btn-info:hover,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}
.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.dropdown-toggle.btn-info.focus,.open>.dropdown-toggle.btn-info:focus,.open>.dropdown-toggle.btn-info:hover{color:#fff;background-color:#269abc;border-color:#1b6d85}
.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#5bc0de;border-color:#46b8da}
.btn-info .badge{color:#5bc0de;background-color:#fff}
.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}
.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#ec971f;border-color:#985f0d}
.btn-warning.active,.btn-warning:active,.btn-warning:hover,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}
.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.dropdown-toggle.btn-warning.focus,.open>.dropdown-toggle.btn-warning:focus,.open>.dropdown-toggle.btn-warning:hover{color:#fff;background-color:#d58512;border-color:#985f0d}
.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f0ad4e;border-color:#eea236}
.btn-warning .badge{color:#f0ad4e;background-color:#fff}
.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}
.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c9302c;border-color:#761c19}
.btn-danger.active,.btn-danger:active,.btn-danger:hover,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}
.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.dropdown-toggle.btn-danger.focus,.open>.dropdown-toggle.btn-danger:focus,.open>.dropdown-toggle.btn-danger:hover{color:#fff;background-color:#ac2925;border-color:#761c19}
.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#d9534f;border-color:#d43f3a}
.btn-danger .badge{color:#d9534f;background-color:#fff}
.btn-link{font-weight:400;color:#337ab7;border-radius:0}
.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}
.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}
.btn-link:focus,.btn-link:hover{color:#23527c;text-decoration:underline;background-color:transparent}
.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}
.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}
.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}
.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}
.btn-block{display:block;width:100%}
.btn-block+.btn-block{margin-top:5px}
input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}
.fade{opacity:0;-webkit-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}
.fade.in{opacity:1}
.collapse{display:none}
.collapse.in{display:block}
tr.collapse.in{display:table-row}
tbody.collapse.in{display:table-row-group}
.collapsing{height:0;overflow:hidden;-webkit-transition-timing-function:ease;-o-transition-timing-function:ease;transition-timing-function:ease;-webkit-transition-duration:.35s;-o-transition-duration:.35s;transition-duration:.35s;-webkit-transition-property:height,visibility;-o-transition-property:height,visibility;transition-property:height,visibility}
.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\9;border-right:4px solid transparent;border-left:4px solid transparent}
.dropdown-toggle:focus{outline:0}
.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175)}
.dropdown-menu-right,.dropdown-menu.pull-right{right:0;left:auto}
.dropdown-header,.dropdown-menu>li>a{display:block;padding:3px 20px;line-height:1.42857143;white-space:nowrap}
.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle,.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}
.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child,.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}
.btn-group-vertical>.btn:not(:first-child):not(:last-child),.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn,.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}
.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}
.dropdown-menu>li>a{clear:both;font-weight:400;color:#333}
.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{color:#262626;text-decoration:none;background-color:#f5f5f5}
.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}
.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}
.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;cursor:not-allowed;background-color:transparent;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}
.open>.dropdown-menu{display:block}
.open>a{outline:0}
.dropdown-menu-left{right:auto;left:0}
.dropdown-header{font-size:12px;color:#777}
.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}
.nav-justified>.dropdown .dropdown-menu,.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}
.pull-right>.dropdown-menu{right:0;left:auto}
.dropup .caret,.navbar-fixed-bottom .dropdown .caret{content:"";border-top:0;border-bottom:4px dashed;border-bottom:4px solid\9}
.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}
@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}
.navbar-right .dropdown-menu-left{right:auto;left:0}
}
.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}
.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}
.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}
.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}
.btn-toolbar{margin-left:-5px}
.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}
.btn .caret,.btn-group>.btn:first-child{margin-left:0}
.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}
.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}
.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}
.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}
.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}
.btn-lg .caret{border-width:5px 5px 0}
.dropup .btn-lg .caret{border-width:0 5px 5px}
.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}
.btn-group-vertical>.btn-group>.btn{float:none}
.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}
.btn-group-vertical>.btn:first-child:not(:last-child){border-radius:4px 4px 0 0}
.btn-group-vertical>.btn:last-child:not(:first-child){border-radius:0 0 4px 4px}
.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}
.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}
.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}
.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}
.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}
.btn-group-justified>.btn-group .btn{width:100%}
.btn-group-justified>.btn-group .dropdown-menu{left:auto}
[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}
.input-group{position:relative;display:table;border-collapse:separate}
.input-group[class*=col-]{float:none;padding-right:0;padding-left:0}
.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}
.input-group .form-control:focus{z-index:3}
.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}
select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}
select[multiple].input-group-lg>.form-control,select[multiple].input-group-lg>.input-group-addon,select[multiple].input-group-lg>.input-group-btn>.btn,textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}
.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}
select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}
select[multiple].input-group-sm>.form-control,select[multiple].input-group-sm>.input-group-addon,select[multiple].input-group-sm>.input-group-btn>.btn,textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}
.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}
.nav>li,.nav>li>a{display:block;position:relative}
.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}
.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}
.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}
.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}
.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}
.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}
.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}
.input-group-addon:first-child{border-right:0}
.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-top-left-radius:0;border-bottom-left-radius:0}
.input-group-addon:last-child{border-left:0}
.input-group-btn{position:relative;font-size:0;white-space:nowrap}
.input-group-btn>.btn{position:relative}
.input-group-btn>.btn+.btn{margin-left:-1px}
.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}
.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}
.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}
.nav{padding-left:0;margin-bottom:0;list-style:none}
.nav>li>a{padding:10px 15px}
.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}
.nav>li.disabled>a{color:#777}
.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;cursor:not-allowed;background-color:transparent}
.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#337ab7}
.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}
.nav>li>a>img{max-width:none}
.nav-tabs{border-bottom:1px solid #ddd}
.nav-tabs>li{float:left;margin-bottom:-1px}
.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}
.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}
.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}
.nav-tabs.nav-justified{width:100%;border-bottom:0}
.nav-tabs.nav-justified>li{float:none}
.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center;margin-right:0;border-radius:4px}
.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}
@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}
.nav-tabs.nav-justified>li>a{margin-bottom:0;border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}
.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}
}
.nav-pills>li{float:left}
.nav-justified>li,.nav-stacked>li{float:none}
.nav-pills>li>a{border-radius:4px}
.nav-pills>li+li{margin-left:2px}
.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#337ab7}
.nav-stacked>li+li{margin-top:2px;margin-left:0}
.nav-justified{width:100%}
.nav-justified>li>a{margin-bottom:5px;text-align:center}
.nav-tabs-justified{border-bottom:0}
.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}
.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border:1px solid #ddd}
@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}
.nav-justified>li>a{margin-bottom:0}
.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}
.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border-bottom-color:#fff}
}
.tab-content>.tab-pane{display:none}
.tab-content>.active{display:block}
.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}
.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}
.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}
.navbar-collapse.in{overflow-y:auto}
@media (min-width:768px){.navbar{border-radius:4px}
.navbar-header{float:left}
.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}
.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}
.navbar-collapse.in{overflow-y:visible}
.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-right:0;padding-left:0}
}
.embed-responsive,.modal,.modal-open,.progress{overflow:hidden}
@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}
}
.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}
.navbar-static-top{z-index:1000;border-width:0 0 1px}
.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}
.navbar-fixed-top{top:0;border-width:0 0 1px}
.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}
.navbar-brand{float:left;height:50px;padding:15px;font-size:18px;line-height:20px}
.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}
.navbar-brand>img{display:block}
@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}
.navbar-fixed-bottom,.navbar-fixed-top,.navbar-static-top{border-radius:0}
.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}
}
.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;border:1px solid transparent;border-radius:4px}
.navbar-toggle:focus{outline:0}
.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}
.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}
.navbar-nav{margin:7.5px -15px}
.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}
@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}
.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}
.navbar-nav .open .dropdown-menu>li>a{line-height:20px}
.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}
}
.progress-bar-striped,.progress-striped .progress-bar,.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
@media (min-width:768px){.navbar-toggle{display:none}
.navbar-nav{float:left;margin:0}
.navbar-nav>li{float:left}
.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}
}
.navbar-form{padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);margin:8px -15px}
@media (min-width:768px){.navbar-form .form-control-static,.navbar-form .form-group{display:inline-block}
.navbar-form .control-label,.navbar-form .form-group{margin-bottom:0;vertical-align:middle}
.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}
.navbar-form .input-group{display:inline-table;vertical-align:middle}
.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}
.navbar-form .input-group>.form-control{width:100%}
.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}
.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}
.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}
.navbar-form .has-feedback .form-control-feedback{top:0}
.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}
}
.breadcrumb>li,.pagination{display:inline-block}
.btn .badge,.btn .label{top:-1px;position:relative}
@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}
.navbar-form .form-group:last-child{margin-bottom:0}
}
.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-left-radius:0;border-top-right-radius:0}
.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-radius:4px 4px 0 0}
.navbar-btn{margin-top:8px;margin-bottom:8px}
.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}
.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}
.navbar-text{margin-top:15px;margin-bottom:15px}
@media (min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}
.navbar-left{float:left!important}
.navbar-right{float:right!important;margin-right:-15px}
.navbar-right~.navbar-right{margin-right:0}
}
.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}
.navbar-default .navbar-brand{color:#777}
.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}
.navbar-default .navbar-nav>li>a,.navbar-default .navbar-text{color:#777}
.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}
.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}
.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}
.navbar-default .navbar-toggle{border-color:#ddd}
.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}
.navbar-default .navbar-toggle .icon-bar{background-color:#888}
.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}
.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#e7e7e7}
@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}
.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}
.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}
.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}
}
.navbar-default .navbar-link{color:#777}
.navbar-default .navbar-link:hover{color:#333}
.navbar-default .btn-link{color:#777}
.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}
.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}
.navbar-inverse{background-color:#222;border-color:#080808}
.navbar-inverse .navbar-brand{color:#9d9d9d}
.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}
.navbar-inverse .navbar-nav>li>a,.navbar-inverse .navbar-text{color:#9d9d9d}
.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}
.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#080808}
.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}
.navbar-inverse .navbar-toggle{border-color:#333}
.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}
.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}
.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}
.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{color:#fff;background-color:#080808}
@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}
.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}
.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}
.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}
.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#080808}
.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}
}
.navbar-inverse .navbar-link{color:#9d9d9d}
.navbar-inverse .navbar-link:hover{color:#fff}
.navbar-inverse .btn-link{color:#9d9d9d}
.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}
.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}
.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}
.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:"/\00a0"}
.breadcrumb>.active{color:#777}
.pagination{padding-left:0;margin:20px 0;border-radius:4px}
.pager li,.pagination>li{display:inline}
.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;margin-left:-1px;line-height:1.42857143;color:#337ab7;text-decoration:none;background-color:#fff;border:1px solid #ddd}
.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-top-left-radius:4px;border-bottom-left-radius:4px}
.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}
.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#23527c;background-color:#eee;border-color:#ddd}
.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;cursor:default;background-color:#337ab7;border-color:#337ab7}
.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;cursor:not-allowed;background-color:#fff;border-color:#ddd}
.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}
.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-top-left-radius:6px;border-bottom-left-radius:6px}
.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}
.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}
.badge,.label{font-weight:700;line-height:1;white-space:nowrap;text-align:center}
.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-top-left-radius:3px;border-bottom-left-radius:3px}
.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}
.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}
.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}
.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}
.pager .next>a,.pager .next>span{float:right}
.pager .previous>a,.pager .previous>span{float:left}
.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;cursor:not-allowed;background-color:#fff}
a.badge:focus,a.badge:hover,a.label:focus,a.label:hover{color:#fff;cursor:pointer;text-decoration:none}
.label{display:inline;padding:.2em .6em .3em;font-size:75%;color:#fff;border-radius:.25em}
.label:empty{display:none}
.label-default{background-color:#777}
.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}
.label-primary{background-color:#337ab7}
.label-primary[href]:focus,.label-primary[href]:hover{background-color:#286090}
.label-success{background-color:#5cb85c}
.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}
.label-info{background-color:#5bc0de}
.label-info[href]:focus,.label-info[href]:hover{background-color:#31b0d5}
.label-warning{background-color:#f0ad4e}
.label-warning[href]:focus,.label-warning[href]:hover{background-color:#ec971f}
.label-danger{background-color:#d9534f}
.label-danger[href]:focus,.label-danger[href]:hover{background-color:#c9302c}
.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;color:#fff;vertical-align:middle;background-color:#777;border-radius:10px}
.badge:empty{display:none}
.media-object,.thumbnail{display:block}
.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}
.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#337ab7;background-color:#fff}
.jumbotron,.jumbotron .h1,.jumbotron h1{color:inherit}
.list-group-item>.badge{float:right}
.list-group-item>.badge+.badge{margin-right:5px}
.nav-pills>li>a>.badge{margin-left:3px}
.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;background-color:#eee}
.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}
.alert,.thumbnail{margin-bottom:20px}
.alert .alert-link,.close{font-weight:700}
.jumbotron>hr{border-top-color:#d5d5d5}
.container .jumbotron,.container-fluid .jumbotron{padding-right:15px;padding-left:15px;border-radius:6px}
.jumbotron .container{max-width:100%}
@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}
.container .jumbotron,.container-fluid .jumbotron{padding-right:60px;padding-left:60px}
.jumbotron .h1,.jumbotron h1{font-size:63px}
}
.thumbnail{padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;-o-transition:border .2s ease-in-out;transition:border .2s ease-in-out}
.thumbnail a>img,.thumbnail>img{margin-right:auto;margin-left:auto}
a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#337ab7}
.thumbnail .caption{padding:9px;color:#333}
.alert{padding:15px;border:1px solid transparent;border-radius:4px}
.alert h4{margin-top:0;color:inherit}
.alert>p,.alert>ul{margin-bottom:0}
.alert>p+p{margin-top:5px}
.alert-dismissable,.alert-dismissible{padding-right:35px}
.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}
.modal,.modal-backdrop{top:0;right:0;bottom:0;left:0}
.alert-success{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}
.alert-success hr{border-top-color:#c9e2b3}
.alert-success .alert-link{color:#2b542c}
.alert-info{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}
.alert-info hr{border-top-color:#a6e1ec}
.alert-info .alert-link{color:#245269}
.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}
.alert-warning hr{border-top-color:#f7e1b5}
.alert-warning .alert-link{color:#66512c}
.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}
.alert-danger hr{border-top-color:#e4b9c0}
.alert-danger .alert-link{color:#843534}
@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}
to{background-position:0 0}
}
@-o-keyframes progress-bar-stripes{from{background-position:40px 0}
to{background-position:0 0}
}
@keyframes progress-bar-stripes{from{background-position:40px 0}
to{background-position:0 0}
}
.progress{height:20px;margin-bottom:20px;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}
.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#337ab7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}
.progress-bar-striped,.progress-striped .progress-bar{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;background-size:40px 40px}
.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}
.progress-bar-success{background-color:#5cb85c}
.progress-striped .progress-bar-success{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
.progress-striped .progress-bar-info,.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
.progress-bar-info{background-color:#5bc0de}
.progress-striped .progress-bar-info{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
.progress-bar-warning{background-color:#f0ad4e}
.progress-striped .progress-bar-warning{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
.progress-bar-danger{background-color:#d9534f}
.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}
.media{margin-top:15px}
.media:first-child{margin-top:0}
.media,.media-body{overflow:hidden;zoom:1}
.media-body{width:10000px}
.media-object.img-thumbnail{max-width:none}
.media-right,.media>.pull-right{padding-left:10px}
.media-left,.media>.pull-left{padding-right:10px}
.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}
.media-middle{vertical-align:middle}
.media-bottom{vertical-align:bottom}
.media-heading{margin-top:0;margin-bottom:5px}
.media-list{padding-left:0;list-style:none}
.list-group{padding-left:0;margin-bottom:20px}
.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}
.list-group-item:first-child{border-top-left-radius:4px;border-top-right-radius:4px}
.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}
a.list-group-item,button.list-group-item{color:#555}
a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}
a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{color:#555;text-decoration:none;background-color:#f5f5f5}
button.list-group-item{width:100%;text-align:left}
.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{color:#777;cursor:not-allowed;background-color:#eee}
.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}
.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}
.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#337ab7;border-color:#337ab7}
.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}
.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#c7ddef}
.list-group-item-success{color:#3c763d;background-color:#dff0d8}
a.list-group-item-success,button.list-group-item-success{color:#3c763d}
a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}
a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}
a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}
.list-group-item-info{color:#31708f;background-color:#d9edf7}
a.list-group-item-info,button.list-group-item-info{color:#31708f}
a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}
a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}
a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}
.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}
a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}
a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}
a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}
a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}
.list-group-item-danger{color:#a94442;background-color:#f2dede}
a.list-group-item-danger,button.list-group-item-danger{color:#a94442}
a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}
a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}
a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}
.panel-heading>.dropdown .dropdown-toggle,.panel-title,.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}
.list-group-item-heading{margin-top:0;margin-bottom:5px}
.list-group-item-text{margin-bottom:0;line-height:1.3}
.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}
.panel-title,.panel>.list-group,.panel>.panel-collapse>.list-group,.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}
.panel-body{padding:15px}
.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}
.panel-title{margin-top:0;font-size:16px}
.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}
.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}
.panel-group .panel-heading,.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}
.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-left-radius:3px;border-top-right-radius:3px}
.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}
.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-left-radius:0;border-top-right-radius:0}
.list-group+.panel-footer,.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}
.panel>.panel-collapse>.table caption,.panel>.table caption,.panel>.table-responsive>.table caption{padding-right:15px;padding-left:15px}
.panel>.table-responsive:first-child>.table:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}
.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}
.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}
.panel>.table-responsive:last-child>.table:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}
.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}
.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}
.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}
.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}
.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}
.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}
.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}
.panel>.table-responsive{margin-bottom:0;border:0}
.panel-group{margin-bottom:20px}
.panel-group .panel{margin-bottom:0;border-radius:4px}
.panel-group .panel+.panel{margin-top:5px}
.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #ddd}
.panel-group .panel-footer{border-top:0}
.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}
.panel-default{border-color:#ddd}
.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}
.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}
.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}
.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}
.panel-primary{border-color:#337ab7}
.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}
.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}
.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}
.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}
.panel-success{border-color:#d6e9c6}
.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}
.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}
.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}
.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}
.panel-info{border-color:#bce8f1}
.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}
.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}
.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}
.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}
.panel-warning{border-color:#faebcc}
.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}
.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}
.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}
.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}
.panel-danger{border-color:#ebccd1}
.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}
.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}
.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}
.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}
.embed-responsive{position:relative;display:block;height:0;padding:0}
.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}
.embed-responsive-16by9{padding-bottom:56.25%}
.embed-responsive-4by3{padding-bottom:75%}
.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}
.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}
.well-lg{padding:24px;border-radius:6px}
.well-sm{padding:9px;border-radius:3px}
.close{float:right;font-size:21px;line-height:1;color:#000;text-shadow:0 1px 0 #fff;filter:alpha(opacity=20);opacity:.2}
.popover,.tooltip{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-style:normal;font-weight:400;line-height:1.42857143;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;line-break:auto;text-decoration:none}
.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;filter:alpha(opacity=50);opacity:.5}
button.close{-webkit-appearance:none;padding:0;cursor:pointer;background:0 0;border:0}
.modal{position:fixed;z-index:1050;display:none;-webkit-overflow-scrolling:touch;outline:0}
.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out;-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);-o-transform:translate(0,-25%);transform:translate(0,-25%)}
.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);-o-transform:translate(0,0);transform:translate(0,0)}
.modal-open .modal{overflow-x:hidden;overflow-y:auto}
.modal-dialog{position:relative;width:auto;margin:10px}
.modal-content{position:relative;background-color:#fff;background-clip:padding-box;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5)}
.modal-backdrop{position:fixed;z-index:1040;background-color:#000}
.modal-backdrop.fade{filter:alpha(opacity=0);opacity:0}
.modal-backdrop.in{filter:alpha(opacity=50);opacity:.5}
.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}
.modal-header .close{margin-top:-2px}
.modal-title{margin:0;line-height:1.42857143}
.modal-body{position:relative;padding:15px}
.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}
.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}
.modal-footer .btn-group .btn+.btn{margin-left:-1px}
.modal-footer .btn-block+.btn-block{margin-left:0}
.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}
@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}
.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}
.modal-sm{width:300px}
}
@media (min-width:992px){.modal-lg{width:900px}
}
.tooltip{position:absolute;z-index:1070;display:block;font-size:12px;text-align:left;text-align:start;filter:alpha(opacity=0);opacity:0}
.tooltip.in{filter:alpha(opacity=90);opacity:.9}
.tooltip.top{padding:5px 0;margin-top:-3px}
.tooltip.right{padding:0 5px;margin-left:3px}
.tooltip.bottom{padding:5px 0;margin-top:3px}
.tooltip.left{padding:0 5px;margin-left:-3px}
.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}
.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}
.tooltip.top .tooltip-arrow,.tooltip.top-left .tooltip-arrow,.tooltip.top-right .tooltip-arrow{bottom:0;border-width:5px 5px 0;border-top-color:#000}
.tooltip.top .tooltip-arrow{left:50%;margin-left:-5px}
.tooltip.top-left .tooltip-arrow{right:5px;margin-bottom:-5px}
.tooltip.top-right .tooltip-arrow{left:5px;margin-bottom:-5px}
.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}
.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}
.tooltip.bottom .tooltip-arrow,.tooltip.bottom-left .tooltip-arrow,.tooltip.bottom-right .tooltip-arrow{border-width:0 5px 5px;border-bottom-color:#000;top:0}
.tooltip.bottom .tooltip-arrow{left:50%;margin-left:-5px}
.tooltip.bottom-left .tooltip-arrow{right:5px;margin-top:-5px}
.tooltip.bottom-right .tooltip-arrow{left:5px;margin-top:-5px}
.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-size:14px;text-align:left;text-align:start;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2)}
.carousel-caption,.carousel-control{color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}
.popover.top{margin-top:-10px}
.popover.right{margin-left:10px}
.popover.bottom{margin-top:10px}
.popover.left{margin-left:-10px}
.popover-title{padding:8px 14px;margin:0;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}
.popover-content{padding:9px 14px}
.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}
.carousel,.carousel-inner{position:relative}
.popover>.arrow{border-width:11px}
.popover>.arrow:after{content:"";border-width:10px}
.popover.top>.arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,.25);border-bottom-width:0}
.popover.top>.arrow:after{bottom:1px;margin-left:-10px;content:" ";border-top-color:#fff;border-bottom-width:0}
.popover.left>.arrow:after,.popover.right>.arrow:after{bottom:-10px;content:" "}
.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,.25);border-left-width:0}
.popover.right>.arrow:after{left:1px;border-right-color:#fff;border-left-width:0}
.popover.bottom>.arrow{top:-11px;left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25)}
.popover.bottom>.arrow:after{top:1px;margin-left:-10px;content:" ";border-top-width:0;border-bottom-color:#fff}
.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}
.popover.left>.arrow:after{right:1px;border-right-width:0;border-left-color:#fff}
.carousel-inner{width:100%;overflow:hidden}
.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}
.carousel-inner>.item>a>img,.carousel-inner>.item>img{line-height:1}
@media all and (transform-3d),(-webkit-transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;-o-transition:-o-transform .6s ease-in-out;transition:transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}
.carousel-inner>.item.active.right,.carousel-inner>.item.next{left:0;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}
.carousel-inner>.item.active.left,.carousel-inner>.item.prev{left:0;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}
.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{left:0;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}
}
.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}
.carousel-inner>.active{left:0}
.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}
.carousel-inner>.next{left:100%}
.carousel-inner>.prev{left:-100%}
.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}
.carousel-inner>.active.left{left:-100%}
.carousel-inner>.active.right{left:100%}
.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;background-color:rgba(0,0,0,0);filter:alpha(opacity=50);opacity:.5}
.carousel-control.left{background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(to right,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);background-repeat:repeat-x}
.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(to right,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);background-repeat:repeat-x}
.carousel-control:focus,.carousel-control:hover{color:#fff;text-decoration:none;filter:alpha(opacity=90);outline:0;opacity:.9}
.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;z-index:5;display:inline-block;margin-top:-10px}
.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}
.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}
.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;font-family:serif;line-height:1}
.carousel-control .icon-prev:before{content:'\2039'}
.carousel-control .icon-next:before{content:'\203a'}
.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}
.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}
.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}
.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px}
.carousel-caption .btn,.text-hide{text-shadow:none}
@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}
.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}
.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}
.carousel-caption{right:20%;left:20%;padding-bottom:30px}
.carousel-indicators{bottom:20px}
}
.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before,.btn-toolbar:after,.btn-toolbar:before,.clearfix:after,.clearfix:before,.container-fluid:after,.container-fluid:before,.container:after,.container:before,.dl-horizontal dd:after,.dl-horizontal dd:before,.form-horizontal .form-group:after,.form-horizontal .form-group:before,.modal-footer:after,.modal-footer:before,.modal-header:after,.modal-header:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.navbar-header:after,.navbar-header:before,.navbar:after,.navbar:before,.pager:after,.pager:before,.panel-body:after,.panel-body:before,.row:after,.row:before{display:table;content:" "}
.btn-group-vertical>.btn-group:after,.btn-toolbar:after,.clearfix:after,.container-fluid:after,.container:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.modal-footer:after,.modal-header:after,.nav:after,.navbar-collapse:after,.navbar-header:after,.navbar:after,.pager:after,.panel-body:after,.row:after{clear:both}
.center-block{display:block;margin-right:auto;margin-left:auto}
.pull-right{float:right!important}
.pull-left{float:left!important}
.hide{display:none!important}
.show{display:block!important}
.hidden,.visible-lg,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}
.invisible{visibility:hidden}
.text-hide{font:0/0 a;color:transparent;background-color:transparent;border:0}
.affix{position:fixed}
@-ms-viewport{width:device-width}
@media (max-width:767px){.visible-xs{display:block!important}
table.visible-xs{display:table!important}
tr.visible-xs{display:table-row!important}
td.visible-xs,th.visible-xs{display:table-cell!important}
.visible-xs-block{display:block!important}
.visible-xs-inline{display:inline!important}
.visible-xs-inline-block{display:inline-block!important}
}
@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}
table.visible-sm{display:table!important}
tr.visible-sm{display:table-row!important}
td.visible-sm,th.visible-sm{display:table-cell!important}
.visible-sm-block{display:block!important}
.visible-sm-inline{display:inline!important}
.visible-sm-inline-block{display:inline-block!important}
}
@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}
table.visible-md{display:table!important}
tr.visible-md{display:table-row!important}
td.visible-md,th.visible-md{display:table-cell!important}
.visible-md-block{display:block!important}
.visible-md-inline{display:inline!important}
.visible-md-inline-block{display:inline-block!important}
}
@media (min-width:1200px){.visible-lg{display:block!important}
table.visible-lg{display:table!important}
tr.visible-lg{display:table-row!important}
td.visible-lg,th.visible-lg{display:table-cell!important}
.visible-lg-block{display:block!important}
.visible-lg-inline{display:inline!important}
.visible-lg-inline-block{display:inline-block!important}
.hidden-lg{display:none!important}
}
@media (max-width:767px){.hidden-xs{display:none!important}
}
@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}
}
@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}
}
.visible-print{display:none!important}
@media print{.visible-print{display:block!important}
table.visible-print{display:table!important}
tr.visible-print{display:table-row!important}
td.visible-print,th.visible-print{display:table-cell!important}
}
.visible-print-block{display:none!important}
@media print{.visible-print-block{display:block!important}
}
.visible-print-inline{display:none!important}
@media print{.visible-print-inline{display:inline!important}
}
.visible-print-inline-block{display:none!important}
@media print{.visible-print-inline-block{display:inline-block!important}
.hidden-print{display:none!important}
}
.hljs{display:block;background:#fff;padding:.5em;color:#333;overflow-x:auto}
.hljs-comment,.hljs-meta{color:#969896}
.hljs-emphasis,.hljs-quote,.hljs-string,.hljs-strong,.hljs-template-variable,.hljs-variable{color:#df5000}
.hljs-keyword,.hljs-selector-tag,.hljs-type{color:#a71d5d}
.hljs-attribute,.hljs-bullet,.hljs-literal,.hljs-symbol{color:#0086b3}
.hljs-name,.hljs-section{color:#63a35c}
.hljs-tag{color:#333}
.hljs-attr,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-selector-pseudo,.hljs-title{color:#795da3}
.hljs-addition{color:#55a532;background-color:#eaffea}
.hljs-deletion{color:#bd2c00;background-color:#ffecec}
.hljs-link{text-decoration:underline}


================================================
File: ERC/docs/styles/docfx.vendor.js
================================================
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
//# sourceMappingURL=jquery.min.map
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){if(a(b.target).is(this))return b.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.7",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a("#"===f?[]:f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.7",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c).prop(c,!0)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c).prop(c,!1))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target).closest(".btn");b.call(d,"toggle"),a(c.target).is('input[type="radio"], input[type="checkbox"]')||(c.preventDefault(),d.is("input,button")?d.trigger("focus"):d.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(a>this.$items.length-1||a<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){if(!this.sliding)return this.slide("next")},c.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.7",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.7",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){document===a.target||this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);if(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),!c.isInStateTrue())return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);if(this.$element.trigger(g),!g.isDefaultPrevented())return f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=window.SVGElement&&c instanceof window.SVGElement,g=d?{top:0,left:0}:f?null:b.offset(),h={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},i=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,h,i,g)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null,a.$element=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.7",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.7",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){
this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.7",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return e<c&&"top";if("bottom"==this.affixed)return null!=c?!(e+this.unpin<=f.top)&&"bottom":!(e+g<=a-d)&&"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&e<=c?"top":null!=d&&i+j>=a-d&&"bottom"},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/*! highlight.js v9.12.0 | BSD3 License | git.io/hljslicense */
!function(e){var t="object"==typeof window&&window||"object"==typeof self&&self;"undefined"!=typeof exports?e(exports):t&&(t.hljs=e({}),"function"==typeof define&&define.amd&&define([],function(){return t.hljs}))}(function(e){function t(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function r(e){return e.nodeName.toLowerCase()}function a(e,t){var r=e&&e.exec(t);return r&&0===r.index}function i(e){return T.test(e)}function n(e){var t,r,a,n,o=e.className+" ";if(o+=e.parentNode?e.parentNode.className:"",r=w.exec(o))return S(r[1])?r[1]:"no-highlight";for(o=o.split(/\s+/),t=0,a=o.length;a>t;t++)if(n=o[t],i(n)||S(n))return n}function o(e){var t,r={},a=Array.prototype.slice.call(arguments,1);for(t in e)r[t]=e[t];return a.forEach(function(e){for(t in e)r[t]=e[t]}),r}function s(e){var t=[];return function a(e,i){for(var n=e.firstChild;n;n=n.nextSibling)3===n.nodeType?i+=n.nodeValue.length:1===n.nodeType&&(t.push({event:"start",offset:i,node:n}),i=a(n,i),r(n).match(/br|hr|img|input/)||t.push({event:"stop",offset:i,node:n}));return i}(e,0),t}function l(e,a,i){function n(){return e.length&&a.length?e[0].offset!==a[0].offset?e[0].offset<a[0].offset?e:a:"start"===a[0].event?e:a:e.length?e:a}function o(e){function a(e){return" "+e.nodeName+'="'+t(e.value).replace('"',"&quot;")+'"'}d+="<"+r(e)+C.map.call(e.attributes,a).join("")+">"}function s(e){d+="</"+r(e)+">"}function l(e){("start"===e.event?o:s)(e.node)}for(var c=0,d="",p=[];e.length||a.length;){var m=n();if(d+=t(i.substring(c,m[0].offset)),c=m[0].offset,m===e){p.reverse().forEach(s);do l(m.splice(0,1)[0]),m=n();while(m===e&&m.length&&m[0].offset===c);p.reverse().forEach(o)}else"start"===m[0].event?p.push(m[0].node):p.pop(),l(m.splice(0,1)[0])}return d+t(i.substr(c))}function c(e){return e.v&&!e.cached_variants&&(e.cached_variants=e.v.map(function(t){return o(e,{v:null},t)})),e.cached_variants||e.eW&&[o(e)]||[e]}function d(e){function t(e){return e&&e.source||e}function r(r,a){return new RegExp(t(r),"m"+(e.cI?"i":"")+(a?"g":""))}function a(i,n){if(!i.compiled){if(i.compiled=!0,i.k=i.k||i.bK,i.k){var o={},s=function(t,r){e.cI&&(r=r.toLowerCase()),r.split(" ").forEach(function(e){var r=e.split("|");o[r[0]]=[t,r[1]?Number(r[1]):1]})};"string"==typeof i.k?s("keyword",i.k):x(i.k).forEach(function(e){s(e,i.k[e])}),i.k=o}i.lR=r(i.l||/\w+/,!0),n&&(i.bK&&(i.b="\\b("+i.bK.split(" ").join("|")+")\\b"),i.b||(i.b=/\B|\b/),i.bR=r(i.b),i.e||i.eW||(i.e=/\B|\b/),i.e&&(i.eR=r(i.e)),i.tE=t(i.e)||"",i.eW&&n.tE&&(i.tE+=(i.e?"|":"")+n.tE)),i.i&&(i.iR=r(i.i)),null==i.r&&(i.r=1),i.c||(i.c=[]),i.c=Array.prototype.concat.apply([],i.c.map(function(e){return c("self"===e?i:e)})),i.c.forEach(function(e){a(e,i)}),i.starts&&a(i.starts,n);var l=i.c.map(function(e){return e.bK?"\\.?("+e.b+")\\.?":e.b}).concat([i.tE,i.i]).map(t).filter(Boolean);i.t=l.length?r(l.join("|"),!0):{exec:function(){return null}}}}a(e)}function p(e,r,i,n){function o(e,t){var r,i;for(r=0,i=t.c.length;i>r;r++)if(a(t.c[r].bR,e))return t.c[r]}function s(e,t){if(a(e.eR,t)){for(;e.endsParent&&e.parent;)e=e.parent;return e}return e.eW?s(e.parent,t):void 0}function l(e,t){return!i&&a(t.iR,e)}function c(e,t){var r=v.cI?t[0].toLowerCase():t[0];return e.k.hasOwnProperty(r)&&e.k[r]}function u(e,t,r,a){var i=a?"":D.classPrefix,n='<span class="'+i,o=r?"":M;return n+=e+'">',n+t+o}function b(){var e,r,a,i;if(!C.k)return t(T);for(i="",r=0,C.lR.lastIndex=0,a=C.lR.exec(T);a;)i+=t(T.substring(r,a.index)),e=c(C,a),e?(w+=e[1],i+=u(e[0],t(a[0]))):i+=t(a[0]),r=C.lR.lastIndex,a=C.lR.exec(T);return i+t(T.substr(r))}function g(){var e="string"==typeof C.sL;if(e&&!E[C.sL])return t(T);var r=e?p(C.sL,T,!0,x[C.sL]):m(T,C.sL.length?C.sL:void 0);return C.r>0&&(w+=r.r),e&&(x[C.sL]=r.top),u(r.language,r.value,!1,!0)}function f(){N+=null!=C.sL?g():b(),T=""}function _(e){N+=e.cN?u(e.cN,"",!0):"",C=Object.create(e,{parent:{value:C}})}function h(e,t){if(T+=e,null==t)return f(),0;var r=o(t,C);if(r)return r.skip?T+=t:(r.eB&&(T+=t),f(),r.rB||r.eB||(T=t)),_(r,t),r.rB?0:t.length;var a=s(C,t);if(a){var i=C;i.skip?T+=t:(i.rE||i.eE||(T+=t),f(),i.eE&&(T=t));do C.cN&&(N+=M),C.skip||(w+=C.r),C=C.parent;while(C!==a.parent);return a.starts&&_(a.starts,""),i.rE?0:t.length}if(l(t,C))throw new Error('Illegal lexeme "'+t+'" for mode "'+(C.cN||"<unnamed>")+'"');return T+=t,t.length||1}var v=S(e);if(!v)throw new Error('Unknown language: "'+e+'"');d(v);var y,C=n||v,x={},N="";for(y=C;y!==v;y=y.parent)y.cN&&(N=u(y.cN,"",!0)+N);var T="",w=0;try{for(var A,I,k=0;;){if(C.t.lastIndex=k,A=C.t.exec(r),!A)break;I=h(r.substring(k,A.index),A[0]),k=A.index+I}for(h(r.substr(k)),y=C;y.parent;y=y.parent)y.cN&&(N+=M);return{r:w,value:N,language:e,top:C}}catch(R){if(R.message&&-1!==R.message.indexOf("Illegal"))return{r:0,value:t(r)};throw R}}function m(e,r){r=r||D.languages||x(E);var a={r:0,value:t(e)},i=a;return r.filter(S).forEach(function(t){var r=p(t,e,!1);r.language=t,r.r>i.r&&(i=r),r.r>a.r&&(i=a,a=r)}),i.language&&(a.second_best=i),a}function u(e){return D.tabReplace||D.useBR?e.replace(A,function(e,t){return D.useBR&&"\n"===e?"<br>":D.tabReplace?t.replace(/\t/g,D.tabReplace):""}):e}function b(e,t,r){var a=t?N[t]:r,i=[e.trim()];return e.match(/\bhljs\b/)||i.push("hljs"),-1===e.indexOf(a)&&i.push(a),i.join(" ").trim()}function g(e){var t,r,a,o,c,d=n(e);i(d)||(D.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div"),t.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):t=e,c=t.textContent,a=d?p(d,c,!0):m(c),r=s(t),r.length&&(o=document.createElementNS("http://www.w3.org/1999/xhtml","div"),o.innerHTML=a.value,a.value=l(r,s(o),c)),a.value=u(a.value),e.innerHTML=a.value,e.className=b(e.className,d,a.language),e.result={language:a.language,re:a.r},a.second_best&&(e.second_best={language:a.second_best.language,re:a.second_best.r}))}function f(e){D=o(D,e)}function _(){if(!_.called){_.called=!0;var e=document.querySelectorAll("pre code");C.forEach.call(e,g)}}function h(){addEventListener("DOMContentLoaded",_,!1),addEventListener("load",_,!1)}function v(t,r){var a=E[t]=r(e);a.aliases&&a.aliases.forEach(function(e){N[e]=t})}function y(){return x(E)}function S(e){return e=(e||"").toLowerCase(),E[e]||E[N[e]]}var C=[],x=Object.keys,E={},N={},T=/^(no-?highlight|plain|text)$/i,w=/\blang(?:uage)?-([\w-]+)\b/i,A=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,M="</span>",D={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};return e.highlight=p,e.highlightAuto=m,e.fixMarkup=u,e.highlightBlock=g,e.configure=f,e.initHighlighting=_,e.initHighlightingOnLoad=h,e.registerLanguage=v,e.listLanguages=y,e.getLanguage=S,e.inherit=o,e.IR="[a-zA-Z]\\w*",e.UIR="[a-zA-Z_]\\w*",e.NR="\\b\\d+(\\.\\d+)?",e.CNR="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BNR="\\b(0b[01]+)",e.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BE={b:"\\\\[\\s\\S]",r:0},e.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[e.BE]},e.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[e.BE]},e.PWM={b:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.C=function(t,r,a){var i=e.inherit({cN:"comment",b:t,e:r,c:[]},a||{});return i.c.push(e.PWM),i.c.push({cN:"doctag",b:"(?:TODO|FIXME|NOTE|BUG|XXX):",r:0}),i},e.CLCM=e.C("//","$"),e.CBCM=e.C("/\\*","\\*/"),e.HCM=e.C("#","$"),e.NM={cN:"number",b:e.NR,r:0},e.CNM={cN:"number",b:e.CNR,r:0},e.BNM={cN:"number",b:e.BNR,r:0},e.CSSNM={cN:"number",b:e.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0},e.RM={cN:"regexp",b:/\//,e:/\/[gimuy]*/,i:/\n/,c:[e.BE,{b:/\[/,e:/\]/,r:0,c:[e.BE]}]},e.TM={cN:"title",b:e.IR,r:0},e.UTM={cN:"title",b:e.UIR,r:0},e.METHOD_GUARD={b:"\\.\\s*"+e.UIR,r:0},e.registerLanguage("1c",function(e){var t="[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+",r="далее ",a="возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ",i=r+a,n="загрузитьизфайла ",o="вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ",s=n+o,l="разделительстраниц разделительстрок символтабуляции ",c="ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ",d="acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ",p="wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ",m=l+c+d+p,u="webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ",b="автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы ",g="виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ",f="авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ",_="использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ",h="отображениевремениэлементовпланировщика ",v="типфайлаформатированногодокумента ",y="обходрезультатазапроса типзаписизапроса ",S="видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ",C="доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ",x="типизмеренияпостроителязапроса ",E="видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ",N="wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson ",T="видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных ",w="важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения ",A="режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ",M="расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии ",D="кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip ",I="звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ",k="направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ",R="httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений ",L="важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты",P=u+b+g+f+_+h+v+y+S+C+x+E+N+T+w+A+M+D+I+k+R+L,O="comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ",F="comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ",B=O+F,G="null истина ложь неопределено",q=e.inherit(e.NM),U={
cN:"string",b:'"|\\|',e:'"|$',c:[{b:'""'}]},z={b:"'",e:"'",eB:!0,eE:!0,c:[{cN:"number",b:"\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"}]},$=e.inherit(e.CLCM),V={cN:"meta",l:t,b:"#|&",e:"$",k:{"meta-keyword":i+s},c:[$]},W={cN:"symbol",b:"~",e:";|:",eE:!0},H={cN:"function",l:t,v:[{b:"процедура|функция",e:"\\)",k:"процедура функция"},{b:"конецпроцедуры|конецфункции",k:"конецпроцедуры конецфункции"}],c:[{b:"\\(",e:"\\)",endsParent:!0,c:[{cN:"params",l:t,b:t,e:",",eE:!0,eW:!0,k:{keyword:"знач",literal:G},c:[q,U,z]},$]},e.inherit(e.TM,{b:t})]};return{cI:!0,l:t,k:{keyword:i,built_in:m,"class":P,type:B,literal:G},c:[V,H,$,W,q,U,z]}}),e.registerLanguage("abnf",function(e){var t={ruleDeclaration:"^[a-zA-Z][a-zA-Z0-9-]*",unexpectedChars:"[!@#$^&',?+~`|:]"},r=["ALPHA","BIT","CHAR","CR","CRLF","CTL","DIGIT","DQUOTE","HEXDIG","HTAB","LF","LWSP","OCTET","SP","VCHAR","WSP"],a=e.C(";","$"),i={cN:"symbol",b:/%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/},n={cN:"symbol",b:/%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/},o={cN:"symbol",b:/%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/},s={cN:"symbol",b:/%[si]/},l={b:t.ruleDeclaration+"\\s*=",rB:!0,e:/=/,r:0,c:[{cN:"attribute",b:t.ruleDeclaration}]};return{i:t.unexpectedChars,k:r.join(" "),c:[l,a,i,n,o,s,e.QSM,e.NM]}}),e.registerLanguage("accesslog",function(e){return{c:[{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+\\b",r:0},{cN:"string",b:'"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)',e:'"',k:"GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE",i:"\\n",r:10},{cN:"string",b:/\[/,e:/\]/,i:"\\n"},{cN:"string",b:'"',e:'"',i:"\\n"}]}}),e.registerLanguage("actionscript",function(e){var t="[a-zA-Z_$][a-zA-Z0-9_$]*",r="([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)",a={cN:"rest_arg",b:"[.]{3}",e:t,r:10};return{aliases:["as"],k:{keyword:"as break case catch class const continue default delete do dynamic each else extends final finally for function get if implements import in include instanceof interface internal is namespace native new override package private protected public return set static super switch this throw try typeof use var void while with",literal:"true false null undefined"},c:[e.ASM,e.QSM,e.CLCM,e.CBCM,e.CNM,{cN:"class",bK:"package",e:"{",c:[e.TM]},{cN:"class",bK:"class interface",e:"{",eE:!0,c:[{bK:"extends implements"},e.TM]},{cN:"meta",bK:"import include",e:";",k:{"meta-keyword":"import include"}},{cN:"function",bK:"function",e:"[{;]",eE:!0,i:"\\S",c:[e.TM,{cN:"params",b:"\\(",e:"\\)",c:[e.ASM,e.QSM,e.CLCM,e.CBCM,a]},{b:":\\s*"+r}]},e.METHOD_GUARD],i:/#/}}),e.registerLanguage("ada",function(e){var t="\\d(_|\\d)*",r="[eE][-+]?"+t,a=t+"(\\."+t+")?("+r+")?",i="\\w+",n=t+"#"+i+"(\\."+i+")?#("+r+")?",o="\\b("+n+"|"+a+")",s="[A-Za-z](_?[A-Za-z0-9.])*",l="[]{}%#'\"",c=e.C("--","$"),d={b:"\\s+:\\s+",e:"\\s*(:=|;|\\)|=>|$)",i:l,c:[{bK:"loop for declare others",endsParent:!0},{cN:"keyword",bK:"not null constant access function procedure in out aliased exception"},{cN:"type",b:s,endsParent:!0,r:0}]};return{cI:!0,k:{keyword:"abort else new return abs elsif not reverse abstract end accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor",literal:"True False"},c:[c,{cN:"string",b:/"/,e:/"/,c:[{b:/""/,r:0}]},{cN:"string",b:/'.'/},{cN:"number",b:o,r:0},{cN:"symbol",b:"'"+s},{cN:"title",b:"(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",e:"(is|$)",k:"package body",eB:!0,eE:!0,i:l},{b:"(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",e:"(\\bis|\\bwith|\\brenames|\\)\\s*;)",k:"overriding function procedure with is renames return",rB:!0,c:[c,{cN:"title",b:"(\\bwith\\s+)?\\b(function|procedure)\\s+",e:"(\\(|\\s+|$)",eB:!0,eE:!0,i:l},d,{cN:"type",b:"\\breturn\\s+",e:"(\\s+|;|$)",k:"return",eB:!0,eE:!0,endsParent:!0,i:l}]},{cN:"type",b:"\\b(sub)?type\\s+",e:"\\s+",k:"type",eB:!0,i:l},d]}}),e.registerLanguage("apache",function(e){var t={cN:"number",b:"[\\$%]\\d+"};return{aliases:["apacheconf"],cI:!0,c:[e.HCM,{cN:"section",b:"</?",e:">"},{cN:"attribute",b:/\w+/,r:0,k:{nomarkup:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{e:/$/,r:0,k:{literal:"on off all"},c:[{cN:"meta",b:"\\s\\[",e:"\\]$"},{cN:"variable",b:"[\\$%]\\{",e:"\\}",c:["self",t]},t,e.QSM]}}],i:/\S/}}),e.registerLanguage("applescript",function(e){var t=e.inherit(e.QSM,{i:""}),r={cN:"params",b:"\\(",e:"\\)",c:["self",e.CNM,t]},a=e.C("--","$"),i=e.C("\\(\\*","\\*\\)",{c:["self",a]}),n=[a,i,e.HCM];return{aliases:["osascript"],k:{keyword:"about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",literal:"AppleScript false linefeed return pi quote result space tab true",built_in:"alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name paragraph paragraphs rest reverse running time version weekday word words year"},c:[t,e.CNM,{cN:"built_in",b:"\\b(clipboard info|the clipboard|info for|list (disks|folder)|mount volume|path to|(close|open for) access|(get|set) eof|current date|do shell script|get volume settings|random number|set volume|system attribute|system info|time to GMT|(load|run|store) script|scripting components|ASCII (character|number)|localized string|choose (application|color|file|file name|folder|from list|remote application|URL)|display (alert|dialog))\\b|^\\s*return\\b"},{cN:"literal",b:"\\b(text item delimiters|current application|missing value)\\b"},{cN:"keyword",b:"\\b(apart from|aside from|instead of|out of|greater than|isn't|(doesn't|does not) (equal|come before|come after|contain)|(greater|less) than( or equal)?|(starts?|ends|begins?) with|contained by|comes (before|after)|a (ref|reference)|POSIX file|POSIX path|(date|time) string|quoted form)\\b"},{bK:"on",i:"[${=;\\n]",c:[e.UTM,r]}].concat(n),i:"//|->|=>|\\[\\["}}),e.registerLanguage("cpp",function(e){var t={cN:"keyword",b:"\\b[a-z\\d_]*_t\\b"},r={cN:"string",v:[{b:'(u8?|U)?L?"',e:'"',i:"\\n",c:[e.BE]},{b:'(u8?|U)?R"',e:'"',c:[e.BE]},{b:"'\\\\?.",e:"'",i:"."}]},a={cN:"number",v:[{b:"\\b(0b[01']+)"},{b:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{b:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],r:0},i={cN:"meta",b:/#\s*[a-z]+\b/,e:/$/,k:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},c:[{b:/\\\n/,r:0},e.inherit(r,{cN:"meta-string"}),{cN:"meta-string",b:/<[^\n>]*>/,e:/$/,i:"\\n"},e.CLCM,e.CBCM]},n=e.IR+"\\s*\\(",o={keyword:"int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not",built_in:"std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",literal:"true false nullptr NULL"},s=[t,e.CLCM,e.CBCM,a,r];return{aliases:["c","cc","h","c++","h++","hpp"],k:o,i:"</",c:s.concat([i,{b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:o,c:["self",t]},{b:e.IR+"::",k:o},{v:[{b:/=/,e:/;/},{b:/\(/,e:/\)/},{bK:"new throw return else",e:/;/}],k:o,c:s.concat([{b:/\(/,e:/\)/,k:o,c:s.concat(["self"]),r:0}]),r:0},{cN:"function",b:"("+e.IR+"[\\*&\\s]+)+"+n,rB:!0,e:/[{;=]/,eE:!0,k:o,i:/[^\w\s\*&]/,c:[{b:n,rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:o,r:0,c:[e.CLCM,e.CBCM,r,a,t]},e.CLCM,e.CBCM,i]},{cN:"class",bK:"class struct",e:/[{;:]/,c:[{b:/</,e:/>/,c:["self"]},e.TM]}]),exports:{preprocessor:i,strings:r,k:o}}}),e.registerLanguage("arduino",function(e){var t=e.getLanguage("cpp").exports;return{k:{keyword:"boolean byte word string String array "+t.k.keyword,built_in:"setup loop while catch for if do goto try switch case else default break continue return KeyboardController MouseController SoftwareSerial EthernetServer EthernetClient LiquidCrystal RobotControl GSMVoiceCall EthernetUDP EsploraTFT HttpClient RobotMotor WiFiClient GSMScanner FileSystem Scheduler GSMServer YunClient YunServer IPAddress GSMClient GSMModem Keyboard Ethernet Console GSMBand Esplora Stepper Process WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage Client Server GSMPIN FileIO Bridge Serial EEPROM Stream Mouse Audio Servo File Task GPRS WiFi Wire TFT GSM SPI SD runShellCommandAsynchronously analogWriteResolution retrieveCallingNumber printFirmwareVersion analogReadResolution sendDigitalPortPair noListenOnLocalhost readJoystickButton setFirmwareVersion readJoystickSwitch scrollDisplayRight getVoiceCallStatus scrollDisplayLeft writeMicroseconds delayMicroseconds beginTransmission getSignalStrength runAsynchronously getAsynchronously listenOnLocalhost getCurrentCarrier readAccelerometer messageAvailable sendDigitalPorts lineFollowConfig countryNameWrite runShellCommand readStringUntil rewindDirectory readTemperature setClockDivider readLightSensor endTransmission analogReference detachInterrupt countryNameRead attachInterrupt encryptionType readBytesUntil robotNameWrite readMicrophone robotNameRead cityNameWrite userNameWrite readJoystickY readJoystickX mouseReleased openNextFile scanNetworks noInterrupts digitalWrite beginSpeaker mousePressed isActionDone mouseDragged displayLogos noAutoscroll addParameter remoteNumber getModifiers keyboardRead userNameRead waitContinue processInput parseCommand printVersion readNetworks writeMessage blinkVersion cityNameRead readMessage setDataMode parsePacket isListening setBitOrder beginPacket isDirectory motorsWrite drawCompass digitalRead clearScreen serialEvent rightToLeft setTextSize leftToRight requestFrom keyReleased compassRead analogWrite interrupts WiFiServer disconnect playMelody parseFloat autoscroll getPINUsed setPINUsed setTimeout sendAnalog readSlider analogRead beginWrite createChar motorsStop keyPressed tempoWrite readButton subnetMask debugPrint macAddress writeGreen randomSeed attachGPRS readString sendString remotePort releaseAll mouseMoved background getXChange getYChange answerCall getResult voiceCall endPacket constrain getSocket writeJSON getButton available connected findUntil readBytes exitValue readGreen writeBlue startLoop IPAddress isPressed sendSysex pauseMode gatewayIP setCursor getOemKey tuneWrite noDisplay loadImage switchPIN onRequest onReceive changePIN playFile noBuffer parseInt overflow checkPIN knobRead beginTFT bitClear updateIR bitWrite position writeRGB highByte writeRed setSpeed readBlue noStroke remoteIP transfer shutdown hangCall beginSMS endWrite attached maintain noCursor checkReg checkPUK shiftOut isValid shiftIn pulseIn connect println localIP pinMode getIMEI display noBlink process getBand running beginSD drawBMP lowByte setBand release bitRead prepare pointTo readRed setMode noFill remove listen stroke detach attach noTone exists buffer height bitSet circle config cursor random IRread setDNS endSMS getKey micros millis begin print write ready flush width isPIN blink clear press mkdir rmdir close point yield image BSSID click delay read text move peek beep rect line open seek fill size turn stop home find step tone sqrt RSSI SSID end bit tan cos sin pow map abs max min get run put",literal:"DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL DEFAULT OUTPUT INPUT HIGH LOW"},c:[t.preprocessor,e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM]}}),e.registerLanguage("armasm",function(e){return{cI:!0,aliases:["arm"],l:"\\.?"+e.IR,k:{meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"},c:[{cN:"keyword",b:"\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?",e:"\\s"},e.C("[;@]","$",{r:0}),e.CBCM,e.QSM,{cN:"string",b:"'",e:"[^\\\\]'",r:0},{cN:"title",b:"\\|",e:"\\|",i:"\\n",r:0},{cN:"number",v:[{b:"[#$=]?0x[0-9a-f]+"},{b:"[#$=]?0b[01]+"},{b:"[#$=]\\d+"},{b:"\\b\\d+"}],r:0},{cN:"symbol",v:[{b:"^[a-z_\\.\\$][a-z0-9_\\.\\$]+"},{b:"^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{b:"[=#]\\w+"}],r:0}]}}),e.registerLanguage("xml",function(e){var t="[A-Za-z0-9\\._:-]+",r={eW:!0,i:/</,r:0,c:[{cN:"attr",b:t,r:0},{b:/=\s*/,r:0,c:[{cN:"string",endsParent:!0,v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s"'=<>`]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist"],cI:!0,c:[{cN:"meta",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},e.C("<!--","-->",{r:10}),{b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{b:/<\?(php)?/,e:/\?>/,sL:"php",c:[{b:"/\\*",e:"\\*/",skip:!0}]},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{name:"style"},c:[r],starts:{e:"</style>",rE:!0,sL:["css","xml"]}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{name:"script"},c:[r],starts:{e:"</script>",rE:!0,sL:["actionscript","javascript","handlebars","xml"]}},{cN:"meta",v:[{b:/<\?xml/,e:/\?>/,r:10},{b:/<\?\w+/,e:/\?>/}]},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"name",b:/[^\/><\s]+/,r:0},r]}]}}),e.registerLanguage("asciidoc",function(e){return{aliases:["adoc"],c:[e.C("^/{4,}\\n","\\n/{4,}$",{r:10}),e.C("^//","$",{r:0}),{cN:"title",b:"^\\.\\w.*$"},{b:"^[=\\*]{4,}\\n",e:"\\n^[=\\*]{4,}$",r:10},{cN:"section",r:10,v:[{b:"^(={1,5}) .+?( \\1)?$"},{b:"^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$"}]},{cN:"meta",b:"^:.+?:",e:"\\s",eE:!0,r:10},{cN:"meta",b:"^\\[.+?\\]$",r:0},{cN:"quote",b:"^_{4,}\\n",e:"\\n_{4,}$",r:10},{cN:"code",b:"^[\\-\\.]{4,}\\n",e:"\\n[\\-\\.]{4,}$",r:10},{b:"^\\+{4,}\\n",e:"\\n\\+{4,}$",c:[{b:"<",e:">",sL:"xml",r:0}],r:10},{cN:"bullet",b:"^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+"},{cN:"symbol",b:"^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",r:10},{cN:"strong",b:"\\B\\*(?![\\*\\s])",e:"(\\n{2}|\\*)",c:[{b:"\\\\*\\w",r:0}]},{cN:"emphasis",b:"\\B'(?!['\\s])",e:"(\\n{2}|')",c:[{b:"\\\\'\\w",r:0}],r:0},{cN:"emphasis",b:"_(?![_\\s])",e:"(\\n{2}|_)",r:0},{cN:"string",v:[{b:"``.+?''"},{b:"`.+?'"}]},{cN:"code",b:"(`.+?`|\\+.+?\\+)",r:0},{cN:"code",b:"^[ \\t]",e:"$",r:0},{b:"^'{3,}[ \\t]*$",r:10},{b:"(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]",rB:!0,c:[{b:"(link|image:?):",r:0},{cN:"link",b:"\\w",e:"[^\\[]+",r:0},{cN:"string",b:"\\[",e:"\\]",eB:!0,eE:!0,r:0}],r:10}]}}),e.registerLanguage("aspectj",function(e){var t="false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else extends implements break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws privileged aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization staticinitialization withincode target within execution getWithinTypeName handler thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents warning error soft precedence thisAspectInstance",r="get set args call";return{k:t,i:/<\/|#/,c:[e.C("/\\*\\*","\\*/",{r:0,c:[{b:/\w+@/,r:0},{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,e.ASM,e.QSM,{cN:"class",bK:"aspect",e:/[{;=]/,eE:!0,i:/[:;"\[\]]/,c:[{bK:"extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton"},e.UTM,{b:/\([^\)]*/,e:/[)]+/,k:t+" "+r,eE:!1}]},{cN:"class",bK:"class interface",e:/[{;=]/,eE:!0,r:0,k:"class interface",i:/[:"\[\]]/,c:[{bK:"extends implements"},e.UTM]},{bK:"pointcut after before around throwing returning",e:/[)]/,eE:!1,i:/["\[\]]/,c:[{b:e.UIR+"\\s*\\(",rB:!0,c:[e.UTM]}]},{b:/[:]/,rB:!0,e:/[{;]/,r:0,eE:!1,k:t,i:/["\[\]]/,c:[{b:e.UIR+"\\s*\\(",k:t+" "+r,r:0},e.QSM]},{bK:"new throw",r:0},{cN:"function",b:/\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,rB:!0,e:/[{;=]/,k:t,eE:!0,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"params",b:/\(/,e:/\)/,r:0,k:t,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]},e.CNM,{cN:"meta",b:"@[A-Za-z]+"}]}}),e.registerLanguage("autohotkey",function(e){var t={b:"`[\\s\\S]"};return{cI:!0,aliases:["ahk"],k:{keyword:"Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",literal:"A|0 true false NOT AND OR",built_in:"ComSpec Clipboard ClipboardAll ErrorLevel"},c:[{cN:"built_in",b:"A_[a-zA-Z0-9]+"},t,e.inherit(e.QSM,{c:[t]}),e.C(";","$",{r:0}),e.CBCM,{cN:"number",b:e.NR,r:0},{cN:"subst",b:"%(?=[a-zA-Z0-9#_$@])",e:"%",i:"[^a-zA-Z0-9#_$@]"},{cN:"built_in",b:"^\\s*\\w+\\s*,"},{cN:"meta",b:"^\\s*#w+",e:"$",r:0},{cN:"symbol",c:[t],v:[{b:'^[^\\n";]+::(?!=)'},{b:'^[^\\n";]+:(?!=)',r:0}]},{b:",\\s*,"}]}}),e.registerLanguage("autoit",function(e){var t="ByRef Case Const ContinueCase ContinueLoop Default Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With",r="True False And Null Not Or",a="Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait",i={v:[e.C(";","$",{r:0}),e.C("#cs","#ce"),e.C("#comments-start","#comments-end")]},n={b:"\\$[A-z0-9_]+"},o={cN:"string",v:[{b:/"/,e:/"/,c:[{b:/""/,r:0}]},{b:/'/,e:/'/,c:[{b:/''/,r:0}]}]},s={v:[e.BNM,e.CNM]},l={cN:"meta",b:"#",e:"$",k:{"meta-keyword":"comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin"},c:[{b:/\\\n/,r:0},{bK:"include",k:{"meta-keyword":"include"},e:"$",c:[o,{cN:"meta-string",v:[{b:"<",e:">"},{b:/"/,e:/"/,c:[{b:/""/,r:0}]},{b:/'/,e:/'/,c:[{b:/''/,r:0}]}]}]},o,i]},c={cN:"symbol",b:"@[A-z0-9_]+"},d={cN:"function",bK:"Func",e:"$",i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:[n,o,s]}]};return{cI:!0,i:/\/\*/,k:{keyword:t,built_in:a,literal:r},c:[i,n,o,s,l,c,d]}}),e.registerLanguage("avrasm",function(e){return{cI:!0,l:"\\.?"+e.IR,k:{keyword:"adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf",meta:".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"},c:[e.CBCM,e.C(";","$",{r:0}),e.CNM,e.BNM,{cN:"number",b:"\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"},e.QSM,{cN:"string",b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"},{cN:"symbol",b:"^[A-Za-z0-9_.$]+:"},{cN:"meta",b:"#",e:"$"},{cN:"subst",b:"@[0-9]+"}]}}),e.registerLanguage("awk",function(e){var t={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)}/}]},r="BEGIN END if else while do for in break continue delete next nextfile function func exit|10",a={cN:"string",c:[e.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,r:10},{b:/(u|b)?r?"""/,e:/"""/,r:10},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},e.ASM,e.QSM]};return{k:{keyword:r},c:[t,a,e.RM,e.HCM,e.NM]}}),e.registerLanguage("axapta",function(e){return{k:"false int abstract private char boolean static null if for true while long throw finally protected final return void enum else break new catch byte super case short default double public try this switch continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count order group by asc desc index hint like dispaly edit client server ttsbegin ttscommit str real date container anytype common div mod",c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM,{cN:"meta",b:"#",e:"$"},{cN:"class",bK:"class interface",e:"{",eE:!0,i:":",c:[{bK:"extends implements"},e.UTM]}]}}),e.registerLanguage("bash",function(e){var t={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)}/}]},r={cN:"string",b:/"/,e:/"/,c:[e.BE,t,{cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]}]},a={cN:"string",b:/'/,e:/'/};return{aliases:["sh","zsh"],l:/\b-?[a-z\._]+\b/,k:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},c:[{cN:"meta",b:/^#![^\n]+sh\s*$/,r:10},{cN:"function",b:/\w[\w\d_]*\s*\(\s*\)\s*\{/,rB:!0,c:[e.inherit(e.TM,{b:/\w[\w\d_]*/})],r:0},e.HCM,r,a,t]}}),e.registerLanguage("basic",function(e){return{cI:!0,i:"^.",l:"[a-zA-Z][a-zA-Z0-9_$%!#]*",k:{keyword:"ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE WEND WIDTH WINDOW WRITE XOR"
},c:[e.QSM,e.C("REM","$",{r:10}),e.C("'","$",{r:0}),{cN:"symbol",b:"^[0-9]+ ",r:10},{cN:"number",b:"\\b([0-9]+[0-9edED.]*[#!]?)",r:0},{cN:"number",b:"(&[hH][0-9a-fA-F]{1,4})"},{cN:"number",b:"(&[oO][0-7]{1,6})"}]}}),e.registerLanguage("bnf",function(e){return{c:[{cN:"attribute",b:/</,e:/>/},{b:/::=/,starts:{e:/$/,c:[{b:/</,e:/>/},e.CLCM,e.CBCM,e.ASM,e.QSM]}}]}}),e.registerLanguage("brainfuck",function(e){var t={cN:"literal",b:"[\\+\\-]",r:0};return{aliases:["bf"],c:[e.C("[^\\[\\]\\.,\\+\\-<> \r\n]","[\\[\\]\\.,\\+\\-<> \r\n]",{rE:!0,r:0}),{cN:"title",b:"[\\[\\]]",r:0},{cN:"string",b:"[\\.,]",r:0},{b:/\+\+|\-\-/,rB:!0,c:[t]},t]}}),e.registerLanguage("cal",function(e){var t="div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to until while with var",r="false true",a=[e.CLCM,e.C(/\{/,/\}/,{r:0}),e.C(/\(\*/,/\*\)/,{r:10})],i={cN:"string",b:/'/,e:/'/,c:[{b:/''/}]},n={cN:"string",b:/(#\d+)+/},o={cN:"number",b:"\\b\\d+(\\.\\d+)?(DT|D|T)",r:0},s={cN:"string",b:'"',e:'"'},l={cN:"function",bK:"procedure",e:/[:;]/,k:"procedure|10",c:[e.TM,{cN:"params",b:/\(/,e:/\)/,k:t,c:[i,n]}].concat(a)},c={cN:"class",b:"OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)",rB:!0,c:[e.TM,l]};return{cI:!0,k:{keyword:t,literal:r},i:/\/\*/,c:[i,n,o,s,e.NM,c,l]}}),e.registerLanguage("capnproto",function(e){return{aliases:["capnp"],k:{keyword:"struct enum interface union group import using const annotation extends in of on as with from fixed",built_in:"Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 Text Data AnyPointer AnyStruct Capability List",literal:"true false"},c:[e.QSM,e.NM,e.HCM,{cN:"meta",b:/@0x[\w\d]{16};/,i:/\n/},{cN:"symbol",b:/@\d+\b/},{cN:"class",bK:"struct enum",e:/\{/,i:/\n/,c:[e.inherit(e.TM,{starts:{eW:!0,eE:!0}})]},{cN:"class",bK:"interface",e:/\{/,i:/\n/,c:[e.inherit(e.TM,{starts:{eW:!0,eE:!0}})]}]}}),e.registerLanguage("ceylon",function(e){var t="assembly module package import alias class interface object given value assign void function new of extends satisfies abstracts in out return break continue throw assert dynamic if else switch case for while try catch finally then let this outer super is exists nonempty",r="shared abstract formal default actual variable late native deprecatedfinal sealed annotation suppressWarnings small",a="doc by license see throws tagged",i={cN:"subst",eB:!0,eE:!0,b:/``/,e:/``/,k:t,r:10},n=[{cN:"string",b:'"""',e:'"""',r:10},{cN:"string",b:'"',e:'"',c:[i]},{cN:"string",b:"'",e:"'"},{cN:"number",b:"#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",r:0}];return i.c=n,{k:{keyword:t+" "+r,meta:a},i:"\\$[^01]|#[^0-9a-fA-F]",c:[e.CLCM,e.C("/\\*","\\*/",{c:["self"]}),{cN:"meta",b:'@[a-z]\\w*(?:\\:"[^"]*")?'}].concat(n)}}),e.registerLanguage("clean",function(e){return{aliases:["clean","icl","dcl"],k:{keyword:"if let in with where case of class instance otherwise implementation definition system module from import qualified as special code inline foreign export ccall stdcall generic derive infix infixl infixr",literal:"True False"},c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM,{b:"->|<-[|:]?|::|#!?|>>=|\\{\\||\\|\\}|:==|=:|\\.\\.|<>|`"}]}}),e.registerLanguage("clojure",function(e){var t={"builtin-name":"def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"},r="a-zA-Z_\\-!.?+*=<>&#'",a="["+r+"]["+r+"0-9/;:]*",i="[-+]?\\d+(\\.\\d+)?",n={b:a,r:0},o={cN:"number",b:i,r:0},s=e.inherit(e.QSM,{i:null}),l=e.C(";","$",{r:0}),c={cN:"literal",b:/\b(true|false|nil)\b/},d={b:"[\\[\\{]",e:"[\\]\\}]"},p={cN:"comment",b:"\\^"+a},m=e.C("\\^\\{","\\}"),u={cN:"symbol",b:"[:]{1,2}"+a},b={b:"\\(",e:"\\)"},g={eW:!0,r:0},f={k:t,l:a,cN:"name",b:a,starts:g},_=[b,s,p,m,l,u,d,o,c,n];return b.c=[e.C("comment",""),f,g],g.c=_,d.c=_,m.c=[d],{aliases:["clj"],i:/\S/,c:[b,s,p,m,l,u,d,o,c]}}),e.registerLanguage("clojure-repl",function(e){return{c:[{cN:"meta",b:/^([\w.-]+|\s*#_)=>/,starts:{e:/$/,sL:"clojure"}}]}}),e.registerLanguage("cmake",function(e){return{aliases:["cmake.in"],cI:!0,k:{keyword:"add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_subdirectory add_test aux_source_directory break build_command cmake_minimum_required cmake_policy configure_file create_test_sourcelist define_property else elseif enable_language enable_testing endforeach endfunction endif endmacro endwhile execute_process export find_file find_library find_package find_path find_program fltk_wrap_ui foreach function get_cmake_property get_directory_property get_filename_component get_property get_source_file_property get_target_property get_test_property if include include_directories include_external_msproject include_regular_expression install link_directories load_cache load_command macro mark_as_advanced message option output_required_files project qt_wrap_cpp qt_wrap_ui remove_definitions return separate_arguments set set_directory_properties set_property set_source_files_properties set_target_properties set_tests_properties site_name source_group string target_link_libraries try_compile try_run unset variable_watch while build_name exec_program export_library_dependencies install_files install_programs install_targets link_libraries make_directory remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or equal less greater strless strgreater strequal matches"},c:[{cN:"variable",b:"\\${",e:"}"},e.HCM,e.QSM,e.NM]}}),e.registerLanguage("coffeescript",function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",built_in:"npm require console print module global window document"},r="[A-Za-z$_][0-9A-Za-z$_]*",a={cN:"subst",b:/#\{/,e:/}/,k:t},i=[e.BNM,e.inherit(e.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/"""/,e:/"""/,c:[e.BE,a]},{b:/"/,e:/"/,c:[e.BE,a]}]},{cN:"regexp",v:[{b:"///",e:"///",c:[a,e.HCM]},{b:"//[gim]*",r:0},{b:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{b:"@"+r},{sL:"javascript",eB:!0,eE:!0,v:[{b:"```",e:"```"},{b:"`",e:"`"}]}];a.c=i;var n=e.inherit(e.TM,{b:r}),o="(\\(.*\\))?\\s*\\B[-=]>",s={cN:"params",b:"\\([^\\(]",rB:!0,c:[{b:/\(/,e:/\)/,k:t,c:["self"].concat(i)}]};return{aliases:["coffee","cson","iced"],k:t,i:/\/\*/,c:i.concat([e.C("###","###"),e.HCM,{cN:"function",b:"^\\s*"+r+"\\s*=\\s*"+o,e:"[-=]>",rB:!0,c:[n,s]},{b:/[:\(,=]\s*/,r:0,c:[{cN:"function",b:o,e:"[-=]>",rB:!0,c:[s]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[n]},n]},{b:r+":",e:":",rB:!0,rE:!0,r:0}])}}),e.registerLanguage("coq",function(e){return{k:{keyword:"_ as at cofix else end exists exists2 fix for forall fun if IF in let match mod Prop return Set then Type using where with Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture Conjectures Constant constr Constraint Constructors Context Corollary CreateHintDb Cut Declare Defined Definition Delimit Dependencies DependentDerive Drop eauto End Equality Eval Example Existential Existentials Existing Export exporting Extern Extract Extraction Fact Field Fields File Fixpoint Focus for From Function Functional Generalizable Global Goal Grab Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident Identity If Immediate Implicit Import Include Inductive Infix Info Initial Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation Obligations Opaque Open Optimize Options Parameter Parameters Parametric Path Paths pattern Polymorphic Preterm Print Printing Program Projections Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused Unfold Universe Universes Unset Unshelve using Variable Variables Variant Verbose Visibility where with",built_in:"abstract absurd admit after apply as assert assumption at auto autorewrite autounfold before bottom btauto by case case_eq cbn cbv change classical_left classical_right clear clearbody cofix compare compute congruence constr_eq constructor contradict contradiction cut cutrewrite cycle decide decompose dependent destruct destruction dintuition discriminate discrR do double dtauto eapply eassumption eauto ecase econstructor edestruct ediscriminate eelim eexact eexists einduction einjection eleft elim elimtype enough equality erewrite eright esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail field field_simplify field_simplify_eq first firstorder fix fold fourier functional generalize generalizing gfail give_up has_evar hnf idtac in induction injection instantiate intro intro_pattern intros intuition inversion inversion_clear is_evar is_var lapply lazy left lia lra move native_compute nia nsatz omega once pattern pose progress proof psatz quote record red refine reflexivity remember rename repeat replace revert revgoals rewrite rewrite_strat right ring ring_simplify rtauto set setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve specialize split split_Rabs split_Rmult stepl stepr subst sum swap symmetry tactic tauto time timeout top transitivity trivial try tryif unfold unify until using vm_compute with"},c:[e.QSM,e.C("\\(\\*","\\*\\)"),e.CNM,{cN:"type",eB:!0,b:"\\|\\s*",e:"\\w+"},{b:/[-=]>/}]}}),e.registerLanguage("cos",function(e){var t={cN:"string",v:[{b:'"',e:'"',c:[{b:'""',r:0}]}]},r={cN:"number",b:"\\b(\\d+(\\.\\d*)?|\\.\\d+)",r:0},a="property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii";return{cI:!0,aliases:["cos","cls"],k:a,c:[r,t,e.CLCM,e.CBCM,{cN:"comment",b:/;/,e:"$",r:0},{cN:"built_in",b:/(?:\$\$?|\.\.)\^?[a-zA-Z]+/},{cN:"built_in",b:/\$\$\$[a-zA-Z]+/},{cN:"built_in",b:/%[a-z]+(?:\.[a-z]+)*/},{cN:"symbol",b:/\^%?[a-zA-Z][\w]*/},{cN:"keyword",b:/##class|##super|#define|#dim/},{b:/&sql\(/,e:/\)/,eB:!0,eE:!0,sL:"sql"},{b:/&(js|jscript|javascript)</,e:/>/,eB:!0,eE:!0,sL:"javascript"},{b:/&html<\s*</,e:/>\s*>/,sL:"xml"}]}}),e.registerLanguage("crmsh",function(e){var t="primitive rsc_template",r="group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml",a="property rsc_defaults op_defaults",i="params meta operations op rule attributes utilization",n="read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\",o="number string",s="Master Started Slave Stopped start promote demote stop monitor true false";return{aliases:["crm","pcmk"],cI:!0,k:{keyword:i+" "+n+" "+o,literal:s},c:[e.HCM,{bK:"node",starts:{e:"\\s*([\\w_-]+:)?",starts:{cN:"title",e:"\\s*[\\$\\w_][\\w_-]*"}}},{bK:t,starts:{cN:"title",e:"\\s*[\\$\\w_][\\w_-]*",starts:{e:"\\s*@?[\\w_][\\w_\\.:-]*"}}},{b:"\\b("+r.split(" ").join("|")+")\\s+",k:r,starts:{cN:"title",e:"[\\$\\w_][\\w_-]*"}},{bK:a,starts:{cN:"title",e:"\\s*([\\w_-]+:)?"}},e.QSM,{cN:"meta",b:"(ocf|systemd|service|lsb):[\\w_:-]+",r:0},{cN:"number",b:"\\b\\d+(\\.\\d+)?(ms|s|h|m)?",r:0},{cN:"literal",b:"[-]?(infinity|inf)",r:0},{cN:"attr",b:/([A-Za-z\$_\#][\w_-]+)=/,r:0},{cN:"tag",b:"</?",e:"/?>",r:0}]}}),e.registerLanguage("crystal",function(e){function t(e,t){var r=[{b:e,e:t}];return r[0].c=r,r}var r="(_[uif](8|16|32|64))?",a="[a-zA-Z_]\\w*[!?=]?",i="!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",n="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?",o={keyword:"abstract alias as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",literal:"false nil true"},s={cN:"subst",b:"#{",e:"}",k:o},l={cN:"template-variable",v:[{b:"\\{\\{",e:"\\}\\}"},{b:"\\{%",e:"%\\}"}],k:o},c={cN:"string",c:[e.BE,s],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/`/,e:/`/},{b:"%w?\\(",e:"\\)",c:t("\\(","\\)")},{b:"%w?\\[",e:"\\]",c:t("\\[","\\]")},{b:"%w?{",e:"}",c:t("{","}")},{b:"%w?<",e:">",c:t("<",">")},{b:"%w?/",e:"/"},{b:"%w?%",e:"%"},{b:"%w?-",e:"-"},{b:"%w?\\|",e:"\\|"},{b:/<<-\w+$/,e:/^\s*\w+$/}],r:0},d={cN:"string",v:[{b:"%q\\(",e:"\\)",c:t("\\(","\\)")},{b:"%q\\[",e:"\\]",c:t("\\[","\\]")},{b:"%q{",e:"}",c:t("{","}")},{b:"%q<",e:">",c:t("<",">")},{b:"%q/",e:"/"},{b:"%q%",e:"%"},{b:"%q-",e:"-"},{b:"%q\\|",e:"\\|"},{b:/<<-'\w+'$/,e:/^\s*\w+$/}],r:0},p={b:"("+i+")\\s*",c:[{cN:"regexp",c:[e.BE,s],v:[{b:"//[a-z]*",r:0},{b:"/",e:"/[a-z]*"},{b:"%r\\(",e:"\\)",c:t("\\(","\\)")},{b:"%r\\[",e:"\\]",c:t("\\[","\\]")},{b:"%r{",e:"}",c:t("{","}")},{b:"%r<",e:">",c:t("<",">")},{b:"%r/",e:"/"},{b:"%r%",e:"%"},{b:"%r-",e:"-"},{b:"%r\\|",e:"\\|"}]}],r:0},m={cN:"regexp",c:[e.BE,s],v:[{b:"%r\\(",e:"\\)",c:t("\\(","\\)")},{b:"%r\\[",e:"\\]",c:t("\\[","\\]")},{b:"%r{",e:"}",c:t("{","}")},{b:"%r<",e:">",c:t("<",">")},{b:"%r/",e:"/"},{b:"%r%",e:"%"},{b:"%r-",e:"-"},{b:"%r\\|",e:"\\|"}],r:0},u={cN:"meta",b:"@\\[",e:"\\]",c:[e.inherit(e.QSM,{cN:"meta-string"})]},b=[l,c,d,p,m,u,e.HCM,{cN:"class",bK:"class module struct",e:"$|;",i:/=/,c:[e.HCM,e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{b:"<"}]},{cN:"class",bK:"lib enum union",e:"$|;",i:/=/,c:[e.HCM,e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"})],r:10},{cN:"function",bK:"def",e:/\B\b/,c:[e.inherit(e.TM,{b:n,endsParent:!0})]},{cN:"function",bK:"fun macro",e:/\B\b/,c:[e.inherit(e.TM,{b:n,endsParent:!0})],r:5},{cN:"symbol",b:e.UIR+"(\\!|\\?)?:",r:0},{cN:"symbol",b:":",c:[c,{b:n}],r:0},{cN:"number",v:[{b:"\\b0b([01_]*[01])"+r},{b:"\\b0o([0-7_]*[0-7])"+r},{b:"\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])"+r},{b:"\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)"+r}],r:0}];return s.c=b,l.c=b.slice(1),{aliases:["cr"],l:a,k:o,c:b}}),e.registerLanguage("cs",function(e){var t={keyword:"abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long nameof object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield",literal:"null false true"},r={cN:"string",b:'@"',e:'"',c:[{b:'""'}]},a=e.inherit(r,{i:/\n/}),i={cN:"subst",b:"{",e:"}",k:t},n=e.inherit(i,{i:/\n/}),o={cN:"string",b:/\$"/,e:'"',i:/\n/,c:[{b:"{{"},{b:"}}"},e.BE,n]},s={cN:"string",b:/\$@"/,e:'"',c:[{b:"{{"},{b:"}}"},{b:'""'},i]},l=e.inherit(s,{i:/\n/,c:[{b:"{{"},{b:"}}"},{b:'""'},n]});i.c=[s,o,r,e.ASM,e.QSM,e.CNM,e.CBCM],n.c=[l,o,a,e.ASM,e.QSM,e.CNM,e.inherit(e.CBCM,{i:/\n/})];var c={v:[s,o,r,e.ASM,e.QSM]},d=e.IR+"(<"+e.IR+"(\\s*,\\s*"+e.IR+")*>)?(\\[\\])?";return{aliases:["csharp"],k:t,i:/::/,c:[e.C("///","$",{rB:!0,c:[{cN:"doctag",v:[{b:"///",r:0},{b:"<!--|-->"},{b:"</?",e:">"}]}]}),e.CLCM,e.CBCM,{cN:"meta",b:"#",e:"$",k:{"meta-keyword":"if else elif endif define undef warning error line region endregion pragma checksum"}},c,e.CNM,{bK:"class interface",e:/[{;=]/,i:/[^\s:]/,c:[e.TM,e.CLCM,e.CBCM]},{bK:"namespace",e:/[{;=]/,i:/[^\s:]/,c:[e.inherit(e.TM,{b:"[a-zA-Z](\\.?\\w)*"}),e.CLCM,e.CBCM]},{cN:"meta",b:"^\\s*\\[",eB:!0,e:"\\]",eE:!0,c:[{cN:"meta-string",b:/"/,e:/"/}]},{bK:"new return throw await else",r:0},{cN:"function",b:"("+d+"\\s+)+"+e.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:t,c:[{b:e.IR+"\\s*\\(",rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,r:0,c:[c,e.CNM,e.CBCM]},e.CLCM,e.CBCM]}]}}),e.registerLanguage("csp",function(e){return{cI:!1,l:"[a-zA-Z][a-zA-Z0-9_-]*",k:{keyword:"base-uri child-src connect-src default-src font-src form-action frame-ancestors frame-src img-src media-src object-src plugin-types report-uri sandbox script-src style-src"},c:[{cN:"string",b:"'",e:"'"},{cN:"attribute",b:"^Content",e:":",eE:!0}]}}),e.registerLanguage("css",function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",r={b:/[A-Z\_\.\-]+\s*:/,rB:!0,e:";",eW:!0,c:[{cN:"attribute",b:/\S/,e:":",eE:!0,starts:{eW:!0,eE:!0,c:[{b:/[\w-]+\(/,rB:!0,c:[{cN:"built_in",b:/[\w-]+/},{b:/\(/,e:/\)/,c:[e.ASM,e.QSM]}]},e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:"number",b:"#[0-9A-Fa-f]+"},{cN:"meta",b:"!important"}]}}]};return{cI:!0,i:/[=\/|'\$]/,c:[e.CBCM,{cN:"selector-id",b:/#[A-Za-z0-9_-]+/},{cN:"selector-class",b:/\.[A-Za-z0-9_-]+/},{cN:"selector-attr",b:/\[/,e:/\]/,i:"$"},{cN:"selector-pseudo",b:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{b:"@(font-face|page)",l:"[a-z-]+",k:"font-face page"},{b:"@",e:"[{;]",i:/:/,c:[{cN:"keyword",b:/\w+/},{b:/\s/,eW:!0,eE:!0,r:0,c:[e.ASM,e.QSM,e.CSSNM]}]},{cN:"selector-tag",b:t,r:0},{b:"{",e:"}",i:/\S/,c:[e.CBCM,r]}]}}),e.registerLanguage("d",function(e){var t={keyword:"abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",built_in:"bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",literal:"false null true"},r="(0|[1-9][\\d_]*)",a="(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)",i="0[bB][01_]+",n="([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)",o="0[xX]"+n,s="([eE][+-]?"+a+")",l="("+a+"(\\.\\d*|"+s+")|\\d+\\."+a+a+"|\\."+r+s+"?)",c="(0[xX]("+n+"\\."+n+"|\\.?"+n+")[pP][+-]?"+a+")",d="("+r+"|"+i+"|"+o+")",p="("+c+"|"+l+")",m="\\\\(['\"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};",u={cN:"number",b:"\\b"+d+"(L|u|U|Lu|LU|uL|UL)?",r:0},b={cN:"number",b:"\\b("+p+"([fF]|L|i|[fF]i|Li)?|"+d+"(i|[fF]i|Li))",r:0},g={cN:"string",b:"'("+m+"|.)",e:"'",i:"."},f={b:m,r:0},_={cN:"string",b:'"',c:[f],e:'"[cwd]?'},h={cN:"string",b:'[rq]"',e:'"[cwd]?',r:5},v={cN:"string",b:"`",e:"`[cwd]?"},y={cN:"string",b:'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',r:10},S={cN:"string",b:'q"\\{',e:'\\}"'},C={cN:"meta",b:"^#!",e:"$",r:5},x={cN:"meta",b:"#(line)",e:"$",r:5},E={cN:"keyword",b:"@[a-zA-Z_][a-zA-Z_\\d]*"},N=e.C("\\/\\+","\\+\\/",{c:["self"],r:10});return{l:e.UIR,k:t,c:[e.CLCM,e.CBCM,N,y,_,h,v,S,b,u,g,C,x,E]}}),e.registerLanguage("markdown",function(e){return{aliases:["md","mkdown","mkd"],c:[{cN:"section",v:[{b:"^#{1,6}",e:"$"},{b:"^.+?\\n[=-]{2,}$"}]},{b:"<",e:">",sL:"xml",r:0},{cN:"bullet",b:"^([*+-]|(\\d+\\.))\\s+"},{cN:"strong",b:"[*_]{2}.+?[*_]{2}"},{cN:"emphasis",v:[{b:"\\*.+?\\*"},{b:"_.+?_",r:0}]},{cN:"quote",b:"^>\\s+",e:"$"},{cN:"code",v:[{b:"^```w*s*$",e:"^```s*$"},{b:"`.+?`"},{b:"^( {4}|	)",e:"$",r:0}]},{b:"^[-\\*]{3,}",e:"$"},{b:"\\[.+?\\][\\(\\[].*?[\\)\\]]",rB:!0,c:[{cN:"string",b:"\\[",e:"\\]",eB:!0,rE:!0,r:0},{cN:"link",b:"\\]\\(",e:"\\)",eB:!0,eE:!0},{cN:"symbol",b:"\\]\\[",e:"\\]",eB:!0,eE:!0}],r:10},{b:/^\[[^\n]+\]:/,rB:!0,c:[{cN:"symbol",b:/\[/,e:/\]/,eB:!0,eE:!0},{cN:"link",b:/:\s*/,e:/$/,eB:!0}]}]}}),e.registerLanguage("dart",function(e){var t={cN:"subst",b:"\\$\\{",e:"}",k:"true false null this is new super"},r={cN:"string",v:[{b:"r'''",e:"'''"},{b:'r"""',e:'"""'},{b:"r'",e:"'",i:"\\n"},{b:'r"',e:'"',i:"\\n"},{b:"'''",e:"'''",c:[e.BE,t]},{b:'"""',e:'"""',c:[e.BE,t]},{b:"'",e:"'",i:"\\n",c:[e.BE,t]},{b:'"',e:'"',i:"\\n",c:[e.BE,t]}]};t.c=[e.CNM,r];var a={keyword:"assert async await break case catch class const continue default do else enum extends false final finally for if in is new null rethrow return super switch sync this throw true try var void while with yield abstract as dynamic export external factory get implements import library operator part set static typedef",built_in:"print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num document window querySelector querySelectorAll Element ElementList"};return{k:a,c:[r,e.C("/\\*\\*","\\*/",{sL:"markdown"}),e.C("///","$",{sL:"markdown"}),e.CLCM,e.CBCM,{cN:"class",bK:"class interface",e:"{",eE:!0,c:[{bK:"extends implements"},e.UTM]},e.CNM,{cN:"meta",b:"@[A-Za-z]+"},{b:"=>"}]}}),e.registerLanguage("delphi",function(e){var t="exports register file shl array record property for mod while set ally label uses raise not stored class safecall var interface or private static exit index inherited to else stdcall override shr asm far resourcestring finalization packed virtual out and protected library do xorwrite goto near function end div overload object unit begin string on inline repeat until destructor write message program with read initialization except default nil if case cdecl in downto threadvar of try pascal const external constructor type public then implementation finally published procedure absolute reintroduce operator as is abstract alias assembler bitpacked break continue cppdecl cvar enumerator experimental platform deprecated unimplemented dynamic export far16 forward generic helper implements interrupt iochecks local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat specialize strict unaligned varargs ",r=[e.CLCM,e.C(/\{/,/\}/,{r:0}),e.C(/\(\*/,/\*\)/,{r:10})],a={cN:"meta",v:[{b:/\{\$/,e:/\}/},{b:/\(\*\$/,e:/\*\)/}]},i={cN:"string",b:/'/,e:/'/,c:[{b:/''/}]},n={cN:"string",b:/(#\d+)+/},o={b:e.IR+"\\s*=\\s*class\\s*\\(",rB:!0,c:[e.TM]},s={cN:"function",bK:"function constructor destructor procedure",e:/[:;]/,k:"function constructor|10 destructor|10 procedure|10",c:[e.TM,{cN:"params",b:/\(/,e:/\)/,k:t,c:[i,n,a].concat(r)},a].concat(r)};return{aliases:["dpr","dfm","pas","pascal","freepascal","lazarus","lpr","lfm"],cI:!0,k:t,i:/"|\$[G-Zg-z]|\/\*|<\/|\|/,c:[i,n,e.NM,o,s,a].concat(r)}}),e.registerLanguage("diff",function(e){return{aliases:["patch"],c:[{cN:"meta",r:10,v:[{b:/^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},{b:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{b:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{cN:"comment",v:[{b:/Index: /,e:/$/},{b:/={3,}/,e:/$/},{b:/^\-{3}/,e:/$/},{b:/^\*{3} /,e:/$/},{b:/^\+{3}/,e:/$/},{b:/\*{5}/,e:/\*{5}$/}]},{cN:"addition",b:"^\\+",e:"$"},{cN:"deletion",b:"^\\-",e:"$"},{cN:"addition",b:"^\\!",e:"$"}]}}),e.registerLanguage("django",function(e){var t={b:/\|[A-Za-z]+:?/,k:{name:"truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone"},c:[e.QSM,e.ASM]};return{aliases:["jinja"],cI:!0,sL:"xml",c:[e.C(/\{%\s*comment\s*%}/,/\{%\s*endcomment\s*%}/),e.C(/\{#/,/#}/),{cN:"template-tag",b:/\{%/,e:/%}/,c:[{cN:"name",b:/\w+/,k:{name:"comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim"},starts:{eW:!0,k:"in by as",c:[t],r:0}}]},{cN:"template-variable",b:/\{\{/,e:/}}/,c:[t]}]}}),e.registerLanguage("dns",function(e){return{aliases:["bind","zone"],k:{keyword:"IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT"},c:[e.C(";","$",{r:0}),{cN:"meta",b:/^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/},{cN:"number",b:"((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"},{cN:"number",b:"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"},e.inherit(e.NM,{b:/\b\d+[dhwm]?/})]}}),e.registerLanguage("dockerfile",function(e){return{aliases:["docker"],cI:!0,k:"from maintainer expose env arg user onbuild stopsignal",c:[e.HCM,e.ASM,e.QSM,e.NM,{bK:"run cmd entrypoint volume add copy workdir label healthcheck shell",starts:{e:/[^\\]\n/,sL:"bash"}}],i:"</"}}),e.registerLanguage("dos",function(e){var t=e.C(/^\s*@?rem\b/,/$/,{r:10}),r={cN:"symbol",b:"^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",r:0};return{aliases:["bat","cmd"],cI:!0,i:/\/\*/,k:{keyword:"if else goto for in do call exit not exist errorlevel defined equ neq lss leq gtr geq",built_in:"prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux shift cd dir echo setlocal endlocal set pause copy append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color comp compact convert date dir diskcomp diskcopy doskey erase fs find findstr format ftype graftabl help keyb label md mkdir mode more move path pause print popd pushd promt rd recover rem rename replace restore rmdir shiftsort start subst time title tree type ver verify vol ping net ipconfig taskkill xcopy ren del"},c:[{cN:"variable",b:/%%[^ ]|%[^ ]+?%|![^ ]+?!/},{cN:"function",b:r.b,e:"goto:eof",c:[e.inherit(e.TM,{b:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),t]},{cN:"number",b:"\\b\\d+",r:0},t]}}),e.registerLanguage("dsconfig",function(e){var t={cN:"string",b:/"/,e:/"/},r={cN:"string",b:/'/,e:/'/},a={cN:"string",b:"[\\w-?]+:\\w+",e:"\\W",r:0},i={cN:"string",b:"\\w+-?\\w+",e:"\\W",r:0};return{k:"dsconfig",c:[{cN:"keyword",b:"^dsconfig",e:"\\s",eE:!0,r:10},{cN:"built_in",b:"(list|create|get|set|delete)-(\\w+)",e:"\\s",eE:!0,i:"!@#$%^&*()",r:10},{cN:"built_in",b:"--(\\w+)",e:"\\s",eE:!0},t,r,a,i,e.HCM]}}),e.registerLanguage("dts",function(e){var t={cN:"string",v:[e.inherit(e.QSM,{b:'((u8?|U)|L)?"'}),{b:'(u8?|U)?R"',e:'"',c:[e.BE]},{b:"'\\\\?.",e:"'",i:"."}]},r={cN:"number",v:[{b:"\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"},{b:e.CNR}],r:0},a={cN:"meta",b:"#",e:"$",k:{"meta-keyword":"if else elif endif define undef ifdef ifndef"},c:[{b:/\\\n/,r:0},{bK:"include",e:"$",k:{"meta-keyword":"include"},c:[e.inherit(t,{cN:"meta-string"}),{cN:"meta-string",b:"<",e:">",
i:"\\n"}]},t,e.CLCM,e.CBCM]},i={cN:"variable",b:"\\&[a-z\\d_]*\\b"},n={cN:"meta-keyword",b:"/[a-z][a-z\\d-]*/"},o={cN:"symbol",b:"^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"},s={cN:"params",b:"<",e:">",c:[r,i]},l={cN:"class",b:/[a-zA-Z_][a-zA-Z\d_@]*\s{/,e:/[{;=]/,rB:!0,eE:!0},c={cN:"class",b:"/\\s*{",e:"};",r:10,c:[i,n,o,l,s,e.CLCM,e.CBCM,r,t]};return{k:"",c:[c,i,n,o,l,s,e.CLCM,e.CBCM,r,t,a,{b:e.IR+"::",k:""}]}}),e.registerLanguage("dust",function(e){var t="if eq ne lt lte gt gte select default math sep";return{aliases:["dst"],cI:!0,sL:"xml",c:[{cN:"template-tag",b:/\{[#\/]/,e:/\}/,i:/;/,c:[{cN:"name",b:/[a-zA-Z\.-]+/,starts:{eW:!0,r:0,c:[e.QSM]}}]},{cN:"template-variable",b:/\{/,e:/\}/,i:/;/,k:t}]}}),e.registerLanguage("ebnf",function(e){var t=e.C(/\(\*/,/\*\)/),r={cN:"attribute",b:/^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/},a={cN:"meta",b:/\?.*\?/},i={b:/=/,e:/;/,c:[t,a,e.ASM,e.QSM]};return{i:/\S/,c:[t,r,i]}}),e.registerLanguage("elixir",function(e){var t="[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?",r="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",a="and false then defined module in return redo retry end for true self when next until do begin unless nil break not case cond alias while ensure or include use alias fn quote",i={cN:"subst",b:"#\\{",e:"}",l:t,k:a},n={cN:"string",c:[e.BE,i],v:[{b:/'/,e:/'/},{b:/"/,e:/"/}]},o={cN:"function",bK:"def defp defmacro",e:/\B\b/,c:[e.inherit(e.TM,{b:t,endsParent:!0})]},s=e.inherit(o,{cN:"class",bK:"defimpl defmodule defprotocol defrecord",e:/\bdo\b|$|;/}),l=[n,e.HCM,s,o,{cN:"symbol",b:":(?!\\s)",c:[n,{b:r}],r:0},{cN:"symbol",b:t+":",r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{b:"->"},{b:"("+e.RSR+")\\s*",c:[e.HCM,{cN:"regexp",i:"\\n",c:[e.BE,i],v:[{b:"/",e:"/[a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}],r:0}];return i.c=l,{l:t,k:a,c:l}}),e.registerLanguage("elm",function(e){var t={v:[e.C("--","$"),e.C("{-","-}",{c:["self"]})]},r={cN:"type",b:"\\b[A-Z][\\w']*",r:0},a={b:"\\(",e:"\\)",i:'"',c:[{cN:"type",b:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},t]},i={b:"{",e:"}",c:a.c};return{k:"let in if then else case of where module import exposing type alias as infix infixl infixr port effect command subscription",c:[{bK:"port effect module",e:"exposing",k:"port effect module where command subscription exposing",c:[a,t],i:"\\W\\.|;"},{b:"import",e:"$",k:"import as exposing",c:[a,t],i:"\\W\\.|;"},{b:"type",e:"$",k:"type alias",c:[r,a,i,t]},{bK:"infix infixl infixr",e:"$",c:[e.CNM,t]},{b:"port",e:"$",k:"port",c:[t]},e.QSM,e.CNM,r,e.inherit(e.TM,{b:"^[_a-z][\\w']*"}),t,{b:"->|<-"}],i:/;/}}),e.registerLanguage("ruby",function(e){var t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",r={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",literal:"true false nil"},a={cN:"doctag",b:"@[A-Za-z]+"},i={b:"#<",e:">"},n=[e.C("#","$",{c:[a]}),e.C("^\\=begin","^\\=end",{c:[a],r:10}),e.C("^__END__","\\n$")],o={cN:"subst",b:"#\\{",e:"}",k:r},s={cN:"string",c:[e.BE,o],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/`/,e:/`/},{b:"%[qQwWx]?\\(",e:"\\)"},{b:"%[qQwWx]?\\[",e:"\\]"},{b:"%[qQwWx]?{",e:"}"},{b:"%[qQwWx]?<",e:">"},{b:"%[qQwWx]?/",e:"/"},{b:"%[qQwWx]?%",e:"%"},{b:"%[qQwWx]?-",e:"-"},{b:"%[qQwWx]?\\|",e:"\\|"},{b:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/},{b:/<<(-?)\w+$/,e:/^\s*\w+$/}]},l={cN:"params",b:"\\(",e:"\\)",endsParent:!0,k:r},c=[s,i,{cN:"class",bK:"class module",e:"$|;",i:/=/,c:[e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{b:"<\\s*",c:[{b:"("+e.IR+"::)?"+e.IR}]}].concat(n)},{cN:"function",bK:"def",e:"$|;",c:[e.inherit(e.TM,{b:t}),l].concat(n)},{b:e.IR+"::"},{cN:"symbol",b:e.UIR+"(\\!|\\?)?:",r:0},{cN:"symbol",b:":(?!\\s)",c:[s,{b:t}],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{cN:"params",b:/\|/,e:/\|/,k:r},{b:"("+e.RSR+"|unless)\\s*",k:"unless",c:[i,{cN:"regexp",c:[e.BE,o],i:/\n/,v:[{b:"/",e:"/[a-z]*"},{b:"%r{",e:"}[a-z]*"},{b:"%r\\(",e:"\\)[a-z]*"},{b:"%r!",e:"![a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}].concat(n),r:0}].concat(n);o.c=c,l.c=c;var d="[>?]>",p="[\\w#]+\\(\\w+\\):\\d+:\\d+>",m="(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",u=[{b:/^\s*=>/,starts:{e:"$",c:c}},{cN:"meta",b:"^("+d+"|"+p+"|"+m+")",starts:{e:"$",c:c}}];return{aliases:["rb","gemspec","podspec","thor","irb"],k:r,i:/\/\*/,c:n.concat(u).concat(c)}}),e.registerLanguage("erb",function(e){return{sL:"xml",c:[e.C("<%#","%>"),{b:"<%[%=-]?",e:"[%-]?%>",sL:"ruby",eB:!0,eE:!0}]}}),e.registerLanguage("erlang-repl",function(e){return{k:{built_in:"spawn spawn_link self",keyword:"after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"},c:[{cN:"meta",b:"^[0-9]+> ",r:10},e.C("%","$"),{cN:"number",b:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",r:0},e.ASM,e.QSM,{b:"\\?(::)?([A-Z]\\w*(::)?)+"},{b:"->"},{b:"ok"},{b:"!"},{b:"(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",r:0},{b:"[A-Z][a-zA-Z0-9_']*",r:0}]}}),e.registerLanguage("erlang",function(e){var t="[a-z'][a-zA-Z0-9_']*",r="("+t+":"+t+"|"+t+")",a={keyword:"after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",literal:"false true"},i=e.C("%","$"),n={cN:"number",b:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",r:0},o={b:"fun\\s+"+t+"/\\d+"},s={b:r+"\\(",e:"\\)",rB:!0,r:0,c:[{b:r,r:0},{b:"\\(",e:"\\)",eW:!0,rE:!0,r:0}]},l={b:"{",e:"}",r:0},c={b:"\\b_([A-Z][A-Za-z0-9_]*)?",r:0},d={b:"[A-Z][a-zA-Z0-9_]*",r:0},p={b:"#"+e.UIR,r:0,rB:!0,c:[{b:"#"+e.UIR,r:0},{b:"{",e:"}",r:0}]},m={bK:"fun receive if try case",e:"end",k:a};m.c=[i,o,e.inherit(e.ASM,{cN:""}),m,s,e.QSM,n,l,c,d,p];var u=[i,o,m,s,e.QSM,n,l,c,d,p];s.c[1].c=u,l.c=u,p.c[1].c=u;var b={cN:"params",b:"\\(",e:"\\)",c:u};return{aliases:["erl"],k:a,i:"(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",c:[{cN:"function",b:"^"+t+"\\s*\\(",e:"->",rB:!0,i:"\\(|#|//|/\\*|\\\\|:|;",c:[b,e.inherit(e.TM,{b:t})],starts:{e:";|\\.",k:a,c:u}},i,{b:"^-",e:"\\.",r:0,eE:!0,rB:!0,l:"-"+e.IR,k:"-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn -import -include -include_lib -compile -define -else -endif -file -behaviour -behavior -spec",c:[b]},n,e.QSM,p,c,d,l,{b:/\.$/}]}}),e.registerLanguage("excel",function(e){return{aliases:["xlsx","xls"],cI:!0,l:/[a-zA-Z][\w\.]*/,k:{built_in:"ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST"},c:[{b:/^=/,e:/[^=]/,rE:!0,i:/=/,r:10},{cN:"symbol",b:/\b[A-Z]{1,2}\d+\b/,e:/[^\d]/,eE:!0,r:0},{cN:"symbol",b:/[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,r:0},e.BE,e.QSM,{cN:"number",b:e.NR+"(%)?",r:0},e.C(/\bN\(/,/\)/,{eB:!0,eE:!0,i:/\n/})]}}),e.registerLanguage("fix",function(e){return{c:[{b:/[^\u2401\u0001]+/,e:/[\u2401\u0001]/,eE:!0,rB:!0,rE:!1,c:[{b:/([^\u2401\u0001=]+)/,e:/=([^\u2401\u0001=]+)/,rE:!0,rB:!1,cN:"attr"},{b:/=/,e:/([\u2401\u0001])/,eE:!0,eB:!0,cN:"string"}]}],cI:!0}}),e.registerLanguage("flix",function(e){var t={cN:"string",b:/'(.|\\[xXuU][a-zA-Z0-9]+)'/},r={cN:"string",v:[{b:'"',e:'"'}]},a={cN:"title",b:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/},i={cN:"function",bK:"def",e:/[:={\[(\n;]/,eE:!0,c:[a]};return{k:{literal:"true false",keyword:"case class def else enum if impl import in lat rel index let match namespace switch type yield with"},c:[e.CLCM,e.CBCM,t,r,i,e.CNM]}}),e.registerLanguage("fortran",function(e){var t={cN:"params",b:"\\(",e:"\\)"},r={literal:".False. .True.",keyword:"kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data",built_in:"alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_ofacosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image"};return{cI:!0,aliases:["f90","f95"],k:r,i:/\/\*/,c:[e.inherit(e.ASM,{cN:"string",r:0}),e.inherit(e.QSM,{cN:"string",r:0}),{cN:"function",bK:"subroutine function program",i:"[${=\\n]",c:[e.UTM,t]},e.C("!","$",{r:0}),{cN:"number",b:"(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?",r:0}]}}),e.registerLanguage("fsharp",function(e){var t={b:"<",e:">",c:[e.inherit(e.TM,{b:/'[a-zA-Z0-9_]+/})]};return{aliases:["fs"],k:"abstract and as assert base begin class default delegate do done downcast downto elif else end exception extern false finally for fun function global if in inherit inline interface internal lazy let match member module mutable namespace new null of open or override private public rec return sig static struct then to true try type upcast use val void when while with yield",i:/\/\*/,c:[{cN:"keyword",b:/\b(yield|return|let|do)!/},{cN:"string",b:'@"',e:'"',c:[{b:'""'}]},{cN:"string",b:'"""',e:'"""'},e.C("\\(\\*","\\*\\)"),{cN:"class",bK:"type",e:"\\(|=|$",eE:!0,c:[e.UTM,t]},{cN:"meta",b:"\\[<",e:">\\]",r:10},{cN:"symbol",b:"\\B('[A-Za-z])\\b",c:[e.BE]},e.CLCM,e.inherit(e.QSM,{i:null}),e.CNM]}}),e.registerLanguage("gams",function(e){var t={keyword:"abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",literal:"eps inf na","built-in":"abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"},r={cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0},a={cN:"symbol",v:[{b:/\=[lgenxc]=/},{b:/\$/}]},i={cN:"comment",v:[{b:"'",e:"'"},{b:'"',e:'"'}],i:"\\n",c:[e.BE]},n={b:"/",e:"/",k:t,c:[i,e.CLCM,e.CBCM,e.QSM,e.ASM,e.CNM]},o={b:/[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,eB:!0,e:"$",eW:!0,c:[i,n,{cN:"comment",b:/([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,r:0}]};return{aliases:["gms"],cI:!0,k:t,c:[e.C(/^\$ontext/,/^\$offtext/),{cN:"meta",b:"^\\$[a-z0-9]+",e:"$",rB:!0,c:[{cN:"meta-keyword",b:"^\\$[a-z0-9]+"}]},e.C("^\\*","$"),e.CLCM,e.CBCM,e.QSM,e.ASM,{bK:"set sets parameter parameters variable variables scalar scalars equation equations",e:";",c:[e.C("^\\*","$"),e.CLCM,e.CBCM,e.QSM,e.ASM,n,o]},{bK:"table",e:";",rB:!0,c:[{bK:"table",e:"$",c:[o]},e.C("^\\*","$"),e.CLCM,e.CBCM,e.QSM,e.ASM,e.CNM]},{cN:"function",b:/^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,rB:!0,c:[{cN:"title",b:/^[a-z0-9_]+/},r,a]},e.CNM,a]}}),e.registerLanguage("gauss",function(e){var t={keyword:"and bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new not open or output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint",built_in:"abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname threadBegin threadEnd threadEndFor threadFor threadJoin threadStat time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin strtrim sylvester",literal:"DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS"},r={cN:"meta",b:"#",e:"$",k:{"meta-keyword":"define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline"},c:[{b:/\\\n/,r:0},{bK:"include",e:"$",k:{"meta-keyword":"include"},c:[{cN:"meta-string",b:'"',e:'"',i:"\\n"}]},e.CLCM,e.CBCM]},a=e.UIR+"\\s*\\(?",i=[{cN:"params",b:/\(/,e:/\)/,k:t,r:0,c:[e.CNM,e.CLCM,e.CBCM]}];return{aliases:["gss"],cI:!0,k:t,i:"(\\{[%#]|[%#]\\})",c:[e.CNM,e.CLCM,e.CBCM,e.C("@","@"),r,{cN:"string",b:'"',e:'"',c:[e.BE]},{cN:"function",bK:"proc keyword",e:";",eE:!0,k:t,c:[{b:a,rB:!0,c:[e.UTM],r:0},e.CNM,e.CLCM,e.CBCM,r].concat(i)},{cN:"function",bK:"fn",e:";",eE:!0,k:t,c:[{b:a+e.IR+"\\)?\\s*\\=\\s*",rB:!0,c:[e.UTM],r:0},e.CNM,e.CLCM,e.CBCM].concat(i)},{cN:"function",b:"\\bexternal (proc|keyword|fn)\\s+",e:";",eE:!0,k:t,c:[{b:a,rB:!0,c:[e.UTM],r:0},e.CLCM,e.CBCM]},{cN:"function",b:"\\bexternal (matrix|string|array|sparse matrix|struct "+e.IR+")\\s+",e:";",eE:!0,k:t,c:[e.CLCM,e.CBCM]}]}}),e.registerLanguage("gcode",function(e){var t="[A-Z_][A-Z0-9_.]*",r="\\%",a="IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR",i={cN:"meta",b:"([O])([0-9]+)"},n=[e.CLCM,e.CBCM,e.C(/\(/,/\)/),e.inherit(e.CNM,{b:"([-+]?([0-9]*\\.?[0-9]+\\.?))|"+e.CNR}),e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null}),{cN:"name",b:"([G])([0-9]+\\.?[0-9]?)"},{cN:"name",b:"([M])([0-9]+\\.?[0-9]?)"},{cN:"attr",b:"(VC|VS|#)",e:"(\\d+)"},{cN:"attr",b:"(VZOFX|VZOFY|VZOFZ)"},{cN:"built_in",b:"(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",e:"([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])"},{cN:"symbol",v:[{b:"N",e:"\\d+",i:"\\W"}]}];return{aliases:["nc"],cI:!0,l:t,k:a,c:[{cN:"meta",b:r},i].concat(n)}}),e.registerLanguage("gherkin",function(e){return{aliases:["feature"],k:"Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",c:[{cN:"symbol",b:"\\*",r:0},{cN:"meta",b:"@[^@\\s]+"},{b:"\\|",e:"\\|\\w*$",c:[{cN:"string",b:"[^|]+"}]},{cN:"variable",b:"<",e:">"},e.HCM,{cN:"string",b:'"""',e:'"""'},e.QSM]}}),e.registerLanguage("glsl",function(e){return{k:{keyword:"break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",
type:"atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBufferiimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",built_in:"gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",literal:"true false"},i:'"',c:[e.CLCM,e.CBCM,e.CNM,{cN:"meta",b:"#",e:"$"}]}}),e.registerLanguage("go",function(e){var t={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",literal:"true false iota nil",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{aliases:["golang"],k:t,i:"</",c:[e.CLCM,e.CBCM,{cN:"string",v:[e.QSM,{b:"'",e:"[^\\\\]'"},{b:"`",e:"`"}]},{cN:"number",v:[{b:e.CNR+"[dflsi]",r:1},e.CNM]},{b:/:=/},{cN:"function",bK:"func",e:/\s*\{/,eE:!0,c:[e.TM,{cN:"params",b:/\(/,e:/\)/,k:t,i:/["']/}]}]}}),e.registerLanguage("golo",function(e){return{k:{keyword:"println readln print import module function local return let var while for foreach times in case when match with break continue augment augmentation each find filter reduce if then else otherwise try catch finally raise throw orIfNull DynamicObject|10 DynamicVariable struct Observable map set vector list array",literal:"true false null"},c:[e.HCM,e.QSM,e.CNM,{cN:"meta",b:"@[A-Za-z]+"}]}}),e.registerLanguage("gradle",function(e){return{cI:!0,k:{keyword:"task project allprojects subprojects artifacts buildscript configurations dependencies repositories sourceSets description delete from into include exclude source classpath destinationDir includes options sourceCompatibility targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant def abstract break case catch continue default do else extends final finally for if implements instanceof native new private protected public return static switch synchronized throw throws transient try volatile while strictfp package import false null super this true antlrtask checkstyle codenarc copy boolean byte char class double float int interface long short void compile runTime file fileTree abs any append asList asWritable call collect compareTo count div dump each eachByte eachFile eachLine every find findAll flatten getAt getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter newReader newWriter next plus pop power previous print println push putAt read readBytes readLines reverse reverseEach round size sort splitEachLine step subMap times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader withStream withWriter withWriterAppend write writeLine"},c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.NM,e.RM]}}),e.registerLanguage("groovy",function(e){return{k:{literal:"true false null",keyword:"byte short char int long boolean float double void def as in assert trait super this abstract static volatile transient public private protected synchronized final class interface enum if else for while switch case break default continue throw throws try catch finally implements extends new import package return instanceof"},c:[e.C("/\\*\\*","\\*/",{r:0,c:[{b:/\w+@/,r:0},{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,{cN:"string",b:'"""',e:'"""'},{cN:"string",b:"'''",e:"'''"},{cN:"string",b:"\\$/",e:"/\\$",r:10},e.ASM,{cN:"regexp",b:/~?\/[^\/\n]+\//,c:[e.BE]},e.QSM,{cN:"meta",b:"^#!/usr/bin/env",e:"$",i:"\n"},e.BNM,{cN:"class",bK:"class interface trait enum",e:"{",i:":",c:[{bK:"extends implements"},e.UTM]},e.CNM,{cN:"meta",b:"@[A-Za-z]+"},{cN:"string",b:/[^\?]{0}[A-Za-z0-9_$]+ *:/},{b:/\?/,e:/\:/},{cN:"symbol",b:"^\\s*[A-Za-z0-9_$]+:",r:0}],i:/#|<\//}}),e.registerLanguage("haml",function(e){return{cI:!0,c:[{cN:"meta",b:"^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",r:10},e.C("^\\s*(!=#|=#|-#|/).*$",!1,{r:0}),{b:"^\\s*(-|=|!=)(?!#)",starts:{e:"\\n",sL:"ruby"}},{cN:"tag",b:"^\\s*%",c:[{cN:"selector-tag",b:"\\w+"},{cN:"selector-id",b:"#[\\w-]+"},{cN:"selector-class",b:"\\.[\\w-]+"},{b:"{\\s*",e:"\\s*}",c:[{b:":\\w+\\s*=>",e:",\\s+",rB:!0,eW:!0,c:[{cN:"attr",b:":\\w+"},e.ASM,e.QSM,{b:"\\w+",r:0}]}]},{b:"\\(\\s*",e:"\\s*\\)",eE:!0,c:[{b:"\\w+\\s*=",e:"\\s+",rB:!0,eW:!0,c:[{cN:"attr",b:"\\w+",r:0},e.ASM,e.QSM,{b:"\\w+",r:0}]}]}]},{b:"^\\s*[=~]\\s*"},{b:"#{",starts:{e:"}",sL:"ruby"}}]}}),e.registerLanguage("handlebars",function(e){var t={"builtin-name":"each in with if else unless bindattr action collection debugger log outlet template unbound view yield"};return{aliases:["hbs","html.hbs","html.handlebars"],cI:!0,sL:"xml",c:[e.C("{{!(--)?","(--)?}}"),{cN:"template-tag",b:/\{\{[#\/]/,e:/\}\}/,c:[{cN:"name",b:/[a-zA-Z\.-]+/,k:t,starts:{eW:!0,r:0,c:[e.QSM]}}]},{cN:"template-variable",b:/\{\{/,e:/\}\}/,k:t}]}}),e.registerLanguage("haskell",function(e){var t={v:[e.C("--","$"),e.C("{-","-}",{c:["self"]})]},r={cN:"meta",b:"{-#",e:"#-}"},a={cN:"meta",b:"^#",e:"$"},i={cN:"type",b:"\\b[A-Z][\\w']*",r:0},n={b:"\\(",e:"\\)",i:'"',c:[r,a,{cN:"type",b:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},e.inherit(e.TM,{b:"[_a-z][\\w']*"}),t]},o={b:"{",e:"}",c:n.c};return{aliases:["hs"],k:"let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",c:[{bK:"module",e:"where",k:"module where",c:[n,t],i:"\\W\\.|;"},{b:"\\bimport\\b",e:"$",k:"import qualified as hiding",c:[n,t],i:"\\W\\.|;"},{cN:"class",b:"^(\\s*)?(class|instance)\\b",e:"where",k:"class family instance where",c:[i,n,t]},{cN:"class",b:"\\b(data|(new)?type)\\b",e:"$",k:"data family type newtype deriving",c:[r,i,n,o,t]},{bK:"default",e:"$",c:[i,n,t]},{bK:"infix infixl infixr",e:"$",c:[e.CNM,t]},{b:"\\bforeign\\b",e:"$",k:"foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",c:[i,e.QSM,t]},{cN:"meta",b:"#!\\/usr\\/bin\\/env runhaskell",e:"$"},r,a,e.QSM,e.CNM,i,e.inherit(e.TM,{b:"^[_a-z][\\w']*"}),t,{b:"->|<-"}]}}),e.registerLanguage("haxe",function(e){var t="Int Float String Bool Dynamic Void Array ";return{aliases:["hx"],k:{keyword:"break case cast catch continue default do dynamic else enum extern for function here if import in inline never new override package private get set public return static super switch this throw trace try typedef untyped using var while "+t,built_in:"trace this",literal:"true false null _"},c:[{cN:"string",b:"'",e:"'",c:[e.BE,{cN:"subst",b:"\\$\\{",e:"\\}"},{cN:"subst",b:"\\$",e:"\\W}"}]},e.QSM,e.CLCM,e.CBCM,e.CNM,{cN:"meta",b:"@:",e:"$"},{cN:"meta",b:"#",e:"$",k:{"meta-keyword":"if else elseif end error"}},{cN:"type",b:":[ 	]*",e:"[^A-Za-z0-9_ 	\\->]",eB:!0,eE:!0,r:0},{cN:"type",b:":[ 	]*",e:"\\W",eB:!0,eE:!0},{cN:"type",b:"new *",e:"\\W",eB:!0,eE:!0},{cN:"class",bK:"enum",e:"\\{",c:[e.TM]},{cN:"class",bK:"abstract",e:"[\\{$]",c:[{cN:"type",b:"\\(",e:"\\)",eB:!0,eE:!0},{cN:"type",b:"from +",e:"\\W",eB:!0,eE:!0},{cN:"type",b:"to +",e:"\\W",eB:!0,eE:!0},e.TM],k:{keyword:"abstract from to"}},{cN:"class",b:"\\b(class|interface) +",e:"[\\{$]",eE:!0,k:"class interface",c:[{cN:"keyword",b:"\\b(extends|implements) +",k:"extends implements",c:[{cN:"type",b:e.IR,r:0}]},e.TM]},{cN:"function",bK:"function",e:"\\(",eE:!0,i:"\\S",c:[e.TM]}],i:/<\//}}),e.registerLanguage("hsp",function(e){return{cI:!0,l:/[\w\._]+/,k:"goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop",c:[e.CLCM,e.CBCM,e.QSM,e.ASM,{cN:"string",b:'{"',e:'"}',c:[e.BE]},e.C(";","$",{r:0}),{cN:"meta",b:"#",e:"$",k:{"meta-keyword":"addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib"},c:[e.inherit(e.QSM,{cN:"meta-string"}),e.NM,e.CNM,e.CLCM,e.CBCM]},{cN:"symbol",b:"^\\*(\\w+|@)"},e.NM,e.CNM]}}),e.registerLanguage("htmlbars",function(e){var t="action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view",r={i:/\}\}/,b:/[a-zA-Z0-9_]+=/,rB:!0,r:0,c:[{cN:"attr",b:/[a-zA-Z0-9_]+/}]},a=({i:/\}\}/,b:/\)/,e:/\)/,c:[{b:/[a-zA-Z\.\-]+/,k:{built_in:t},starts:{eW:!0,r:0,c:[e.QSM]}}]},{eW:!0,r:0,k:{keyword:"as",built_in:t},c:[e.QSM,r,e.NM]});return{cI:!0,sL:"xml",c:[e.C("{{!(--)?","(--)?}}"),{cN:"template-tag",b:/\{\{[#\/]/,e:/\}\}/,c:[{cN:"name",b:/[a-zA-Z\.\-]+/,k:{"builtin-name":t},starts:a}]},{cN:"template-variable",b:/\{\{[a-zA-Z][a-zA-Z\-]+/,e:/\}\}/,k:{keyword:"as",built_in:t},c:[e.QSM]}]}}),e.registerLanguage("http",function(e){var t="HTTP/[0-9\\.]+";return{aliases:["https"],i:"\\S",c:[{b:"^"+t,e:"$",c:[{cN:"number",b:"\\b\\d{3}\\b"}]},{b:"^[A-Z]+ (.*?) "+t+"$",rB:!0,e:"$",c:[{cN:"string",b:" ",e:" ",eB:!0,eE:!0},{b:t},{cN:"keyword",b:"[A-Z]+"}]},{cN:"attribute",b:"^\\w",e:": ",eE:!0,i:"\\n|\\s|=",starts:{e:"$",r:0}},{b:"\\n\\n",starts:{sL:[],eW:!0}}]}}),e.registerLanguage("hy",function(e){var t={"builtin-name":"!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"},r="a-zA-Z_\\-!.?+*=<>&#'",a="["+r+"]["+r+"0-9/;:]*",i="[-+]?\\d+(\\.\\d+)?",n={cN:"meta",b:"^#!",e:"$"},o={b:a,r:0},s={cN:"number",b:i,r:0},l=e.inherit(e.QSM,{i:null}),c=e.C(";","$",{r:0}),d={cN:"literal",b:/\b([Tt]rue|[Ff]alse|nil|None)\b/},p={b:"[\\[\\{]",e:"[\\]\\}]"},m={cN:"comment",b:"\\^"+a},u=e.C("\\^\\{","\\}"),b={cN:"symbol",b:"[:]{1,2}"+a},g={b:"\\(",e:"\\)"},f={eW:!0,r:0},_={k:t,l:a,cN:"name",b:a,starts:f},h=[g,l,m,u,c,b,p,s,d,o];return g.c=[e.C("comment",""),_,f],f.c=h,p.c=h,{aliases:["hylang"],i:/\S/,c:[n,g,l,m,u,c,b,p,s,d]}}),e.registerLanguage("inform7",function(e){var t="\\[",r="\\]";return{aliases:["i7"],cI:!0,k:{keyword:"thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"},c:[{cN:"string",b:'"',e:'"',r:0,c:[{cN:"subst",b:t,e:r}]},{cN:"section",b:/^(Volume|Book|Part|Chapter|Section|Table)\b/,e:"$"},{b:/^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,e:":",c:[{b:"\\(This",e:"\\)"}]},{cN:"comment",b:t,e:r,c:["self"]}]}}),e.registerLanguage("ini",function(e){var t={cN:"string",c:[e.BE],v:[{b:"'''",e:"'''",r:10},{b:'"""',e:'"""',r:10},{b:'"',e:'"'},{b:"'",e:"'"}]};return{aliases:["toml"],cI:!0,i:/\S/,c:[e.C(";","$"),e.HCM,{cN:"section",b:/^\s*\[+/,e:/\]+/},{b:/^[a-z0-9\[\]_-]+\s*=\s*/,e:"$",rB:!0,c:[{cN:"attr",b:/[a-z0-9\[\]_-]+/},{b:/=/,eW:!0,r:0,c:[{cN:"literal",b:/\bon|off|true|false|yes|no\b/},{cN:"variable",v:[{b:/\$[\w\d"][\w\d_]*/},{b:/\$\{(.*?)}/}]},t,{cN:"number",b:/([\+\-]+)?[\d]+_[\d_]+/},e.NM]}]}]}}),e.registerLanguage("irpf90",function(e){var t={cN:"params",b:"\\(",e:"\\)"},r={literal:".False. .True.",keyword:"kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",built_in:"alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_ofacosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"};return{cI:!0,k:r,i:/\/\*/,c:[e.inherit(e.ASM,{cN:"string",r:0}),e.inherit(e.QSM,{cN:"string",r:0}),{cN:"function",bK:"subroutine function program",i:"[${=\\n]",c:[e.UTM,t]},e.C("!","$",{r:0}),e.C("begin_doc","end_doc",{r:10}),{cN:"number",b:"(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?",r:0}]}}),e.registerLanguage("java",function(e){var t="[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",r=t+"(<"+t+"(\\s*,\\s*"+t+")*>)?",a="false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",i="\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",n={cN:"number",b:i,r:0};return{aliases:["jsp"],k:a,i:/<\/|#/,c:[e.C("/\\*\\*","\\*/",{r:0,c:[{b:/\w+@/,r:0},{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,e.ASM,e.QSM,{cN:"class",bK:"class interface",e:/[{;=]/,eE:!0,k:"class interface",i:/[:"\[\]]/,c:[{bK:"extends implements"},e.UTM]},{bK:"new throw return else",r:0},{cN:"function",b:"("+r+"\\s+)+"+e.UIR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:a,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"params",b:/\(/,e:/\)/,k:a,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]},n,{cN:"meta",b:"@[A-Za-z]+"}]}}),e.registerLanguage("javascript",function(e){var t="[A-Za-z$_][0-9A-Za-z$_]*",r={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},a={cN:"number",v:[{b:"\\b(0[bB][01]+)"},{b:"\\b(0[oO][0-7]+)"},{b:e.CNR}],r:0},i={cN:"subst",b:"\\$\\{",e:"\\}",k:r,c:[]},n={cN:"string",b:"`",e:"`",c:[e.BE,i]};i.c=[e.ASM,e.QSM,n,a,e.RM];var o=i.c.concat([e.CBCM,e.CLCM]);return{aliases:["js","jsx"],k:r,c:[{cN:"meta",r:10,b:/^\s*['"]use (strict|asm)['"]/},{cN:"meta",b:/^#!/,e:/$/},e.ASM,e.QSM,n,e.CLCM,e.CBCM,a,{b:/[{,]\s*/,r:0,c:[{b:t+"\\s*:",rB:!0,r:0,c:[{cN:"attr",b:t,r:0}]}]},{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{cN:"function",b:"(\\(.*?\\)|"+t+")\\s*=>",rB:!0,e:"\\s*=>",c:[{cN:"params",v:[{b:t},{b:/\(\s*\)/},{b:/\(/,e:/\)/,eB:!0,eE:!0,k:r,c:o}]}]},{b:/</,e:/(\/\w+|\w+\/)>/,sL:"xml",c:[{b:/<\w+\s*\/>/,skip:!0},{b:/<\w+/,e:/(\/\w+|\w+\/)>/,skip:!0,c:[{b:/<\w+\s*\/>/,skip:!0},"self"]}]}],r:0},{cN:"function",bK:"function",e:/\{/,eE:!0,c:[e.inherit(e.TM,{b:t}),{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,c:o}],i:/\[|%/},{b:/\$[(.]/},e.METHOD_GUARD,{cN:"class",bK:"class",e:/[{;=]/,eE:!0,i:/[:"\[\]]/,c:[{bK:"extends"},e.UTM]},{bK:"constructor",e:/\{/,eE:!0}],i:/#(?!!)/}}),e.registerLanguage("jboss-cli",function(e){var t={b:/[\w-]+ *=/,rB:!0,r:0,c:[{cN:"attr",b:/[\w-]+/}]},r={cN:"params",b:/\(/,e:/\)/,c:[t],r:0},a={cN:"function",b:/:[\w\-.]+/,r:0},i={cN:"string",b:/\B(([\/.])[\w\-.\/=]+)+/},n={cN:"params",b:/--[\w\-=\/]+/};return{aliases:["wildfly-cli"],l:"[a-z-]+",k:{keyword:"alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",literal:"true false"},c:[e.HCM,e.QSM,n,a,i,r]}}),e.registerLanguage("json",function(e){var t={literal:"true false null"},r=[e.QSM,e.CNM],a={e:",",eW:!0,eE:!0,c:r,k:t},i={b:"{",e:"}",c:[{cN:"attr",b:/"/,e:/"/,c:[e.BE],i:"\\n"},e.inherit(a,{b:/:/})],i:"\\S"},n={b:"\\[",e:"\\]",c:[e.inherit(a)],i:"\\S"};return r.splice(r.length,0,i,n),{c:r,k:t,i:"\\S"}}),e.registerLanguage("julia",function(e){var t={keyword:"in isa where baremodule begin break catch ccall const continue do else elseif end export false finally for function global if import importall let local macro module quote return true try using while type immutable abstract bitstype typealias ",literal:"true false ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im nothing pi γ π φ ",built_in:"ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool "
},r="[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*",a={l:r,k:t,i:/<\//},i={cN:"number",b:/(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,r:0},n={cN:"string",b:/'(.|\\[xXuU][a-zA-Z0-9]+)'/},o={cN:"subst",b:/\$\(/,e:/\)/,k:t},s={cN:"variable",b:"\\$"+r},l={cN:"string",c:[e.BE,o,s],v:[{b:/\w*"""/,e:/"""\w*/,r:10},{b:/\w*"/,e:/"\w*/}]},c={cN:"string",c:[e.BE,o,s],b:"`",e:"`"},d={cN:"meta",b:"@"+r},p={cN:"comment",v:[{b:"#=",e:"=#",r:10},{b:"#",e:"$"}]};return a.c=[i,n,l,c,d,p,e.HCM,{cN:"keyword",b:"\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"},{b:/<:/}],o.c=a.c,a}),e.registerLanguage("julia-repl",function(e){return{c:[{cN:"meta",b:/^julia>/,r:10,starts:{e:/^(?![ ]{6})/,sL:"julia"},aliases:["jldoctest"]}]}}),e.registerLanguage("kotlin",function(e){var t={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit initinterface annotation data sealed internal infix operator out by constructor super trait volatile transient native default",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},r={cN:"keyword",b:/\b(break|continue|return|this)\b/,starts:{c:[{cN:"symbol",b:/@\w+/}]}},a={cN:"symbol",b:e.UIR+"@"},i={cN:"subst",b:"\\${",e:"}",c:[e.ASM,e.CNM]},n={cN:"variable",b:"\\$"+e.UIR},o={cN:"string",v:[{b:'"""',e:'"""',c:[n,i]},{b:"'",e:"'",i:/\n/,c:[e.BE]},{b:'"',e:'"',i:/\n/,c:[e.BE,n,i]}]},s={cN:"meta",b:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+e.UIR+")?"},l={cN:"meta",b:"@"+e.UIR,c:[{b:/\(/,e:/\)/,c:[e.inherit(o,{cN:"meta-string"})]}]};return{k:t,c:[e.C("/\\*\\*","\\*/",{r:0,c:[{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,r,a,s,l,{cN:"function",bK:"fun",e:"[(]|$",rB:!0,eE:!0,k:t,i:/fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,r:5,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"type",b:/</,e:/>/,k:"reified",r:0},{cN:"params",b:/\(/,e:/\)/,endsParent:!0,k:t,r:0,c:[{b:/:/,e:/[=,\/]/,eW:!0,c:[{cN:"type",b:e.UIR},e.CLCM,e.CBCM],r:0},e.CLCM,e.CBCM,s,l,o,e.CNM]},e.CBCM]},{cN:"class",bK:"class interface trait",e:/[:\{(]|$/,eE:!0,i:"extends implements",c:[{bK:"public protected internal private constructor"},e.UTM,{cN:"type",b:/</,e:/>/,eB:!0,eE:!0,r:0},{cN:"type",b:/[,:]\s*/,e:/[<\(,]|$/,eB:!0,rE:!0},s,l]},o,{cN:"meta",b:"^#!/usr/bin/env",e:"$",i:"\n"},e.CNM]}}),e.registerLanguage("lasso",function(e){var t="[a-zA-Z_][\\w.]*",r="<\\?(lasso(script)?|=)",a="\\]|\\?>",i={literal:"true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",built_in:"array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",keyword:"cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"},n=e.C("<!--","-->",{r:0}),o={cN:"meta",b:"\\[noprocess\\]",starts:{e:"\\[/noprocess\\]",rE:!0,c:[n]}},s={cN:"meta",b:"\\[/noprocess|"+r},l={cN:"symbol",b:"'"+t+"'"},c=[e.CLCM,e.CBCM,e.inherit(e.CNM,{b:e.CNR+"|(-?infinity|NaN)\\b"}),e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null}),{cN:"string",b:"`",e:"`"},{v:[{b:"[#$]"+t},{b:"#",e:"\\d+",i:"\\W"}]},{cN:"type",b:"::\\s*",e:t,i:"\\W"},{cN:"params",v:[{b:"-(?!infinity)"+t,r:0},{b:"(\\.\\.\\.)"}]},{b:/(->|\.)\s*/,r:0,c:[l]},{cN:"class",bK:"define",rE:!0,e:"\\(|=>",c:[e.inherit(e.TM,{b:t+"(=(?!>))?|[-+*/%](?!>)"})]}];return{aliases:["ls","lassoscript"],cI:!0,l:t+"|&[lg]t;",k:i,c:[{cN:"meta",b:a,r:0,starts:{e:"\\[|"+r,rE:!0,r:0,c:[n]}},o,s,{cN:"meta",b:"\\[no_square_brackets",starts:{e:"\\[/no_square_brackets\\]",l:t+"|&[lg]t;",k:i,c:[{cN:"meta",b:a,r:0,starts:{e:"\\[noprocess\\]|"+r,rE:!0,c:[n]}},o,s].concat(c)}},{cN:"meta",b:"\\[",r:0},{cN:"meta",b:"^#!",e:"lasso9$",r:10}].concat(c)}}),e.registerLanguage("ldif",function(e){return{c:[{cN:"attribute",b:"^dn",e:": ",eE:!0,starts:{e:"$",r:0},r:10},{cN:"attribute",b:"^\\w",e:": ",eE:!0,starts:{e:"$",r:0}},{cN:"literal",b:"^-",e:"$"},e.HCM]}}),e.registerLanguage("leaf",function(e){return{c:[{cN:"function",b:"#+[A-Za-z_0-9]*\\(",e:" {",rB:!0,eE:!0,c:[{cN:"keyword",b:"#+"},{cN:"title",b:"[A-Za-z_][A-Za-z_0-9]*"},{cN:"params",b:"\\(",e:"\\)",endsParent:!0,c:[{cN:"string",b:'"',e:'"'},{cN:"variable",b:"[A-Za-z_][A-Za-z_0-9]*"}]}]}]}}),e.registerLanguage("less",function(e){var t="[\\w-]+",r="("+t+"|@{"+t+"})",a=[],i=[],n=function(e){return{cN:"string",b:"~?"+e+".*?"+e}},o=function(e,t,r){return{cN:e,b:t,r:r}},s={b:"\\(",e:"\\)",c:i,r:0};i.push(e.CLCM,e.CBCM,n("'"),n('"'),e.CSSNM,{b:"(url|data-uri)\\(",starts:{cN:"string",e:"[\\)\\n]",eE:!0}},o("number","#[0-9A-Fa-f]+\\b"),s,o("variable","@@?"+t,10),o("variable","@{"+t+"}"),o("built_in","~?`[^`]*?`"),{cN:"attribute",b:t+"\\s*:",e:":",rB:!0,eE:!0},{cN:"meta",b:"!important"});var l=i.concat({b:"{",e:"}",c:a}),c={bK:"when",eW:!0,c:[{bK:"and not"}].concat(i)},d={b:r+"\\s*:",rB:!0,e:"[;}]",r:0,c:[{cN:"attribute",b:r,e:":",eE:!0,starts:{eW:!0,i:"[<=$]",r:0,c:i}}]},p={cN:"keyword",b:"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",starts:{e:"[;{}]",rE:!0,c:i,r:0}},m={cN:"variable",v:[{b:"@"+t+"\\s*:",r:15},{b:"@"+t}],starts:{e:"[;}]",rE:!0,c:l}},u={v:[{b:"[\\.#:&\\[>]",e:"[;{}]"},{b:r,e:"{"}],rB:!0,rE:!0,i:"[<='$\"]",r:0,c:[e.CLCM,e.CBCM,c,o("keyword","all\\b"),o("variable","@{"+t+"}"),o("selector-tag",r+"%?",0),o("selector-id","#"+r),o("selector-class","\\."+r,0),o("selector-tag","&",0),{cN:"selector-attr",b:"\\[",e:"\\]"},{cN:"selector-pseudo",b:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{b:"\\(",e:"\\)",c:l},{b:"!important"}]};return a.push(e.CLCM,e.CBCM,p,m,d,u),{cI:!0,i:"[=>'/<($\"]",c:a}}),e.registerLanguage("lisp",function(e){var t="[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*",r="\\|[^]*?\\|",a="(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?",i={cN:"meta",b:"^#!",e:"$"},n={cN:"literal",b:"\\b(t{1}|nil)\\b"},o={cN:"number",v:[{b:a,r:0},{b:"#(b|B)[0-1]+(/[0-1]+)?"},{b:"#(o|O)[0-7]+(/[0-7]+)?"},{b:"#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?"},{b:"#(c|C)\\("+a+" +"+a,e:"\\)"}]},s=e.inherit(e.QSM,{i:null}),l=e.C(";","$",{r:0}),c={b:"\\*",e:"\\*"},d={cN:"symbol",b:"[:&]"+t},p={b:t,r:0},m={b:r},u={b:"\\(",e:"\\)",c:["self",n,s,o,p]},b={c:[o,s,c,d,u,p],v:[{b:"['`]\\(",e:"\\)"},{b:"\\(quote ",e:"\\)",k:{name:"quote"}},{b:"'"+r}]},g={v:[{b:"'"+t},{b:"#'"+t+"(::"+t+")*"}]},f={b:"\\(\\s*",e:"\\)"},_={eW:!0,r:0};return f.c=[{cN:"name",v:[{b:t},{b:r}]},_],_.c=[b,g,f,n,o,s,l,c,d,m,p],{i:/\S/,c:[o,i,n,s,l,b,g,f,p]}}),e.registerLanguage("livecodeserver",function(e){var t={b:"\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+",r:0},r=[e.CBCM,e.HCM,e.C("--","$"),e.C("[^:]//","$")],a=e.inherit(e.TM,{v:[{b:"\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*"},{b:"\\b_[a-z0-9\\-]+"}]}),i=e.inherit(e.TM,{b:"\\b([A-Za-z0-9_\\-]+)\\b"});return{cI:!1,k:{keyword:"$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",literal:"SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",built_in:"put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract union unload wait write"},c:[t,{cN:"keyword",b:"\\bend\\sif\\b"},{cN:"function",bK:"function",e:"$",c:[t,i,e.ASM,e.QSM,e.BNM,e.CNM,a]},{cN:"function",b:"\\bend\\s+",e:"$",k:"end",c:[i,a],r:0},{bK:"command on",e:"$",c:[t,i,e.ASM,e.QSM,e.BNM,e.CNM,a]},{cN:"meta",v:[{b:"<\\?(rev|lc|livecode)",r:10},{b:"<\\?"},{b:"\\?>"}]},e.ASM,e.QSM,e.BNM,e.CNM,a].concat(r),i:";$|^\\[|^=|&|{"}}),e.registerLanguage("livescript",function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger case default function var with then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super case default function var void const let enum export import native __hasProp __extends __slice __bind __indexOf",literal:"true false null undefined yes no on off it that void",built_in:"npm require console print module global window document"},r="[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*",a=e.inherit(e.TM,{b:r}),i={cN:"subst",b:/#\{/,e:/}/,k:t},n={cN:"subst",b:/#[A-Za-z$_]/,e:/(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,k:t},o=[e.BNM,{cN:"number",b:"(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",r:0,starts:{e:"(\\s*/)?",r:0}},{cN:"string",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/"""/,e:/"""/,c:[e.BE,i,n]},{b:/"/,e:/"/,c:[e.BE,i,n]},{b:/\\/,e:/(\s|$)/,eE:!0}]},{cN:"regexp",v:[{b:"//",e:"//[gim]*",c:[i,e.HCM]},{b:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{b:"@"+r},{b:"``",e:"``",eB:!0,eE:!0,sL:"javascript"}];i.c=o;var s={cN:"params",b:"\\(",rB:!0,c:[{b:/\(/,e:/\)/,k:t,c:["self"].concat(o)}]};return{aliases:["ls"],k:t,i:/\/\*/,c:o.concat([e.C("\\/\\*","\\*\\/"),e.HCM,{cN:"function",c:[a,s],rB:!0,v:[{b:"("+r+"\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?",e:"\\->\\*?"},{b:"("+r+"\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?",e:"[-~]{1,2}>\\*?"},{b:"("+r+"\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?",e:"!?[-~]{1,2}>\\*?"}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[a]},a]},{b:r+":",e:":",rB:!0,rE:!0,r:0}])}}),e.registerLanguage("llvm",function(e){var t="([-a-zA-Z$._][\\w\\-$.]*)";return{k:"begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",c:[{cN:"keyword",b:"i\\d+"},e.C(";","\\n",{r:0}),e.QSM,{cN:"string",v:[{b:'"',e:'[^\\\\]"'}],r:0},{cN:"title",v:[{b:"@"+t},{b:"@\\d+"},{b:"!"+t},{b:"!\\d+"+t}]},{cN:"symbol",v:[{b:"%"+t},{b:"%\\d+"},{b:"#\\d+"}]},{cN:"number",v:[{b:"0[xX][a-fA-F0-9]+"},{b:"-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?"}],r:0}]}}),e.registerLanguage("lsl",function(e){var t={cN:"subst",b:/\\[tn"\\]/},r={cN:"string",b:'"',e:'"',c:[t]},a={cN:"number",b:e.CNR},i={cN:"literal",v:[{b:"\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b"},{b:"\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b"},{b:"\\b(?:FALSE|TRUE)\\b"},{b:"\\b(?:ZERO_ROTATION)\\b"},{b:"\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b"},{b:"\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b"}]},n={cN:"built_in",b:"\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"};return{i:":",c:[r,{cN:"comment",v:[e.C("//","$"),e.C("/\\*","\\*/")]},a,{cN:"section",v:[{b:"\\b(?:state|default)\\b"},{b:"\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b"}]},n,i,{cN:"type",b:"\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b"}]}}),e.registerLanguage("lua",function(e){var t="\\[=*\\[",r="\\]=*\\]",a={b:t,e:r,c:["self"]},i=[e.C("--(?!"+t+")","$"),e.C("--"+t,r,{c:[a],r:10})];return{l:e.UIR,k:{literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstringmodule next pairs pcall print rawequal rawget rawset require select setfenvsetmetatable tonumber tostring type unpack xpcall arg selfcoroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
},c:i.concat([{cN:"function",bK:"function",e:"\\)",c:[e.inherit(e.TM,{b:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{cN:"params",b:"\\(",eW:!0,c:i}].concat(i)},e.CNM,e.ASM,e.QSM,{cN:"string",b:t,e:r,c:[a],r:5}])}}),e.registerLanguage("makefile",function(e){var t={cN:"variable",v:[{b:"\\$\\("+e.UIR+"\\)",c:[e.BE]},{b:/\$[@%<?\^\+\*]/}]},r={cN:"string",b:/"/,e:/"/,c:[e.BE,t]},a={cN:"variable",b:/\$\([\w-]+\s/,e:/\)/,k:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},c:[t]},i={b:"^"+e.UIR+"\\s*[:+?]?=",i:"\\n",rB:!0,c:[{b:"^"+e.UIR,e:"[:+?]?=",eE:!0}]},n={cN:"meta",b:/^\.PHONY:/,e:/$/,k:{"meta-keyword":".PHONY"},l:/[\.\w]+/},o={cN:"section",b:/^[^\s]+:/,e:/$/,c:[t]};return{aliases:["mk","mak"],k:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",l:/[\w-]+/,c:[e.HCM,t,r,a,i,n,o]}}),e.registerLanguage("mathematica",function(e){return{aliases:["mma"],l:"(\\$|\\b)"+e.IR+"\\b",k:"AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine Transparent UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian XMLElement XMLObject Xnor Xor Yellow YuleDissimilarity ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform $Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber",
c:[{cN:"comment",b:/\(\*/,e:/\*\)/},e.ASM,e.QSM,e.CNM,{b:/\{/,e:/\}/,i:/:/}]}}),e.registerLanguage("matlab",function(e){var t=[e.CNM,{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]}],r={r:0,c:[{b:/'['\.]*/}]};return{k:{keyword:"break case catch classdef continue else elseif end enumerated events for function global if methods otherwise parfor persistent properties return spmd switch try while",built_in:"sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson"},i:'(//|"|#|/\\*|\\s+/\\w+)',c:[{cN:"function",bK:"function",e:"$",c:[e.UTM,{cN:"params",v:[{b:"\\(",e:"\\)"},{b:"\\[",e:"\\]"}]}]},{b:/[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,rB:!0,r:0,c:[{b:/[a-zA-Z_][a-zA-Z_0-9]*/,r:0},r.c[0]]},{b:"\\[",e:"\\]",c:t,r:0,starts:r},{b:"\\{",e:/}/,c:t,r:0,starts:r},{b:/\)/,r:0,starts:r},e.C("^\\s*\\%\\{\\s*$","^\\s*\\%\\}\\s*$"),e.C("\\%","$")].concat(t)}}),e.registerLanguage("maxima",function(e){var t="if then else elseif for thru do while unless step in and or not",r="true false unknown inf minf ind und %e %i %pi %phi %gamma",a=" abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest",i="_ __ %|0 %%|0";return{l:"[A-Za-z_%][0-9A-Za-z_%]*",k:{keyword:t,literal:r,built_in:a,symbol:i},c:[{cN:"comment",b:"/\\*",e:"\\*/",c:["self"]},e.QSM,{cN:"number",r:0,v:[{b:"\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"},{b:"\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",r:10},{b:"\\b(\\.\\d+|\\d+\\.\\d+)\\b"},{b:"\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"}]}],i:/@/}}),e.registerLanguage("mel",function(e){return{k:"int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
i:"</",c:[e.CNM,e.ASM,e.QSM,{cN:"string",b:"`",e:"`",c:[e.BE]},{b:"[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)"},e.CLCM,e.CBCM]}}),e.registerLanguage("mercury",function(e){var t={keyword:"module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",meta:"inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing",built_in:"some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"},r=e.C("%","$"),a={cN:"number",b:"0'.\\|0[box][0-9a-fA-F]*"},i=e.inherit(e.ASM,{r:0}),n=e.inherit(e.QSM,{r:0}),o={cN:"subst",b:"\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",r:0};n.c.push(o);var s={cN:"built_in",v:[{b:"<=>"},{b:"<=",r:0},{b:"=>",r:0},{b:"/\\\\"},{b:"\\\\/"}]},l={cN:"built_in",v:[{b:":-\\|-->"},{b:"=",r:0}]};return{aliases:["m","moo"],k:t,c:[s,l,r,e.CBCM,a,e.NM,i,n,{b:/:-/}]}}),e.registerLanguage("mipsasm",function(e){return{cI:!0,aliases:["mips"],l:"\\.?"+e.IR,k:{meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ",built_in:"$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "},c:[{cN:"keyword",b:"\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(.hb)?|jr(.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs.[sd]|add.[sd]|alnv.ps|bc1[ft]l?|c.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et]).[sd]|(ceil|floor|round|trunc).[lw].[sd]|cfc1|cvt.d.[lsw]|cvt.l.[dsw]|cvt.ps.s|cvt.s.[dlw]|cvt.s.p[lu]|cvt.w.[dls]|div.[ds]|ldx?c1|luxc1|lwx?c1|madd.[sd]|mfc1|mov[fntz]?.[ds]|msub.[sd]|mth?c1|mul.[ds]|neg.[ds]|nmadd.[ds]|nmsub.[ds]|p[lu][lu].ps|recip.fmt|r?sqrt.[ds]|sdx?c1|sub.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",e:"\\s"},e.C("[;#]","$"),e.CBCM,e.QSM,{cN:"string",b:"'",e:"[^\\\\]'",r:0},{cN:"title",b:"\\|",e:"\\|",i:"\\n",r:0},{cN:"number",v:[{b:"0x[0-9a-f]+"},{b:"\\b-?\\d+"}],r:0},{cN:"symbol",v:[{b:"^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{b:"^\\s*[0-9]+:"},{b:"[0-9]+[bf]"}],r:0}],i:"/"}}),e.registerLanguage("mizar",function(e){return{k:"environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",c:[e.C("::","$")]}}),e.registerLanguage("perl",function(e){var t="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",r={cN:"subst",b:"[$@]\\{",e:"\\}",k:t},a={b:"->{",e:"}"},i={v:[{b:/\$\d/},{b:/[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},{b:/[\$%@][^\s\w{]/,r:0}]},n=[e.BE,r,i],o=[i,e.HCM,e.C("^\\=\\w","\\=cut",{eW:!0}),a,{cN:"string",c:n,v:[{b:"q[qwxr]?\\s*\\(",e:"\\)",r:5},{b:"q[qwxr]?\\s*\\[",e:"\\]",r:5},{b:"q[qwxr]?\\s*\\{",e:"\\}",r:5},{b:"q[qwxr]?\\s*\\|",e:"\\|",r:5},{b:"q[qwxr]?\\s*\\<",e:"\\>",r:5},{b:"qw\\s+q",e:"q",r:5},{b:"'",e:"'",c:[e.BE]},{b:'"',e:'"'},{b:"`",e:"`",c:[e.BE]},{b:"{\\w+}",c:[],r:0},{b:"-?\\w+\\s*\\=\\>",c:[],r:0}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\/\\/|"+e.RSR+"|\\b(split|return|print|reverse|grep)\\b)\\s*",k:"split return print reverse grep",r:0,c:[e.HCM,{cN:"regexp",b:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",r:10},{cN:"regexp",b:"(m|qr)?/",e:"/[a-z]*",c:[e.BE],r:0}]},{cN:"function",bK:"sub",e:"(\\s*\\(.*?\\))?[;{]",eE:!0,r:5,c:[e.TM]},{b:"-\\w\\b",r:0},{b:"^__DATA__$",e:"^__END__$",sL:"mojolicious",c:[{b:"^@@.*",e:"$",cN:"comment"}]}];return r.c=o,a.c=o,{aliases:["pl","pm"],l:/[\w\.]+/,k:t,c:o}}),e.registerLanguage("mojolicious",function(e){return{sL:"xml",c:[{cN:"meta",b:"^__(END|DATA)__$"},{b:"^\\s*%{1,2}={0,2}",e:"$",sL:"perl"},{b:"<%{1,2}={0,2}",e:"={0,1}%>",sL:"perl",eB:!0,eE:!0}]}}),e.registerLanguage("monkey",function(e){var t={cN:"number",r:0,v:[{b:"[$][a-fA-F0-9]+"},e.NM]};return{cI:!0,k:{keyword:"public private property continue exit extern new try catch eachin not abstract final select case default const local global field end if then else elseif endif while wend repeat until forever for to step next return module inline throw import",built_in:"DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI",literal:"true false null and or shl shr mod"},i:/\/\*/,c:[e.C("#rem","#end"),e.C("'","$",{r:0}),{cN:"function",bK:"function method",e:"[(=:]|$",i:/\n/,c:[e.UTM]},{cN:"class",bK:"class interface",e:"$",c:[{bK:"extends implements"},e.UTM]},{cN:"built_in",b:"\\b(self|super)\\b"},{cN:"meta",b:"\\s*#",e:"$",k:{"meta-keyword":"if else elseif endif end then"}},{cN:"meta",b:"^\\s*strict\\b"},{bK:"alias",e:"=",c:[e.UTM]},e.QSM,t]}}),e.registerLanguage("moonscript",function(e){var t={keyword:"if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using",literal:"true false nil",built_in:"_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"},r="[A-Za-z$_][0-9A-Za-z$_]*",a={cN:"subst",b:/#\{/,e:/}/,k:t},i=[e.inherit(e.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'/,e:/'/,c:[e.BE]},{b:/"/,e:/"/,c:[e.BE,a]}]},{cN:"built_in",b:"@__"+e.IR},{b:"@"+e.IR},{b:e.IR+"\\\\"+e.IR}];a.c=i;var n=e.inherit(e.TM,{b:r}),o="(\\(.*\\))?\\s*\\B[-=]>",s={cN:"params",b:"\\([^\\(]",rB:!0,c:[{b:/\(/,e:/\)/,k:t,c:["self"].concat(i)}]};return{aliases:["moon"],k:t,i:/\/\*/,c:i.concat([e.C("--","$"),{cN:"function",b:"^\\s*"+r+"\\s*=\\s*"+o,e:"[-=]>",rB:!0,c:[n,s]},{b:/[\(,:=]\s*/,r:0,c:[{cN:"function",b:o,e:"[-=]>",rB:!0,c:[s]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[n]},n]},{cN:"name",b:r+":",e:":",rB:!0,rE:!0,r:0}])}}),e.registerLanguage("n1ql",function(e){return{cI:!0,c:[{bK:"build create index delete drop explain infer|10 insert merge prepare select update upsert|10",e:/;/,eW:!0,k:{keyword:"all alter analyze and any array as asc begin between binary boolean break bucket build by call case cast cluster collate collection commit connect continue correlate cover create database dataset datastore declare decrement delete derived desc describe distinct do drop each element else end every except exclude execute exists explain fetch first flatten for force from function grant group gsi having if ignore ilike in include increment index infer inline inner insert intersect into is join key keys keyspace known last left let letting like limit lsm map mapping matched materialized merge minus namespace nest not number object offset on option or order outer over parse partition password path pool prepare primary private privilege procedure public raw realm reduce rename return returning revoke right role rollback satisfies schema select self semi set show some start statistics string system then to transaction trigger truncate under union unique unknown unnest unset update upsert use user using validate value valued values via view when where while with within work xor",literal:"true false null missing|5",built_in:"array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring"},c:[{cN:"string",b:"'",e:"'",c:[e.BE],r:0},{cN:"string",b:'"',e:'"',c:[e.BE],r:0},{cN:"symbol",b:"`",e:"`",c:[e.BE],r:2},e.CNM,e.CBCM]},e.CBCM]}}),e.registerLanguage("nginx",function(e){var t={cN:"variable",v:[{b:/\$\d+/},{b:/\$\{/,e:/}/},{b:"[\\$\\@]"+e.UIR}]},r={eW:!0,l:"[a-z/_]+",k:{literal:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},r:0,i:"=>",c:[e.HCM,{cN:"string",c:[e.BE,t],v:[{b:/"/,e:/"/},{b:/'/,e:/'/}]},{b:"([a-z]+):/",e:"\\s",eW:!0,eE:!0,c:[t]},{cN:"regexp",c:[e.BE,t],v:[{b:"\\s\\^",e:"\\s|{|;",rE:!0},{b:"~\\*?\\s+",e:"\\s|{|;",rE:!0},{b:"\\*(\\.[a-z\\-]+)+"},{b:"([a-z\\-]+\\.)+\\*"}]},{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+[kKmMgGdshdwy]*\\b",r:0},t]};return{aliases:["nginxconf"],c:[e.HCM,{b:e.UIR+"\\s+{",rB:!0,e:"{",c:[{cN:"section",b:e.UIR}],r:0},{b:e.UIR+"\\s",e:";|{",rB:!0,c:[{cN:"attribute",b:e.UIR,starts:r}],r:0}],i:"[^\\s\\}]"}}),e.registerLanguage("nimrod",function(e){return{aliases:["nim"],k:{keyword:"addr and as asm bind block break case cast const continue converter discard distinct div do elif else end enum except export finally for from generic if import in include interface is isnot iterator let macro method mixin mod nil not notin object of or out proc ptr raise ref return shl shr static template try tuple type using var when while with without xor yield",literal:"shared guarded stdin stdout stderr result true false",built_in:"int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float float32 float64 bool char string cstring pointer expr stmt void auto any range array openarray varargs seq set clong culong cchar cschar cshort cint csize clonglong cfloat cdouble clongdouble cuchar cushort cuint culonglong cstringarray semistatic"},c:[{cN:"meta",b:/{\./,e:/\.}/,r:10},{cN:"string",b:/[a-zA-Z]\w*"/,e:/"/,c:[{b:/""/}]},{cN:"string",b:/([a-zA-Z]\w*)?"""/,e:/"""/},e.QSM,{cN:"type",b:/\b[A-Z]\w+\b/,r:0},{cN:"number",r:0,v:[{b:/\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},{b:/\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},{b:/\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},{b:/\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/}]},e.HCM]}}),e.registerLanguage("nix",function(e){var t={keyword:"rec with let in inherit assert if else then",literal:"true false or and null",built_in:"import abort baseNameOf dirOf isNull builtins map removeAttrs throw toString derivation"},r={cN:"subst",b:/\$\{/,e:/}/,k:t},a={b:/[a-zA-Z0-9-_]+(\s*=)/,rB:!0,r:0,c:[{cN:"attr",b:/\S+/}]},i={cN:"string",c:[r],v:[{b:"''",e:"''"},{b:'"',e:'"'}]},n=[e.NM,e.HCM,e.CBCM,i,a];return r.c=n,{aliases:["nixos"],k:t,c:n}}),e.registerLanguage("nsis",function(e){var t={cN:"variable",b:/\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/},r={cN:"variable",b:/\$+{[\w\.:-]+}/},a={cN:"variable",b:/\$+\w+/,i:/\(\){}/},i={cN:"variable",b:/\$+\([\w\^\.:-]+\)/},n={cN:"params",b:"(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)"},o={cN:"keyword",b:/\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversionsystem|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|searchparse|searchreplace|tempfile|undef|verbose|warning)/},s={cN:"subst",b:/\$(\\[nrt]|\$)/},l={cN:"class",b:/\w+\:\:\w+/},c={cN:"string",v:[{b:'"',e:'"'},{b:"'",e:"'"},{b:"`",e:"`"}],i:/\n/,c:[s,t,r,a,i]};return{cI:!1,k:{keyword:"Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText IntCmp IntCmpU IntFmt IntOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegStr WriteUninstaller XPStyle",literal:"admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib"},c:[e.HCM,e.CBCM,e.C(";","$",{r:0}),{cN:"function",bK:"Function PageEx Section SectionGroup",e:"$"},c,o,r,a,i,n,l,e.NM]}}),e.registerLanguage("objectivec",function(e){var t={cN:"built_in",b:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},r={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},a=/[a-zA-Z@][a-zA-Z0-9_]*/,i="@interface @class @protocol @implementation";return{aliases:["mm","objc","obj-c"],k:r,l:a,i:"</",c:[t,e.CLCM,e.CBCM,e.CNM,e.QSM,{cN:"string",v:[{b:'@"',e:'"',i:"\\n",c:[e.BE]},{b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"}]},{cN:"meta",b:"#",e:"$",c:[{cN:"meta-string",v:[{b:'"',e:'"'},{b:"<",e:">"}]}]},{cN:"class",b:"("+i.split(" ").join("|")+")\\b",e:"({|$)",eE:!0,k:i,l:a,c:[e.UTM]},{b:"\\."+e.UIR,r:0}]}}),e.registerLanguage("ocaml",function(e){return{aliases:["ml"],k:{keyword:"and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",built_in:"array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref",literal:"true false"},i:/\/\/|>>/,l:"[a-z_]\\w*!?",c:[{cN:"literal",b:"\\[(\\|\\|)?\\]|\\(\\)",r:0},e.C("\\(\\*","\\*\\)",{c:["self"]}),{cN:"symbol",b:"'[A-Za-z_](?!')[\\w']*"},{cN:"type",b:"`[A-Z][\\w']*"},{cN:"type",b:"\\b[A-Z][\\w']*",r:0},{b:"[a-z_]\\w*'[\\w']*",r:0},e.inherit(e.ASM,{cN:"string",r:0}),e.inherit(e.QSM,{i:null}),{cN:"number",b:"\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",r:0},{b:/[-=]>/}]}}),e.registerLanguage("openscad",function(e){var t={cN:"keyword",b:"\\$(f[asn]|t|vp[rtd]|children)"},r={cN:"literal",b:"false|true|PI|undef"},a={cN:"number",b:"\\b\\d+(\\.\\d+)?(e-?\\d+)?",r:0},i=e.inherit(e.QSM,{i:null}),n={cN:"meta",k:{"meta-keyword":"include use"},b:"include|use <",e:">"},o={cN:"params",b:"\\(",e:"\\)",c:["self",a,i,t,r]},s={b:"[*!#%]",r:0},l={cN:"function",bK:"module function",e:"\\=|\\{",c:[o,e.UTM]};return{aliases:["scad"],k:{keyword:"function module include use for intersection_for if else \\%",literal:"false true PI undef",built_in:"circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"},c:[e.CLCM,e.CBCM,a,n,i,t,s,l]}}),e.registerLanguage("oxygene",function(e){var t="abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained",r=e.C("{","}",{r:0}),a=e.C("\\(\\*","\\*\\)",{r:10}),i={cN:"string",b:"'",e:"'",c:[{b:"''"}]},n={cN:"string",b:"(#\\d+)+"},o={cN:"function",bK:"function constructor destructor procedure method",e:"[:;]",k:"function constructor|10 destructor|10 procedure|10 method|10",c:[e.TM,{cN:"params",b:"\\(",e:"\\)",k:t,c:[i,n]},r,a]};return{cI:!0,l:/\.?\w+/,k:t,i:'("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',c:[r,a,e.CLCM,i,n,e.NM,o,{cN:"class",b:"=\\bclass\\b",e:"end;",k:t,c:[i,n,r,a,e.CLCM,o]}]}}),e.registerLanguage("parser3",function(e){var t=e.C("{","}",{c:["self"]});return{sL:"xml",r:0,c:[e.C("^#","$"),e.C("\\^rem{","}",{r:10,c:[t]}),{cN:"meta",b:"^@(?:BASE|USE|CLASS|OPTIONS)$",r:10},{cN:"title",b:"@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"},{cN:"variable",b:"\\$\\{?[\\w\\-\\.\\:]+\\}?"},{cN:"keyword",b:"\\^[\\w\\-\\.\\:]+"},{cN:"number",b:"\\^#[0-9a-fA-F]+"},e.CNM]}}),e.registerLanguage("pf",function(e){var t={cN:"variable",b:/\$[\w\d#@][\w\d_]*/},r={cN:"variable",b:/<(?!\/)/,e:/>/};return{aliases:["pf.conf"],l:/[a-z0-9_<>-]+/,k:{built_in:"block match pass load anchor|5 antispoof|10 set table",keyword:"in out log quick on rdomain inet inet6 proto from port os to routeallow-opts divert-packet divert-reply divert-to flags group icmp-typeicmp6-type label once probability recieved-on rtable prio queuetos tag tagged user keep fragment for os dropaf-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robinsource-hash static-portdup-to reply-to route-toparent bandwidth default min max qlimitblock-policy debug fingerprints hostid limit loginterface optimizationreassemble ruleset-optimization basic none profile skip state-defaultsstate-policy timeoutconst counters persistno modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppysource-track global rule max-src-nodes max-src-states max-src-connmax-src-conn-rate overload flushscrub|5 max-mss min-ttl no-df|10 random-id",literal:"all any no-route self urpf-failed egress|5 unknown"},c:[e.HCM,e.NM,e.QSM,t,r]}}),e.registerLanguage("php",function(e){var t={b:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},r={cN:"meta",b:/<\?(php)?|\?>/},a={cN:"string",c:[e.BE,r],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},i={v:[e.BNM,e.CNM]};return{aliases:["php3","php4","php5","php6"],cI:!0,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",c:[e.HCM,e.C("//","$",{c:[r]}),e.C("/\\*","\\*/",{c:[{cN:"doctag",b:"@[A-Za-z]+"}]}),e.C("__halt_compiler.+?;",!1,{eW:!0,k:"__halt_compiler",l:e.UIR}),{cN:"string",b:/<<<['"]?\w+['"]?$/,e:/^\w+;?$/,c:[e.BE,{cN:"subst",v:[{b:/\$\w+/},{b:/\{\$/,e:/\}/}]}]},r,{cN:"keyword",b:/\$this\b/},t,{b:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{cN:"function",bK:"function",e:/[;{]/,eE:!0,i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",t,e.CBCM,a,i]}]},{cN:"class",bK:"class interface",e:"{",eE:!0,i:/[:\(\$"]/,c:[{bK:"extends implements"},e.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[e.UTM]},{bK:"use",e:";",c:[e.UTM]},{b:"=>"},a,i]}}),e.registerLanguage("pony",function(e){var t={keyword:"actor addressof and as be break class compile_error compile_intrinsicconsume continue delegate digestof do else elseif embed end errorfor fun if ifdef in interface is isnt lambda let match new not objector primitive recover repeat return struct then trait try type until use var where while with xor",meta:"iso val tag trn box ref",literal:"this false true"},r={cN:"string",b:'"""',e:'"""',r:10},a={cN:"string",b:'"',e:'"',c:[e.BE]},i={cN:"string",b:"'",e:"'",c:[e.BE],r:0},n={cN:"type",b:"\\b_?[A-Z][\\w]*",r:0},o={b:e.IR+"'",r:0},s={cN:"class",bK:"class actor",e:"$",c:[e.TM,e.CLCM]},l={cN:"function",bK:"new fun",e:"=>",c:[e.TM,{b:/\(/,e:/\)/,c:[n,o,e.CNM,e.CBCM]},{b:/:/,eW:!0,c:[n]},e.CLCM]};return{k:t,c:[s,l,n,r,a,i,o,e.CNM,e.CLCM,e.CBCM]}}),e.registerLanguage("powershell",function(e){var t={b:"`[\\s\\S]",r:0},r={cN:"variable",v:[{b:/\$[\w\d][\w\d_:]*/}]},a={cN:"literal",b:/\$(null|true|false)\b/},i={cN:"string",v:[{b:/"/,e:/"/},{b:/@"/,e:/^"@/}],c:[t,r,{cN:"variable",b:/\$[A-z]/,e:/[^A-z]/}]},n={cN:"string",v:[{b:/'/,e:/'/},{b:/@'/,e:/^'@/}]},o={cN:"doctag",v:[{b:/\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/},{b:/\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/}]},s=e.inherit(e.C(null,null),{v:[{b:/#/,e:/$/},{b:/<#/,e:/#>/}],c:[o]});return{aliases:["ps"],l:/-?[A-z\.\-]+/,cI:!0,k:{keyword:"if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch",built_in:"Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct",
nomarkup:"-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace"},c:[t,e.NM,i,n,a,r,s]}}),e.registerLanguage("processing",function(e){return{k:{keyword:"BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject Object StringDict StringList Table TableRow XML false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",literal:"P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI",title:"setup draw",built_in:"displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key keyCode pixels focused frameCount frameRate height width size createGraphics beginDraw createShape loadShape PShape arc ellipse line point quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour millis minute month second year background clear colorMode fill noFill noStroke stroke alpha blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed"},c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM]}}),e.registerLanguage("profile",function(e){return{c:[e.CNM,{b:"[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",e:":",eE:!0},{b:"(ncalls|tottime|cumtime)",e:"$",k:"ncalls tottime|10 cumtime|10 filename",r:10},{b:"function calls",e:"$",c:[e.CNM],r:10},e.ASM,e.QSM,{cN:"string",b:"\\(",e:"\\)$",eB:!0,eE:!0,r:0}]}}),e.registerLanguage("prolog",function(e){var t={b:/[a-z][A-Za-z0-9_]*/,r:0},r={cN:"symbol",v:[{b:/[A-Z][a-zA-Z0-9_]*/},{b:/_[A-Za-z0-9_]*/}],r:0},a={b:/\(/,e:/\)/,r:0},i={b:/\[/,e:/\]/},n={cN:"comment",b:/%/,e:/$/,c:[e.PWM]},o={cN:"string",b:/`/,e:/`/,c:[e.BE]},s={cN:"string",b:/0\'(\\\'|.)/},l={cN:"string",b:/0\'\\s/},c={b:/:-/},d=[t,r,a,c,i,n,e.CBCM,e.QSM,e.ASM,o,s,l,e.CNM];return a.c=d,i.c=d,{c:d.concat([{b:/\.$/}])}}),e.registerLanguage("protobuf",function(e){return{k:{keyword:"package import option optional required repeated group",built_in:"double float int32 int64 uint32 uint64 sint32 sint64 fixed32 fixed64 sfixed32 sfixed64 bool string bytes",literal:"true false"},c:[e.QSM,e.NM,e.CLCM,{cN:"class",bK:"message enum service",e:/\{/,i:/\n/,c:[e.inherit(e.TM,{starts:{eW:!0,eE:!0}})]},{cN:"function",bK:"rpc",e:/;/,eE:!0,k:"rpc returns"},{b:/^\s*[A-Z_]+/,e:/\s*=/,eE:!0}]}}),e.registerLanguage("puppet",function(e){var t={keyword:"and case default else elsif false if in import enherits node or true undef unless main settings $string ",literal:"alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted",built_in:"architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"},r=e.C("#","$"),a="([A-Za-z_]|::)(\\w|::)*",i=e.inherit(e.TM,{b:a}),n={cN:"variable",b:"\\$"+a},o={cN:"string",c:[e.BE,n],v:[{b:/'/,e:/'/},{b:/"/,e:/"/}]};return{aliases:["pp"],c:[r,n,o,{bK:"class",e:"\\{|;",i:/=/,c:[i,r]},{bK:"define",e:/\{/,c:[{cN:"section",b:e.IR,endsParent:!0}]},{b:e.IR+"\\s+\\{",rB:!0,e:/\S/,c:[{cN:"keyword",b:e.IR},{b:/\{/,e:/\}/,k:t,r:0,c:[o,r,{b:"[a-zA-Z_]+\\s*=>",rB:!0,e:"=>",c:[{cN:"attr",b:e.IR}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},n]}],r:0}]}}),e.registerLanguage("purebasic",function(e){var t={cN:"string",b:'(~)?"',e:'"',i:"\\n"},r={cN:"symbol",b:"#[a-zA-Z_]\\w*\\$?"};return{aliases:["pb","pbi"],k:"And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro NewList Not Or ProcedureReturn Protected Prototype PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion Swap To Wend While With XIncludeFile XOr Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL",c:[e.C(";","$",{r:0}),{cN:"function",b:"\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",e:"\\(",eE:!0,rB:!0,c:[{cN:"keyword",b:"(Procedure|Declare)(C|CDLL|DLL)?",eE:!0},{cN:"type",b:"\\.\\w*"},e.UTM]},t,r]}}),e.registerLanguage("python",function(e){var t={keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},r={cN:"meta",b:/^(>>>|\.\.\.) /},a={cN:"subst",b:/\{/,e:/\}/,k:t,i:/#/},i={cN:"string",c:[e.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,c:[r],r:10},{b:/(u|b)?r?"""/,e:/"""/,c:[r],r:10},{b:/(fr|rf|f)'''/,e:/'''/,c:[r,a]},{b:/(fr|rf|f)"""/,e:/"""/,c:[r,a]},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},{b:/(fr|rf|f)'/,e:/'/,c:[a]},{b:/(fr|rf|f)"/,e:/"/,c:[a]},e.ASM,e.QSM]},n={cN:"number",r:0,v:[{b:e.BNR+"[lLjJ]?"},{b:"\\b(0o[0-7]+)[lLjJ]?"},{b:e.CNR+"[lLjJ]?"}]},o={cN:"params",b:/\(/,e:/\)/,c:["self",r,n,i]};return a.c=[i,n,r],{aliases:["py","gyp"],k:t,i:/(<\/|->|\?)|=>/,c:[r,n,i,e.HCM,{v:[{cN:"function",bK:"def"},{cN:"class",bK:"class"}],e:/:/,i:/[${=;\n,]/,c:[e.UTM,o,{b:/->/,eW:!0,k:"None"}]},{cN:"meta",b:/^[\t ]*@/,e:/$/},{b:/\b(print|exec)\(/}]}}),e.registerLanguage("q",function(e){var t={keyword:"do while select delete by update from",literal:"0b 1b",built_in:"neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",type:"`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"};return{aliases:["k","kdb"],k:t,l:/(`?)[A-Za-z0-9_]+\b/,c:[e.CLCM,e.QSM,e.CNM]}}),e.registerLanguage("qml",function(e){var t={keyword:"in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4dPromise"},r="[a-zA-Z_][a-zA-Z0-9\\._]*",a={cN:"keyword",b:"\\bproperty\\b",starts:{cN:"string",e:"(:|=|;|,|//|/\\*|$)",rE:!0}},i={cN:"keyword",b:"\\bsignal\\b",starts:{cN:"string",e:"(\\(|:|=|;|,|//|/\\*|$)",rE:!0}},n={cN:"attribute",b:"\\bid\\s*:",starts:{cN:"string",e:r,rE:!1}},o={b:r+"\\s*:",rB:!0,c:[{cN:"attribute",b:r,e:"\\s*:",eE:!0,r:0}],r:0},s={b:r+"\\s*{",e:"{",rB:!0,r:0,c:[e.inherit(e.TM,{b:r})]};return{aliases:["qt"],cI:!1,k:t,c:[{cN:"meta",b:/^\s*['"]use (strict|asm)['"]/},e.ASM,e.QSM,{cN:"string",b:"`",e:"`",c:[e.BE,{cN:"subst",b:"\\$\\{",e:"\\}"}]},e.CLCM,e.CBCM,{cN:"number",v:[{b:"\\b(0[bB][01]+)"},{b:"\\b(0[oO][0-7]+)"},{b:e.CNR}],r:0},{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{b:/</,e:/>\s*[);\]]/,r:0,sL:"xml"}],r:0},i,a,{cN:"function",bK:"function",e:/\{/,eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,c:[e.CLCM,e.CBCM]}],i:/\[|%/},{b:"\\."+e.IR,r:0},n,o,s],i:/#/}}),e.registerLanguage("r",function(e){var t="([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*";return{c:[e.HCM,{b:t,l:t,k:{keyword:"function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ...",literal:"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"},r:0},{cN:"number",b:"0[xX][0-9a-fA-F]+[Li]?\\b",r:0},{cN:"number",b:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",r:0},{cN:"number",b:"\\d+\\.(?!\\d)(?:i\\b)?",r:0},{cN:"number",b:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",r:0},{cN:"number",b:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",r:0},{b:"`",e:"`",r:0},{cN:"string",c:[e.BE],v:[{b:'"',e:'"'},{b:"'",e:"'"}]}]}}),e.registerLanguage("rib",function(e){return{k:"ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",i:"</",c:[e.HCM,e.CNM,e.ASM,e.QSM]}}),e.registerLanguage("roboconf",function(e){var t="[a-zA-Z-_][^\\n{]+\\{",r={cN:"attribute",b:/[a-zA-Z-_]+/,e:/\s*:/,eE:!0,starts:{e:";",r:0,c:[{cN:"variable",b:/\.[a-zA-Z-_]+/},{cN:"keyword",b:/\(optional\)/}]}};return{aliases:["graph","instances"],cI:!0,k:"import",c:[{b:"^facet "+t,e:"}",k:"facet",c:[r,e.HCM]},{b:"^\\s*instance of "+t,e:"}",k:"name count channels instance-data instance-state instance of",i:/\S/,c:["self",r,e.HCM]},{b:"^"+t,e:"}",c:[r,e.HCM]},e.HCM]}}),e.registerLanguage("routeros",function(e){var t="foreach do while for if from to step else on-error and or not in",r="global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime",a="add remove enable disable set get print export edit find run debug error info warning",i="true false yes no nothing nil null",n="traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw",o={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)}/}]},s={cN:"string",b:/"/,e:/"/,c:[e.BE,o,{cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]}]},l={cN:"string",b:/'/,e:/'/};return{aliases:["routeros","mikrotik"],cI:!0,l:/:?[\w-]+/,k:{literal:i,keyword:t+" :"+t.split(" ").join(" :")+" :"+r.split(" ").join(" :")},c:[{v:[{b:/^@/,e:/$/},{b:/\/\*/,e:/\*\//},{b:/%%/,e:/$/},{b:/^'/,e:/$/},{b:/^\s*\/[\w-]+=/,e:/$/},{b:/\/\//,e:/$/},{b:/^\[\</,e:/\>\]$/},{b:/<\//,e:/>/},{b:/^facet /,e:/\}/},{b:"^1\\.\\.(\\d+)$",e:/$/}],i:/./},e.C("^#","$"),s,l,o,{b:/[\w-]+\=([^\s\{\}\[\]\(\)]+)/,r:0,rB:!0,c:[{cN:"attribute",b:/[^=]+/},{b:/=/,eW:!0,r:0,c:[s,l,o,{cN:"literal",b:"\\b("+i.split(" ").join("|")+")\\b"},{b:/("[^"]*"|[^\s\{\}\[\]]+)/}]}]},{cN:"number",b:/\*[0-9a-fA-F]+/},{b:"\\b("+a.split(" ").join("|")+")([\\s[(]|])",rB:!0,c:[{cN:"builtin-name",b:/\w+/}]},{cN:"built_in",v:[{b:"(\\.\\./|/|\\s)(("+n.split(" ").join("|")+");?\\s)+",r:10},{b:/\.\./}]}]}}),e.registerLanguage("rsl",function(e){return{k:{keyword:"float color point normal vector matrix while for if do return else break extern continue",built_in:"abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp faceforward filterstep floor format fresnel incident length lightsource log match max min mod noise normalize ntransform opposite option phong pnoise pow printf ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan texture textureinfo trace transform vtransform xcomp ycomp zcomp"},i:"</",c:[e.CLCM,e.CBCM,e.QSM,e.ASM,e.CNM,{cN:"meta",b:"#",e:"$"},{cN:"class",bK:"surface displacement light volume imager",e:"\\("},{bK:"illuminate illuminance gather",e:"\\("}]}}),e.registerLanguage("ruleslanguage",function(e){return{k:{keyword:"BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",built_in:"IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"},c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM,{cN:"literal",v:[{b:"#\\s+[a-zA-Z\\ \\.]*",r:0},{b:"#[a-zA-Z\\ \\.]+"}]}]}}),e.registerLanguage("rust",function(e){var t="([ui](8|16|32|64|128|size)|f(32|64))?",r="alignof as be box break const continue crate do else enum extern false fn for if impl in let loop match mod mut offsetof once priv proc pub pure ref return self Self sizeof static struct super trait true type typeof unsafe unsized use virtual while where yield move default",a="drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";return{aliases:["rs"],k:{keyword:r,literal:"true false Some None Ok Err",built_in:a},l:e.IR+"!?",i:"</",c:[e.CLCM,e.C("/\\*","\\*/",{c:["self"]}),e.inherit(e.QSM,{b:/b?"/,i:null}),{cN:"string",v:[{b:/r(#*)"(.|\n)*?"\1(?!#)/},{b:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{cN:"symbol",b:/'[a-zA-Z_][a-zA-Z0-9_]*/},{cN:"number",v:[{b:"\\b0b([01_]+)"+t},{b:"\\b0o([0-7_]+)"+t},{b:"\\b0x([A-Fa-f0-9_]+)"+t},{b:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+t}],r:0},{cN:"function",bK:"fn",e:"(\\(|<)",eE:!0,c:[e.UTM]},{cN:"meta",b:"#\\!?\\[",e:"\\]",c:[{cN:"meta-string",b:/"/,e:/"/}]},{cN:"class",bK:"type",e:";",c:[e.inherit(e.UTM,{endsParent:!0})],i:"\\S"},{cN:"class",bK:"trait enum struct union",e:"{",c:[e.inherit(e.UTM,{endsParent:!0})],i:"[\\w\\d]"},{b:e.IR+"::",k:{built_in:a}},{b:"->"}]}}),e.registerLanguage("scala",function(e){var t={cN:"meta",b:"@[A-Za-z]+"},r={cN:"subst",v:[{b:"\\$[A-Za-z0-9_]+"},{b:"\\${",e:"}"}]},a={cN:"string",v:[{b:'"',e:'"',i:"\\n",c:[e.BE]},{b:'"""',e:'"""',r:10},{b:'[a-z]+"',e:'"',i:"\\n",c:[e.BE,r]},{cN:"string",b:'[a-z]+"""',e:'"""',c:[r],r:10}]},i={cN:"symbol",b:"'\\w[\\w\\d_]*(?!')"},n={cN:"type",b:"\\b[A-Z][A-Za-z0-9_]*",r:0},o={cN:"title",b:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,r:0},s={cN:"class",bK:"class object trait type",e:/[:={\[\n;]/,eE:!0,c:[{bK:"extends with",r:10},{b:/\[/,e:/\]/,eB:!0,eE:!0,r:0,c:[n]},{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,r:0,c:[n]},o]},l={cN:"function",bK:"def",e:/[:={\[(\n;]/,eE:!0,c:[o]};return{k:{literal:"true false null",keyword:"type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit"},c:[e.CLCM,e.CBCM,a,i,n,l,s,e.CNM,t]}}),e.registerLanguage("scheme",function(e){var t="[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",r="(\\-|\\+)?\\d+([./]\\d+)?",a=r+"[+\\-]"+r+"i",i={"builtin-name":"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"},n={cN:"meta",b:"^#!",e:"$"},o={cN:"literal",b:"(#t|#f|#\\\\"+t+"|#\\\\.)"},s={cN:"number",v:[{b:r,r:0},{b:a,r:0},{b:"#b[0-1]+(/[0-1]+)?"},{b:"#o[0-7]+(/[0-7]+)?"},{b:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},l=e.QSM,c=[e.C(";","$",{r:0}),e.C("#\\|","\\|#")],d={b:t,r:0},p={cN:"symbol",b:"'"+t},m={eW:!0,r:0},u={v:[{b:/'/},{b:"`"}],c:[{b:"\\(",e:"\\)",c:["self",o,l,s,d,p]}]},b={cN:"name",b:t,l:t,k:i},g={b:/lambda/,eW:!0,rB:!0,c:[b,{b:/\(/,e:/\)/,endsParent:!0,c:[d]}]},f={v:[{b:"\\(",e:"\\)"},{b:"\\[",e:"\\]"}],c:[g,b,m]};return m.c=[o,s,l,d,p,u,f].concat(c),{i:/\S/,c:[n,s,l,p,u,f].concat(c)}}),e.registerLanguage("scilab",function(e){var t=[e.CNM,{cN:"string",b:"'|\"",e:"'|\"",c:[e.BE,{b:"''"}]}];return{aliases:["sci"],l:/%?\w+/,k:{keyword:"abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",literal:"%f %F %t %T %pi %eps %inf %nan %e %i %z %s",built_in:"abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"},i:'("|#|/\\*|\\s+/\\w+)',c:[{cN:"function",bK:"function",e:"$",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)"}]},{b:"[a-zA-Z_][a-zA-Z_0-9]*('+[\\.']*|[\\.']+)",e:"",r:0},{b:"\\[",e:"\\]'*[\\.']*",r:0,c:t},e.C("//","$")].concat(t)}}),e.registerLanguage("scss",function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",r={cN:"variable",b:"(\\$"+t+")\\b"},a={cN:"number",b:"#[0-9A-Fa-f]+"};({cN:"attribute",b:"[A-Z\\_\\.\\-]+",e:":",eE:!0,i:"[^\\s]",starts:{eW:!0,eE:!0,c:[a,e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:"meta",b:"!important"}]}});return{cI:!0,i:"[=/|']",c:[e.CLCM,e.CBCM,{cN:"selector-id",b:"\\#[A-Za-z0-9_-]+",r:0},{cN:"selector-class",b:"\\.[A-Za-z0-9_-]+",r:0},{cN:"selector-attr",b:"\\[",e:"\\]",i:"$"},{cN:"selector-tag",b:"\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b",r:0},{b:":(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)"},{b:"::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)"},r,{cN:"attribute",b:"\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b",
i:"[^\\s]"},{b:"\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"},{b:":",e:";",c:[r,a,e.CSSNM,e.QSM,e.ASM,{cN:"meta",b:"!important"}]},{b:"@",e:"[{;]",k:"mixin include extend for if else each while charset import debug media page content font-face namespace warn",c:[r,e.QSM,e.ASM,a,e.CSSNM,{b:"\\s[A-Za-z0-9_.-]+",r:0}]}]}}),e.registerLanguage("shell",function(e){return{aliases:["console"],c:[{cN:"meta",b:"^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]",starts:{e:"$",sL:"bash"}}]}}),e.registerLanguage("smali",function(e){var t=["add","and","cmp","cmpg","cmpl","const","div","double","float","goto","if","int","long","move","mul","neg","new","nop","not","or","rem","return","shl","shr","sput","sub","throw","ushr","xor"],r=["aget","aput","array","check","execute","fill","filled","goto/16","goto/32","iget","instance","invoke","iput","monitor","packed","sget","sparse"],a=["transient","constructor","abstract","final","synthetic","public","private","protected","static","bridge","system"];return{aliases:["smali"],c:[{cN:"string",b:'"',e:'"',r:0},e.C("#","$",{r:0}),{cN:"keyword",v:[{b:"\\s*\\.end\\s[a-zA-Z0-9]*"},{b:"^[ ]*\\.[a-zA-Z]*",r:0},{b:"\\s:[a-zA-Z_0-9]*",r:0},{b:"\\s("+a.join("|")+")"}]},{cN:"built_in",v:[{b:"\\s("+t.join("|")+")\\s"},{b:"\\s("+t.join("|")+")((\\-|/)[a-zA-Z0-9]+)+\\s",r:10},{b:"\\s("+r.join("|")+")((\\-|/)[a-zA-Z0-9]+)*\\s",r:10}]},{cN:"class",b:"L[^(;:\n]*;",r:0},{b:"[vp][0-9]+"}]}}),e.registerLanguage("smalltalk",function(e){var t="[a-z][a-zA-Z0-9_]*",r={cN:"string",b:"\\$.{1}"},a={cN:"symbol",b:"#"+e.UIR};return{aliases:["st"],k:"self super nil true false thisContext",c:[e.C('"','"'),e.ASM,{cN:"type",b:"\\b[A-Z][A-Za-z0-9_]*",r:0},{b:t+":",r:0},e.CNM,a,r,{b:"\\|[ ]*"+t+"([ ]+"+t+")*[ ]*\\|",rB:!0,e:/\|/,i:/\S/,c:[{b:"(\\|[ ]*)?"+t}]},{b:"\\#\\(",e:"\\)",c:[e.ASM,r,e.CNM,a]}]}}),e.registerLanguage("sml",function(e){return{aliases:["ml"],k:{keyword:"abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while",built_in:"array bool char exn int list option order real ref string substring vector unit word",literal:"true false NONE SOME LESS EQUAL GREATER nil"},i:/\/\/|>>/,l:"[a-z_]\\w*!?",c:[{cN:"literal",b:/\[(\|\|)?\]|\(\)/,r:0},e.C("\\(\\*","\\*\\)",{c:["self"]}),{cN:"symbol",b:"'[A-Za-z_](?!')[\\w']*"},{cN:"type",b:"`[A-Z][\\w']*"},{cN:"type",b:"\\b[A-Z][\\w']*",r:0},{b:"[a-z_]\\w*'[\\w']*"},e.inherit(e.ASM,{cN:"string",r:0}),e.inherit(e.QSM,{i:null}),{cN:"number",b:"\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",r:0},{b:/[-=]>/}]}}),e.registerLanguage("sqf",function(e){var t=e.getLanguage("cpp").exports,r={cN:"variable",b:/\b_+[a-zA-Z_]\w*/},a={cN:"title",b:/[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/},i={cN:"string",v:[{b:'"',e:'"',c:[{b:'""',r:0}]},{b:"'",e:"'",c:[{b:"''",r:0}]}]};return{aliases:["sqf"],cI:!0,k:{keyword:"case catch default do else exit exitWith for forEach from if switch then throw to try waitUntil while with",built_in:"abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem addSwitchableUnit addTeamMember addToRemainsCollector addUniform addVehicle addVest addWaypoint addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool addWeaponTurret agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airportSide AISFinishHeal alive all3DENEntities allControls allCurators allCutLayers allDead allDeadMen allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn allowSprint allPlayers allSites allTurrets allUnits allUnitsUAV allVariables ammo and animate animateDoor animateSource animationNames animationPhase animationSourcePhase animationState append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor behaviour benchmark binocular blufor boundingBox boundingBoxReal boundingCenter breakOut breakTo briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canUnloadInCombat canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled checkAIFeature checkVisibility civilian className clearAllItemsFromBackpack clearBackpackCargo clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay closeOverlay collapseObjectTree collect3DENHistory combatMode commandArtilleryFire commandChat commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName configNull configProperties configSourceAddonList configSourceMod configSourceModList connectTerminalToUAV controlNull controlsGroupCtrl copyFromClipboard copyToClipboard copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew createVehicleLocal crew ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPosition ctrlSetScale ctrlSetStructuredText ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlType ctrlVisible curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts diag_activeSQSScripts diag_captureFrame diag_captureSlowFrame diag_codePerformance diag_drawMode diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_list diag_log diag_logSlowFrame diag_mergeConfigFile diag_recordTurretLimits diag_tickTime diag_toggle dialog diarySubjectExists didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction directSay disableAI disableCollisionWith disableConversation disableDebriefingStats disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayNull displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon drawRectangle driver drop east echo edit3DENMissionAttributes editObject editorSetEventHandler effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack enableAudioFeature enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot enableDebriefingStats enableDiagLegend enableEndDialog enableEngineArtillery enableEnvironment enableFatigue enableGunLights enableIRLasers enableMimics enablePersonTurret enableRadio enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableUAVConnectability enableUAVWaypoints enableVehicleCargo endLoadingScreen endMission engineOn enginesIsOnRTD enginesRpmRTD enginesTorqueRTD entities estimatedEndServerTime estimatedTimeLeft evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject findEmptyPosition findEmptyPositionReady findNearestEnemy finishMissionInit finite fire fireAtTarget firstBackpack flag flagOwner flagSide flagTexture fleeing floor flyInHeight flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceMap forceRespawn forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent forEachMemberTeam format formation formationDirection formationLeader formationMembers formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected getAimingCoef getAllHitPointsDamage getAllOwnedMines getAmmoCargo getAnimAimPrecision getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState getClientStateNumber getConnectedUAV getCustomAimingCoef getDammage getDescription getDir getDirVisual getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset getFatigue getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getNumber getObjectArgument getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlayerChannel getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL getPosATLVisual getPosVisual getPosWorld getRelDir getRelPos getRemoteSensorsDisabled getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSpeed getStamina getStatValue getSuppression getTerrainHeightASL getText getUnitLoadout getUnitTrait getVariable getVehicleCargo getWeaponCargo getWeaponSway getWPPos glanceAt globalChat globalRadio goggles goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner groupRadio groupSelectedUnits groupSelectUnit grpNull gunner gusts halt handgunItems handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups importance in inArea inAreaArray incapacitatedState independent inflame inflamed inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn isCopilotEnabled isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn isFlatEmpty isForcedWalk isFormationLeader isHidden isInRemainsCollector isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLightOn isLocalized isManualFire isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP isServer isShowing3DIcons isSprintAllowed isStaminaEnabled isSteamMission isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable isUAVConnected isUniformAllowed isVehicleCargo isWalking isWeaponDeployed isWeaponRested itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbCurSel lbData lbDelete lbIsSelected lbPicture lbSelection lbSetColor lbSetCurSel lbSetData lbSetPicture lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetSelectColor lbSetSelectColorRight lbSetSelected lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaveVehicle libraryCredits libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed linearConversion lineBreak lineIntersects lineIntersectsObjs lineIntersectsSurfaces lineIntersectsWith linkItem list listObjects ln lnbAddArray lnbAddColumn lnbAddRow lnbClear lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue lnbSize lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine loadOverlay loadStatus loadUniform loadVest local localize locationNull locationPosition lock lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld modelToWorldVisual modParams moonIntensity moonPhase morale move move3DENCamera moveInAny moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems not numberToDate objectCurators objectFromNetId objectParent objNull objStatus onBriefingGroup onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openYoutubeVideo opfor or orderGetIn overcast overcastForecast owner param params parseNumber parseText parsingNamespace particlesQuality pi pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon primaryWeaponItems primaryWeaponMagazine priority private processDiaryLink productVersion profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload reloadEnabled remoteControl remoteExec remoteExecCall remove3DENConnection remove3DENEventHandler remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon removeWeaponGlobal removeWeaponTurret requiredVersion resetCamShake resetSubgroupDirection resistance resize resources respawnVehicle restartEditorCamera reveal revealMine reverse reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scriptNull scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectWeapon selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer set3DENLinesVisible set3DENMissionAttributes set3DENModelsVisible set3DENObjectType set3DENSelected setAccTime setAirportSide setAmmo setAmmoCargo setAnimSpeedCoef setAperture setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTi setCaptive setCenterOfMass setCollisionLight setCombatMode setCompassOscillation setCuratorCameraAreaCeiling setCuratorCoef setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask setCurrentWaypoint setCustomAimCoef setDamage setDammage setDate setDebriefingText setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon setDropInterval setEditorMode setEditorObjectScope setEffectCondition setFace setFaceAnimation setFatigue setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef setHUDMovementLevels setIdentity setImportance setLeader setLightAmbient setLightAttenuation setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass setParticleFire setParticleParams setParticleRandom setPilotCameraDirection setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlayable setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits setTargetAge setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setVariable setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleTiPars setVehicleVarName setVelocity setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWaves setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWPPos show3DIcons showChat showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch showWaypoint showWaypoints side sideAmbientLife sideChat sideEmpty sideEnemy sideFriendly sideLogic sideRadio sideUnknown simpleTasks simulationEnabled simulCloudDensity simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth switchableUnits switchAction switchCamera switchGesture switchLight switchMove synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan targetKnowledge targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskNull taskParent taskResult taskState taskType teamMember teamMemberNull teamName teams teamSwitch teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL text textLog textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerStatements triggerText triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear tvCollapse tvCount tvCurSel tvData tvDelete tvExpand tvPicture tvSetCurSel tvSetData tvSetPicture tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem updateObjectTree useAISteeringComponent useAudioTimeForMoves vectorAdd vectorCos vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorMultiply vectorNormalized vectorUp vectorUpVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicles vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD west WFSideText wind",
literal:"true false nil"},c:[e.CLCM,e.CBCM,e.NM,r,a,i,t.preprocessor],i:/#/}}),e.registerLanguage("sql",function(e){var t=e.C("--","$");return{cI:!0,i:/[<>{}*#]/,c:[{bK:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment",e:/;/,eW:!0,l:/[\w\.]+/,k:{keyword:"abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select self sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",literal:"true false null",built_in:"array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text varchar varying void"},c:[{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]},{cN:"string",b:'"',e:'"',c:[e.BE,{b:'""'}]},{cN:"string",b:"`",e:"`",c:[e.BE]},e.CNM,e.CBCM,t]},e.CBCM,t]}}),e.registerLanguage("stan",function(e){return{c:[e.HCM,e.CLCM,e.CBCM,{b:e.UIR,l:e.UIR,k:{name:"for in while repeat until if then else",symbol:"bernoulli bernoulli_logit binomial binomial_logit beta_binomial hypergeometric categorical categorical_logit ordered_logistic neg_binomial neg_binomial_2 neg_binomial_2_log poisson poisson_log multinomial normal exp_mod_normal skew_normal student_t cauchy double_exponential logistic gumbel lognormal chi_square inv_chi_square scaled_inv_chi_square exponential inv_gamma weibull frechet rayleigh wiener pareto pareto_type_2 von_mises uniform multi_normal multi_normal_prec multi_normal_cholesky multi_gp multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet lkj_corr lkj_corr_cholesky wishart inv_wishart","selector-tag":"int real vector simplex unit_vector ordered positive_ordered row_vector matrix cholesky_factor_corr cholesky_factor_cov corr_matrix cov_matrix",title:"functions model data parameters quantities transformed generated",literal:"true false"},r:0},{cN:"number",b:"0[xX][0-9a-fA-F]+[Li]?\\b",r:0},{cN:"number",b:"0[xX][0-9a-fA-F]+[Li]?\\b",r:0},{cN:"number",b:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",r:0},{cN:"number",b:"\\d+\\.(?!\\d)(?:i\\b)?",r:0},{cN:"number",b:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",r:0},{cN:"number",b:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",r:0}]}}),e.registerLanguage("stata",function(e){return{aliases:["do","ado"],cI:!0,k:"if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",c:[{cN:"symbol",b:/`[a-zA-Z0-9_]+'/},{cN:"variable",b:/\$\{?[a-zA-Z0-9_]+\}?/},{cN:"string",v:[{b:'`"[^\r\n]*?"\''},{b:'"[^\r\n"]*"'}]},{cN:"built_in",v:[{b:"\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)"}]},e.C("^[ 	]*\\*.*$",!1),e.CLCM,e.CBCM]}}),e.registerLanguage("step21",function(e){var t="[A-Z_][A-Z0-9_.]*",r={keyword:"HEADER ENDSEC DATA"},a={cN:"meta",b:"ISO-10303-21;",r:10},i={cN:"meta",b:"END-ISO-10303-21;",r:10};return{aliases:["p21","step","stp"],cI:!0,l:t,k:r,c:[a,i,e.CLCM,e.CBCM,e.C("/\\*\\*!","\\*/"),e.CNM,e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null}),{cN:"string",b:"'",e:"'"},{cN:"symbol",v:[{b:"#",e:"\\d+",i:"\\W"}]}]}}),e.registerLanguage("stylus",function(e){var t={cN:"variable",b:"\\$"+e.IR},r={cN:"number",b:"#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"},a=["charset","css","debug","extend","font-face","for","import","include","media","mixin","page","warn","while"],i=["after","before","first-letter","first-line","active","first-child","focus","hover","lang","link","visited"],n=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],o="[\\.\\s\\n\\[\\:,]",s=["align-content","align-items","align-self","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","auto","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","clip-path","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","font","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-variant-ligatures","font-weight","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inherit","initial","justify-content","left","letter-spacing","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","max-height","max-width","min-height","min-width","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","perspective","perspective-origin","pointer-events","position","quotes","resize","right","tab-size","table-layout","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-indent","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","white-space","widows","width","word-break","word-spacing","word-wrap","z-index"],l=["\\?","(\\bReturn\\b)","(\\bEnd\\b)","(\\bend\\b)","(\\bdef\\b)",";","#\\s","\\*\\s","===\\s","\\|","%"];
return{aliases:["styl"],cI:!1,k:"if else for in",i:"("+l.join("|")+")",c:[e.QSM,e.ASM,e.CLCM,e.CBCM,r,{b:"\\.[a-zA-Z][a-zA-Z0-9_-]*"+o,rB:!0,c:[{cN:"selector-class",b:"\\.[a-zA-Z][a-zA-Z0-9_-]*"}]},{b:"\\#[a-zA-Z][a-zA-Z0-9_-]*"+o,rB:!0,c:[{cN:"selector-id",b:"\\#[a-zA-Z][a-zA-Z0-9_-]*"}]},{b:"\\b("+n.join("|")+")"+o,rB:!0,c:[{cN:"selector-tag",b:"\\b[a-zA-Z][a-zA-Z0-9_-]*"}]},{b:"&?:?:\\b("+i.join("|")+")"+o},{b:"@("+a.join("|")+")\\b"},t,e.CSSNM,e.NM,{cN:"function",b:"^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",i:"[\\n]",rB:!0,c:[{cN:"title",b:"\\b[a-zA-Z][a-zA-Z0-9_-]*"},{cN:"params",b:/\(/,e:/\)/,c:[r,t,e.ASM,e.CSSNM,e.NM,e.QSM]}]},{cN:"attribute",b:"\\b("+s.reverse().join("|")+")\\b",starts:{e:/;|$/,c:[r,t,e.ASM,e.QSM,e.CSSNM,e.NM,e.CBCM],i:/\./,r:0}}]}}),e.registerLanguage("subunit",function(e){var t={cN:"string",b:"\\[\n(multipart)?",e:"\\]\n"},r={cN:"string",b:"\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"},a={cN:"string",b:"(\\+|-)\\d+"},i={cN:"keyword",r:10,v:[{b:"^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?"},{b:"^progress(:?)(\\s+)?(pop|push)?"},{b:"^tags:"},{b:"^time:"}]};return{cI:!0,c:[t,r,a,i]}}),e.registerLanguage("swift",function(e){var t={keyword:"__COLUMN__ __FILE__ __FUNCTION__ __LINE__ as as! as? associativity break case catch class continue convenience default defer deinit didSet do dynamic dynamicType else enum extension fallthrough false fileprivate final for func get guard if import in indirect infix init inout internal is lazy left let mutating nil none nonmutating open operator optional override postfix precedence prefix private protocol Protocol public repeat required rethrows return right self Self set static struct subscript super switch throw throws true try try! try? Type typealias unowned var weak where while willSet",literal:"true false nil",built_in:"abs advance alignof alignofValue anyGenerator assert assertionFailure bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords enumerate equal fatalError filter find getBridgedObjectiveCType getVaList indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare map max maxElement min minElement numericCast overlaps partition posix precondition preconditionFailure print println quickSort readLine reduce reflect reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split startsWith stride strideof strideofValue swap toString transcode underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers withUnsafePointer withUnsafePointers withVaList zip"},r={cN:"type",b:"\\b[A-Z][\\wÀ-ʸ']*",r:0},a=e.C("/\\*","\\*/",{c:["self"]}),i={cN:"subst",b:/\\\(/,e:"\\)",k:t,c:[]},n={cN:"number",b:"\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b",r:0},o=e.inherit(e.QSM,{c:[i,e.BE]});return i.c=[n],{k:t,c:[o,e.CLCM,a,r,n,{cN:"function",bK:"func",e:"{",eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{b:/</,e:/>/},{cN:"params",b:/\(/,e:/\)/,endsParent:!0,k:t,c:["self",n,o,e.CBCM,{b:":"}],i:/["']/}],i:/\[|%/},{cN:"class",bK:"struct protocol class extension enum",k:t,e:"\\{",eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})]},{cN:"meta",b:"(@warn_unused_result|@exported|@lazy|@noescape|@NSCopying|@NSManaged|@objc|@convention|@required|@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|@infix|@prefix|@postfix|@autoclosure|@testable|@available|@nonobjc|@NSApplicationMain|@UIApplicationMain)"},{bK:"import",e:/$/,c:[e.CLCM,a]}]}}),e.registerLanguage("taggerscript",function(e){var t={cN:"comment",b:/\$noop\(/,e:/\)/,c:[{b:/\(/,e:/\)/,c:["self",{b:/\\./}]}],r:10},r={cN:"keyword",b:/\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,e:/\(/,eE:!0},a={cN:"variable",b:/%[_a-zA-Z0-9:]*/,e:"%"},i={cN:"symbol",b:/\\./};return{c:[t,r,a,i]}}),e.registerLanguage("yaml",function(e){var t="true false yes no null",r="^[ \\-]*",a="[a-zA-Z_][\\w\\-]*",i={cN:"attr",v:[{b:r+a+":"},{b:r+'"'+a+'":'},{b:r+"'"+a+"':"}]},n={cN:"template-variable",v:[{b:"{{",e:"}}"},{b:"%{",e:"}"}]},o={cN:"string",r:0,v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/\S+/}],c:[e.BE,n]};return{cI:!0,aliases:["yml","YAML","yaml"],c:[i,{cN:"meta",b:"^---s*$",r:10},{cN:"string",b:"[\\|>] *$",rE:!0,c:o.c,e:i.v[0].b},{b:"<%[%=-]?",e:"[%-]?%>",sL:"ruby",eB:!0,eE:!0,r:0},{cN:"type",b:"!!"+e.UIR},{cN:"meta",b:"&"+e.UIR+"$"},{cN:"meta",b:"\\*"+e.UIR+"$"},{cN:"bullet",b:"^ *-",r:0},e.HCM,{bK:t,k:{literal:t}},e.CNM,o]}}),e.registerLanguage("tap",function(e){return{cI:!0,c:[e.HCM,{cN:"meta",v:[{b:"^TAP version (\\d+)$"},{b:"^1\\.\\.(\\d+)$"}]},{b:"(s+)?---$",e:"\\.\\.\\.$",sL:"yaml",r:0},{cN:"number",b:" (\\d+) "},{cN:"symbol",v:[{b:"^ok"},{b:"^not ok"}]}]}}),e.registerLanguage("tcl",function(e){return{aliases:["tk"],k:"after append apply array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock close concat continue dde dict encoding eof error eval exec exit expr fblocked fconfigure fcopy file fileevent filename flush for foreach format gets glob global history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename return safe scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update uplevel upvar variable vwait while",c:[e.C(";[ \\t]*#","$"),e.C("^[ \\t]*#","$"),{bK:"proc",e:"[\\{]",eE:!0,c:[{cN:"title",b:"[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",e:"[ \\t\\n\\r]",eW:!0,eE:!0}]},{eE:!0,v:[{b:"\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)",e:"[^a-zA-Z0-9_\\}\\$]"},{b:"\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",e:"(\\))?[^a-zA-Z0-9_\\}\\$]"}]},{cN:"string",c:[e.BE],v:[e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},{cN:"number",v:[e.BNM,e.CNM]}]}}),e.registerLanguage("tex",function(e){var t={cN:"tag",b:/\\/,r:0,c:[{cN:"name",v:[{b:/[a-zA-Zа-яА-я]+[*]?/},{b:/[^a-zA-Zа-яА-я0-9]/}],starts:{eW:!0,r:0,c:[{cN:"string",v:[{b:/\[/,e:/\]/},{b:/\{/,e:/\}/}]},{b:/\s*=\s*/,eW:!0,r:0,c:[{cN:"number",b:/-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/}]}]}}]};return{c:[t,{cN:"formula",c:[t],r:0,v:[{b:/\$\$/,e:/\$\$/},{b:/\$/,e:/\$/}]},e.C("%","$",{r:0})]}}),e.registerLanguage("thrift",function(e){var t="bool byte i16 i32 i64 double string binary";return{k:{keyword:"namespace const typedef struct enum service exception void oneway set list map required optional",built_in:t,literal:"true false"},c:[e.QSM,e.NM,e.CLCM,e.CBCM,{cN:"class",bK:"struct enum service exception",e:/\{/,i:/\n/,c:[e.inherit(e.TM,{starts:{eW:!0,eE:!0}})]},{b:"\\b(set|list|map)\\s*<",e:">",k:t,c:["self"]}]}}),e.registerLanguage("tp",function(e){var t={cN:"number",b:"[1-9][0-9]*",r:0},r={cN:"symbol",b:":[^\\]]+"},a={cN:"built_in",b:"(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|    TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",e:"\\]",c:["self",t,r]},i={cN:"built_in",b:"(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",e:"\\]",c:["self",t,e.QSM,r]};return{k:{keyword:"ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN SUBSTR FINDSTR VOFFSET PROG ATTR MN POS",literal:"ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET"},c:[a,i,{cN:"keyword",b:"/(PROG|ATTR|MN|POS|END)\\b"},{cN:"keyword",b:"(CALL|RUN|POINT_LOGIC|LBL)\\b"},{cN:"keyword",b:"\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"},{cN:"number",b:"\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",r:0},e.C("//","[;$]"),e.C("!","[;$]"),e.C("--eg:","$"),e.QSM,{cN:"string",b:"'",e:"'"},e.CNM,{cN:"variable",b:"\\$[A-Za-z0-9_]+"}]}}),e.registerLanguage("twig",function(e){var t={cN:"params",b:"\\(",e:"\\)"},r="attribute block constant cycle date dump include max min parent random range source template_from_string",a={bK:r,k:{name:r},r:0,c:[t]},i={b:/\|[A-Za-z_]+:?/,k:"abs batch capitalize convert_encoding date date_modify default escape first format join json_encode keys last length lower merge nl2br number_format raw replace reverse round slice sort split striptags title trim upper url_encode",c:[a]},n="autoescape block do embed extends filter flush for if import include macro sandbox set spaceless use verbatim";return n=n+" "+n.split(" ").map(function(e){return"end"+e}).join(" "),{aliases:["craftcms"],cI:!0,sL:"xml",c:[e.C(/\{#/,/#}/),{cN:"template-tag",b:/\{%/,e:/%}/,c:[{cN:"name",b:/\w+/,k:n,starts:{eW:!0,c:[i,a],r:0}}]},{cN:"template-variable",b:/\{\{/,e:/}}/,c:["self",i,a]}]}}),e.registerLanguage("typescript",function(e){var t={keyword:"in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class public private protected get set super static implements enum export import declare type namespace abstract as from extends async await",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document any number boolean string void Promise"};return{aliases:["ts"],k:t,c:[{cN:"meta",b:/^\s*['"]use strict['"]/},e.ASM,e.QSM,{cN:"string",b:"`",e:"`",c:[e.BE,{cN:"subst",b:"\\$\\{",e:"\\}"}]},e.CLCM,e.CBCM,{cN:"number",v:[{b:"\\b(0[bB][01]+)"},{b:"\\b(0[oO][0-7]+)"},{b:e.CNR}],r:0},{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{cN:"function",b:"(\\(.*?\\)|"+e.IR+")\\s*=>",rB:!0,e:"\\s*=>",c:[{cN:"params",v:[{b:e.IR},{b:/\(\s*\)/},{b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,c:["self",e.CLCM,e.CBCM]}]}]}],r:0},{cN:"function",b:"function",e:/[\{;]/,eE:!0,k:t,c:["self",e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,c:[e.CLCM,e.CBCM],i:/["'\(]/}],i:/%/,r:0},{bK:"constructor",e:/\{/,eE:!0,c:["self",{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,c:[e.CLCM,e.CBCM],i:/["'\(]/}]},{b:/module\./,k:{built_in:"module"},r:0},{bK:"module",e:/\{/,eE:!0},{bK:"interface",e:/\{/,eE:!0,k:"interface extends"},{b:/\$[(.]/},{b:"\\."+e.IR,r:0},{cN:"meta",b:"@[A-Za-z]+"}]}}),e.registerLanguage("vala",function(e){return{k:{keyword:"char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var",built_in:"DBus GLib CCode Gee Object Gtk Posix",literal:"false true null"},c:[{cN:"class",bK:"class interface namespace",e:"{",eE:!0,i:"[^,:\\n\\s\\.]",c:[e.UTM]},e.CLCM,e.CBCM,{cN:"string",b:'"""',e:'"""',r:5},e.ASM,e.QSM,e.CNM,{cN:"meta",b:"^#",e:"$",r:2}]}}),e.registerLanguage("vbnet",function(e){return{aliases:["vb"],cI:!0,k:{keyword:"addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass namespace narrowing new next not notinheritable notoverridable of off on operator option optional or order orelse overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim rem removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly xor",built_in:"boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype date decimal directcast double gettype getxmlnamespace iif integer long object sbyte short single string trycast typeof uinteger ulong ushort",literal:"true false nothing"},i:"//|{|}|endif|gosub|variant|wend",c:[e.inherit(e.QSM,{c:[{b:'""'}]}),e.C("'","$",{rB:!0,c:[{cN:"doctag",b:"'''|<!--|-->",c:[e.PWM]},{cN:"doctag",b:"</?",e:">",c:[e.PWM]}]}),e.CNM,{cN:"meta",b:"#",e:"$",k:{"meta-keyword":"if else elseif end region externalsource"}}]}}),e.registerLanguage("vbscript",function(e){return{aliases:["vbs"],cI:!0,k:{keyword:"call class const dim do loop erase execute executeglobal exit for each next function if then else on error option explicit new private property let get public randomize redim rem select case set stop sub while wend with end to elseif is or xor and not class_initialize class_terminate default preserve in me byval byref step resume goto",built_in:"lcase month vartype instrrev ubound setlocale getobject rgb getref string weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency conversions csng timevalue second year space abs clng timeserial fixs len asc isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion scriptengine split scriptengineminorversion cint sin datepart ltrim sqr scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw chrw regexp server response request cstr err",literal:"true false null nothing empty"},i:"//",c:[e.inherit(e.QSM,{c:[{b:'""'}]}),e.C(/'/,/$/,{r:0}),e.CNM]}}),e.registerLanguage("vbscript-html",function(e){return{sL:"xml",c:[{b:"<%",e:"%>",sL:"vbscript"}]}}),e.registerLanguage("verilog",function(e){var t={keyword:"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor",literal:"null",built_in:"$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale $bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat $realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson $assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff $assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk $fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control $coverage_get $coverage_save $set_coverage_db_name $rose $stable $past $rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display $coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename $unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow $floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning $dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh $tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random $dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson $dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array $async$nand$array $async$or$array $async$nor$array $sync$and$array $sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf $async$and$plane $async$nand$plane $async$or$plane $async$nor$plane $sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system $display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo $write $readmemb $readmemh $writememh $value$plusargs $dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit $writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb $dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall $dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo $fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh $swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb $fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat $sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror"};return{aliases:["v","sv","svh"],cI:!1,k:t,l:/[\w\$]+/,c:[e.CBCM,e.CLCM,e.QSM,{cN:"number",c:[e.BE],v:[{b:"\\b((\\d+'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"},{b:"\\B(('(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"},{b:"\\b([0-9_])+",r:0}]},{cN:"variable",v:[{b:"#\\((?!parameter).+\\)"},{b:"\\.\\w+",r:0}]},{cN:"meta",b:"`",e:"$",k:{"meta-keyword":"define __FILE__ __LINE__ begin_keywords celldefine default_nettype define else elsif end_keywords endcelldefine endif ifdef ifndef include line nounconnected_drive pragma resetall timescale unconnected_drive undef undefineall"},r:0}]}}),e.registerLanguage("vhdl",function(e){var t="\\d(_|\\d)*",r="[eE][-+]?"+t,a=t+"(\\."+t+")?("+r+")?",i="\\w+",n=t+"#"+i+"(\\."+i+")?#("+r+")?",o="\\b("+n+"|"+a+")";return{cI:!0,k:{keyword:"abs access after alias all and architecture array assert assume assume_guarantee attribute begin block body buffer bus case component configuration constant context cover disconnect downto default else elsif end entity exit fairness file for force function generate generic group guarded if impure in inertial inout is label library linkage literal loop map mod nand new next nor not null of on open or others out package port postponed procedure process property protected pure range record register reject release rem report restrict restrict_guarantee return rol ror select sequence severity shared signal sla sll sra srl strong subtype then to transport type unaffected units until use variable vmode vprop vunit wait when while with xnor xor",built_in:"boolean bit character integer time delay_length natural positive string bit_vector file_open_kind file_open_status std_logic std_logic_vector unsigned signed boolean_vector integer_vector std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signedreal_vector time_vector",literal:"false true note warning error failure line text side width"},i:"{",c:[e.CBCM,e.C("--","$"),e.QSM,{cN:"number",b:o,r:0},{cN:"string",b:"'(U|X|0|1|Z|W|L|H|-)'",c:[e.BE]},{cN:"symbol",b:"'[A-Za-z](_?[A-Za-z0-9])*",c:[e.BE]}]}}),e.registerLanguage("vim",function(e){return{l:/[!#@\w]+/,k:{keyword:"N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",built_in:"synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"},i:/;/,c:[e.NM,e.ASM,{cN:"string",b:/"(\\"|\n\\|[^"\n])*"/},e.C('"',"$"),{cN:"variable",b:/[bwtglsav]:[\w\d_]*/},{cN:"function",bK:"function function!",e:"$",r:0,c:[e.TM,{cN:"params",b:"\\(",e:"\\)"}]},{cN:"symbol",b:/<[\w-]+>/}]}}),e.registerLanguage("x86asm",function(e){return{cI:!0,l:"[.%]?"+e.IR,k:{keyword:"lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
built_in:"ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr",meta:"%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"},c:[e.C(";","$",{r:0}),{cN:"number",v:[{b:"\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",r:0},{b:"\\$[0-9][0-9A-Fa-f]*",r:0},{b:"\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b"},{b:"\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b"}]},e.QSM,{cN:"string",v:[{b:"'",e:"[^\\\\]'"},{b:"`",e:"[^\\\\]`"}],r:0},{cN:"symbol",v:[{b:"^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)"},{b:"^\\s*%%[A-Za-z0-9_$#@~.?]*:"}],r:0},{cN:"subst",b:"%[0-9]+",r:0},{cN:"subst",b:"%!S+",r:0},{cN:"meta",b:/^\s*\.[\w_-]+/}]}}),e.registerLanguage("xl",function(e){var t="ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts",r={keyword:"if then else do while until for loop import with is as where when by data constant integer real text name boolean symbol infix prefix postfix block tree",literal:"true false nil",built_in:"in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin acos atan exp expm1 log log2 log10 log1p pi at text_length text_range text_find text_replace contains page slide basic_slide title_slide title subtitle fade_in fade_out fade_at clear_color color line_color line_width texture_wrap texture_transform texture scale_?x scale_?y scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y rotate_?z? rectangle circle ellipse sphere path line_to move_to quad_to curve_to theme background contents locally time mouse_?x mouse_?y mouse_buttons "+t},a={cN:"string",b:'"',e:'"',i:"\\n"},i={cN:"string",b:"'",e:"'",i:"\\n"},n={cN:"string",b:"<<",e:">>"},o={cN:"number",b:"[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"},s={bK:"import",e:"$",k:r,c:[a]},l={cN:"function",b:/[a-z][^\n]*->/,rB:!0,e:/->/,c:[e.inherit(e.TM,{starts:{eW:!0,k:r}})]};return{aliases:["tao"],l:/[a-zA-Z][a-zA-Z0-9_?]*/,k:r,c:[e.CLCM,e.CBCM,a,i,n,l,s,o,e.NM]}}),e.registerLanguage("xquery",function(e){var t="for let if while then else return where group by xquery encoding versionmodule namespace boundary-space preserve strip default collation base-uri orderingcopy-namespaces order declare import schema namespace function option in allowing emptyat tumbling window sliding window start when only end when previous next stable ascendingdescending empty greatest least some every satisfies switch case typeswitch try catch andor to union intersect instance of treat as castable cast map array delete insert intoreplace value rename copy modify update",r="false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute",a={b:/\$[a-zA-Z0-9\-]+/},i={cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},n={cN:"string",v:[{b:/"/,e:/"/,c:[{b:/""/,r:0}]},{b:/'/,e:/'/,c:[{b:/''/,r:0}]}]},o={cN:"meta",b:"%\\w+"},s={cN:"comment",b:"\\(:",e:":\\)",r:10,c:[{cN:"doctag",b:"@\\w+"}]},l={b:"{",e:"}"},c=[a,n,i,s,o,l];return l.c=c,{aliases:["xpath","xq"],cI:!1,l:/[a-zA-Z\$][a-zA-Z0-9_:\-]*/,i:/(proc)|(abstract)|(extends)|(until)|(#)/,k:{keyword:t,literal:r},c:c}}),e.registerLanguage("zephir",function(e){var t={cN:"string",c:[e.BE],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},r={v:[e.BNM,e.CNM]};return{aliases:["zep"],cI:!0,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var let while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally int uint long ulong char uchar double float bool boolean stringlikely unlikely",c:[e.CLCM,e.HCM,e.C("/\\*","\\*/",{c:[{cN:"doctag",b:"@[A-Za-z]+"}]}),e.C("__halt_compiler.+?;",!1,{eW:!0,k:"__halt_compiler",l:e.UIR}),{cN:"string",b:"<<<['\"]?\\w+['\"]?$",e:"^\\w+;",c:[e.BE]},{b:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{cN:"function",bK:"function",e:/[;{]/,eE:!0,i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",e.CBCM,t,r]}]},{cN:"class",bK:"class interface",e:"{",eE:!0,i:/[:\(\$"]/,c:[{bK:"extends implements"},e.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[e.UTM]},{bK:"use",e:";",c:[e.UTM]},{b:"=>"},t,r]}}),e});
/*! url - v1.8.6 - 2013-11-22 */window.url=function(){function a(a){return!isNaN(parseFloat(a))&&isFinite(a)}return function(b,c){var d=c||window.location.toString();if(!b)return d;b=b.toString(),"//"===d.substring(0,2)?d="http:"+d:1===d.split("://").length&&(d="http://"+d),c=d.split("/");var e={auth:""},f=c[2].split("@");1===f.length?f=f[0].split(":"):(e.auth=f[0],f=f[1].split(":")),e.protocol=c[0],e.hostname=f[0],e.port=f[1]||("https"===e.protocol.split(":")[0].toLowerCase()?"443":"80"),e.pathname=(c.length>3?"/":"")+c.slice(3,c.length).join("/").split("?")[0].split("#")[0];var g=e.pathname;"/"===g.charAt(g.length-1)&&(g=g.substring(0,g.length-1));var h=e.hostname,i=h.split("."),j=g.split("/");if("hostname"===b)return h;if("domain"===b)return/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/.test(h)?h:i.slice(-2).join(".");if("sub"===b)return i.slice(0,i.length-2).join(".");if("port"===b)return e.port;if("protocol"===b)return e.protocol.split(":")[0];if("auth"===b)return e.auth;if("user"===b)return e.auth.split(":")[0];if("pass"===b)return e.auth.split(":")[1]||"";if("path"===b)return e.pathname;if("."===b.charAt(0)){if(b=b.substring(1),a(b))return b=parseInt(b,10),i[0>b?i.length+b:b-1]||""}else{if(a(b))return b=parseInt(b,10),j[0>b?j.length+b:b]||"";if("file"===b)return j.slice(-1)[0];if("filename"===b)return j.slice(-1)[0].split(".")[0];if("fileext"===b)return j.slice(-1)[0].split(".")[1]||"";if("?"===b.charAt(0)||"#"===b.charAt(0)){var k=d,l=null;if("?"===b.charAt(0)?k=(k.split("?")[1]||"").split("#")[0]:"#"===b.charAt(0)&&(k=k.split("#")[1]||""),!b.charAt(1))return k;b=b.substring(1),k=k.split("&");for(var m=0,n=k.length;n>m;m++)if(l=k[m].split("="),l[0]===b)return l[1]||"";return null}}return""}}(),"undefined"!=typeof jQuery&&jQuery.extend({url:function(a,b){return window.url(a,b)}});
/*
 * jQuery Bootstrap Pagination v1.4.2
 * https://github.com/josecebe/twbs-pagination
 *
 * Copyright 2014-2018, Eugene Simakin <john-24@list.ru>
 * Released under Apache-2.0 license
 * http://apache.org/licenses/LICENSE-2.0.html
 */

!function(o,e,t,s){"use strict";var i=o.fn.twbsPagination,r=function(t,s){if(this.$element=o(t),this.options=o.extend({},o.fn.twbsPagination.defaults,s),this.options.startPage<1||this.options.startPage>this.options.totalPages)throw new Error("Start page option is incorrect");if(this.options.totalPages=parseInt(this.options.totalPages),isNaN(this.options.totalPages))throw new Error("Total pages option is not correct!");if(this.options.visiblePages=parseInt(this.options.visiblePages),isNaN(this.options.visiblePages))throw new Error("Visible pages option is not correct!");if(this.options.beforePageClick instanceof Function&&this.$element.first().on("beforePage",this.options.beforePageClick),this.options.onPageClick instanceof Function&&this.$element.first().on("page",this.options.onPageClick),this.options.hideOnlyOnePage&&1==this.options.totalPages)return this.options.initiateStartPageClick&&this.$element.trigger("page",1),this;if(this.options.href&&(this.options.startPage=this.getPageFromQueryString(),this.options.startPage||(this.options.startPage=1)),"UL"===("function"==typeof this.$element.prop?this.$element.prop("tagName"):this.$element.attr("tagName")))this.$listContainer=this.$element;else{var e=this.$element,i=o([]);e.each(function(t){var s=o("<ul></ul>");o(this).append(s),i.push(s[0])}),this.$listContainer=i,this.$element=i}return this.$listContainer.addClass(this.options.paginationClass),this.options.initiateStartPageClick?this.show(this.options.startPage):(this.currentPage=this.options.startPage,this.render(this.getPages(this.options.startPage)),this.setupEvents()),this};r.prototype={constructor:r,destroy:function(){return this.$element.empty(),this.$element.removeData("twbs-pagination"),this.$element.off("page"),this},show:function(t){if(t<1||t>this.options.totalPages)throw new Error("Page is incorrect.");this.currentPage=t,this.$element.trigger("beforePage",t);var s=this.getPages(t);return this.render(s),this.setupEvents(),this.$element.trigger("page",t),s},enable:function(){this.show(this.currentPage)},disable:function(){var t=this;this.$listContainer.off("click").on("click","li",function(t){t.preventDefault()}),this.$listContainer.children().each(function(){o(this).hasClass(t.options.activeClass)||o(this).addClass(t.options.disabledClass)})},buildListItems:function(t){var s=[];if(this.options.first&&s.push(this.buildItem("first",1)),this.options.prev){var e=1<t.currentPage?t.currentPage-1:this.options.loop?this.options.totalPages:1;s.push(this.buildItem("prev",e))}for(var i=0;i<t.numeric.length;i++)s.push(this.buildItem("page",t.numeric[i]));if(this.options.next){var a=t.currentPage<this.options.totalPages?t.currentPage+1:this.options.loop?1:this.options.totalPages;s.push(this.buildItem("next",a))}return this.options.last&&s.push(this.buildItem("last",this.options.totalPages)),s},buildItem:function(t,s){var e=o("<li></li>"),i=o("<a></a>"),a=this.options[t]?this.makeText(this.options[t],s):s;return e.addClass(this.options[t+"Class"]),e.data("page",s),e.data("page-type",t),e.append(i.attr("href",this.makeHref(s)).addClass(this.options.anchorClass).html(a)),e},getPages:function(t){var s=[],e=Math.floor(this.options.visiblePages/2),i=t-e+1-this.options.visiblePages%2,a=t+e,n=this.options.visiblePages;n>this.options.totalPages&&(n=this.options.totalPages),i<=0&&(i=1,a=n),a>this.options.totalPages&&(i=this.options.totalPages-n+1,a=this.options.totalPages);for(var o=i;o<=a;)s.push(o),o++;return{currentPage:t,numeric:s}},render:function(s){var e=this;this.$listContainer.children().remove();var t=this.buildListItems(s);o.each(t,function(t,s){e.$listContainer.append(s)}),this.$listContainer.children().each(function(){var t=o(this);switch(t.data("page-type")){case"page":t.data("page")===s.currentPage&&t.addClass(e.options.activeClass);break;case"first":t.toggleClass(e.options.disabledClass,1===s.currentPage);break;case"last":t.toggleClass(e.options.disabledClass,s.currentPage===e.options.totalPages);break;case"prev":t.toggleClass(e.options.disabledClass,!e.options.loop&&1===s.currentPage);break;case"next":t.toggleClass(e.options.disabledClass,!e.options.loop&&s.currentPage===e.options.totalPages)}})},setupEvents:function(){var e=this;this.$listContainer.off("click").on("click","li",function(t){var s=o(this);if(s.hasClass(e.options.disabledClass)||s.hasClass(e.options.activeClass))return!1;!e.options.href&&t.preventDefault(),e.show(parseInt(s.data("page")))})},changeTotalPages:function(t,s){return this.options.totalPages=t,this.show(s)},makeHref:function(t){return this.options.href?this.generateQueryString(t):"#"},makeText:function(t,s){return t.replace(this.options.pageVariable,s).replace(this.options.totalPagesVariable,this.options.totalPages)},getPageFromQueryString:function(t){var s=this.getSearchString(t),e=new RegExp(this.options.pageVariable+"(=([^&#]*)|&|#|$)").exec(s);return e&&e[2]?(e=decodeURIComponent(e[2]),e=parseInt(e),isNaN(e)?null:e):null},generateQueryString:function(t,s){var e=this.getSearchString(s),i=new RegExp(this.options.pageVariable+"=*[^&#]*");return e?"?"+e.replace(i,this.options.pageVariable+"="+t):""},getSearchString:function(t){var s=t||e.location.search;return""===s?null:(0===s.indexOf("?")&&(s=s.substr(1)),s)},getCurrentPage:function(){return this.currentPage},getTotalPages:function(){return this.options.totalPages}},o.fn.twbsPagination=function(t){var s,e=Array.prototype.slice.call(arguments,1),i=o(this),a=i.data("twbs-pagination"),n="object"==typeof t?t:{};return a||i.data("twbs-pagination",a=new r(this,n)),"string"==typeof t&&(s=a[t].apply(a,e)),void 0===s?i:s},o.fn.twbsPagination.defaults={totalPages:1,startPage:1,visiblePages:5,initiateStartPageClick:!0,hideOnlyOnePage:!1,href:!1,pageVariable:"{{page}}",totalPagesVariable:"{{total_pages}}",page:null,first:"First",prev:"Previous",next:"Next",last:"Last",loop:!1,beforePageClick:null,onPageClick:null,paginationClass:"pagination",nextClass:"page-item next",prevClass:"page-item prev",lastClass:"page-item last",firstClass:"page-item first",pageClass:"page-item",activeClass:"active",disabledClass:"disabled",anchorClass:"page-link"},o.fn.twbsPagination.Constructor=r,o.fn.twbsPagination.noConflict=function(){return o.fn.twbsPagination=i,this},o.fn.twbsPagination.version="1.4.2"}(window.jQuery,window,document);
/*!***************************************************
* mark.js v8.11.1
* https://markjs.io/
* Copyright (c) 2014–2018, Julian Kühnel
* Released under the MIT license https://git.io/vwTVl
*****************************************************/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.Mark=t(e.jQuery)}(this,function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(t){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5e3;n(this,e),this.ctx=t,this.iframes=r,this.exclude=i,this.iframesTimeout=o}return r(e,[{key:"getContexts",value:function(){var e=[];return(void 0!==this.ctx&&this.ctx?NodeList.prototype.isPrototypeOf(this.ctx)?Array.prototype.slice.call(this.ctx):Array.isArray(this.ctx)?this.ctx:"string"==typeof this.ctx?Array.prototype.slice.call(document.querySelectorAll(this.ctx)):[this.ctx]:[]).forEach(function(t){var n=e.filter(function(e){return e.contains(t)}).length>0;-1!==e.indexOf(t)||n||e.push(t)}),e}},{key:"getIframeContents",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=void 0;try{var i=e.contentWindow;if(r=i.document,!i||!r)throw new Error("iframe inaccessible")}catch(e){n()}r&&t(r)}},{key:"isIframeBlank",value:function(e){var t=e.getAttribute("src").trim();return"about:blank"===e.contentWindow.location.href&&"about:blank"!==t&&t}},{key:"observeIframeLoad",value:function(e,t,n){var r=this,i=!1,o=null,a=function a(){if(!i){i=!0,clearTimeout(o);try{r.isIframeBlank(e)||(e.removeEventListener("load",a),r.getIframeContents(e,t,n))}catch(e){n()}}};e.addEventListener("load",a),o=setTimeout(a,this.iframesTimeout)}},{key:"onIframeReady",value:function(e,t,n){try{"complete"===e.contentWindow.document.readyState?this.isIframeBlank(e)?this.observeIframeLoad(e,t,n):this.getIframeContents(e,t,n):this.observeIframeLoad(e,t,n)}catch(e){n()}}},{key:"waitForIframes",value:function(e,t){var n=this,r=0;this.forEachIframe(e,function(){return!0},function(e){r++,n.waitForIframes(e.querySelector("html"),function(){--r||t()})},function(e){e||t()})}},{key:"forEachIframe",value:function(t,n,r){var i=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},a=t.querySelectorAll("iframe"),s=a.length,c=0;a=Array.prototype.slice.call(a);var u=function(){--s<=0&&o(c)};s||u(),a.forEach(function(t){e.matches(t,i.exclude)?u():i.onIframeReady(t,function(e){n(t)&&(c++,r(e)),u()},u)})}},{key:"createIterator",value:function(e,t,n){return document.createNodeIterator(e,t,n,!1)}},{key:"createInstanceOnIframe",value:function(t){return new e(t.querySelector("html"),this.iframes)}},{key:"compareNodeIframe",value:function(e,t,n){if(e.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_PRECEDING){if(null===t)return!0;if(t.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_FOLLOWING)return!0}return!1}},{key:"getIteratorNode",value:function(e){var t=e.previousNode();return{prevNode:t,node:null===t?e.nextNode():e.nextNode()&&e.nextNode()}}},{key:"checkIframeFilter",value:function(e,t,n,r){var i=!1,o=!1;return r.forEach(function(e,t){e.val===n&&(i=t,o=e.handled)}),this.compareNodeIframe(e,t,n)?(!1!==i||o?!1===i||o||(r[i].handled=!0):r.push({val:n,handled:!0}),!0):(!1===i&&r.push({val:n,handled:!1}),!1)}},{key:"handleOpenIframes",value:function(e,t,n,r){var i=this;e.forEach(function(e){e.handled||i.getIframeContents(e.val,function(e){i.createInstanceOnIframe(e).forEachNode(t,n,r)})})}},{key:"iterateThroughNodes",value:function(e,t,n,r,i){for(var o,a=this,s=this.createIterator(t,e,r),c=[],u=[],l=void 0,h=void 0;void 0,o=a.getIteratorNode(s),h=o.prevNode,l=o.node;)this.iframes&&this.forEachIframe(t,function(e){return a.checkIframeFilter(l,h,e,c)},function(t){a.createInstanceOnIframe(t).forEachNode(e,function(e){return u.push(e)},r)}),u.push(l);u.forEach(function(e){n(e)}),this.iframes&&this.handleOpenIframes(c,e,n,r),i()}},{key:"forEachNode",value:function(e,t,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=this.getContexts(),a=o.length;a||i(),o.forEach(function(o){var s=function(){r.iterateThroughNodes(e,o,t,n,function(){--a<=0&&i()})};r.iframes?r.waitForIframes(o,s):s()})}}],[{key:"matches",value:function(e,t){var n="string"==typeof t?[t]:t,r=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector;if(r){var i=!1;return n.every(function(t){return!r.call(e,t)||(i=!0,!1)}),i}return!1}}]),e}(),a=function(){function e(t){n(this,e),this.ctx=t,this.ie=!1;var r=window.navigator.userAgent;(r.indexOf("MSIE")>-1||r.indexOf("Trident")>-1)&&(this.ie=!0)}return r(e,[{key:"log",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"debug",r=this.opt.log;this.opt.debug&&"object"===(void 0===r?"undefined":t(r))&&"function"==typeof r[n]&&r[n]("mark.js: "+e)}},{key:"escapeStr",value:function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"createRegExp",value:function(e){return"disabled"!==this.opt.wildcards&&(e=this.setupWildcardsRegExp(e)),e=this.escapeStr(e),Object.keys(this.opt.synonyms).length&&(e=this.createSynonymsRegExp(e)),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(e=this.setupIgnoreJoinersRegExp(e)),this.opt.diacritics&&(e=this.createDiacriticsRegExp(e)),e=this.createMergedBlanksRegExp(e),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(e=this.createJoinersRegExp(e)),"disabled"!==this.opt.wildcards&&(e=this.createWildcardsRegExp(e)),e=this.createAccuracyRegExp(e)}},{key:"createSynonymsRegExp",value:function(e){var t=this.opt.synonyms,n=this.opt.caseSensitive?"":"i",r=this.opt.ignoreJoiners||this.opt.ignorePunctuation.length?"\0":"";for(var i in t)if(t.hasOwnProperty(i)){var o=t[i],a="disabled"!==this.opt.wildcards?this.setupWildcardsRegExp(i):this.escapeStr(i),s="disabled"!==this.opt.wildcards?this.setupWildcardsRegExp(o):this.escapeStr(o);""!==a&&""!==s&&(e=e.replace(new RegExp("("+this.escapeStr(a)+"|"+this.escapeStr(s)+")","gm"+n),r+"("+this.processSynomyms(a)+"|"+this.processSynomyms(s)+")"+r))}return e}},{key:"processSynomyms",value:function(e){return(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(e=this.setupIgnoreJoinersRegExp(e)),e}},{key:"setupWildcardsRegExp",value:function(e){return(e=e.replace(/(?:\\)*\?/g,function(e){return"\\"===e.charAt(0)?"?":""})).replace(/(?:\\)*\*/g,function(e){return"\\"===e.charAt(0)?"*":""})}},{key:"createWildcardsRegExp",value:function(e){var t="withSpaces"===this.opt.wildcards;return e.replace(/\u0001/g,t?"[\\S\\s]?":"\\S?").replace(/\u0002/g,t?"[\\S\\s]*?":"\\S*")}},{key:"setupIgnoreJoinersRegExp",value:function(e){return e.replace(/[^(|)\\]/g,function(e,t,n){var r=n.charAt(t+1);return/[(|)\\]/.test(r)||""===r?e:e+"\0"})}},{key:"createJoinersRegExp",value:function(e){var t=[],n=this.opt.ignorePunctuation;return Array.isArray(n)&&n.length&&t.push(this.escapeStr(n.join(""))),this.opt.ignoreJoiners&&t.push("\\u00ad\\u200b\\u200c\\u200d"),t.length?e.split(/\u0000+/).join("["+t.join("")+"]*"):e}},{key:"createDiacriticsRegExp",value:function(e){var t=this.opt.caseSensitive?"":"i",n=this.opt.caseSensitive?["aàáảãạăằắẳẵặâầấẩẫậäåāą","AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćč","CÇĆČ","dđď","DĐĎ","eèéẻẽẹêềếểễệëěēę","EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïī","IÌÍỈĨỊÎÏĪ","lł","LŁ","nñňń","NÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøō","OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rř","RŘ","sšśșş","SŠŚȘŞ","tťțţ","TŤȚŢ","uùúủũụưừứửữựûüůū","UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿ","YÝỲỶỸỴŸ","zžżź","ZŽŻŹ"]:["aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćčCÇĆČ","dđďDĐĎ","eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïīIÌÍỈĨỊÎÏĪ","lłLŁ","nñňńNÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rřRŘ","sšśșşSŠŚȘŞ","tťțţTŤȚŢ","uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿYÝỲỶỸỴŸ","zžżźZŽŻŹ"],r=[];return e.split("").forEach(function(i){n.every(function(n){if(-1!==n.indexOf(i)){if(r.indexOf(n)>-1)return!1;e=e.replace(new RegExp("["+n+"]","gm"+t),"["+n+"]"),r.push(n)}return!0})}),e}},{key:"createMergedBlanksRegExp",value:function(e){return e.replace(/[\s]+/gim,"[\\s]+")}},{key:"createAccuracyRegExp",value:function(e){var t=this,n=this.opt.accuracy,r="string"==typeof n?n:n.value,i="";switch(("string"==typeof n?[]:n.limiters).forEach(function(e){i+="|"+t.escapeStr(e)}),r){case"partially":default:return"()("+e+")";case"complementary":return"()([^"+(i="\\s"+(i||this.escapeStr("!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~¡¿")))+"]*"+e+"[^"+i+"]*)";case"exactly":return"(^|\\s"+i+")("+e+")(?=$|\\s"+i+")"}}},{key:"getSeparatedKeywords",value:function(e){var t=this,n=[];return e.forEach(function(e){t.opt.separateWordSearch?e.split(" ").forEach(function(e){e.trim()&&-1===n.indexOf(e)&&n.push(e)}):e.trim()&&-1===n.indexOf(e)&&n.push(e)}),{keywords:n.sort(function(e,t){return t.length-e.length}),length:n.length}}},{key:"isNumeric",value:function(e){return Number(parseFloat(e))==e}},{key:"checkRanges",value:function(e){var t=this;if(!Array.isArray(e)||"[object Object]"!==Object.prototype.toString.call(e[0]))return this.log("markRanges() will only accept an array of objects"),this.opt.noMatch(e),[];var n=[],r=0;return e.sort(function(e,t){return e.start-t.start}).forEach(function(e){var i=t.callNoMatchOnInvalidRanges(e,r),o=i.start,a=i.end;i.valid&&(e.start=o,e.length=a-o,n.push(e),r=a)}),n}},{key:"callNoMatchOnInvalidRanges",value:function(e,t){var n=void 0,r=void 0,i=!1;return e&&void 0!==e.start?(r=(n=parseInt(e.start,10))+parseInt(e.length,10),this.isNumeric(e.start)&&this.isNumeric(e.length)&&r-t>0&&r-n>0?i=!0:(this.log("Ignoring invalid or overlapping range: "+JSON.stringify(e)),this.opt.noMatch(e))):(this.log("Ignoring invalid range: "+JSON.stringify(e)),this.opt.noMatch(e)),{start:n,end:r,valid:i}}},{key:"checkWhitespaceRanges",value:function(e,t,n){var r=void 0,i=!0,o=n.length,a=t-o,s=parseInt(e.start,10)-a;return(r=(s=s>o?o:s)+parseInt(e.length,10))>o&&(r=o,this.log("End range automatically set to the max value of "+o)),s<0||r-s<0||s>o||r>o?(i=!1,this.log("Invalid range: "+JSON.stringify(e)),this.opt.noMatch(e)):""===n.substring(s,r).replace(/\s+/g,"")&&(i=!1,this.log("Skipping whitespace only range: "+JSON.stringify(e)),this.opt.noMatch(e)),{start:s,end:r,valid:i}}},{key:"getTextNodes",value:function(e){var t=this,n="",r=[];this.iterator.forEachNode(NodeFilter.SHOW_TEXT,function(e){r.push({start:n.length,end:(n+=e.textContent).length,node:e})},function(e){return t.matchesExclude(e.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},function(){e({value:n,nodes:r})})}},{key:"matchesExclude",value:function(e){return o.matches(e,this.opt.exclude.concat(["script","style","title","head","html"]))}},{key:"wrapRangeInTextNode",value:function(e,t,n){var r=this.opt.element?this.opt.element:"mark",i=e.splitText(t),o=i.splitText(n-t),a=document.createElement(r);return a.setAttribute("data-markjs","true"),this.opt.className&&a.setAttribute("class",this.opt.className),a.textContent=i.textContent,i.parentNode.replaceChild(a,i),o}},{key:"wrapRangeInMappedTextNode",value:function(e,t,n,r,i){var o=this;e.nodes.every(function(a,s){var c=e.nodes[s+1];if(void 0===c||c.start>t){if(!r(a.node))return!1;var u=t-a.start,l=(n>a.end?a.end:n)-a.start,h=e.value.substr(0,a.start),f=e.value.substr(l+a.start);if(a.node=o.wrapRangeInTextNode(a.node,u,l),e.value=h+f,e.nodes.forEach(function(t,n){n>=s&&(e.nodes[n].start>0&&n!==s&&(e.nodes[n].start-=l),e.nodes[n].end-=l)}),n-=l,i(a.node.previousSibling,a.start),!(n>a.end))return!1;t=a.end}return!0})}},{key:"wrapMatches",value:function(e,t,n,r,i){var o=this,a=0===t?0:t+1;this.getTextNodes(function(t){t.nodes.forEach(function(t){t=t.node;for(var i=void 0;null!==(i=e.exec(t.textContent))&&""!==i[a];)if(n(i[a],t)){var s=i.index;if(0!==a)for(var c=1;c<a;c++)s+=i[c].length;t=o.wrapRangeInTextNode(t,s,s+i[a].length),r(t.previousSibling),e.lastIndex=0}}),i()})}},{key:"wrapMatchesAcrossElements",value:function(e,t,n,r,i){var o=this,a=0===t?0:t+1;this.getTextNodes(function(t){for(var s=void 0;null!==(s=e.exec(t.value))&&""!==s[a];){var c=s.index;if(0!==a)for(var u=1;u<a;u++)c+=s[u].length;var l=c+s[a].length;o.wrapRangeInMappedTextNode(t,c,l,function(e){return n(s[a],e)},function(t,n){e.lastIndex=n,r(t)})}i()})}},{key:"wrapRangeFromIndex",value:function(e,t,n,r){var i=this;this.getTextNodes(function(o){var a=o.value.length;e.forEach(function(e,r){var s=i.checkWhitespaceRanges(e,a,o.value),c=s.start,u=s.end;s.valid&&i.wrapRangeInMappedTextNode(o,c,u,function(n){return t(n,e,o.value.substring(c,u),r)},function(t){n(t,e)})}),r()})}},{key:"unwrapMatches",value:function(e){for(var t=e.parentNode,n=document.createDocumentFragment();e.firstChild;)n.appendChild(e.removeChild(e.firstChild));t.replaceChild(n,e),this.ie?this.normalizeTextNode(t):t.normalize()}},{key:"normalizeTextNode",value:function(e){if(e){if(3===e.nodeType)for(;e.nextSibling&&3===e.nextSibling.nodeType;)e.nodeValue+=e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);else this.normalizeTextNode(e.firstChild);this.normalizeTextNode(e.nextSibling)}}},{key:"markRegExp",value:function(e,t){var n=this;this.opt=t,this.log('Searching with expression "'+e+'"');var r=0,i="wrapMatches";this.opt.acrossElements&&(i="wrapMatchesAcrossElements"),this[i](e,this.opt.ignoreGroups,function(e,t){return n.opt.filter(t,e,r)},function(e){r++,n.opt.each(e)},function(){0===r&&n.opt.noMatch(e),n.opt.done(r)})}},{key:"mark",value:function(e,t){var n=this;this.opt=t;var r=0,i="wrapMatches",o=this.getSeparatedKeywords("string"==typeof e?[e]:e),a=o.keywords,s=o.length,c=this.opt.caseSensitive?"":"i";this.opt.acrossElements&&(i="wrapMatchesAcrossElements"),0===s?this.opt.done(r):function e(t){var o=new RegExp(n.createRegExp(t),"gm"+c),u=0;n.log('Searching with expression "'+o+'"'),n[i](o,1,function(e,i){return n.opt.filter(i,t,r,u)},function(e){u++,r++,n.opt.each(e)},function(){0===u&&n.opt.noMatch(t),a[s-1]===t?n.opt.done(r):e(a[a.indexOf(t)+1])})}(a[0])}},{key:"markRanges",value:function(e,t){var n=this;this.opt=t;var r=0,i=this.checkRanges(e);i&&i.length?(this.log("Starting to mark with the following ranges: "+JSON.stringify(i)),this.wrapRangeFromIndex(i,function(e,t,r,i){return n.opt.filter(e,t,r,i)},function(e,t){r++,n.opt.each(e,t)},function(){n.opt.done(r)})):this.opt.done(r)}},{key:"unmark",value:function(e){var t=this;this.opt=e;var n=this.opt.element?this.opt.element:"*";n+="[data-markjs]",this.opt.className&&(n+="."+this.opt.className),this.log('Removal selector "'+n+'"'),this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT,function(e){t.unwrapMatches(e)},function(e){var r=o.matches(e,n),i=t.matchesExclude(e);return!r||i?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},this.opt.done)}},{key:"opt",set:function(e){this._opt=i({},{element:"",className:"",exclude:[],iframes:!1,iframesTimeout:5e3,separateWordSearch:!0,diacritics:!0,synonyms:{},accuracy:"partially",acrossElements:!1,caseSensitive:!1,ignoreJoiners:!1,ignoreGroups:0,ignorePunctuation:[],wildcards:"disabled",each:function(){},noMatch:function(){},filter:function(){return!0},done:function(){},debug:!1,log:window.console},e)},get:function(){return this._opt}},{key:"iterator",get:function(){return new o(this.ctx,this.opt.iframes,this.opt.exclude,this.opt.iframesTimeout)}}]),e}();return e.fn.mark=function(e,t){return new a(this.get()).mark(e,t),this},e.fn.markRegExp=function(e,t){return new a(this.get()).markRegExp(e,t),this},e.fn.markRanges=function(e,t){return new a(this.get()).markRanges(e,t),this},e.fn.unmark=function(e){return new a(this.get()).unmark(e),this},e});

// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt Expat
//
// AnchorJS - v4.2.2 - 2019-11-14
// https://www.bryanbraun.com/anchorjs/
// Copyright (c) 2019 Bryan Braun; Licensed MIT
//
// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt Expat
!function(A,e){"use strict";"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():(A.AnchorJS=e(),A.anchors=new A.AnchorJS)}(this,function(){"use strict";return function(A){function f(A){A.icon=A.hasOwnProperty("icon")?A.icon:"",A.visible=A.hasOwnProperty("visible")?A.visible:"hover",A.placement=A.hasOwnProperty("placement")?A.placement:"right",A.ariaLabel=A.hasOwnProperty("ariaLabel")?A.ariaLabel:"Anchor",A.class=A.hasOwnProperty("class")?A.class:"",A.base=A.hasOwnProperty("base")?A.base:"",A.truncate=A.hasOwnProperty("truncate")?Math.floor(A.truncate):64,A.titleText=A.hasOwnProperty("titleText")?A.titleText:""}function p(A){var e;if("string"==typeof A||A instanceof String)e=[].slice.call(document.querySelectorAll(A));else{if(!(Array.isArray(A)||A instanceof NodeList))throw new Error("The selector provided to AnchorJS was invalid.");e=[].slice.call(A)}return e}this.options=A||{},this.elements=[],f(this.options),this.isTouchDevice=function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)},this.add=function(A){var e,t,i,n,o,s,a,r,c,h,l,u,d=[];if(f(this.options),"touch"===(l=this.options.visible)&&(l=this.isTouchDevice()?"always":"hover"),0===(e=p(A=A||"h2, h3, h4, h5, h6")).length)return this;for(!function(){if(null!==document.head.querySelector("style.anchorjs"))return;var A,e=document.createElement("style");e.className="anchorjs",e.appendChild(document.createTextNode("")),void 0===(A=document.head.querySelector('[rel="stylesheet"], style'))?document.head.appendChild(e):document.head.insertBefore(e,A);e.sheet.insertRule(" .anchorjs-link {   opacity: 0;   text-decoration: none;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; }",e.sheet.cssRules.length),e.sheet.insertRule(" *:hover > .anchorjs-link, .anchorjs-link:focus  {   opacity: 1; }",e.sheet.cssRules.length),e.sheet.insertRule(" [data-anchorjs-icon]::after {   content: attr(data-anchorjs-icon); }",e.sheet.cssRules.length),e.sheet.insertRule(' @font-face {   font-family: "anchorjs-icons";   src: url(data:n/a;base64,AAEAAAALAIAAAwAwT1MvMg8yG2cAAAE4AAAAYGNtYXDp3gC3AAABpAAAAExnYXNwAAAAEAAAA9wAAAAIZ2x5ZlQCcfwAAAH4AAABCGhlYWQHFvHyAAAAvAAAADZoaGVhBnACFwAAAPQAAAAkaG10eASAADEAAAGYAAAADGxvY2EACACEAAAB8AAAAAhtYXhwAAYAVwAAARgAAAAgbmFtZQGOH9cAAAMAAAAAunBvc3QAAwAAAAADvAAAACAAAQAAAAEAAHzE2p9fDzz1AAkEAAAAAADRecUWAAAAANQA6R8AAAAAAoACwAAAAAgAAgAAAAAAAAABAAADwP/AAAACgAAA/9MCrQABAAAAAAAAAAAAAAAAAAAAAwABAAAAAwBVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMCQAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAg//0DwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAAIAAAACgAAxAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADAAAAAIAAgAAgAAACDpy//9//8AAAAg6cv//f///+EWNwADAAEAAAAAAAAAAAAAAAAACACEAAEAAAAAAAAAAAAAAAAxAAACAAQARAKAAsAAKwBUAAABIiYnJjQ3NzY2MzIWFxYUBwcGIicmNDc3NjQnJiYjIgYHBwYUFxYUBwYGIwciJicmNDc3NjIXFhQHBwYUFxYWMzI2Nzc2NCcmNDc2MhcWFAcHBgYjARQGDAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiANehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAAADACWAAEAAAAAAAEACAAAAAEAAAAAAAIAAwAIAAEAAAAAAAMACAAAAAEAAAAAAAQACAAAAAEAAAAAAAUAAQALAAEAAAAAAAYACAAAAAMAAQQJAAEAEAAMAAMAAQQJAAIABgAcAAMAAQQJAAMAEAAMAAMAAQQJAAQAEAAMAAMAAQQJAAUAAgAiAAMAAQQJAAYAEAAMYW5jaG9yanM0MDBAAGEAbgBjAGgAbwByAGoAcwA0ADAAMABAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAH//wAP) format("truetype"); }',e.sheet.cssRules.length)}(),t=document.querySelectorAll("[id]"),i=[].map.call(t,function(A){return A.id}),o=0;o<e.length;o++)if(this.hasAnchorJSLink(e[o]))d.push(o);else{if(e[o].hasAttribute("id"))n=e[o].getAttribute("id");else if(e[o].hasAttribute("data-anchor-id"))n=e[o].getAttribute("data-anchor-id");else{for(c=r=this.urlify(e[o].textContent),a=0;void 0!==s&&(c=r+"-"+a),a+=1,-1!==(s=i.indexOf(c)););s=void 0,i.push(c),e[o].setAttribute("id",c),n=c}(h=document.createElement("a")).className="anchorjs-link "+this.options.class,h.setAttribute("aria-label",this.options.ariaLabel),h.setAttribute("data-anchorjs-icon",this.options.icon),this.options.titleText&&(h.title=this.options.titleText),u=document.querySelector("base")?window.location.pathname+window.location.search:"",u=this.options.base||u,h.href=u+"#"+n,"always"===l&&(h.style.opacity="1"),""===this.options.icon&&(h.style.font="1em/1 anchorjs-icons","left"===this.options.placement&&(h.style.lineHeight="inherit")),"left"===this.options.placement?(h.style.position="absolute",h.style.marginLeft="-1em",h.style.paddingRight="0.5em",e[o].insertBefore(h,e[o].firstChild)):(h.style.paddingLeft="0.375em",e[o].appendChild(h))}for(o=0;o<d.length;o++)e.splice(d[o]-o,1);return this.elements=this.elements.concat(e),this},this.remove=function(A){for(var e,t,i=p(A),n=0;n<i.length;n++)(t=i[n].querySelector(".anchorjs-link"))&&(-1!==(e=this.elements.indexOf(i[n]))&&this.elements.splice(e,1),i[n].removeChild(t));return this},this.removeAll=function(){this.remove(this.elements)},this.urlify=function(A){return this.options.truncate||f(this.options),A.trim().replace(/\'/gi,"").replace(/[& +$,:;=?@"#{}|^~[`%!'<>\]\.\/\(\)\*\\\n\t\b\v]/g,"-").replace(/-{2,}/g,"-").substring(0,this.options.truncate).replace(/^-+|-+$/gm,"").toLowerCase()},this.hasAnchorJSLink=function(A){var e=A.firstChild&&-1<(" "+A.firstChild.className+" ").indexOf(" anchorjs-link "),t=A.lastChild&&-1<(" "+A.lastChild.className+" ").indexOf(" anchorjs-link ");return e||t||!1}}});
// @license-end


================================================
File: ERC/docs/styles/lunr.js
================================================
/**
 * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.2
 * Copyright (C) 2017 Oliver Nightingale
 * @license MIT
 */

;(function(){

/**
 * A convenience function for configuring and constructing
 * a new lunr Index.
 *
 * A lunr.Builder instance is created and the pipeline setup
 * with a trimmer, stop word filter and stemmer.
 *
 * This builder object is yielded to the configuration function
 * that is passed as a parameter, allowing the list of fields
 * and other builder parameters to be customised.
 *
 * All documents _must_ be added within the passed config function.
 *
 * @example
 * var idx = lunr(function () {
 *   this.field('title')
 *   this.field('body')
 *   this.ref('id')
 *
 *   documents.forEach(function (doc) {
 *     this.add(doc)
 *   }, this)
 * })
 *
 * @see {@link lunr.Builder}
 * @see {@link lunr.Pipeline}
 * @see {@link lunr.trimmer}
 * @see {@link lunr.stopWordFilter}
 * @see {@link lunr.stemmer}
 * @namespace {function} lunr
 */
var lunr = function (config) {
  var builder = new lunr.Builder

  builder.pipeline.add(
    lunr.trimmer,
    lunr.stopWordFilter,
    lunr.stemmer
  )

  builder.searchPipeline.add(
    lunr.stemmer
  )

  config.call(builder, builder)
  return builder.build()
}

lunr.version = "2.1.2"
/*!
 * lunr.utils
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * A namespace containing utils for the rest of the lunr library
 */
lunr.utils = {}

/**
 * Print a warning message to the console.
 *
 * @param {String} message The message to be printed.
 * @memberOf Utils
 */
lunr.utils.warn = (function (global) {
  /* eslint-disable no-console */
  return function (message) {
    if (global.console && console.warn) {
      console.warn(message)
    }
  }
  /* eslint-enable no-console */
})(this)

/**
 * Convert an object to a string.
 *
 * In the case of `null` and `undefined` the function returns
 * the empty string, in all other cases the result of calling
 * `toString` on the passed object is returned.
 *
 * @param {Any} obj The object to convert to a string.
 * @return {String} string representation of the passed object.
 * @memberOf Utils
 */
lunr.utils.asString = function (obj) {
  if (obj === void 0 || obj === null) {
    return ""
  } else {
    return obj.toString()
  }
}
lunr.FieldRef = function (docRef, fieldName) {
  this.docRef = docRef
  this.fieldName = fieldName
  this._stringValue = fieldName + lunr.FieldRef.joiner + docRef
}

lunr.FieldRef.joiner = "/"

lunr.FieldRef.fromString = function (s) {
  var n = s.indexOf(lunr.FieldRef.joiner)

  if (n === -1) {
    throw "malformed field ref string"
  }

  var fieldRef = s.slice(0, n),
      docRef = s.slice(n + 1)

  return new lunr.FieldRef (docRef, fieldRef)
}

lunr.FieldRef.prototype.toString = function () {
  return this._stringValue
}
/**
 * A function to calculate the inverse document frequency for
 * a posting. This is shared between the builder and the index
 *
 * @private
 * @param {object} posting - The posting for a given term
 * @param {number} documentCount - The total number of documents.
 */
lunr.idf = function (posting, documentCount) {
  var documentsWithTerm = 0

  for (var fieldName in posting) {
    if (fieldName == '_index') continue // Ignore the term index, its not a field
    documentsWithTerm += Object.keys(posting[fieldName]).length
  }

  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)

  return Math.log(1 + Math.abs(x))
}

/**
 * A token wraps a string representation of a token
 * as it is passed through the text processing pipeline.
 *
 * @constructor
 * @param {string} [str=''] - The string token being wrapped.
 * @param {object} [metadata={}] - Metadata associated with this token.
 */
lunr.Token = function (str, metadata) {
  this.str = str || ""
  this.metadata = metadata || {}
}

/**
 * Returns the token string that is being wrapped by this object.
 *
 * @returns {string}
 */
lunr.Token.prototype.toString = function () {
  return this.str
}

/**
 * A token update function is used when updating or optionally
 * when cloning a token.
 *
 * @callback lunr.Token~updateFunction
 * @param {string} str - The string representation of the token.
 * @param {Object} metadata - All metadata associated with this token.
 */

/**
 * Applies the given function to the wrapped string token.
 *
 * @example
 * token.update(function (str, metadata) {
 *   return str.toUpperCase()
 * })
 *
 * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.update = function (fn) {
  this.str = fn(this.str, this.metadata)
  return this
}

/**
 * Creates a clone of this token. Optionally a function can be
 * applied to the cloned token.
 *
 * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.clone = function (fn) {
  fn = fn || function (s) { return s }
  return new lunr.Token (fn(this.str, this.metadata), this.metadata)
}
/*!
 * lunr.tokenizer
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * A function for splitting a string into tokens ready to be inserted into
 * the search index. Uses `lunr.tokenizer.separator` to split strings, change
 * the value of this property to change how strings are split into tokens.
 *
 * This tokenizer will convert its parameter to a string by calling `toString` and
 * then will split this string on the character in `lunr.tokenizer.separator`.
 * Arrays will have their elements converted to strings and wrapped in a lunr.Token.
 *
 * @static
 * @param {?(string|object|object[])} obj - The object to convert into tokens
 * @returns {lunr.Token[]}
 */
lunr.tokenizer = function (obj) {
  if (obj == null || obj == undefined) {
    return []
  }

  if (Array.isArray(obj)) {
    return obj.map(function (t) {
      return new lunr.Token(lunr.utils.asString(t).toLowerCase())
    })
  }

  var str = obj.toString().trim().toLowerCase(),
      len = str.length,
      tokens = []

  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {
    var char = str.charAt(sliceEnd),
        sliceLength = sliceEnd - sliceStart

    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {

      if (sliceLength > 0) {
        tokens.push(
          new lunr.Token (str.slice(sliceStart, sliceEnd), {
            position: [sliceStart, sliceLength],
            index: tokens.length
          })
        )
      }

      sliceStart = sliceEnd + 1
    }

  }

  return tokens
}

/**
 * The separator used to split a string into tokens. Override this property to change the behaviour of
 * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.
 *
 * @static
 * @see lunr.tokenizer
 */
lunr.tokenizer.separator = /[\s\-]+/
/*!
 * lunr.Pipeline
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * lunr.Pipelines maintain an ordered list of functions to be applied to all
 * tokens in documents entering the search index and queries being ran against
 * the index.
 *
 * An instance of lunr.Index created with the lunr shortcut will contain a
 * pipeline with a stop word filter and an English language stemmer. Extra
 * functions can be added before or after either of these functions or these
 * default functions can be removed.
 *
 * When run the pipeline will call each function in turn, passing a token, the
 * index of that token in the original list of all tokens and finally a list of
 * all the original tokens.
 *
 * The output of functions in the pipeline will be passed to the next function
 * in the pipeline. To exclude a token from entering the index the function
 * should return undefined, the rest of the pipeline will not be called with
 * this token.
 *
 * For serialisation of pipelines to work, all functions used in an instance of
 * a pipeline should be registered with lunr.Pipeline. Registered functions can
 * then be loaded. If trying to load a serialised pipeline that uses functions
 * that are not registered an error will be thrown.
 *
 * If not planning on serialising the pipeline then registering pipeline functions
 * is not necessary.
 *
 * @constructor
 */
lunr.Pipeline = function () {
  this._stack = []
}

lunr.Pipeline.registeredFunctions = Object.create(null)

/**
 * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
 * string as well as all known metadata. A pipeline function can mutate the token string
 * or mutate (or add) metadata for a given token.
 *
 * A pipeline function can indicate that the passed token should be discarded by returning
 * null. This token will not be passed to any downstream pipeline functions and will not be
 * added to the index.
 *
 * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
 * to any downstream pipeline functions and all will returned tokens will be added to the index.
 *
 * Any number of pipeline functions may be chained together using a lunr.Pipeline.
 *
 * @interface lunr.PipelineFunction
 * @param {lunr.Token} token - A token from the document being processed.
 * @param {number} i - The index of this token in the complete list of tokens for this document/field.
 * @param {lunr.Token[]} tokens - All tokens for this document/field.
 * @returns {(?lunr.Token|lunr.Token[])}
 */

/**
 * Register a function with the pipeline.
 *
 * Functions that are used in the pipeline should be registered if the pipeline
 * needs to be serialised, or a serialised pipeline needs to be loaded.
 *
 * Registering a function does not add it to a pipeline, functions must still be
 * added to instances of the pipeline for them to be used when running a pipeline.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @param {String} label - The label to register this function with
 */
lunr.Pipeline.registerFunction = function (fn, label) {
  if (label in this.registeredFunctions) {
    lunr.utils.warn('Overwriting existing registered function: ' + label)
  }

  fn.label = label
  lunr.Pipeline.registeredFunctions[fn.label] = fn
}

/**
 * Warns if the function is not registered as a Pipeline function.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @private
 */
lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {
  var isRegistered = fn.label && (fn.label in this.registeredFunctions)

  if (!isRegistered) {
    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\n', fn)
  }
}

/**
 * Loads a previously serialised pipeline.
 *
 * All functions to be loaded must already be registered with lunr.Pipeline.
 * If any function from the serialised data has not been registered then an
 * error will be thrown.
 *
 * @param {Object} serialised - The serialised pipeline to load.
 * @returns {lunr.Pipeline}
 */
lunr.Pipeline.load = function (serialised) {
  var pipeline = new lunr.Pipeline

  serialised.forEach(function (fnName) {
    var fn = lunr.Pipeline.registeredFunctions[fnName]

    if (fn) {
      pipeline.add(fn)
    } else {
      throw new Error('Cannot load unregistered function: ' + fnName)
    }
  })

  return pipeline
}

/**
 * Adds new functions to the end of the pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.
 */
lunr.Pipeline.prototype.add = function () {
  var fns = Array.prototype.slice.call(arguments)

  fns.forEach(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)
    this._stack.push(fn)
  }, this)
}

/**
 * Adds a single function after a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.after = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  pos = pos + 1
  this._stack.splice(pos, 0, newFn)
}

/**
 * Adds a single function before a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.before = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  this._stack.splice(pos, 0, newFn)
}

/**
 * Removes a function from the pipeline.
 *
 * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.
 */
lunr.Pipeline.prototype.remove = function (fn) {
  var pos = this._stack.indexOf(fn)
  if (pos == -1) {
    return
  }

  this._stack.splice(pos, 1)
}

/**
 * Runs the current list of functions that make up the pipeline against the
 * passed tokens.
 *
 * @param {Array} tokens The tokens to run through the pipeline.
 * @returns {Array}
 */
lunr.Pipeline.prototype.run = function (tokens) {
  var stackLength = this._stack.length

  for (var i = 0; i < stackLength; i++) {
    var fn = this._stack[i]

    tokens = tokens.reduce(function (memo, token, j) {
      var result = fn(token, j, tokens)

      if (result === void 0 || result === '') return memo

      return memo.concat(result)
    }, [])
  }

  return tokens
}

/**
 * Convenience method for passing a string through a pipeline and getting
 * strings out. This method takes care of wrapping the passed string in a
 * token and mapping the resulting tokens back to strings.
 *
 * @param {string} str - The string to pass through the pipeline.
 * @returns {string[]}
 */
lunr.Pipeline.prototype.runString = function (str) {
  var token = new lunr.Token (str)

  return this.run([token]).map(function (t) {
    return t.toString()
  })
}

/**
 * Resets the pipeline by removing any existing processors.
 *
 */
lunr.Pipeline.prototype.reset = function () {
  this._stack = []
}

/**
 * Returns a representation of the pipeline ready for serialisation.
 *
 * Logs a warning if the function has not been registered.
 *
 * @returns {Array}
 */
lunr.Pipeline.prototype.toJSON = function () {
  return this._stack.map(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)

    return fn.label
  })
}
/*!
 * lunr.Vector
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * A vector is used to construct the vector space of documents and queries. These
 * vectors support operations to determine the similarity between two documents or
 * a document and a query.
 *
 * Normally no parameters are required for initializing a vector, but in the case of
 * loading a previously dumped vector the raw elements can be provided to the constructor.
 *
 * For performance reasons vectors are implemented with a flat array, where an elements
 * index is immediately followed by its value. E.g. [index, value, index, value]. This
 * allows the underlying array to be as sparse as possible and still offer decent
 * performance when being used for vector calculations.
 *
 * @constructor
 * @param {Number[]} [elements] - The flat list of element index and element value pairs.
 */
lunr.Vector = function (elements) {
  this._magnitude = 0
  this.elements = elements || []
}


/**
 * Calculates the position within the vector to insert a given index.
 *
 * This is used internally by insert and upsert. If there are duplicate indexes then
 * the position is returned as if the value for that index were to be updated, but it
 * is the callers responsibility to check whether there is a duplicate at that index
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @returns {Number}
 */
lunr.Vector.prototype.positionForIndex = function (index) {
  // For an empty vector the tuple can be inserted at the beginning
  if (this.elements.length == 0) {
    return 0
  }

  var start = 0,
      end = this.elements.length / 2,
      sliceLength = end - start,
      pivotPoint = Math.floor(sliceLength / 2),
      pivotIndex = this.elements[pivotPoint * 2]

  while (sliceLength > 1) {
    if (pivotIndex < index) {
      start = pivotPoint
    }

    if (pivotIndex > index) {
      end = pivotPoint
    }

    if (pivotIndex == index) {
      break
    }

    sliceLength = end - start
    pivotPoint = start + Math.floor(sliceLength / 2)
    pivotIndex = this.elements[pivotPoint * 2]
  }

  if (pivotIndex == index) {
    return pivotPoint * 2
  }

  if (pivotIndex > index) {
    return pivotPoint * 2
  }

  if (pivotIndex < index) {
    return (pivotPoint + 1) * 2
  }
}

/**
 * Inserts an element at an index within the vector.
 *
 * Does not allow duplicates, will throw an error if there is already an entry
 * for this index.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 */
lunr.Vector.prototype.insert = function (insertIdx, val) {
  this.upsert(insertIdx, val, function () {
    throw "duplicate index"
  })
}

/**
 * Inserts or updates an existing index within the vector.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 * @param {function} fn - A function that is called for updates, the existing value and the
 * requested value are passed as arguments
 */
lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {
  this._magnitude = 0
  var position = this.positionForIndex(insertIdx)

  if (this.elements[position] == insertIdx) {
    this.elements[position + 1] = fn(this.elements[position + 1], val)
  } else {
    this.elements.splice(position, 0, insertIdx, val)
  }
}

/**
 * Calculates the magnitude of this vector.
 *
 * @returns {Number}
 */
lunr.Vector.prototype.magnitude = function () {
  if (this._magnitude) return this._magnitude

  var sumOfSquares = 0,
      elementsLength = this.elements.length

  for (var i = 1; i < elementsLength; i += 2) {
    var val = this.elements[i]
    sumOfSquares += val * val
  }

  return this._magnitude = Math.sqrt(sumOfSquares)
}

/**
 * Calculates the dot product of this vector and another vector.
 *
 * @param {lunr.Vector} otherVector - The vector to compute the dot product with.
 * @returns {Number}
 */
lunr.Vector.prototype.dot = function (otherVector) {
  var dotProduct = 0,
      a = this.elements, b = otherVector.elements,
      aLen = a.length, bLen = b.length,
      aVal = 0, bVal = 0,
      i = 0, j = 0

  while (i < aLen && j < bLen) {
    aVal = a[i], bVal = b[j]
    if (aVal < bVal) {
      i += 2
    } else if (aVal > bVal) {
      j += 2
    } else if (aVal == bVal) {
      dotProduct += a[i + 1] * b[j + 1]
      i += 2
      j += 2
    }
  }

  return dotProduct
}

/**
 * Calculates the cosine similarity between this vector and another
 * vector.
 *
 * @param {lunr.Vector} otherVector - The other vector to calculate the
 * similarity with.
 * @returns {Number}
 */
lunr.Vector.prototype.similarity = function (otherVector) {
  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())
}

/**
 * Converts the vector to an array of the elements within the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toArray = function () {
  var output = new Array (this.elements.length / 2)

  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {
    output[j] = this.elements[i]
  }

  return output
}

/**
 * A JSON serializable representation of the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toJSON = function () {
  return this.elements
}
/* eslint-disable */
/*!
 * lunr.stemmer
 * Copyright (C) 2017 Oliver Nightingale
 * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
 */

/**
 * lunr.stemmer is an english language stemmer, this is a JavaScript
 * implementation of the PorterStemmer taken from http://tartarus.org/~martin
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token - The string to stem
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 */
lunr.stemmer = (function(){
  var step2list = {
      "ational" : "ate",
      "tional" : "tion",
      "enci" : "ence",
      "anci" : "ance",
      "izer" : "ize",
      "bli" : "ble",
      "alli" : "al",
      "entli" : "ent",
      "eli" : "e",
      "ousli" : "ous",
      "ization" : "ize",
      "ation" : "ate",
      "ator" : "ate",
      "alism" : "al",
      "iveness" : "ive",
      "fulness" : "ful",
      "ousness" : "ous",
      "aliti" : "al",
      "iviti" : "ive",
      "biliti" : "ble",
      "logi" : "log"
    },

    step3list = {
      "icate" : "ic",
      "ative" : "",
      "alize" : "al",
      "iciti" : "ic",
      "ical" : "ic",
      "ful" : "",
      "ness" : ""
    },

    c = "[^aeiou]",          // consonant
    v = "[aeiouy]",          // vowel
    C = c + "[^aeiouy]*",    // consonant sequence
    V = v + "[aeiou]*",      // vowel sequence

    mgr0 = "^(" + C + ")?" + V + C,               // [C]VC... is m>0
    meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$",  // [C]VC[V] is m=1
    mgr1 = "^(" + C + ")?" + V + C + V + C,       // [C]VCVC... is m>1
    s_v = "^(" + C + ")?" + v;                   // vowel in stem

  var re_mgr0 = new RegExp(mgr0);
  var re_mgr1 = new RegExp(mgr1);
  var re_meq1 = new RegExp(meq1);
  var re_s_v = new RegExp(s_v);

  var re_1a = /^(.+?)(ss|i)es$/;
  var re2_1a = /^(.+?)([^s])s$/;
  var re_1b = /^(.+?)eed$/;
  var re2_1b = /^(.+?)(ed|ing)$/;
  var re_1b_2 = /.$/;
  var re2_1b_2 = /(at|bl|iz)$/;
  var re3_1b_2 = new RegExp("([^aeiouylsz])\\1$");
  var re4_1b_2 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var re_1c = /^(.+?[^aeiou])y$/;
  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;

  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;

  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
  var re2_4 = /^(.+?)(s|t)(ion)$/;

  var re_5 = /^(.+?)e$/;
  var re_5_1 = /ll$/;
  var re3_5 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var porterStemmer = function porterStemmer(w) {
    var stem,
      suffix,
      firstch,
      re,
      re2,
      re3,
      re4;

    if (w.length < 3) { return w; }

    firstch = w.substr(0,1);
    if (firstch == "y") {
      w = firstch.toUpperCase() + w.substr(1);
    }

    // Step 1a
    re = re_1a
    re2 = re2_1a;

    if (re.test(w)) { w = w.replace(re,"$1$2"); }
    else if (re2.test(w)) { w = w.replace(re2,"$1$2"); }

    // Step 1b
    re = re_1b;
    re2 = re2_1b;
    if (re.test(w)) {
      var fp = re.exec(w);
      re = re_mgr0;
      if (re.test(fp[1])) {
        re = re_1b_2;
        w = w.replace(re,"");
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1];
      re2 = re_s_v;
      if (re2.test(stem)) {
        w = stem;
        re2 = re2_1b_2;
        re3 = re3_1b_2;
        re4 = re4_1b_2;
        if (re2.test(w)) { w = w + "e"; }
        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,""); }
        else if (re4.test(w)) { w = w + "e"; }
      }
    }

    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)
    re = re_1c;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      w = stem + "i";
    }

    // Step 2
    re = re_2;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step2list[suffix];
      }
    }

    // Step 3
    re = re_3;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step3list[suffix];
      }
    }

    // Step 4
    re = re_4;
    re2 = re2_4;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      if (re.test(stem)) {
        w = stem;
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1] + fp[2];
      re2 = re_mgr1;
      if (re2.test(stem)) {
        w = stem;
      }
    }

    // Step 5
    re = re_5;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      re2 = re_meq1;
      re3 = re3_5;
      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {
        w = stem;
      }
    }

    re = re_5_1;
    re2 = re_mgr1;
    if (re.test(w) && re2.test(w)) {
      re = re_1b_2;
      w = w.replace(re,"");
    }

    // and turn initial Y back to y

    if (firstch == "y") {
      w = firstch.toLowerCase() + w.substr(1);
    }

    return w;
  };

  return function (token) {
    return token.update(porterStemmer);
  }
})();

lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')
/*!
 * lunr.stopWordFilter
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * lunr.generateStopWordFilter builds a stopWordFilter function from the provided
 * list of stop words.
 *
 * The built in lunr.stopWordFilter is built using this generator and can be used
 * to generate custom stopWordFilters for applications or non English languages.
 *
 * @param {Array} token The token to pass through the filter
 * @returns {lunr.PipelineFunction}
 * @see lunr.Pipeline
 * @see lunr.stopWordFilter
 */
lunr.generateStopWordFilter = function (stopWords) {
  var words = stopWords.reduce(function (memo, stopWord) {
    memo[stopWord] = stopWord
    return memo
  }, {})

  return function (token) {
    if (token && words[token.toString()] !== token.toString()) return token
  }
}

/**
 * lunr.stopWordFilter is an English language stop word list filter, any words
 * contained in the list will not be passed through the filter.
 *
 * This is intended to be used in the Pipeline. If the token does not pass the
 * filter then undefined will be returned.
 *
 * @implements {lunr.PipelineFunction}
 * @params {lunr.Token} token - A token to check for being a stop word.
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 */
lunr.stopWordFilter = lunr.generateStopWordFilter([
  'a',
  'able',
  'about',
  'across',
  'after',
  'all',
  'almost',
  'also',
  'am',
  'among',
  'an',
  'and',
  'any',
  'are',
  'as',
  'at',
  'be',
  'because',
  'been',
  'but',
  'by',
  'can',
  'cannot',
  'could',
  'dear',
  'did',
  'do',
  'does',
  'either',
  'else',
  'ever',
  'every',
  'for',
  'from',
  'get',
  'got',
  'had',
  'has',
  'have',
  'he',
  'her',
  'hers',
  'him',
  'his',
  'how',
  'however',
  'i',
  'if',
  'in',
  'into',
  'is',
  'it',
  'its',
  'just',
  'least',
  'let',
  'like',
  'likely',
  'may',
  'me',
  'might',
  'most',
  'must',
  'my',
  'neither',
  'no',
  'nor',
  'not',
  'of',
  'off',
  'often',
  'on',
  'only',
  'or',
  'other',
  'our',
  'own',
  'rather',
  'said',
  'say',
  'says',
  'she',
  'should',
  'since',
  'so',
  'some',
  'than',
  'that',
  'the',
  'their',
  'them',
  'then',
  'there',
  'these',
  'they',
  'this',
  'tis',
  'to',
  'too',
  'twas',
  'us',
  'wants',
  'was',
  'we',
  'were',
  'what',
  'when',
  'where',
  'which',
  'while',
  'who',
  'whom',
  'why',
  'will',
  'with',
  'would',
  'yet',
  'you',
  'your'
])

lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')
/*!
 * lunr.trimmer
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * lunr.trimmer is a pipeline function for trimming non word
 * characters from the beginning and end of tokens before they
 * enter the index.
 *
 * This implementation may not work correctly for non latin
 * characters and should either be removed or adapted for use
 * with languages with non-latin characters.
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token The token to pass through the filter
 * @returns {lunr.Token}
 * @see lunr.Pipeline
 */
lunr.trimmer = function (token) {
  return token.update(function (s) {
    return s.replace(/^\W+/, '').replace(/\W+$/, '')
  })
}

lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')
/*!
 * lunr.TokenSet
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * A token set is used to store the unique list of all tokens
 * within an index. Token sets are also used to represent an
 * incoming query to the index, this query token set and index
 * token set are then intersected to find which tokens to look
 * up in the inverted index.
 *
 * A token set can hold multiple tokens, as in the case of the
 * index token set, or it can hold a single token as in the
 * case of a simple query token set.
 *
 * Additionally token sets are used to perform wildcard matching.
 * Leading, contained and trailing wildcards are supported, and
 * from this edit distance matching can also be provided.
 *
 * Token sets are implemented as a minimal finite state automata,
 * where both common prefixes and suffixes are shared between tokens.
 * This helps to reduce the space used for storing the token set.
 *
 * @constructor
 */
lunr.TokenSet = function () {
  this.final = false
  this.edges = {}
  this.id = lunr.TokenSet._nextId
  lunr.TokenSet._nextId += 1
}

/**
 * Keeps track of the next, auto increment, identifier to assign
 * to a new tokenSet.
 *
 * TokenSets require a unique identifier to be correctly minimised.
 *
 * @private
 */
lunr.TokenSet._nextId = 1

/**
 * Creates a TokenSet instance from the given sorted array of words.
 *
 * @param {String[]} arr - A sorted array of strings to create the set from.
 * @returns {lunr.TokenSet}
 * @throws Will throw an error if the input array is not sorted.
 */
lunr.TokenSet.fromArray = function (arr) {
  var builder = new lunr.TokenSet.Builder

  for (var i = 0, len = arr.length; i < len; i++) {
    builder.insert(arr[i])
  }

  builder.finish()
  return builder.root
}

/**
 * Creates a token set from a query clause.
 *
 * @private
 * @param {Object} clause - A single clause from lunr.Query.
 * @param {string} clause.term - The query clause term.
 * @param {number} [clause.editDistance] - The optional edit distance for the term.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromClause = function (clause) {
  if ('editDistance' in clause) {
    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)
  } else {
    return lunr.TokenSet.fromString(clause.term)
  }
}

/**
 * Creates a token set representing a single string with a specified
 * edit distance.
 *
 * Insertions, deletions, substitutions and transpositions are each
 * treated as an edit distance of 1.
 *
 * Increasing the allowed edit distance will have a dramatic impact
 * on the performance of both creating and intersecting these TokenSets.
 * It is advised to keep the edit distance less than 3.
 *
 * @param {string} str - The string to create the token set from.
 * @param {number} editDistance - The allowed edit distance to match.
 * @returns {lunr.Vector}
 */
lunr.TokenSet.fromFuzzyString = function (str, editDistance) {
  var root = new lunr.TokenSet

  var stack = [{
    node: root,
    editsRemaining: editDistance,
    str: str
  }]

  while (stack.length) {
    var frame = stack.pop()

    // no edit
    if (frame.str.length > 0) {
      var char = frame.str.charAt(0),
          noEditNode

      if (char in frame.node.edges) {
        noEditNode = frame.node.edges[char]
      } else {
        noEditNode = new lunr.TokenSet
        frame.node.edges[char] = noEditNode
      }

      if (frame.str.length == 1) {
        noEditNode.final = true
      } else {
        stack.push({
          node: noEditNode,
          editsRemaining: frame.editsRemaining,
          str: frame.str.slice(1)
        })
      }
    }

    // deletion
    // can only do a deletion if we have enough edits remaining
    // and if there are characters left to delete in the string
    if (frame.editsRemaining > 0 && frame.str.length > 1) {
      var char = frame.str.charAt(1),
          deletionNode

      if (char in frame.node.edges) {
        deletionNode = frame.node.edges[char]
      } else {
        deletionNode = new lunr.TokenSet
        frame.node.edges[char] = deletionNode
      }

      if (frame.str.length <= 2) {
        deletionNode.final = true
      } else {
        stack.push({
          node: deletionNode,
          editsRemaining: frame.editsRemaining - 1,
          str: frame.str.slice(2)
        })
      }
    }

    // deletion
    // just removing the last character from the str
    if (frame.editsRemaining > 0 && frame.str.length == 1) {
      frame.node.final = true
    }

    // substitution
    // can only do a substitution if we have enough edits remaining
    // and if there are characters left to substitute
    if (frame.editsRemaining > 0 && frame.str.length >= 1) {
      if ("*" in frame.node.edges) {
        var substitutionNode = frame.node.edges["*"]
      } else {
        var substitutionNode = new lunr.TokenSet
        frame.node.edges["*"] = substitutionNode
      }

      if (frame.str.length == 1) {
        substitutionNode.final = true
      } else {
        stack.push({
          node: substitutionNode,
          editsRemaining: frame.editsRemaining - 1,
          str: frame.str.slice(1)
        })
      }
    }

    // insertion
    // can only do insertion if there are edits remaining
    if (frame.editsRemaining > 0) {
      if ("*" in frame.node.edges) {
        var insertionNode = frame.node.edges["*"]
      } else {
        var insertionNode = new lunr.TokenSet
        frame.node.edges["*"] = insertionNode
      }

      if (frame.str.length == 0) {
        insertionNode.final = true
      } else {
        stack.push({
          node: insertionNode,
          editsRemaining: frame.editsRemaining - 1,
          str: frame.str
        })
      }
    }

    // transposition
    // can only do a transposition if there are edits remaining
    // and there are enough characters to transpose
    if (frame.editsRemaining > 0 && frame.str.length > 1) {
      var charA = frame.str.charAt(0),
          charB = frame.str.charAt(1),
          transposeNode

      if (charB in frame.node.edges) {
        transposeNode = frame.node.edges[charB]
      } else {
        transposeNode = new lunr.TokenSet
        frame.node.edges[charB] = transposeNode
      }

      if (frame.str.length == 1) {
        transposeNode.final = true
      } else {
        stack.push({
          node: transposeNode,
          editsRemaining: frame.editsRemaining - 1,
          str: charA + frame.str.slice(2)
        })
      }
    }
  }

  return root
}

/**
 * Creates a TokenSet from a string.
 *
 * The string may contain one or more wildcard characters (*)
 * that will allow wildcard matching when intersecting with
 * another TokenSet.
 *
 * @param {string} str - The string to create a TokenSet from.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromString = function (str) {
  var node = new lunr.TokenSet,
      root = node,
      wildcardFound = false

  /*
   * Iterates through all characters within the passed string
   * appending a node for each character.
   *
   * As soon as a wildcard character is found then a self
   * referencing edge is introduced to continually match
   * any number of any characters.
   */
  for (var i = 0, len = str.length; i < len; i++) {
    var char = str[i],
        final = (i == len - 1)

    if (char == "*") {
      wildcardFound = true
      node.edges[char] = node
      node.final = final

    } else {
      var next = new lunr.TokenSet
      next.final = final

      node.edges[char] = next
      node = next

      // TODO: is this needed anymore?
      if (wildcardFound) {
        node.edges["*"] = root
      }
    }
  }

  return root
}

/**
 * Converts this TokenSet into an array of strings
 * contained within the TokenSet.
 *
 * @returns {string[]}
 */
lunr.TokenSet.prototype.toArray = function () {
  var words = []

  var stack = [{
    prefix: "",
    node: this
  }]

  while (stack.length) {
    var frame = stack.pop(),
        edges = Object.keys(frame.node.edges),
        len = edges.length

    if (frame.node.final) {
      words.push(frame.prefix)
    }

    for (var i = 0; i < len; i++) {
      var edge = edges[i]

      stack.push({
        prefix: frame.prefix.concat(edge),
        node: frame.node.edges[edge]
      })
    }
  }

  return words
}

/**
 * Generates a string representation of a TokenSet.
 *
 * This is intended to allow TokenSets to be used as keys
 * in objects, largely to aid the construction and minimisation
 * of a TokenSet. As such it is not designed to be a human
 * friendly representation of the TokenSet.
 *
 * @returns {string}
 */
lunr.TokenSet.prototype.toString = function () {
  // NOTE: Using Object.keys here as this.edges is very likely
  // to enter 'hash-mode' with many keys being added
  //
  // avoiding a for-in loop here as it leads to the function
  // being de-optimised (at least in V8). From some simple
  // benchmarks the performance is comparable, but allowing
  // V8 to optimize may mean easy performance wins in the future.

  if (this._str) {
    return this._str
  }

  var str = this.final ? '1' : '0',
      labels = Object.keys(this.edges).sort(),
      len = labels.length

  for (var i = 0; i < len; i++) {
    var label = labels[i],
        node = this.edges[label]

    str = str + label + node.id
  }

  return str
}

/**
 * Returns a new TokenSet that is the intersection of
 * this TokenSet and the passed TokenSet.
 *
 * This intersection will take into account any wildcards
 * contained within the TokenSet.
 *
 * @param {lunr.TokenSet} b - An other TokenSet to intersect with.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.prototype.intersect = function (b) {
  var output = new lunr.TokenSet,
      frame = undefined

  var stack = [{
    qNode: b,
    output: output,
    node: this
  }]

  while (stack.length) {
    frame = stack.pop()

    // NOTE: As with the #toString method, we are using
    // Object.keys and a for loop instead of a for-in loop
    // as both of these objects enter 'hash' mode, causing
    // the function to be de-optimised in V8
    var qEdges = Object.keys(frame.qNode.edges),
        qLen = qEdges.length,
        nEdges = Object.keys(frame.node.edges),
        nLen = nEdges.length

    for (var q = 0; q < qLen; q++) {
      var qEdge = qEdges[q]

      for (var n = 0; n < nLen; n++) {
        var nEdge = nEdges[n]

        if (nEdge == qEdge || qEdge == '*') {
          var node = frame.node.edges[nEdge],
              qNode = frame.qNode.edges[qEdge],
              final = node.final && qNode.final,
              next = undefined

          if (nEdge in frame.output.edges) {
            // an edge already exists for this character
            // no need to create a new node, just set the finality
            // bit unless this node is already final
            next = frame.output.edges[nEdge]
            next.final = next.final || final

          } else {
            // no edge exists yet, must create one
            // set the finality bit and insert it
            // into the output
            next = new lunr.TokenSet
            next.final = final
            frame.output.edges[nEdge] = next
          }

          stack.push({
            qNode: qNode,
            output: next,
            node: node
          })
        }
      }
    }
  }

  return output
}
lunr.TokenSet.Builder = function () {
  this.previousWord = ""
  this.root = new lunr.TokenSet
  this.uncheckedNodes = []
  this.minimizedNodes = {}
}

lunr.TokenSet.Builder.prototype.insert = function (word) {
  var node,
      commonPrefix = 0

  if (word < this.previousWord) {
    throw new Error ("Out of order word insertion")
  }

  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {
    if (word[i] != this.previousWord[i]) break
    commonPrefix++
  }

  this.minimize(commonPrefix)

  if (this.uncheckedNodes.length == 0) {
    node = this.root
  } else {
    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child
  }

  for (var i = commonPrefix; i < word.length; i++) {
    var nextNode = new lunr.TokenSet,
        char = word[i]

    node.edges[char] = nextNode

    this.uncheckedNodes.push({
      parent: node,
      char: char,
      child: nextNode
    })

    node = nextNode
  }

  node.final = true
  this.previousWord = word
}

lunr.TokenSet.Builder.prototype.finish = function () {
  this.minimize(0)
}

lunr.TokenSet.Builder.prototype.minimize = function (downTo) {
  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {
    var node = this.uncheckedNodes[i],
        childKey = node.child.toString()

    if (childKey in this.minimizedNodes) {
      node.parent.edges[node.char] = this.minimizedNodes[childKey]
    } else {
      // Cache the key for this node since
      // we know it can't change anymore
      node.child._str = childKey

      this.minimizedNodes[childKey] = node.child
    }

    this.uncheckedNodes.pop()
  }
}
/*!
 * lunr.Index
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * An index contains the built index of all documents and provides a query interface
 * to the index.
 *
 * Usually instances of lunr.Index will not be created using this constructor, instead
 * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be
 * used to load previously built and serialized indexes.
 *
 * @constructor
 * @param {Object} attrs - The attributes of the built search index.
 * @param {Object} attrs.invertedIndex - An index of term/field to document reference.
 * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.
 * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.
 * @param {string[]} attrs.fields - The names of indexed document fields.
 * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.
 */
lunr.Index = function (attrs) {
  this.invertedIndex = attrs.invertedIndex
  this.fieldVectors = attrs.fieldVectors
  this.tokenSet = attrs.tokenSet
  this.fields = attrs.fields
  this.pipeline = attrs.pipeline
}

/**
 * A result contains details of a document matching a search query.
 * @typedef {Object} lunr.Index~Result
 * @property {string} ref - The reference of the document this result represents.
 * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.
 * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.
 */

/**
 * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple
 * query language which itself is parsed into an instance of lunr.Query.
 *
 * For programmatically building queries it is advised to directly use lunr.Query, the query language
 * is best used for human entered text rather than program generated text.
 *
 * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported
 * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'
 * or 'world', though those that contain both will rank higher in the results.
 *
 * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can
 * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding
 * wildcards will increase the number of documents that will be found but can also have a negative
 * impact on query performance, especially with wildcards at the beginning of a term.
 *
 * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term
 * hello in the title field will match this query. Using a field not present in the index will lead
 * to an error being thrown.
 *
 * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term
 * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported
 * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.
 * Avoid large values for edit distance to improve query performance.
 *
 * To escape special characters the backslash character '\' can be used, this allows searches to include
 * characters that would normally be considered modifiers, e.g. `foo\~2` will search for a term "foo~2" instead
 * of attempting to apply a boost of 2 to the search term "foo".
 *
 * @typedef {string} lunr.Index~QueryString
 * @example <caption>Simple single term query</caption>
 * hello
 * @example <caption>Multiple term query</caption>
 * hello world
 * @example <caption>term scoped to a field</caption>
 * title:hello
 * @example <caption>term with a boost of 10</caption>
 * hello^10
 * @example <caption>term with an edit distance of 2</caption>
 * hello~2
 */

/**
 * Performs a search against the index using lunr query syntax.
 *
 * Results will be returned sorted by their score, the most relevant results
 * will be returned first.
 *
 * For more programmatic querying use lunr.Index#query.
 *
 * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.
 * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.search = function (queryString) {
  return this.query(function (query) {
    var parser = new lunr.QueryParser(queryString, query)
    parser.parse()
  })
}

/**
 * A query builder callback provides a query object to be used to express
 * the query to perform on the index.
 *
 * @callback lunr.Index~queryBuilder
 * @param {lunr.Query} query - The query object to build up.
 * @this lunr.Query
 */

/**
 * Performs a query against the index using the yielded lunr.Query object.
 *
 * If performing programmatic queries against the index, this method is preferred
 * over lunr.Index#search so as to avoid the additional query parsing overhead.
 *
 * A query object is yielded to the supplied function which should be used to
 * express the query to be run against the index.
 *
 * Note that although this function takes a callback parameter it is _not_ an
 * asynchronous operation, the callback is just yielded a query object to be
 * customized.
 *
 * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.query = function (fn) {
  // for each query clause
  // * process terms
  // * expand terms from token set
  // * find matching documents and metadata
  // * get document vectors
  // * score documents

  var query = new lunr.Query(this.fields),
      matchingFields = Object.create(null),
      queryVectors = Object.create(null)

  fn.call(query, query)

  for (var i = 0; i < query.clauses.length; i++) {
    /*
     * Unless the pipeline has been disabled for this term, which is
     * the case for terms with wildcards, we need to pass the clause
     * term through the search pipeline. A pipeline returns an array
     * of processed terms. Pipeline functions may expand the passed
     * term, which means we may end up performing multiple index lookups
     * for a single query term.
     */
    var clause = query.clauses[i],
        terms = null

    if (clause.usePipeline) {
      terms = this.pipeline.runString(clause.term)
    } else {
      terms = [clause.term]
    }

    for (var m = 0; m < terms.length; m++) {
      var term = terms[m]

      /*
       * Each term returned from the pipeline needs to use the same query
       * clause object, e.g. the same boost and or edit distance. The
       * simplest way to do this is to re-use the clause object but mutate
       * its term property.
       */
      clause.term = term

      /*
       * From the term in the clause we create a token set which will then
       * be used to intersect the indexes token set to get a list of terms
       * to lookup in the inverted index
       */
      var termTokenSet = lunr.TokenSet.fromClause(clause),
          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()

      for (var j = 0; j < expandedTerms.length; j++) {
        /*
         * For each term get the posting and termIndex, this is required for
         * building the query vector.
         */
        var expandedTerm = expandedTerms[j],
            posting = this.invertedIndex[expandedTerm],
            termIndex = posting._index

        for (var k = 0; k < clause.fields.length; k++) {
          /*
           * For each field that this query term is scoped by (by default
           * all fields are in scope) we need to get all the document refs
           * that have this term in that field.
           *
           * The posting is the entry in the invertedIndex for the matching
           * term from above.
           */
          var field = clause.fields[k],
              fieldPosting = posting[field],
              matchingDocumentRefs = Object.keys(fieldPosting)

          /*
           * To support field level boosts a query vector is created per
           * field. This vector is populated using the termIndex found for
           * the term and a unit value with the appropriate boost applied.
           *
           * If the query vector for this field does not exist yet it needs
           * to be created.
           */
          if (!(field in queryVectors)) {
            queryVectors[field] = new lunr.Vector
          }

          /*
           * Using upsert because there could already be an entry in the vector
           * for the term we are working with. In that case we just add the scores
           * together.
           */
          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })

          for (var l = 0; l < matchingDocumentRefs.length; l++) {
            /*
             * All metadata for this term/field/document triple
             * are then extracted and collected into an instance
             * of lunr.MatchData ready to be returned in the query
             * results
             */
            var matchingDocumentRef = matchingDocumentRefs[l],
                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),
                documentMetadata, matchData

            documentMetadata = fieldPosting[matchingDocumentRef]
            matchData = new lunr.MatchData (expandedTerm, field, documentMetadata)

            if (matchingFieldRef in matchingFields) {
              matchingFields[matchingFieldRef].combine(matchData)
            } else {
              matchingFields[matchingFieldRef] = matchData
            }

          }
        }
      }
    }
  }

  var matchingFieldRefs = Object.keys(matchingFields),
      results = {}

  for (var i = 0; i < matchingFieldRefs.length; i++) {
    /*
     * Currently we have document fields that match the query, but we
     * need to return documents. The matchData and scores are combined
     * from multiple fields belonging to the same document.
     *
     * Scores are calculated by field, using the query vectors created
     * above, and combined into a final document score using addition.
     */
    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),
        docRef = fieldRef.docRef,
        fieldVector = this.fieldVectors[fieldRef],
        score = queryVectors[fieldRef.fieldName].similarity(fieldVector)

    if (docRef in results) {
      results[docRef].score += score
      results[docRef].matchData.combine(matchingFields[fieldRef])
    } else {
      results[docRef] = {
        ref: docRef,
        score: score,
        matchData: matchingFields[fieldRef]
      }
    }
  }

  /*
   * The results object needs to be converted into a list
   * of results, sorted by score before being returned.
   */
  return Object.keys(results)
    .map(function (key) {
      return results[key]
    })
    .sort(function (a, b) {
      return b.score - a.score
    })
}

/**
 * Prepares the index for JSON serialization.
 *
 * The schema for this JSON blob will be described in a
 * separate JSON schema file.
 *
 * @returns {Object}
 */
lunr.Index.prototype.toJSON = function () {
  var invertedIndex = Object.keys(this.invertedIndex)
    .sort()
    .map(function (term) {
      return [term, this.invertedIndex[term]]
    }, this)

  var fieldVectors = Object.keys(this.fieldVectors)
    .map(function (ref) {
      return [ref, this.fieldVectors[ref].toJSON()]
    }, this)

  return {
    version: lunr.version,
    fields: this.fields,
    fieldVectors: fieldVectors,
    invertedIndex: invertedIndex,
    pipeline: this.pipeline.toJSON()
  }
}

/**
 * Loads a previously serialized lunr.Index
 *
 * @param {Object} serializedIndex - A previously serialized lunr.Index
 * @returns {lunr.Index}
 */
lunr.Index.load = function (serializedIndex) {
  var attrs = {},
      fieldVectors = {},
      serializedVectors = serializedIndex.fieldVectors,
      invertedIndex = {},
      serializedInvertedIndex = serializedIndex.invertedIndex,
      tokenSetBuilder = new lunr.TokenSet.Builder,
      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)

  if (serializedIndex.version != lunr.version) {
    lunr.utils.warn("Version mismatch when loading serialised index. Current version of lunr '" + lunr.version + "' does not match serialized index '" + serializedIndex.version + "'")
  }

  for (var i = 0; i < serializedVectors.length; i++) {
    var tuple = serializedVectors[i],
        ref = tuple[0],
        elements = tuple[1]

    fieldVectors[ref] = new lunr.Vector(elements)
  }

  for (var i = 0; i < serializedInvertedIndex.length; i++) {
    var tuple = serializedInvertedIndex[i],
        term = tuple[0],
        posting = tuple[1]

    tokenSetBuilder.insert(term)
    invertedIndex[term] = posting
  }

  tokenSetBuilder.finish()

  attrs.fields = serializedIndex.fields

  attrs.fieldVectors = fieldVectors
  attrs.invertedIndex = invertedIndex
  attrs.tokenSet = tokenSetBuilder.root
  attrs.pipeline = pipeline

  return new lunr.Index(attrs)
}
/*!
 * lunr.Builder
 * Copyright (C) 2017 Oliver Nightingale
 */

/**
 * lunr.Builder performs indexing on a set of documents and
 * returns instances of lunr.Index ready for querying.
 *
 * All configuration of the index is done via the builder, the
 * fields to index, the document reference, the text processing
 * pipeline and document scoring parameters are all set on the
 * builder before indexing.
 *
 * @constructor
 * @property {string} _ref - Internal reference to the document reference field.
 * @property {string[]} _fields - Internal reference to the document fields to index.
 * @property {object} invertedIndex - The inverted index maps terms to document fields.
 * @property {object} documentTermFrequencies - Keeps track of document term frequencies.
 * @property {object} documentLengths - Keeps track of the length of documents added to the index.
 * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.
 * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.
 * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.
 * @property {number} documentCount - Keeps track of the total number of documents indexed.
 * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.
 * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.
 * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.
 * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.
 */
lunr.Builder = function () {
  this._ref = "id"
  this._fields = []
  this.invertedIndex = Object.create(null)
  this.fieldTermFrequencies = {}
  this.fieldLengths = {}
  this.tokenizer = lunr.tokenizer
  this.pipeline = new lunr.Pipeline
  this.searchPipeline = new lunr.Pipeline
  this.documentCount = 0
  this._b = 0.75
  this._k1 = 1.2
  this.termIndex = 0
  this.metadataWhitelist = []
}

/**
 * Sets the document field used as the document reference. Every document must have this field.
 * The type of this field in the document should be a string, if it is not a string it will be
 * coerced into a string by calling toString.
 *
 * The default ref is 'id'.
 *
 * The ref should _not_ be changed during indexing, it should be set before any documents are
 * added to the index. Changing it during indexing can lead to inconsistent results.
 *
 * @param {string} ref - The name of the reference field in the document.
 */
lunr.Builder.prototype.ref = function (ref) {
  this._ref = ref
}

/**
 * Adds a field to the list of document fields that will be indexed. Every document being
 * indexed should have this field. Null values for this field in indexed documents will
 * not cause errors but will limit the chance of that document being retrieved by searches.
 *
 * All fields should be added before adding documents to the index. Adding fields after
 * a document has been indexed will have no effect on already indexed documents.
 *
 * @param {string} field - The name of a field to index in all documents.
 */
lunr.Builder.prototype.field = function (field) {
  this._fields.push(field)
}

/**
 * A parameter to tune the amount of field length normalisation that is applied when
 * calculating relevance scores. A value of 0 will completely disable any normalisation
 * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b
 * will be clamped to the range 0 - 1.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.b = function (number) {
  if (number < 0) {
    this._b = 0
  } else if (number > 1) {
    this._b = 1
  } else {
    this._b = number
  }
}

/**
 * A parameter that controls the speed at which a rise in term frequency results in term
 * frequency saturation. The default value is 1.2. Setting this to a higher value will give
 * slower saturation levels, a lower value will result in quicker saturation.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.k1 = function (number) {
  this._k1 = number
}

/**
 * Adds a document to the index.
 *
 * Before adding fields to the index the index should have been fully setup, with the document
 * ref and all fields to index already having been specified.
 *
 * The document must have a field name as specified by the ref (by default this is 'id') and
 * it should have all fields defined for indexing, though null or undefined values will not
 * cause errors.
 *
 * @param {object} doc - The document to add to the index.
 */
lunr.Builder.prototype.add = function (doc) {
  var docRef = doc[this._ref]

  this.documentCount += 1

  for (var i = 0; i < this._fields.length; i++) {
    var fieldName = this._fields[i],
        field = doc[fieldName],
        tokens = this.tokenizer(field),
        terms = this.pipeline.run(tokens),
        fieldRef = new lunr.FieldRef (docRef, fieldName),
        fieldTerms = Object.create(null)

    this.fieldTermFrequencies[fieldRef] = fieldTerms
    this.fieldLengths[fieldRef] = 0

    // store the length of this field for this document
    this.fieldLengths[fieldRef] += terms.length

    // calculate term frequencies for this field
    for (var j = 0; j < terms.length; j++) {
      var term = terms[j]

      if (fieldTerms[term] == undefined) {
        fieldTerms[term] = 0
      }

      fieldTerms[term] += 1

      // add to inverted index
      // create an initial posting if one doesn't exist
      if (this.invertedIndex[term] == undefined) {
        var posting = Object.create(null)
        posting["_index"] = this.termIndex
        this.termIndex += 1

        for (var k = 0; k < this._fields.length; k++) {
          posting[this._fields[k]] = Object.create(null)
        }

        this.invertedIndex[term] = posting
      }

      // add an entry for this term/fieldName/docRef to the invertedIndex
      if (this.invertedIndex[term][fieldName][docRef] == undefined) {
        this.invertedIndex[term][fieldName][docRef] = Object.create(null)
      }

      // store all whitelisted metadata about this token in the
      // inverted index
      for (var l = 0; l < this.metadataWhitelist.length; l++) {
        var metadataKey = this.metadataWhitelist[l],
            metadata = term.metadata[metadataKey]

        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {
          this.invertedIndex[term][fieldName][docRef][metadataKey] = []
        }

        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)
      }
    }

  }
}

/**
 * Calculates the average document length for this index
 *
 * @private
 */
lunr.Builder.prototype.calculateAverageFieldLengths = function () {

  var fieldRefs = Object.keys(this.fieldLengths),
      numberOfFields = fieldRefs.length,
      accumulator = {},
      documentsWithField = {}

  for (var i = 0; i < numberOfFields; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        field = fieldRef.fieldName

    documentsWithField[field] || (documentsWithField[field] = 0)
    documentsWithField[field] += 1

    accumulator[field] || (accumulator[field] = 0)
    accumulator[field] += this.fieldLengths[fieldRef]
  }

  for (var i = 0; i < this._fields.length; i++) {
    var field = this._fields[i]
    accumulator[field] = accumulator[field] / documentsWithField[field]
  }

  this.averageFieldLength = accumulator
}

/**
 * Builds a vector space model of every document using lunr.Vector
 *
 * @private
 */
lunr.Builder.prototype.createFieldVectors = function () {
  var fieldVectors = {},
      fieldRefs = Object.keys(this.fieldTermFrequencies),
      fieldRefsLength = fieldRefs.length

  for (var i = 0; i < fieldRefsLength; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        field = fieldRef.fieldName,
        fieldLength = this.fieldLengths[fieldRef],
        fieldVector = new lunr.Vector,
        termFrequencies = this.fieldTermFrequencies[fieldRef],
        terms = Object.keys(termFrequencies),
        termsLength = terms.length

    for (var j = 0; j < termsLength; j++) {
      var term = terms[j],
          tf = termFrequencies[term],
          termIndex = this.invertedIndex[term]._index,
          idf = lunr.idf(this.invertedIndex[term], this.documentCount),
          score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf),
          scoreWithPrecision = Math.round(score * 1000) / 1000
          // Converts 1.23456789 to 1.234.
          // Reducing the precision so that the vectors take up less
          // space when serialised. Doing it now so that they behave
          // the same before and after serialisation. Also, this is
          // the fastest approach to reducing a number's precision in
          // JavaScript.

      fieldVector.insert(termIndex, scoreWithPrecision)
    }

    fieldVectors[fieldRef] = fieldVector
  }

  this.fieldVectors = fieldVectors
}

/**
 * Creates a token set of all tokens in the index using lunr.TokenSet
 *
 * @private
 */
lunr.Builder.prototype.createTokenSet = function () {
  this.tokenSet = lunr.TokenSet.fromArray(
    Object.keys(this.invertedIndex).sort()
  )
}

/**
 * Builds the index, creating an instance of lunr.Index.
 *
 * This completes the indexing process and should only be called
 * once all documents have been added to the index.
 *
 * @private
 * @returns {lunr.Index}
 */
lunr.Builder.prototype.build = function () {
  this.calculateAverageFieldLengths()
  this.createFieldVectors()
  this.createTokenSet()

  return new lunr.Index({
    invertedIndex: this.invertedIndex,
    fieldVectors: this.fieldVectors,
    tokenSet: this.tokenSet,
    fields: this._fields,
    pipeline: this.searchPipeline
  })
}

/**
 * Applies a plugin to the index builder.
 *
 * A plugin is a function that is called with the index builder as its context.
 * Plugins can be used to customise or extend the behaviour of the index
 * in some way. A plugin is just a function, that encapsulated the custom
 * behaviour that should be applied when building the index.
 *
 * The plugin function will be called with the index builder as its argument, additional
 * arguments can also be passed when calling use. The function will be called
 * with the index builder as its context.
 *
 * @param {Function} plugin The plugin to apply.
 */
lunr.Builder.prototype.use = function (fn) {
  var args = Array.prototype.slice.call(arguments, 1)
  args.unshift(this)
  fn.apply(this, args)
}
/**
 * Contains and collects metadata about a matching document.
 * A single instance of lunr.MatchData is returned as part of every
 * lunr.Index~Result.
 *
 * @constructor
 * @param {string} term - The term this match data is associated with
 * @param {string} field - The field in which the term was found
 * @param {object} metadata - The metadata recorded about this term in this field
 * @property {object} metadata - A cloned collection of metadata associated with this document.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData = function (term, field, metadata) {
  var clonedMetadata = Object.create(null),
      metadataKeys = Object.keys(metadata)

  // Cloning the metadata to prevent the original
  // being mutated during match data combination.
  // Metadata is kept in an array within the inverted
  // index so cloning the data can be done with
  // Array#slice
  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i]
    clonedMetadata[key] = metadata[key].slice()
  }

  this.metadata = Object.create(null)
  this.metadata[term] = Object.create(null)
  this.metadata[term][field] = clonedMetadata
}

/**
 * An instance of lunr.MatchData will be created for every term that matches a
 * document. However only one instance is required in a lunr.Index~Result. This
 * method combines metadata from another instance of lunr.MatchData with this
 * objects metadata.
 *
 * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData.prototype.combine = function (otherMatchData) {
  var terms = Object.keys(otherMatchData.metadata)

  for (var i = 0; i < terms.length; i++) {
    var term = terms[i],
        fields = Object.keys(otherMatchData.metadata[term])

    if (this.metadata[term] == undefined) {
      this.metadata[term] = Object.create(null)
    }

    for (var j = 0; j < fields.length; j++) {
      var field = fields[j],
          keys = Object.keys(otherMatchData.metadata[term][field])

      if (this.metadata[term][field] == undefined) {
        this.metadata[term][field] = Object.create(null)
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k]

        if (this.metadata[term][field][key] == undefined) {
          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]
        } else {
          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])
        }

      }
    }
  }
}
/**
 * A lunr.Query provides a programmatic way of defining queries to be performed
 * against a {@link lunr.Index}.
 *
 * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method
 * so the query object is pre-initialized with the right index fields.
 *
 * @constructor
 * @property {lunr.Query~Clause[]} clauses - An array of query clauses.
 * @property {string[]} allFields - An array of all available fields in a lunr.Index.
 */
lunr.Query = function (allFields) {
  this.clauses = []
  this.allFields = allFields
}

/**
 * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.
 *
 * This allows wildcards to be added to the beginning and end of a term without having to manually do any string
 * concatenation.
 *
 * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.
 *
 * @constant
 * @default
 * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour
 * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists
 * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists
 * @see lunr.Query~Clause
 * @see lunr.Query#clause
 * @see lunr.Query#term
 * @example <caption>query term with trailing wildcard</caption>
 * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })
 * @example <caption>query term with leading and trailing wildcard</caption>
 * query.term('foo', {
 *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING
 * })
 */
lunr.Query.wildcard = new String ("*")
lunr.Query.wildcard.NONE = 0
lunr.Query.wildcard.LEADING = 1
lunr.Query.wildcard.TRAILING = 2

/**
 * A single clause in a {@link lunr.Query} contains a term and details on how to
 * match that term against a {@link lunr.Index}.
 *
 * @typedef {Object} lunr.Query~Clause
 * @property {string[]} fields - The fields in an index this clause should be matched against.
 * @property {number} [boost=1] - Any boost that should be applied when matching this clause.
 * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.
 * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.
 * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.
 */

/**
 * Adds a {@link lunr.Query~Clause} to this query.
 *
 * Unless the clause contains the fields to be matched all fields will be matched. In addition
 * a default boost of 1 is applied to the clause.
 *
 * @param {lunr.Query~Clause} clause - The clause to add to this query.
 * @see lunr.Query~Clause
 * @returns {lunr.Query}
 */
lunr.Query.prototype.clause = function (clause) {
  if (!('fields' in clause)) {
    clause.fields = this.allFields
  }

  if (!('boost' in clause)) {
    clause.boost = 1
  }

  if (!('usePipeline' in clause)) {
    clause.usePipeline = true
  }

  if (!('wildcard' in clause)) {
    clause.wildcard = lunr.Query.wildcard.NONE
  }

  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {
    clause.term = "*" + clause.term
  }

  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {
    clause.term = "" + clause.term + "*"
  }

  this.clauses.push(clause)

  return this
}

/**
 * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}
 * to the list of clauses that make up this query.
 *
 * @param {string} term - The term to add to the query.
 * @param {Object} [options] - Any additional properties to add to the query clause.
 * @returns {lunr.Query}
 * @see lunr.Query#clause
 * @see lunr.Query~Clause
 * @example <caption>adding a single term to a query</caption>
 * query.term("foo")
 * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>
 * query.term("foo", {
 *   fields: ["title"],
 *   boost: 10,
 *   wildcard: lunr.Query.wildcard.TRAILING
 * })
 */
lunr.Query.prototype.term = function (term, options) {
  var clause = options || {}
  clause.term = term

  this.clause(clause)

  return this
}
lunr.QueryParseError = function (message, start, end) {
  this.name = "QueryParseError"
  this.message = message
  this.start = start
  this.end = end
}

lunr.QueryParseError.prototype = new Error
lunr.QueryLexer = function (str) {
  this.lexemes = []
  this.str = str
  this.length = str.length
  this.pos = 0
  this.start = 0
  this.escapeCharPositions = []
}

lunr.QueryLexer.prototype.run = function () {
  var state = lunr.QueryLexer.lexText

  while (state) {
    state = state(this)
  }
}

lunr.QueryLexer.prototype.sliceString = function () {
  var subSlices = [],
      sliceStart = this.start,
      sliceEnd = this.pos

  for (var i = 0; i < this.escapeCharPositions.length; i++) {
    sliceEnd = this.escapeCharPositions[i]
    subSlices.push(this.str.slice(sliceStart, sliceEnd))
    sliceStart = sliceEnd + 1
  }

  subSlices.push(this.str.slice(sliceStart, this.pos))
  this.escapeCharPositions.length = 0

  return subSlices.join('')
}

lunr.QueryLexer.prototype.emit = function (type) {
  this.lexemes.push({
    type: type,
    str: this.sliceString(),
    start: this.start,
    end: this.pos
  })

  this.start = this.pos
}

lunr.QueryLexer.prototype.escapeCharacter = function () {
  this.escapeCharPositions.push(this.pos - 1)
  this.pos += 1
}

lunr.QueryLexer.prototype.next = function () {
  if (this.pos >= this.length) {
    return lunr.QueryLexer.EOS
  }

  var char = this.str.charAt(this.pos)
  this.pos += 1
  return char
}

lunr.QueryLexer.prototype.width = function () {
  return this.pos - this.start
}

lunr.QueryLexer.prototype.ignore = function () {
  if (this.start == this.pos) {
    this.pos += 1
  }

  this.start = this.pos
}

lunr.QueryLexer.prototype.backup = function () {
  this.pos -= 1
}

lunr.QueryLexer.prototype.acceptDigitRun = function () {
  var char, charCode

  do {
    char = this.next()
    charCode = char.charCodeAt(0)
  } while (charCode > 47 && charCode < 58)

  if (char != lunr.QueryLexer.EOS) {
    this.backup()
  }
}

lunr.QueryLexer.prototype.more = function () {
  return this.pos < this.length
}

lunr.QueryLexer.EOS = 'EOS'
lunr.QueryLexer.FIELD = 'FIELD'
lunr.QueryLexer.TERM = 'TERM'
lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'
lunr.QueryLexer.BOOST = 'BOOST'

lunr.QueryLexer.lexField = function (lexer) {
  lexer.backup()
  lexer.emit(lunr.QueryLexer.FIELD)
  lexer.ignore()
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexTerm = function (lexer) {
  if (lexer.width() > 1) {
    lexer.backup()
    lexer.emit(lunr.QueryLexer.TERM)
  }

  lexer.ignore()

  if (lexer.more()) {
    return lunr.QueryLexer.lexText
  }
}

lunr.QueryLexer.lexEditDistance = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexBoost = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.BOOST)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexEOS = function (lexer) {
  if (lexer.width() > 0) {
    lexer.emit(lunr.QueryLexer.TERM)
  }
}

// This matches the separator used when tokenising fields
// within a document. These should match otherwise it is
// not possible to search for some tokens within a document.
//
// It is possible for the user to change the separator on the
// tokenizer so it _might_ clash with any other of the special
// characters already used within the search string, e.g. :.
//
// This means that it is possible to change the separator in
// such a way that makes some words unsearchable using a search
// string.
lunr.QueryLexer.termSeparator = lunr.tokenizer.separator

lunr.QueryLexer.lexText = function (lexer) {
  while (true) {
    var char = lexer.next()

    if (char == lunr.QueryLexer.EOS) {
      return lunr.QueryLexer.lexEOS
    }

    // Escape character is '\'
    if (char.charCodeAt(0) == 92) {
      lexer.escapeCharacter()
      continue
    }

    if (char == ":") {
      return lunr.QueryLexer.lexField
    }

    if (char == "~") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexEditDistance
    }

    if (char == "^") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexBoost
    }

    if (char.match(lunr.QueryLexer.termSeparator)) {
      return lunr.QueryLexer.lexTerm
    }
  }
}

lunr.QueryParser = function (str, query) {
  this.lexer = new lunr.QueryLexer (str)
  this.query = query
  this.currentClause = {}
  this.lexemeIdx = 0
}

lunr.QueryParser.prototype.parse = function () {
  this.lexer.run()
  this.lexemes = this.lexer.lexemes

  var state = lunr.QueryParser.parseFieldOrTerm

  while (state) {
    state = state(this)
  }

  return this.query
}

lunr.QueryParser.prototype.peekLexeme = function () {
  return this.lexemes[this.lexemeIdx]
}

lunr.QueryParser.prototype.consumeLexeme = function () {
  var lexeme = this.peekLexeme()
  this.lexemeIdx += 1
  return lexeme
}

lunr.QueryParser.prototype.nextClause = function () {
  var completedClause = this.currentClause
  this.query.clause(completedClause)
  this.currentClause = {}
}

lunr.QueryParser.parseFieldOrTerm = function (parser) {
  var lexeme = parser.peekLexeme()

  if (lexeme == undefined) {
    return
  }

  switch (lexeme.type) {
    case lunr.QueryLexer.FIELD:
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expected either a field or a term, found " + lexeme.type

      if (lexeme.str.length >= 1) {
        errorMessage += " with value '" + lexeme.str + "'"
      }

      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }
}

lunr.QueryParser.parseField = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  if (parser.query.allFields.indexOf(lexeme.str) == -1) {
    var possibleFields = parser.query.allFields.map(function (f) { return "'" + f + "'" }).join(', '),
        errorMessage = "unrecognised field '" + lexeme.str + "', possible fields: " + possibleFields

    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.fields = [lexeme.str]

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    var errorMessage = "expecting term, found nothing"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expecting term, found '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseTerm = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  parser.currentClause.term = lexeme.str.toLowerCase()

  if (lexeme.str.indexOf("*") != -1) {
    parser.currentClause.usePipeline = false
  }

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseEditDistance = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var editDistance = parseInt(lexeme.str, 10)

  if (isNaN(editDistance)) {
    var errorMessage = "edit distance must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.editDistance = editDistance

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseBoost = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var boost = parseInt(lexeme.str, 10)

  if (isNaN(boost)) {
    var errorMessage = "boost must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.boost = boost

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

  /**
   * export the module via AMD, CommonJS or as a browser global
   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
   */
  ;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory)
    } else if (typeof exports === 'object') {
      /**
       * Node. Does not work with strict CommonJS, but
       * only CommonJS-like enviroments that support module.exports,
       * like Node.
       */
      module.exports = factory()
    } else {
      // Browser globals (root is window)
      root.lunr = factory()
    }
  }(this, function () {
    /**
     * Just return a value to define the module export.
     * This example returns an object, but the module
     * can return a function as the exported value.
     */
    return lunr
  }))
})();



================================================
File: ERC/docs/styles/main.css
================================================



================================================
File: ERC/docs/styles/main.js
================================================
// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.



================================================
File: ERC/docs/styles/search-worker.js
================================================
(function () {
  importScripts('lunr.min.js');

  var lunrIndex;

  var stopWords = null;
  var searchData = {};

  lunr.tokenizer.separator = /[\s\-\.]+/;

  var stopWordsRequest = new XMLHttpRequest();
  stopWordsRequest.open('GET', '../search-stopwords.json');
  stopWordsRequest.onload = function () {
    if (this.status != 200) {
      return;
    }
    stopWords = JSON.parse(this.responseText);
    buildIndex();
  }
  stopWordsRequest.send();

  var searchDataRequest = new XMLHttpRequest();

  searchDataRequest.open('GET', '../index.json');
  searchDataRequest.onload = function () {
    if (this.status != 200) {
      return;
    }
    searchData = JSON.parse(this.responseText);

    buildIndex();

    postMessage({ e: 'index-ready' });
  }
  searchDataRequest.send();

  onmessage = function (oEvent) {
    var q = oEvent.data.q;
    var hits = lunrIndex.search(q);
    var results = [];
    hits.forEach(function (hit) {
      var item = searchData[hit.ref];
      results.push({ 'href': item.href, 'title': item.title, 'keywords': item.keywords });
    });
    postMessage({ e: 'query-ready', q: q, d: results });
  }

  function buildIndex() {
    if (stopWords !== null && !isEmpty(searchData)) {
      lunrIndex = lunr(function () {
        this.pipeline.remove(lunr.stopWordFilter);
        this.ref('href');
        this.field('title', { boost: 50 });
        this.field('keywords', { boost: 20 });

        for (var prop in searchData) {
          if (searchData.hasOwnProperty(prop)) {
            this.add(searchData[prop]);
          }
        }

        var docfxStopWordFilter = lunr.generateStopWordFilter(stopWords);
        lunr.Pipeline.registerFunction(docfxStopWordFilter, 'docfxStopWordFilter');
        this.pipeline.add(docfxStopWordFilter);
        this.searchPipeline.add(docfxStopWordFilter);
      });
    }
  }

  function isEmpty(obj) {
    if(!obj) return true;

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop))
        return false;
    }

    return true;
  }
})();



================================================
File: ERC.net/ERC/ERC.Net.xml
================================================
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ERC.Net</name>
    </assembly>
    <members>
        <member name="T:ERC.Utilities.Convert">
            <summary>
            Static class containing methods for common conversions.
            </summary>
        </member>
        <member name="M:ERC.Utilities.Convert.HexToAscii(System.String)">
            <summary>
            Converts a hex string to ASCII."
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>A string containing the equivalent ASCII values</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.HexToBytes(System.String)">
            <summary>
            Converts a hex string to the equivalent bytes.
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>A byte array containing the associated values.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.AsciiToBytes(System.String)">
            <summary>
            Converts an ASCII string to a byte array.
            </summary>
            <param name="ascii">An ASCII string.</param>
            <returns>A byte array containing the associated values.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.AsciiToHex(System.String)">
            <summary>
            Converts an ASCII string to a hex string
            </summary>
            <param name="ascii">An ASCII string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UnicodeToBytes(System.String)">
            <summary>
            Converts a Unicode string to a byte array.
            </summary>
            <param name="unicode">A Unicode string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UnicodeToHex(System.String)">
            <summary>
            Converts a Unicode string to a hex string.
            </summary>
            <param name="unicode">A Unicode string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF7ToBytes(System.String)">
            <summary>
            Converts a UTF-7 string to a byte array.
            </summary>
            <param name="utf7">A UTF-7 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF7ToHex(System.String)">
            <summary>
            Converts a UTF-7 string to a hex string.
            </summary>
            <param name="utf7">A UTF-7 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF8ToBytes(System.String)">
            <summary>
            Converts a UTF-8 string to a byte array.
            </summary>
            <param name="utf8">A UTF-8 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF8ToHex(System.String)">
            <summary>
            Converts a UTF-8 string to a hex string.
            </summary>
            <param name="utf8">A UTF-8 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF32ToBytes(System.String)">
            <summary>
            Converts a UTF-32 string to a byte array.
            </summary>
            <param name="utf32">A UTF-32 string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.UTF32ToHex(System.String)">
            <summary>
            Converts a UTF-32 string to a hex string.
            </summary>
            <param name="utf32">A UTF-32 string.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ERC.Utilities.Convert.htmlWhitespaceFix(System.String)">
            <summary>
            Converts the spaces in a string to Html fixed width character.
            </summary>
            <param name="str">A UTF-8 string.</param>
            <returns>A string with spaces converted to HTML entities.</returns>
        </member>
        <member name="T:ERC.Utilities.OpcodeAssembler">
            <summary>
            OpcodeAssembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
            a static function to assemble instructions.
            </summary>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">ProcessInfo object to be inherited from.</param>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String})">
            <summary>
            Takes either an array or list of strings containing assembly instructions and returns the associated opcodes.  
            </summary>
            <param name="instructions">The instructions to be assembled</param>
            <returns>Returns an ErcResult byte array containing the assembled instructions</returns>
        </member>
        <member name="M:ERC.Utilities.OpcodeAssembler.AssembleOpcodes(System.Collections.Generic.List{System.String},ERC.MachineType)">
            <summary>
            Takes either an array or list of strings containing assembly instructions, a MachineType of I386 or x64, 
            an instance of the ERC_Core object and returns the associated opcodes.  
            </summary>
            <param name="instructions">The instructions to be assemble=d</param>
            <param name="machineType">a ERC.MachineType of either I386 or x64</param>
            <returns>Returns an ERC_Result byte array containing the assembled instructions</returns>
        </member>
        <member name="T:ERC.Utilities.OpcodeDisassembler">
            <summary>
            OpcodeDisassembler class, can be declared and inherit from a ProcessInfo object to inherit the values of the current process or be called as 
            a static function to disassemble opcodes.
            </summary>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">ProcessInfo object to be inherited from.</param>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[])">
            <summary>
            Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes. 
            </summary>
            <param name="opcodes">The opcodes to be disassembled</param>
            <returns>Returns an ERC_Result containing associated instructions.</returns>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType)">
            <summary>
            Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64, 
            an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.
            </summary>
            <param name="opcodes">A byte array containing opcodes to be disassembled</param>
            <param name="machineType">a ERC.MachineType of either I386 or x64</param>
            <returns>Returns an ERC_Result containing associated instructions.</returns>
        </member>
        <member name="M:ERC.Utilities.OpcodeDisassembler.Disassemble(System.Byte[],ERC.MachineType,ERC.ErcCore)">
            <summary>
            Disassembles opcodes into the associated instructions. Takes a byte array containing opcodes, a MachineType of I386 or x64, 
            an instance of the ERC_Core object and returns an ERC_Result containing associated instructions.
            </summary>
            <param name="opcodes">A byte array containing opcodes to be disassembled</param>
            <param name="machineType">a ERC.MachineType of either I386 or x64</param>
            <param name="core">a ErcCore object</param>
            <returns>Returns an ERC_Result containing associated instructions.</returns>
        </member>
        <member name="T:ERC.Utilities.PatternTools">
            <summary>
            Static class used to build a non repeating pattern and identify the position of a string in a non repeating pattern.
            </summary>
        </member>
        <member name="M:ERC.Utilities.PatternTools.PatternCreate(System.Int32,ERC.ErcCore,System.Boolean)">
            <summary>
            Creates a string of non repeating characters.
            </summary>
            <param name="length">The length of the pattern to be created as integer</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
            <returns>Returns an ErcResult string containing the generated pattern</returns>
        </member>
        <member name="M:ERC.Utilities.PatternTools.PatternOffset(System.String,ERC.ErcCore,System.Boolean)">
            <summary>
            Takes a string of characters and returns the location of the first character in a pattern created by Pattern_Create.
            </summary>
            <param name="pattern">The pattern to be searched for.</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">(Optional) bool specifying whether the extended character set should be used</param>
            <returns>Returns an ErcResult int containing the offset of the supplied pattern within the generated pattern</returns>
        </member>
        <member name="T:ERC.Utilities.Payloads">
            <summary>
            A collecton of methods which generate payloads.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.DefaultEgg">
            <summary>
            Default egg hunter tag.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter641">
            <summary>
            A 64 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter642">
            <summary>
            A second 64 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunter32">
            <summary>
            A 32 bit egg hunter.
            </summary>
        </member>
        <member name="F:ERC.Utilities.Payloads.EggHunterWOW64">
            <summary>
            An egg hunter that will work on 32 bit systems or 32 bit processes running under WOW64.
            </summary>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])">
            <summary>
            Creates an array of all possible byte values except those passed to the function. 
            </summary>
            <param name="unwantedBytes">Takes a byte array of bytes to be excluded</param>
            <returns>Returns an array of all other possible bytes.</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.EggHunterConstructor(System.String)">
            <summary>
            Generates a selection of EggHunter payloads. A custom tag can be specified, if no tag is specified EggHunters will search for the default tag (ERCD)
            </summary>
            <param name="tag">A custom tag which the egg hunters will search for.</param>
            <returns>Returns a dictionary containing a list of EggHunters and string detailing them</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.PopPopRet(System.Byte[])">
            <summary>
            Finds all instances of POP X POP X RET in a given byte array. 
            </summary>
            <param name="data">Byte array to be searched</param>
            <returns>Returns an array of integers containing the offsets of the instruction sets.</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])">
            <summary>
            Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
            bytes which can not be passed into a program without corrupting the input.
            </summary>
            <param name="info">The process to compare memory from</param>
            <param name="startAddress">The address at which to start the comparison</param>
            <param name="bytes">The byte array containing the bytes to be compared</param>
            <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
            the bytes provided and a byte array containing the bytes read from process memory</returns>
        </member>
        <member name="M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)">
            <summary>
            Compares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify 
            bytes which can not be passed into a program without corrupting the input.
            </summary>
            <param name="info">The process to compare memory from</param>
            <param name="startAddress">The address at which to start the comparison</param>
            <param name="byteFilePath">The path to a file containing the bytes to be compared</param>
            <returns>Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing 
            the bytes provided and a byte array containing the bytes read from process memory</returns>
        </member>
        <member name="T:ERC.Utilities.PtrRemover">
            <summary>
            Contains methods for identifying and removing pointers to unwanted data.
            </summary>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.List{System.IntPtr},System.Byte[])">
            <summary>
            Removes pointers which contain unwanted bytes. 
            </summary>
            <param name="mt">MachineType architecture of the associated process.</param>
            <param name="srcList">The list from which to remove the pointers</param>
            <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
            <returns>Returns a ErcResult of List IntPtr</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointers(ERC.MachineType,System.Collections.Generic.Dictionary{System.IntPtr,System.String},System.Byte[])">
            <summary>
            Removes pointers which contain unwanted bytes. 
            </summary>
            <param name="mt">MachineType architecture of the associated process.</param>
            <param name="srcList">The list from which to remove the pointers</param>
            <param name="bytes">If a pointer contains any of these bytes it will be discarded</param>
            <returns>Returns a ErcResult of Dictionary IntPtr, String</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.String)">
            <summary>
            Removes pointers from a dictionary when pointers do not have the protection level specified.
            </summary>
            <param name="info">ProcessInfo object of the associated process.</param>
            <param name="srcList">List of pointers.</param>
            <param name="protection">Specified protection level of pointers.</param>
            <returns>Returns a Dictionary of Intptr, string</returns>
        </member>
        <member name="M:ERC.Utilities.PtrRemover.RemovePointersProtection(ERC.ProcessInfo,System.Collections.Generic.List{System.IntPtr},System.UInt32)">
            <summary>
            Removes pointers from a dictionary when pointers do not have the protection level specified.
            </summary>
            <param name="info">ProcessInfo object of the associated process.</param>
            <param name="srcList">List of pointers.</param>
            <param name="protection">Specified protection level of pointers.</param>
            <returns>Returns a Dictionary of Intptr, string</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator32">
            <summary> Attempts to create Rop chains from 32 bit processes. </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.VirtualAllocChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.HeapCreateChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.VirtualProtectChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.WriteProcessMemoryChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ERC.Utilities.RopChainGenerator32.#ctor(ERC.ProcessInfo)" -->
        <member name="M:ERC.Utilities.RopChainGenerator32.GenerateRopGadgets32(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a list of ROP gadgets for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator32.RopMethod)">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GenerateRopChain32(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator32.RopMethod)">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable.</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets.</param>
            <param name="methods">Enum value representing which methods to build rop chains with.</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetApiAddresses(ERC.ProcessInfo)">
            <summary>
            Gets the handles of 4 functions associated with building ROP chains: VirtualAlloc, HeapCreate, VirtualProtect and WriteProcessMemory
            </summary>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetRopNops(System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of RopNops from the current process memory.
            </summary>
            <param name="excludes">A list of modules to be excluded from the search</param>
            <returns>Returns a ErcResult containing a list of IntPtr</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.ZeroRegister(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
            followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
            </summary>
            <param name="modifyingReg">The Register32 value for the register to be zeroed.</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
            <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.SetRegisterModifier(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Sets the flag of a Register32 enum in a RegisterModifiers32 class. This flag is used to identify whether setting the value of one 
            register involved editing another register. For example if setting EAX involved modifying EBX then RegisterModifiers32.EAX will have the EBX flag set. Any
            register should not be able to modify the value of any other register twice.
            
            The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
            </summary>
            <param name="modifiedReg">The Registers32 which is being modified</param>
            <param name="modifyingReg">The Registers32 which is doing the modification</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetRegisterModified(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.RegisterModifiers32)">
            <summary>
            Returns a boolean indicating whether one register has modified the value of another register attempting to set the correct value.
            </summary>
            <param name="modifiedReg">The Registers32 which is being modified</param>
            <param name="modifyingReg">The Registers32 which is doing the modification</param>
            <param name="regModified32">The RegisterModifiers32 object.</param>
            <returns>A bool, true = register was modified by this register false = register was not modified by this register</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetMovInstruction(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Finds a mov instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.GetAddInstruction(ERC.Utilities.RopChainGenerator32.Register32,ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Finds a add instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register32 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator32.CompleteRegisters32(ERC.Utilities.RopChainGenerator32.Register32)">
            <summary>
            Checks all values of a Registers32 enum and returns false if any of them are not set. 
            </summary>
            <param name="regState">The Registers32 object to be tested</param>
            <returns>A boolean value is returned</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator32.X86Lists">
            <summary>
            Contains lists of instructions for specific registers.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEax">
            <summary>
            pushEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbx">
            <summary>
            pushEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEcx">
            <summary>
            pushEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdx">
            <summary>
            pushEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsp">
            <summary>
            pushEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEbp">
            <summary>
            pushEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEsi">
            <summary>
            pushEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushEdi">
            <summary>
            pushEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.jmpEsp">
            <summary>
            jmpEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.callEsp">
            <summary>
            callEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEax">
            <summary>
            xorEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEbx">
            <summary>
            xorEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEcx">
            <summary>
            xorEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdx">
            <summary>
            xorEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEsi">
            <summary>
            xorEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.xorEdi">
            <summary>
            xorEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEax">
            <summary>
            popEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbx">
            <summary>
            popEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEcx">
            <summary>
            popEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdx">
            <summary>
            popEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsp">
            <summary>
            popEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEbp">
            <summary>
            popEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEsi">
            <summary>
            popEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.popEdi">
            <summary>
            popEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.pushad">
            <summary>
            pushad list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEax">
            <summary>
            incEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbx">
            <summary>
            incEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEcx">
            <summary>
            incEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdx">
            <summary>
            incEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEbp">
            <summary>
            incEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsp">
            <summary>
            incEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEsi">
            <summary>
            incEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.incEdi">
            <summary>
            incEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEax">
            <summary>
            decEax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbx">
            <summary>
            decEbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEcx">
            <summary>
            decEcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdx">
            <summary>
            decEdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEbp">
            <summary>
            decEbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsp">
            <summary>
            decEsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEsi">
            <summary>
            decEsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.decEdi">
            <summary>
            decEdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.add">
            <summary>
            add list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.sub">
            <summary>
            sub list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.mov">
            <summary>
            mov list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator32.X86Lists.and">
            <summary>
            and list.
            </summary>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator32.RopMethod">
            <summary>
            Enum of methods which can be used to generate a ROP chain.
            </summary>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator64">
            <summary> Attempts to create Rop chains from 64 bit processes. </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.VirtualAllocChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.HeapCreateChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.VirtualProtectChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.WriteProcessMemoryChain">
            <summary>
            Contains a ROP chain which calls the VirtualAlloc method.
            </summary>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor
            </summary>
            <param name="_info">ProcessInfo object for which a ROP chain will be generated</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Creates a list of ROP gadgets for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="ptrsToExclude">Takes a byte array of values used to disqualify ROP gadgets</param>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)">
            <summary>
            Creates a RopChain for a specific process.
            </summary>
            <param name="startAddress">A Address to be used as the start location for which memory will be made executable</param>
            <param name="excludes">A list of modules to be excluded from the search for ROP gadgets</param>
            <returns>Returns an ErcResult string containing</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.ZeroRegister(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Checks for a combination of instructions that can be used to zero out a register, this can be a xor instruction on itself or a xor instruction elsewhere
            followed by a move to the selected register. This function should be extended with further methods for zeroing a register at a later date.
            </summary>
            <param name="modifyingReg">The Register64 value for the register to be zeroed.</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
            <returns>A dictionary(byte[], string) containing pointers to the instructions and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.SetRegisterModifier(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Sets the flag of a Register64 enum in a RegisterModifiers64 class. This flag is used to identify whether setting the value of one 
            register involved editing another register. For example if setting EAX involved modifying RBX then RegisterModifiers32.RAX will have the RBX flag set. Any
            register should not be able to modify the value of any other register twice.
            
            The purpose of this is to stop an infitinte loop where each register modifies the other in order to achieve the correct value.
            </summary>
            <param name="modifiedReg">The Register64 which is being modified</param>
            <param name="modifyingReg">The Register64 which is doing the modification</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetAddInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64)">
            <summary>
            Finds a add instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetSubInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64)">
            <summary>
            Finds a sub instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <returns>Returns a tuple of byte[], string, Register64 containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="M:ERC.Utilities.RopChainGenerator64.GetMovInstruction(ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.Register64,ERC.Utilities.RopChainGenerator64.RegisterModifiers64)">
            <summary>
            Finds a mov instruction going from the src register to the destination register
            </summary>
            <param name="destReg">The destination register</param>
            <param name="srcReg">The source register</param>
            <param name="regModified64">The RegisterModifiers64 object.</param>
            <returns>Returns a dictionary of byte[] string containing a pointer to the instruction and the associated mnemonics</returns>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator64.X64Lists">
            <summary>
            Contains lists of instructions for specific registers.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRax">
            <summary>
            pushRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRcx">
            <summary>
            pushRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdx">
            <summary>
            pushRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbx">
            <summary>
            pushRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsp">
            <summary>
            pushRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRbp">
            <summary>
            pushRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRsi">
            <summary>
            pushRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushRdi">
            <summary>
            pushRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR8">
            <summary>
            pushR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR9">
            <summary>
            pushR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR10">
            <summary>
            pushR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR11">
            <summary>
            pushR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR12">
            <summary>
            pushR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR13">
            <summary>
            pushR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR14">
            <summary>
            pushR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.pushR15">
            <summary>
            pushR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRax">
            <summary>
            popRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbx">
            <summary>
            popRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRcx">
            <summary>
            popRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdx">
            <summary>
            popRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsp">
            <summary>
            popRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRbp">
            <summary>
            popRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRsi">
            <summary>
            popRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popRdi">
            <summary>
            popRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR8">
            <summary>
            popR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR9">
            <summary>
            popR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR10">
            <summary>
            popR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR11">
            <summary>
            popR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR12">
            <summary>
            popR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR13">
            <summary>
            popR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR14">
            <summary>
            popR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.popR15">
            <summary>
            popR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRax">
            <summary>
            xorRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbx">
            <summary>
            xorRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRcx">
            <summary>
            xorRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdx">
            <summary>
            xorRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsi">
            <summary>
            xorRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRdi">
            <summary>
            xorRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRsp">
            <summary>
            xorRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorRbp">
            <summary>
            xorRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR8">
            <summary>
            xorR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR9">
            <summary>
            xorR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR10">
            <summary>
            xorR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR11">
            <summary>
            xorR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR12">
            <summary>
            xorR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR13">
            <summary>
            xorR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR14">
            <summary>
            xorR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.xorR15">
            <summary>
            xorR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.jmpRsp">
            <summary>
            jmpRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.callRsp">
            <summary>
            callRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRax">
            <summary>
            incRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbx">
            <summary>
            incRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRcx">
            <summary>
            incRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdx">
            <summary>
            incRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRbp">
            <summary>
            incRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsp">
            <summary>
            incRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRsi">
            <summary>
            incRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incRdi">
            <summary>
            incRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR8">
            <summary>
            incR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR9">
            <summary>
            incR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR10">
            <summary>
            incR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR11">
            <summary>
            incR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR12">
            <summary>
            incR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR13">
            <summary>
            incR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR14">
            <summary>
            incR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.incR15">
            <summary>
            incR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRax">
            <summary>
            decRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbx">
            <summary>
            decRbx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRcx">
            <summary>
            decRcx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdx">
            <summary>
            decRdx list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRbp">
            <summary>
            decRbp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsp">
            <summary>
            decRsp list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRsi">
            <summary>
            decRsi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decRdi">
            <summary>
            decRdi list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR8">
            <summary>
            decR8 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR9">
            <summary>
            decR9 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR10">
            <summary>
            decR10 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR11">
            <summary>
            decR11 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR12">
            <summary>
            decR12 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR13">
            <summary>
            decR13 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR14">
            <summary>
            decR14 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.decR15">
            <summary>
            decR15 list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.add">
            <summary>
            add list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.mov">
            <summary>
            mov list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.sub">
            <summary>
            sub list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.callRax">
            <summary>
            jmpRax list.
            </summary>
        </member>
        <member name="F:ERC.Utilities.RopChainGenerator64.X64Lists.jmpRax">
            <summary>
            callRax list.
            </summary>
        </member>
        <member name="T:ERC.Utilities.RopChainGenerator64.RopMethod">
            <summary>
            Enum of methods which can be used to generate a ROP chain.
            </summary>
        </member>
        <member name="M:ERC.Utilities.Win32Errors.GetLastWin32Error(System.Int32)">
            <summary>
            Gets a user friendly string message for a system error code
            </summary>
            <returns>Error string</returns>
        </member>
        <member name="T:ERC.DisplayOutput">
            <summary> Provides output in various human readable formats of data from the library. </summary>
        </member>
        <member name="M:ERC.DisplayOutput.GetFilePath(System.String,System.String,System.String)">
            <summary>
            Identifies output files previously created by a the Display_Modules function
            and identifies the last number used. Returns the next number to be used as a filename.
            </summary>
            <param name="directory">The directory to be used</param>
            <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
            <param name="extension">The file extension to be used e.g. ".txt" </param>
            <returns>Returns a string containing the full file path to be used when writing output to disk</returns>
        </member>
        <member name="M:ERC.DisplayOutput.WriteToFile(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes a list of strings to a file. Takes a directory, filename and prefix along with a List of strings.
            </summary>
            <param name="directory">The directory to be used</param>
            <param name="prefix">A prefix for the file name e.g. "modules_" or "Pattern_" etc</param>
            <param name="extension">The file extension to be used e.g. ".txt" </param>
            <param name="content">A list of strings to be written to disk </param>
        </member>
        <member name="M:ERC.DisplayOutput.GeneratePattern(System.Int32,ERC.ErcCore,System.Boolean)">
            <summary>
            Creates a file in the ErcCore working directory containing a string of non repeating characters. 
            </summary>
            <param name="length">The length of the string to be created</param>
            <param name="core">An ErcCore object</param>
            <param name="extended">A optional boolean specifying whether to use the extended character set. Default is false.</param>
            <returns>Returns a string containing the pattern generated.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.PatternOutputBuilder(System.String,ERC.ErcCore)">
            <summary>
            Private function, should not be called directly. Takes input from pattern_create and outputs in an easily readable format.
            </summary>
            <param name="pattern">The pattern to be used</param>
            <param name="core">An ErcCore object</param>
            <returns>Returns a string containing the human readable output of the pattern create method.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.ListLocalProcesses">
            <summary>
            Lists usable processes running on the local machine.
            </summary>
            <returns>A string containing details of processes running on the local machine.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.ListRemoteProcesses(System.String)">
            <summary>
            Lists usable processes running on the remote machine.
            </summary>
            <returns>A string containing details of processes running on the remote machine.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayProcessInfo(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Displays information related to the provided ProcessInfo object.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <param name="outputToFile">Set to false to surpress file output.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayThreadInfo(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Displays information about all threads related to a specific process.
            </summary>
            <param name="info"></param>
            <param name="outputToFile"></param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisplayModuleInfo(ERC.ProcessInfo)">
            <summary>
            Displays a list of all modules and associated information from a specific process. Can output to stdout, a file or both.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <returns>Returns a string containing all module info from a specific process</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateModuleInfoTable(ERC.ProcessInfo,System.Boolean)">
            <summary>
            Aquires filename and writes out all module data to the current working directory. Requires a Process_Info object to be passed as a parameter.
            </summary>
            <param name="info">The ProcessInfo object of which the module information will be displayed</param>
            <param name="outputToFile">Set to false to surpress file output.</param>
            <returns>Returns a formatted string of all results</returns>
        </member>
        <member name="M:ERC.DisplayOutput.SearchMemory(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches the memory of a process and it's loaded modules for a string or byte combination.
            </summary>
            <param name="info">The processInfo object for the process</param>
            <param name="searchType">The type of data to be searched for.</param>
            <param name="searchString">The string to search for.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String array containing protection level returned pointers will.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.SearchModules(ERC.ProcessInfo,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Searches the loaded modules of a process for a string or byte combination.
            </summary>
            <param name="info">The processInfo object for the process</param>
            <param name="searchType">The type of data to be searched for.</param>
            <param name="searchString">The string to search for.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="modules">List of modules to be searched</param>
            <param name="protection">String array containing protection level returned pointers will.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumps(ERC.ProcessInfo,System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions</param>
            <param name="ptrsToExclude">Ptrs containing these byte values will be discarded.</param>
            <param name="excludes">Modules to be ignored when searching for the instruction sets.</param>
            <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GetSEHJumpsUnicode(ERC.ProcessInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[],System.String)">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            Similar to Search_All_Memory_PPR however provides output in an easily readable format. This version only returns unicode compliant pointers.
            </summary>
            <param name="info">The ProcessInfo object which will be searched for POP POP RET instructions.</param>
            <param name="aslr">Remove ASLR libraries.</param>
            <param name="safeseh">Remove SafeSEH libraries.</param>
            <param name="rebase">Remove rebasable libraries.</param>
            <param name="nxcompat">Remove NXCompat libraries.</param>
            <param name="osdll">Remove OS Dlls.</param>
            <param name="unwantedBytes">Addresses containing values in this byte array will be ignored.</param>
            <param name="protection">String containing protection level returned pointers will.</param>
            <returns>Returns an array of strings detailing the pointers, opcodes and base files of suitable instruction sets.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateByteArray(ERC.ErcCore,System.Byte[])">
            <summary>
            Generates an array of all possible bytes for use when identifying bad characters. Writes the output to disk in the working directory.
            </summary>
            <param name="unwantedBytes">An array of bytes to be excluded from the final byte array</param>
            <param name="core">An ErcCore object</param>
            <returns>Returns a byte array of all possible bytes.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.CompareByteArrayToMemoryRegion(ERC.ProcessInfo,System.IntPtr,System.Byte[])">
            <summary>
            Compares a the values contained in a memory region to the values in the supplied byte array.
            </summary>
            <param name="info">The processInfo object that contains the memory region.</param>
            <param name="startAddress">The memory address to start the search at.</param>
            <param name="byteArray">The byte array the region will be compared against.</param>
            <returns>Returns a string detailing differences between the two.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateEggHunters(ERC.ErcCore,System.String)">
            <summary>
            Generates a collection of EggHunter payloads.
            </summary>
            <param name="core">(Optional) If an ErcCore object is provided the output will also be written out to the working directory </param>
            <param name="tag">(Optional) If a tag is provided the payloads will be altered to search for that tag, the default tag is ERCD</param>
            <returns>Returns a string containing all EggHunters </returns>
        </member>
        <member name="M:ERC.DisplayOutput.GenerateFindNRPTable(ERC.ProcessInfo,System.Int32,System.Boolean)">
            <summary>
            Searches the memory of a process for a non repeating pattern.
            </summary>
            <param name="info">The ProcessInfo object of the process to be searched</param>
            <param name="searchType">Integer specifiying the format of the string: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="extended">Whether the extended character range is to be used when searching for the non repeating pattern</param>
            <returns>Returns a List of strings containing the locations the repeating pattern was identified</returns>
        </member>
        <member name="M:ERC.DisplayOutput.RopChainGadgets32(ERC.Utilities.RopChainGenerator32,System.Boolean)">
            <summary>
            Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
            </summary>
            <param name="rcg">The ROP chain generator object</param>
            <param name="gadgetsOnly">Bool to indicate if ROP chains should be included or just gadget lists generated</param>
            <returns>Returns an array of strings</returns>
        </member>
        <member name="M:ERC.DisplayOutput.RopChainGadgets64(ERC.Utilities.RopChainGenerator64,System.Boolean)">
            <summary>
            Produces output files containing information about the associated ROP chain, produces files containing ROP gadgets and the associated ROP chain.
            </summary>
            <param name="rcg">The ROP chain generator object</param>
            <param name="gadgetsOnly">Bool to indicate if ROP chains should be included or just gadget lists generated</param>
            <returns>Returns an array of strings</returns>
        </member>
        <member name="M:ERC.DisplayOutput.AssembleOpcodes(System.String[],System.UInt32)">
            <summary>
            Converts a collection of instructions into the associated opcodes.
            </summary>
            <param name="instructions">An array containing either x86 or x64 instructions.</param>
            <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.AssembleOpcodes(System.String[],ERC.MachineType)">
            <summary>
            Converts a collection of instructions into the associated opcodes.
            </summary>
            <param name="instructions">An array containing either x86 or x64 instructions.</param>
            <param name="machine">MachineType of the instruction set to be assembled.</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],System.UInt32)">
            <summary>
            Converts a collection of opcodes into the associated instructions.
            </summary>
            <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
            <param name="machine">Uint representing the machine type (x86 = 0, x64 = 1)</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DisassembleOpcodes(System.Byte[],ERC.MachineType)">
            <summary>
            Converts a collection of opcodes into the associated instructions.
            </summary>
            <param name="opcodes">An array containing either x86 or x64 opcodes.</param>
            <param name="machine">MachineType of the instruction set to be assembled.</param>
            <returns>Returns null if the method fails.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.StringToByteArray(System.String)">
            <summary>
            Converts a string of hex characters to a byte array of the associated values.
            </summary>
            <param name="hex">A string containing hex characters.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DumpMemory(ERC.ProcessInfo,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads a set of bytes from process memory and provides a string contianing the results.
            </summary>
            <param name="info">ProcessInfo object</param>
            <param name="startAddress">The address to start reading from.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="writeToFile">Bool indicating if output should be written to a file.</param>
            <returns>A string containing the bytes read from memory</returns>
        </member>
        <member name="M:ERC.DisplayOutput.DumpHeap(ERC.HeapInfo,System.UInt64,System.String,System.Boolean)">
            <summary>
            Reads a set of bytes from a specific heap and provides a string contianing the results. Either HeapID or startAddress must be supplied. If both are supplied HeapID takes precedence.
            </summary>
            <param name="hi">HeapInfo object</param>
            <param name="heapid">The ID of the heap to be dumped. (optional)</param>
            <param name="hexStartAddress">The start address of the specific heap block to be dumped in hexadecimal. (optional)</param>
            <param name="writeToFile">Bool indicating if output should be written to a file.(optional)</param>
            <returns>A string containing the bytes read from memory</returns>
        </member>
        <member name="M:ERC.DisplayOutput.HeapStats(ERC.HeapInfo,System.UInt64,System.String,System.Boolean)">
            <summary>
            Returns statistics about the heap information gathered about the current process.
            </summary>
            <param name="hi"></param>
            <returns>Returns an of strings</returns>
        </member>
        <member name="M:ERC.DisplayOutput.ListHeapIDs(ERC.HeapInfo)">
            <summary>
            Returns a list of IDs for each heap associated with the current process.
            </summary>
            <param name="hi">A HeapInfo object.</param>
            <returns>Retruns an array of strings containing the heapIds.</returns>
        </member>
        <member name="M:ERC.DisplayOutput.SearchHeap(ERC.HeapInfo,System.Byte[],System.UInt64,System.String,System.Boolean)">
            <summary>
            Searches the process heap for a specific byte patters. If heapID and hexStartAddress are specified heapID takes precedence. Takes an optional bool indicating if output should be written to file.
            </summary>
            <param name="hi">HeapInfo object.</param>
            <param name="searchBytes">Pattern to be searched for.</param>
            <param name="heapID">Optional parameter indicating which heap to search.</param>
            <param name="hexStartAddress">Optional parameter indicating the start address of the heap object to search</param>
            <param name="writeToFile">Bool indicating if the output should be written to file.</param>
            <returns>Returns an array of strings.</returns>
        </member>
        <member name="T:ERC.ERCException">
            <summary>
            Custom exception handler.
            </summary>
        </member>
        <member name="M:ERC.ERCException.#ctor(System.String)">
            <summary>
            Constructor for the ERCException class.
            </summary>
            <param name="message">The message associated with the Exception</param>
        </member>
        <member name="M:ERC.ERCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a serializable exception.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="ctxt">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:ERC.ErcCore">
            <summary>
            A single instance of this object should be instantiated at a minimum. It is used for storing global variables such as the working directory etc.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.ErcVersion">
            <summary>
            The current version of the ERC.Net library
            </summary>
        </member>
        <member name="P:ERC.ErcCore.WorkingDirectory">
            <summary>
            The directory where output files will be saved.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.Author">
            <summary>
            The Author to be credited in output files.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.ConfigPath">
            <summary>
            Path of the current ERC_Config.xml file.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.SystemErrorLogPath">
            <summary>
            Path where error details should be logged.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.PatternStandardPath">
            <summary>
            Path to the file containing the standard pattern to be used.
            </summary>
        </member>
        <member name="P:ERC.ErcCore.PatternExtendedPath">
            <summary>
            Path to the file containing the extended pattern to be used.
            </summary>
        </member>
        <member name="M:ERC.ErcCore.OpenProcess(ERC.Structures.ProcessAccessFlags,System.Boolean,System.Int32)">
            <summary>
            Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">The access to the process object. This access right is checked against the security descriptor for the process.</param>
            <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
            <param name="dwProcessId">The identifier of the local process to be opened.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified process.</returns>
        </member>
        <member name="M:ERC.ErcCore.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.
            </summary>
            <param name="Handle">A handle to the process with memory that is being read.</param>
            <param name="Address">A pointer to the base address in the specified process from which to read.</param>
            <param name="Arr">A pointer to a buffer that receives the contents from the address space of the specified process.</param>
            <param name="Size">The number of bytes to be read from the specified process.</param>
            <param name="BytesRead">A pointer to a variable that receives the number of bytes transferred into the specified buffer.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.VirtualQueryEx32(System.IntPtr,System.IntPtr,ERC.Structures.MEMORY_BASIC_INFORMATION32@,System.UInt32)">
            <summary>
            Retrieves information about a range of pages within the virtual address space of a specified 32 bit process.
            </summary>
            <param name="hProcess">A handle to the process whose memory information is queried. </param>
            <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
            <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION32 structure in which information about the specified page range is returned.</param>
            <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
            <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.VirtualQueryEx64(System.IntPtr,System.IntPtr,ERC.Structures.MEMORY_BASIC_INFORMATION64@,System.UInt32)">
            <summary>
            Retrieves information about a range of pages within the virtual address space of a specified 64 bit process.
            </summary>
            <param name="hProcess">A handle to the process whose memory information is queried. </param>
            <param name="lpAddress">A pointer to the base address of the region of pages to be queried.</param>
            <param name="lpBuffer">A pointer to a MEMORY_BASIC_INFORMATION64 structure in which information about the specified page range is returned.</param>
            <param name="dwLength">The size of the buffer pointed to by the lpBuffer parameter, in bytes.</param>
            <returns>The return value is the actual number of bytes returned in the information buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>
            Determines whether the specified process is running under WOW64 or an Intel64 of x64 processor.
            </summary>
            <param name="process">A handle to the process.</param>
            <param name="wow64Process">A pointer to a value that is set to TRUE if the process is running under WOW64 on an Intel64 or x64 processor.</param>
            <returns>If the function succeeds, the return value is a nonzero value.</returns>
        </member>
        <member name="M:ERC.ErcCore.OpenThread(ERC.Structures.ThreadAccess,System.Boolean,System.UInt32)">
            <summary>
            Opens an existing thread object.
            </summary>
            <param name="dwDesiredAccess">The access to the thread object.</param>
            <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle.</param>
            <param name="dwThreadId">The identifier of the thread to be opened.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified thread.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetThreadContext32(System.IntPtr,ERC.Structures.CONTEXT32@)">
            <summary>
            Retrieves the context of the specified 32 bit thread.
            </summary>
            <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.Wow64GetThreadContext(System.IntPtr,ERC.Structures.CONTEXT32@)">
            <summary>
            Retrieves the context of the specified WOW64 thread.
            </summary>
            <param name="hthread">A handle to the thread whose context is to be retrieved.</param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetThreadContext64(System.IntPtr,ERC.Structures.CONTEXT64@)">
            <summary>
            Retrieves the context of the specified 64 bit thread.
            </summary>
            <param name="hThread">A handle to the thread whose context is to be retrieved. </param>
            <param name="lpContext">A pointer to a CONTEXT structure that receives the appropriate context of the specified thread.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.SuspendThread(System.IntPtr)">
            <summary>
            Suspends the specified thread.
            </summary>
            <param name="hThread">A handle to the thread that is to be suspended.</param>
            <returns>If the function succeeds, the return value is the thread's previous suspend count. If the function fails the return value is -1.</returns>
        </member>
        <member name="M:ERC.ErcCore.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="procName">The function or variable name, or the function's ordinal value.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable.</returns>
        </member>
        <member name="M:ERC.ErcCore.LoadLibraryEx(System.String,System.IntPtr,ERC.Structures.LoadLibraryFlags)">
            <summary>
            This function maps a specified executable module into the address space of the calling process. The executable module can be a .dll or an .exe file. The specified module may cause other modules to be mapped into the address space.
            </summary>
            <param name="lpFileName">Pointer to a null-terminated string that names the executable module.</param>
            <param name="hReservedNull">Must be null.</param>
            <param name="dwFlags">Specifies the action to take when loading the module.</param>
            <returns></returns>
        </member>
        <member name="M:ERC.ErcCore.FindResouce(System.IntPtr,System.String@,System.String@)">
            <summary>
            Determines the location of a resource with the specified type and name in the specified module.
            </summary>
            <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource.</param>
            <param name="resName">The name of the resource.</param>
            <param name="resType">The resource type.</param>
            <returns>If the function succeeds, the return value is a handle to the specified resource's information block.</returns>
        </member>
        <member name="M:ERC.ErcCore.LoadResource(System.IntPtr,System.IntPtr)">
            <summary>
            Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.
            </summary>
            <param name="hModule">A handle to the module whose executable file contains the resource.</param>
            <param name="hResInfo">A handle to the resource to be loaded. </param>
            <returns>If the function succeeds, the return value is a handle to the data associated with the resource.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetProcessId(System.IntPtr)">
            <summary>
            Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right.</param>
            <returns>Returns the identifier of the process as a Uint</returns>
        </member>
        <member name="M:ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves certain properties of an object handle.
            </summary>
            <param name="hObject">A handle to an object whose information is to be retrieved.</param>
            <param name="lpdwFlags">A pointer to a variable that receives a set of bit flags that specify properties of the object handle or 0. The following values are defined.</param>
            <returns>If the function succeeds, the return value is true.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetModuleHandle(System.String)">
            <summary>
            Retrieves a module handle for the specified module. The module must have been loaded by the calling process.
            </summary>
            <param name="moduleName">The name of the loaded module (either a .dll or .exe file).</param>
            <returns>If the function succeeds, the return value is a handle to the specified module.</returns>
        </member>
        <member name="M:ERC.ErcCore.ZwQueryInformationThread(System.IntPtr,System.Int32,ERC.Structures.ThreadBasicInformation@,System.Int32,System.IntPtr)">
            <summary>
            The ZwQueryInformationThread routine retrieves information about the specified thread.
            </summary>
            <param name="hwnd">Handle to the thread object.</param>
            <param name="i">The type of thread information to be retrieved. </param>
            <param name="threadinfo">Pointer to a buffer supplied by the caller.</param>
            <param name="length">The size, in bytes, of the buffer pointed to by threadinfo.</param>
            <param name="bytesread">A pointer to a variable in which the routine returns the size of the requested information.</param>
            <returns>ZwQueryInformationThread returns STATUS_SUCCESS on success, or the appropriate NTSTATUS error code on failure.</returns>
        </member>
        <member name="M:ERC.ErcCore.EnumProcessModulesEx(System.IntPtr,System.IntPtr[],System.Int32,System.Int32@,System.UInt32)">
            <summary>
            Retrieves a handle for each module in the specified process.
            </summary>
            <param name="hProcess">A handle to the process.</param>
            <param name="lphModule">An array that receives the list of module handles.</param>
            <param name="cb">The size of the lphModule array, in bytes.</param>
            <param name="lpcbNeeded">The number of bytes required to store all module handles in the lphModule array.</param>
            <param name="dwFilterFlag">The filter criteria. </param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetModuleFileNameEx(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the fully qualified path for the file containing the specified module.
            </summary>
            <param name="hProcess">A handle to the process that contains the module.</param>
            <param name="hModule">A handle to the module. </param>
            <param name="lpBaseName">A pointer to a buffer that receives the fully qualified path to the module.</param>
            <param name="nSize">The size of the lpFilename buffer, in characters.</param>
            <returns>If the function succeeds, the return value specifies the length of the string copied to the buffer.</returns>
        </member>
        <member name="M:ERC.ErcCore.ImageLoad(System.String,System.String)">
            <summary>
            Maintains a list of loaded DLLs.
            </summary>
            <param name="DllName">The name of the image.</param>
            <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
            <returns>If the function succeeds, the return value is a pointer to a LOADED_IMAGE structure.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation32(System.IntPtr,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
            <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation64(System.IntPtr,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="dllptr">A pointer to a LOADED_IMAGE structure.</param>
            <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation32(ERC.Structures.LOADED_IMAGE@,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="loadedImage">A Loaded_Image structure.</param>
            <param name="ImageConfigDir32">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY32</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.GetImageConfigInformation64(ERC.Structures.LOADED_IMAGE@,ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>
            Locates and returns the load configuration data of an image.
            </summary>
            <param name="loadedImage">A Loaded_Image structure.</param>
            <param name="ImageConfigDir64">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.MapAndLoad(System.String,System.String,ERC.Structures.LOADED_IMAGE@,System.Boolean,System.Boolean)">
            <summary>
            Maps an image and preloads data from the mapped file.
            </summary>
            <param name="ImageName">The file name of the image (executable file or DLL) that is loaded.</param>
            <param name="DllPath">The path used to locate the image if the name provided cannot be found.</param>
            <param name="loadedImage">A pointer to a LOADED_IMAGE structure that receives information about the image after it is loaded.</param>
            <param name="Dll">True if the file is a DLL, false if the file is an EXE.</param>
            <param name="readOnly">Boolean for the access mode.</param>
            <returns>If the function succeeds, the return value is TRUE.</returns>
        </member>
        <member name="M:ERC.ErcCore.CreateToolhelp32Snapshot(ERC.Structures.SnapshotFlags,System.UInt32)">
            <summary>
            Takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes.
            </summary>
            <param name="dwFlags">The portions of the system to be included in the snapshot. </param>
            <param name="th32ProcessID">The process identifier of the process to be included in the snapshot. This parameter can be zero to indicate the current process. This parameter is used when the TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPMODULE32, or TH32CS_SNAPALL value is specified. Otherwise, it is ignored and all processes are included in the snapshot.</param>
            <returns>If the function succeeds, it returns an open handle to the specified snapshot.</returns>
        </member>
        <member name="M:ERC.ErcCore.Process32First(System.IntPtr,ERC.Structures.PROCESSENTRY32@)">
            <summary>
            Retrieves information about the first process encountered in a system snapshot.
            </summary>
            <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
            <param name="lppe">A pointer to a PROCESSENTRY32 structure.</param>
            <returns>Returns TRUE if the first entry of the process list has been copied to the buffer or FALSE otherwise. </returns>
        </member>
        <member name="M:ERC.ErcCore.Process32Next(System.IntPtr,ERC.Structures.PROCESSENTRY32@)">
            <summary>
            Retrieves information about the next process recorded in a system snapshot.
            </summary>
            <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
            <param name="lppe">A pointer to a PROCESSENTRY32 structure.</param>
            <returns>Returns TRUE if the next entry of the process list has been copied to the buffer or FALSE otherwise.</returns>
        </member>
        <member name="M:ERC.ErcCore.Heap32ListFirst(System.IntPtr,ERC.Structures.HEAPLIST32@)">
            <summary>
            Retrieves information about the first heap that has been allocated by a specified process.
            </summary>
            <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
            <param name="lphl">A pointer to a HEAPLIST32 structure.</param>
            <returns>Returns TRUE if the first entry of the heap list has been copied to the buffer or FALSE otherwise.</returns>
        </member>
        <member name="M:ERC.ErcCore.Heap32ListNext(System.IntPtr,ERC.Structures.HEAPLIST32@)">
            <summary>
            Retrieves information about the next heap that has been allocated by a specified process.
            </summary>
            <param name="hSnapshot">A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.</param>
            <param name="lphl">A pointer to a HEAPLIST32 structure.</param>
            <returns>Returns TRUE if the first entry of the heap list has been copied to the buffer or FALSE otherwise.</returns>
        </member>
        <member name="M:ERC.ErcCore.Heap32First(ERC.Structures.HEAPENTRY32@,System.UInt32,System.IntPtr)">
            <summary>
            Retrieves information about the first block of a heap that has been allocated by a process.
            </summary>
            <param name="heapentry32">A pointer to a HEAPENTRY32 structure.</param>
            <param name="processID">The identifier of the process context that owns the heap.</param>
            <param name="heapID">The identifier of the heap to be enumerated.</param>
            <returns>Returns TRUE if information for the first heap block has been copied to the buffer or FALSE otherwise. </returns>
        </member>
        <member name="M:ERC.ErcCore.Heap32Next(ERC.Structures.HEAPENTRY32@)">
            <summary>
            Retrieves information about the next block of a heap that has been allocated by a process.
            </summary>
            <param name="heapentry32">A pointer to a HEAPENTRY32 structure.</param>
            <returns>Returns TRUE if information about the next block in the heap has been copied to the buffer or FALSE otherwise. </returns>
        </member>
        <member name="M:ERC.ErcCore.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ERC.ErcCore.#ctor(ERC.ErcCore)">
            <summary>
            Constructor to be used when creating an object that inherits from an ErcCore object.
            </summary>
            <param name="parent">The ErcCore object to be inherited from.</param>
        </member>
        <member name="M:ERC.ErcCore.SetWorkingDirectory(System.String)">
            <summary>
            Changes the working directory in both the XML file and associated ErcCore object
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ERC.ErcCore.SetPatternStandardPath(System.String)">
            <summary>
            Sets the standard pattern file path. Any pattern can replace the standard pattern when searching however the new pattern must be written to a file and the file path set here.
            </summary>
            <param name="path">The filepath of the new standard pattern file</param>
        </member>
        <member name="M:ERC.ErcCore.SetPatternExtendedPath(System.String)">
            <summary>
            Sets the extended pattern file path. Any pattern can replace the extended pattern when searching however the new pattern must be written to a file and the file path set here.
            </summary>
            <param name="path">The filepath of the new extended pattern file</param>
        </member>
        <member name="M:ERC.ErcCore.SetAuthor(System.String)">
            <summary>
            Sets the name of the author for use when outputing results to disk.
            </summary>
            <param name="author">String containing the name of the author</param>
        </member>
        <member name="M:ERC.ErcCore.SetErrorFile(System.String)">
            <summary>
            Sets the error log file to a user specified filepath. 
            </summary>
            <param name="path">The new error log filepath.</param>
        </member>
        <member name="M:ERC.ErcCore.LogEvent(System.Exception)">
            <summary>
            Logs events to the error log path in the XML file. This file is only appended to and never replaced.
            </summary>
            <param name="e">The exception to log</param>
        </member>
        <member name="M:ERC.ErcCore.X64toX32PointerModifier(System.Byte[])">
            <summary>
            Converts a x64 pointer into a x86 pointer.
            </summary>
            <param name="ptr64">64bit pointer to be converted</param>
            <returns>Retruns a byte array 4 bytes long containing the modified pointer</returns>
        </member>
        <member name="T:ERC.ErcResult`1">
            <summary>
            A basic object which contains a generic type and exception. 
            </summary>
            <typeparam name="T">A generic type</typeparam>
        </member>
        <member name="P:ERC.ErcResult`1.ReturnValue">
            <summary>
            Generic Type.
            </summary>
        </member>
        <member name="P:ERC.ErcResult`1.Error">
            <summary>
            Exception to be logged by LogEvent().
            </summary>
        </member>
        <member name="M:ERC.ErcResult`1.#ctor(ERC.ErcCore)">
            <summary>
            Base constructor.
            </summary>
            <param name="core">The ErcCore object to inherit from.</param>
        </member>
        <member name="M:ERC.ErcResult`1.#ctor(ERC.ErcCore,System.String)">
            <summary>
            Base constructor with a custom location for exceptions to be logged.
            </summary>
            <param name="core">The ErcCore object to inherit from.</param>
            <param name="errorFile">The location to log exceptions.</param>
        </member>
        <member name="M:ERC.ErcResult`1.LogEvent">
            <summary>
            Logs an event to the ErrorLogFile value.
            </summary>
        </member>
        <member name="M:ERC.ErcResult`1.ToString">
            <summary>
            Override of the ToString method. Returns a string containing values relevant to the object. 
            </summary>
            <returns>A string containing information about the object.</returns>
        </member>
        <member name="T:ERC.MachineType">
            <summary>
            Enum containing types of machine architectures.
            </summary>
        </member>
        <member name="F:ERC.MachineType.Native">
            <summary>
            Native.
            </summary>
        </member>
        <member name="F:ERC.MachineType.I386">
            <summary>
            x86.
            </summary>
        </member>
        <member name="F:ERC.MachineType.Itanium">
            <summary>
            Itanium.
            </summary>
        </member>
        <member name="F:ERC.MachineType.x64">
            <summary>
            x64.
            </summary>
        </member>
        <member name="F:ERC.MachineType.error">
            <summary>
            Type is unknown or unset.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_DOS_HEADER">
            <summary>
            IMAGE_DOS_HEADER.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DOS_HEADER.nt_head_ptr">
            <summary>
            A pointer to the IMAGE_NT_HEADER.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_FILE_HEADER">
            <summary>
            IMAGE_FILE_HEADER. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSections">
            <summary>
            NumberOfSections
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.PointerToSymbolTable">
            <summary>
            PointerToSymbolTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.NumberOfSymbols">
            <summary>
            NumberOfSymbols
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.SizeOfOptionalHeader">
            <summary>
            SizeOfOptionalHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_FILE_HEADER.Characteristics">
            <summary>
            Characteristics
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_NT_HEADERS32">
            <summary>
            IMAGE_NT_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS32.OptionalHeader">
            <summary>
            OptionalHeader
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_NT_HEADERS64">
            <summary>
            IMAGE_NT_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_nt_headers
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_NT_HEADERS64.OptionalHeader">
            <summary>
            OptionalHeader
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_DATA_DIRECTORY">
            <summary>
            IMAGE_DATA_DIRECTORY. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DATA_DIRECTORY.VirtualAddress">
            <summary>
            VirtualAddress.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_DATA_DIRECTORY.Size">
            <summary>
            Size.
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_OPTIONAL_HEADER32">
            <summary>
            IMAGE_OPTIONAL_HEADER 32 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorLinkerVersion">
            <summary>
            MajorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorLinkerVersion">
            <summary>
            MinorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfCode">
            <summary>
            SizeOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfInitializedData">
            <summary>
            SizeOfInitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfUninitializedData">
            <summary>
            SizeOfUninitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.AddressOfEntryPoint">
            <summary>
            AddressOfEntryPoint
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfCode">
            <summary>
            BaseOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseOfData">
            <summary>
            BaseOfData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImageBase">
            <summary>
            ImageBase
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SectionAlignment">
            <summary>
            SectionAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.FileAlignment">
            <summary>
            FileAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorOperatingSystemVersion">
            <summary>
            MajorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorOperatingSystemVersion">
            <summary>
            MinorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorImageVersion">
            <summary>
            MajorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorImageVersion">
            <summary>
            MinorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MajorSubsystemVersion">
            <summary>
            MajorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.MinorSubsystemVersion">
            <summary>
            MinorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Win32VersionValue">
            <summary>
            Win32VersionValue
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeaders">
            <summary>
            SizeOfHeaders
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CheckSum">
            <summary>
            CheckSum
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Subsystem">
            <summary>
            Subsystem
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DllCharacteristics">
            <summary>
            DllCharacteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve">
            <summary>
            SizeOfStackReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit">
            <summary>
            SizeOfStackCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve">
            <summary>
            SizeOfHeapReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit">
            <summary>
            SizeOfHeapCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoaderFlags">
            <summary>
            LoaderFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.NumberOfRvaAndSizes">
            <summary>
            NumberOfRvaAndSizes
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExportTable">
            <summary>
            ExportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ImportTable">
            <summary>
            ImportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ResourceTable">
            <summary>
            ResourceTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.ExceptionTable">
            <summary>
            ExceptionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CertificateTable">
            <summary>
            CertificateTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BaseRelocationTable">
            <summary>
            BaseRelocationTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Architecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.GlobalPtr">
            <summary>
            GlobalPtr
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.TLSTable">
            <summary>
            TLSTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.LoadConfigTable">
            <summary>
            LoadConfigTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.BoundImport">
            <summary>
            BoundImport
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.IAT">
            <summary>
            IAT
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.DelayImportDescriptor">
            <summary>
            DelayImportDescriptor
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.CLRRuntimeHeader">
            <summary>
            CLRRuntimeHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER32.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_OPTIONAL_HEADER64">
            <summary>
            IMAGE_OPTIONAL_HEADER 64 bit variant. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_optional_header
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Magic">
            <summary>
            Magic
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion">
            <summary>
            MajorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion">
            <summary>
            MinorLinkerVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfCode">
            <summary>
            SizeOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData">
            <summary>
            SizeOfInitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData">
            <summary>
            SizeOfUninitializedData
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint">
            <summary>
            AddressOfEntryPoint
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseOfCode">
            <summary>
            BaseOfCode
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImageBase">
            <summary>
            ImageBase
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SectionAlignment">
            <summary>
            SectionAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.FileAlignment">
            <summary>
            FileAlignment
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion">
            <summary>
            MajorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion">
            <summary>
            MinorOperatingSystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorImageVersion">
            <summary>
            MajorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorImageVersion">
            <summary>
            MinorImageVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion">
            <summary>
            MajorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion">
            <summary>
            MinorSubsystemVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Win32VersionValue">
            <summary>
            Win32VersionValue
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeaders">
            <summary>
            SizeOfHeaders
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CheckSum">
            <summary>
            CheckSum
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Subsystem">
            <summary>
            Subsystem
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DllCharacteristics">
            <summary>
            DllCharacteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve">
            <summary>
            SizeOfStackReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit">
            <summary>
            SizeOfStackCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve">
            <summary>
            SizeOfHeapReserve
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit">
            <summary>
            SizeOfHeapCommit
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoaderFlags">
            <summary>
            LoaderFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes">
            <summary>
            NumberOfRvaAndSizes
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExportTable">
            <summary>
            ExportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ImportTable">
            <summary>
            ImportTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ResourceTable">
            <summary>
            ResourceTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.ExceptionTable">
            <summary>
            ExceptionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CertificateTable">
            <summary>
            CertificateTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BaseRelocationTable">
            <summary>
            BaseRelocationTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Architecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.GlobalPtr">
            <summary>
            GlobalPtr
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.TLSTable">
            <summary>
            TLSTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.LoadConfigTable">
            <summary>
            LoadConfigTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.BoundImport">
            <summary>
            BoundImport
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.IAT">
            <summary>
            IAT
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.DelayImportDescriptor">
            <summary>
            DelayImportDescriptor
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.CLRRuntimeHeader">
            <summary>
            CLRRuntimeHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_OPTIONAL_HEADER64.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.MagicType">
            <summary>
            Image Option Header Magic Type.
            </summary>
        </member>
        <member name="F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC">
            <summary>
            IMAGE_NT_OPTIONAL_HDR32_MAGIC
            </summary>
        </member>
        <member name="F:ERC.Structures.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC">
            <summary>
            IMAGE_NT_OPTIONAL_HDR64_MAGIC
            </summary>
        </member>
        <member name="T:ERC.Structures.SubSystemType">
            <summary>
            Image Option Header SubSystem Type.
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
            IMAGE_SUBSYSTEM_UNKNOWN
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_NATIVE">
            <summary>
            IMAGE_SUBSYSTEM_NATIVE
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_GUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_CUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
            IMAGE_SUBSYSTEM_POSIX_CUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
            IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>
            IMAGE_SUBSYSTEM_EFI_APPLICATION
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>
            IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>
            IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>
            IMAGE_SUBSYSTEM_EFI_ROM
            </summary>
        </member>
        <member name="F:ERC.Structures.SubSystemType.IMAGE_SUBSYSTEM_XBOX">
            <summary>
            IMAGE_SUBSYSTEM_XBOX
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32">
            <summary>
            IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory32
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion">
            <summary>
            MajorVersio
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion">
            <summary>
            MinorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear">
            <summary>
            GlobalFlagsClear
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet">
            <summary>
            GlobalFlagsSet
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout">
            <summary>
            CriticalSectionDefaultTimeout
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold">
            <summary>
            DeCommitFreeBlockThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold">
            <summary>
            DeCommitTotalFreeThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable">
            <summary>
            LockPrefixTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize">
            <summary>
            MaximumAllocationSize
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold">
            <summary>
            VirtualMemoryThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags">
            <summary>
            ProcessHeapFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask">
            <summary>
            ProcessAffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion">
            <summary>
            CSDVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags">
            <summary>
            DependentLoadFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList">
            <summary>
            EditList
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie">
            <summary>
            SecurityCookie
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable">
            <summary>
            SEHandlerTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount">
            <summary>
            SEHandlerCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer">
            <summary>
            GuardCFCheckFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer">
            <summary>
            GuardCFDispatchFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable">
            <summary>
            GuardCFFunctionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount">
            <summary>
            GuardCFFunctionCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags">
            <summary>
            GuardFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity">
            <summary>
            CodeIntegrity
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable">
            <summary>
            GuardAddressTakenIatEntryTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount">
            <summary>
            GuardAddressTakenIatEntryCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable">
            <summary>
            GuardLongJumpTargetTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount">
            <summary>
            GuardLongJumpTargetCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable">
            <summary>
            DynamicValueRelocTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer">
            <summary>
            CHPEMetadataPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine">
            <summary>
            GuardRFFailureRoutine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer">
            <summary>
            GuardRFFailureRoutineFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset">
            <summary>
            DynamicValueRelocTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection">
            <summary>
            DynamicValueRelocTableSection
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer">
            <summary>
            GuardRFVerifyStackPointerFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset">
            <summary>
            HotPatchTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer">
            <summary>
            EnclaveConfigurationPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer">
            <summary>
            VolatileMetadataPointer
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64">
            <summary>
            IMAGE_LOAD_CONFIG_DIRECTORY32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_image_load_config_directory64
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp">
            <summary>
            TimeDateStamp
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion">
            <summary>
            MajorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion">
            <summary>
            MinorVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear">
            <summary>
            GlobalFlagsClear
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet">
            <summary>
            GlobalFlagsSet
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout">
            <summary>
            CriticalSectionDefaultTimeout
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold">
            <summary>
            DeCommitFreeBlockThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold">
            <summary>
            DeCommitTotalFreeThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable">
            <summary>
            LockPrefixTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize">
            <summary>
            MaximumAllocationSize
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold">
            <summary>
            VirtualMemoryThreshold
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask">
            <summary>
            ProcessAffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags">
            <summary>
            ProcessHeapFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion">
            <summary>
            CSDVersion
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags">
            <summary>
            DependentLoadFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList">
            <summary>
            EditList
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie">
            <summary>
            SecurityCookie
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable">
            <summary>
            SEHandlerTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount">
            <summary>
            SEHandlerCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer">
            <summary>
            GuardCFCheckFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer">
            <summary>
            GuardCFDispatchFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable">
            <summary>
            GuardCFFunctionTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount">
            <summary>
            GuardCFFunctionCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags">
            <summary>
            GuardFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity">
            <summary>
            CodeIntegrity
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable">
            <summary>
            GuardAddressTakenIatEntryTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount">
            <summary>
            GuardAddressTakenIatEntryCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable">
            <summary>
            GuardLongJumpTargetTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount">
            <summary>
            GuardLongJumpTargetCount
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable">
            <summary>
            DynamicValueRelocTable
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer">
            <summary>
            CHPEMetadataPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine">
            <summary>
            GuardRFFailureRoutine
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer">
            <summary>
            GuardRFFailureRoutineFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset">
            <summary>
            DynamicValueRelocTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection">
            <summary>
            DynamicValueRelocTableSection
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer">
            <summary>
            GuardRFVerifyStackPointerFunctionPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset">
            <summary>
            HotPatchTableOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer">
            <summary>
            EnclaveConfigurationPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer">
            <summary>
            VolatileMetadataPointer
            </summary>
        </member>
        <member name="T:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY">
            <summary>
            IMAGE_LOAD_CONFIG_CODE_INTEGRITY.
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog">
            <summary>
            Catalog
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset">
            <summary>
            CatalogOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:ERC.Structures.LOADED_IMAGE">
            <summary>
            LOADED_IMAGE. See https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/ns-dbghelp-_loaded_image
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.ModuleName">
            <summary>
            ModuleName
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.hFile">
            <summary>
            hFile
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.MappedAddress">
            <summary>
            MappedAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.FileHeader">
            <summary>
            FileHeader
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.LastRvaSection">
            <summary>
            LastRvaSection
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.NumberOfSections">
            <summary>
            NumberOfSections
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Sections">
            <summary>
            Sections
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Characteristics">
            <summary>
            Characteristics
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fSystemImage">
            <summary>
            fSystemImage
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fDOSImage">
            <summary>
            fDOSImage
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.fReadOnly">
            <summary>
            fReadOnly
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.Links">
            <summary>
            Links
            </summary>
        </member>
        <member name="F:ERC.Structures.LOADED_IMAGE.SizeOfImage">
            <summary>
            SizeOfImage
            </summary>
        </member>
        <member name="T:ERC.Structures.LIST_ENTRY">
            <summary>
            Describes an entry in a doubly linked list or serves as the header for such a list. See https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_list_entry
            </summary>
        </member>
        <member name="F:ERC.Structures.LIST_ENTRY.Flink">
            <summary>
            Flink points to the next entry in the list.
            </summary>
        </member>
        <member name="F:ERC.Structures.LIST_ENTRY.Blink">
            <summary>
            Blink points to the previous entry in the list.
            </summary>
        </member>
        <member name="T:ERC.Structures.AllocationProtect">
            <summary>
            AllocationProtect.
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE">
            <summary>
            PAGE_EXECUTE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READ">
            <summary>
            PAGE_EXECUTE_READ
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_READWRITE">
            <summary>
            PAGE_EXECUTE_READWRITE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_EXECUTE_WRITECOPY">
            <summary>
            PAGE_EXECUTE_WRITECOPY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_NOACCESS">
            <summary>
            PAGE_NOACCESS
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_READONLY">
            <summary>
            PAGE_READONLY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_READWRITE">
            <summary>
            PAGE_READWRITE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_WRITECOPY">
            <summary>
            PAGE_WRITECOPY
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_GUARD">
            <summary>
            PAGE_GUARD
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_NOCACHE">
            <summary>
            PAGE_NOCACHE
            </summary>
        </member>
        <member name="F:ERC.Structures.AllocationProtect.PAGE_WRITECOMBINE">
            <summary>
            PAGE_WRITECOMBINE
            </summary>
        </member>
        <member name="T:ERC.Structures.StateEnum">
            <summary>
            StateEnum
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_COMMIT">
            <summary>
            MEM_COMMIT
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_FREE">
            <summary>
            MEM_FREE
            </summary>
        </member>
        <member name="F:ERC.Structures.StateEnum.MEM_RESERVE">
            <summary>
            MEM_RESERVE
            </summary>
        </member>
        <member name="T:ERC.Structures.TypeEnum">
            <summary>
            TypeEnum
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_IMAGE">
            <summary>
            MEM_IMAGE
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_MAPPED">
            <summary>
            MEM_MAPPED
            </summary>
        </member>
        <member name="F:ERC.Structures.TypeEnum.MEM_PRIVATE">
            <summary>
            MEM_PRIVATE
            </summary>
        </member>
        <member name="T:ERC.Structures.MEMORY_BASIC_INFORMATION32">
            <summary>
            MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.BaseAddress">
            <summary>
            BaseAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationBase">
            <summary>
            AllocationBase
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.AllocationProtect">
            <summary>
            AllocationProtec
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.RegionSize">
            <summary>
            RegionSize
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Protect">
            <summary>
            Protect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION32.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:ERC.Structures.MEMORY_BASIC_INFORMATION64">
            <summary>
            MEMORY_BASIC_INFORMATION32. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_memory_basic_information
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.BaseAddress">
            <summary>
            BaseAddress
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationBase">
            <summary>
            AllocationBase
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.AllocationProtect">
            <summary>
            AllocationProtect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment1">
            <summary>
            __alignment1
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.RegionSize">
            <summary>
            RegionSize
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Protect">
            <summary>
            Protect
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:ERC.Structures.MEMORY_BASIC_INFORMATION64.__alignment2">
            <summary>
            __alignment2
            </summary>
        </member>
        <member name="T:ERC.Structures.ProcessAccessFlags">
            <summary>
            ProcessAccessFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.Terminate">
            <summary>
            Terminate
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.CreateThread">
            <summary>
            CreateThread
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryOperation">
            <summary>
            VirtualMemoryOperation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryRead">
            <summary>
            VirtualMemoryRead
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.VirtualMemoryWrite">
            <summary>
            VirtualMemoryWrite
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.DuplicateHandle">
            <summary>
            DuplicateHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.CreateProcess">
            <summary>
            CreateProcess
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.SetQuota">
            <summary>
            SetQuota
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.SetInformation">
            <summary>
            SetInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.QueryInformation">
            <summary>
            QueryInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.QueryLimitedInformation">
            <summary>
            QueryLimitedInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ProcessAccessFlags.Synchronize">
            <summary>
            Synchronize
            </summary>
        </member>
        <member name="T:ERC.Structures.LoadLibraryFlags">
            <summary>
            LoadLibraryFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
            <summary>
            DONT_RESOLVE_DLL_REFERENCES
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL">
            <summary>
            LOAD_IGNORE_CODE_AUTHZ_LEVEL
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            LOAD_LIBRARY_AS_DATAFILE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">
            <summary>
            LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE">
            <summary>
            LOAD_LIBRARY_AS_IMAGE_RESOURCE
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR">
            <summary>
            LOAD_LIBRARY_SEARCH_APPLICATION_DIR
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">
            <summary>
            LOAD_LIBRARY_SEARCH_DEFAULT_DIRS
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">
            <summary>
            LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32">
            <summary>
            LOAD_LIBRARY_SEARCH_SYSTEM32
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS">
            <summary>
            LOAD_LIBRARY_SEARCH_USER_DIRS
            </summary>
        </member>
        <member name="F:ERC.Structures.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
            <summary>
            LOAD_WITH_ALTERED_SEARCH_PATH
            </summary>
        </member>
        <member name="T:ERC.Structures.ThreadAccess">
            <summary>
            Enum to specify access level required when accessing a thread. 
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.TERMINATE">
            <summary>
            TERMINATE
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SUSPEND_RESUME">
            <summary>
            SUSPEND_RESUME
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.GET_CONTEXT">
            <summary>
            GET_CONTEXT
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_CONTEXT">
            <summary>
            SET_CONTEXT
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_INFORMATION">
            <summary>
            SET_INFORMATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.QUERY_INFORMATION">
            <summary>
            QUERY_INFORMATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.SET_THREAD_TOKEN">
            <summary>
            SET_THREAD_TOKEN
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.IMPERSONATE">
            <summary>
            IMPERSONATE
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.DIRECT_IMPERSONATION">
            <summary>
            DIRECT_IMPERSONATION
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadAccess.All_ACCESS">
            <summary>
            All_ACCESS
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT_FLAGS">
            <summary>
            CONTEXT_FLAGS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i386">
            <summary>
            CONTEXT_i386
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_i486">
            <summary>
            CONTEXT_i486
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_CONTROL">
            <summary>
            CONTEXT_CONTROL
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_INTEGER">
            <summary>
            CONTEXT_INTEGER
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_SEGMENTS">
            <summary>
            CONTEXT_SEGMENTS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FLOATING_POINT">
            <summary>
            CONTEXT_FLOATING_POINT
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_DEBUG_REGISTERS">
            <summary>
            CONTEXT_DEBUG_REGISTERS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_EXTENDED_REGISTERS">
            <summary>
            CONTEXT_EXTENDED_REGISTERS
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_FULL">
            <summary>
            CONTEXT_FULL
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT_FLAGS.CONTEXT_ALL">
            <summary>
            CONTEXT_ALL
            </summary>
        </member>
        <member name="T:ERC.Structures.FLOATING_SAVE_AREA">
            <summary>
            x86 Save area data. See https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-_wow64_floating_save_area
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ControlWord">
            <summary>
            ControlWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.StatusWord">
            <summary>
            StatusWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.TagWord">
            <summary>
            TagWord
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ErrorOffset">
            <summary>
            ErrorOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.ErrorSelector">
            <summary>
            ErrorSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.DataOffset">
            <summary>
            DataOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.DataSelector">
            <summary>
            DataSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.RegisterArea">
            <summary>
            RegisterArea
            </summary>
        </member>
        <member name="F:ERC.Structures.FLOATING_SAVE_AREA.Cr0NpxState">
            <summary>
            Cr0NpxState
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT32">
            <summary>
            Structure for holding x86 register values.
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.ContextFlags">
            <summary>
            ContextFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr0">
            <summary>
            Dr0
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr1">
            <summary>
            Dr1
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr2">
            <summary>
            Dr2
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr3">
            <summary>
            Dr3
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr6">
            <summary>
            Dr6
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Dr7">
            <summary>
            Dr7
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.FloatSave">
            <summary>
            FloatSave
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegGs">
            <summary>
            SegGs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegFs">
            <summary>
            SegFs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegEs">
            <summary>
            SegEs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegDs">
            <summary>
            SegDs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Edi">
            <summary>
            Edi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Esi">
            <summary>
            Esi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ebx">
            <summary>
            Ebx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Edx">
            <summary>
            Edx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ecx">
            <summary>
            Ecx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Eax">
            <summary>
            Eax
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Ebp">
            <summary>
            Ebp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Eip">
            <summary>
            Eip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegCs">
            <summary>
            SegCs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.EFlags">
            <summary>
            EFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.Esp">
            <summary>
            Esp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.SegSs">
            <summary>
            SegSs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT32.ExtendedRegisters">
            <summary>
            ExtendedRegisters
            </summary>
        </member>
        <member name="M:ERC.Structures.CONTEXT32.ToString">
            <summary>
            Overridden ToString method, returns register values for the current thread.
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:ERC.Structures.M128A">
            <summary>
            M128A
            </summary>
        </member>
        <member name="F:ERC.Structures.M128A.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:ERC.Structures.M128A.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="M:ERC.Structures.M128A.ToString">
            <summary>
            ToString Override
            </summary>
            <returns>Returns a String</returns>
        </member>
        <member name="T:ERC.Structures.XSAVE_FORMAT64">
            <summary>
            x64 Save area data.
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ControlWord">
            <summary>
            ControlWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.StatusWord">
            <summary>
            StatusWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.TagWord">
            <summary>
            TagWord
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved1">
            <summary>
            Reserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorOpcode">
            <summary>
            ErrorOpcode
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorOffset">
            <summary>
            ErrorOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.ErrorSelector">
            <summary>
            ErrorSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved2">
            <summary>
            Reserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.DataOffset">
            <summary>
            DataOffset
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.DataSelector">
            <summary>
            DataSelector
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved3">
            <summary>
            Reserved3
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.MxCsr">
            <summary>
            MxCsr
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.MxCsr_Mask">
            <summary>
            MxCsr_Mask
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.FloatRegisters">
            <summary>
            FloatRegisters
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.XmmRegisters">
            <summary>
            XmmRegisters
            </summary>
        </member>
        <member name="F:ERC.Structures.XSAVE_FORMAT64.Reserved4">
            <summary>
            Reserved4
            </summary>
        </member>
        <member name="T:ERC.Structures.CONTEXT64">
            <summary>
            Structure for holding x64 register values.
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P1Home">
            <summary>
            P1Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P2Home">
            <summary>
            P2Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P3Home">
            <summary>
            P3Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P4Home">
            <summary>
            P4Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P5Home">
            <summary>
            P5Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.P6Home">
            <summary>
            P6Home
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.ContextFlags">
            <summary>
            ContextFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.MxCsr">
            <summary>
            MxCsr
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegCs">
            <summary>
            SegCs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegDs">
            <summary>
            SegDs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegEs">
            <summary>
            SegEs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegFs">
            <summary>
            SegFs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegGs">
            <summary>
            SegGs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.SegSs">
            <summary>
            SegSs
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.EFlags">
            <summary>
            EFlags
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr0">
            <summary>
            Dr0
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr1">
            <summary>
            Dr1
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr2">
            <summary>
            Dr2
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr3">
            <summary>
            Dr3
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr6">
            <summary>
            Dr6
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Dr7">
            <summary>
            Dr7
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rax">
            <summary>
            Rax
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rcx">
            <summary>
            Rcx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rdx">
            <summary>
            Rdx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rbx">
            <summary>
            Rbx
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rsp">
            <summary>
            Rsp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rbp">
            <summary>
            Rbp
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rsi">
            <summary>
            Rsi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rdi">
            <summary>
            Rdi
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R8">
            <summary>
            R8
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R9">
            <summary>
            R9
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R10">
            <summary>
            R10
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R11">
            <summary>
            R11
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R12">
            <summary>
            R12
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R13">
            <summary>
            R13
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R14">
            <summary>
            R14
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.R15">
            <summary>
            R15
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.Rip">
            <summary>
            Rip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.DUMMYUNIONNAME">
            <summary>
            DUMMYUNIONNAME
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.VectorRegister">
            <summary>
            VectorRegister
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.VectorControl">
            <summary>
            VectorControl
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.DebugControl">
            <summary>
            DebugControl
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastBranchToRip">
            <summary>
            LastBranchToRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastBranchFromRip">
            <summary>
            LastBranchFromRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastExceptionToRip">
            <summary>
            LastExceptionToRip
            </summary>
        </member>
        <member name="F:ERC.Structures.CONTEXT64.LastExceptionFromRip">
            <summary>
            LastExceptionFromRip
            </summary>
        </member>
        <member name="M:ERC.Structures.CONTEXT64.ToString">
            <summary>
            Overridden ToString method, returns register values for the current thread.
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:ERC.Structures.RegisterInfo">
            <summary>
            Register information
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.Register">
            <summary>
            Register name.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.RegisterValue">
            <summary>
            Register value.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.RegisterOffset">
            <summary>
            Register Offset.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.StringOffset">
            <summary>
            String offset.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.BufferSize">
            <summary>
            Buffer size.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.ThreadID">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="P:ERC.Structures.RegisterInfo.overwritten">
            <summary>
            Overwritten.
            </summary>
        </member>
        <member name="T:ERC.Structures.ThreadBasicInformation">
            <summary>
            ThreadBasicInformation
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.ExitStatus">
            <summary>
            ExitStatus
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.TebBaseAdress">
            <summary>
            TebBaseAdress
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.AffinityMask">
            <summary>
            AffinityMask
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="F:ERC.Structures.ThreadBasicInformation.BasePriority">
            <summary>
            BasePriority
            </summary>
        </member>
        <member name="T:ERC.Structures.ClientID">
            <summary>
            ClientID
            </summary>
        </member>
        <member name="F:ERC.Structures.ClientID.ProcessId">
            <summary>
            ProcessID
            </summary>
        </member>
        <member name="F:ERC.Structures.ClientID.ThreadId">
            <summary>
            ThreadID
            </summary>
        </member>
        <member name="T:ERC.Structures.TEB">
            <summary>
            Thread Environment Block.
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CurrentSehFrame">
            <summary>
            CurrentSehFrame
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TopOfStack">
            <summary>
            TopOfStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.BottomOfStack">
            <summary>
            BottomOfStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SubSystemTeb">
            <summary>
            SubSystemTeb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.FiberData">
            <summary>
            FiberData
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ArbitraryDataSlot">
            <summary>
            ArbitraryDataSlot
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Teb">
            <summary>
            Teb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.EnvironmentPointer">
            <summary>
            EnvironmentPointer
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RpcHandle">
            <summary>
            RpcHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Tls">
            <summary>
            Tls
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Peb">
            <summary>
            Peb
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.LastErrorNumber">
            <summary>
            LastErrorNumber
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CriticalSectionsCount">
            <summary>
            CriticalSectionsCount
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CsrClientThread">
            <summary>
            CsrClientThread
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Win32ThreadInfo">
            <summary>
            Win32ThreadInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Win32ClientInfo">
            <summary>
            Win32ClientInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.WoW64Reserved">
            <summary>
            WoW64Reserved
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.CurrentLocale">
            <summary>
            CurrentLocale
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.FpSoftwareStatusRegister">
            <summary>
            FpSoftwareStatusRegister
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SystemReserved1">
            <summary>
            SystemReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ExceptionCode">
            <summary>
            ExceptionCode
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ActivationContextStack">
            <summary>
            ActivationContextStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SpareBytes">
            <summary>
            SpareBytes
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.SystemReserved2">
            <summary>
            SystemReserved2
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiTebBatch">
            <summary>
            GdiTebBatch
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiRegion">
            <summary>
            GdiRegion
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiPen">
            <summary>
            GdiPen
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiBrush">
            <summary>
            GdiBrush
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RealProcessId">
            <summary>
            RealProcessId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RealThreadId">
            <summary>
            RealThreadId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiCachedProcessHandle">
            <summary>
            GdiCachedProcessHandle
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiClientProcessId">
            <summary>
            GdiClientProcessId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiClientThreadId">
            <summary>
            GdiClientThreadId
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GdiThreadLocalInfo">
            <summary>
            GdiThreadLocalInfo
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.UserReserved1">
            <summary>
            UserReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.GlReserved1">
            <summary>
            GlReserved1
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.LastStatusValue">
            <summary>
            LastStatusValue
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.StaticUnicodeString">
            <summary>
            StaticUnicodeString
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.DeallocationStack">
            <summary>
            DeallocationStack
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TlsSlots">
            <summary>
            TlsSlots
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.TlsLinks">
            <summary>
            TlsLinks
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.Vdm">
            <summary>
            Vdm
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.RpcReserved">
            <summary>
            RpcReserved
            </summary>
        </member>
        <member name="F:ERC.Structures.TEB.ThreadErrorMode">
            <summary>
            ThreadErrorMode
            </summary>
        </member>
        <member name="T:ERC.Structures.SnapshotFlags">
            <summary>
            ToolHelp SnapshotFlags
            </summary>
        </member>
        <member name="T:ERC.Structures.PROCESSENTRY32">
            <summary>
            ToolHelp PROCESSENTRY32
            </summary>
        </member>
        <member name="T:ERC.Structures.HEAPLIST32">
            <summary>
            Describes one entry (block) of a heap that is being examined.
            </summary>
        </member>
        <member name="T:ERC.Structures.HEAPENTRY32">
            <summary>
            Describes one entry (block) of a heap that is being examined.
            </summary>
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwSize">
            The size of the structure, in bytes *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.hHandle">
            A handle to the heap block *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwAddress">
            The linear address of the start of the block *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwBlockSize">
            The size of the heap block, in bytes *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwFlags">
            This member can be one of the following values.
                            LF32_FIXED    0x00000001
                           LF32_FREE     0x00000002
                           LF32_MOVEABLE 0x00000004 *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwLockCount">
            This member is no longer used and is always set to zero. *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.dwResvd">
            Reserved; do not use or alter *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.th32ProcessID">
            The identifier of the process that uses the heap *
        </member>
        <member name="F:ERC.Structures.HEAPENTRY32.th32HeapID">
            The heap identifier. This is not a handle, and has meaning only to the tool help functions *
        </member>
        <member name="M:ERC.HeapInfo.SearchHeap(System.Byte[],System.UInt64,System.String)">
            <summary>
            Searches heap entries for a specified pattern. Returns pointers to all instances of the pattern. If heapID and startAddress are both supplied heapID takes precedence.
            </summary>
            <param name="searchBytes">byte array containing the pattern to search for</param>
            <param name="heapID">ID of the heap to be searched(Optional)</param>
            <param name="hexStartAddress">Start address of the heap entry to be searched in hexadecimal(Optional)</param>
            <returns>Returns an ERCResult of IntPtr containing pointers to all instances of the pattern found.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ERC.HeapInfo.HeapStatistics(System.Boolean,System.UInt64,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:ERC.HeapInfo.HeapIDs" -->
        <member name="T:ERC.ModuleInfo">
            <summary>
            Contains all information relating to a specific module.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleName">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModulePath">
            <summary>
            Module path.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleVersion">
            <summary>
            Module version.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProduct">
            <summary>
            Module product.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProtection">
            <summary>
            Memory protection of this module.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleBase">
            <summary>
            Module base pointer.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleEntry">
            <summary>
            Module entry point.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleImageBase">
            <summary>
            Module image base.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleSize">
            <summary>
            Module size.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleASLR">
            <summary>
            Module supports ASLR.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleSafeSEH">
            <summary>
            Module supports SafeSEH
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleRebase">
            <summary>
            Module can be rebased.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleNXCompat">
            <summary>
            Module is DEP enabled.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleOsDll">
            <summary>
            Module is an OS dll.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleProcess">
            <summary>
            Process where the module is loaded.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleCore">
            <summary>
            Associated ErcCore object.
            </summary>
        </member>
        <member name="P:ERC.ModuleInfo.ModuleMachineType">
            <summary>
            Machine type of the module.
            </summary>
        </member>
        <member name="F:ERC.ModuleInfo.ModuleFailed">
            <summary>
            An errpr was encountered whilst processing the module.
            </summary>
        </member>
        <member name="M:ERC.ModuleInfo.#ctor(System.String,System.IntPtr,System.Diagnostics.Process,ERC.ErcCore)">
            <summary>
            Constructor for the ModuleInfo object. Takes (string)modules filepath (IntPtr)module handle (Process)Process from which the module is loaded
            </summary>
            <param name="module">Filepath of the module</param>
            <param name="ptr">Handle to the module</param>
            <param name="process">Process where the module is loaded</param>
            <param name="core">An ErcCore object</param>
        </member>
        <member name="M:ERC.ModuleInfo.SearchModule(System.Byte[])">
            <summary>
            Searches for a string of bytes within a specific module. Takes a byte array to be searched for. 
            </summary>
            <param name="searchBytes">A byte array to be searched for</param>
            <returns>Returns ERC_Result of pointers to the search term</returns>
        </member>
        <member name="M:ERC.ModuleInfo.ToString">
            <summary>
            Override of the ToString method. Provides a data associated with the module.
            </summary>
            <returns>A string containing relevant data.</returns>
        </member>
        <member name="T:ERC.ProcessInfo">
            <summary> Contains information needed for the associated functions relating to the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessName">
            <summary> Name of the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessDescription">
            <summary> Process description. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessPath">
            <summary> Path for the projects main module. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessID">
            <summary> Process ID. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessHandle">
            <summary> Handle for the process. </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessCurrent">
            <summary> .Net Process object for this process </summary>
        </member>
        <member name="P:ERC.ProcessInfo.ProcessMachineType">
            <summary> The machine type the process runs on. Eg. x86 or x64 </summary>
        </member>
        <member name="F:ERC.ProcessInfo.ModulesInfo">
            <summary> A list containing ModuleInfo objects associuted with the process. /// </summary>
        </member>
        <member name="F:ERC.ProcessInfo.ThreadsInfo">
            <summary> A list containing ThreadInfo objects associuted with the process. /// </summary>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)">
            <summary>
            Constructor for the Process_Info object, requires an ERC_Core object and a Process.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="process">The process to gather information from</param>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)">
            <summary>
            Constructor for the Process_Info object, requires an ERC_Core object and a Process.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="handle">The handle for the process to gather information from</param>
        </member>
        <member name="M:ERC.ProcessInfo.#ctor(ERC.ProcessInfo)">
            <summary>
            Constructor to use when inheriting from ProcessInfo.
            </summary>
            <param name="parent">The object to inherit from</param>
        </member>
        <member name="M:ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)">
            <summary>
            Gets a list of running processes on the host and removes unusable processes (such as system processes etc)
            </summary>
            <param name="core">An ErcCore object</param>
            <returns>Returns an ErcResult containing a list of all supported processes</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)">
            <summary>
            Gets a list of running processes on the host and removes unusable processes.
            </summary>
            <param name="core">An ErcCore object</param>
            <param name="machineName">The computer from which to read the list of processes. Can be either the hostname or IP address.</param>
            <returns>Returns an ErcResult containing a list of all supported processes</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessModules">
            <summary>
            Returns a list of files loaded by the current process as List String
            </summary>
            <returns>Returns an ErcResult containing a Dictionary of module names and the associated handles</returns>
        </member>
        <member name="M:ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)">
            <summary>
            Identifies if a process is 64bit or 32 bit, returns true for 64bit and false for 32bit.
            </summary>
            <param name="process">The process to be used</param>
            <returns>Returns true if the process is 64bit and false if it is not.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.LocateMemoryRegions">
            <summary>
            Identifies memory regions occupied by the current process and populates the associated list with the Process_Info object.
            </summary>
        </member>
        <member name="M:ERC.ProcessInfo.SearchProcessMemory(System.Byte[])">
            <summary>
            Private function called from Search_Memory. Searches memory regions populated by the process for specific patterns.
            </summary>
            <param name="searchBytes"> Takes a byte array as input to be searched for</param>
            <returns>Returns a list of IntPtr for each instance found.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchProcessMemory(System.Byte[],System.Byte[])">
            <summary>
            Private function called from Search_Memory. Searches memory regions populated by the process for specific strings.
            </summary>
            <param name="searchBytes"> Takes a byte array as input to be searched for</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <returns>Returns a list of IntPtr for each instance found.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            </summary>
            <param name="excludes">Takes a list of module names to be excluded from the search</param>
            <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory associated with a given process and associated modules for POP X POP X RET instructions. 
            Passing a list of module paths or names will exclude those modules from the search. 
            </summary>
            <param name="excludes">Takes a list of module names to be excluded from the search</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <returns>Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Specific modules can be exclude through passing a Listof strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="excludes">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Searches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Specific modules can be exclude through passing a Listof strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="excludes">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>
        </member>
        <member name="M:ERC.ProcessInfo.SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Searches all modules loaded by a process for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.
            Search can be limited to specific modules through passing a List of strings containing module names or paths.
            </summary>
            <param name="searchType">0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="ptrsToExclude"> Takes a byte array of values used to disqualify pointers</param>
            <param name="searchBytes">Byte array to be searched for (optional)</param>
            <param name="searchString">String to be searched for (optional)</param>
            <param name="includedModules">Modules to be included in the search (optional)</param>
            <param name="excludedModules">Modules to be excluded from the search (optional)</param>
            <returns>Returns an ERC_Result containing pointers to all instances of the search query.</returns>>
        </member>
        <member name="M:ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)">
            <summary>
            Searches process registers and identifies pointers to buffers in memory containing a non repeating pattern. Functionality to identify SEH overwrites not yet implements.
            </summary>
            <param name="searchType">(Optional) 0 = search term is system default\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32</param>
            <param name="extended">(Optional) Include additional characters in the pattern (!#$%^ etc) in the to be searched</param>
            <returns>Returns a ERC_Result containing a List of RegisterOffset</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ByteIndexOf(System.Byte[],System.Byte[])">
            <summary>
            Private function, BoyerMoore string search algorithm modified to search for sets of bytes in a byte array. 
            Takes two byte arrays, array to be searched and array to search for.
            </summary>
        </member>
        <member name="M:ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a list of modules to exclude from a search of memory.
            </summary>
            <returns>Returns an ErcResult containing a list of stringss</returns>
        </member>
        <member name="M:ERC.ProcessInfo.ToString">
            <summary>
            Override of the ToString method. Returns information about the process in a pleasantly formatted string
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetModuleHandles">
            <summary>
            Returns a list of module handles associated with the process.
            </summary>
            <returns>Returns a dictionary containing the handle and path of each module</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessModuleInformation">
            <summary>
            Gets the list of ModuleInfo objects associated with the current process.
            </summary>
            <returns>Returns an ErcResult containing a list of ModuleInfo objects</returns>
        </member>
        <member name="M:ERC.ProcessInfo.GetProcessThreadInformation">
            <summary>
            Gets the list of ThreadInfo objects associated with the current process.
            </summary>
            <returns>Returns an ErcResult containing a list of ThreadInfo objects</returns>
        </member>
        <member name="M:ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)">
            <summary>
            Reads process memory from a specific address for a set number of bytes. 
            </summary>
            <param name="startAddress">The address to start reading from.</param>
            <param name="length">Number of bytes to read.</param>
            <returns>Returns a bytes array containing the specified contents of process memory.</returns>
        </member>
        <member name="T:ERC.ThreadInfo">
            <summary>
            Stores information about the current thread.
            </summary>
        </member>
        <member name="P:ERC.ThreadInfo.ThreadHandle">
            <summary>
            A handle for the current thread.
            </summary>
        </member>
        <member name="P:ERC.ThreadInfo.ThreadID">
            <summary>
            The ID number of the current thread.
            </summary>
        </member>
        <member name="F:ERC.ThreadInfo.Context32">
            <summary>
            x86 CPU Register values.
            </summary>
        </member>
        <member name="F:ERC.ThreadInfo.Context64">
            <summary>
            x64 CPU Register values.
            </summary>
        </member>
        <member name="M:ERC.ThreadInfo.Get_Context">
            <summary>
            Gets the register values of a thread and populates the CONTEXT structs. Should only be used on a suspended thread, results on an active thread are unreliable.
            </summary>
            <returns>Returns an ErcResult, the return value can be ignored, the object should only be checked for error values</returns>
        </member>
        <member name="M:ERC.ThreadInfo.GetSehChain">
            <summary>
            Gets the current SEH chain for the process.
            </summary>
            <returns>Returns a list of IntPtr containing the SEH chain</returns>
        </member>
        <member name="M:ERC.ThreadInfo.GetTeb">
            <summary>
            Gets the Thread environment block of the current thread.
            </summary>
            <returns>Returns a TEB struct</returns>
        </member>
        <member name="M:ERC.ThreadInfo.ToString">
            <summary>
            Gets information specific to the current thread and returns it as a string.
            </summary>
            <returns>Returns a string</returns>
        </member>
    </members>
</doc>



================================================
File: ErcXdbg/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.InteropServices;

[assembly: ComVisible(false)]
[assembly: AssemblyTrademark("by Andy Bowden")]
[assembly: AssemblyCompany("ERC")]
[assembly: AssemblyTitle("ErcXdbgPlugin")]
[assembly: AssemblyDescription("ERC plugin for X64dbg")]
[assembly: AssemblyProduct("Erc.Xdbg")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.0.0")]



================================================
File: ErcXdbg/ErcMain.cs
================================================
ï»¿using System;
using System.IO;
using System.Runtime.InteropServices;
using Managed.x64dbg.SDK; 
using RGiesecke.DllExport;

namespace ErcXdbg
{
    public static class ErcMain
    {
        private const string plugin_name = "ErcXdbg";
        private const int plugin_version = 1;

        [DllExport("pluginit", CallingConvention.Cdecl)]
        public static bool pluginit(ref Plugins.PLUG_INITSTRUCT initStruct)
        {
            Plugins.pluginHandle = initStruct.pluginHandle;
            initStruct.sdkVersion = Plugins.PLUG_SDKVERSION;
            initStruct.pluginVersion = plugin_version;
            initStruct.pluginName = plugin_name;
            Console.SetOut(new TextWriterPLog());
            return ErcXdbg.PluginInit(initStruct);
        }

        [DllExport("plugstop", CallingConvention.Cdecl)]
        private static bool plugstop()
        {
            ErcXdbg.PluginStop();
            return true;
        }

        [DllExport("plugsetup", CallingConvention.Cdecl)]
        private static void plugsetup(ref Plugins.PLUG_SETUPSTRUCT setupStruct)
        {
            ErcXdbg.PluginSetup(setupStruct);
        }
    }
}



================================================
File: ErcXdbg/ErcXdbg.cs
================================================
ï»¿using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Managed.x64dbg.SDK;
using Microsoft.VisualBasic;
using RGiesecke.DllExport;

namespace ErcXdbg
{
    public class ErcXdbg
    {
        private const int MENU_ABOUT = 0;
        private const int MENU_HELP = 1;

        public static bool PluginInit(Plugins.PLUG_INITSTRUCT initStruct)
        {
            if (!Plugins._plugin_registercommand(Plugins.pluginHandle, "ERC", RegisteredCommands.ErcCommand, false))
            {
                PLog.WriteLine("[ERC] error registering the \"ERC\" command!");
            }

            return true;
        }

        public static bool PluginStart()
        {
            Plugins._plugin_unregistercommand(Plugins.pluginHandle, "ERC");
            Plugins._plugin_registercommand(Plugins.pluginHandle, "ERC", RegisteredCommands.ErcCommand, false);

            return true;
        }

        public static void PluginStop()
        {
            Plugins._plugin_unregistercallback(Plugins.pluginHandle, Plugins.CBTYPE.CB_INITDEBUG);
            Plugins._plugin_unregistercallback(Plugins.pluginHandle, Plugins.CBTYPE.CB_STOPDEBUG);
        }

        public static void PluginSetup(Plugins.PLUG_SETUPSTRUCT setupStruct)
        {
            Plugins._plugin_menuaddentry(setupStruct.hMenu, 0, "&About...");
            Plugins._plugin_menuaddentry(setupStruct.hMenu, 1, "&Help");
        }

        [DllExport("CBMENUENTRY", CallingConvention.Cdecl)]
        public static void CBMENUENTRY(Plugins.CBTYPE cbType, ref Plugins.PLUG_CB_MENUENTRY info)
        {
            switch (info.hEntry)
            {
                case MENU_ABOUT:
                    Interaction.MsgBox("ERC Plugin For x64dbg\nCoded By Andy Bowden", MsgBoxStyle.OkOnly, "Info");
                    break;
                case MENU_HELP:
                    Interaction.MsgBox("https://github.com/Andy53/ERC.Xdbg", MsgBoxStyle.OkOnly, "Help");
                    break;

            }
        }
    }
}



================================================
File: ErcXdbg/ErcXdbgPlugin.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props" Condition="Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{F2F8BA6A-0112-47CA-9AFA-E8082263AB72}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AssemblyName>Erc.Xdbg</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <TargetFrameworkProfile />
    <ApplicationVersion>1.0.0.0</ApplicationVersion>
    <FileAlignment>512</FileAlignment>
    <RootNamespace>ErcXdbg</RootNamespace>
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\x64\Debug\</OutputPath>
    <DefineConstants>TRACE;DEBUG;AMD64</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'">
    <OutputPath>bin\x64\Release\</OutputPath>
    <DefineConstants>TRACE;AMD64</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\x86\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <OutputPath>bin\x86\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Costura, Version=5.7.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Costura.Fody.5.7.0\lib\netstandard1.0\Costura.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.VisualBasic" />
    <Reference Include="Microsoft.Win32.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Win32.Primitives.4.3.0\lib\net46\Microsoft.Win32.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="Reloaded.Assembler, Version=1.0.14.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Assembler.1.0.14\lib\netstandard2.0\Reloaded.Assembler.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory, Version=8.0.1.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Memory.8.0.1\lib\netstandard2.0\Reloaded.Memory.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory.Buffers, Version=2.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Memory.Buffers.2.0.0\lib\netstandard2.0\Reloaded.Memory.Buffers.dll</HintPath>
    </Reference>
    <Reference Include="RGiesecke.DllExport.Metadata, Version=1.0.0.0, Culture=neutral, PublicKeyToken=8f52d83c1a22df51, processorArchitecture=MSIL">
      <HintPath>..\packages\UnmanagedExports.1.2.7\lib\net\RGiesecke.DllExport.Metadata.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.AppContext, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.AppContext.4.3.0\lib\net463\System.AppContext.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Buffers.4.5.1\lib\net461\System.Buffers.dll</HintPath>
    </Reference>
    <Reference Include="System.ComponentModel.Composition" />
    <Reference Include="System.Console, Version=4.0.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Console.4.3.1\lib\net46\System.Console.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Diagnostics.DiagnosticSource, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.DiagnosticSource.7.0.0\lib\net462\System.Diagnostics.DiagnosticSource.dll</HintPath>
    </Reference>
    <Reference Include="System.Diagnostics.Tracing, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.Tracing.4.3.0\lib\net462\System.Diagnostics.Tracing.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Globalization.Calendars, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Globalization.Calendars.4.3.0\lib\net46\System.Globalization.Calendars.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.4.3.0\lib\net462\System.IO.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.Compression, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.Compression.4.3.0\lib\net46\System.IO.Compression.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.IO.Compression.ZipFile, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.Compression.ZipFile.4.3.0\lib\net46\System.IO.Compression.ZipFile.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.FileSystem.4.3.0\lib\net46\System.IO.FileSystem.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.FileSystem.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.FileSystem.Primitives.4.3.0\lib\net46\System.IO.FileSystem.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Linq, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Linq.4.3.0\lib\net463\System.Linq.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Linq.Expressions.4.3.0\lib\net463\System.Linq.Expressions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Management" />
    <Reference Include="System.Memory, Version=4.0.1.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Memory.4.5.5\lib\net461\System.Memory.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http, Version=4.1.1.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Net.Http.4.3.4\lib\net46\System.Net.Http.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Net.Sockets, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Net.Sockets.4.3.0\lib\net46\System.Net.Sockets.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Numerics" />
    <Reference Include="System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Numerics.Vectors.4.5.0\lib\net46\System.Numerics.Vectors.dll</HintPath>
    </Reference>
    <Reference Include="System.Reflection, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Reflection.4.3.0\lib\net462\System.Reflection.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.4.3.1\lib\net462\System.Runtime.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.CompilerServices.Unsafe.6.0.0\lib\net461\System.Runtime.CompilerServices.Unsafe.dll</HintPath>
    </Reference>
    <Reference Include="System.Runtime.Extensions, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.Extensions.4.3.1\lib\net462\System.Runtime.Extensions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.InteropServices, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.InteropServices.4.3.0\lib\net463\System.Runtime.InteropServices.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.InteropServices.RuntimeInformation.4.3.0\lib\net45\System.Runtime.InteropServices.RuntimeInformation.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Algorithms, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Algorithms.4.3.1\lib\net463\System.Security.Cryptography.Algorithms.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Encoding, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Encoding.4.3.0\lib\net46\System.Security.Cryptography.Encoding.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Primitives.4.3.0\lib\net46\System.Security.Cryptography.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.X509Certificates, Version=4.1.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.X509Certificates.4.3.2\lib\net461\System.Security.Cryptography.X509Certificates.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Text.RegularExpressions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Text.RegularExpressions.4.3.1\lib\net463\System.Text.RegularExpressions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Xml.ReaderWriter.4.3.1\lib\net46\System.Xml.ReaderWriter.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ErcXdbg.cs" />
    <Compile Include="Globals.cs" />
    <Compile Include="RegisteredCommands.cs" />
    <Compile Include="ErcMain.cs" />
    <Compile Include="AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\ERC\ERC\ERC.Net.csproj">
      <Project>{118c331f-8fc1-4ba6-b5b1-da397e623cfe}</Project>
      <Name>ERC.Net</Name>
    </ProjectReference>
    <ProjectReference Include="..\Managed.x64dbg\Managed.x64dbg.csproj">
      <Project>{3f05e028-6436-4f1c-abaf-5e7cfbfcb7d7}</Project>
      <Name>Managed.x64dbg</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="FodyWeavers.xml" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>if $(PlatformName) == x86 (
move "$(TargetDir)$(TargetName).dll" "$(TargetDir)$(TargetName).dp32"
) ELSE (
move "$(TargetDir)$(TargetName).dll" "$(TargetDir)$(TargetName).dp64"
)</PostBuildEvent>
  </PropertyGroup>
  <Import Project="../packages/UnmanagedExports.1.2.7/tools/RGiesecke.DllExport.targets" Condition="Exists('../packages/UnmanagedExports.1.2.7/tools/RGiesecke.DllExport.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets'))" />
    <Error Condition="!Exists('..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets'))" />
    <Error Condition="!Exists('..\packages\Fody.6.5.5\build\Fody.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Fody.6.5.5\build\Fody.targets'))" />
    <Error Condition="!Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props'))" />
    <Error Condition="!Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets'))" />
  </Target>
  <Import Project="..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets" Condition="Exists('..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets')" />
  <Import Project="..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets" Condition="Exists('..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets')" />
  <Import Project="..\packages\Fody.6.5.5\build\Fody.targets" Condition="Exists('..\packages\Fody.6.5.5\build\Fody.targets')" />
  <Import Project="..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets" Condition="Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets')" />
</Project>


================================================
File: ErcXdbg/FodyWeavers.xml
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">
  <Costura />
</Weavers>


================================================
File: ErcXdbg/FodyWeavers.xsd
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- This file was generated by Fody. Manual changes to this file will be lost when your project is rebuilt. -->
  <xs:element name="Weavers">
    <xs:complexType>
      <xs:all>
        <xs:element name="Costura" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:all>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged32Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged64Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="PreloadOrder" type="xs:string">
                <xs:annotation>
                  <xs:documentation>The order of preloaded assemblies, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:all>
            <xs:attribute name="CreateTemporaryAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>This will copy embedded files to disk before loading them into memory. This is helpful for some scenarios that expected an assembly to be loaded from a physical file.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeDebugSymbols" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if .pdbs for reference assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeReferences" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if runtime assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="UseRuntimeReferencePaths" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls whether the runtime assemblies are embedded with their full path or only with their assembly name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCompression" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Embedded assemblies are compressed by default, and uncompressed when they are loaded. You can turn compression off with this option.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCleanup" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>As part of Costura, embedded assemblies are no longer included as part of the build. This cleanup can be turned off.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="LoadAtModuleInit" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura by default will load as part of the module initialization. This flag disables that behavior. Make sure you call CosturaUtility.Initialize() somewhere in your code.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IgnoreSatelliteAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura will by default use assemblies with a name like 'resources.dll' as a satellite resource and prepend the output path. This flag disables that behavior.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged32Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged64Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="PreloadOrder" type="xs:string">
              <xs:annotation>
                <xs:documentation>The order of preloaded assemblies, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:all>
      <xs:attribute name="VerifyAssembly" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'true' to run assembly verification (PEVerify) on the target assembly after all weavers have been executed.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="VerifyIgnoreCodes" type="xs:string">
        <xs:annotation>
          <xs:documentation>A comma-separated list of error codes that can be safely ignored in assembly verification.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="GenerateXsd" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'false' to turn off automatic generation of the XML Schema file.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>


================================================
File: ErcXdbg/Globals.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ErcXdbg
{
    public enum Encoding : int
    {
        [Description("Unicode")]
        Unicode = 1,
        [Description("ASCII")]
        ASCII = 2,
        [Description("UTF8")]
        UTF8 = 3,
        [Description("UTF7")]
        UTF7 = 4,
        [Description("UTF32")]
        UTF32 =5
    }
    public static class Globals
    {
        public static bool aslr = false;
        public static bool safeseh = false;
        public static bool rebase = false;
        public static bool nxcompat = false;
        public static bool osdll = false;
        public static bool extended = false;
        public static Encoding encode = Encoding.ASCII;
        public static byte[] bytes = new byte[0];
        public static string protection = "read,write";
    }
}



================================================
File: ErcXdbg/RegisteredCommands.cs
================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;
using Managed.x64dbg.SDK;
using System.Management;
using System.Threading;

namespace ErcXdbg
{
    public static class RegisteredCommands
    {
        public static bool ErcCommand(int argc, string[] argv)
        {
            string sessionFile = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase) + "\\Session.xml";
            sessionFile = sessionFile.Replace("file:\\", "");

            try
            {
                DeleteOldPlugins();
                
                //Get the handle of the attached process
                var hProcess = Bridge.DbgValFromString("$hProcess");
                
                //Confirm that at least some options were passed.
                if (argc <= 1)
                {
                    PrintHelp("Arguments must be provided. Use --help for detailed information.");
                    ErcXdbg.PluginStart();
                    return true; 
                }

                if (argv[0].ToLower().Contains("--reset"))
                {
                    Reset();
                    ErcXdbg.PluginStart();
                    return true;
                }

                //Check a process is attached.
                if (hProcess == IntPtr.Zero)
                {
                    bool exitWithError = true;
                    bool update = false;
                    bool config = false;
                    bool debug = false;
                    ERC.ErcCore coreTemp = new ERC.ErcCore();

                    foreach (string s in argv[0].Split(' '))
                    {
                        if (s.Contains("--"))
                        {
                            switch (s.ToLower())
                            {
                                case "--update":
                                    exitWithError = false;
                                    if (update == false)
                                    {
                                        update = true;
                                        List<string> args = argv[0].Split(' ').ToList<string>();
                                        args.RemoveAt(0);
                                        Update(args);
                                    }
                                    break;
                                case "--config":
                                    exitWithError = false;
                                    if (config == false)
                                    {
                                        config = true;
                                        List<string> args = argv[0].Split(' ').ToList<string>();
                                        args.RemoveAt(0);
                                        Config(args, coreTemp);
                                    }
                                    break;
                                case "--debug":
                                    exitWithError = false;
                                    if (debug == false)
                                    {
                                        debug = true;
                                        List<string> args = argv[0].Split(' ').ToList<string>();
                                        args.RemoveAt(0);
                                        Debug(args);
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    if(exitWithError == true)
                    {
                        PrintHelp("The debugger must be attached to a process to use ERC");
                    }
                    
                    ErcXdbg.PluginStart();
                    return true;
                }
                PLog.WriteLine("");
                GC.Collect();

                ERC.ErcCore core = new ERC.ErcCore();
                ERC.ProcessInfo info = new ERC.ProcessInfo(new ERC.ErcCore(), hProcess);

                ParseCommand(argv[0], core, info);
            }
            catch (Exception e)
            {
                PrintHelp(e.Message);
                ErcXdbg.PluginStart();
                return true;
            }

            ErcXdbg.PluginStart();
            return true;
        }

        private static void PrintHelp(string errorMessage = null)
        {
            PLog.WriteLine("    __________   ______  ");
            PLog.WriteLine("   / ____ / __\\ / ____/ ");
            PLog.WriteLine("  / __ / / /_/ / /       ");
            PLog.WriteLine(" / /___ / _, _/ /___     ");
            PLog.WriteLine("/_____ /_/ |_|\\____/    ");
            PLog.WriteLine("-------------------------");
            if (errorMessage != null)
            {
                PLog.WriteLine("Error: {0}", errorMessage);
            }
            string help = "";
            help += "Globals:\n";
            help += "   Global arguments can be appended to any command and will persist for the length of the session until X64dbg is next\n";
            help += "   restarted.\n";
            help += "   -Aslr           |\n";
            help += "       Excludes ASLR enabled modules from all searches. Can be disabled by passing \"false\". -Aslr false\n";
            help += "   -SafeSEH        |\n";
            help += "       Excludes SafeSEH enabled modules from all searches. Can be disabled by passing \"false\". -SafeSEH false\n";
            help += "   -Rebase         |\n";
            help += "       Excludes Rebase enabled modules from all searches. Can be disabled by passing \"false\". -Rebase false\n";
            help += "   -NXCompat       |\n";
            help += "       Excludes NXCompat enabled modules from all searches. Can be disabled by passing \"false\". -NXCompat false\n";
            help += "   -OSDLL          |\n";
            help += "       Excludes OSDLL enabled modules from all searches. Can be disabled by passing \"false\". -OSDLL false\n";
            help += "   -Bytes          |\n";
            help += "       Excludes bytes from pointers returned in searches and from being added to bytearrays. Disabled by passing\n"; 
            help += "       without any bytes.\n";
            help += "   -Protection     |\n";
            help += "       Defines the protection level of pointers to be included search results. Default is exec. This\n";
            help += "       allows only executable pointers to be returned in search results. A value must be provided with this switch,\n";
            help += "       options are read,write,exec. Options must be comma seperated without spaces.\n";
            help += "Usage:       \n";
            help += "   --Help          |\n";
            help += "       Displays this message. Further help can be found at: https://github.com/Andy53/ERC.Xdbg/tree/master/ErcXdbg \n";
            help += "   --Update        |\n";
            help += "       Can be used to update the plugin to the latest version. Can be passed a ip:port combination to specify the\n";
            help += "       proxy server to use.\n";
            help += "   --Config        |\n";
            help += "       Takes any of the following arguments, Get requests take no additional parameters, Set requests take a directory\n";
            help += "       which will be set as the new value.\n";
            help += "           GetWorkingDirectory (ERC --config GetWorkingDirectory)\n";
            help += "           GetStandardPattern  (ERC --config GetStandardPatter)\n";
            help += "           GetExtendedPattern  (ERC --config GetExtendedPattern)\n";
            help += "           GetVersion          (ERC --config GetVersion)\n";
            help += "           GetAuthor           (ERC --config GetAuthor)\n";
            help += "           GetErrorFilePath    (ERC --config GetErrorFilePath)\n";
            help += "           SetWorkingDirectory (ERC --config SetWorkingDirectory directory)\n";
            help += "           SetStandardPattern  (ERC --config SetStandardPattern file)\n";
            help += "           SetExtendedPattern  (ERC --config SetExtendedPattern file)\n";
            help += "           SetAuthor           (ERC --config SetAuthor author)\n";
            help += "           SetErrorFilePath    (ERC --config SetErrorFilePath file)\n";
            help += "       Passed without parameters will print all Get requests.\n";
            help += "   --Pattern       |\n";
            help += "       Generates a non repeating pattern. A pattern of pure ASCII characters can be generated up to 20277 and up to  \n";
            help += "       66923 if special characters are used. The offset of a particular string can be found inside the pattern by \n";
            help += "       providing a search string (must be at least 3 chars long).\n";
            help += "           Pattern create: ERC --pattern <create | c> <length>\n";
            help += "           Pattern offset: ERC --pattern <offset | o> <search string>\n";
            help += "   --Bytearray     |\n";
            help += "       Generates a bytearray which is saved to the working directory and displayed in the application log tab. A set \n";
            help += "       of hex characters can be provided to the -byte global which will be excluded from the bytearray.\n";
            help += "   --Compare       |\n";
            help += "       Generates a table with a byte by byte comparison of an area of memory and the bytes from a file. Takes a memory \n";
            help += "       from which to start the search and a filepath for the binary file\n";
            help += "   --Convert       |\n";
            help += "       Converts input from one form to another such as ASCII to hex, Unicode to hex, ASCII to bytes. \n";
            help += "       Valid conversion types:\n           Ascii to Hex = AtoH\n           Unicdoe to Hex = UtoH\n           UTF-7 to Hex = 7toH\n";
            help += "           UTF-8 to Hex = 8toH\n           UTF-32 to Hex = 32toH\n";
            help += "   --Assemble      |\n";
            help += "       Takes a collection of assembley instructions and outputs the associated opcodes. Takes a boolean of 0 for x32 or\n";
            help += "        1 for x64 can be used to force the architecture of the opcodes returned, if neither is passed the architecture \n";
            help += "       of the process will be used.\n";
            help += "   --Disassemble   |\n";
            help += "       Takes a collection of opcodes and outputs the associated assembley instructions. Takes a boolean of 0 for x32 or\n";
            help += "        1 for x64 can be used to force the architecture of the opcodes returned, if neither is passed the architecture \n";
            help += "       of the process will be used.\n";
            help += "   --SearchMemory   |\n";
            help += "       Takes a search string of either bytes or a string to search for. Takes an (optional) integer to specify search \n";
            help += "       type (0 = bytes, 1 = Unicode, 2 = ASCII, 4 = UTF7, 5 = UTF8).\n";        
            help += "       Example: ERC --SearchMemory FF E4. Search for bytes FF E4 including all dll's \n";
            help += "       Example: ERC --SearchMemory HelloWorld 1. Search for the string \"HelloWorld in Unicode\"\n";
            help += "   --SearchModules   |\n";
            help += "       Takes a search string of either bytes or a string to search for in a processes loaded modules. Takes an \n";
            help += "       (optional) integer to specify search \n";
            help += "       type (0 = bytes, 1 = Unicode, 2 = ASCII, 4 = UTF7, 5 = UTF8).\n";
            help += "       Example: ERC --SearchModules FF E4. Search for bytes FF E4 including all dll's \n";
            help += "       Example: ERC --SearchModules FF E4 module1.dll module2.dll. Search for bytes FF E4 only in module1.dll and\n";
            help += "       module2.dll\n";
            help += "   --Dump |\n";
            help += "       Dump contents of memory to a file. Takes an address to start at and a hex number of bytes to be read.\n"; 
            help += "   --ListProcesses |\n";
            help += "       Displays a list of processes running on the local machine.\n";
            help += "   --ProcessInfo   |\n";
            help += "       Displays info about the attached process, loaded modules and threads. Can be passed a boolen to indicate if the\n"; 
            help += "       output should be written to disk.\n";
            help += "   --ModuleInfo    |\n";
            help += "       Displays info about the modules loaded by the attached process. Can be passed a boolen to indicate if the output\n"; 
            help += "       should be written to disk.\n";
            help += "   --ThreadInfo    |\n";
            help += "       Displays info about threads associated with the attached process. Can be passed a boolen to indicate if the\n"; 
            help += "       output should be written to disk.\n";
            help += "   --SEH           |\n";
            help += "       Displays a list of addresses for pop pop ret instructions.\n"; 
            help += "       in the search.\n";
            help += "       Example: ERC --SEH Search for POP, POP, RET instructions in memory. \n";
            help += "   --EggHunters    |\n";
            help += "       Prints a list of egghunters which can be used for various machine types. Can be passed 4 character string to be\n"; 
            help += "       used as the egghunter search tag. Default tag is ERCD.\n";
            help += "   --FindNrp       |\n";
            help += "       Generates a table detailing whether a repeating pattern has been found in the memory space of the process and\n";
            help += "       if any registers pointed into the pattern. Takes an integer for the text to look for (1 = Unicode, 2 = ASCII,\n";
            help += "       3 = UTF8, 4 = UTF7, 5 = UTF32, default = ASCII). Additionally if the value \"True\" is provided the extended \n";
            help += "       pattern will be used which includes special characters.\n";
            help += "   --HeapInfo      |\n";
            help += "       Displays information about the heap. Takes commands search, stats, ids, and dump. Takes an integer to\n";
            help += "       represent the ID of the heap to utilize. Takes a hex value to specify the address of the heap entry to utilize.\n";
            help += "       If both heap ID and start address are specified heap ID takes precedence, if start address and a byte pattern to.\n";
            help += "       search for are specified start address must be provided first. Takes a boolean value of true/false/1/0\n";
            help += "       to specify if output should be written to disk.\n";
            help += "       Example: ERC --HeapInfo stats. Display statistics about all heaps associated with the process.\n";
            help += "       Example: ERC --HeapInfo 0x00453563 search FFE4. Search for FFE4 in the Heap entry starting at 0x00453563\n";
            help += "       Example: ERC --HeapInfo 0x00453563 dump. Dump all memory from heap entry starting at 0x00453563\n";
            help += "   --Rop           |\n";
            help += "       Attempts to build a ROP chain for the current process. Current implementation utilizes VirtualAlloc, HeapCreate\n";
            help += "       and VirtualProtect.\n";
            help += "   --RopGadgets    |\n";
            help += "       Generates lists of ROP gadgets from within the current process. Lists are saved to the working directory.\n";
            help += "   --Reset         |\n";
            help += "       Clears all global variables and user defined configurations.";
            PLog.WriteLine(help);
        }

        private static void ParseCommand(string command, ERC.ErcCore core, ERC.ProcessInfo info)
        {
            List<string> parameters = new List<string>(command.Split(' '));
            parameters.RemoveAt(0);

            int commands = 0;
            string option = "";

            parameters = ParseGlobals(parameters);

            //check how many options were passed to ERC
            foreach(string s in parameters)
            {
                if (s.Contains("--"))
                {
                    commands++;
                    option = s.ToLower();
                }
            }

            //Confirm the option is valid.
            if(commands != 1)
            {
                PrintHelp("One option and it's parameters must be executed at a time (options start with --)");
                return;
            }
            else
            {
                bool writeToFile = true;
                switch (option)
                {
                    case "--help":
                        PrintHelp();
                        return;
                    case "--update":
                        Update(parameters);
                        return;
                    case "--config":
                        Config(parameters, core);
                        return;
                    case "--pattern":
                        Pattern(core, parameters);
                        return;
                    case "--bytearray":
                        ByteArray(parameters, core);
                        return;
                    case "--compare":
                        Compare(info, parameters);
                        return;
                    case "--convert":
                        Convert(info, parameters);
                        return;
                    case "--assemble":
                        Assemble(info, parameters);
                        return;
                    case "--disassemble":
                        Disassemble(info, parameters);
                        return;
                    case "--searchmemory":
                        SearchMemory(info, parameters);
                        return;
                    case "--searchmodules":
                        SearchModules(info, parameters);
                        return;
                    case "--dump":
                        DumpMemory(info, parameters);
                        return;
                    case "--listprocesses":
                        PLog.WriteLine(ERC.DisplayOutput.ListLocalProcesses());
                        return;
                    case "--processinfo":
                        if(parameters.Count == 2)
                        {
                            if(parameters[1].ToLower() == "false" || parameters[1].ToLower() == "0")
                            {
                                writeToFile = false;
                            }
                        }
                        PLog.WriteLine("\n" + ERC.DisplayOutput.DisplayProcessInfo(info, writeToFile));
                        return;
                    case "--moduleinfo":
                        if (parameters.Count == 2)
                        {
                            if (parameters[1].ToLower() == "false" || parameters[1].ToLower() == "0")
                            {
                                writeToFile = false;
                            }
                        }
                        PLog.WriteLine("\n" + ERC.DisplayOutput.GenerateModuleInfoTable(info, writeToFile));
                        return;
                    case "--threadinfo":
                        if (parameters.Count == 2)
                        {
                            if (parameters[1].ToLower() == "false" || parameters[1].ToLower() == "0")
                            {
                                writeToFile = false;
                            }
                        }
                        PLog.WriteLine("\n" + ERC.DisplayOutput.DisplayThreadInfo(info, writeToFile));
                        return;
                    case "--seh":
                        SEH(parameters, info);
                        break;
                    case "--egghunters":
                        if(parameters.Count <= 2)
                        {
                            if(parameters.Count == 1)
                            {
                                EggHunters(core);
                            }
                            else
                            {
                                EggHunters(core, parameters[1]);
                            }
                        }
                        return;
                    case "--findnrp":
                        FindNRP(info, parameters);
                        return;
                    case "--heapinfo":
                        HeapInfo(info, parameters);
                        return;
                    case "--ropgadgets":
                        rop(info, true);
                        return;
                    case "--rop":
                        rop(info);
                        return;
                    case "--debug":
                        Debug(info, parameters);
                        return;
                    case "--reset":
                        Reset(info, parameters);
                        return;
                    default:
                        PrintHelp("The command was not structured correctly: Option is not supported. ERC <option> <parameters>");
                        return;
                }
            }
            return;
        }

        private static List<string> ParseGlobals(List<string> parameters)
        {
            try
            {
                for (int i = 0; i < parameters.Count; i++)
                {
                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-aslr" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.aslr = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.aslr = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-aslr")
                        {
                            Globals.aslr = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-aslr")
                    {
                        Globals.aslr = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-safeseh" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.safeseh = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.safeseh = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-safeseh")
                        {
                            Globals.safeseh = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-safeseh")
                    {
                        Globals.safeseh = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-rebase" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.rebase = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.rebase = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-rebase")
                        {
                            Globals.rebase = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-rebase")
                    {
                        Globals.rebase = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-nxcompat" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.nxcompat = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.nxcompat = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-nxcompat")
                        {
                            Globals.nxcompat = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-nxcompat")
                    {
                        Globals.nxcompat = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-osdll" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.osdll = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.osdll = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-osdll")
                        {
                            Globals.osdll = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-osdll")
                    {
                        Globals.osdll = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        
                        if (parameters[i].ToLower() == "-bytes" && !parameters[i + 1].ToLower().Contains("-"))
                        {
                            string allowedChars = "abcdefABCDEF1234567890";
                            parameters[i + 1] = parameters[i + 1].Replace("\\x", "");
                            parameters[i + 1] = parameters[i + 1].Replace("0x", "");
                            string hexChars = "";

                            for (int j = 0; j < parameters[i + 1].Length; j++)
                            {
                                if (allowedChars.Contains(parameters[i + 1][j].ToString()))
                                {
                                    hexChars = hexChars + parameters[i + 1][j];
                                }
                            }

                            if (hexChars.Length % 2 != 0)
                            {
                                hexChars += "0";
                            }

                            byte[] bytes = StringToByteArray(hexChars);
                            Globals.bytes = bytes;
                            parameters.RemoveAt(i + 1);
                            parameters.RemoveAt(i);
                            i--;
                        }
                        else if (parameters[i].ToLower() == "-bytes")
                        {
                            
                            Globals.bytes = new byte[0];
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-bytes")
                    {
                        Globals.bytes = new byte[0];
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-protection")
                        {
                            Globals.protection = parameters[i + 1].ToLower();
                            parameters.RemoveAt(i + 1);
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-protection")
                    {
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters.Count > i + 1)
                    {
                        if (parameters[i].ToLower() == "-extended" && (parameters[i + 1].ToLower() == "true" || parameters[i + 1].ToLower() == "false"))
                        {
                            if (parameters[i + 1].ToLower() == "true")
                            {
                                Globals.extended = true;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                            else
                            {
                                Globals.extended = false;
                                parameters.RemoveAt(i + 1);
                                parameters.RemoveAt(i);
                                i--;
                            }
                        }
                        else if (parameters[i].ToLower() == "-extended")
                        {
                            Globals.extended = true;
                            parameters.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (parameters[i].ToLower() == "-extended")
                    {
                        Globals.extended = true;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters[i].ToLower() == "-ascii")
                    {
                        Globals.encode = Encoding.ASCII;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters[i].ToLower() == "-unicode")
                    {
                        Globals.encode = Encoding.Unicode;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters[i].ToLower() == "-utf7")
                    {
                        Globals.encode = Encoding.UTF7;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters[i].ToLower() == "-utf8")
                    {
                        Globals.encode = Encoding.UTF8;
                        parameters.RemoveAt(i);
                        i--;
                    }

                    if (parameters[i].ToLower() == "-utf32")
                    {
                        Globals.encode = Encoding.UTF32;
                        parameters.RemoveAt(i);
                        i--;
                    }
                }
            }
            catch (Exception e)
            {
                PLog.WriteLine("ERROR: " + e.Message + "\n");
            }
            
            return parameters;
        }

        private static void Update(List<string> parameters)
        {
            PLog.WriteLine("ERC --Update");
            PLog.WriteLine("----------------------------------------------------------------------");

            
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            bool proxy = false;
            string proxyIpAddress = "";
            string proxyPort = "";
            IPAddress address = null;

            if (parameters.Count > 1)
            {
                PrintHelp("Too many parameters provided. Update must be called as \"ERC --update <proxyIP:port>\"");
            }
            else if (parameters.Count == 1)
            {
                if (parameters[0].Split('.').Length == 4)
                {
                    if (parameters[0].Contains(":") == true && parameters[0].Split(':').Length == 2
                        && IPAddress.TryParse(parameters[0].Split(':')[0], out address) == true)
                    {
                        proxyIpAddress = parameters[0].Split(':')[0];
                        proxyPort = parameters[0].Split(':')[1];
                        proxy = true;
                    }
                }
                else
                {
                    PrintHelp("Proxy IP address:Port not formatted correctly. Update must be called as \"ERC --update <proxyIP:port>\"");
                }
            }

            try
            {
                //Get plugins directory for X64dbg.
                string updatePath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

                var wClient = new WebClient();
                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

                string releases = "";
                string[] releasesArray = null;
                string fileurl = "";
                string[] urlSegments = null;
                string filename = "";
                string zipPath = "";
                string[] files = null;
                bool oldPluginRenamed = false;

                if (Environment.Is64BitOperatingSystem) { 
                    wClient.Headers.Add("Accept", "text/html, application/xhtml+xml,application/xml;q=0.9,image/ webp,*/*;q=0.8");
                    wClient.Headers.Add("User-Agent", "ERC-Plugin");

                    //Set proxy if specified.
                    if (proxy == true)
                    {
                        WebProxy wProxy = new WebProxy(proxyIpAddress + ":" + proxyPort);
                        wClient.Proxy = wProxy;
                    }

                    if (!updatePath.Contains("\\x64\\"))
                    {
                        updatePath = updatePath.Replace("\\x32\\", "\\x64\\");
                    }

                    releases = wClient.DownloadString("https://api.github.com/repos/andy53/erc.xdbg/releases/tags/64");

                    releasesArray = releases.Split(',');
                    fileurl = "";
                    foreach (string s in releasesArray)
                    {
                        if (s.Contains("browser_download_url"))
                        {
                            fileurl = s.Split('\"')[3];
                        }
                    }

                    urlSegments = fileurl.Split('/');
                    filename = urlSegments[urlSegments.Length - 1];
                    zipPath = updatePath + "\\" + filename;
                    wClient.DownloadFile(fileurl, zipPath);

                    // Ensures that the last character on the extraction path
                    // is the directory separator char. 
                    // Without this, a malicious zip file could try to traverse outside of the expected
                    // extraction path.
                    if (!updatePath.EndsWith(Path.DirectorySeparatorChar.ToString(), StringComparison.Ordinal))
                    {
                        updatePath += Path.DirectorySeparatorChar;
                    }

                    files = Directory.GetFiles(updatePath);
                    oldPluginRenamed = false;

                    foreach (string s in files)
                    {
                        if (s.Contains("Erc.Xdbg.dp64-OLD") && oldPluginRenamed == false)
                        {
                            int i = 0;
                            var holder = s.Split('_')[1];
                            int.TryParse(holder[0].ToString(), out i);
                            System.IO.File.Move(updatePath + "Erc.Xdbg.dp64", updatePath + "Erc.Xdbg.dp64-OLD_" + i.ToString() + ".txt");
                            oldPluginRenamed = true;
                        }
                    }

                    if (oldPluginRenamed == false)
                    {
                        if (File.Exists(updatePath + "Erc.Xdbg.dp64"))
                        {
                            System.IO.File.Move(updatePath + "Erc.Xdbg.dp64", updatePath + "Erc.Xdbg.dp64-OLD_0.txt");
                        }
                    }

                    //unzip update package 
                    using (ZipArchive archive = ZipFile.OpenRead(zipPath))
                    {
                        foreach (ZipArchiveEntry entry in archive.Entries)
                        {
                            string destinationPath = Path.GetFullPath(Path.Combine(updatePath, entry.FullName));
                            entry.ExtractToFile(destinationPath, true);
                        }
                    }

                    //Delete the zip archive.
                    File.Delete(zipPath);
                }

                wClient.Headers.Add("Accept", "text/html, application/xhtml+xml,application/xml;q=0.9,image/ webp,*/*;q=0.8");
                wClient.Headers.Add("User-Agent", "ERC-Plugin");

                updatePath = updatePath.Replace("\\x64\\", "\\x32\\");
                releases = wClient.DownloadString("https://api.github.com/repos/andy53/erc.xdbg/releases/tags/32");

                releasesArray = releases.Split(',');
                fileurl = "";
                foreach (string s in releasesArray)
                {
                    if (s.Contains("browser_download_url"))
                    {
                        fileurl = s.Split('\"')[3];
                    }
                }

                urlSegments = fileurl.Split('/');
                filename = urlSegments[urlSegments.Length - 1];
                zipPath = updatePath + "\\" + filename;
                wClient.DownloadFile(fileurl, zipPath);

                // Ensures that the last character on the extraction path
                // is the directory separator char. 
                // Without this, a malicious zip file could try to traverse outside of the expected
                // extraction path.
                if (!updatePath.EndsWith(Path.DirectorySeparatorChar.ToString(), StringComparison.Ordinal))
                {
                    updatePath += Path.DirectorySeparatorChar;
                }

                files = Directory.GetFiles(updatePath);
                oldPluginRenamed = false;

                foreach (string s in files)
                {
                    if (s.Contains("Erc.Xdbg.dp32-OLD") && oldPluginRenamed == false)
                    {
                        int i = 0;
                        var holder = s.Split('_')[1];
                        int.TryParse(holder[0].ToString(), out i);
                        System.IO.File.Move(updatePath + "Erc.Xdbg.dp32", updatePath + "Erc.Xdbg.dp32-OLD_" + i.ToString() + ".txt");
                        oldPluginRenamed = true;
                    }
                }

                if (oldPluginRenamed == false)
                {
                    if (File.Exists(updatePath + "Erc.Xdbg.dp32"))
                    {
                        System.IO.File.Move(updatePath + "Erc.Xdbg.dp32", updatePath + "Erc.Xdbg.dp32-OLD_0.txt");
                    }
                }

                //unzip update package 
                using (ZipArchive archive = ZipFile.OpenRead(zipPath))
                {
                    foreach (ZipArchiveEntry entry in archive.Entries)
                    {
                        string destinationPath = Path.GetFullPath(Path.Combine(updatePath, entry.FullName));
                        entry.ExtractToFile(destinationPath, true);
                    }
                }

                //Delete the zip archive.
                File.Delete(zipPath);

                PLog.WriteLine("\nUpdate was downloaded successfully.");
                PLog.WriteLine("In order to use the updated binary you will need to restart X64dbg.");
                PLog.WriteLine("----------------------------------------------------------------------");
            }
            catch (Exception e)
            {
                PrintHelp(e.Message + "\n" + e.InnerException);
            }
        }

        private static void Config(List<string> parameters, ERC.ErcCore core)
        {
            PLog.WriteLine("ERC --Config");
            PLog.WriteLine("--------------------------------------------");
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if(parameters.Count == 0)
            {
                PLog.WriteLine("Configuration Settings:");
                PLog.WriteLine("Working Directory = {0}", core.WorkingDirectory);
                PLog.WriteLine("ERC Version = {0}", core.ErcVersion);
                PLog.WriteLine("Author = {0}", core.Author);
                PLog.WriteLine("Error Log File = {0}", core.SystemErrorLogPath);
                PLog.WriteLine("Standard Pattern Location = {0}", core.PatternStandardPath);
                PLog.WriteLine("Standard Pattern Location = {0}", core.PatternExtendedPath);
                //return null;
                PLog.WriteLine("--------------------------------------------");
                return;
            }
            
            switch (parameters[0].ToLower())
            {
                case "getworkingdirectory":
                    PLog.WriteLine("Working Directory = {0}", core.WorkingDirectory);
                    //return core.WorkingDirectory;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "getversion":
                    PLog.WriteLine("ERC Version = {0}", core.ErcVersion);
                    //return core.ErcVersion;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "getauthor":
                    PLog.WriteLine("Author = {0}", core.Author);
                    //return core.Author;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "geterrorlogpath":
                    PLog.WriteLine("Error Log File = {0}", core.SystemErrorLogPath);
                    //return core.SystemErrorLogPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "getstandardpattern":
                    PLog.WriteLine("Standard Pattern Location = {0}", core.PatternStandardPath);
                    //return core.PatternStandardPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "getextendedpattern":
                    PLog.WriteLine("Standard Pattern Location = {0}", core.PatternExtendedPath);
                    //return core.PatternExtendedPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "setworkingdirectory":
                    if(parameters.Count == 2)
                    {
                        if (Directory.Exists(parameters[1]))
                        {
                            core.SetWorkingDirectory(parameters[1]);
                            PLog.WriteLine("New Working Directory = {0}", core.WorkingDirectory);
                            PLog.WriteLine("--------------------------------------------");
                            return;
                        }
                        else
                        {
                            PrintHelp("Please provide a valid directory.");
                            PLog.WriteLine("--------------------------------------------");
                        }
                    }
                    else
                    {
                        PLog.WriteLine("Error incorrect number of arguments. Use ERC --config SetWorkingDirectory <PATH>");
                        PLog.WriteLine("--------------------------------------------");
                    }
                    //return core.WorkingDirectory;
                    return;
                case "setauthor":
                    for (int i = 0; i < parameters.Count; i++)
                    {
                        if (parameters[i].ToLower().Contains("setauthor"))
                        {
                            parameters.Remove(parameters[i]);
                        }
                    }
                    if (parameters.Count >= 1)
                    {
                        core.SetAuthor(String.Join(" ", parameters.ToArray()));
                        PLog.WriteLine("New Author = {0}", core.Author);
                    }
                    else
                    {
                        PLog.WriteLine("Error incorrect number of arguments. Use ERC --config SetAuthor <Author>");
                    }
                    //return core.Author;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "seterrorlogpath":
                    if (parameters.Count == 2)
                    {
                        if (Directory.Exists(parameters[1]))
                        {
                            PrintHelp("A directory name was provided, value provided must be a filename.");
                            return;
                        }
                        core.SetErrorFile(parameters[1]);
                        PLog.WriteLine("New Error Log File = {0}", core.SystemErrorLogPath);
                    }
                    else
                    {
                        PLog.WriteLine("Error incorrect number of arguments. Use ERC --config SetErrorLogPath <PATH>");
                    }
                    //return core.SystemErrorLogPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "setstandardpattern":
                    if (parameters.Count == 2)
                    {
                        if (!File.Exists(parameters[1]))
                        {
                            PrintHelp("The file does not exist, the value provided must be a filename.");
                            return;
                        }
                        core.SetPatternStandardPath(parameters[1]);
                        PLog.WriteLine("New standard pattern from file = {0}", core.PatternStandardPath);
                    }
                    else
                    {
                        PLog.WriteLine("Error incorrect number of arguments. Use ERC --config SetStandardPattern <PATH>");
                    }
                    //return core.PatternStandardPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                case "setextendedpattern":
                    if (parameters.Count == 2)
                    {
                        if (!File.Exists(parameters[1]))
                        {
                            PrintHelp("The file does not exist, the value provided must be a filename.");
                            return;
                        }
                        core.SetPatternExtendedPath(parameters[1]);
                        PLog.WriteLine("New extended pattern from file = {0}", core.PatternExtendedPath);
                    }
                    else
                    {
                        PLog.WriteLine("Error incorrect number of arguments. Use ERC --config SetExtendedPattern <PATH>");
                    }
                    //return core.PatternExtendedPath;
                    PLog.WriteLine("--------------------------------------------");
                    return;
                default:
                    PLog.WriteLine("Configuration Settings:");
                    PLog.WriteLine("Working Directory = {0}", core.WorkingDirectory);
                    PLog.WriteLine("ERC Version = {0}", core.ErcVersion);
                    PLog.WriteLine("Author = {0}", core.Author);
                    PLog.WriteLine("Error Log File = {0}", core.SystemErrorLogPath);
                    PLog.WriteLine("Standard Pattern Location = {0}", core.PatternStandardPath);
                    PLog.WriteLine("Standard Pattern Location = {0}", core.PatternExtendedPath);
                    //return null;
                    PLog.WriteLine("--------------------------------------------");
                    return;
            }
        }

        private static void Pattern(ERC.ErcCore core, List<string> parameters)
        {
            PLog.WriteLine("ERC --Pattern");
            PLog.WriteLine("----------------------------------------------------------------------");
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            int patternLength = 0;
            string search = "";
            bool extended = Globals.extended;
            bool offset = false;
            bool create = false;

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].ToLower() == "create" || parameters[i].ToLower() == "c")
                {
                    create = true;
                }
                else if(parameters[i].ToLower() == "offset" || parameters[i].ToLower() == "o")
                {
                    offset = true;
                }
            }

            if(create == true && offset == true)
            {
                PrintHelp("A pattern create and pattern offset operation can not be executed at the same time. Please choose one or the other.");
                return;
            }

            if (create == false && offset == false)
            {
                PrintHelp("A create or offset operation must be specified as part of the pattern command. ERC --pattern <create(c) or offset(o)> <parameters>");
                return;
            }

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i] == "create" || parameters[i] == "offset" 
                    || parameters[i] == "c" || parameters[i] == "o")
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if(parameters.Count > 2)
            {
                PrintHelp("Too many parameters provided.");
                return;
            }

            if (create == true)
            {
                for (int i = 0; i < parameters.Count; i++)
                {
                    if (parameters[i] == "true")
                    {
                        extended = true;
                        if (parameters.Count == 1)
                        {
                            PrintHelp("A valid integer must be provided for the pattern length.");
                            return;
                        }
                    }
                    else
                    {
                        if (int.TryParse(parameters[i], out patternLength))
                        {
                            if (patternLength > 20277 && patternLength < 66923)
                            {
                                extended = true;
                            }
                            else if (patternLength > 66923)
                            {
                                PrintHelp("Maximum length of the pattern is 66923.");
                                return;
                            }
                        }  
                        else
                        {
                            PrintHelp("A valid integer must be provided for the pattern length.");
                            return;
                        }
                    }
                }
                var result = ERC.DisplayOutput.GeneratePattern(patternLength, core, extended);
                PLog.Write(result + "\n");
            }
            else if(offset == true)
            {
                for(int i = 0; i < parameters.Count; i++)
                {
                    if(parameters[i] == "true")
                    {
                        extended = true;
                        if (parameters.Count == 1)
                        {
                            PrintHelp("A search string must be provided.");
                            return;
                        }
                    }
                    else
                    {
                        search = parameters[i];
                    }
                }
                string extendedCharSet = ": ,.;+= -_! & ()#@'*^[]%$?";
                foreach (char c in search)
                {
                    if (extendedCharSet.Contains(c))
                    {
                        extended = true;
                    }
                }
                var result = ERC.Utilities.PatternTools.PatternOffset(search, core, extended);
                PLog.WriteLine(result.ReturnValue);
            }
            PLog.WriteLine("----------------------------------------------------------------------");
            return;
        }

        private static void ByteArray(List<string> parameters, ERC.ErcCore core)
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            byte[] byteArray = ERC.DisplayOutput.GenerateByteArray(core, Globals.bytes);

            if(Globals.bytes.Length > 0)
            {
                PLog.WriteLine("Byte Array excluding: " + BitConverter.ToString(Globals.bytes).Replace('-', ' '));
            }
            else
            {
                PLog.WriteLine("Byte Array: ");
            }

            PLog.WriteLine("--------------------------------");
            PLog.Write("|");
            string[] hexBytes = BitConverter.ToString(byteArray).Replace('-', ' ').Split(' ');
            int lineLength = 0;
            for(int i = 0; i < hexBytes.Length; i++)
            {
                if(i % 10 == 0 && i > 1)
                {
                    PLog.Write(" |\n| " + hexBytes[i]);
                    lineLength = 3;
                }
                else
                {
                    PLog.Write(" " + hexBytes[i]);
                    lineLength += 3;
                }
            }

            for(int i = lineLength; i < 32; i++)
            {
                if(i != 31)
                {
                    PLog.Write(" ");
                }
                else
                {
                    PLog.Write("|\n");
                }
            }
            PLog.WriteLine("--------------------------------");
            //return hexBytes;
            return;
        }

        private static void Compare(ERC.ProcessInfo info, List<string> parameters)
        {
            string allowedChars = "abcdefABCDEF1234567890";
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count != 2)
            {
                PrintHelp("Incorrect parameters provided. Compare must be run as \"ERC --compare <start address> <file containing bytes>");
                return;
            }

            if(parameters[0].StartsWith("0x") || parameters[0].StartsWith("x") 
                || parameters[0].StartsWith("\\x") || parameters[0].StartsWith("X"))
            {
                parameters[0] = parameters[0].Replace("0x", "");
                parameters[0] = parameters[0].Replace("\\x", "");
                parameters[0] = parameters[0].Replace("X", "");
                parameters[0] = parameters[0].Replace("x", "");
            }

            if (parameters[1].StartsWith("0x") || parameters[1].StartsWith("x")
                || parameters[1].StartsWith("\\x") || parameters[1].StartsWith("X"))
            {
                parameters[1] = parameters[1].Replace("0x", "");
                parameters[1] = parameters[1].Replace("\\x", "");
                parameters[1] = parameters[1].Replace("X", "");
                parameters[1] = parameters[1].Replace("x", "");
            }

            bool validAddress = true;
            string path = "";
            IntPtr address = IntPtr.Zero;
            double addrHolder = 0;
            string memAddress = "";

            if (File.Exists(parameters[0]))
            {
                path = parameters[0];
                if (parameters[1].Length <= 16)
                {
                    foreach (char c in parameters[1])
                    {
                        if (!allowedChars.Contains(c))
                        {
                            validAddress = false;
                        }
                    }
                    if(parameters[1].Length < 16)
                    { 
                        for(int i = parameters[1].Length; i < 16; i++)
                        {
                            memAddress += 0;
                        }
                        parameters[1] = memAddress + parameters[1];
                    }
                    addrHolder = (double)System.Convert.ToInt64(parameters[1], 16);
                    address = (IntPtr)addrHolder;
                }
                else
                {
                    validAddress = false;
                }
            }
            else if(File.Exists(parameters[1]))
            {
                path = parameters[1];
                if (parameters[0].Length <= 16)
                {
                    foreach (char c in parameters[0])
                    {
                        if (!allowedChars.Contains(c))
                        {
                            validAddress = false;
                        }
                    }
                    if (parameters[0].Length < 16)
                    {
                        for (int i = parameters[0].Length; i < 16; i++)
                        {
                            memAddress += 0;
                        }
                        parameters[0] = memAddress + parameters[0];
                    }
                    addrHolder = (double)System.Convert.ToInt64(parameters[0], 16);
                    address = (IntPtr)addrHolder;
                }
                else
                {
                    validAddress = false;
                }
            }
            else
            {
                PrintHelp("Must provide a valid file path for byte array. Compare must be run as \"ERC --compare <start address> <file containing bytes>");
                return;
            }

            if(validAddress == false)
            {
                PrintHelp("Start address may only contain hex characters and must be less than 16 characters. Compare must be run as \"ERC --compare <start address> <file containing bytes>");
                return;
            }

            byte[] bytes = File.ReadAllBytes(path);
            string[] output = ERC.DisplayOutput.CompareByteArrayToMemoryRegion(info, address, bytes);

            PLog.WriteLine("Comparing memory region starting at 0x{0} to bytes in file {1}", 
                address.ToString("X"), path);
            PLog.WriteHtml(String.Join("<br>", output));
            /* Sleep upon completion so ERC register/unregister messages don't collide with above */
            Thread.Sleep(200);
            return;
        }

        private static void Convert(ERC.ProcessInfo info, List<string> parameters)
        {
            PLog.WriteLine("ERC --Convert");
            PLog.WriteLine("----------------------------------------------------------------------");
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            string output = "";

            switch (parameters[0].ToLower())
            {
                case "atoh":
                    parameters.Remove(parameters[0]);
                    output = "The string " + String.Join(" ", parameters) + " encoded as ASCII has the following byte sequence:\n";
                    output += "0x" + ERC.Utilities.Convert.AsciiToHex(String.Join(" ", parameters)).Replace(" ", " 0x");
                    PLog.WriteLine(output);
                    break;
                case "utoh":
                    parameters.Remove(parameters[0]);
                    output = "The string " + String.Join(" ", parameters) + " encoded as Unicode has the following byte sequence:\n";
                    output += "0x" + ERC.Utilities.Convert.UnicodeToHex(String.Join(" ", parameters)).Replace(" ", " 0x");
                    PLog.WriteLine(output);
                    break;
                case "7toh":
                    parameters.Remove(parameters[0]);
                    output = "The string " + String.Join(" ", parameters) + " encoded as UTF-7 has the following byte sequence:\n";
                    output += "0x" + ERC.Utilities.Convert.UTF7ToHex(String.Join(" ", parameters)).Replace(" ", " 0x");
                    PLog.WriteLine(output);
                    break;
                case "8toh":
                    parameters.Remove(parameters[0]);
                    output = "The string " + String.Join(" ", parameters) + " encoded as UTF-8 has the following byte sequence:\n";
                    output += "0x" + ERC.Utilities.Convert.UTF8ToHex(String.Join(" ", parameters)).Replace(" ", " 0x");
                    PLog.WriteLine(output);
                    break;
                case "32toh":
                    parameters.Remove(parameters[0]);
                    output = "The string " + String.Join(" ", parameters) + " encoded as UTF-32 has the following byte sequence:\n";
                    output += "0x" + ERC.Utilities.Convert.UTF32ToHex(String.Join(" ", parameters)).Replace(" ", " 0x");
                    PLog.WriteLine(output);
                    break;
                default:
                    PLog.WriteLine("Incorrect parameters provided. Convert must be run as \"ERC --convert <conversion type> <input>");
                    PLog.WriteLine("Valid conversion types:\n    Ascii to Hex = AtoH\n    Unicdoe to Hex = UtoH\n    UTF-7 to Hex = 7toH\n" +
                        "    UTF-8 to Hex = 8toH\n    UTF-32 to Hex = 32toH\n");
                    PLog.WriteLine("----------------------------------------------------------------------");
                    return;
            }
            PLog.WriteLine("----------------------------------------------------------------------");
        }

        private static void Assemble(ERC.ProcessInfo info, List<string> parameters)
        {
            PLog.WriteLine("ERC --Assemble");
            PLog.WriteLine("----------------------------------------------------------------------");
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count == 0)
            {
                PLog.WriteLine("No parameters provided. Assemble must be run: ERC --Assemble [1:0] <mnemonics>");
                //return null;
                return;
            }

            int n = -1;
            List<int> elementsToRemove = new List<int>();
            for (int i = 0; i < parameters.Count; i++)
            {
                if (i <= parameters.Count)
                {
                    if (Regex.IsMatch(parameters[i], @"^\d+$"))
                    {
                        if(parameters[i] == "0")
                        {
                            elementsToRemove.Add(i);
                            n = 0;
                        }
                        else if(parameters[i] == "1")
                        {
                            elementsToRemove.Add(i);
                            n = 1;
                        }
                    }
                }               
            }

            foreach(int i in elementsToRemove)
            {
                parameters.Remove(parameters[i]);
            }

            if(n == -1)
            {
                if(info.ProcessMachineType == ERC.MachineType.I386)
                {
                    n = 0;
                }
                else
                {
                    n = 1;
                }
            }

            try
            {
                List<string> instructions = string.Join(" ", parameters).Split(',').ToList();
                foreach (string s in instructions)
                {
                    List<string> instruction = new List<string>();
                    instruction.Add(s.Trim());
                    var asmResult = ERC.Utilities.OpcodeAssembler.AssembleOpcodes(instruction, info.ProcessMachineType);
                    PLog.WriteLine(instruction[0] + " = " + BitConverter.ToString(asmResult.ReturnValue).Replace("-", " "));
                }
                PLog.WriteLine("Assembly completed at {0} by {1}", DateTime.Now, info.Author);
            }
            catch (Exception e)
            {
                PLog.WriteLine("An error occured calling the assemble method. Error: {0}\nThe command should be structured ERC --assemble [1|0] <mnemonics>.", e.Message);
            }
            //return new List<string>(assembled);
            PLog.WriteLine("----------------------------------------------------------------------");
            return;
        }

        private static void Disassemble(ERC.ProcessInfo info, List<string> parameters)
        {
            PLog.WriteLine("ERC --Disassemble");
            PLog.WriteLine("----------------------------------------------------------------------");
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count <= 0)
            {
                PLog.WriteLine("No parameters provided. Disassemble must be run: ERC --Disassemble [1|0] <opcodes>");
                //return null;
                return;
            }

            int n = -1;
            List<int> elementsToRemove = new List<int>();
            for (int i = 0; i < parameters.Count; i++)
            {
                if (i <= parameters.Count)
                {
                    if (Regex.IsMatch(parameters[i], @"^\d+$"))
                    {
                        if (parameters[i] == "0")
                        {
                            elementsToRemove.Add(i);
                            n = 0;
                        }
                        else if (parameters[i] == "1")
                        {
                            elementsToRemove.Add(i);
                            n = 1;
                        }
                    }
                }
            }

            foreach (int i in elementsToRemove)
            {
                parameters.Remove(parameters[i]);
            }

            if (n == -1)
            {
                if (info.ProcessMachineType == ERC.MachineType.I386)
                {
                    n = 0;
                }
                else
                {
                    n = 1;
                }
            }

            string opcodeChars = string.Join("", parameters.ToArray());
            string allowedChars = "abcdefABCDEF1234567890";
            opcodeChars = opcodeChars.Replace("\\x", "");
            opcodeChars = opcodeChars.Replace("0x", "");
            opcodeChars = opcodeChars.Replace(" ", "");
            string hexChars = "";
            for(int i = 0; i < opcodeChars.Length; i++)
            {
                if (allowedChars.Contains(opcodeChars[i].ToString()))
                {
                    hexChars = hexChars + opcodeChars[i];
                }
            }
            if(hexChars.Length % 2 != 0)
            {
                hexChars += "0";
            }

            List<string> opcodes = new List<string>();

            var bytes = StringToByteArray(hexChars);

            foreach(string s in opcodes)
            {
                PLog.WriteLine(s);
            }

            var disassembled = ERC.DisplayOutput.DisassembleOpcodes(bytes, (uint)n);
            PLog.WriteLine("ERC Disassebled Instructions:");
            foreach (string s in disassembled)
            {
                PLog.WriteLine(s);
            }
            PLog.WriteLine("Disassembly completed at {0} by {1}", DateTime.Now, info.Author);
            //return new List<string>(disassembled);
            PLog.WriteLine("----------------------------------------------------------------------");
            return;
        }
        
        private static void SearchMemory(ERC.ProcessInfo info, List<string> parameters)
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            int searchType = 0;
            string searchString = "";

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i] == "0" || parameters[i] == "1" || parameters[i] == "2" ||
                    parameters[i] == "3" || parameters[i] == "4" || parameters[i] == "5")
                {
                    searchType = Int32.Parse(parameters[i]);
                    parameters.Remove(parameters[i]);
                    i--;
                }
            }

            searchString = string.Join("", parameters);

            var output = ERC.DisplayOutput.SearchMemory(info, searchType, searchString, Globals.aslr, Globals.safeseh, Globals.rebase, Globals.nxcompat,
                Globals.osdll, Globals.bytes, Globals.protection);
            foreach(string s in output)
            {
                PLog.WriteLine(s);
            }
        }

        private static void SearchModules(ERC.ProcessInfo info, List<string> parameters)
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            int searchType = 0;
            string searchString = "";

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i] == "0" || parameters[i] == "1" || parameters[i] == "2" ||
                    parameters[i] == "3" || parameters[i] == "4" || parameters[i] == "5")
                {
                    searchType = Int32.Parse(parameters[i]);
                    parameters.Remove(parameters[i]);
                    i--;
                }
            }

            List<string> includedModules = new List<string>();

            foreach(string s in parameters)
            {
                bool hex = true;
                foreach(char c in s)
                {
                    if(!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
                    {
                        hex = false;
                    }
                }
                if(hex == false)
                {
                    includedModules.Add(s);
                    parameters.Remove(s);
                }
            }

            if (includedModules.Count <= 0)
            {
                includedModules = null;
            }

            searchString = string.Join("", parameters);
            var output = ERC.DisplayOutput.SearchModules(info, searchType, searchString, Globals.aslr, Globals.safeseh, Globals.rebase, Globals.nxcompat,
                Globals.osdll, Globals.bytes, includedModules, Globals.protection);
            foreach (string s in output)
            {
                PLog.WriteLine(s);
            }
        }

        private static void DumpMemory(ERC.ProcessInfo info, List<string> parameters)
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if(parameters.Count != 2)
            {
                PrintHelp("Incorrect parameters passed to DumpMemory. 2 values must be passed, first being start address, second being length.");
            }

            long[] values = new long[2];

            for(int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].StartsWith("0x") || parameters[i].StartsWith("x")
                || parameters[i].StartsWith("\\x") || parameters[i].StartsWith("X"))
                {
                    parameters[i] = parameters[i].Replace("0x", "");
                    parameters[i] = parameters[i].Replace("\\x", "");
                    parameters[i] = parameters[i].Replace("X", "");
                    parameters[i] = parameters[i].Replace("x", "");
                }
                values[i] = System.Convert.ToInt64(parameters[i], 16);
            }

            PLog.WriteLine(ERC.DisplayOutput.DumpMemory(info, (IntPtr)values[0], (int)values[1]));
        }

        private static void SEH(List<string> parameters, ERC.ProcessInfo info) 
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if(info.ProcessMachineType == ERC.MachineType.x64)
            {
                PLog.WriteLine("WARNING: This function will find pop pop ret instructions however please be aware that SEH overflows will not work on the 64bit architecture.");
            }

            List<string> sehJumpAddresses = new List<string>();

            bool aslr = Globals.aslr, safeseh = Globals.safeseh, rebase = Globals.rebase, nxcompat = Globals.nxcompat, osdll = Globals.osdll;

            if(Globals.bytes.Length > 0)
            {
                if(Globals.encode == Encoding.Unicode)
                {
                    sehJumpAddresses = ERC.DisplayOutput.GetSEHJumpsUnicode(info, aslr, safeseh, rebase, nxcompat, osdll, Globals.bytes, Globals.protection).ToList();
                }
                else
                {
                    sehJumpAddresses = ERC.DisplayOutput.GetSEHJumps(info, aslr, safeseh, rebase, nxcompat, osdll, Globals.bytes, Globals.protection).ToList();
                }
            }
            else
            {
                if (Globals.encode == Encoding.Unicode)
                {
                    sehJumpAddresses = ERC.DisplayOutput.GetSEHJumpsUnicode(info, aslr, safeseh, rebase, nxcompat, osdll, null, Globals.protection).ToList();
                }
                else
                {
                    sehJumpAddresses = ERC.DisplayOutput.GetSEHJumps(info, aslr, safeseh, rebase, nxcompat, osdll, null, Globals.protection).ToList();
                } 
            }

            foreach(string s in sehJumpAddresses)
            {
                PLog.WriteLine(s);
            }
            
            //return sehJumpAddresses;
            return;
        }

        private static void EggHunters(ERC.ErcCore core = null, string tag = null)
        {
            string holder = ERC.DisplayOutput.GenerateEggHunters(core, tag);
            Plugins._plugin_logputs(holder);
        }

        private static void FindNRP(ERC.ProcessInfo info, List<string> parameters)
        {
            if((int)Globals.encode < 0 || (int)Globals.encode > 5)
            {
                Globals.encode = Encoding.ASCII;
            }

            List<string> nrpInfo = new List<string>();
            nrpInfo = ERC.DisplayOutput.GenerateFindNRPTable(info, (int)Globals.encode, Globals.extended).ToList();

            foreach (string s in nrpInfo)
            {
                PLog.WriteLine(s);
            }
            //return nrpInfo;
            return;
        }

        private static void HeapInfo(ERC.ProcessInfo info, List<string> parameters)
        {
            bool heapids = false;
            bool dumpheap = false;
            bool heapstats = false;
            bool searchheap = false;

            string hexStartAddress = "";
            ulong heapID = 0;
            bool writeToFile = true;
            byte[] bytes = null;

            ERC.HeapInfo hi = new ERC.HeapInfo(info);

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count == 0)
            {
                heapstats = true;
            }

            for (int i = 0; i < parameters.Count && i >= 0; i++)
            {
                if (parameters[i].ToLower() == "ids")
                {
                    heapids = true;
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if (parameters[i].ToLower() == "stats")
                {
                    heapstats = true;
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if (parameters[i].ToLower() == "dump")
                {
                    dumpheap = true;
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if (parameters[i].ToLower() == "search")
                {
                    searchheap = true;
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if (parameters[i].ToLower() == "true" || parameters[i].ToLower() == "false")
                {
                    writeToFile = parameters[i].ToLower() == "true";
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if (parameters[i].ToLower() == "1" || parameters[i].ToLower() == "0")
                {
                    writeToFile = parameters[i].ToLower() == "1";
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if(ulong.TryParse(parameters[i].ToLower(), out heapID))
                {
                    parameters.Remove(parameters[i]);
                    i--;
                }
                else if(Regex.IsMatch(parameters[i], @"\A\b[0-9a-fA-F]+\b\Z"))
                {
                    string searchString = string.Join("", parameters);
                    if (hexStartAddress == "")
                    {
                        hexStartAddress = parameters[i];
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                    else
                    {
                        bytes = ERC.Utilities.Convert.HexToBytes(searchString);
                    }
                }
                else
                {
                    string searchString = string.Join("", parameters);
                    bytes = StringToByteArray(searchString);
                }
            }

            if (searchheap == true)
            {
                if(hexStartAddress != "" && bytes == null)
                {
                    bytes = ERC.Utilities.Convert.HexToBytes(hexStartAddress);
                    hexStartAddress = "";
                }

                var result = ERC.DisplayOutput.SearchHeap(hi, bytes, heapID, hexStartAddress, writeToFile);
                foreach (string s in result)
                {
                    PLog.Write(s);
                }
                PLog.Write(Environment.NewLine);
            }

            if (heapids == true)
            {
                foreach(string s in ERC.DisplayOutput.ListHeapIDs(hi))
                {
                    PLog.Write(s);
                }
                PLog.Write(Environment.NewLine);
            }

            if (heapstats == true)
            {
                var result = ERC.DisplayOutput.HeapStats(hi);
                foreach (string s in result)
                {
                    PLog.Write(s);
                }
                PLog.Write(Environment.NewLine);
            }

            if(dumpheap == true)
            {
                var result = ERC.DisplayOutput.DumpHeap(hi, heapID, hexStartAddress, writeToFile);
                foreach (string s in result)
                {
                    PLog.Write(s);
                }
                PLog.Write(Environment.NewLine);
            }
        }

        private static void rop(ERC.ProcessInfo info, bool gadgetsOnly = false)
        {
            PLog.WriteLine("Starting to build ROP Chains.");
            ERC.Utilities.RopChainGenerator32 RCG = new ERC.Utilities.RopChainGenerator32(info);
            //ERC.Utilities.RopChainGenerator64 RCG = new ERC.Utilities.RopChainGenerator64(info);
            List<string> excludes = new List<string>();
            foreach(ERC.ModuleInfo mi in info.ModulesInfo)
            {
                if(!mi.ModuleASLR == Globals.aslr || !mi.ModuleNXCompat == Globals.nxcompat || !mi.ModuleOsDll == Globals.osdll || !mi.ModuleSafeSEH == Globals.safeseh
                    || !mi.ModuleRebase == Globals.rebase)
                {
                    excludes.Add(mi.ModulePath);
                }
            }

            try
            {
                if(gadgetsOnly == true)
                {
                    PLog.WriteLine("Generating ROP chain files...");
                    if (Globals.bytes.Length > 0 || excludes.Count > 0)
                    {
                        RCG.GenerateRopGadgets32(Globals.bytes, excludes);           //Uncomment if 32 bit
                        //RCG.GenerateRopGadgets64(Globals.bytes, excludes);           //Uncomment if 64 bit
                    }
                    else
                    {
                        RCG.GenerateRopGadgets32();           //Uncomment if 32 bit
                        //RCG.GenerateRopGadgets64();           //Uncomment if 64 bit
                    }
                    PLog.WriteLine("ROP chain generation completed. Files can be found in {0}", info.WorkingDirectory);
                }
                else
                {
                    PLog.WriteLine("Generating ROP chain files...");
                    if(Globals.bytes.Length > 0 || excludes.Count > 0)
                    {
                        var ropHolder = RCG.GenerateRopChain32(Globals.bytes, excludes); //Uncomment if 32 bit
                        //var ropHolder = RCG.GenerateRopChain64(Globals.bytes, excludes);             //Uncomment if 64 bit
                        PLog.WriteLine(ropHolder.ReturnValue);

                    }
                    else
                    {
                        var ropHolder = RCG.GenerateRopChain32();             //Uncomment if 32 bit
                        //var ropHolder = RCG.GenerateRopChain64();              //Uncomment if 64 bit
                        PLog.WriteLine(ropHolder.ReturnValue);
                    }
                    PLog.WriteLine("ROP chain generation completed. Files can be found in {0}", info.WorkingDirectory);
                }
            }
            catch(Exception e)
            {
                PrintHelp(e.Message);
            }
            finally
            {
                RCG = null;
                GC.Collect();
            }
            
            return;
        }

        private static byte[] StringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length)
                             .Where(x => x % 2 == 0)
                             .Select(x => System.Convert.ToByte(hex.Substring(x, 2), 16))
                             .ToArray();
        }

        private static string ByteArrayToString(byte[] ba)
        {
            return BitConverter.ToString(ba).Replace("-", "");
        }

        private static void DeleteOldPlugins()
        {
            //Get list of files in the plugins directory. Delete old versions of the plugin.
            try
            {
                string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                if (path.Contains("\\x32\\"))
                {
                    path = path.Replace("\\x32\\", "\\x64\\");
                }
                string[] files = Directory.GetFiles(path);
                foreach (string s in files)
                {
                    if (s.Contains("Erc.Xdbg.dp64-OLD") || s.Contains("Erc.Xdbg.dp32-OLD") || s.Contains(".zip"))
                    {
                        File.Delete(s);
                    }
                }
                path = path.Replace("\\x64\\", "\\x32\\");
                files = Directory.GetFiles(path);
                foreach (string s in files)
                {
                    if (s.Contains("Erc.Xdbg.dp64-OLD") || s.Contains("Erc.Xdbg.dp32-OLD") || s.Contains(".zip"))
                    {
                        File.Delete(s);
                    }
                }
            }
            catch (Exception e)
            {
                PLog.WriteLine("ERROR: " + e.Message);
            }
        }

        private static void Debug(ERC.ProcessInfo info, List<string> parameters)
        {
            List<string> arg = new List<string>();
            arg.Add("ERC");
            PLog.WriteLine("\n");

            bool showGlobals = false;
            bool showArgs = false;
            bool showProcess = false;
            bool showSystem = false;
            bool showConfig = false;

            foreach (string s in parameters)
            {
                arg.Add(s);
            }

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count == 0)
            {
                showGlobals = true;
                showArgs = true;
                showProcess = true;
                showSystem = true;
                showConfig = true;
            }

            for (int i = 0; i < parameters.Count && i >= 0; i++)
            {
                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showSystem")
                    {
                        showSystem = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }

                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showglobals")
                    {
                        showGlobals = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }

                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showargs")
                    {
                        showArgs = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }

                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showprocess")
                    {
                        showProcess = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }
            }

            if(showSystem == true)
            {
                ManagementObjectSearcher mos = new ManagementObjectSearcher("select * from Win32_OperatingSystem");

                PLog.WriteLine("DEBUG: System Information");
                PLog.WriteLine("--------------------------------------------");
                foreach (ManagementObject managementObject in mos.Get())
                {
                    if (managementObject["Caption"] != null)
                    {
                        PLog.WriteLine("Operating System Name  :  " + managementObject["Caption"].ToString());
                    }
                    if (managementObject["OSArchitecture"] != null)
                    {
                        PLog.WriteLine("Operating System Architecture  :  " + managementObject["OSArchitecture"].ToString());
                    }
                    if (managementObject["CSDVersion"] != null)
                    {
                        PLog.WriteLine("Operating System Service Pack   :  " + managementObject["CSDVersion"].ToString());
                    }
                }
                PLog.WriteLine("");
            }

            if (showArgs == false && showGlobals == false)
            {
                showArgs = true;
                PLog.WriteLine("\n");
            }

            if (showProcess == true)
            {
                PLog.WriteLine("DEBUG: Process ");
                PLog.WriteLine("--------------------------------------------");
                PLog.WriteLine("Process Name         = {0}", info.ProcessName);
                PLog.WriteLine("Process Description  = {0}", info.ProcessDescription);
                PLog.WriteLine("Process Path         = {0}", info.ProcessPath);
                PLog.WriteLine("Process ID           = {0}", info.ProcessID);
                PLog.WriteLine("Process Handle       = {0}", info.ProcessHandle.ToString("X"));
                PLog.WriteLine("Process Architecture = {0}\n", info.ProcessMachineType.ToString());
            }

            if (showGlobals == true)
            {
                PLog.WriteLine("DEBUG: Globals ");
                PLog.WriteLine("--------------------------------------------");
                PLog.WriteLine("ASLR       = {0}", Globals.aslr.ToString());
                PLog.WriteLine("SafeSEH    = {0}", Globals.safeseh.ToString());
                PLog.WriteLine("Rebase     = {0}", Globals.rebase.ToString());
                PLog.WriteLine("NXCompat   = {0}", Globals.nxcompat.ToString());
                PLog.WriteLine("OSDll      = {0}", Globals.osdll.ToString());
                PLog.WriteLine("Bytes      = {0}", ByteArrayToString(Globals.bytes));
                PLog.WriteLine("Protection = {0}", Globals.protection);
                PLog.WriteLine("Extended   = {0}", Globals.extended.ToString());
                PLog.WriteLine("Encoding   = {0}\n", Globals.encode.ToString());
            }

            if (showArgs == true)
            {
                PLog.WriteLine("DEBUG: Args ");
                PLog.WriteLine("--------------------------------------------");
                PLog.WriteLine("Args = {0}\n", string.Join(" ", arg.ToArray()));
            }

            if(showConfig == true)
            {
                List<string> nullParams = new List<string>();
                Config(nullParams, info);
            }
        }

        private static void Debug(List<string> parameters)
        {
            List<string> arg = new List<string>();
            arg.Add("ERC");
            PLog.WriteLine("\n");

            bool showGlobals = false;
            bool showArgs = false;
            bool showSystem = false;

            foreach (string s in parameters)
            {
                arg.Add(s);
            }

            for (int i = 0; i < parameters.Count; i++)
            {
                if (parameters[i].Contains("--"))
                {
                    parameters.Remove(parameters[i]);
                }
            }

            if (parameters.Count == 0)
            {
                showGlobals = true;
                showArgs = true;
                showSystem = true;
            }

            for (int i = 0; i < parameters.Count && i >= 0; i++)
            {
                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showSystem")
                    {
                        showSystem = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }

                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showglobals")
                    {
                        showGlobals = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }

                if (parameters.Count > i && i >= 0)
                {
                    if (parameters[i].ToLower() == "showargs")
                    {
                        showArgs = true;
                        parameters.Remove(parameters[i]);
                        i--;
                    }
                }
            }

            if (showSystem == true)
            {
                ManagementObjectSearcher mos = new ManagementObjectSearcher("select * from Win32_OperatingSystem");

                PLog.WriteLine("DEBUG: System Information");
                PLog.WriteLine("--------------------------------------------");
                foreach (ManagementObject managementObject in mos.Get())
                {
                    if (managementObject["Caption"] != null)
                    {
                        PLog.WriteLine("Operating System Name  :  " + managementObject["Caption"].ToString());
                    }
                    if (managementObject["OSArchitecture"] != null)
                    {
                        PLog.WriteLine("Operating System Architecture  :  " + managementObject["OSArchitecture"].ToString());
                    }
                    if (managementObject["CSDVersion"] != null)
                    {
                        PLog.WriteLine("Operating System Service Pack   :  " + managementObject["CSDVersion"].ToString());
                    }
                }
                PLog.WriteLine("");
            }

            if (showArgs == false && showGlobals == false)
            {
                showArgs = true;
            }

            if (showGlobals == true)
            {
                PLog.WriteLine("DEBUG: Globals ");
                PLog.WriteLine("--------------------------------------------");
                PLog.WriteLine("ASLR       = {0}", Globals.aslr.ToString());
                PLog.WriteLine("SafeSEH    = {0}", Globals.safeseh.ToString());
                PLog.WriteLine("Rebase     = {0}", Globals.rebase.ToString());
                PLog.WriteLine("NXCompat   = {0}", Globals.nxcompat.ToString());
                PLog.WriteLine("OSDll      = {0}", Globals.osdll.ToString());
                PLog.WriteLine("Bytes      = {0}", ByteArrayToString(Globals.bytes));
                PLog.WriteLine("Protection = {0}", Globals.protection);
                PLog.WriteLine("Extended   = {0}", Globals.extended.ToString());
                PLog.WriteLine("Encoding   = {0}\n", Globals.encode.ToString());
            }

            if (showArgs == true)
            {
                PLog.WriteLine("DEBUG: Args ");
                PLog.WriteLine("--------------------------------------------");
                PLog.WriteLine("Args = {0}\n", string.Join(" ", arg.ToArray()));
            }
        }

        private static void Reset(ERC.ProcessInfo info, List<string> parameters)
        {
            Globals.aslr = false;
            Globals.safeseh = false;
            Globals.rebase = false;
            Globals.nxcompat = false;
            Globals.osdll = false;
            Globals.extended = false;
            Globals.encode = Encoding.ASCII;
            Globals.bytes = new byte[0];
            Globals.protection = "read,write";

            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);
            path = path.Replace("file:\\", "");
            File.Delete(path + "ERC_Config.xml");

            PLog.WriteLine("ERC Rests: All configuration settings have been reset to the default values.");
            PLog.WriteLine("--------------------------------------------");
        }

        private static void Reset()
        {
            Globals.aslr = false;
            Globals.safeseh = false;
            Globals.rebase = false;
            Globals.nxcompat = false;
            Globals.osdll = false;
            Globals.extended = false;
            Globals.encode = Encoding.ASCII;
            Globals.bytes = new byte[0];
            Globals.protection = "read,write";

            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);
            path = path.Replace("file:\\", "");
            File.Delete(path + "ERC_Config.xml");

            PLog.WriteLine("ERC Rests: All configuration settings have been reset to the default values.");
            PLog.WriteLine("--------------------------------------------");
        }
    }
}



================================================
File: ErcXdbg/app.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.4.0" newVersion="4.1.4.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>


================================================
File: ErcXdbg/packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Costura.Fody" version="5.7.0" targetFramework="net472" developmentDependency="true" />
  <package id="Fody" version="6.5.5" targetFramework="net472" developmentDependency="true" />
  <package id="Microsoft.NETCore.Platforms" version="7.0.0" targetFramework="net472" />
  <package id="Microsoft.Win32.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="NETStandard.Library" version="2.0.3" targetFramework="net472" />
  <package id="Reloaded.Assembler" version="1.0.14" targetFramework="net472" />
  <package id="Reloaded.Memory" version="8.0.1" targetFramework="net472" />
  <package id="Reloaded.Memory.Buffers" version="2.0.0" targetFramework="net472" />
  <package id="System.AppContext" version="4.3.0" targetFramework="net472" />
  <package id="System.Buffers" version="4.5.1" targetFramework="net472" />
  <package id="System.Collections" version="4.3.0" targetFramework="net472" />
  <package id="System.Collections.Concurrent" version="4.3.0" targetFramework="net472" />
  <package id="System.Console" version="4.3.1" targetFramework="net472" />
  <package id="System.Diagnostics.Debug" version="4.3.0" targetFramework="net472" />
  <package id="System.Diagnostics.DiagnosticSource" version="7.0.0" targetFramework="net472" />
  <package id="System.Diagnostics.Tools" version="4.3.0" targetFramework="net472" />
  <package id="System.Diagnostics.Tracing" version="4.3.0" targetFramework="net472" />
  <package id="System.Globalization" version="4.3.0" targetFramework="net472" />
  <package id="System.Globalization.Calendars" version="4.3.0" targetFramework="net472" />
  <package id="System.IO" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.Compression" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.Compression.ZipFile" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.FileSystem" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.FileSystem.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Linq" version="4.3.0" targetFramework="net472" />
  <package id="System.Linq.Expressions" version="4.3.0" targetFramework="net472" />
  <package id="System.Memory" version="4.5.5" targetFramework="net472" />
  <package id="System.Net.Http" version="4.3.4" targetFramework="net472" />
  <package id="System.Net.Primitives" version="4.3.1" targetFramework="net472" />
  <package id="System.Net.Sockets" version="4.3.0" targetFramework="net472" />
  <package id="System.Numerics.Vectors" version="4.5.0" targetFramework="net472" />
  <package id="System.ObjectModel" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection.Extensions" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Resources.ResourceManager" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime" version="4.3.1" targetFramework="net472" />
  <package id="System.Runtime.CompilerServices.Unsafe" version="6.0.0" targetFramework="net472" />
  <package id="System.Runtime.Extensions" version="4.3.1" targetFramework="net472" />
  <package id="System.Runtime.Handles" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.InteropServices" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.InteropServices.RuntimeInformation" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.Numerics" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.Algorithms" version="4.3.1" targetFramework="net472" />
  <package id="System.Security.Cryptography.Encoding" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.X509Certificates" version="4.3.2" targetFramework="net472" />
  <package id="System.Text.Encoding" version="4.3.0" targetFramework="net472" />
  <package id="System.Text.Encoding.Extensions" version="4.3.0" targetFramework="net472" />
  <package id="System.Text.RegularExpressions" version="4.3.1" targetFramework="net472" />
  <package id="System.Threading" version="4.3.0" targetFramework="net472" />
  <package id="System.Threading.Tasks" version="4.3.0" targetFramework="net472" />
  <package id="System.Threading.Timer" version="4.3.0" targetFramework="net472" />
  <package id="System.Xml.ReaderWriter" version="4.3.1" targetFramework="net472" />
  <package id="System.Xml.XDocument" version="4.3.0" targetFramework="net472" />
  <package id="UnmanagedExports" version="1.2.7" targetFramework="net40" />
</packages>


================================================
File: Managed.x64dbg/FodyWeavers.xml
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">
  <Costura />
</Weavers>


================================================
File: Managed.x64dbg/FodyWeavers.xsd
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- This file was generated by Fody. Manual changes to this file will be lost when your project is rebuilt. -->
  <xs:element name="Weavers">
    <xs:complexType>
      <xs:all>
        <xs:element name="Costura" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:all>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="ExcludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with line breaks</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="IncludeRuntimeAssemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged32Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="Unmanaged64Assemblies" type="xs:string">
                <xs:annotation>
                  <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="1" name="PreloadOrder" type="xs:string">
                <xs:annotation>
                  <xs:documentation>The order of preloaded assemblies, delimited with line breaks.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:all>
            <xs:attribute name="CreateTemporaryAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>This will copy embedded files to disk before loading them into memory. This is helpful for some scenarios that expected an assembly to be loaded from a physical file.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeDebugSymbols" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if .pdbs for reference assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeReferences" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls if runtime assemblies are also embedded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="UseRuntimeReferencePaths" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Controls whether the runtime assemblies are embedded with their full path or only with their assembly name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCompression" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Embedded assemblies are compressed by default, and uncompressed when they are loaded. You can turn compression off with this option.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DisableCleanup" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>As part of Costura, embedded assemblies are no longer included as part of the build. This cleanup can be turned off.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="LoadAtModuleInit" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura by default will load as part of the module initialization. This flag disables that behavior. Make sure you call CosturaUtility.Initialize() somewhere in your code.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IgnoreSatelliteAssemblies" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Costura will by default use assemblies with a name like 'resources.dll' as a satellite resource and prepend the output path. This flag disables that behavior.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to exclude from the default action of "embed all Copy Local references", delimited with |</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeRuntimeAssemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of runtime assembly names to include from the default action of "embed all Copy Local references", delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged32Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 32 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Unmanaged64Assemblies" type="xs:string">
              <xs:annotation>
                <xs:documentation>A list of unmanaged 64 bit assembly names to include, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="PreloadOrder" type="xs:string">
              <xs:annotation>
                <xs:documentation>The order of preloaded assemblies, delimited with |.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:all>
      <xs:attribute name="VerifyAssembly" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'true' to run assembly verification (PEVerify) on the target assembly after all weavers have been executed.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="VerifyIgnoreCodes" type="xs:string">
        <xs:annotation>
          <xs:documentation>A comma-separated list of error codes that can be safely ignored in assembly verification.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="GenerateXsd" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>'false' to turn off automatic generation of the XML Schema file.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>


================================================
File: Managed.x64dbg/Managed.x64dbg.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props" Condition="Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props')" />
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{3F05E028-6436-4F1C-ABAF-5E7CFBFCB7D7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Managed.x64dbg</RootNamespace>
    <AssemblyName>Managed.x64dbg</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\x64\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'">
    <OutputPath>bin\x64\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\x86\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <OutputPath>bin\x86\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Costura, Version=5.7.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Costura.Fody.5.7.0\lib\netstandard1.0\Costura.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Win32.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Win32.Primitives.4.3.0\lib\net46\Microsoft.Win32.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="Reloaded.Assembler, Version=1.0.14.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Assembler.1.0.14\lib\netstandard2.0\Reloaded.Assembler.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory, Version=8.0.1.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Memory.8.0.1\lib\netstandard2.0\Reloaded.Memory.dll</HintPath>
    </Reference>
    <Reference Include="Reloaded.Memory.Buffers, Version=2.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Reloaded.Memory.Buffers.2.0.0\lib\netstandard2.0\Reloaded.Memory.Buffers.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.AppContext, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.AppContext.4.3.0\lib\net463\System.AppContext.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Buffers.4.5.1\lib\net461\System.Buffers.dll</HintPath>
    </Reference>
    <Reference Include="System.ComponentModel.Composition" />
    <Reference Include="System.Console, Version=4.0.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Console.4.3.1\lib\net46\System.Console.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Core" />
    <Reference Include="System.Diagnostics.DiagnosticSource, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.DiagnosticSource.7.0.0\lib\net462\System.Diagnostics.DiagnosticSource.dll</HintPath>
    </Reference>
    <Reference Include="System.Diagnostics.Tracing, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.Tracing.4.3.0\lib\net462\System.Diagnostics.Tracing.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Globalization.Calendars, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Globalization.Calendars.4.3.0\lib\net46\System.Globalization.Calendars.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.4.3.0\lib\net462\System.IO.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.Compression, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.Compression.4.3.0\lib\net46\System.IO.Compression.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.IO.Compression.ZipFile, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.Compression.ZipFile.4.3.0\lib\net46\System.IO.Compression.ZipFile.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.FileSystem.4.3.0\lib\net46\System.IO.FileSystem.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.FileSystem.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.FileSystem.Primitives.4.3.0\lib\net46\System.IO.FileSystem.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Linq, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Linq.4.3.0\lib\net463\System.Linq.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Linq.Expressions.4.3.0\lib\net463\System.Linq.Expressions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Memory, Version=4.0.1.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Memory.4.5.5\lib\net461\System.Memory.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http, Version=4.1.1.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Net.Http.4.3.4\lib\net46\System.Net.Http.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Net.Sockets, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Net.Sockets.4.3.0\lib\net46\System.Net.Sockets.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Numerics" />
    <Reference Include="System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Numerics.Vectors.4.5.0\lib\net46\System.Numerics.Vectors.dll</HintPath>
    </Reference>
    <Reference Include="System.Reflection, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Reflection.4.3.0\lib\net462\System.Reflection.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.4.3.1\lib\net462\System.Runtime.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.CompilerServices.Unsafe.6.0.0\lib\net461\System.Runtime.CompilerServices.Unsafe.dll</HintPath>
    </Reference>
    <Reference Include="System.Runtime.Extensions, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.Extensions.4.3.1\lib\net462\System.Runtime.Extensions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.InteropServices, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.InteropServices.4.3.0\lib\net463\System.Runtime.InteropServices.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.InteropServices.RuntimeInformation.4.3.0\lib\net45\System.Runtime.InteropServices.RuntimeInformation.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Algorithms, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Algorithms.4.3.1\lib\net463\System.Security.Cryptography.Algorithms.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Encoding, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Encoding.4.3.0\lib\net46\System.Security.Cryptography.Encoding.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.Primitives.4.3.0\lib\net46\System.Security.Cryptography.Primitives.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security.Cryptography.X509Certificates, Version=4.1.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Security.Cryptography.X509Certificates.4.3.2\lib\net461\System.Security.Cryptography.X509Certificates.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Text.RegularExpressions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Text.RegularExpressions.4.3.1\lib\net463\System.Text.RegularExpressions.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Xml.ReaderWriter.4.3.1\lib\net46\System.Xml.ReaderWriter.dll</HintPath>
      <Private>True</Private>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Script\Module.cs" />
    <Compile Include="SDK\Bridge.cs" />
    <Compile Include="SDK\Extensions.cs" />
    <Compile Include="SDK\PLog.cs" />
    <Compile Include="SDK\Plugins.cs" />
    <Compile Include="SDK\TitanEngine.cs" />
    <Compile Include="SDK\WAPI.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\ERC\ERC\ERC.Net.csproj">
      <Project>{118c331f-8fc1-4ba6-b5b1-da397e623cfe}</Project>
      <Name>ERC.Net</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="FodyWeavers.xml" />
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets'))" />
    <Error Condition="!Exists('..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets'))" />
    <Error Condition="!Exists('..\packages\Fody.6.5.5\build\Fody.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Fody.6.5.5\build\Fody.targets'))" />
    <Error Condition="!Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Costura.Fody.5.7.0\build\Costura.Fody.props'))" />
    <Error Condition="!Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets'))" />
  </Target>
  <Import Project="..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets" Condition="Exists('..\packages\NETStandard.Library.2.0.3\build\netstandard2.0\NETStandard.Library.targets')" />
  <Import Project="..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets" Condition="Exists('..\packages\Reloaded.Assembler.1.0.14\build\Reloaded.Assembler.targets')" />
  <Import Project="..\packages\Fody.6.5.5\build\Fody.targets" Condition="Exists('..\packages\Fody.6.5.5\build\Fody.targets')" />
  <Import Project="..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets" Condition="Exists('..\packages\Costura.Fody.5.7.0\build\Costura.Fody.targets')" />
</Project>


================================================
File: Managed.x64dbg/app.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>


================================================
File: Managed.x64dbg/packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Costura.Fody" version="5.7.0" targetFramework="net472" developmentDependency="true" />
  <package id="Fody" version="6.5.5" targetFramework="net472" developmentDependency="true" />
  <package id="Microsoft.NETCore.Platforms" version="7.0.0" targetFramework="net472" />
  <package id="Microsoft.Win32.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="NETStandard.Library" version="2.0.3" targetFramework="net472" />
  <package id="Reloaded.Assembler" version="1.0.14" targetFramework="net472" />
  <package id="Reloaded.Memory" version="8.0.1" targetFramework="net472" />
  <package id="Reloaded.Memory.Buffers" version="2.0.0" targetFramework="net472" />
  <package id="System.AppContext" version="4.3.0" targetFramework="net472" />
  <package id="System.Buffers" version="4.5.1" targetFramework="net472" />
  <package id="System.Collections" version="4.3.0" targetFramework="net472" />
  <package id="System.Collections.Concurrent" version="4.3.0" targetFramework="net472" />
  <package id="System.Console" version="4.3.1" targetFramework="net472" />
  <package id="System.Diagnostics.Debug" version="4.3.0" targetFramework="net472" />
  <package id="System.Diagnostics.DiagnosticSource" version="7.0.0" targetFramework="net472" />
  <package id="System.Diagnostics.Tools" version="4.3.0" targetFramework="net472" />
  <package id="System.Diagnostics.Tracing" version="4.3.0" targetFramework="net472" />
  <package id="System.Globalization" version="4.3.0" targetFramework="net472" />
  <package id="System.Globalization.Calendars" version="4.3.0" targetFramework="net472" />
  <package id="System.IO" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.Compression" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.Compression.ZipFile" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.FileSystem" version="4.3.0" targetFramework="net472" />
  <package id="System.IO.FileSystem.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Linq" version="4.3.0" targetFramework="net472" />
  <package id="System.Linq.Expressions" version="4.3.0" targetFramework="net472" />
  <package id="System.Memory" version="4.5.5" targetFramework="net472" />
  <package id="System.Net.Http" version="4.3.4" targetFramework="net472" />
  <package id="System.Net.Primitives" version="4.3.1" targetFramework="net472" />
  <package id="System.Net.Sockets" version="4.3.0" targetFramework="net472" />
  <package id="System.Numerics.Vectors" version="4.5.0" targetFramework="net472" />
  <package id="System.ObjectModel" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection.Extensions" version="4.3.0" targetFramework="net472" />
  <package id="System.Reflection.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Resources.ResourceManager" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime" version="4.3.1" targetFramework="net472" />
  <package id="System.Runtime.CompilerServices.Unsafe" version="6.0.0" targetFramework="net472" />
  <package id="System.Runtime.Extensions" version="4.3.1" targetFramework="net472" />
  <package id="System.Runtime.Handles" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.InteropServices" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.InteropServices.RuntimeInformation" version="4.3.0" targetFramework="net472" />
  <package id="System.Runtime.Numerics" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.Algorithms" version="4.3.1" targetFramework="net472" />
  <package id="System.Security.Cryptography.Encoding" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.Primitives" version="4.3.0" targetFramework="net472" />
  <package id="System.Security.Cryptography.X509Certificates" version="4.3.2" targetFramework="net472" />
  <package id="System.Text.Encoding" version="4.3.0" targetFramework="net472" />
  <package id="System.Text.Encoding.Extensions" version="4.3.0" targetFramework="net472" />
  <package id="System.Text.RegularExpressions" version="4.3.1" targetFramework="net472" />
  <package id="System.Threading" version="4.3.0" targetFramework="net472" />
  <package id="System.Threading.Tasks" version="4.3.0" targetFramework="net472" />
  <package id="System.Threading.Timer" version="4.3.0" targetFramework="net472" />
  <package id="System.Xml.ReaderWriter" version="4.3.1" targetFramework="net472" />
  <package id="System.Xml.XDocument" version="4.3.0" targetFramework="net472" />
</packages>


================================================
File: Managed.x64dbg/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Managed.x64dbg")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Managed.x64dbg")]
[assembly: AssemblyCopyright("Copyright Â©  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]



// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: Managed.x64dbg/SDK/Bridge.cs
================================================
ï»¿using System;
using System.IO;
using System.Runtime.InteropServices;

namespace Managed.x64dbg.SDK
{
    public class Bridge
    {
        public const int GUI_MAX_LINE_SIZE = 65536;
        public const int MAX_LABEL_SIZE = 256;
        public const int MAX_COMMENT_SIZE = 512;
        public const int MAX_MODULE_SIZE = 256;
        public const int MAX_IMPORT_SIZE = 65536;
        public const int MAX_BREAKPOINT_SIZE = 256;
        public const int MAX_CONDITIONAL_EXPR_SIZE = 256;
        public const int MAX_CONDITIONAL_TEXT_SIZE = 256;
        public const int MAX_SCRIPT_LINE_SIZE = 2048;
        public const int MAX_THREAD_NAME_SIZE = 256;
        public const int MAX_WATCH_NAME_SIZE = 256;
        public const int MAX_STRING_SIZE = 512;
        public const int MAX_ERROR_SIZE = 512;
        public const int MAX_SECTION_SIZE = 10;
        public const int MAX_COMMAND_LINE_SIZE = 256;
        public const int MAX_MNEMONIC_SIZE = 64;
        public const int PAGE_SIZE = 4096;

        //private const string dll = "x64bridge.dll";   //Uncomment for 64bit
        private const string dll = "x32bridge.dll"; //Uncomment for 32bit
        private const CallingConvention cdecl = CallingConvention.Cdecl;

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool GuiGetLineWindow(string title, ref IntPtr text);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern IntPtr DbgValFromString(string Sstring);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool DbgGetModuleAt(IntPtr addr, IntPtr text);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern IntPtr DbgModBaseFromName(string name);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool DbgIsDebugging();

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool DbgCmdExec(string cmd);

        [DllImport(dll, CallingConvention = cdecl, CharSet = CharSet.Ansi)]
        public static extern bool DbgCmdExecDirect(string cmd);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool BridgeAlloc(IntPtr size);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool BridgeFree(IntPtr size);

        public struct ICONDATA
        {
            public IntPtr data;
            public long size;
        }

        public struct ListInfo
        {
            public int count;
            public IntPtr size;
            public IntPtr data;

            public T[] ToArray<T>(bool success) where T : new()
            {
                if (!success || count == 0 || size == IntPtr.Zero)
                    return new T[0];
                var list = new T[count];
                var szt = Marshal.SizeOf(typeof(T));
                var sz = size.ToInt32() / count;
                if (szt != sz)
                    throw new InvalidDataException(string.Format("{0} type size mismatch, expected {1} got {2}!",
                        typeof(T).Name, szt, sz));
                var ptr = data;
                for (var i = 0; i < count; i++)
                {
                    list[i] = (T)Marshal.PtrToStructure(ptr, typeof(T));
                    ptr += sz;
                }
                BridgeFree(data);
                return list;
            }
        }
    }
}



================================================
File: Managed.x64dbg/SDK/Extensions.cs
================================================
ï»¿using System;
using System.Runtime.InteropServices;

namespace Managed.x64dbg.SDK
{
    public static class Extensions
    {
        public static string ToHexString(this IntPtr intPtr)
        {
            return intPtr.ToString("X");
        }

        public static string ToPtrString(this IntPtr intPtr)
        {
            return IntPtr.Size == 4 ? intPtr.ToString("X8") : intPtr.ToString("X16");
        }

        public static string MarshalToString(this IntPtr intPtr)
        {
            if (intPtr == IntPtr.Zero)
                return "";
            return Marshal.PtrToStringAnsi(intPtr);
        }

        public static T ToStruct<T>(this IntPtr intPtr) where T : new()
        {
            if (intPtr == IntPtr.Zero)
                return new T();
            return (T)Marshal.PtrToStructure(intPtr, typeof(T));
        }
    }
}



================================================
File: Managed.x64dbg/SDK/PLog.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace Managed.x64dbg.SDK
{
    public static class PLog
    {
        public static void WriteLine(string format, params object[] args)
        {
            Write(string.Format(format.Replace("%", "%%") + "\n", args));
        }

        public static void Write(string format, params object[] args)
        {
            Plugins._plugin_logprintf(string.Format(format.Replace("%", "%%"), args));
        }
        public static void WriteLineHtml(string format, params object[] args)
        {
            WriteHtml(format + "<br>", args);
        }

        public static void WriteHtml(string format, params object[] args)
        {
            Plugins._plugin_lograw_html(string.Format(format, args));
        }

    }

    public class TextWriterPLog : TextWriter
    {
        public override Encoding Encoding { get { return Encoding.UTF8; } }

        public override void Write(string value)
        {
            PLog.Write(value);
        }
    }
}



================================================
File: Managed.x64dbg/SDK/Plugins.cs
================================================
using System;
using System.Runtime.InteropServices;

namespace Managed.x64dbg.SDK
{
    public static class Plugins
    {
        public const int PLUG_SDKVERSION = 1;
        public static int pluginHandle;

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate bool CBPLUGINCOMMAND(
            int argc,
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr, SizeParamIndex = 0)]
            string[] argv);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void CBPLUGIN(CBTYPE cbType, ref IntPtr callbackInfo);


        //private const string dll = "x64dbg.dll";   //Uncomment for 64bit
        private const string dll = "x32dbg.dll"; //Uncomment for 32bit

        private const CallingConvention cdecl = CallingConvention.Cdecl;

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern void _plugin_logprintf(string format);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern void _plugin_lograw_html(string text);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern void _plugin_logputs(string text);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern void _plugin_registercallback(int pluginHandle, CBTYPE cbType, CBPLUGIN cbPlugin);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool _plugin_unregistercallback(int pluginHandle, CBTYPE cbType);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool _plugin_menuaddentry(int hMenu, int hEntry, string title);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern int _plugin_menuadd(int hMenu, string title);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool _plugin_menuclear(int hMenu);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool _plugin_registercommand(int pluginHandle, string command, CBPLUGINCOMMAND cbCommand, bool debugonly);

        [DllImport(dll, CallingConvention = cdecl)]
        public static extern bool _plugin_unregistercommand(int pluginHandle, string command);

        public struct PLUG_INITSTRUCT
        {
            public int pluginHandle;
            public int sdkVersion;
            public int pluginVersion;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string pluginName;

            public override string ToString()
            {
                string ret = "";
                ret += "pluginHandle:  " + pluginHandle.ToString("X") + Environment.NewLine;
                ret += "sdkVersion:    " + sdkVersion + Environment.NewLine;
                ret += "pluginVersion: " + pluginVersion + Environment.NewLine;
                ret += "pluginName:    " + pluginName + Environment.NewLine;
                return ret;
            }
        }

        public struct PLUG_SETUPSTRUCT
        {
            public IntPtr hwndDlg;
            public int hMenu;
            public int hMenuDisasm;
            public int hMenuDump;
            public int hMenuStack;

            public override string ToString()
            {
                string ret = "";
                ret += "hwndDlg:      " + hwndDlg.ToString("X") + Environment.NewLine;
                ret += "hMenu:        " + hMenu + Environment.NewLine;
                ret += "hMenuDisasmn: " + hMenuDisasm + Environment.NewLine;
                ret += "hMenuStack:   " + hMenuStack + Environment.NewLine;
                return ret;
            }
        }

        public enum CBTYPE
        {
            CB_INITDEBUG, //PLUG_CB_INITDEBUG
            CB_STOPDEBUG, //PLUG_CB_STOPDEBUG
            CB_CREATEPROCESS, //PLUG_CB_CREATEPROCESS
            CB_EXITPROCESS, //PLUG_CB_EXITPROCESS
            CB_CREATETHREAD, //PLUG_CB_CREATETHREAD
            CB_EXITTHREAD, //PLUG_CB_EXITTHREAD
            CB_SYSTEMBREAKPOINT, //PLUG_CB_SYSTEMBREAKPOINT
            CB_LOADDLL, //PLUG_CB_LOADDLL
            CB_UNLOADDLL, //PLUG_CB_UNLOADDLL
            CB_OUTPUTDEBUGSTRING, //PLUG_CB_OUTPUTDEBUGSTRING
            CB_EXCEPTION, //PLUG_CB_EXCEPTION
            CB_BREAKPOINT, //PLUG_CB_BREAKPOINT
            CB_PAUSEDEBUG, //PLUG_CB_PAUSEDEBUG
            CB_RESUMEDEBUG, //PLUG_CB_RESUMEDEBUG
            CB_STEPPED, //PLUG_CB_STEPPED
            CB_ATTACH, //PLUG_CB_ATTACHED (before attaching, after CB_INITDEBUG)
            CB_DETACH, //PLUG_CB_DETACH (before detaching, before CB_STOPDEBUG)
            CB_DEBUGEVENT, //PLUG_CB_DEBUGEVENT (called on any debug event)
            CB_MENUENTRY, //PLUG_CB_MENUENTRY
            CB_WINEVENT, //PLUG_CB_WINEVENT
            CB_WINEVENTGLOBAL, //PLUG_CB_WINEVENTGLOBAL
            CB_LOADDB, //PLUG_CB_LOADSAVEDB
            CB_SAVEDB, //PLUG_CB_LOADSAVEDB
            CB_FILTERSYMBOL, //PLUG_CB_FILTERSYMBOL
            CB_LAST
        }

        public struct PLUG_CB_INITDEBUG
        {
            public IntPtr szFileName; //string
        }

        public struct PLUG_CB_STOPDEBUG
        {
            public IntPtr reserved;
        }

        public struct PLUG_CB_CREATEPROCESS
        {
            public IntPtr CreateProcessInfo; //WAPI.CREATE_PROCESS_DEBUG_INFO
            public IntPtr modInfo; //WAPI.IMAGEHLP_MODULE64
            public IntPtr DebugFileName; //string
            public IntPtr fdProcessInfo; //WAPI.PROCESS_INFORMATION
        }

        public struct PLUG_CB_EXITPROCESS
        {
            public WAPI.EXIT_PROCESS_DEBUG_INFO ExitProcess;
        }

        public struct PLUG_CB_LOADDLL
        {
            public IntPtr LoadDll; //WAPI.LOAD_DLL_DEBUG_INFO
            public IntPtr modInfo; //WAPI.IMAGEHLP_MODULE64
            public IntPtr modname; //string
        }

        public struct PLUG_CB_MENUENTRY
        {
            public int hEntry;
        }
    }
}



================================================
File: Managed.x64dbg/SDK/TitanEngine.cs
================================================
using System;
using System.Runtime.InteropServices;

namespace Managed.x64dbg.SDK
{
    public class TitanEngine
    {
        public const int UE_STRUCT_PE32STRUCT = 1;
        public const int UE_STRUCT_PE64STRUCT = 2;
        public const int UE_STRUCT_PESTRUCT = 3;
        public const int UE_STRUCT_IMPORTENUMDATA = 4;
        public const int UE_STRUCT_THREAD_ITEM_DATA = 5;
        public const int UE_STRUCT_LIBRARY_ITEM_DATA = 6;
        public const int UE_STRUCT_LIBRARY_ITEM_DATAW = 7;
        public const int UE_STRUCT_PROCESS_ITEM_DATA = 8;
        public const int UE_STRUCT_HANDLERARRAY = 9;
        public const int UE_STRUCT_PLUGININFORMATION = 10;
        public const int UE_STRUCT_HOOK_ENTRY = 11;
        public const int UE_STRUCT_FILE_STATUS_INFO = 12;
        public const int UE_STRUCT_FILE_FIX_INFO = 13;
        public const int UE_STRUCT_X87FPUREGISTER = 14;
        public const int UE_STRUCT_X87FPU = 15;
        public const int UE_STRUCT_TITAN_ENGINE_CONTEXT = 16;
        public const int UE_ACCESS_READ = 0;
        public const int UE_ACCESS_WRITE = 1;
        public const int UE_ACCESS_ALL = 2;
        public const int UE_HIDE_PEBONLY = 0;
        public const int UE_HIDE_BASIC = 1;
        public const int UE_PLUGIN_CALL_REASON_PREDEBUG = 1;
        public const int UE_PLUGIN_CALL_REASON_EXCEPTION = 2;
        public const int UE_PLUGIN_CALL_REASON_POSTDEBUG = 3;
        public const int UE_PLUGIN_CALL_REASON_UNHANDLEDEXCEPTION = 4;
        public const int TEE_HOOK_NRM_JUMP = 1;
        public const int TEE_HOOK_NRM_CALL = 3;
        public const int TEE_HOOK_IAT = 5;
        public const int UE_ENGINE_ALOW_MODULE_LOADING = 1;
        public const int UE_ENGINE_AUTOFIX_FORWARDERS = 2;
        public const int UE_ENGINE_PASS_ALL_EXCEPTIONS = 3;
        public const int UE_ENGINE_NO_CONSOLE_WINDOW = 4;
        public const int UE_ENGINE_BACKUP_FOR_CRITICAL_FUNCTIONS = 5;
        public const int UE_ENGINE_CALL_PLUGIN_CALLBACK = 6;
        public const int UE_ENGINE_RESET_CUSTOM_HANDLER = 7;
        public const int UE_ENGINE_CALL_PLUGIN_DEBUG_CALLBACK = 8;
        public const int UE_ENGINE_SET_DEBUG_PRIVILEGE = 9;
        public const int UE_OPTION_REMOVEALL = 1;
        public const int UE_OPTION_DISABLEALL = 2;
        public const int UE_OPTION_REMOVEALLDISABLED = 3;
        public const int UE_OPTION_REMOVEALLENABLED = 4;
        public const int UE_STATIC_DECRYPTOR_XOR = 1;
        public const int UE_STATIC_DECRYPTOR_SUB = 2;
        public const int UE_STATIC_DECRYPTOR_ADD = 3;
        public const int UE_STATIC_DECRYPTOR_FOREWARD = 1;
        public const int UE_STATIC_DECRYPTOR_BACKWARD = 2;
        public const int UE_STATIC_KEY_SIZE_1 = 1;
        public const int UE_STATIC_KEY_SIZE_2 = 2;
        public const int UE_STATIC_KEY_SIZE_4 = 4;
        public const int UE_STATIC_KEY_SIZE_8 = 8;
        public const int UE_STATIC_APLIB = 1;
        public const int UE_STATIC_APLIB_DEPACK = 2;
        public const int UE_STATIC_LZMA = 3;
        public const int UE_STATIC_HASH_MD5 = 1;
        public const int UE_STATIC_HASH_SHA1 = 2;
        public const int UE_STATIC_HASH_CRC32 = 3;
        public const int UE_RESOURCE_LANGUAGE_ANY = -1;
        public const int UE_PE_OFFSET = 0;
        public const int UE_IMAGEBASE = 1;
        public const int UE_OEP = 2;
        public const int UE_SIZEOFIMAGE = 3;
        public const int UE_SIZEOFHEADERS = 4;
        public const int UE_SIZEOFOPTIONALHEADER = 5;
        public const int UE_SECTIONALIGNMENT = 6;
        public const int UE_IMPORTTABLEADDRESS = 7;
        public const int UE_IMPORTTABLESIZE = 8;
        public const int UE_RESOURCETABLEADDRESS = 9;
        public const int UE_RESOURCETABLESIZE = 10;
        public const int UE_EXPORTTABLEADDRESS = 11;
        public const int UE_EXPORTTABLESIZE = 12;
        public const int UE_TLSTABLEADDRESS = 13;
        public const int UE_TLSTABLESIZE = 14;
        public const int UE_RELOCATIONTABLEADDRESS = 15;
        public const int UE_RELOCATIONTABLESIZE = 16;
        public const int UE_TIMEDATESTAMP = 17;
        public const int UE_SECTIONNUMBER = 18;
        public const int UE_CHECKSUM = 19;
        public const int UE_SUBSYSTEM = 20;
        public const int UE_CHARACTERISTICS = 21;
        public const int UE_NUMBEROFRVAANDSIZES = 22;
        public const int UE_BASEOFCODE = 23;
        public const int UE_BASEOFDATA = 24;
        public const int UE_SECTIONNAME = 40;
        public const int UE_SECTIONVIRTUALOFFSET = 41;
        public const int UE_SECTIONVIRTUALSIZE = 42;
        public const int UE_SECTIONRAWOFFSET = 43;
        public const int UE_SECTIONRAWSIZE = 44;
        public const int UE_SECTIONFLAGS = 45;
        public const int UE_VANOTFOUND = -2;
        public const int UE_CH_BREAKPOINT = 1;
        public const int UE_CH_SINGLESTEP = 2;
        public const int UE_CH_ACCESSVIOLATION = 3;
        public const int UE_CH_ILLEGALINSTRUCTION = 4;
        public const int UE_CH_NONCONTINUABLEEXCEPTION = 5;
        public const int UE_CH_ARRAYBOUNDSEXCEPTION = 6;
        public const int UE_CH_FLOATDENORMALOPERAND = 7;
        public const int UE_CH_FLOATDEVIDEBYZERO = 8;
        public const int UE_CH_INTEGERDEVIDEBYZERO = 9;
        public const int UE_CH_INTEGEROVERFLOW = 10;
        public const int UE_CH_PRIVILEGEDINSTRUCTION = 11;
        public const int UE_CH_PAGEGUARD = 12;
        public const int UE_CH_EVERYTHINGELSE = 13;
        public const int UE_CH_CREATETHREAD = 14;
        public const int UE_CH_EXITTHREAD = 15;
        public const int UE_CH_CREATEPROCESS = 16;
        public const int UE_CH_EXITPROCESS = 17;
        public const int UE_CH_LOADDLL = 18;
        public const int UE_CH_UNLOADDLL = 19;
        public const int UE_CH_OUTPUTDEBUGSTRING = 20;
        public const int UE_CH_AFTEREXCEPTIONPROCESSING = 21;
        public const int UE_CH_SYSTEMBREAKPOINT = 23;
        public const int UE_CH_UNHANDLEDEXCEPTION = 24;
        public const int UE_CH_RIPEVENT = 25;
        public const int UE_CH_DEBUGEVENT = 26;
        public const int UE_OPTION_HANDLER_RETURN_HANDLECOUNT = 1;
        public const int UE_OPTION_HANDLER_RETURN_ACCESS = 2;
        public const int UE_OPTION_HANDLER_RETURN_FLAGS = 3;
        public const int UE_OPTION_HANDLER_RETURN_TYPENAME = 4;
        public const int UE_BREAKPOINT_INT3 = 1;
        public const int UE_BREAKPOINT_LONG_INT3 = 2;
        public const int UE_BREAKPOINT_UD2 = 3;
        public const int UE_BPXREMOVED = 0;
        public const int UE_BPXACTIVE = 1;
        public const int UE_BPXINACTIVE = 2;
        public const int UE_BREAKPOINT = 0;
        public const int UE_SINGLESHOOT = 1;
        public const int UE_HARDWARE = 2;
        public const int UE_MEMORY = 3;
        public const int UE_MEMORY_READ = 4;
        public const int UE_MEMORY_WRITE = 5;
        public const int UE_MEMORY_EXECUTE = 6;
        public const int UE_BREAKPOINT_TYPE_INT3 = 268435456;
        public const int UE_BREAKPOINT_TYPE_LONG_INT3 = 536870912;
        public const int UE_BREAKPOINT_TYPE_UD2 = 805306368;
        public const int UE_HARDWARE_EXECUTE = 4;
        public const int UE_HARDWARE_WRITE = 5;
        public const int UE_HARDWARE_READWRITE = 6;
        public const int UE_HARDWARE_SIZE_1 = 7;
        public const int UE_HARDWARE_SIZE_2 = 8;
        public const int UE_HARDWARE_SIZE_4 = 9;
        public const int UE_HARDWARE_SIZE_8 = 10;
        public const int UE_ON_LIB_LOAD = 1;
        public const int UE_ON_LIB_UNLOAD = 2;
        public const int UE_ON_LIB_ALL = 3;
        public const int UE_APISTART = 0;
        public const int UE_APIEND = 1;
        public const int UE_PLATFORM_x86 = 1;
        public const int UE_PLATFORM_x64 = 2;
        public const int UE_PLATFORM_ALL = 3;
        public const int UE_FUNCTION_STDCALL = 1;
        public const int UE_FUNCTION_CCALL = 2;
        public const int UE_FUNCTION_FASTCALL = 3;
        public const int UE_FUNCTION_STDCALL_RET = 4;
        public const int UE_FUNCTION_CCALL_RET = 5;
        public const int UE_FUNCTION_FASTCALL_RET = 6;
        public const int UE_FUNCTION_STDCALL_CALL = 7;
        public const int UE_FUNCTION_CCALL_CALL = 8;
        public const int UE_FUNCTION_FASTCALL_CALL = 9;
        public const int UE_PARAMETER_BYTE = 0;
        public const int UE_PARAMETER_WORD = 1;
        public const int UE_PARAMETER_DWORD = 2;
        public const int UE_PARAMETER_QWORD = 3;
        public const int UE_PARAMETER_PTR_BYTE = 4;
        public const int UE_PARAMETER_PTR_WORD = 5;
        public const int UE_PARAMETER_PTR_DWORD = 6;
        public const int UE_PARAMETER_PTR_QWORD = 7;
        public const int UE_PARAMETER_STRING = 8;
        public const int UE_PARAMETER_UNICODE = 9;
        public const int UE_EAX = 1;
        public const int UE_EBX = 2;
        public const int UE_ECX = 3;
        public const int UE_EDX = 4;
        public const int UE_EDI = 5;
        public const int UE_ESI = 6;
        public const int UE_EBP = 7;
        public const int UE_ESP = 8;
        public const int UE_EIP = 9;
        public const int UE_EFLAGS = 10;
        public const int UE_DR0 = 11;
        public const int UE_DR1 = 12;
        public const int UE_DR2 = 13;
        public const int UE_DR3 = 14;
        public const int UE_DR6 = 15;
        public const int UE_DR7 = 16;
        public const int UE_RAX = 17;
        public const int UE_RBX = 18;
        public const int UE_RCX = 19;
        public const int UE_RDX = 20;
        public const int UE_RDI = 21;
        public const int UE_RSI = 22;
        public const int UE_RBP = 23;
        public const int UE_RSP = 24;
        public const int UE_RIP = 25;
        public const int UE_RFLAGS = 26;
        public const int UE_R8 = 27;
        public const int UE_R9 = 28;
        public const int UE_R10 = 29;
        public const int UE_R11 = 30;
        public const int UE_R12 = 31;
        public const int UE_R13 = 32;
        public const int UE_R14 = 33;
        public const int UE_R15 = 34;
        public const int UE_CIP = 35;
        public const int UE_CSP = 36;

        [DllImport("TitanEngine.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr GetContextData(uint IndexOfRegister);

        [DllImport("TitanEngine.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr TitanGetProcessInformation();

        [DllImport("TitanEngine.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern bool DumpProcess(IntPtr hProcess, IntPtr ImageBase, string szDumpFileName, IntPtr EntryPoint);

        [DllImport("TitanEngine.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern bool StaticFileLoadW(string szFileName, uint DesiredAccess, bool SimulateLoad, IntPtr FileHandle, ref uint LoadedSize, IntPtr FileMap, IntPtr FileMapVA);
    }
}



================================================
File: Managed.x64dbg/SDK/WAPI.cs
================================================
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Managed.x64dbg.SDK
{
    public class WAPI
    {
        public const int MAX_PATH = 260;

        [DllImport("psapi.dll")]
        public static extern uint GetModuleBaseNameA(IntPtr hProcess, IntPtr hModule, StringBuilder lpBaseName, uint nSize);

        [DllImport("kernel32.dll", EntryPoint = "RtlZeroMemory")]
        public static extern void ZeroMemory(IntPtr dst, int length);

        public struct LOAD_DLL_DEBUG_INFO
        {
            public IntPtr hFile;
            public IntPtr lpBaseOfDll;
            public uint dwDebugInfoFileOffset;
            public uint nDebugInfoSize;
            public IntPtr lpImageName;
            public ushort fUnicode;
        }

        public delegate uint PTHREAD_START_ROUTINE(IntPtr lpThreadParameter);

        public struct CREATE_PROCESS_DEBUG_INFO
        {
            public IntPtr hFile;
            public IntPtr hProcess;
            public IntPtr hThread;
            public IntPtr lpBaseOfImage;
            public uint dwDebugInfoFileOffset;
            public uint nDebugInfoSize;
            public IntPtr lpThreadLocalBase;
            public IntPtr lpStartAddress; //PTHREAD_START_ROUTINE
            public IntPtr lpImageName;
            public ushort fUnicode;
        }

        public struct EXIT_PROCESS_DEBUG_INFO
        {
            public uint dwExitCode;
        }

        public struct IMAGEHLP_MODULE64
        {
            public uint SizeOfStruct;
            public ulong BaseOfImage;
            public uint ImageSize;
            public uint TimeDateStamp;
            public uint CheckSum;
            public uint NumSyms;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]
            public SYM_TYPE[] SymType;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
            public string ModuleName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string ImageName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string LoadedImageName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string LoadedPdbName;
            public uint CVSig;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 780)]
            public string CVData;
            public uint PdbSig;
            public GUID PdbSig70;
            public uint PdbAge;
            public int PdbUnmatched;
            public int DbgUnmatched;
            public int LineNumbers;
            public int GlobalSymbols;
            public int TypeInfo;
            public int SourceIndexed;
            public int Publics;
        }

        public enum SYM_TYPE
        {
            SymNone,
            SymCoff,
            SymCv,
            SymPdb,
            SymExport,
            SymDeferred,
            SymSym,
            SymDia,
            SymVirtual,
            NumSymTypes,
        }

        public struct GUID
        {
            public uint Data1;
            public ushort Data2;
            public ushort Data3;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8)]
            public string Data4;
        }

        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }
    }
}



================================================
File: Managed.x64dbg/Script/Module.cs
================================================
ï»¿using System;
using System.Runtime.InteropServices;
using Managed.x64dbg.SDK;

namespace Managed.x64dbg.Script
{
    public static class Module
    {
        public struct ModuleInfo
        {
            public IntPtr @base;
            public IntPtr size;
            public IntPtr entry;
            public int sectionCount;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = Bridge.MAX_MODULE_SIZE)]
            public string name;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = WAPI.MAX_PATH)]
            public string path;
        }

        public struct ModuleSectionInfo
        {
            public IntPtr addr;
            public IntPtr size;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = Bridge.MAX_SECTION_SIZE * 5)]
            public string name;
        }

        //private const string dll = "x64dbg.dll";   //uncomment for 64bit
        private const string dll = "x32dbg.dll"; //uncomment for 32bit
        private const CallingConvention cdecl = CallingConvention.Cdecl;

        [DllImport(dll, CallingConvention = cdecl,
             EntryPoint = "?GetList@Module@Script@@YA_NPEAUListInfo@@@Z")]
        private static extern bool ScriptModuleGetList(ref Bridge.ListInfo listInfo);

        public static ModuleInfo[] GetList()
        {
            var listInfo = new Bridge.ListInfo();
            return listInfo.ToArray<ModuleInfo>(ScriptModuleGetList(ref listInfo));
        }

        [DllImport(dll, CallingConvention = cdecl,
             EntryPoint = "?SectionListFromAddr@Module@Script@@YA_N_KPEAUListInfo@@@Z")]
        private static extern bool ScriptModuleSectionListFromAddr(IntPtr addr, ref Bridge.ListInfo listInfo);

        public static ModuleSectionInfo[] SectionListFromAddr(IntPtr addr)
        {
            var listInfo = new Bridge.ListInfo();
            return listInfo.ToArray<ModuleSectionInfo>(ScriptModuleSectionListFromAddr(addr, ref listInfo));
        }

        [DllImport(dll, CallingConvention = cdecl,
             EntryPoint = "?InfoFromAddr@Module@Script@@YA_N_KPEAUModuleInfo@12@@Z")]
        private static extern bool ScriptModuleInfoFromAddr(IntPtr addr, ref ModuleInfo info);

        public static bool InfoFromAddr(IntPtr addr, ref ModuleInfo info)
        {
            return ScriptModuleInfoFromAddr(addr, ref info);
        }
    }
}



================================================
File: packages/repositories.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<repositories>
  <repository path="..\x64dbgDotNetPlugin\packages.config" />
</repositories>


================================================
File: packages/.gitignore
================================================
*
!repositories.config
!.gitignore

