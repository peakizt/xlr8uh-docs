Directory structure:
└── mwsrc-dotnetobfuscator/
    ├── README.md
    ├── DotNetPatcher.sln
    ├── LICENSE
    ├── Core20Reader/
    │   ├── Core20Reader.sln
    │   └── Core20Reader/
    │       ├── Core20Reader.vbproj
    │       ├── DataDirectory.vb
    │       ├── IReader.vb
    │       ├── Reader.vb
    │       └── My Project/
    │           ├── Application.Designer.vb
    │           ├── Application.myapp
    │           ├── AssemblyInfo.vb
    │           ├── Resources.Designer.vb
    │           ├── Resources.resx
    │           ├── Settings.Designer.vb
    │           └── Settings.settings
    ├── DotNetPatcher/
    │   ├── DotNetPatcher.sln
    │   ├── DotNetPatcher.vbproj
    │   ├── Frm_Exclusion.designer.vb
    │   ├── Frm_Exclusion.resx
    │   ├── Frm_Exclusion.vb
    │   ├── Frm_Main.Designer.vb
    │   ├── Frm_Main.resx
    │   ├── Frm_Main.vb
    │   ├── Frm_Result.Designer.vb
    │   ├── Frm_Result.resx
    │   ├── Frm_Result.vb
    │   ├── Program.vb
    │   ├── app.config
    │   ├── My Project/
    │   │   ├── Application.Designer.vb
    │   │   ├── Application.myapp
    │   │   ├── AssemblyInfo.vb
    │   │   ├── Resources.Designer.vb
    │   │   ├── Resources.resx
    │   │   ├── Settings.Designer.vb
    │   │   ├── Settings.settings
    │   │   └── app.manifest
    │   └── Resources/
    ├── Helper/
    │   ├── Helper.vbproj
    │   ├── Assembly/
    │   │   ├── Data.vb
    │   │   ├── DataFull.vb
    │   │   ├── IAssemblyInfos.vb
    │   │   ├── Infos.vb
    │   │   └── Loader.vb
    │   ├── Cecil/
    │   │   ├── DelegateEmitter.vb
    │   │   ├── Finder.vb
    │   │   ├── Injecter.vb
    │   │   ├── Msil.vb
    │   │   ├── NameChecker.vb
    │   │   ├── ProcessedIL.vb
    │   │   └── Utils.vb
    │   ├── CodeDom/
    │   │   └── Compiler.vb
    │   ├── Crypto/
    │   │   ├── Crypt.vb
    │   │   └── Generator.vb
    │   ├── My Project/
    │   │   ├── Application.Designer.vb
    │   │   ├── Application.myapp
    │   │   ├── AssemblyInfo.vb
    │   │   ├── Resources.Designer.vb
    │   │   ├── Resources.resx
    │   │   ├── Settings.Designer.vb
    │   │   └── Settings.settings
    │   ├── Randomize/
    │   │   ├── Randomizer.vb
    │   │   └── RandomizerType.vb
    │   ├── Resource/
    │   │   ├── NativeMethods.vb
    │   │   └── ResourceEx.vb
    │   └── Utils/
    │       └── Functions.vb
    ├── Implementer/
    │   ├── Implementer.vbproj
    │   ├── Core/
    │   │   ├── Dependencing/
    │   │   │   ├── AnalysisResult.vb
    │   │   │   ├── Checker.vb
    │   │   │   ├── Dependencies.vb
    │   │   │   ├── DependenciesInfos.vb
    │   │   │   └── Embedding.vb
    │   │   ├── IconChanger/
    │   │   │   ├── Changer.vb
    │   │   │   ├── IconInfos.vb
    │   │   │   └── Replacer.vb
    │   │   ├── ManifestRequest/
    │   │   │   ├── ManifestInfos.vb
    │   │   │   ├── ManifestReader.vb
    │   │   │   └── ManifestWriter.vb
    │   │   ├── Obfuscation/
    │   │   │   ├── Anti/
    │   │   │   │   ├── AntiDebug.vb
    │   │   │   │   ├── AntiDumper.vb
    │   │   │   │   ├── AntiIlDasm.vb
    │   │   │   │   └── AntiTamper.vb
    │   │   │   ├── Builder/
    │   │   │   │   ├── Source.vb
    │   │   │   │   └── Stub.vb
    │   │   │   ├── Exclusion/
    │   │   │   │   ├── ExcludeList.vb
    │   │   │   │   ├── ExcludeReflection.vb
    │   │   │   │   ├── ExclusionReflection.vb
    │   │   │   │   ├── ExclusionState.vb
    │   │   │   │   ├── ExclusionTreeview.vb
    │   │   │   │   └── ReflectionAnalyzer.vb
    │   │   │   └── Protection/
    │   │   │       ├── Attribut.vb
    │   │   │       ├── Bool.vb
    │   │   │       ├── Constants.vb
    │   │   │       ├── InvalidMetadata.vb
    │   │   │       ├── Mild.vb
    │   │   │       ├── Numeric.vb
    │   │   │       ├── ObfuscationInfos.vb
    │   │   │       ├── Pinvoke.vb
    │   │   │       ├── PinvokeModifier.vb
    │   │   │       ├── Str.vb
    │   │   │       └── invalidOpcodes.vb
    │   │   ├── Packer/
    │   │   │   ├── Pack.vb
    │   │   │   ├── PackInfos.vb
    │   │   │   └── ZipInfos.vb
    │   │   ├── Resource/
    │   │   │   ├── Compression.vb
    │   │   │   └── Content.vb
    │   │   └── Versions/
    │   │       ├── Extractor.vb
    │   │       ├── Infos.vb
    │   │       └── Injector.vb
    │   ├── Engine/
    │   │   ├── Analyze/
    │   │   │   ├── Analyzer.vb
    │   │   │   └── ValidatedFile.vb
    │   │   ├── Checking/
    │   │   │   └── CheckerEventArgs.vb
    │   │   ├── Context/
    │   │   │   ├── Parameters.vb
    │   │   │   ├── RenamerState.vb
    │   │   │   ├── TaskState.vb
    │   │   │   ├── Tasks.vb
    │   │   │   └── RenamedItem/
    │   │   │       ├── RenamedItem.vb
    │   │   │       ├── RenamedItemEventArgs.vb
    │   │   │       └── RenamedItemType.vb
    │   │   ├── Identification/
    │   │   │   ├── Identifier.vb
    │   │   │   ├── IdentifierEnum.vb
    │   │   │   └── IdentifierResult.vb
    │   │   └── Processing/
    │   │       ├── Mapping.vb
    │   │       ├── ProcessTask.vb
    │   │       └── Renamer.vb
    │   ├── My Project/
    │   │   ├── Application.Designer.vb
    │   │   ├── Application.myapp
    │   │   ├── AssemblyInfo.vb
    │   │   ├── Resources.Designer.vb
    │   │   ├── Resources.resx
    │   │   ├── Settings.Designer.vb
    │   │   └── Settings.settings
    │   └── Resources/
    ├── Injections/
    │   ├── Injections.sln
    │   └── Injections/
    │       ├── AntiDumping.cs
    │       ├── Injections.csproj
    │       └── Properties/
    │           └── AssemblyInfo.cs
    ├── LoginTheme/
    │   ├── LoginTheme.vb
    │   ├── LoginTheme.vbproj
    │   └── My Project/
    │       ├── Application.Designer.vb
    │       ├── Application.myapp
    │       ├── AssemblyInfo.vb
    │       ├── Resources.Designer.vb
    │       ├── Resources.resx
    │       ├── Settings.Designer.vb
    │       └── Settings.settings
    ├── ResourceLib/
    │   ├── Accelerator.cs
    │   ├── AcceleratorResource.cs
    │   ├── BitmapFile.cs
    │   ├── BitmapResource.cs
    │   ├── CursorDirectoryResource.cs
    │   ├── CursorResource.cs
    │   ├── DeviceIndependentBitmap.cs
    │   ├── DialogExTemplate.cs
    │   ├── DialogExTemplateControl.cs
    │   ├── DialogResource.cs
    │   ├── DialogTemplate.cs
    │   ├── DialogTemplateBase.cs
    │   ├── DialogTemplateControl.cs
    │   ├── DialogTemplateControlBase.cs
    │   ├── DialogTemplateUtil.cs
    │   ├── DirectoryResource.cs
    │   ├── FixedFileInfo.cs
    │   ├── FontDirectoryEntry.cs
    │   ├── FontDirectoryResource.cs
    │   ├── FontResource.cs
    │   ├── Gdi32.cs
    │   ├── GenericResource.cs
    │   ├── IconDirectoryResource.cs
    │   ├── IconFile.cs
    │   ├── IconFileIcon.cs
    │   ├── IconImageResource.cs
    │   ├── IconResource.cs
    │   ├── Kernel32.cs
    │   ├── Key.snk
    │   ├── License.txt
    │   ├── LoadException.cs
    │   ├── ManifestResource.cs
    │   ├── MenuExTemplate.cs
    │   ├── MenuExTemplateItem.cs
    │   ├── MenuExTemplateItemCollection.cs
    │   ├── MenuExTemplateItemCommand.cs
    │   ├── MenuExTemplateItemPopup.cs
    │   ├── MenuResource.cs
    │   ├── MenuTemplate.cs
    │   ├── MenuTemplateBase.cs
    │   ├── MenuTemplateItem.cs
    │   ├── MenuTemplateItemCollection.cs
    │   ├── MenuTemplateItemCommand.cs
    │   ├── MenuTemplateItemPopup.cs
    │   ├── Resource.cs
    │   ├── ResourceId.cs
    │   ├── ResourceInfo.cs
    │   ├── ResourceLib.csproj
    │   ├── ResourceTableHeader.cs
    │   ├── ResourceUtil.cs
    │   ├── StringFileInfo.cs
    │   ├── StringResource.cs
    │   ├── StringTable.cs
    │   ├── StringTableEntry.cs
    │   ├── User32.cs
    │   ├── VarFileInfo.cs
    │   ├── VarTable.cs
    │   ├── VersionResource.cs
    │   ├── Winver.cs
    │   ├── packages.config
    │   ├── .gitignore
    │   └── Properties/
    │       └── AssemblyInfo.cs
    └── Sevenzip/
        ├── Sevenzip.sln
        └── Sevenzip/
            ├── CRC.cs
            ├── ICoder.cs
            ├── IMatchFinder.cs
            ├── LzBinTree.cs
            ├── LzInWindow.cs
            ├── LzOutWindow.cs
            ├── LzmaBase.cs
            ├── LzmaDecoder.cs
            ├── LzmaEncoder.cs
            ├── RangeCoder.cs
            ├── RangeCoderBit.cs
            ├── RangeCoderBitTree.cs
            ├── SevenZipHelper.cs
            ├── Sevenzip.csproj
            └── Properties/
                └── AssemblyInfo.cs

================================================
File: README.md
================================================
# **original**
* BitBucket Link :: https://bitbucket.org/3dotdev/dotnet-patcher
# **DotNet Patcher v4** #

# Description

DNP is a Obfuscator/Packer which use MonoCecil library for .NET applications !
It doesn't support WPF .exe !

# Screenshot

![DotNetPatcher.png](http://www.imabox.fr/a4/1428112328EF8kG658.gif)


# Features

* English UI language only
* Displays selected .exe informations (assembly name, Version, TargetRuntime, TargetCPU, SubSystemType)
* Selecting encoding chars type : Alphabetic, Dots, Invisible, Chinese, Japanese, Greek, Flowing) 
* Renaming : Namespaces, Types, Methods, Properties, Fields, Custom Attributes, Events, Parameters, ..... 
* Dependencies merging/embedding (encrypt and/or compress)
* Displays number of renamed members
* Exclusionary rules Manager
* Anti-IlDasm, Anti-Tamper, Anti-Debug, Anti-Dumping
* "System-Reflection" methods calls detection
* Public calls hidding
* Pinvoke calls hidding
* Strings encryption
* Numerics encryption
* Constants encoding
* Booleans encoding
* Invalid Metadatas
* Mild calls
* Stackflow
* Fake attributes injection
* Invalid opcodes injection
* Packer with LZX compression and encryption


# Prerequisites

* All Windows OS
* DotNet Framework 4.0
* The binary doesn't require installation


# WebSite

* [http://3dotdevcoder.blogspot.fr/](http://3dotdevcoder.blogspot.fr/)


# Credits

* jbevains : for [MonoCecil](https://github.com/jbevain/cecil) library
* Yck1509 : for [Confuser](https://confuser.codeplex.com/) project 
* Daniel Doubrovkine : for his ResourceLib library [Vestris](https://github.com/dblock/resourcelib)
* Markhor : For his Sevenzip library [Sevenzip](https://sevenzipsharp.codeplex.com/)
* Xertz : for his [Login GDI+ theme](http://xertzproductions.weebly.com/login-gdi-theme.html) which I modified a little bit
* Paupino : for some useful functions from his open source project : [NCloak](https://github.com/paupino/ncloak/)
* Mirhabi : for his IconInjector class


# Copyright

Copyright Â© 3DotDev 2008-2015


# Licence

[MIT/X11](http://en.wikipedia.org/wiki/MIT_License)



================================================
File: DotNetPatcher.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Core20Reader", "Core20Reader\Core20Reader\Core20Reader.vbproj", "{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "DotNetPatcher", "DotNetPatcher\DotNetPatcher.vbproj", "{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Helper", "Helper\Helper.vbproj", "{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Implementer", "Implementer\Implementer.vbproj", "{BC17B941-39E0-45BD-8F49-730EC6045108}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Injections", "Injections\Injections\Injections.csproj", "{2E99870D-2ADF-448B-92CE-CCE190C9134D}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Sevenzip", "Sevenzip\Sevenzip\Sevenzip.csproj", "{233FA980-EF10-4BA7-8C4A-63F5D6D09925}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "LoginTheme", "LoginTheme\LoginTheme.vbproj", "{96903FFF-8F56-478F-BF84-CDA513476D2A}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ResourceLib", "ResourceLib\ResourceLib.csproj", "{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		net_2_0_Debug|Any CPU = net_2_0_Debug|Any CPU
		net_2_0_Release|Any CPU = net_2_0_Release|Any CPU
		net_3_5_Debug|Any CPU = net_3_5_Debug|Any CPU
		net_3_5_Release|Any CPU = net_3_5_Release|Any CPU
		net_4_0_Debug|Any CPU = net_4_0_Debug|Any CPU
		net_4_0_Release|Any CPU = net_4_0_Release|Any CPU
		net_4_5_Debug|Any CPU = net_4_5_Debug|Any CPU
		net_4_5_Release|Any CPU = net_4_5_Release|Any CPU
		Release|Any CPU = Release|Any CPU
		silverlight_Debug|Any CPU = silverlight_Debug|Any CPU
		silverlight_Release|Any CPU = silverlight_Release|Any CPU
		winphone_Debug|Any CPU = winphone_Debug|Any CPU
		winphone_Release|Any CPU = winphone_Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{96903FFF-8F56-478F-BF84-CDA513476D2A}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_2_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_2_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_2_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_2_0_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_3_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_3_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_3_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_3_5_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_0_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_0_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_0_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_0_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_5_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_5_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_5_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.net_4_5_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.silverlight_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.silverlight_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.silverlight_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.silverlight_Release|Any CPU.Build.0 = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.winphone_Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.winphone_Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.winphone_Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}.winphone_Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: LICENSE
================================================
The MIT License (MIT)

Copyright (c) 2016 PhilipMo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: Core20Reader/Core20Reader.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "DotNetRenamer.Core20Reader", "DotNetRenamer.Core20Reader\DotNetRenamer.Core20Reader.vbproj", "{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: Core20Reader/Core20Reader/Core20Reader.vbproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>Core20Reader</RootNamespace>
    <AssemblyName>Core20Reader</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <OptionExplicit>On</OptionExplicit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionCompare>Binary</OptionCompare>
  </PropertyGroup>
  <PropertyGroup>
    <OptionStrict>Off</OptionStrict>
  </PropertyGroup>
  <PropertyGroup>
    <OptionInfer>On</OptionInfer>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Reader.vb" />
    <Compile Include="DataDirectory.vb" />
    <Compile Include="IReader.vb" />
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: Core20Reader/Core20Reader/DataDirectory.vb
================================================
ï»¿Imports Core20Reader.Reader

Friend Class DataDirectory

#Region " PRIVATE MEMBERS "
    Private m_Section As IMAGE_SECTION_HEADER
    Private m_SectionStartOffset As ULong
    Private m_Address As ULong
    Private m_Size As ULong
#End Region

#Region " PROPERTIES "
    Friend Property Address() As ULong
        Get
            Return m_Address
        End Get
        Set(value As ULong)
            m_Address = value
        End Set
    End Property

    Friend Property Size() As ULong
        Get
            Return m_Size
        End Get
        Set(value As ULong)
            m_Size = value
        End Set
    End Property

    Friend Property Section As IMAGE_SECTION_HEADER
        Get
            Return Me.m_Section
        End Get
        Set(value As IMAGE_SECTION_HEADER)
            m_Section = value
        End Set
    End Property

    Friend Property SectionStartOffset As ULong
        Get
            Return Me.m_SectionStartOffset
        End Get
        Set(value As ULong)
            m_SectionStartOffset = value
        End Set
    End Property
#End Region

End Class



================================================
File: Core20Reader/Core20Reader/IReader.vb
================================================
ï»¿Imports System.Drawing

Public Interface IReader

#Region " Methods "
    Sub ReadFile(filePath$)
    Function isExecutable() As Boolean
#End Region

#Region " Properties "
    ReadOnly Property isManagedFile() As Boolean
    ReadOnly Property GetSystemType As String
    ReadOnly Property GetTargetRuntime As String
    ReadOnly Property GetTargetPlatform As String
    ReadOnly Property GetMainIcon As Icon
    ReadOnly Property GetVersionInfos As FileVersionInfo
    ReadOnly Property HasInvalidSectionHeader As Boolean
#End Region

End Interface



================================================
File: Core20Reader/Core20Reader/Reader.vb
================================================
ï»¿Imports System.Runtime.InteropServices
Imports System.IO
Imports System.Text
Imports System.Drawing

' Building a dotnet Disassembler                              : http://codingwithspike.wordpress.com/2012/07/20/building-a-net-disassembler-part-1/
' x86 Disassembly-Windows Executable Files                    : http://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files
' .NET File Format                                            : http://www.codeproject.com/KB/dotnet/dotnetformat.aspx
' .NET File Format                                            : http://ntcore.com/files/dotnetformat.htm
' The Microsoft papers (the Bible)                            : http://msdn.microsoft.com/en-us/library/gg463119.aspx
Public Class Reader
    Implements IReader

#Region " CONSTANTS "
    Private Structure ImageConstants
        ' MZ
        Const IMAGE_DOS_SIGNATURE As UShort = 23117
        ' PE00
        Const IMAGE_NT_SIGNATURE As UInteger = 17744
        ' Intel 386
        Const IMAGE_FILE_MACHINE_I386 As UShort = 332
        ' Intel 64
        Const IMAGE_FILE_MACHINE_IA64 As UShort = 512
        ' AMD64
        Const IMAGE_FILE_MACHINE_AMD64 As UShort = 34404
        ' PE32
        Const IMAGE_NT_OPTIONAL_HDR32_MAGIC As UShort = 267
        ' PE32+
        Const IMAGE_NT_OPTIONAL_HDR64_MAGIC As UShort = 523
        ' DLL or EXE
        Const IMAGE_FILE_DLL As UShort = 8192
        ' 32 BITS HEADER
        Const IMAGE_FILE_32BIT_MACHINE As UShort = 256
    End Structure
#End Region

#Region " PRIVATE MEMBERS "
    ' The selected file
    Private m_filePath As String = String.Empty
    ' The DOS header
    Private m_DosHeader As IMAGE_DOS_HEADER
    ' The Section header
    Private m_SectionHeader As IMAGE_SECTION_HEADER
    ' The NT Header 32 Bits
    Private m_NTHeader32 As IMAGE_NT_HEADERS32
    ' The NT Header 64 Bits
    Private m_NTHeader64 As IMAGE_NT_HEADERS64
    ' The file header
    Private Shared m_FileHeader As IMAGE_FILE_HEADER
    ' The Cli Header
    Private Shared m_CoreHeader As IMAGE_COR20_HEADER
    ' Data directories
    Private Shared m_dataDirectories As Dictionary(Of Integer, DataDirectory)
    ' Sections
    Private Shared m_sections As Dictionary(Of Integer, IMAGE_SECTION_HEADER)
    ' The Metadata header
    Private Shared m_metadata As METADATA_HEADER
    ' The target Runtime
    Private Shared m_TargetFramework As String
    ' The signature
    Private Shared m_PlatformSignature As String
    ' The entrypoint of the file
    Private Shared m_entryPoint As String

    Private Shared m_hasInvalidSectionHeader As Boolean

    Private Shared m_validSectionHeaders As String() = New String(3) {".text", ".sdata", ".rsrc", ".reloc"}

    Private Shared m_fileVersionInfos As FileVersionInfo

    Private Shared m_resourcesDataTable As IMAGE_DATA_DIRECTORY

    Private Shared m_hasResourcesDataDirectory As Boolean

    Private Shared m_resourcesDataDirectorySection As IMAGE_SECTION_HEADER

    Private Shared m_mainIcon As Icon
#End Region

#Region " PUBLIC PROPERTIES "
    ''' <summary>
    ''' Gets the selected file
    ''' </summary>
    Public ReadOnly Property FilePath() As String
        Get
            Return m_filePath
        End Get
    End Property

    ''' <summary>
    ''' Gets the AddressOfEntryPoint from optionalHeader
    ''' </summary>
    Public ReadOnly Property GetAddressOfEntryPoint() As String
        Get
            Return m_entryPoint
        End Get
    End Property

    ''' <summary>
    ''' Verifying executable flag from IMAGE_FILE_HEADER Characteristics 
    ''' </summary>
    Public Function isExecutable() As Boolean Implements IReader.isExecutable
        If (m_FileHeader.Characteristics And ImageConstants.IMAGE_FILE_DLL) <> 0 Then
            Return False
        End If
        Return True
    End Function

    ''' <summary>
    ''' Checks if the file is DotNet testing the existence of the DataDirectory 14 and its size
    ''' </summary>
    Public ReadOnly Property isManagedFile() As Boolean Implements IReader.isManagedFile
        Get
            Return (If((m_dataDirectories.Count >= 14 And m_dataDirectories.Item(14).Size > 0) = True, True, False))
        End Get
    End Property

    ''' <summary>
    ''' Gets the file header
    ''' </summary>
    Friend ReadOnly Property FileHeader() As IMAGE_FILE_HEADER
        Get
            Return m_FileHeader
        End Get
    End Property

    ''' <summary>
    ''' Gets the 64 Bits Image_NT_header 
    ''' </summary>
    Friend ReadOnly Property ImageNtHeaders64() As IMAGE_NT_HEADERS64
        Get
            Return m_NTHeader64
        End Get
    End Property

    ''' <summary>
    ''' Gets the 32 Bits Image_NT_header 
    ''' </summary>
    Friend ReadOnly Property ImageNtHeaders32() As IMAGE_NT_HEADERS32
        Get
            Return m_NTHeader32
        End Get
    End Property

    ''' <summary>
    ''' Gets the Core20_Header. Allow to get the flag "Required32Bits" to determine the AnyCPU file capability.
    ''' </summary>
    Friend ReadOnly Property Core20Header() As IMAGE_COR20_HEADER
        Get
            Return m_CoreHeader
        End Get
    End Property

    ''' <summary>
    ''' Gets the Metadata_Header. Allow to get the target Runtime of the file (Framework version)
    ''' </summary>
    Friend ReadOnly Property MetadataHeader() As METADATA_HEADER
        Get
            Return m_metadata
        End Get
    End Property

    ''' <summary>
    ''' Gets the target systemType : Forms or Gui only ! Modify it as your own !
    ''' </summary>
    Public ReadOnly Property GetSystemType() As String Implements IReader.GetSystemType
        Get
            If m_PlatformSignature = "x64" Then
                If m_NTHeader64.OptionalHeader.Subsystem = SubSystemTypes.IMAGE_SUBSYSTEM_WINDOWS_GUI Then
                    Return "Forms"
                ElseIf m_NTHeader64.OptionalHeader.Subsystem = SubSystemTypes.IMAGE_SUBSYSTEM_WINDOWS_CUI Then
                    Return "Console"
                End If
            Else
                If m_NTHeader32.OptionalHeader.Subsystem = SubSystemTypes.IMAGE_SUBSYSTEM_WINDOWS_GUI Then
                    Return "Forms"
                ElseIf m_NTHeader32.OptionalHeader.Subsystem = SubSystemTypes.IMAGE_SUBSYSTEM_WINDOWS_CUI Then
                    Return "Console"
                End If
            End If
            Return "Unknown"
        End Get
    End Property

    ''' <summary>
    ''' Gets the targetplatform of the file : (x64, x32, AnyCPU, Itanium)
    ''' </summary>
    Public ReadOnly Property GetTargetPlatform() As String Implements IReader.GetTargetPlatform
        Get
            If m_FileHeader.Machine = MachineType.x64 Then
                Return "x64"
            ElseIf m_FileHeader.Machine = MachineType.I386 Then
                If CBool(m_CoreHeader.Flags = Reader.RuntimeFlags.Required32Bit) = True Then
                    Return "x32"
                Else
                    Return "AnyCPU"
                End If
            ElseIf m_FileHeader.Machine = MachineType.Itanium Then
                Return "Itanium"
            End If
            Return ""
        End Get
    End Property

    ''' <summary>
    ''' Gets the target Runtime of the file (Framework version)
    ''' </summary>
    Public ReadOnly Property GetTargetRuntime() As String Implements IReader.GetTargetRuntime
        Get
            Return If(m_TargetFramework = String.Empty, "Unknown", m_TargetFramework)
        End Get
    End Property

    ''' <summary>
    ''' Gets if the file header is 32 bit or not. Seems to be the same as "Required32Bits" flag from the CliHeader !
    ''' </summary>
    Public ReadOnly Property Is32BitHeader() As Boolean
        Get
            Return (m_FileHeader.Characteristics And ImageConstants.IMAGE_FILE_32BIT_MACHINE) = ImageConstants.IMAGE_FILE_32BIT_MACHINE
        End Get
    End Property

    ''' <summary>
    ''' Gets invalid Sections_Header. Allow to check if FileHeader has invalid sectionheader
    ''' </summary>
    Public ReadOnly Property HasInvalidSectionHeader() As Boolean Implements IReader.HasInvalidSectionHeader
        Get
            Return m_hasInvalidSectionHeader
        End Get
    End Property

    Public ReadOnly Property GetVersionInfos As FileVersionInfo Implements IReader.GetVersionInfos
        Get
            Return m_fileVersionInfos
        End Get
    End Property

    Public ReadOnly Property HasResourcesDataDirectory() As Boolean
        Get
            Return m_hasResourcesDataDirectory
        End Get
    End Property

    Public ReadOnly Property GetMainIcon() As Icon Implements IReader.GetMainIcon
        Get
            Return m_mainIcon
        End Get
    End Property

#End Region

#Region " PRIVATE METHODS "
    ''' <summary>
    ''' Convert numeric value to ASCII chars. 
    ''' </summary>
    Private Shared Function ConvertToString(str As Object) As String
        Return System.Text.ASCIIEncoding.ASCII.GetString(BitConverter.GetBytes(str))
    End Function

    ''' <summary>
    ''' Reading DataDirectories and assign to a dictionary. Usually 16 entries !
    ''' </summary>
    Private Sub ReadDataDirectories(reader As BinaryReader, numberOfRva%)
        m_dataDirectories = New Dictionary(Of Integer, DataDirectory)
        'MsgBox(numberOfRva.ToString)
        For i As Integer = 0 To If(numberOfRva < 16, 16, numberOfRva - 1)
            m_dataDirectories.Add(i, New DataDirectory() With { _
                 .Address = reader.ReadUInt32(), _
                 .Size = reader.ReadUInt32() _
            })
        Next
    End Sub

    ''' <summary>
    ''' Looking for which section points the DataDirectory !
    ''' </summary>
    ''' <returns>the start Offset</returns>
    Private Function ReadVirtualDirectory(dataDirectory As DataDirectory) As DataDirectory
        For Each s In m_sections
            ' Find the section whose virtual address range contains the data directory's RVA.
            If s.Value.VirtualAddress <= dataDirectory.Address AndAlso dataDirectory.Address <= s.Value.VirtualAddress + s.Value.VirtualSize Then
                ' Calculate the offset into the file.
                dataDirectory.SectionStartOffset = s.Value.PointerToRawData + (dataDirectory.Address - s.Value.VirtualAddress)
                ' Assign the current section
                dataDirectory.Section = s.Value
                Exit For
            End If
        Next
        Return dataDirectory
    End Function

    Private Function checkInvalidSectionHeader() As Boolean
        If m_sections.Count <> 0 Then
            If m_sections.GroupBy(Function(x) x.Value).Where(Function(x) x.Count() > 1).Count <> 0 Then
                Return True
            End If
            For Each sect In m_sections.Values
                If Not m_validSectionHeaders.Contains(sect.GetSectionName.ToLower) Then
                    Return True
                End If
            Next
        Else
            Return True
        End If
        Return False
    End Function

    ''' <summary>
    ''' Reading sections and assign to a dictionary
    ''' </summary>
    Private Sub ReadSections(reader As BinaryReader)
        m_sections = New Dictionary(Of Integer, IMAGE_SECTION_HEADER)
        For i As Integer = 0 To m_FileHeader.NumberOfSections - 1
            m_SectionHeader = FromBinaryReader(Of IMAGE_SECTION_HEADER)(reader)
            m_sections.Add(i, m_SectionHeader)
        Next
        m_hasInvalidSectionHeader = checkInvalidSectionHeader()

        If m_hasInvalidSectionHeader = False Then
            m_resourcesDataDirectorySection = m_sections.Values.First(Function(x) x.GetSectionName = ".rsrc")
            m_hasResourcesDataDirectory = True
        End If
    End Sub

    ''' <summary>
    ''' Reading Cli and Metadata Header.
    ''' </summary>
    Private Sub ReadClrAndMetadataHeader(reader As BinaryReader)
        If m_dataDirectories(14).Size > 0 Then
            reader.BaseStream.Position = ReadVirtualDirectory(m_dataDirectories(14)).SectionStartOffset
            m_CoreHeader = FromBinaryReader(Of IMAGE_COR20_HEADER)(reader)
            Dim m_metadatRoot = New DataDirectory() With { _
                                                             .Address = m_CoreHeader.MetaData.VirtualAddress, _
                                                             .Size = m_CoreHeader.MetaData.Size}
            reader.BaseStream.Position = ReadVirtualDirectory(m_metadatRoot).SectionStartOffset
            m_metadata = FromBinaryReader(Of METADATA_HEADER)(reader)
        End If
    End Sub

    ''' <summary>
    ''' Reads in a block from a file and converts it to the structure
    ''' </summary>
    ''' <typeparam name="T">type of the struct to read</typeparam>
    ''' <param name="reader">reader</param>
    ''' <returns>a instance of the struct T cast from the data in the reader</returns>
    Friend Shared Function FromBinaryReader(Of T)(reader As BinaryReader) As T
        Dim bytes As Byte() = reader.ReadBytes(Marshal.SizeOf(GetType(T)))
        Dim gch As GCHandle = GCHandle.Alloc(bytes, GCHandleType.Pinned)
        Dim struct As T = DirectCast(Marshal.PtrToStructure(gch.AddrOfPinnedObject(), GetType(T)), T)
        gch.Free()
        Return struct
    End Function
#End Region

#Region " ####################### IMAGE FILE CONTENT ####################### "

#Region " IMAGE_DOS_HEADER "
    ''' <summary>
    ''' DOS .EXE Header
    ''' </summary>
    Private Structure IMAGE_DOS_HEADER
        ''' <summary>
        ''' Magic number
        ''' </summary>
        Friend MagicNumber As UShort
        ''' <summary>
        ''' Bytes on last page of file
        ''' </summary>
        Friend BytesOnLastPage As UShort
        ''' <summary>
        ''' Pages in file
        ''' </summary>
        Friend PagesInFile As UShort
        ''' <summary>
        ''' Relocations
        ''' </summary>
        Friend Relocations As UShort
        ''' <summary>
        ''' Size of header in paragraphs
        ''' </summary>
        Friend SizeOfHeader As UShort
        ''' <summary>
        ''' Minimum extra paragraphs needed
        ''' </summary>
        Friend MinExtraAlloc As UShort
        ''' <summary>
        ''' Maximum extra paragraphs needed
        ''' </summary>
        Friend MaxExtraAlloc As UShort
        ''' <summary>
        ''' Initial (relative) SS value
        ''' </summary>
        Friend SS As UShort
        ''' <summary>
        ''' Initial SP value
        ''' </summary>
        Friend SP As UShort
        ''' <summary>
        ''' Checksum
        ''' </summary>
        Friend Checksum As UShort
        ''' <summary>
        ''' Initial IP value
        ''' </summary>
        Friend IP As UShort
        ''' <summary>
        ''' Initial (relative) CS value
        ''' </summary>
        Friend CS As UShort
        ''' <summary>
        ''' File address of relocation table
        ''' </summary>
        Friend RelocationTableAddress As UShort
        ''' <summary>
        ''' Overlay number
        ''' </summary>
        Friend OverlayNumber As UShort
        ''' <summary>
        ''' Reserved words
        ''' </summary>
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=4)> _
        Friend ReservedWords As UShort()
        ''' <summary>
        ''' OEM identifier (for OEMInformation)
        ''' </summary>
        Friend OEMIdentifier As UShort
        ''' <summary>
        ''' OEM information (OEMIdentifier specific) 
        ''' </summary>
        Friend OEMInformation As UShort
        ''' <summary>
        ''' Reserved words
        ''' </summary>
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=10)> _
        Friend ReservedWords2 As UShort()
        ''' <summary>
        ''' File address of new exe header
        ''' </summary>
        Friend ExeHeaderAddress As UShort

        Friend ReadOnly Property isValidDosHeader() As Boolean
            Get
                Return ConvertToString(MagicNumber) = "MZ"
            End Get
        End Property

    End Structure
#End Region

#Region " IMAGE_NT_HEADERS "

#Region " IMAGE_NT_HEADERS32 "
    Friend Structure IMAGE_NT_HEADERS32
        <FieldOffset(0)> _
        Friend Signature As UInteger
        <FieldOffset(4)> _
        Friend FileHeader As IMAGE_FILE_HEADER
        <FieldOffset(24)> _
        Friend OptionalHeader As IMAGE_OPTIONAL_HEADER32

        Friend ReadOnly Property GetSignature() As String
            Get
                Return ConvertToString(Signature) & vbNullChar & vbNullChar & _
                  ConvertToString(If(isX32 = True, Reader.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC, If(isX64 = True, Reader.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC, "")))
            End Get
        End Property

        Private ReadOnly Property _GetSignature() As String
            Get
                Return ConvertToString(Signature)
            End Get
        End Property

        Friend ReadOnly Property isValid() As Boolean
            Get
                Return _GetSignature = "PE" & vbNullChar & vbNullChar AndAlso (isX32 Or isX64)
            End Get
        End Property

        Private ReadOnly Property isX32() As Boolean
            Get
                Return OptionalHeader.Magic = Reader.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
            End Get
        End Property

        Private ReadOnly Property isX64() As Boolean
            Get

                Return OptionalHeader.Magic = Reader.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
            End Get
        End Property

        Friend ReadOnly Property GetDataDirectories As Dictionary(Of Integer, DataDirectory)
            Get
                Return m_dataDirectories
            End Get
        End Property

        Friend ReadOnly Property isManaged() As Boolean
            Get
                Return (If((m_dataDirectories.Count >= 14 AndAlso m_dataDirectories.Item(14).Size > 0) = True, True, False))
            End Get
        End Property
    End Structure
#End Region

#Region " IMAGE_NT_HEADERS64 "
    Friend Structure IMAGE_NT_HEADERS64
        <FieldOffset(0)> _
        Friend Signature As UInteger
        <FieldOffset(4)> _
        Friend FileHeader As IMAGE_FILE_HEADER
        <FieldOffset(24)> _
        Friend OptionalHeader As IMAGE_OPTIONAL_HEADER64

        Friend ReadOnly Property GetSignature() As String
            Get
                Return ConvertToString(Signature) & vbNullChar & vbNullChar & _
                  ConvertToString(If(isX32 = True, Reader.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC, If(isX64 = True, Reader.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC, "")))
            End Get
        End Property

        Private ReadOnly Property _GetSignature() As String
            Get
                Return ConvertToString(Signature)
            End Get
        End Property

        Friend ReadOnly Property isValid() As Boolean
            Get
                Return _GetSignature = "PE" & vbNullChar & vbNullChar AndAlso (isX32 Or isX64)
            End Get
        End Property

        Friend ReadOnly Property isX32() As Boolean
            Get
                Return OptionalHeader.Magic = Reader.MagicType.IMAGE_NT_OPTIONAL_HDR32_MAGIC
            End Get
        End Property

        Private ReadOnly Property isX64() As Boolean
            Get
                Return OptionalHeader.Magic = Reader.MagicType.IMAGE_NT_OPTIONAL_HDR64_MAGIC
            End Get
        End Property

        Private ReadOnly Property GetDataDirectories As Dictionary(Of Integer, DataDirectory)
            Get
                Return m_dataDirectories
            End Get
        End Property

        Friend ReadOnly Property isManaged() As Boolean
            Get
                Return (If((m_dataDirectories.Count >= 14 AndAlso m_dataDirectories.Item(14).Size > 0) = True, True, False))
            End Get
        End Property
    End Structure
#End Region

#Region " FILE_HEADER "
    Friend Structure IMAGE_FILE_HEADER
        Friend Machine As MachineType
        Friend NumberOfSections As UShort
        Friend TimeDateStamp As UInteger
        Friend PointerToSymbolTable As UInteger
        Friend NumberOfSymbols As UInteger
        Friend SizeOfOptionalHeader As UShort
        Friend Characteristics As IFHCharacteristics
    End Structure

    Friend Enum MachineType As UShort
        Native = 0
        I386 = &H14C
        Itanium = &H200
        x64 = &H8664
    End Enum

    Friend Enum IFHCharacteristics As UShort
        RelocationInformationStrippedFromFile = &H1
        Executable = &H2
        LineNumbersStripped = &H4
        SymbolTableStripped = &H8
        AggresiveTrimWorkingSet = &H10
        LargeAddressAware = &H20
        Supports16Bit = &H40
        ReservedBytesWo = &H80
        Supports32Bit = &H100
        DebugInfoStripped = &H200
        RunFromSwapIfInRemovableMedia = &H400
        RunFromSwapIfInNetworkMedia = &H800
        IsSytemFile = &H1000
        IsDLL = &H2000
        IsOnlyForSingleCoreProcessor = &H4000
        BytesOfWordReserved = &H8000
    End Enum

    Friend Enum MagicType As UShort
        IMAGE_NT_OPTIONAL_HDR32_MAGIC = &H10B
        IMAGE_NT_OPTIONAL_HDR64_MAGIC = &H20B
    End Enum
#End Region

#Region " OPTIONAL_HEADER "

#Region " OPTIONAL_HEADER_32 "
    Friend Structure IMAGE_OPTIONAL_HEADER32
        <FieldOffset(0)> _
        Friend Magic As MagicType

        <FieldOffset(2)> _
        Friend MajorLinkerVersion As Byte

        <FieldOffset(3)> _
        Friend MinorLinkerVersion As Byte

        <FieldOffset(4)> _
        Friend SizeOfCode As UInteger

        <FieldOffset(8)> _
        Friend SizeOfInitializedData As UInteger

        <FieldOffset(12)> _
        Friend SizeOfUninitializedData As UInteger

        <FieldOffset(16)> _
        Friend AddressOfEntryPoint As UInteger

        <FieldOffset(20)> _
        Friend BaseOfCode As UInteger

        ' PE32 contains this additional field
        <FieldOffset(24)> _
        Friend BaseOfData As UInteger

        <FieldOffset(28)> _
        Friend ImageBase As UInteger

        <FieldOffset(32)> _
        Friend SectionAlignment As UInteger

        <FieldOffset(36)> _
        Friend FileAlignment As UInteger

        <FieldOffset(40)> _
        Friend MajorOperatingSystemVersion As UShort

        <FieldOffset(42)> _
        Friend MinorOperatingSystemVersion As UShort

        <FieldOffset(44)> _
        Friend MajorImageVersion As UShort

        <FieldOffset(46)> _
        Friend MinorImageVersion As UShort

        <FieldOffset(48)> _
        Friend MajorSubsystemVersion As UShort

        <FieldOffset(50)> _
        Friend MinorSubsystemVersion As UShort

        <FieldOffset(52)> _
        Friend Win32VersionValue As UInteger

        <FieldOffset(56)> _
        Friend SizeOfImage As UInteger

        <FieldOffset(60)> _
        Friend SizeOfHeaders As UInteger

        <FieldOffset(64)> _
        Friend CheckSum As UInteger

        <FieldOffset(68)> _
        Friend Subsystem As SubSystemTypes

        <FieldOffset(70)> _
        Friend DllCharacteristics As DllCharacteristicsType

        <FieldOffset(72)> _
        Friend SizeOfStackReserve As UInteger

        <FieldOffset(76)> _
        Friend SizeOfStackCommit As UInteger

        <FieldOffset(80)> _
        Friend SizeOfHeapReserve As UInteger

        <FieldOffset(84)> _
        Friend SizeOfHeapCommit As UInteger

        <FieldOffset(88)> _
        Friend LoaderFlags As UInteger

        <FieldOffset(92)> _
        Friend NumberOfRvaAndSizes As UInteger

        <FieldOffset(96)> _
        Friend ExportTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(104)> _
        Friend ImportTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(112)> _
        Friend ResourceTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(120)> _
        Friend ExceptionTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(128)> _
        Friend CertificateTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(136)> _
        Friend BaseRelocationTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(144)> _
        Friend Debug As IMAGE_DATA_DIRECTORY

        <FieldOffset(152)> _
        Friend Architecture As IMAGE_DATA_DIRECTORY

        <FieldOffset(160)> _
        Friend GlobalPtr As IMAGE_DATA_DIRECTORY

        <FieldOffset(168)> _
        Friend TLSTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(176)> _
        Friend LoadConfigTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(184)> _
        Friend BoundImport As IMAGE_DATA_DIRECTORY

        <FieldOffset(192)> _
        Friend IAT As IMAGE_DATA_DIRECTORY

        <FieldOffset(200)> _
        Friend DelayImportDescriptor As IMAGE_DATA_DIRECTORY

        <FieldOffset(208)> _
        Friend CLRRuntimeHeader As IMAGE_DATA_DIRECTORY

        <FieldOffset(216)> _
        Friend Reserved As IMAGE_DATA_DIRECTORY
    End Structure
#End Region

#Region " OPTIONAL_HEADER_64 "
    <StructLayout(LayoutKind.Explicit)> _
    Friend Structure IMAGE_OPTIONAL_HEADER64
        <FieldOffset(0)> _
        Friend Magic As MagicType

        <FieldOffset(2)> _
        Friend MajorLinkerVersion As Byte

        <FieldOffset(3)> _
        Friend MinorLinkerVersion As Byte

        <FieldOffset(4)> _
        Friend SizeOfCode As UInteger

        <FieldOffset(8)> _
        Friend SizeOfInitializedData As UInteger

        <FieldOffset(12)> _
        Friend SizeOfUninitializedData As UInteger

        <FieldOffset(16)> _
        Friend AddressOfEntryPoint As UInteger

        <FieldOffset(20)> _
        Friend BaseOfCode As UInteger

        <FieldOffset(24)> _
        Friend ImageBase As ULong

        <FieldOffset(32)> _
        Friend SectionAlignment As UInteger

        <FieldOffset(36)> _
        Friend FileAlignment As UInteger

        <FieldOffset(40)> _
        Friend MajorOperatingSystemVersion As UShort

        <FieldOffset(42)> _
        Friend MinorOperatingSystemVersion As UShort

        <FieldOffset(44)> _
        Friend MajorImageVersion As UShort

        <FieldOffset(46)> _
        Friend MinorImageVersion As UShort

        <FieldOffset(48)> _
        Friend MajorSubsystemVersion As UShort

        <FieldOffset(50)> _
        Friend MinorSubsystemVersion As UShort

        <FieldOffset(52)> _
        Friend Win32VersionValue As UInteger

        <FieldOffset(56)> _
        Friend SizeOfImage As UInteger

        <FieldOffset(60)> _
        Friend SizeOfHeaders As UInteger

        <FieldOffset(64)> _
        Friend CheckSum As UInteger

        <FieldOffset(68)> _
        Friend Subsystem As SubSystemTypes

        <FieldOffset(70)> _
        Friend DllCharacteristics As DllCharacteristicsType

        <FieldOffset(72)> _
        Friend SizeOfStackReserve As ULong

        <FieldOffset(80)> _
        Friend SizeOfStackCommit As ULong

        <FieldOffset(88)> _
        Friend SizeOfHeapReserve As ULong

        <FieldOffset(96)> _
        Friend SizeOfHeapCommit As ULong

        <FieldOffset(104)> _
        Friend LoaderFlags As UInteger

        <FieldOffset(108)> _
        Friend NumberOfRvaAndSizes As UInteger

        <FieldOffset(112)> _
        Friend ExportTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(120)> _
        Friend ImportTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(128)> _
        Friend ResourceTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(136)> _
        Friend ExceptionTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(144)> _
        Friend CertificateTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(152)> _
        Friend BaseRelocationTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(160)> _
        Friend Debug As IMAGE_DATA_DIRECTORY

        <FieldOffset(168)> _
        Friend Architecture As IMAGE_DATA_DIRECTORY

        <FieldOffset(176)> _
        Friend GlobalPtr As IMAGE_DATA_DIRECTORY

        <FieldOffset(184)> _
        Friend TLSTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(192)> _
        Friend LoadConfigTable As IMAGE_DATA_DIRECTORY

        <FieldOffset(200)> _
        Friend BoundImport As IMAGE_DATA_DIRECTORY

        <FieldOffset(208)> _
        Friend IAT As IMAGE_DATA_DIRECTORY

        <FieldOffset(216)> _
        Friend DelayImportDescriptor As IMAGE_DATA_DIRECTORY

        <FieldOffset(224)> _
        Friend CLRRuntimeHeader As IMAGE_DATA_DIRECTORY

        <FieldOffset(232)> _
        Friend Reserved As IMAGE_DATA_DIRECTORY
    End Structure
#End Region

#Region " DATA_DIRECTORIES "
    Friend Structure IMAGE_DATA_DIRECTORY
        Friend VirtualAddress As Integer
        Friend Size As Integer
    End Structure

    Friend Structure IMAGE_COR20_HEADER
        ' Header versioning
        Friend cb As UInteger
        Friend MajorRuntimeVersion As UShort
        Friend MinorRuntimeVersion As UShort
        ' Symbol table and startup information
        Friend MetaData As IMAGE_DATA_DIRECTORY
        Friend Flags As UInteger
        Friend EntryPointToken As UInteger
        ' Binding information
        Friend Resources As IMAGE_DATA_DIRECTORY
        Friend StrongNameSignature As IMAGE_DATA_DIRECTORY
        ' Regular fixup and binding information
        Friend CodeManagerTable As IMAGE_DATA_DIRECTORY
        Friend VTableFixups As IMAGE_DATA_DIRECTORY
        Friend ExportAddressTableJumps As IMAGE_DATA_DIRECTORY
        ' Precompiled image info (internal use only - set to zero)
        Friend ManagedNativeHeader As IMAGE_DATA_DIRECTORY
    End Structure

    Friend Enum RuntimeFlags
        ILOnly = 1
        Required32Bit = 2
        NativeEntryPoint = &H10
        ILLibrary = 4
        StrongNameSigned = 8
        TrackDebugData = &H10000
    End Enum

    Friend Structure METADATA_HEADER
        Public Signature As UInt32
        Public MajorVersion As UInt16
        Public MinorVersion As UInt16
        Public Reserved As UInt32
        Public VersionLength As UInt32
        Public VersionString As UInt32
        Public Flags As UInt16
        Public NumberOfStreams As UInt16

        Friend ReadOnly Property GetTargetFramework() As String
            Get
                Return ConvertToString(VersionString)
            End Get
        End Property
    End Structure
#End Region

    Friend Enum SubSystemTypes As UShort
        IMAGE_SUBSYSTEM_UNKNOWN = 0
        IMAGE_SUBSYSTEM_NATIVE = 1
        IMAGE_SUBSYSTEM_WINDOWS_GUI = 2
        IMAGE_SUBSYSTEM_WINDOWS_CUI = 3
        IMAGE_SUBSYSTEM_POSIX_CUI = 7
        IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9
        IMAGE_SUBSYSTEM_EFI_APPLICATION = 10
        IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11
        IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12
        IMAGE_SUBSYSTEM_EFI_ROM = 13
        IMAGE_SUBSYSTEM_XBOX = 14
    End Enum

    Friend Enum DllCharacteristicsType As UShort
        RES_0 = &H1
        RES_1 = &H2
        RES_2 = &H4
        RES_3 = &H8
        IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE = &H40
        IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY = &H80
        IMAGE_DLL_CHARACTERISTICS_NX_COMPAT = &H100
        IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = &H200
        IMAGE_DLLCHARACTERISTICS_NO_SEH = &H400
        IMAGE_DLLCHARACTERISTICS_NO_BIND = &H800
        RES_4 = &H1000
        IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = &H2000
        IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = &H8000
    End Enum
#End Region

#End Region

#Region " IMAGE_SECTION_HEADERS "
    Friend Structure IMAGE_SECTION_HEADER
        <FieldOffset(0)> _
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=8)> _
        Private Name As Char()

        <FieldOffset(8)> _
        Friend VirtualSize As UInt32

        <FieldOffset(12)> _
        Friend VirtualAddress As UInt32

        <FieldOffset(16)> _
        Friend SizeOfRawData As UInt32

        <FieldOffset(20)> _
        Friend PointerToRawData As UInt32

        <FieldOffset(24)> _
        Friend PointerToRelocations As UInt32

        <FieldOffset(28)> _
        Friend PointerToLinenumbers As UInt32

        <FieldOffset(32)> _
        Friend NumberOfRelocations As UInt16

        <FieldOffset(34)> _
        Friend NumberOfLinenumbers As UInt16

        <FieldOffset(36)> _
        Friend Characteristics As DataSectionFlags

        Friend ReadOnly Property GetSectionName() As String
            Get
                Return New String(Name.TakeWhile(Function(b) Not b.Equals(ControlChars.NullChar)).ToArray())
            End Get
        End Property

        Friend Enum DataSectionFlags As UInteger
            ''' <summary>Reserved for future use.</summary>
            TypeReg = &H0
            ''' <summary>Reserved for future use.</summary>
            TypeDsect = &H1
            ''' <summary>Reserved for future use.</summary>
            TypeNoLoad = &H2
            ''' <summary>Reserved for future use.</summary>
            TypeGroup = &H4
            ''' <summary>
            ''' The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES. This is valid only for object files.
            ''' </summary>
            TypeNoPadded = &H8
            ''' <summary>Reserved for future use.</summary>
            TypeCopy = &H10
            ''' <summary>The section contains executable code.</summary>
            ContentCode = &H20
            ''' <summary>The section contains initialized data.</summary>
            ContentInitializedData = &H40
            ''' <summary>The section contains uninitialized data.</summary>
            ContentUninitializedData = &H80
            ''' <summary>Reserved for future use.</summary>
            LinkOther = &H100
            ''' <summary>The section contains comments or other information. The .drectve section has this type. This is valid for object files only.</summary>
            LinkInfo = &H200
            ''' <summary>Reserved for future use.</summary>
            TypeOver = &H400
            ''' <summary>The section will not become part of the image. This is valid only for object files.</summary>
            LinkRemove = &H800
            ''' <summary>
            ''' The section contains COMDAT data. For more information, see section 5.5.6, COMDAT Sections (Object Only). This is valid only for object files.
            ''' </summary>
            LinkComDat = &H1000
            ''' <summary>Reset speculative exceptions handling bits in the TLB entries for this section.</summary>
            NoDeferSpecExceptions = &H4000
            ''' <summary>The section contains data referenced through the global pointer (GP).</summary>
            RelativeGP = &H8000
            ''' <summary>Reserved for future use.</summary>
            MemPurgeable = &H20000
            ''' <summary>Reserved for future use.</summary>
            Memory16Bit = &H20000
            ''' <summary>Reserved for future use.</summary>
            MemoryLocked = &H40000
            ''' <summary>Reserved for future use.</summary>
            MemoryPreload = &H80000
            ''' <summary>Align data on a 1-byte boundary. Valid only for object files.</summary>
            Align1Bytes = &H100000
            ''' <summary>Align data on a 2-byte boundary. Valid only for object files.</summary>
            Align2Bytes = &H200000
            ''' <summary>Align data on a 4-byte boundary. Valid only for object files. </summary>
            Align4Bytes = &H300000
            ''' <summary>Align data on an 8-byte boundary. Valid only for object files.</summary>
            Align8Bytes = &H400000
            ''' <summary>Align data on a 16-byte boundary. Valid only for object files.</summary>
            Align16Bytes = &H500000
            ''' <summary>Align data on a 32-byte boundary. Valid only for object files.</summary>
            Align32Bytes = &H600000
            ''' <summary>Align data on a 64-byte boundary. Valid only for object files.</summary>
            Align64Bytes = &H700000
            ''' <summary>Align data on a 128-byte boundary. Valid only for object files.</summary>
            Align128Bytes = &H800000
            ''' <summary>Align data on a 256-byte boundary. Valid only for object files.</summary>
            Align256Bytes = &H900000
            ''' <summary>Align data on a 512-byte boundary. Valid only for object files.</summary>
            Align512Bytes = &HA00000
            ''' <summary>Align data on a 1024-byte boundary. Valid only for object files.</summary>
            Align1024Bytes = &HB00000
            ''' <summary>Align data on a 2048-byte boundary. Valid only for object files.</summary>
            Align2048Bytes = &HC00000
            ''' <summary>Align data on a 4096-byte boundary. Valid only for object files.</summary>
            Align4096Bytes = &HD00000
            ''' <summary>Align data on an 8192-byte boundary. Valid only for object files.</summary>
            Align8192Bytes = &HE00000
            ''' <summary>The section contains extended relocations.</summary>
            LinkExtendedRelocationOverflow = &H1000000
            ''' <summary>The section can be discarded as needed.</summary>
            MemoryDiscardable = &H2000000
            ''' <summary>The section cannot be cached.</summary>
            MemoryNotCached = &H4000000
            ''' <summary>The section is not pageable.</summary>
            MemoryNotPaged = &H8000000
            ''' <summary>The section can be shared in memory.</summary>
            MemoryShared = &H10000000
            ''' <summary>The section can be executed as code.</summary>
            MemoryExecute = &H20000000
            ''' <summary>The section can be read.</summary>
            MemoryRead = &H40000000
            ''' <summary>The section can be written to.</summary>
            MemoryWrite = &H80000000UI
        End Enum
    End Structure
#End Region

#End Region

#Region " ########################## ICON CONTENT ########################## "

#Region " ICON READER "
    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure GRPICONDIR
        Public idReserved As UShort
        ' Reserved (must be 0)
        Public idType As UShort
        ' Resource type (1 for icons)
        Public idCount As UShort
        ' How many images?
    End Structure
    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure GRPICONDIRENTRY
        Public Width As Byte
        ' Width, in pixels, of the image
        Public Height As Byte
        ' Height, in pixels, of the image
        Public ColorCount As Byte
        ' Number of colors in image (0 if >=8bpp)
        Public Reserved As Byte
        ' Reserved
        Public Planes As UShort
        ' Color Planes
        Public BitCount As UShort
        ' Bits per pixel
        Public BytesInRes As UInteger
        ' how many bytes in this resource?
        Public ID As UShort
        ' the ID
    End Structure
    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure ICON_HEADER
        Public idReserved As UShort
        ' Reserved (must be 0)
        Public idType As UShort
        ' Resource Type (1 for icons)
        Public idCount As UShort
        ' How many images?
    End Structure
    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure ICON_DIRECTORY_ENTRY
        Public Width As Byte
        ' Width, in pixels, of the image
        Public Height As Byte
        ' Height, in pixels, of the image
        Public ColorCount As Byte
        ' Number of colors in image (0 if >=8bpp)
        Public Reserved As Byte
        ' Reserved ( must be 0)
        Public Planes As UShort
        ' Color Planes
        Public BitCount As UShort
        ' Bits per pixel
        Public BytesInRes As UInteger
        ' How many bytes in this resource?
        Public ImageOffset As UInteger
        ' Where in the file is this image?
    End Structure

    Friend Class IconImage
        Friend Entry As GRPICONDIRENTRY
        Friend Resource As ResourceEntry

        Friend Function GetResourceAddress(ByVal SectionBaseAddress As Long, ByVal SectionVirtualAddress As Long) As Long
            Return SectionBaseAddress + (Resource.DataAddress - SectionVirtualAddress)
        End Function

        Friend Function GetImageData(ByVal reader As BinaryReader, ByVal stream As Stream, ByVal location As Long) As Byte()
            stream.Seek(location, SeekOrigin.Begin)

            Dim size As UInteger = Resource.Entry.Size

            Return reader.ReadBytes(CInt(size))
        End Function
    End Class

    Friend Class IconResource
        Private Group As GRPICONDIR
        Private Entries As New List(Of IconImage)()

        Private m_Stream As Stream
        Private m_BaseAddress As Long
        Private VirtualAddress As Long
        Private SectionBaseAddress As Long
        Private SectionVirtualAddress As Long

        Friend Sub New(ByVal stream As Stream, ByVal VirtualAddress As Long, ByVal SectionBaseAddress As Long, ByVal SectionVirtualAddress As Long)
            Me.m_Stream = stream

            Me.SectionBaseAddress = SectionBaseAddress
            Me.SectionVirtualAddress = SectionVirtualAddress

            Me.VirtualAddress = VirtualAddress

            Me.m_BaseAddress = SectionBaseAddress + (VirtualAddress - SectionVirtualAddress)
        End Sub

        ''' <summary>
        ''' Move the position of the stream to the start of the structure
        ''' </summary>
        Friend Sub Seek()
            m_Stream.Seek(m_BaseAddress, SeekOrigin.Begin)
        End Sub

        ''' <summary>
        ''' Read icon group from PE file header
        ''' </summary>
        ''' <param name="reader">reader that holds the PE image</param>
        ''' <param name="iconImageData">all the ResourceEntry objects that hold the image data for the icon</param>
        Friend Function Read(ByVal reader As BinaryReader, ByVal iconImageData As List(Of ResourceEntry)) As Boolean
            Try
                Group = FromBinaryReader(Of GRPICONDIR)(reader)

                If Group.idReserved <> 0 Then
                    Return False
                End If

                If Group.idType <> 1 Then
                    Return False
                End If

                For i As Integer = 0 To Group.idCount - 1
                    Dim entry As GRPICONDIRENTRY = FromBinaryReader(Of GRPICONDIRENTRY)(reader)

                    Dim image As New IconImage()
                    image.Entry = entry

                    For Each bmp As ResourceEntry In iconImageData
                        If bmp.Name = entry.ID Then
                            image.Resource = bmp
                            Entries.Add(image)
                            Exit For
                        End If
                    Next
                Next

                Return True
            Catch ex As Exception
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Writes the icon group as a .ico file
        ''' </summary>
        ''' <param name="path">path to write to</param>
        ''' <param name="reader">reader that holds the PE image</param>
        Friend Sub Write(ByVal path As String, ByVal reader As BinaryReader)
            Using stream As New MemoryStream()
                Using writer As New BinaryWriter(stream)
                    Dim header As New ICON_HEADER()

                    header.idCount = CUShort(Entries.Count)
                    header.idReserved = Group.idReserved
                    header.idType = Group.idType

                    writer.Write(RawSerialize(header))

                    Dim size As Long = Marshal.SizeOf(GetType(ICON_DIRECTORY_ENTRY))

                    Dim headerEnd As Long = Marshal.SizeOf(GetType(ICON_HEADER)) + (size * Entries.Count)

                    Dim baseImageDataOffset As Long = headerEnd

                    For Each entry As IconImage In Entries
                        Dim ent As New ICON_DIRECTORY_ENTRY()

                        ent.ColorCount = entry.Entry.ColorCount
                        ent.Height = entry.Entry.Height
                        ent.Reserved = entry.Entry.Reserved
                        ent.Width = entry.Entry.Width
                        ent.BytesInRes = entry.Entry.BytesInRes
                        ent.BitCount = entry.Entry.BitCount
                        ent.Planes = entry.Entry.Planes
                        ent.ImageOffset = CUInt(baseImageDataOffset)
                        baseImageDataOffset += entry.Entry.BytesInRes

                        writer.Write(RawSerialize(ent))
                    Next

                    For Each entry As IconImage In Entries
                        writer.Write(entry.GetImageData(reader, m_Stream, entry.GetResourceAddress(SectionBaseAddress, SectionVirtualAddress)))
                    Next
                End Using

                Dim info As New FileInfo(path)

                If Not info.Directory.Exists Then
                    info.Directory.Create()
                End If

                If info.Exists Then
                    info.Attributes = FileAttributes.Normal
                    info.Delete()
                End If

                File.WriteAllBytes(path, stream.ToArray())
            End Using
        End Sub

        Friend Function GetIcon(ByVal reader As BinaryReader) As Icon
            Using stream As New MemoryStream()
                Using writer As New BinaryWriter(stream)
                    Dim header As New ICON_HEADER()

                    header.idCount = CUShort(Entries.Count)
                    header.idReserved = Group.idReserved
                    header.idType = Group.idType

                    writer.Write(RawSerialize(header))

                    Dim size As Long = Marshal.SizeOf(GetType(ICON_DIRECTORY_ENTRY))

                    Dim headerEnd As Long = Marshal.SizeOf(GetType(ICON_HEADER)) + (size * Entries.Count)

                    Dim baseImageDataOffset As Long = headerEnd

                    For Each entry As IconImage In Entries
                        Dim ent As New ICON_DIRECTORY_ENTRY()

                        ent.ColorCount = entry.Entry.ColorCount
                        ent.Height = entry.Entry.Height
                        ent.Reserved = entry.Entry.Reserved
                        ent.Width = entry.Entry.Width
                        ent.BytesInRes = entry.Entry.BytesInRes
                        ent.BitCount = entry.Entry.BitCount
                        ent.Planes = entry.Entry.Planes
                        ent.ImageOffset = CUInt(baseImageDataOffset)
                        baseImageDataOffset += entry.Entry.BytesInRes

                        writer.Write(RawSerialize(ent))
                    Next

                    For Each entry As IconImage In Entries
                        writer.Write(entry.GetImageData(reader, m_Stream, entry.GetResourceAddress(SectionBaseAddress, SectionVirtualAddress)))
                    Next
                End Using

                Dim ic As Icon = BytesToIcon(stream.ToArray())
                'Using fs As New FileStream("D:\iiiii.ico", FileMode.Create)
                '    ic.Save(fs)
                'End Using
                Return ic
            End Using
        End Function

        Private Shared Function BytesToIcon(bytes As Byte()) As Icon
            Using ms As New MemoryStream(bytes)
                Return New Icon(ms)
            End Using
        End Function

        Private Shared Function RawSerialize(ByVal anything As Object) As Byte()
            Dim rawsize As Integer = Marshal.SizeOf(anything)

            Dim buffer As IntPtr = Marshal.AllocHGlobal(rawsize)
            Marshal.StructureToPtr(anything, buffer, False)

            Dim rawdata As Byte() = New Byte(rawsize - 1) {}

            Marshal.Copy(buffer, rawdata, 0, rawsize)
            Marshal.FreeHGlobal(buffer)

            Return rawdata
        End Function
    End Class
#End Region

#Region " RESOURCE DIRECTORY "

#Region "Structures"

    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure ImageResourceDirectory
        Public Characteristics As UInteger
        Public TimeDateStamp As UInteger
        Public MajorVersion As UShort
        Public MinorVersion As UShort
        Public NumberOfNamedEntries As UShort
        Public NumberOfIdEntries As UShort
    End Structure

    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure ImageResourceDirectoryEntry
        Public Name As UInteger
        Public OffsetToData As UInteger

        Public Function GetOffset(ByRef isDir As Boolean) As UInteger
            If (OffsetToData And &H80000000UI) = &H80000000UI Then
                isDir = True
                Return OffsetToData And &H7FFFFFFF
            Else
                isDir = False
                Return OffsetToData
            End If
        End Function
    End Structure

    <StructLayout(LayoutKind.Sequential, Pack:=1)> _
    Friend Structure ImageResourceDataEntry
        Public OffsetToData As UInteger
        Public Size As UInteger
        Public CodePage As UInteger
        Public Reserved As UInteger

        Public Function GetOffset(ByRef isDir As Boolean) As UInteger
            If (OffsetToData And &H80000000UI) = &H80000000UI Then
                isDir = True
                Return OffsetToData And &H7FFFFFFF
            Else
                isDir = True
                Return OffsetToData
            End If
        End Function
    End Structure
#End Region

    Friend Class ResourceDirectory
        Friend ResourceDirectoryInfo As ImageResourceDirectory
        Friend DirectoryEntry As ImageResourceDirectoryEntry

        Friend Directorys As New List(Of ResourceDirectory)()
        Friend Entries As New List(Of ResourceEntry)()

        Private m_Stream As Stream
        Private m_BaseAddress As Long

        Public Sub New(stream As Stream, baseAddress As Long)
            Me.m_Stream = stream
            Me.m_BaseAddress = baseAddress
        End Sub

        Public Sub New(DirectoryEntry As ImageResourceDirectoryEntry, stream As Stream, baseAddress As Long)
            Me.New(stream, baseAddress)
            Me.DirectoryEntry = DirectoryEntry
        End Sub

        Public Sub Seek()
            Dim isDir As Boolean

            Dim dirLoc As UInteger = DirectoryEntry.GetOffset(isDir)

            m_Stream.Seek(m_BaseAddress + dirLoc, SeekOrigin.Begin)
        End Sub

        Public Sub Read(reader As BinaryReader, isRoot As Boolean, parentName As UInteger)
            ResourceDirectoryInfo = FromBinaryReader(Of ImageResourceDirectory)(reader)

            Dim dirs As New List(Of ImageResourceDirectoryEntry)()
            Dim entrys As New List(Of ImageResourceDataEntry)()

            For i As Integer = 0 To ResourceDirectoryInfo.NumberOfNamedEntries - 1
                entrys.Add(FromBinaryReader(Of ImageResourceDataEntry)(reader))
            Next

            For i As Integer = 0 To ResourceDirectoryInfo.NumberOfIdEntries - 1
                If isRoot Then
                    Dim dirEntry As ImageResourceDirectoryEntry = FromBinaryReader(Of ImageResourceDirectoryEntry)(reader)

                    If dirEntry.Name = CUInt(Win32ResourceType.RT_ICON) OrElse dirEntry.Name = CUInt(Win32ResourceType.RT_GROUP_ICON) Then
                        dirs.Add(dirEntry)
                    End If
                Else
                    dirs.Add(FromBinaryReader(Of ImageResourceDirectoryEntry)(reader))
                End If
            Next

            For Each e As ImageResourceDataEntry In entrys
                Dim isDir As Boolean

                Dim entryLoc As UInteger = e.GetOffset(isDir)
                Dim entrySize As UInteger = e.Size

                Dim entryInfo As New ResourceEntry(e, m_Stream, parentName)

                Entries.Add(entryInfo)
            Next

            For Each d As ImageResourceDirectoryEntry In dirs
                Dim isDir As Boolean

                Dim dirLoc As UInteger = d.GetOffset(isDir)

                Dim dirInfo As New ResourceDirectory(d, m_Stream, m_BaseAddress)

                If isDir Then
                    Directorys.Add(dirInfo)

                    dirInfo.Seek()

                    dirInfo.Read(reader, False, If(d.Name <> 0, d.Name, parentName))
                Else
                    dirInfo.Seek()

                    Dim entry As ImageResourceDataEntry = FromBinaryReader(Of ImageResourceDataEntry)(reader)

                    Dim entryLoc As UInteger = entry.GetOffset(isDir)
                    Dim entrySize As UInteger = entry.Size

                    Dim entryInfo As New ResourceEntry(entry, m_Stream, parentName)

                    entryInfo.Seek()

                    Entries.Add(entryInfo)
                End If
            Next
        End Sub

        Friend Function GetFirstEntry() As ResourceEntry
            If Entries.Count > 0 Then
                Return Entries(0)
            End If

            For Each dir As ResourceDirectory In Directorys
                Dim firstEntry As ResourceEntry = dir.GetFirstEntry()

                If firstEntry IsNot Nothing Then
                    Return firstEntry
                End If
            Next

            Return Nothing
        End Function

        Friend Function GetAllEntrys() As List(Of ResourceEntry)
            Dim list As New List(Of ResourceEntry)()

            Return GetAllEntrys(list)
        End Function

        Private Function GetAllEntrys(list As List(Of ResourceEntry)) As List(Of ResourceEntry)
            list.AddRange(Entries)

            For Each dir As ResourceDirectory In Directorys
                dir.GetAllEntrys(list)
            Next

            Return list
        End Function
    End Class

#Region "ResourceEntry"

    ''' <summary>
    ''' 
    ''' </summary>
    Friend Class ResourceEntry
        Friend Entry As ImageResourceDataEntry
        Friend Name As UInteger

        Private m_Stream As Stream

        Public Sub New(Entry As ImageResourceDataEntry, stream As Stream, Name As UInteger)
            Me.Entry = Entry

            Me.m_Stream = stream
            Me.Name = Name
        End Sub

        Public Sub Seek()
            m_Stream.Seek(DataAddress, SeekOrigin.Begin)
        End Sub

        Public ReadOnly Property DataAddress() As Long
            Get
                Dim isDir As Boolean

                Return CLng(Entry.GetOffset(isDir))
            End Get
        End Property
    End Class

#End Region

#Region " RESOURCE TYPES "

    Friend Enum Win32ResourceType
        RT_CURSOR = 1
        RT_FONT = 8
        RT_BITMAP = 2
        RT_ICON = 3
        RT_MENU = 4
        RT_DIALOG = 5
        RT_STRING = 6
        RT_FONTDIR = 7
        RT_ACCELERATOR = 9
        RT_RCDATA = 10
        RT_MESSAGETABLE = 11
        RT_GROUP_CURSOR = 12
        RT_GROUP_ICON = 14
        RT_VERSION = 16
        RT_DLGINCLUDE = 17
        RT_PLUGPLAY = 19
        RT_VXD = 20
        RT_ANICURSOR = 21
        RT_ANIICON = 22
        RT_HTML = 23
    End Enum
#End Region

#End Region

#End Region

#Region " ########################### INITIALIZE ########################### "
    Public Sub New()
    End Sub

    ''' <summary>
    ''' Gets the PE header from the bytes of the selected file
    ''' </summary>
    ''' <param name="filePath"></param>
    Public Sub ReadFile(filePath$) Implements IReader.ReadFile
        Try

            m_filePath = filePath
            m_fileVersionInfos = FileVersionInfo.GetVersionInfo(m_filePath)

            Using stream As New MemoryStream(System.IO.File.ReadAllBytes(filePath), False)

                Using reader As New BinaryReader(stream)
                    m_DosHeader = FromBinaryReader(Of IMAGE_DOS_HEADER)(reader) ''''''''''''''''''''''''''''''''''''''''''''''''''SizeOf m_DosHeader : 62 

                    If m_DosHeader.isValidDosHeader Then
                        stream.Seek(m_DosHeader.ExeHeaderAddress, SeekOrigin.Begin) ''''''''''''''''''''''''''''''''''''''''''''''StartOf Dos Stub : 128 
                        Dim DosHeaderPositionEnd = stream.Position

                        m_NTHeader32 = FromBinaryReader(Of IMAGE_NT_HEADERS32)(reader) '''''''''''''''''''''''''''''''''''''''''''SizeOf m_NTHeader32 : 248
                        m_FileHeader = m_NTHeader32.FileHeader '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''SizeOf m_FileHeader : 20

                        If isExecutable() Then '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Verifying executable flag from IMAGE_FILE_HEADER Characteristics 
                            m_PlatformSignature = "x86"
                            Dim dataDirectoriesOffset As UShort = 96 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Start DataDirectory Offset for PE32 file (0x10b == PE32 (32Bit))  
                            If Is32BitHeader Then
                                If m_NTHeader32.isValid Then '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Verifying if the NTHeader signature is correct like PE**
                                    If m_NTHeader32.OptionalHeader.Magic = &H20B Then
                                        m_PlatformSignature = "x64"
                                        dataDirectoriesOffset = 112 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Start DataDirectory Offset for PE32+ file (0x20b == PE32+ (64Bit))
                                    End If
                                    m_entryPoint = m_NTHeader32.OptionalHeader.AddressOfEntryPoint.ToString ''''''''''''''''''''''Return the AddressOfEntryPoint from the optionalheader32
                                    Dim SizeOfNtHeader32% = Marshal.SizeOf(m_NTHeader32)
                                    Dim SizeOfOptionalHeader% = Marshal.SizeOf(m_NTHeader32.OptionalHeader) ''''''''''''''''''''''SizeOf OptionalHeader : 128 
                                    Dim EndOfOptionalHeader% = m_DosHeader.ExeHeaderAddress + SizeOfNtHeader32 - SizeOfOptionalHeader

                                    stream.Position = EndOfOptionalHeader ''''''''''''''''''''''''''''''''''''''''''''''''''''''''EndOf OptionalHeader : 152

                                    Dim dataDictionaryStart As UShort = CUShort(stream.Position + dataDirectoriesOffset)
                                    stream.Position = dataDictionaryStart ''''''''''''''''''''''''''''''''''''''''''''''''''''''''StartOf DataDirectories : 248

                                    ReadDataDirectories(reader, m_NTHeader32.OptionalHeader.NumberOfRvaAndSizes) '''''''''''''''''Reading DataDirectories. Usually 16 entries

                                    Dim dataDictionaryEnd As UShort = stream.Position ''''''''''''''''''''''''''''''''''''''''''''EndOf DataDirectories : 376

                                    ReadSections(reader) '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Reading Sections

                                    Dim sectionEnd As UShort = stream.Position '''''''''''''''''''''''''''''''''''''''''''''''''''EndOf reading sections : 536
                                    stream.Position = dataDictionaryEnd

                                    If m_NTHeader32.isManaged Then '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Verifying if the file is DotNet : DataDictionary 14 exist and its size > 0
                                        ReadClrAndMetadataHeader(reader) '''''''''''''''''''''''''''''''''''''''''''''''''''''''''Reading the CliHeader and the Metadata header
                                        m_TargetFramework = m_metadata.GetTargetFramework ''''''''''''''''''''''''''''''''''''''''Return the TargetFramework from the Metadata header
                                    End If

                                    m_resourcesDataTable = m_NTHeader32.OptionalHeader.ResourceTable
                                    m_mainIcon = ReadMainIcon(stream, reader)
                                End If
                            Else
                                stream.Position = DosHeaderPositionEnd
                                m_NTHeader64 = FromBinaryReader(Of IMAGE_NT_HEADERS64)(reader)
                                m_FileHeader = m_NTHeader64.FileHeader

                                If m_NTHeader64.isValid Then

                                    If m_NTHeader64.OptionalHeader.Magic = &H20B Then
                                        m_PlatformSignature = "x64"
                                        dataDirectoriesOffset = &H70
                                    End If
                                    m_entryPoint = m_NTHeader64.OptionalHeader.AddressOfEntryPoint.ToString ''''''''''''''''''''''Return the AddressOfEntryPoint from the optionalheader64
                                    Dim SizeOfNtHeader64% = Marshal.SizeOf(m_NTHeader64)
                                    Dim SizeOfOptionalHeader% = Marshal.SizeOf(m_NTHeader64.OptionalHeader)
                                    Dim EndOfOptionalHeader% = m_DosHeader.ExeHeaderAddress + SizeOfNtHeader64 - SizeOfOptionalHeader

                                    stream.Position = EndOfOptionalHeader

                                    Dim dataDictionaryStart As UShort = CShort(stream.Position + dataDirectoriesOffset)
                                    stream.Position = dataDictionaryStart

                                    ReadDataDirectories(reader, m_NTHeader64.OptionalHeader.NumberOfRvaAndSizes)

                                    Dim dataDictionaryEnd As UShort = stream.Position
                                    ReadSections(reader)

                                    Dim sectionEnd As UShort = stream.Position
                                    stream.Position = dataDictionaryEnd

                                    If m_NTHeader64.isManaged Then
                                        ReadClrAndMetadataHeader(reader)
                                        m_TargetFramework = m_metadata.GetTargetFramework
                                    End If

                                    m_resourcesDataTable = m_NTHeader32.OptionalHeader.ResourceTable
                                    m_mainIcon = ReadMainIcon(stream, reader)
                                End If
                            End If
                        End If
                    End If
                    reader.Close()
                End Using
                stream.Close()
            End Using
        Catch ex As Exception
            Throw New BadImageFormatException("Error", m_filePath, ex)
        End Try
    End Sub

    Private Function ReadMainIcon(stream As Stream, reader As BinaryReader) As Icon

        If m_hasResourcesDataDirectory Then
            Dim rva As UInteger = m_resourcesDataTable.VirtualAddress

            Dim size As UInteger = If(m_resourcesDataDirectorySection.VirtualSize > 0, m_resourcesDataDirectorySection.VirtualSize, m_resourcesDataDirectorySection.SizeOfRawData)

            If rva >= m_resourcesDataDirectorySection.VirtualAddress AndAlso rva < m_resourcesDataDirectorySection.VirtualAddress + size Then
                Dim baseAddress As Long = stream.Seek(m_resourcesDataDirectorySection.PointerToRawData + (rva - m_resourcesDataDirectorySection.VirtualAddress), SeekOrigin.Begin)

                Dim dirInfo As New ResourceDirectory(stream, baseAddress)

                dirInfo.Read(reader, True, 0)

                Dim IconGroup As ResourceEntry = Nothing
                Dim IconImages As New List(Of ResourceEntry)()

                For Each dir As ResourceDirectory In dirInfo.Directorys
                    If dir.DirectoryEntry.Name = CUInt(Win32ResourceType.RT_GROUP_ICON) Then
                        IconGroup = dir.GetFirstEntry()
                        Exit For
                    End If
                Next

                For Each dir As ResourceDirectory In dirInfo.Directorys
                    If dir.DirectoryEntry.Name = CUInt(Win32ResourceType.RT_ICON) Then
                        IconImages = dir.GetAllEntrys()
                        IconImages.Reverse()
                        Exit For
                    End If
                Next

                If IconGroup IsNot Nothing Then
                    Dim icon As New IconResource(stream, IconGroup.DataAddress, m_resourcesDataDirectorySection.PointerToRawData, m_resourcesDataDirectorySection.VirtualAddress)
                    icon.Seek()
                    If Not icon.Read(reader, IconImages) Then
                        Return Nothing
                    End If
                    Return icon.GetIcon(reader)
                End If
            End If
        End If
        Return Nothing
    End Function


    Public Function GetMainIconFile(ByRef TmpFile$) As Boolean
        Try
            Using fs As New FileStream(TmpFile, FileMode.Create)
                m_mainIcon.Save(fs)
            End Using
            Return True
        Catch ex As Exception
            Return False
        End Try
        Return False
    End Function

#End Region

End Class


================================================
File: Core20Reader/Core20Reader/My Project/Application.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On




================================================
File: Core20Reader/Core20Reader/My Project/Application.myapp
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MySubMain>false</MySubMain>
  <SingleInstance>false</SingleInstance>
  <ShutdownMode>0</ShutdownMode>
  <EnableVisualStyles>true</EnableVisualStyles>
  <AuthenticationMode>0</AuthenticationMode>
  <ApplicationType>1</ApplicationType>
  <SaveMySettingsOnExit>true</SaveMySettingsOnExit>
</MyApplicationData>



================================================
File: Core20Reader/Core20Reader/My Project/AssemblyInfo.vb
================================================
ï»¿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
' l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
' associÃ©es Ã  un assembly.

' Passez en revue les valeurs des attributs de l'assembly

<Assembly: AssemblyTitle("DotNetRenamer.Core20Reader")> 
<Assembly: AssemblyDescription("PE DotNet Reader.")> 
<Assembly: AssemblyCompany("3DotDev Freewares")> 
<Assembly: AssemblyProduct("DotNetRenamer.Core20Reader")> 
<Assembly: AssemblyCopyright("Copyright Â© 3DotDev 2015")> 
<Assembly: AssemblyTrademark("DotNetRenamer.Core20Reader")> 

<Assembly: ComVisible(False)>

'Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
<Assembly: Guid("cb8da34a-0d38-470b-9571-aed3a43d7fc8")> 

' Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
'
'      Version principale
'      Version secondaire 
'      NumÃ©ro de build
'      RÃ©vision
'
' Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
' en utilisant '*', comme indiquÃ© ci-dessousÂ :
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("4.4.2.0")> 
<Assembly: AssemblyFileVersion("4.4.2.0")> 



================================================
File: Core20Reader/Core20Reader/My Project/Resources.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'Cette classe a Ã©tÃ© gÃ©nÃ©rÃ©e automatiquement par la classe StronglyTypedResourceBuilder
    'Ã  l'aide d'un outil, tel que ResGen ou Visual Studio.
    'Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis rÃ©exÃ©cutez ResGen
    'avec l'option /str ou rÃ©gÃ©nÃ©rez votre projet VS.
    '''<summary>
    '''  Une classe de ressource fortement typÃ©e destinÃ©e, entre autres, Ã  la consultation des chaÃ®nes localisÃ©es.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Retourne l'instance ResourceManager mise en cache utilisÃ©e par cette classe.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("Core20Reader.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Remplace la propriÃ©tÃ© CurrentUICulture du thread actuel pour toutes
        '''  les recherches de ressources Ã  l'aide de cette classe de ressource fortement typÃ©e.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
    End Module
End Namespace



================================================
File: Core20Reader/Core20Reader/My Project/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: Core20Reader/Core20Reader/My Project/Settings.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My

    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"), _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase

        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()), MySettings)

#Region "FonctionnalitÃ© Enregistrement automatique My.Settings"
#If _MyType = "WindowsForms" Then
    Private Shared addedHandler As Boolean

    Private Shared addedHandlerLockObject As New Object

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
        If My.Application.SaveMySettingsOnExit Then
            My.Settings.Save()
        End If
    End Sub
#End If
#End Region

        Public Shared ReadOnly Property [Default]() As MySettings
            Get

#If _MyType = "WindowsForms" Then
               If Not addedHandler Then
                    SyncLock addedHandlerLockObject
                        If Not addedHandler Then
                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                            addedHandler = True
                        End If
                    End SyncLock
                End If
#End If
                Return defaultInstance
            End Get
        End Property
    End Class
End Namespace

Namespace My

    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(), _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()> _
    Friend Module MySettingsProperty

        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")> _
        Friend ReadOnly Property Settings() As Global.Core20Reader.My.MySettings
            Get
                Return Global.Core20Reader.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace



================================================
File: Core20Reader/Core20Reader/My Project/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>



================================================
File: DotNetPatcher/DotNetPatcher.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "DotNetPatcher", "DotNetPatcher.vbproj", "{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Core20Reader", "..\Core20Reader\Core20Reader\Core20Reader.vbproj", "{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Helper", "..\Helper\Helper.vbproj", "{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "IL", "..\IL\IL\IL.csproj", "{5807DEB4-D9B5-4DB4-811F-46232028DFD7}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Implementer", "..\Implementer\Implementer.vbproj", "{BC17B941-39E0-45BD-8F49-730EC6045108}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Injecter", "..\Injecter\Injecter.vbproj", "{0FC77B27-9A02-4E72-ABE3-9046B7436D24}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Injections", "..\Injections\Injections\Injections.csproj", "{2E99870D-2ADF-448B-92CE-CCE190C9134D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}.Release|Any CPU.Build.0 = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{EEF33D18-4542-4E3D-80F0-6BDA8DEEC0CD}.Release|Any CPU.Build.0 = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}.Release|Any CPU.Build.0 = Release|Any CPU
		{5807DEB4-D9B5-4DB4-811F-46232028DFD7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5807DEB4-D9B5-4DB4-811F-46232028DFD7}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5807DEB4-D9B5-4DB4-811F-46232028DFD7}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5807DEB4-D9B5-4DB4-811F-46232028DFD7}.Release|Any CPU.Build.0 = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BC17B941-39E0-45BD-8F49-730EC6045108}.Release|Any CPU.Build.0 = Release|Any CPU
		{0FC77B27-9A02-4E72-ABE3-9046B7436D24}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0FC77B27-9A02-4E72-ABE3-9046B7436D24}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0FC77B27-9A02-4E72-ABE3-9046B7436D24}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{0FC77B27-9A02-4E72-ABE3-9046B7436D24}.Release|Any CPU.Build.0 = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: DotNetPatcher/DotNetPatcher.vbproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6509BB3A-5044-437A-BBD9-6DFDF36FB88C}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <StartupObject>DotNetPatcher.Program</StartupObject>
    <RootNamespace>DotNetPatcher</RootNamespace>
    <AssemblyName>DotNetPatcher</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>WindowsFormsWithCustomSubMain</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <OptionExplicit>On</OptionExplicit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionCompare>Binary</OptionCompare>
  </PropertyGroup>
  <PropertyGroup>
    <OptionStrict>Off</OptionStrict>
  </PropertyGroup>
  <PropertyGroup>
    <OptionInfer>On</OptionInfer>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationManifest>My Project\app.manifest</ApplicationManifest>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationIcon>DNP.ico</ApplicationIcon>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Drawing" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Windows.Forms" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Frm_Exclusion.designer.vb">
      <DependentUpon>Frm_Exclusion.vb</DependentUpon>
    </Compile>
    <Compile Include="Frm_Exclusion.vb">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Frm_Result.Designer.vb">
      <DependentUpon>Frm_Result.vb</DependentUpon>
    </Compile>
    <Compile Include="Frm_Result.vb">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Frm_Main.Designer.vb">
      <DependentUpon>Frm_Main.vb</DependentUpon>
    </Compile>
    <Compile Include="Frm_Main.vb">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="Program.vb" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Frm_Exclusion.resx">
      <DependentUpon>Frm_Exclusion.vb</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="Frm_Result.resx">
      <DependentUpon>Frm_Result.vb</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="Frm_Main.resx">
      <DependentUpon>Frm_Main.vb</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="My Project\app.manifest" />
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <None Include="bin\irpck.exe" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="DNP.ico" />
    <None Include="Resources\Loading.png" />
    <None Include="Resources\Warning.png" />
    <None Include="Resources\Valid.png" />
    <None Include="Resources\error.png" />
    <None Include="Resources\TDD.png" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Core20Reader\Core20Reader\Core20Reader.vbproj">
      <Project>{eef33d18-4542-4e3d-80f0-6bda8deec0cd}</Project>
      <Name>Core20Reader</Name>
    </ProjectReference>
    <ProjectReference Include="..\Helper\Helper.vbproj">
      <Project>{c83fb11b-f2fc-4895-bede-11bfa9c90ae3}</Project>
      <Name>Helper</Name>
    </ProjectReference>
    <ProjectReference Include="..\Implementer\Implementer.vbproj">
      <Project>{bc17b941-39e0-45bd-8f49-730ec6045108}</Project>
      <Name>Implementer</Name>
    </ProjectReference>
    <ProjectReference Include="..\LoginTheme\LoginTheme.vbproj">
      <Project>{96903fff-8f56-478f-bf84-cda513476d2a}</Project>
      <Name>LoginTheme</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: DotNetPatcher/Frm_Exclusion.designer.vb
================================================
ï»¿
Imports LoginTheme
Imports LoginTheme.XertzLoginTheme

<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _
Partial Class Frm_Exclusion
    Inherits System.Windows.Forms.Form

    'Form remplace la mÃ©thode Dispose pour nettoyer la liste des composants.
    <System.Diagnostics.DebuggerNonUserCode()> _
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Requise par le Concepteur Windows Form
    Private components As System.ComponentModel.IContainer

    'REMARQUEÂ : la procÃ©dure suivante est requise par le Concepteur Windows Form
    'Elle peut Ãªtre modifiÃ©e Ã  l'aide du Concepteur Windows Form.  
    'Ne la modifiez pas Ã  l'aide de l'Ã©diteur de code.
    <System.Diagnostics.DebuggerStepThrough()> _
    Private Sub InitializeComponent()
        Me.components = New System.ComponentModel.Container()
        Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Frm_Exclusion))
        Me.BgwRenameTask = New System.ComponentModel.BackgroundWorker()
        Me.ImageList1 = New System.Windows.Forms.ImageList(Me.components)
        Me.BgwExclusion = New System.ComponentModel.BackgroundWorker()
        Me.Frm_ExclusionThemeContainer = New LoginTheme.XertzLoginTheme.LogInThemeContainer()
        Me.GbxExclusionDetails = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.LblExclusionDetailsEvents = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblExclusionTotal = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblExclusionDetailsProperties = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblExclusionDetailsFields = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblExclusionDetailsMethods = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblExclusionDetailsTypes = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.GbxExclusionViewer = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.TvExclusion = New LoginTheme.XertzLoginTheme.TreeViewEx()
        Me.GbxExclusionRule = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.ChbExclusionCheckAll = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionHideCalls = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbAllEntities = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionInvalidOpCodes = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionBooleanEncrypt = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionRenaming = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionIntegersEncode = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusionStringsEncrypt = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbExclusion = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.Frm_ExclusionThemeContainer.SuspendLayout
        Me.GbxExclusionDetails.SuspendLayout
        Me.GbxExclusionViewer.SuspendLayout
        Me.GbxExclusionRule.SuspendLayout
        Me.SuspendLayout
        '
        'BgwRenameTask
        '
        Me.BgwRenameTask.WorkerReportsProgress = true
        Me.BgwRenameTask.WorkerSupportsCancellation = true
        '
        'ImageList1
        '
        Me.ImageList1.ImageStream = CType(resources.GetObject("ImageList1.ImageStream"),System.Windows.Forms.ImageListStreamer)
        Me.ImageList1.TransparentColor = System.Drawing.Color.Transparent
        Me.ImageList1.Images.SetKeyName(0, "Assembly.png")
        Me.ImageList1.Images.SetKeyName(1, "Library.png")
        Me.ImageList1.Images.SetKeyName(2, "NameSpace.png")
        Me.ImageList1.Images.SetKeyName(3, "Class.png")
        Me.ImageList1.Images.SetKeyName(4, "Constructor.png")
        Me.ImageList1.Images.SetKeyName(5, "Delegate.png")
        Me.ImageList1.Images.SetKeyName(6, "Enum.png")
        Me.ImageList1.Images.SetKeyName(7, "EnumValue.png")
        Me.ImageList1.Images.SetKeyName(8, "Event.png")
        Me.ImageList1.Images.SetKeyName(9, "Field.png")
        Me.ImageList1.Images.SetKeyName(10, "Interface.png")
        Me.ImageList1.Images.SetKeyName(11, "Method.png")
        Me.ImageList1.Images.SetKeyName(12, "PInvokeMethod.png")
        Me.ImageList1.Images.SetKeyName(13, "Property.png")
        Me.ImageList1.Images.SetKeyName(14, "StaticClass.png")
        '
        'BgwExclusion
        '
        Me.BgwExclusion.WorkerReportsProgress = true
        Me.BgwExclusion.WorkerSupportsCancellation = True
        '
        'Frm_ExclusionThemeContainer
        '
        Me.Frm_ExclusionThemeContainer.AllowClose = True
        Me.Frm_ExclusionThemeContainer.AllowMaximize = False
        Me.Frm_ExclusionThemeContainer.AllowMinimize = False
        Me.Frm_ExclusionThemeContainer.BackColor = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_ExclusionThemeContainer.BaseColour = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_ExclusionThemeContainer.BorderColour = System.Drawing.Color.DimGray
        Me.Frm_ExclusionThemeContainer.ContainerColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.Frm_ExclusionThemeContainer.Controls.Add(Me.GbxExclusionDetails)
        Me.Frm_ExclusionThemeContainer.Controls.Add(Me.GbxExclusionViewer)
        Me.Frm_ExclusionThemeContainer.Controls.Add(Me.GbxExclusionRule)
        Me.Frm_ExclusionThemeContainer.Dock = System.Windows.Forms.DockStyle.Fill
        Me.Frm_ExclusionThemeContainer.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.Frm_ExclusionThemeContainer.FontSize = 12
        Me.Frm_ExclusionThemeContainer.HoverColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.Frm_ExclusionThemeContainer.Location = New System.Drawing.Point(0, 0)
        Me.Frm_ExclusionThemeContainer.MouseOverColour = System.Drawing.Color.BlueViolet
        Me.Frm_ExclusionThemeContainer.Name = "Frm_ExclusionThemeContainer"
        Me.Frm_ExclusionThemeContainer.ShowControlBox = True
        Me.Frm_ExclusionThemeContainer.ShowIcon = True
        Me.Frm_ExclusionThemeContainer.ShowMaximizeButton = False
        Me.Frm_ExclusionThemeContainer.ShowMinimizeButton = False
        Me.Frm_ExclusionThemeContainer.Size = New System.Drawing.Size(704, 697)
        Me.Frm_ExclusionThemeContainer.TabIndex = 0
        Me.Frm_ExclusionThemeContainer.Text = "Exclusion rules"
        '
        'GbxExclusionDetails
        '
        Me.GbxExclusionDetails.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionDetailsEvents)
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionTotal)
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionDetailsProperties)
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionDetailsFields)
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionDetailsMethods)
        Me.GbxExclusionDetails.Controls.Add(Me.LblExclusionDetailsTypes)
        Me.GbxExclusionDetails.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.GbxExclusionDetails.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.GbxExclusionDetails.Location = New System.Drawing.Point(549, 408)
        Me.GbxExclusionDetails.MainColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.GbxExclusionDetails.Name = "GbxExclusionDetails"
        Me.GbxExclusionDetails.Size = New System.Drawing.Size(143, 277)
        Me.GbxExclusionDetails.TabIndex = 65
        Me.GbxExclusionDetails.Text = "      Excluded items"
        Me.GbxExclusionDetails.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'LblExclusionDetailsEvents
        '
        Me.LblExclusionDetailsEvents.AutoSize = True
        Me.LblExclusionDetailsEvents.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionDetailsEvents.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblExclusionDetailsEvents.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsEvents.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsEvents.Location = New System.Drawing.Point(25, 159)
        Me.LblExclusionDetailsEvents.Name = "LblExclusionDetailsEvents"
        Me.LblExclusionDetailsEvents.Size = New System.Drawing.Size(47, 15)
        Me.LblExclusionDetailsEvents.TabIndex = 4
        Me.LblExclusionDetailsEvents.Text = "Events :"
        '
        'LblExclusionTotal
        '
        Me.LblExclusionTotal.AutoSize = True
        Me.LblExclusionTotal.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionTotal.Font = New System.Drawing.Font("Segoe UI", 9.0!, System.Drawing.FontStyle.Bold)
        Me.LblExclusionTotal.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionTotal.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(0, Byte), Integer))
        Me.LblExclusionTotal.Location = New System.Drawing.Point(25, 214)
        Me.LblExclusionTotal.Name = "LblExclusionTotal"
        Me.LblExclusionTotal.Size = New System.Drawing.Size(43, 15)
        Me.LblExclusionTotal.TabIndex = 21
        Me.LblExclusionTotal.Text = "Total : "
        '
        'LblExclusionDetailsProperties
        '
        Me.LblExclusionDetailsProperties.AutoSize = True
        Me.LblExclusionDetailsProperties.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionDetailsProperties.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblExclusionDetailsProperties.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsProperties.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsProperties.Location = New System.Drawing.Point(25, 110)
        Me.LblExclusionDetailsProperties.Name = "LblExclusionDetailsProperties"
        Me.LblExclusionDetailsProperties.Size = New System.Drawing.Size(69, 15)
        Me.LblExclusionDetailsProperties.TabIndex = 3
        Me.LblExclusionDetailsProperties.Text = "Properties : "
        '
        'LblExclusionDetailsFields
        '
        Me.LblExclusionDetailsFields.AutoSize = True
        Me.LblExclusionDetailsFields.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionDetailsFields.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblExclusionDetailsFields.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsFields.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsFields.Location = New System.Drawing.Point(25, 135)
        Me.LblExclusionDetailsFields.Name = "LblExclusionDetailsFields"
        Me.LblExclusionDetailsFields.Size = New System.Drawing.Size(46, 15)
        Me.LblExclusionDetailsFields.TabIndex = 2
        Me.LblExclusionDetailsFields.Text = "Fields : "
        '
        'LblExclusionDetailsMethods
        '
        Me.LblExclusionDetailsMethods.AutoSize = True
        Me.LblExclusionDetailsMethods.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionDetailsMethods.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblExclusionDetailsMethods.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsMethods.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsMethods.Location = New System.Drawing.Point(25, 86)
        Me.LblExclusionDetailsMethods.Name = "LblExclusionDetailsMethods"
        Me.LblExclusionDetailsMethods.Size = New System.Drawing.Size(63, 15)
        Me.LblExclusionDetailsMethods.TabIndex = 1
        Me.LblExclusionDetailsMethods.Text = "Methods : "
        '
        'LblExclusionDetailsTypes
        '
        Me.LblExclusionDetailsTypes.AutoSize = True
        Me.LblExclusionDetailsTypes.BackColor = System.Drawing.Color.Transparent
        Me.LblExclusionDetailsTypes.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblExclusionDetailsTypes.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsTypes.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblExclusionDetailsTypes.Location = New System.Drawing.Point(25, 61)
        Me.LblExclusionDetailsTypes.Name = "LblExclusionDetailsTypes"
        Me.LblExclusionDetailsTypes.Size = New System.Drawing.Size(47, 15)
        Me.LblExclusionDetailsTypes.TabIndex = 0
        Me.LblExclusionDetailsTypes.Text = "Types : "
        '
        'GbxExclusionViewer
        '
        Me.GbxExclusionViewer.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxExclusionViewer.Controls.Add(Me.TvExclusion)
        Me.GbxExclusionViewer.Font = New System.Drawing.Font("Segoe UI", 10!)
        Me.GbxExclusionViewer.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.GbxExclusionViewer.Location = New System.Drawing.Point(12, 45)
        Me.GbxExclusionViewer.MainColour = System.Drawing.Color.FromArgb(CType(CType(54,Byte),Integer), CType(CType(54,Byte),Integer), CType(CType(54,Byte),Integer))
        Me.GbxExclusionViewer.Name = "GbxExclusionViewer"
        Me.GbxExclusionViewer.Size = New System.Drawing.Size(531, 640)
        Me.GbxExclusionViewer.TabIndex = 64
        Me.GbxExclusionViewer.Text = "                                                       Assembly viewer"
        Me.GbxExclusionViewer.TextColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        '
        'TvExclusion
        '
        Me.TvExclusion.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.TvExclusion.ImageIndex = 0
        Me.TvExclusion.ImageList = Me.ImageList1
        Me.TvExclusion.Location = New System.Drawing.Point(3, 33)
        Me.TvExclusion.Name = "TvExclusion"
        Me.TvExclusion.SelectedImageIndex = 0
        Me.TvExclusion.Size = New System.Drawing.Size(525, 605)
        Me.TvExclusion.TabIndex = 3
        '
        'GbxExclusionRule
        '
        Me.GbxExclusionRule.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionCheckAll)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionHideCalls)
        Me.GbxExclusionRule.Controls.Add(Me.ChbAllEntities)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionInvalidOpCodes)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionBooleanEncrypt)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionRenaming)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionIntegersEncode)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusionStringsEncrypt)
        Me.GbxExclusionRule.Controls.Add(Me.ChbExclusion)
        Me.GbxExclusionRule.Enabled = false
        Me.GbxExclusionRule.Font = New System.Drawing.Font("Segoe UI", 10!)
        Me.GbxExclusionRule.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.GbxExclusionRule.Location = New System.Drawing.Point(549, 45)
        Me.GbxExclusionRule.MainColour = System.Drawing.Color.FromArgb(CType(CType(54,Byte),Integer), CType(CType(54,Byte),Integer), CType(CType(54,Byte),Integer))
        Me.GbxExclusionRule.Name = "GbxExclusionRule"
        Me.GbxExclusionRule.Size = New System.Drawing.Size(143, 349)
        Me.GbxExclusionRule.TabIndex = 2
        Me.GbxExclusionRule.Text = "              Rule"
        Me.GbxExclusionRule.TextColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        '
        'ChbExclusionCheckAll
        '
        Me.ChbExclusionCheckAll.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionCheckAll.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionCheckAll.Checked = false
        Me.ChbExclusionCheckAll.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionCheckAll.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionCheckAll.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0,Byte))
        Me.ChbExclusionCheckAll.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionCheckAll.Location = New System.Drawing.Point(4, 50)
        Me.ChbExclusionCheckAll.Name = "ChbExclusionCheckAll"
        Me.ChbExclusionCheckAll.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionCheckAll.TabIndex = 65
        Me.ChbExclusionCheckAll.Tag = ""
        Me.ChbExclusionCheckAll.Text = "Check all"
        '
        'ChbExclusionHideCalls
        '
        Me.ChbExclusionHideCalls.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionHideCalls.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionHideCalls.Checked = false
        Me.ChbExclusionHideCalls.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionHideCalls.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionHideCalls.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionHideCalls.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionHideCalls.Location = New System.Drawing.Point(4, 206)
        Me.ChbExclusionHideCalls.Name = "ChbExclusionHideCalls"
        Me.ChbExclusionHideCalls.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionHideCalls.TabIndex = 64
        Me.ChbExclusionHideCalls.Tag = ""
        Me.ChbExclusionHideCalls.Text = "Hide calls"
        Me.ChbExclusionHideCalls.Visible = false
        '
        'ChbAllEntities
        '
        Me.ChbAllEntities.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbAllEntities.BorderColour = System.Drawing.Color.DimGray
        Me.ChbAllEntities.Checked = false
        Me.ChbAllEntities.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbAllEntities.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbAllEntities.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0,Byte))
        Me.ChbAllEntities.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbAllEntities.Location = New System.Drawing.Point(4, 323)
        Me.ChbAllEntities.Name = "ChbAllEntities"
        Me.ChbAllEntities.Size = New System.Drawing.Size(136, 22)
        Me.ChbAllEntities.TabIndex = 18
        Me.ChbAllEntities.Tag = ""
        Me.ChbAllEntities.Text = "All entities"
        '
        'ChbExclusionInvalidOpCodes
        '
        Me.ChbExclusionInvalidOpCodes.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionInvalidOpCodes.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionInvalidOpCodes.Checked = false
        Me.ChbExclusionInvalidOpCodes.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionInvalidOpCodes.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionInvalidOpCodes.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionInvalidOpCodes.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionInvalidOpCodes.Location = New System.Drawing.Point(4, 234)
        Me.ChbExclusionInvalidOpCodes.Name = "ChbExclusionInvalidOpCodes"
        Me.ChbExclusionInvalidOpCodes.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionInvalidOpCodes.TabIndex = 63
        Me.ChbExclusionInvalidOpCodes.Tag = ""
        Me.ChbExclusionInvalidOpCodes.Text = "Invalid OpCodes"
        Me.ChbExclusionInvalidOpCodes.Visible = false
        '
        'ChbExclusionBooleanEncrypt
        '
        Me.ChbExclusionBooleanEncrypt.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionBooleanEncrypt.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionBooleanEncrypt.Checked = false
        Me.ChbExclusionBooleanEncrypt.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionBooleanEncrypt.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionBooleanEncrypt.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionBooleanEncrypt.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionBooleanEncrypt.Location = New System.Drawing.Point(4, 178)
        Me.ChbExclusionBooleanEncrypt.Name = "ChbExclusionBooleanEncrypt"
        Me.ChbExclusionBooleanEncrypt.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionBooleanEncrypt.TabIndex = 60
        Me.ChbExclusionBooleanEncrypt.Tag = ""
        Me.ChbExclusionBooleanEncrypt.Text = "Booleans encryption"
        Me.ChbExclusionBooleanEncrypt.Visible = false
        '
        'ChbExclusionRenaming
        '
        Me.ChbExclusionRenaming.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionRenaming.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionRenaming.Checked = false
        Me.ChbExclusionRenaming.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionRenaming.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionRenaming.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionRenaming.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionRenaming.Location = New System.Drawing.Point(4, 94)
        Me.ChbExclusionRenaming.Name = "ChbExclusionRenaming"
        Me.ChbExclusionRenaming.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionRenaming.TabIndex = 59
        Me.ChbExclusionRenaming.Tag = ""
        Me.ChbExclusionRenaming.Text = "Renaming"
        Me.ChbExclusionRenaming.Visible = false
        '
        'ChbExclusionIntegersEncode
        '
        Me.ChbExclusionIntegersEncode.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionIntegersEncode.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionIntegersEncode.Checked = false
        Me.ChbExclusionIntegersEncode.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionIntegersEncode.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionIntegersEncode.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionIntegersEncode.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionIntegersEncode.Location = New System.Drawing.Point(4, 150)
        Me.ChbExclusionIntegersEncode.Name = "ChbExclusionIntegersEncode"
        Me.ChbExclusionIntegersEncode.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionIntegersEncode.TabIndex = 58
        Me.ChbExclusionIntegersEncode.Tag = ""
        Me.ChbExclusionIntegersEncode.Text = "Integers encoding"
        Me.ChbExclusionIntegersEncode.Visible = false
        '
        'ChbExclusionStringsEncrypt
        '
        Me.ChbExclusionStringsEncrypt.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusionStringsEncrypt.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusionStringsEncrypt.Checked = false
        Me.ChbExclusionStringsEncrypt.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusionStringsEncrypt.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusionStringsEncrypt.Font = New System.Drawing.Font("Segoe UI", 9!)
        Me.ChbExclusionStringsEncrypt.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusionStringsEncrypt.Location = New System.Drawing.Point(4, 122)
        Me.ChbExclusionStringsEncrypt.Name = "ChbExclusionStringsEncrypt"
        Me.ChbExclusionStringsEncrypt.Size = New System.Drawing.Size(136, 22)
        Me.ChbExclusionStringsEncrypt.TabIndex = 57
        Me.ChbExclusionStringsEncrypt.Tag = ""
        Me.ChbExclusionStringsEncrypt.Text = "Strings encryption"
        Me.ChbExclusionStringsEncrypt.Visible = false
        '
        'ChbExclusion
        '
        Me.ChbExclusion.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer), CType(CType(42,Byte),Integer))
        Me.ChbExclusion.BorderColour = System.Drawing.Color.DimGray
        Me.ChbExclusion.Checked = false
        Me.ChbExclusion.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbExclusion.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbExclusion.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0,Byte))
        Me.ChbExclusion.FontColour = System.Drawing.Color.FromArgb(CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer), CType(CType(255,Byte),Integer))
        Me.ChbExclusion.Location = New System.Drawing.Point(4, 4)
        Me.ChbExclusion.Name = "ChbExclusion"
        Me.ChbExclusion.Size = New System.Drawing.Size(22, 22)
        Me.ChbExclusion.TabIndex = 16
        Me.ChbExclusion.Tag = ""
        '
        'Frm_Exclusion
        '
        Me.AutoScaleDimensions = New System.Drawing.SizeF(6!, 13!)
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.ClientSize = New System.Drawing.Size(704, 697)
        Me.ControlBox = false
        Me.Controls.Add(Me.Frm_ExclusionThemeContainer)
        Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None
        Me.Icon = CType(resources.GetObject("$this.Icon"),System.Drawing.Icon)
        Me.MaximizeBox = false
        Me.Name = "Frm_Exclusion"
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent
        Me.TransparencyKey = System.Drawing.Color.Fuchsia
        Me.Frm_ExclusionThemeContainer.ResumeLayout(false)
        Me.GbxExclusionDetails.ResumeLayout(false)
        Me.GbxExclusionDetails.PerformLayout
        Me.GbxExclusionViewer.ResumeLayout(false)
        Me.GbxExclusionRule.ResumeLayout(false)
        Me.ResumeLayout(false)

End Sub
    Friend WithEvents Frm_ExclusionThemeContainer As LogInThemeContainer
    Friend WithEvents BgwRenameTask As System.ComponentModel.BackgroundWorker
    Friend WithEvents ImageList1 As System.Windows.Forms.ImageList
    Friend WithEvents GbxExclusionRule As XertzLoginTheme.LogInGroupBox
    Friend WithEvents ChbExclusion As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbAllEntities As XertzLoginTheme.LogInCheckBox
    Friend WithEvents BgwExclusion As System.ComponentModel.BackgroundWorker
    Friend WithEvents TvExclusion As XertzLoginTheme.TreeViewEx
    Friend WithEvents ChbExclusionBooleanEncrypt As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbExclusionIntegersEncode As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbExclusionStringsEncrypt As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbExclusionInvalidOpCodes As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbExclusionRenaming As XertzLoginTheme.LogInCheckBox
    Friend WithEvents GbxExclusionViewer As XertzLoginTheme.LogInGroupBox
    Friend WithEvents LblExclusionTotal As XertzLoginTheme.LogInLabel
    Friend WithEvents ChbExclusionHideCalls As XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbExclusionCheckAll As XertzLoginTheme.LogInCheckBox
    Friend WithEvents GbxExclusionDetails As LoginTheme.XertzLoginTheme.LogInGroupBox
    Friend WithEvents LblExclusionDetailsEvents As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents LblExclusionDetailsProperties As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents LblExclusionDetailsFields As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents LblExclusionDetailsMethods As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents LblExclusionDetailsTypes As LoginTheme.XertzLoginTheme.LogInLabel
End Class



================================================
File: DotNetPatcher/Frm_Exclusion.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="BgwRenameTask.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>160, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABM
        KAAAAk1TRnQBSQFMAgEBDwEAAQgBBQEIAQUBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABQAMAAQEBAAEgBgABQP8AuwADGQEjAlwBWgHNAyoBQXcAAf8EAAMLAQ8MAANOAZkBXAJZAcwBXAJZ
        AcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZAcwBXAJZ
        AcwBXAJZAcwBXAJZAcwDTgGZJAADGQEjAasCAAH/AdEBowEAAf8CXgFcAc4DGQEjbgABrAH/AgABiAH/
        AwAB/wQAAwsBDwgAAlwBWQHMA+sB/wPnAf8D5wH/A+cB/wPnAf8D5wH/A+cB/wPnAf8D5wH/A+cB/wPn
        Af8D5wH/A+cB/wPrAf8CXAFZAcwkAAGtAgAB/wHhAbMBAAL/AdgBAAH/Ad0BrwEAAf8CXAFaAc0DGQEj
        SQABzwEAAf8BAAHGAQAB/wEAAbwBhgH/AYABswGPAf8BkAGpAZcB/woAAawB/wGXAQAByAH/AgABhwH/
        AgABlgH/AgABgwH/BAADCwEPBAACXAFZAcwD6gH/AwAB/wPiAf8DrAH/A8UB/wOsAf8DvQH/A70B/wO9
        Af8DtAH/A70B/wPiAf8D4gH/A+oB/wJcAVkBzB8AAf8DAAH/AYYBgAEAAf8BwQGTAQAC/wHYAQAC/wHY
        AQAC/wHiAQAB/wGrAgAB/2IAAawB/wGcAQABzQH/AZ4BAAHPAf8CAAGIAf8CAAGcAf8CAAGRAf8CAAGF
        Af8IAAJcAVkBzAPtAf8D5gH/A+YB/wPmAf8D5gH/A+YB/wPmAf8D5gH/A+YB/wPmAf8D5gH/A+YB/wPm
        Af8D7QH/AlwBWQHMHwAB/wgAAxkBIwHQAaIBAAL/AeIBAAH/AaoCAAH/AxkBI0UAAc8BAAH/AQABxgEA
        Af8BAAG8AYYB/wGAAbMBjwH/AZABqQGXAf8GAAGuAf8BmwEAAcwB/wGgAQAB0QH/AZYBAAHHAf8BuwEA
        AewB/wIAAZsB/wIAAZsB/wIAAYcB/wgAAlwBWQHMA/AC/wGZAQAB/wPrAf8DwgH/A7EB/wPCAf8DwgH/
        A7EB/wPCAf8DzgH/A+sB/wPrAf8D6wH/A/AB/wJcAVkBzB8AAf8EAAMZASMBXAFaAVwBzQMqAUEBqgIA
        Af8DGQEjYgABqwH/AZ0BAAHOAf8BlQEAAcYB/wHFAQAB9gH/AcYBAAH3Af8BwgEAAfMB/wIAAaYB/wIA
        AYYB/wgAAlwBWQHMA/MB/wPvAf8D7wH/A+8B/wPvAf8D7wH/A+8B/wPvAf8D7wH/A+8B/wPvAf8D7wH/
        A+8B/wPzAf8CXAFZAcwfAAH/AxkBIwIAAaEB/wGeAQABxwH/AV4BXAFeAc4DGQEjUQABxgEAAf8BAAG8
        AYYB/wGAAbMBjwH/AZABqQGXAf8GAAGrAf8BlQEAAcYB/wHFAQAB9gH/AcQBAAH1Af8BwwEAAfQB/wHE
        AQAB9QH/Ab0BAAHuAf8CAAGhAf8IAAJcAVkBzAP3Af8CAAHCAf8D9AH/A7YB/wPHAf8DxwH/A8cB/wO/
        Af8BhwGbAbAB/wIAAYwB/wGHAZsBsAH/A8cB/wPQAf8D9wH/AlwBWQHMHwAB/wIAAaMB/wGuAQAB1wH/
        AdMBlwH8Af8BqgEAAdMB/wFcAVoBXAHNAxkBI2AAAawBAAHdAf8BxgEAAfcB/wHLAQAB/AH/AcMBAAH0
        Af8BwwEAAfQB/wG7AQAB7AH/AaICAAH/AzgBXAgAAlwBWQHMA/oB/wP4Af8D+AH/AaoBvwHUAf8CAAGe
        Af8BqgG/AdQB/wP4Af8BqAG8AdEB/wIAAZgB/wGBAbQB5gH/AgABpgH/AagBvAHRAf8D+AH/A/oB/wJc
        AVkBzAgAAxQBGwFQAk8BmwFcAlkBzAFQAk8BmwMAAf8DAAH/AgABhQH/AY4BAAG3Af8B0wGXAfwB/wHT
        AZcB/AH/Ad0BoQL/AgABoQH/ZAABrAEAAd0B/wHPAQAC/wHMAQAB/QH/AbwBAAHtAf8BrAEAAd0B/wJc
        AVkBzAJcAVkBzAM4AVwEAAJcAVkBzAP9Af8BAAGqAQAB/wP8Af8CAAGaAf8BjwHCAfEB/wIAAacB/wEA
        AYIBpAH/AgABiwH/AYQBtwHoAf8CAAGqAf8BhAG3AegB/wEAAYABswH/AgABqwH/AYwBqQHFAf8CXAFY
        AdEIAAJQAU8BmwJfAVcB6AH/AbkBAAH/Al8BVwHoAlABTwGbCAADGQEjAZ0BAAHGAf8B3QGhAv8CAAGg
        Af8DGQEjaAABsgIAAf8BuAIAAf8BswIAAf8CXAFZAcwCXAFZAcwB/wHFAQAB/wJcAVkBzAM4A1wBWQHM
        DP8BtgHLAeEB/wEAAYwBwQH/AZUByAH1Af8CAAGlAf8BiQG8AesB/wIAAaoB/wGJAbwB6wH/AQABiAG7
        Af8BiQG8AesB/wEAAacB2QH/AQABigG+Af8CWQFnAfIIAAFcAVsBWQHMAf8BxwEAAv8BsgEAAv8BvwEA
        Af8BXAFbAVkBzAwAAxkBIwIAAaAB/wMZASNsAAJcAVkBzAH/AeMBkgL/AdUBAAL/AdEBAAL/AdEBAAL/
        AdEBAAL/AdgBAAH/AlwBWQHMAlwBWQHMAe4BsgEAAf8B7QGxAQAB/wHrAa8BAAH/AekBrQEAAf8BqAGS
        AQAB/wIAAaAB/wGdAdAB+AH/AQABiAG7Af8BkgHFAfAB/wEAAYgBuwH/AZ0B0AH4Af8BhwG6AecB/wEA
        AakB2gH/AQABsAHgAf8DXwH7CAACUAFPAZsCXwFXAegB/QHKAQAB/wJfAVcB6AJQAU8Bm4QAA04BmQJc
        AVkBzAJcAVkBzAJcAVkBzAJcAVkBzAH/AeUBlwH/AlwBWQHMAzgBXANVAbIDZAHxAf4B0gGHAf8B/QHO
        AYUB/wH6AcoBgwH/Aa0BpAGNAf8BAAGAAZoB/wEAAZwBywH/AaQB1wH8Af8BAAGIAbsB/wGkAdcB/AH/
        AYwBvwHrAf8BAAGkAdUB/wEAAa0B3QH/AYQBtwHlAf8BjAG/AewB/wgAAxQBGwJQAU8BmwJcAVkBzAJQ
        AU8BmwMUARuUAAJcAVkBzAJcAVkBzAM4AVwEAAMsAUMDVQGyAlwBWQHMAlwBWQHMAlwBWQHMAVkCYgHp
        AaUB2AH8Af8BAAGvAd0B/wEAAZ0BzAH/AakB3AL/AaUB2AH8Af8BigG9AecB/wGOAcEB6gH/AZMBxgHv
        Af8BmQHMAfQB/wNUAa+wAANOAZkDOAFcHAADLgFHA0oBjANKAYwDSgGMA0oBjANKAYwDSgGMA0oBjANK
        AYwDSgGMAy4BR/8AkQABWAJbAcsDJQE3+AADSgGNAVYCWAG7AzwBZs8AAf8EAAMLAQ8cAAMzAVMBXAJe
        Ac4DVQGyAzcBWgMKAQ1EAAMLAQ8EAAMLAQ9yAAGsAf8CAAGIAf8DAAH/BAADCwEPGAADFAEbA1sByAFe
        AmUB5QFQAlIBowE0AjUBVQMEAQU8AAMLAQ8EAAGTAgAB/wQAAwsBD00AAc8BAAH/AQABxgEAAf8BAAG8
        AYYB/wGAAbMBjwH/AZABqQGXAf8KAAGsAf8BlwEAAcgB/wIAAYcB/wIAAZYB/wIAAYMB/wQAAwsBDxgA
        ATwCPQFoAVcCXAHfAQABzgH9Af8BXAJgAdQDMwFSAwABATwAAcQCAAH/AaACAAH/AZcCAAH/BAADCwEP
        KAADGAEhAVIBVAFSAaYBWQFcAVkBzAFZAVwBWQHMAVIBVAFSAaYDGAEhIgABrAH/AZwBAAHNAf8BngEA
        Ac8B/wIAAYgB/wIAAZwB/wIAAZEB/wIAAYUB/xwAAyMBNAFaAl0BygEAAckB+AH/ATECfwH+AVgCWwHL
        ATwCPQFoMAADCwEPBAABxAIAAf8B4AGaAQAB/wGfAgAB/wGuAgAB/wGbAgAB/wQAAwsBDwMYASEDVAGm
        A1kBzANUAaYDGAEhDAADGAEhAVsBYQFbAeEBVwFfAVcB6AEAAecBAAH/AQAB5wEAAf8BVwFfAVcB6AFb
        AWEBWwHhAxgBIQEAAc8BAAH/AQABxgEAAf8BAAG8AYYB/wGAAbMBjwH/AZABqQGXAf8GAAGuAf8BmwEA
        AcwB/wGgAQAB0QH/AZYBAAHHAf8BuwEAAewB/wIAAZsB/wIAAZsB/wIAAYcB/xQAAVgCWgHAAVkCWwHD
        AVgCWwHGA1sByAEAAcgB9wH/AQABvgHtAf8BMQJfAfsBWQJbAcQDNAFUKAADCwEPBAABxAIAAf8B5QGf
        AQAB/wHnAaEBAAH/AaACAAH/AbQCAAH/AakCAAH/AZ0CAAH/BAADUgGnA18B6AOtAf8DXwHoA1IBpwwA
        AVIBVAFSAaYBVwFfAVcB6AEAAecBAAH/AQAB5wEAAf8BAAHnAQAB/wEAAecBAAH/AVcBXwFXAegBUgFU
        AVIBphoAAasB/wGdAQABzgH/AZUBAAHGAf8BxQEAAfYB/wHGAQAB9wH/AcIBAAHzAf8CAAGmAf8CAAGG
        Af8UAAM+AWsBXgJhAdoBAAHlAv8BAAHgAv8BAAHgAv8BAAHgAv8BAAHgAv8BRwJcAfgBVgJZAb4DKQE/
        KAABxgGAAQAB/wHkAZ4BAAH/AekBowEAAf8B3wGZAQAC/wG+AYIB/wGzAgAB/wGzAgAB/wGfAgAB/wQA
        A1wBzAO/Af8DvwH/A78B/wNcAcwDPAFmAzwBZgM8AWYBWQFcAVkBzAEAAecBAAH/AQAB5wEAAf8BAAG1
        AQAB/wEAAbUBAAH/AQAB5wEAAf8BAAHnAQAB/wFZAVwBWQHMBQABxgEAAf8BAAG8AYYB/wGAAbMBjwH/
        AZABqQGXAf8GAAGrAf8BlQEAAcYB/wHFAQAB9gH/AcQBAAH1Af8BwwEAAfQB/wHEAQAB9QH/Ab0BAAHu
        Af8CAAGhAf8UAAMWAR4BVQJXAboBTgJ/Af4BAAHXAv8BAAHiAv8BVQJWAbQBVQJWAbQBVQJWAbQBVQJW
        AbQBVQJWAbQoAAHDAgAB/wHmAaABAAH/Ad4BmAEAAv8ByAGMAv8ByQGNAv8BxQGJAf8BvgIAAf8BngIA
        Af8EAANcAcwDvwH/A78B/wO/Af8DXAHMAzwBZgM8AWYDPAFmAVkBXAFZAcwBAAHnAQAB/wEAAecBAAH/
        AQABtQEAAf8BAAG1AQAB/wEAAecBAAH/AQAB5wEAAf8BWQFcAVkBzBgAAawBAAHdAf8BxgEAAfcB/wHL
        AQAB/AH/AcMBAAH0Af8BwwEAAfQB/wG7AQAB7AH/AawBAAHdAf8cAANHAYIBWAJfAeMBAAHbAv8BAAHe
        Av8BUwJkAfEBVwJZAcIDIQEwMAABwwIAAf8B3gGYAQAC/wHIAYwC/wHHAYsC/wHGAYoC/wHHAYsC/wHA
        AYQB/wG5AgAB/wMgAS8DUgGnA18B6APOAf8DXwHoA1IBpwwAAVIBVAFSAaYBVwFfAVcB6AEAAecBAAH/
        AQAB5wEAAf8BAAHnAQAB/wEAAecBAAH/AVcBXwFXAegBUgFUAVIBphwAAawBAAHdAf8BzwEAAv8BzAEA
        Af0B/wG8AQAB7QH/AawBAAHdAf8gAAMkATYBWAJaAcABAAHrAv8BAAHeAv8BAAHjAv8BTgJdAfABVgJZ
        Ab4DIQEwLAAB9QGvAQAC/wHJAY0C/wHOAZIC/wHGAYoC/wHGAYoC/wG+AYIB/wH1Aa8BAAH/BAADCwEP
        AxgBIQNUAaYDXAHMA1QBpgMYASEMAAMYASEBWwFhAVsB4QFXAV8BVwHoAQAB5wEAAf8BAAHnAQAB/wFX
        AV8BVwHoAVsBYQFbAeEDGAEhIAABrAEAAd0B/wHEAQAB9QH/AawBAAHdAf8kAAMBAQIBTQJOAZYDXQHt
        AQAB5AL/AQAB5AL/AQAB6QL/AVgCYgHvAVcCWgG9AyEBMCQAAwsBDwQAAfUBrwEAAv8B0gGWAv8BzwGT
        Av8BvwGDAf8B9QGvAQAB/zAAAxgBIQFSAVQBUgGmAVkBXAFZAcwBWQFcAVkBzAFSAVQBUgGmAxgBISgA
        AawBAAHdAf8sAAEwAjEBTQFaAl0BygEAAfQC/wEAAfEC/wEAAfEC/wEAAfYC/wFYAmIB7wFXAloBvQMh
        ATAkAAMLAQ8EAAH1Aa8BAAL/AccBiwH/AfUBrwEAAf8EAAMLAQ+cAAMIAQsBVAJWAasBVAJWAasBVAJW
        AasBVAJWAasBVAJWAasBVAJWAasBVAJWAasBVAJWAasoAAMLAQ8EAAH1Aa8BAAH/BAADDQES8AADCwEP
        CwABAf8AsQADCwEPBAADCwEPFAADTgGZA1kBzANZAcwDWQHMA1kBzANZAcwDWQHMA1kBzANZAcwDWQHM
        A1kBzANZAcwDWQHMA04BmaQAAwsBDwcAAf8EAAMLAQ8QAANZAcwDwgH/A7wB/wO2Af8DsAH/A6oB/wOk
        Af8DngH/A5gB/wMAAf8DjAH/AY0BiAGNAf8DgAH/A1kBzKkAAZsBAAH/AwAB/wMAAf8EAAMLAQ8MAANZ
        AcwDywH/A8UB/wO/Af8DuQH/A7MB/wOtAf8DpwH/AgABrAH/AgABiAH/AwAB/wOPAf8BjwGLAY8B/wNZ
        AcyJAAHPAQAB/wEAAcYBAAH/AQABvAGGAf8BgAGzAY8B/wGQAakBlwH/AwsBDwUAAZsBAAH/AQABtwEA
        Af8DAAH/AQABhQEAAf8DAAH/BAADCwEPCQABzwEAAf8BAAHGAQAB/wEAAbwBhgH/AYABswGPAf8BkAGp
        AZcB/wO8Af8DtgH/AgABrAH/AZcBAAHIAf8CAAGHAf8CAAGWAf8CAAGDAf8DkgH/A1kBzwgAA04BlAFY
        AlsBxgFYAlsBxgFYAlsBxgFYAlsBxgFYAlsBxgFYAlsBxgNOAZQgAANOAZQDWwHGA1sBxgNbAcYDWwHG
        A1sBxgNbAcYDTgGUMAADCwEPBQABmwEAAf8BAAG8AQAB/wEAAb4BAAH/AwAB/wEAAYsBAAH/AQABgAEA
        Af8DAAH/DAADWQHMA90B/wPXAf8D0QH/A8sB/wPFAf8CAAGsAf8BnAEAAc0B/wGeAQABzwH/AgABiAH/
        AgABnAH/AgABkQH/AgABhQH/A1kBzAgAAVYCWAG8Aa4B9AL/AZ8B8QH+Af8BnAHwAf0B/wGZAe4B/AH/
        AZIB6wH5Af8BlwHtAfoB/wFWAlgBvCAAA1gBvAPvAf8D6wH/A+oB/wPoAf8D5QH/A+cB/wNYAbwdAAHP
        AQAB/wEAAcYBAAH/AQABvAGGAf8BgAGzAY8B/wGQAakBlwH/BQABnQEAAf8BAAG7AQAB/wEAAcABAAH/
        AQABtgEAAf8BAAHbAQAB/wEAAYoBAAH/AQABigEAAf8DAAH/CQABzwEAAf8BAAHGAQAB/wEAAbwBhgH/
        AYABswGPAf8BkAGpAZcB/wPUAf8CAAGuAf8BmwEAAcwB/wGgAQAB0QH/AZYBAAHHAf8BuwEAAewB/wIA
        AZsB/wIAAZsB/wIAAYcB/wNZAcwIAAFWAlcBuAGfAfEB/gH/AbACAAH/AbACAAH/AbACAAH/AbACAAH/
        AYgB6AH3Af8BVgJXAbggAANXAbgD6wH/AwAB/wMAAf8DAAH/AwAB/wPhAf8DVwG4NQABmgEAAf8BAAG9
        AQAB/wEAAbUBAAH/AYcB5QGGAf8BiAHmAYcB/wGEAeIBgwH/AQABlQEAAf8DAAH/DAADWQHMA+8B/wPp
        Af8D4wH/A90B/wIAAasB/wGdAQABzgH/AZUBAAHGAf8BxQEAAfYB/wHGAQAB9wH/AcIBAAHzAf8CAAGm
        Af8CAAGGAf8DWQHMCAADVQG1AZwB8AH9Af8BgwHqAfsB/wGAAegB+QH/AQAB5gH3Af8BAAHhAfIB/wEA
        AeMB8wH/AVQCYQHuAVgCWwHGAVgCWwHGAVgCWwHGAVgCWwHGAVgCWwHGA04BlAgAA1UBtQPqAf8D4wH/
        A+EB/wPfAf8D2QH/A9sB/wNhAe4BWAJbAcYBWAJbAcYBWAJbAcYBWAJbAcYBWAJbAcYDTgGUCQABxgEA
        Af8BAAG8AYYB/wGAAbMBjwH/AZABqQGXAf8FAAGaAQAB/wEAAbUBAAH/AYcB5QGGAf8BhgHkAYUB/wGF
        AeMBhAH/AYYB5AGFAf8BAAHdAQAB/wEAAZABAAH/AyABLwkAAcYBAAH/AQABvAGGAf8BgAGzAY8B/wGQ
        AakBlwH/A+YB/wIAAasB/wGVAQABxgH/AcUBAAH2Af8BxAEAAfUB/wHDAQAB9AH/AcQBAAH1Af8BvQEA
        Ae4B/wIAAaEB/wNZAcwIAANVAbIBmQHuAfwB/wGwAgAB/wGwAgAB/wGwAgAB/wGwAgAB/wGBAeQB9AH/
        AQABvgHTAf8BnwHxAf4B/wGcAfAB/QH/AZkB7gH8Af8BkgHrAfkB/wGXAe0B+gH/AVYCWAG8CAADVQGy
        A+gB/wMAAf8DAAH/AwAB/wMAAf8D3QH/A7QB/wGfAfEB/gH/AZwB8AH9Af8BmQHuAfwB/wGSAesB+QH/
        AZcB7QH6Af8BVgJYAbwdAAHMAQAB/wGIAeYBhwH/AY0B6wGMAf8BhQHjAYQB/wGFAeMBhAH/AQAB2wEA
        Af8BAAHMAQAB/wQAAwsBDwgAA1kBzAT/A/sB/wP1Af8D7wH/AawBAAHdAf8BxgEAAfcB/wHLAQAB/AH/
        AcMBAAH0Af8BwwEAAfQB/wG7AQAB7AH/AawBAAHdAf8DvwH/A1kBzAgAA1QBrgGcAe4B+wH/AY0B6gH4
        Af8BhwHoAfcB/wEAAeIB8wH/AQAB3QHuAf8BAAHiAfIB/wEAAcQB2QH/AbACAAH/AbACAAH/AbACAAH/
        AbACAAH/AYgB6AH3Af8BVgJXAbgIAANUAa4D6AH/A+MB/wPhAf8D2wH/A9UB/wPaAf8DuQH/AbACAAH/
        AbACAAH/AbACAAH/AbACAAH/AYgB6AH3Af8BVgJXAbgYAAMLAQ8FAAHMAQAB/wGRAe8BkAH/AY4B7AGN
        Af8BAAHcAQAB/wEAAcwBAAH/FAADWQHMDP8D+AH/A/IB/wGsAQAB3QH/Ac8BAAL/AcwBAAH9Af8BvAEA
        Ae0B/wGsAQAB3QH/A84B/wPIAf8DWQHMCAABRgJHAYEBUwJUAawBUwJUAawBUwJUAawBUwJUAawBUwJU
        AawBXAJkAecBAAHRAeQB/wGDAeoB+wH/AYAB6AH5Af8BAAHmAfcB/wEAAeEB8gH/AQAB4wHzAf8DVQG1
        CAADRwGBA1QBrANUAawDVAGsA1QBrANUAawDZAHnA8cB/wGDAeoB+wH/AYAB6AH5Af8BAAHmAfcB/wEA
        AeEB8gH/AQAB4wHzAf8DVQG1HAADCwEPBQABzAEAAf8BhgHkAYUB/wEAAcwBAAH/BAADCwEPEAADTgGZ
        A1kBzANZAcwDWQHMA5kB/wNZAcwDWQHMAawBAAHdAf8BxAEAAfUB/wGsAQAB3QH/A1kBzANZAcwDWQHM
        A04BmSAAA1UBsgGZAe4B/AH/AbACAAH/AbACAAH/AbACAAH/AbACAAH/AYEB5AH0Af8DVQGyIAADVQGy
        AZkB7gH8Af8BsAIAAf8BsAIAAf8BsAIAAf8BsAIAAf8BgQHkAfQB/wNVAbIgAAMLAQ8FAAHMAQAB/wQA
        Aw0BEiQAA1kBzAwAAawBAAHdAf8DWQHMMAADVAGuAZwB7gH7Af8BjQHqAfgB/wGHAegB9wH/AQAB4gHz
        Af8BAAHdAe4B/wEAAeIB8gH/A1QBriAAA1QBrgGcAe4B+wH/AY0B6gH4Af8BhwHoAfcB/wEAAeIB8wH/
        AQAB3QHuAf8BAAHiAfIB/wNUAa4kAAMLAQ8LAAEBJAADWQHMAzwBZggAAzwBZgNZAcwwAAFGAkcBgQFT
        AlQBrAFTAlQBrAFTAlQBrAFTAlQBrAFTAlQBrAFTAlQBrAFGAkcBgSAAAUYCRwGBAVMCVAGsAVMCVAGs
        AVMCVAGsAVMCVAGsAVMCVAGsAVMCVAGsAUYCRwGBWAADIwEzA1kBzANZAcwDWQHMA1kBzAMjATP/AP8A
        /wB/AAMZASMBXAFaAVwBzQMZASPwAAMZASMCAAGhAf8BngEAAccB/wFeAVwBXgHOAxkBI5gAAyMBMwMA
        Af8DAAH/CwAB/wMAAf8DIwEzNgABowH/Aa4BAAHXAf8B0wGXAfwB/wGqAQAB0wH/AVwBWgFcAc0DGQEj
        TwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/xMAAf8DAAH/AwAB/wwAAyMBMwMAAf8DAAH/AzgBXAgA
        AzgBXAMAAf8DAAH/AyMBMysAAf8DAAH/AwAB/wGOAQABtwH/AdMBlwH8Af8B0wGXAfwB/wHdAaEC/wIA
        AaEB/xgAAdcByAGyAf8BgQIAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8B1QHHAbEB/xIAAYQB/wIA
        Av8BhAIAAv8CAAH/AQABhAEABf8DAAH/EQAChAH/AQAD/wMAAf8MAAMjATMDAAH/AwAB/wMjATMIAAMj
        ATMDAAH/AwAB/wMjATMrAAH/CAADGQEjAZ0BAAHGAf8B3QGhAv8CAAGgAf8DGQEjGAABkwIAAf8DWAHB
        A1sByAJcAVkBzwJdAVkB1wJgAVoB3gJlAV4B5QNdAe0DAAH/EgABhAH/AgAC/wGEAgAC/wIAAf8BAAGE
        AQAF/wMAAf8NAAKEAf8BAAP/AwAB/xAAAyIBMQMAAf8DAAH/AyMBMwgAAyMBMwMAAf8DAAH/AyMBMysA
        Af8EAAMZASMCXAFaAc0DKgFBAgABoAH/AxkBIwwAAdMBxQGvAf8DAAH/AdUBxgGwAf8EAAGTAgAB/wNV
        AbUDWgG9AlsBWQHEAlsBWAHLAl0BWgHTAmEBXgHaAmEBXQHiAwAB/xIAAYQB/wIAAv8BhAIAAv8CAAH/
        AQABhAEABf8DAAH/DQAChAH/AQAD/wMAAf8QAAMEAQYDAAH/AwAB/wMjATMIAAMjATMDAAH/AwAB/wMl
        ATcUAAMZASMBKQJNAfoDGQEjCwAB/wMZASMBqwIAAf8B0QGjAQAB/wJeAVwBzgMZASMQAAGqAYcBAAH/
        AYECAAH/AaoBhwEAAf8BqgGHAQAB/wGeAgAB/wNTAaoDVQGyA1gBuQNYAcEDWwHIAlwBWQHPAl0BWQHX
        AwAB/xIAAYQB/wIAAv8BhAIAAv8CAAH/AQABhAEABf8DAAH/CQAChAH/AQAD/wMAAf8QAAMjATMDAAH/
        AwAB/wMjATMQAAMjATMDAAH/AwAB/wMjATMMAAMZASMBAAGMAasB/wEAAaABvwH/AVsCXgHZAxkBIwcA
        Af8BrQIAAf8B4QGzAQAC/wHYAQAB/wHdAa8BAAH/AlwBWgHNAxkBIwwAAdUBxgGwAf8BqgGHAQAB/wHV
        AcYBsAH/BAABqAGFAQAB/wNRAZ8DUgGnA1QBrgNVAbUDWgG9AlsBWQHEAlsBWAHLAwAB/xIAAYQB/wIA
        Av8BhAIAAv8CAAH/AQABhAEABf8DAAH/CQAChAH/AQAD/wMAAf8UAAMjATMDAAH/AwAB/wMlATcIAAMl
        ATcDAAH/AwAB/wMjATMMAAMZASMBAAGOAa0B/wEAAacBxgH/AQABkQGwAf8BAAGYAbcB/wFeAmEB2gMA
        Af8DAAH/AwAB/wHBAZMBAAL/AdgBAAL/AdgBAAL/AeIBAAH/AasCAAH/HAABqAGFAQAB/wNRAZ8DUQGf
        A1IBowNTAaoDVQGyA1gBuQNYAcEDAAH/EgABhAH/AgAC/wGEAgAC/wIAAf8BAAGEAQAF/wMAAf8FAAKE
        Af8BAAP/AwAB/xgAAyMBMwMAAf8DAAH/AyMBMwgAAyMBMwMAAf8DAAH/AyMBMwwAAVsCYQHhAQABqAHH
        Af8BAAGlAcQB/wEAAZEBsAH/AQABkQGwAf8BAAGfAb4B/wFeAmEB2gMZASMEAAMZASMB0AGiAQAC/wHi
        AQAB/wGqAgAB/wMZASMcAAHYAckBswH/AaoBhwEAAf8BmwIAAf8BkwIAAf8BiwIAAf8BiwIAAf8BkwIA
        Af8BiwIAAf8B1gHHAbIB/xIAAYQB/wIAAv8BhAIAAf8BhAIAAf8BAAGEAQAF/wMAAf8FAAKEAf8BAAP/
        AwAB/xgAAyMBMwMAAf8DAAH/AyMBMwgAAyMBMwMAAf8DAAH/AyMBMwwAAxkBIwEAAY4BrQH/AQABtwHW
        Af8BAAGsAcsB/wEAAaABvwH/AQABoAG/Af8BAAGnAcYB/wFeAmEB2gMZASMEAAMZASMBqgIAAf8DGQEj
        VgABhAH/AgAC/wMAAf8FAAGEAQAF/wMAAf8BAAKEAf8BAAP/AwAB/xwAAyMBMwMAAf8DAAH/AyMBMwgA
        AyMBMwMAAf8DAAH/AyMBMxAAAxkBIwEAAZEBsAH/AQABwwHiAf8BAAG6AdkB/wEAAa8BzgH/AQABrwHO
        Af8BAAHEAeMB/wFAAYUBpAH9ZgABhAH/AgABhAH/AwAB/wUAAYQBAAH/AQABhAEAAf8DAAH/AQAChAH/
        AwAB/wMAAf8gAAMjATMDAAH/AwAB/wsAAf8DAAH/AyMBMxgAAxkBIwEAAZMBsgH/AQABzwHuAf8BAAHI
        AecB/wEAAccB5gH/AUABhQGkAf0DGQEj6AADGQEjAQABlgG1Af8BAAHZAfgB/wE+AlwB+AMZASPwAAMZ
        ASMBTAJfAfMDGQEjJAABQgFNAT4HAAE+AwABKAMAAUADAAFAAwABAQEAAQEGAAECFgAD/wEABv8CAAX/
        AccCAAH/AdcCAAH/AYMCAAH/AYsCAAH/AYECAAGDAQUCAAH+AQECAAH+AQMCAAH+AcECAAEEAQMCAAH+
        AYMCAAH8AQMCAAH+AQcCAAGEAQMCAAH+AQMCAAH8AQMCAAHAAQMCAAH+AQECAAHBAYMCAAH/AwABwQHH
        AgAB/wMAAcEB/wIAAf8DAAHBAf8CAAH/AfECAAL/AgAB/wHzAfgBAAL/AgAI/wHzB/8B8Qb/AdcB8AF/
        Af8B1wP/AYsB8AE/Af8BqwL/AYMBBQH4AR8B/wHFAf8BgQH+AQMB+AEfAf4BggEHAQABBAEDAeABDwH9
        AQEBBwEAAfwBAwHgAQcB/gEBAgABhAEDAeABBwH+AQECAAH8AQcB8AEfAf4BAAEHAQAB/gEPAfABDwH+
        AQIBBwEAAf8BHwHwAQcB/QEHAf8BgQH/Ab8B+AEDAf4BiwT/AfgBAwH/AVcH/wG3Df8BrwGAAQEF/wFX
        AYABAQX/AYsBgAEBBP8BgQEFAYABAQGAAX8BgAF/AfoBAwGAAQEBgAF/AYABfwEEAQMBAAEBAYABfwGA
        AX8B/AEDAYABAQGAAQEBgAEBAYQBAQGAAQEBgAEBAYABAQH8AQUBgAEBAYABAQGAAQEB+gEPAYABAQGA
        AQEBgAEBAf0BFwGAAQEB/gEBAf4BAQH+Aa8B+wGfAf4BAQH+AQEB/wFvAfkBnwH+AQEB/gEBAv8B+AEf
        G/8Bxwf/AYME/wHxAY8B/wGBAv8BwAF4AeEBhwH+AQEB+AEDAcABeAHhAYcB/gHBAfgBAwHAAXEB4QGH
        Af4BgwGIAQMBwAFxAeEBhwHGAQcBgAEDAcABYwLDAYIBAwGIAQMBwAFjAeEBhwEAAQMB+AEDAcABRwHh
        AYcBAAGDAfgBAwHAAUcB4QGHAQABRwL/AcQBDwHhAYcBgAF/Av8BxAEPAfEBjwHAAX8G/wHgB/8B8QH/
        Cw==
</value>
  </data>
  <metadata name="BgwExclusion.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>270, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>47</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAoAMDAQAAEABABoBgAApgAAACAgEAABAAQA6AIAAA4HAAAQEBAAAQAEACgBAAD2CQAAMDAAAAEA
        CACoDgAAHgsAACAgAAABAAgAqAgAAMYZAAAQEAAAAQAIAGgFAABuIgAAgIAAAAEAIAAoCAEA1icAADAw
        AAABACAAqCUAAP4vAQAgIAAAAQAgAKgQAACmVQEAEBAAAAEAIABoBAAATmYBACgAAAAwAAAAYAAAAAEA
        BAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDA
        wAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////cAAA
        AAAAAAAAAAAA//////////////j49wAAAAAAAAAAAAAA//j/+P/////////4j3AAAAAAAAAAAAAA//iI
        iIiIj4iPiIf4iIgAAAAAAAAAAAAA+P////////////+IiPiAAAAAAAAAAAAA///4///4/////4//+I+I
        AAAAAAAAAAAA//iIiIiIj4iIiIiIeI+IgAAAAAAAAAAA//+P////+P////+PiI//iAAAAAAAAAAA/4//
        //j/////////+I//iIAAAAAAAAAA////iI+IiIiIiIiIiIiI+IgAAAAAAAAA////+P/////////4+PiI
        iPhwAAAAAAAA/4/4//+Pj///////////+Pj3AAAAAAAA//iIiIiIiPiIiIiIiPj4/4//AAAAAAAA////
        ////////j///////j/+PAAAAAAAA+P+P//////////////+P////AAAAAAAA//iIiIj//4//////////
        /4//AAAAAAAA//////+P+I2P////+I//////AAAAAAAA+P+P+I2P+ImP////+NiP////AAAAAAAA////
        jYeP//2I////+ImI////AAAAAAAA/4+Hd4j///iYj/////jX2P//AAAAAAAA//jXiIj4//+NiP/////4
        mI//AAAAAAAA+PiYj////4/3eP+P///4iY//AAAAAAAA//iNfY+Ij/j414j/iIiJ3///AAAAAAAA//iI
        h3iI+P+Ph9j4+I2I+P//AAAAAAAA+P//+I2P////+Ij/+IiP//+PAAAAAAAA//iIj4iIiIiIiH2PiIiP
        j4//AAAAAAAA+PiPiIiI+I+P+I+PiI+P////AAAAAAAA////////////////////////AAAAAAAA+P+P
        j4iIiIiI+Pj4j///j///AAAAAAAA//j/iP+PiP+Pj4j4iP////j/AAAAAAAA+P///4////////////+P
        ////AAAAAAAA//iIiIiIj4iI////////////AAAAAAAA+PiPj4+PiPj/j4/4/4//j/j/AAAAAAAA/4//
        /4//////////////////AAAAAAAA+PiIiPj4/4/4/4/4//j/j/+PAAAAAAAA//j4j4//j///////+P//
        /4//AAAAAAAA+P+P/4+P/4+Pj4+P//+P////AAAAAAAA/4//j//4////////j///j/j/AAAAAAAA+Pj4
        /4+P+Pj4+Pj//4+P////AAAAAAAA/4iIiIiIiIiIj4+I+IiIiI+PAAAAAAAA+P+PiP/4/4//j4+I/4//
        ////AAAAAAAA//j///j///+P/////////4//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////AAD///////8AAP//
        /////wAA/AAAAf//AAD8AAAA//8AAPwAAAB//wAA/AAAAD//AAD8AAAAH/8AAPwAAAAP/wAA/AAAAAf/
        AAD8AAAAA/8AAPwAAAAB/wAA/AAAAAD/AAD8AAAAAH8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA////////AAD///////8AAP//
        /////wAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACA
        gACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////9wAAAAAAAAAP////////+PiAAAAAAAAAD/iIiI
        +I+IiIiAAAAAAAAA//////////+I9wAAAAAAAP+IiIj4iI+IiPiAAAAAAAD//////////4j/iAAAAAAA
        /4+PiIj4j4iIiIiAAAAAAP/////////////4iAAAAAD/iPiIj4iPiP+Pj/8AAAAA///////////////4
        AAAAAPiIiP/4///////4/wAAAAD///9/+N////eP//8AAAAA//iNj/iH///42I//AAAAAP+NiI//h4//
        //iY/wAAAAD4h4j///jY//+I2P8AAAAA/4iHiI+IiI+I2I//AAAAAP//iN///4iI+I///wAAAAD4iIiI
        iIiIiIiPj/8AAAAA////////////////AAAAAPj/iIiIiIiIj///jwAAAAD/j///////////j/8AAAAA
        /4iIiIiI////j///AAAAAPj///////j/j////wAAAAD/iIiPj///////j/gAAAAA+P+P//+Pj4/4////
        AAAAAPj4/4+P//////j4/wAAAAD4iIj4iIiIiPiPj48AAAAA////j//////4////AAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AAA//wAAH/8AAA//AAAH/wAAA/8AAAH/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAAAAAgAAAAAQAEAAAAAACAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8A
        AAD/AP8A//8AAP///wAAAAAAAAAAAAD/////cAAAAPj4/4+IAAAA/4/4+I9wAAD/+P//iPgAAPj/j4//
        +AAA/4j4/4//AAD4j/j/+I8AAPiIiIiIjwAA+Ij4j4j/AAD/+P+P//8AAPiPj/+P/wAA+P/4//+PAAD/
        j4/4//8AAI+Pj4+PjwAAAAAAAAAAAP//AADAHwAAwA8AAMAHAADAAwAAwAMAAMADAADAAwAAwAMAAMAD
        AADAAwAAwAMAAMADAADAAwAAwAMAAP//AAAoAAAAMAAAAGAAAAABAAgAAAAAAAAJAAAAAAAAAAAAAAAB
        AAAAAQAAAAAAAJFV6ACUWegAll3pAJhf6QCfbeYAmmLqAJtk6gCcZuoAnWjqAKBt6wCibuwAoHDlAKZ5
        5wCicOoApHPqAKV06wCkcuwApnbsAKh37gCpeu0Aq33tAJqamgCdnZ0AoaGhAKWlpQCpqakAr6+vALGx
        sQC2trYAuLi3ALm5uQC8vLsAvb29AK6V0QC0ld8AtZvaAL2s1QC6o9wAvafdAL+z0QCrguYArYXkAK6C
        7gCwh+sAtY3uALmS7wC8me4Ato3wALqV8ADHuNwAwJ7xAMGk6QDAoewAw6TuAMOq6ADIr+oAy7TqAMy0
        7QDCofEAxabxAMeq8ADIqvMAyq3yAM+28wDNsvQA0LbzANG49QDBwcEAxMTDAMXFxQDJyckAzMzLAM3N
        zQDQ0M8AzsnVAM7E2gDMwdwAz8XcANPO2gDR0dEA1NTTANXV1QDY2NcA2dnZANzb2wDc3NsA29vcAN3d
        3QDg4N8A0sPoAN3b4QDezfYA4d7lAOLW9ADo3fcA5Nf4AOjc+ADi4uEA5OTjAOXl5QDo5+YA6OjnAOjj
        7wDp6ekA7OzrAO3t7QDw7+8A8PDvAOni8wDs5fYA7OnxAO/s8wDu6fUA7+f6APDq+QDz7/kA9O77APTu
        /ADx8fEA9PTzAPX19QD4+PcA9fL5APf0+wD39PwA+Pb6APj1/AD5+fkA/f39AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICA
        gHl5aBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAgICAgICAgICAeWhoaFEXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIB5gICAgIB5gICAgICAgICAgICAeXloZFFRGAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIB5eVEhRkZGUVFTR0eAU1NHgGhRIRxoIRghURkAAAAAAAAAAAAAAAAAAAAAAAAAAIB5gHloeXlo
        gHl5aICAaHqAgHloaGhoUVNGWVEaAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAaICAgICAgICA
        eXloaGRGU2RRGgAAAAAAAAAAAAAAAAAAAAAAAIB5gFFGHEZGR0ZHRlNTSkZGRlFHUVEhGhoYHHlkURwA
        AAAAAAAAAAAAAAAAAAAAAIB5eXlkeXl5aHl5eXloaHmAaIB5eWhTaGRKHIB6ZFEZAAAAAAAAAAAAAAAA
        AAAAAIB5eYCAenqAgICAgICAgICAgICAgHl5aGhTIYCAeWRKGQAAAAAAAAAAAAAAAAAAAIB5eYCAgFFR
        UVFGRkdGRkdRR1FTU1FTRBpERyEhR1NkShcAAAAAAAAAAAAAAAAAAIB5eYCAgHlkcHl5eXloeYB5eXmA
        aGZ5aGhmZFNTUUpHU0cXAAAAAAAAAAAAAAAAAIB5eYB5gHqAgHloaICAgICAgICAgICAeXlwaHloZmRk
        WWRRFwAAAAAAAAAAAAAAAIB5eVFHR1FGRkdRISFHeVNHR0YhU2RHR0doeWhsaGhoaGhoaAAAAAAAAAAA
        AAAAAIB5eXloeXloaIB5eXl5gHmAgHmAgHl5eXl5eXl5eWh5a3lweQAAAAAAAAAAAAAAAIB5eXl5eXmA
        gICAgICAgICAgICAgICAgICAgHl5eXl5cGx5egAAAAAAAAAAAAAAAIB5eVFGIUZHUWSAgICAgICAgICA
        gICAgICAgICAeXl5eXp5gAAAAAAAAAAAAAAAAHp5eWhseWh5eV5CgIBDCxFhgICAgICAgIBDYICAgICA
        gICAgAAAAAAAAAAAAAAAAHl5eXl5eYBuLwsugIB2EQMVf4CAgICAgIAwBi52gICAgICAgAAAAAAAAAAA
        AAAAAIB5eXl5cDwLBitcgICAbgYDPICAgICAgIBgFAMEPHqAgICAgAAAAAAAAAAAAAAAAHl5eVk4EQYM
        J1lwgICAgEIGBlyAgICAgICAf0MLAQlDf4CAgAAAAAAAAAAAAAAAAHlseSMGCzRKWVRkgICAgH8uBhR2
        gICAgICAgIB/PgQBPICAgAAAAAAAAAAAAAAAAHl5azQGCT5uenp5gICAgIB2FQsugICAgICAgIB6PgkB
        O4CAgAAAAAAAAAAAAAAAAHlseVkiCQYROHBkU2RTgGRZWhELQGiAeWRTZjoTCQs0a4CAgAAAAAAAAAAA
        AAAAAHl5aFNHUy8JBg0lUVNZemRZcD4REU6AZFMyKwsRPG5oeYCAgAAAAAAAAAAAAAAAAHlseXlreXlu
        LwYweoB6gICAgHouFTB6f4A8ET5ygICAgICAgAAAAAAAAAAAAAAAAHlraGRTSlFRUygkRmhTUVNTU2RM
        Kiw6aGYnTFNmaGhof4CAgAAAAAAAAAAAAAAAAHl5bFFGR1FTUVFTUVNER1NTU1NRU1NZZEdUU2ZZaGho
        eYCAgAAAAAAAAAAAAAAAAHloeWh5eXl5eXl5eYB5gHqAgIB/gICAgICAgICAgICAgICAgAAAAAAAAAAA
        AAAAAHloeWx5aGRkZFNTUWRRUVNTU2ZkaHBsU1NogICAgICAgICAgAAAAAAAAAAAAAAAAHlobGhseVFE
        UVNRUUdKU1NTU1NmUVFkU0pTgICAgICAgICAgAAAAAAAAAAAAAAAAHlobGxoeWh5eXl5eXl5eXp6enp5
        eXl6gICAgICAgICAgICAgAAAAAAAAAAAAAAAAHlobFlTUVNTR1FRU1FkZGRTWWiAeXp6enqAgICAgICA
        gICAgAAAAAAAAAAAAAAAAHloaFFHU1NHR1FHUVFTU1FkU2R5eXl5eXp5gHmAenqAgICAgAAAAAAAAAAA
        AAAAAHlobGhsbGh5bHlwbHl5eXl5eXl5eXl5eXl5eXp5enl5eXl6gAAAAAAAAAAAAAAAAHloaFlRSlNR
        U2hsaHloeWh5eXl5eXl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAGxoaFFHUUdRUVN5bGx5aHlsbGh5
        bHl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAHloaGhoaGhobGhoeWhseWh5eXlseWh5bHl5eXl5eXl5
        eXl5eQAAAAAAAAAAAAAAAGhoaGhobGhsaGxsaHlobHlobGx5aHl5bHloeWh5bHlseWx5egAAAAAAAAAA
        AAAAAHloaGhoaGhsaGxobGhsbGh5bGh5eWh5aHl5bHlseWx5aHlseQAAAAAAAAAAAAAAAGhoZkZIHx8f
        SlNEH0ghREYfR1NkRGghU2xIIUhRSlFTZGRoegAAAAAAAAAAAAAAAGxkZFlTWVlZZGhoZGRoWWhoaGRT
        aGhkU2xoaGhobGhoeWx5eQAAAAAAAAAAAAAAAHlobGxsbGxsbGxsbGx5eWx5bHl5eXl5eXl5enl6eXl5
        eXl5egAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////wAA////////AAD///////8AAPwA
        AAH//wAA/AAAAP//AAD8AAAAf/8AAPwAAAA//wAA/AAAAB//AAD8AAAAD/8AAPwAAAAH/wAA/AAAAAP/
        AAD8AAAAAf8AAPwAAAAA/wAA/AAAAAB/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAP///////wAA////////AAD///////8AACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAABAAAAAAAAlVrpAJhf6QCZYeoAnGXrAJ1o
        6QCibusAoGzsAKJw6ACkcewAp3fsAKh66gCqe+0Aq33tAK1/7gCdnZ0AoqKiAKenpwCpqakAsLCwALu7
        ugC/v78AsJfTALOU3wC4nN8ArIHrALGG7QCyie4AtIrvALua6QC2jfAAx7rZAMCe8QDBoe4AwqHxAMeo
        8gDJrPIAy6/0AMyx8gDBwcEAxMTDAMbGxQDIyMcAycfLAMrKyQDMzMsAzcvPAM3NzQDQ0M8AzMfTAMzE
        1gDPxN8A0M/SANHR0QDU09YA1dXVANfW2QDZ2dkA3NzbANzb3gDd3d0A2czsAN3a4QDWw/EA2cX2ANrI
        9ADezfYA4dnsAOHU8wDh0vYA4tT3AOTW+ADi4uIA5OTjAOXl5QDo6OcA6urpAOzs6wDs6u4A7e3tAPDw
        7wDt6PQA6uD4AOzj+QDt5vkA8On5APLt+QD07/sA8fHxAPT08wD19fUA+Pj3APf1+QD49voA+fn5APr4
        /AD+/v4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeXl5eXl5eXl5e
        Xl5eXllNDwAAAAAAAAAAAAAAAAAAAF5ZXl5eXl5eXl5eXl5ZTU03DwAAAAAAAAAAAAAAAAAAXl4wNzc5
        OTlKSkpNSjcwMBM3EAAAAAAAAAAAAAAAAABeWV5eXl5eWV5eXl5eWU1LODc5EwAAAAAAAAAAAAAAAF5e
        NzA3MDc3SjA4MDc+MCcVE005EAAAAAAAAAAAAAAAXllZXl5eXl5eXl5eXl5ZTUsVXlk5EAAAAAAAAAAA
        AABbW15eNzk5MDc3OTdIOTg3FTAoMDc3DwAAAAAAAAAAAFlbWV5eXllZW15eXl5eXllZTUtKOTk5DwAA
        AAAAAAAAXlk3OUooODcwTUo3MD45OTlZWE1QTU1QAAAAAAAAAABbWVleXl5eXl5eXl5eXl5eXl5ZWVlZ
        WVkAAAAAAAAAAFleNzc5N01bXUdTXl5eXl5eXl5eW1tbXgAAAAAAAAAAWVlZWVlADFNeHAJTXl5eXlcJ
        QF5eXl5eAAAAAAAAAABZWVlGGgYmW15XBg5eXl5eXiUEDkdeXl4AAAAAAAAAAFlZFwQdMThbXl5HBCRe
        Xl5eXlsgASJeXgAAAAAAAAAAWVkiBCFQW1tdXl4kBkdeXl5eVyIEIl5eAAAAAAAAAABZWTAfDAQYNDdN
        Pj4cDD5NORYJG0FNXl4AAAAAAAAAAFlNWVlZPwlDW1teXlUMIl5XHEJeXl5eXgAAAAAAAAAAWVkoKjAw
        KzAwKDAwMDIzPjg0N0pKUF5eAAAAAAAAAABZTVlYWFlZWVlZWVteXl5eXV1dXl5eXl4AAAAAAAAAAFlN
        UFA0MDcoMCs3MDg5OTkwTV5eXl5eXgAAAAAAAAAAWU1NWFBZWVhZWVlZWV5ZXlleXl5eXl5eAAAAAAAA
        AABQTTAwNxUoMDA4OTdNWVtZXlleWV5eXl4AAAAAAAAAAFlNTU1NTU1YWFlZUFlZWVlbWV5ZW1leXgAA
        AAAAAAAATU0wKDcoSlBYUFlZWVlZWVlZWVlbWVlbAAAAAAAAAABNTUtNTU1NUE1YTVhYWVlZWVlZWVlZ
        WVkAAAAAAAAAAE1KTUtNTU1NUE1YUFBQWFhZWFlZWVlZWQAAAAAAAAAATUswKCcwOTAwKjQwNzc5MFAo
        Nzk5Sk1ZAAAAAAAAAABZTU1NTVhNTVlQWFBYWVlZWFlZWVlZWVsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AA
        A//wAAH/8AAA//AAAH/wAAA/8AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAEAAAAAAACioqIApKSkALyj3wCyie4AtpXlALiS
        7wC+nO4AvpvxAMe53ADIruwAzb7jAMmx7ADCovEAzrP0AMTExADMzMwA1tbWANnU3wDa2toA3d3cAODg
        3wDRxOMA2s7rAN/a5QDe1+gA28j2AN/R8wDg2OkA5N3uAOHS9gDh4eEA5OTjAOXl5QDk4OoA6enpAOzs
        6wDt7e0A8PDvAO/u8QDu5vkA8Oj6APLt+QDx8fEA9fX1APj3+gD5+fkA/v7+AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAuLi4u
        Li4uJQIAAAAAAAAALSElIS0mJRMQAgAAAAAAAC0hISElISUTDy0BAAAAAAAtLSEhISElIRMREQIAAAAA
        LSEhISUlJSUlLSUlAAAAAC0fHxsbGi4uGyosLgAAAAAtCgUdLgQpLikIDi4AAAAAJgMHGSUdBicdDQwu
        AAAAAC0TEgkTIQsXFiItLgAAAAAmJh8hISEhJSUuLi4AAAAAJRMTEyEhLS0tLSwuAAAAACUTHyUmJiYm
        JiwsLgAAAAAlISQkJiYtJi0mLSYAAAAAJRMUHxMfHx8hICEtAAAAAAAAAAAAAAAAAAAAAAAA//8AAMAf
        AADADwAAwAcAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAA//8AACgA
        AACAAAAAAAEAAAEAIAAAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAFAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAFAAAABQAA
        AAQAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAMAAAACwAAAAgAAAAGAAAABAAAAAIAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAcAAAAMAAAAEQAAABYAAAAaAAAAHAAA
        AB0AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAdAAAAHAAA
        ABoAAAAXAAAAEgAAAA4AAAAJAAAABQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADAAAABQAAAAeAAAAJwAAAC0AAAAwAAAAMgAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADIAAAAwAAAALQAAACgAAAAiAAAAGgAAABIAAAALAAAABwAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAA
        AEcAAABJAAAASgAAAEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABKAAAASQAA
        AEgAAABEAAAAPgAAADUAAAAqAAAAHwAAABUAAAAOAAAABwAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAEAAAACwAAABYAAAAmAAAAOQAAAEkAAABUAAAAWwAAAF4AAABfAAAAXwAAAF8AAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAF8AAABfAAAAXQAAAFkAAABTAAAASQAAAD0AAAAwAAAAIwAA
        ABgAAAAPAAAACQAAAAQAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAANAAAAGgAAACwAAABCAAAAVP//
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////9DQ0NYhISFmAAAAUAAAAEIAAAA0AAAAJgAAABoAAAARAAAACgAAAAUAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAcAAAAMAAAAEcAAABb//////n5+f/29vb/9/f2//f39//39/f/+Pj3//j4
        +P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+fn5//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+/v7//t7e3/7e3t/+vr6//p6en/5+fn/87Ozvk3Nzd0AAAAVAAA
        AEYAAAA3AAAAKQAAABwAAAASAAAACgAAAAUAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASQAA
        AF7/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fj/+fn5//n5+f/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/7+/v/+/v7//r6+v/5+fn/9/f3//b29v/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+jo6P/m5ub/29vb/8zMzP1SUlKGAAAAVwAAAEkAAAA6AAAAKwAAAB4AAAATAAAACwAA
        AAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABKAAAAX//////29vb/9vb2//f39v/39/f/9/f3//j4
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4
        +P/39/f/9fX1//T09P/z8/P/8fHx//Dw8P/u7u7/7e3t/+vr6//p6en/6Ofn/+Tk5P/i4eH/09PT/8zM
        zP5sbGyaAAAAWgAAAEsAAAA9AAAALgAAACAAAAAVAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAdAAAAMgAA
        AEoAAABf//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v///////v7+//39/f/8/Pz/+/v7//r6+v/6+vr/+Pj4//f39//19fX/9PT0//Ly8v/x8fH/7+/v/+7u
        7v/t7e3/6+vr/+np6f/n5+f/5OTk/9/f3//a2tr/0dHR/8rKyv+FhYWwAAAAXAAAAE4AAAA/AAAAMAAA
        ACIAAAAWAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/7+/v/+vr6//r6
        +v/4+Pj/9/f3//X19f/09PT/8vLy//Hx8f/v7+//7u7u/+zs7P/r6+v/6enp/+fn5//j4+P/39/f/9jY
        2P/W1tb/0dHR/8rKyv+ZmZnHCAgIYQAAAFAAAABBAAAAMQAAACMAAAAXAAAADgAAAAgAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T09P/y8vL/8fHx/+/v
        7//u7u7/7Ozs/+vr6//p6en/5+fn/+Pj4//e3t7/1tbW/9LS0v/X19f/0dHR/8rKyv+lpaXVEhISZQAA
        AFIAAABDAAAAMwAAACUAAAAYAAAADwAAAAgAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f3
        9//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+Pj4//r6+v/6+vr/9/f3//r6+v/5+fn/+fn5//v7
        +/+1tbX/29vb//v7+//7+/v/+/v7//z8/P/8/Pz/+vr6//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7/+/v7//7+/v///////v7+//39/f/8/Pz/+/v7//r6
        +v/6+vr/9vb2//f39//19fX/9PT0//Ly8v/x8fH/7Ozs/+7u7v/s7Oz/6+vr/+np6f/n5+f/4+Pj/97e
        3v/T09P/ysrK/9bW1v/X19f/0NDQ/8rKyv+tra3gHh4ebAAAAFMAAABFAAAANQAAACYAAAAaAAAAEAAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/S0tL/3Nzc/5KS
        kv+zs7P/4ODg/6SkpP+urq7/2tra/6urq/+srKz/z8/P/9vb2/+enp7/+vr6/7+/v//z8/P//Pz8/8HB
        wf+6urr/8vLy/6ioqP/d3d3/zMzM/66urv/AwMD/4uLi//39/f/9/f3//f39/8LCwv/s7Oz//v7+/6am
        pv+vr6//4eHh/6+vr//+/v7//f39//z8/P/7+/v/+vr6/76+vv+5ubn/7u7u/6Ojo//U1NT/x8fH/6Cg
        oP+vr6//4uLi/+zs7P/r6+v/6enp/5qamv/ExMT/t7e3/4KCgv+AgID/rq6u/93d3f/X19f/0NDQ/8rK
        yv+zs7PpLy8vdAAAAFUAAABGAAAANwAAACgAAAAbAAAAEQAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f3
        9v/39/f/9/f3//j49//4+Pj/jY2N/9zc3P/5+fn/oqKi/+fn5//Dw8P/rq6u/+fn5//BwcH/sLCw/9PT
        0//Q0ND/ra2t/76+vv/s7Oz/9PT0/6mpqf/Ly8v/sbGx//n5+f/8/Pz/pqam/9zc3P/Ozs7/0dHR/5qa
        mv/9/f3//f39//39/f/9/f3/wsLC/+zs7P/+/v7/sbGx/+jo6P/IyMj/paWl//39/f/9/f3//Pz8//v7
        +//6+vr/ra2t//j4+P/39/f/oaGh/9LS0v/Jycn/hISE/6mpqf/Hx8f/7Ozs/+vr6//p6en/mJiY/8PD
        w/+5ubn/n5+f/319ff+urq7/1dXV/93d3f/W1tb/0NDQ/8nJyf+4uLjwQEBAfgAAAFcAAABIAAAAOQAA
        ACoAAAAdAAAAEgAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/j4+P/tra2/93d
        3f+VlZX/urq6/+7u7v/Pz8//wcHB//Ly8v/Hx8f/r6+v/83Nzf/Kysr/9fX1/8zMzP+3t7f/y8vL//v7
        +/+YmJj/t7e3//f39/+RkZH/sbGx/+/v7//Hx8f/2tra/+np6f/9/f3//f39//39/f+ZmZn/ra2t/+np
        6f/R0dH/xMTE//b29v/ExMT/tLS0/+vr6//8/Pz/+/v7//r6+v+UlJT/tbW1//Pz8/+MjIz/q6ur/+fn
        5/+6urr/rq6u/+Xl5f/t7e3/6+vr/+np6f+Dg4P/oKCg/9fW1v+mpqb/l5aW/769vf+4uLj/4+Pj/93d
        3f/W1tb/0NDQ/8nJyf+8vLz2UVFRiQAAAFgAAABKAAAAOgAAACsAAAAeAAAAEwAAAAsAAAAGAAAAAgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b2
        9v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fn/+fn5/8XFxf/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/l5eX/4eHh//v7+//7+/v/+/v7//v7+//7+/v//Pz8/+rq6v/7+/v//Pz8/8jIyP/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39/+/v7/+2trb/5ubm//7+/v/+/v7//v7+//7+/v/+/v7//f39//z8
        /P/7+/v/+/v7/+fn5//4+Pj/9/f3/8LCwv/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/7e2
        tv/m5uX/4uLi/9zc3P/R0dH/wMC//7e3t//p6en/4+Pj/93d3f/W1tb/0NDQ/8nJyf+/v7/7YmJilQAA
        AFoAAABMAAAAPAAAAC0AAAAfAAAAFAAAAAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5
        +P/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//7+/v/+vr6//n5+f/39/f/9vb2//T0
        9P/z8/P/8fHx//Dw8P/v7+//7e3t/+zs7P/q6ur/6Ojo/+bm5v/j4+P/3t7e/9TU1P/FxMT/s7Ky/9ra
        2v/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJyf/AwMD9c3NzowAAAFsAAABNAAAAPQAAAC4AAAAgAAAAFAAA
        AAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b2
        9v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz//Pz8//v7+//6+vr/+fn5//f39//29vb/9fX1//Pz8//y8vL/8PDw/+/v7//t7e3/7Ozs/+rq
        6v/p6ej/5ubm/+Tj4//f397/1tbW/8nJyf+3t7f/wMDA//Dw8P/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJ
        yf/BwcH/goKCsQAAAF0AAABOAAAAPgAAAC4AAAAgAAAAFAAAAAsAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz/+/v7//r6+v/5+fn/+Pj4//b2
        9v/19fX/8/Pz//Ly8v/x8fH/7+/v/+7u7v/s7Oz/6+vr/+np6f/n5+f/5eXl/+Hg4P/a2tn/zs7N/7y8
        u/+rq6v/7+/v/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQMDA14AAABPAAAAPwAA
        AC4AAAAfAAAAEwAAAAoAAAAFAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//f3
        9//6+vr/+Pj4//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz/wcHB/66u
        rv/r6+v//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//Pz8//7+/v/9/f3//v7+//7+
        /v/9/f3//f39//z8/P/7+/v/+vr6//b29v/4+Pj/9/f3//X19f/09PT/7u7u//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+Xl5f/m5ub/4ODg/9zc3P/Qz8//v7+//6ysrP/Q0ND/9vb2/+/v7//p6en/4uLi/9zc
        3P/V1dX/z8/P/8jIyP/BwcH/mJiYywMDA14AAABPAAAAPgAAAC4AAAAeAAAAEgAAAAoAAAAFAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/0dHR/9zc3P+mpqb/3d3d/8nJyf+oqKj/ubm5/+zs7P+ampr/oqKi/8nJyf+srKz/ra2t/8/P
        z//BwcH/i4uL/9/f3/+oqKj/3t7e/83Nzf+mpqb/q6ur/83Nzf/AwMD/9fX1//39/f/6+vr/sbGx//39
        /f+oqKj/39/f/9DQ0P+cnJz/pKSk/87Ozv+pqan/39/f/9HR0f+urq7/t7e3/+Tk5P/AwMD/r6+v/9vb
        2//39/f/zc3N/9ra2v+np6f/8fHx//Dw8P+fn5//zc3N/8LCwv+cnJz/qqqq/9zc3P+Kior/jY2N/62t
        rf+GhYX/eHh3/6SkpP/8/Pz/9vb2/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQAA
        AF0AAABOAAAAPQAAACwAAAAdAAAAEgAAAAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4/42Njf/b29v/+fn5/6SkpP/c3Nz/y8vL/4uL
        i/+zs7P/zc3N/7u7u/+enp7/4eHh/7Gxsf/U1NT/0dHR//v7+/+tra3/+/v7/6ampv/d3d3/zs7O/6mp
        qf/W1tb/zc3N//X19f+qqqr/zMzM//r6+v+xsbH//f39/6ampv/d3d3/0dHR/729vf+fn5//6Ojo/6en
        p//c3Nz/0dHR/5WVlf+pqan/+/v7/7e3t/+zs7P/8PDw/42Njf/c3Nz/9fX1/9LS0v/Jycn/8PDw/52d
        nf/Nzc3/w8PD/4GBgf+lpaX/wcDA/6qqqf+Li4v/xcXF/42Njf+WlpX/j4+P//r6+v/8/Pz/9fX1/+/v
        7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jIyP/AwMD/fX19uQAAAFwAAABNAAAAPAAAACsAAAAdAAAAEQAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//b29v/39/f/9/f3//f3
        9//4+Pj/4+Pj/7W1tf/d3d3/kJCQ/6+vr//s7Oz/w8PD/7a2tv/w8PD/wcHB/7e3t//5+fn/x8fH/6+v
        r//R0dH/zc3N/8LCwv/7+/v/r6+v/7Gxsf/v7+//vb29/7q6uv/d3d3/uLi4/83Nzf/7+/v/6enp/6io
        qP/19fX/kZGR/7Kysv/x8fH/w8PD/7u7u//9/f3/sLCw/7Gxsf/x8fH/rq6u/9DQ0P/v7+//xcXF/7W1
        tf/w8PD/4eHh/7S0tP/b29v/9PT0/6ioqP/w8PD/iYmJ/6enp//i4uL/tra2/6qqqv/g4OD/sLCw/6en
        p//Z2dn/n5+f/39/f/+Pj4//3d3d//7+/v/8/Pz/9fX1/+/v7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jI
        yP/AwMD/cXFxowAAAFsAAABLAAAAOgAAACoAAAAbAAAAEAAAAAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////b29f/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5+f/FxcX/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/5ubm/+Hh4f/7+/v/1NTU//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//f39//Ly8v/y8vL/+Tk5P/Jycn//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/MzMz//f39//z8/P/7+/v/+vr6//r6+v/4+Pj/9/f3//b29v/09PT/3t7e/9nZ
        2f+9vb3/7+/v/+7u7v/s7Oz/6+vr/+np6f/o5+f/4+Pj/9zc3P/Pz8//qqqq/5qamv/MzMv//v7+//7+
        /v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb2//U1NT/zs7O/8fHx/+/v7/9YmJilgAAAFoAAABKAAAAOQAA
        ACgAAAAaAAAAEAAAAAgAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9/f2//f3
        9//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7
        +//7+/v/+vr6//n5+f/4+Pj/9vb2//X19f/09PT/8vLy//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/+np
        6P/l5eX/3t7e/9LS0v+/v7//rays/7y8vP/+/v7//v7+//7+/v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb
        2//U1NT/zs7O/8fHx/+9vb37UFBQigAAAFkAAABJAAAAOAAAACcAAAAZAAAADwAAAAgAAAADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T0
        9P/z8/P/8vLy//Dw8P/v7+//7u7u/+zs7P/r6+v/6urq/+bm5v/g4OD/1dXV/8PDw/+wsLD/tbW1//7+
        /v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9vb2//U1NT/zs7O/8fHx/+6urr2PT09fwAA
        AFgAAABHAAAANgAAACYAAAAYAAAADgAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29f/29vb/9vb2//f3
        9v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//f39//29vb/9fX1//T09P/y8vL/8fHx//Dw8P/u7u7/7e3t/+zs
        7P/r6+v/5+fn/+Lh4f/Y2Nj/yMfH/7W1tf+xsbH//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u
        7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fHx/+2trbwLi4udgAAAFYAAABGAAAANQAAACUAAAAXAAAADQAA
        AAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5
        +f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//j4
        +P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3/+/v7//39/f/8/Pz//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//f39//39/f/+/v7//f39//z8/P/8/Pz/9/f3//r6+v/6+vr/+Pj4//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+zs7P/u7u7/7e3t/+zs7P/p6en/5OTk/9va2v/Nzc3/vLy8/7Cw
        sP/+/v7//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fH
        x/+wsLDpHR0dbgAAAFUAAABEAAAAMwAAACMAAAAWAAAADAAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb2//b2
        9v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/09PT/93d
        3f/BwcH/5eXl//v7+/+tra3/+/v7//v7+/+lpaX/r6+v/9bW1v+4uLj/r6+v/7Kysv+/v7//9PT0//z8
        /P+NjY3/m5ub/+bm5v+bm5v/pKSk/8zMzP/MzMz/n5+f//7+/v/CwsL/jIyM/+Pj4/+tra3/ra2t/9TU
        1P/9/f3/1NTU/+Hh4f+tra3/+/v7//r6+v+8vLz/5+fn//b29v+oqKj/9PT0//Pz8/+dnZ3/paWl/8vL
        y/+urq7/qamp/6Wlpf+vr6//2dnZ/9PT0//FxcX/t7a2/7Gxsf+ysrL/t7e3/76+vv/Ozs7/5eXl//v7
        +//6+vr/9PT0/+3t7f/n5+f/4ODg/9ra2v/T09P/zc3N/8XFxf+qqqrhERERaAAAAFQAAABDAAAAMgAA
        ACIAAAAVAAAACwAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////X19f/29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/5+fj/+fn5//n5+f/5+fn/+vr6/46Ojv/d3d3/+vr6/8HBwf/l5eX/+/v7/6Ojo//6+vr/+/v7/6+v
        r//o6Oj/vb29/7a2tv+tra3/s7Oz//X19f+qqqr/y8vL/6ioqP/v7+//srKy/729vf+fn5//5eXl/6en
        p/+4uLj/7u7u//7+/v+vr6///v7+/7Ozs//V1dX/1NTU/5GRkf/i4uL//Pz8/9vb2//Pz8//+vr6/729
        vf/n5+f/9/f3/5+fn//09PT/8/Pz/6ioqP/b29v/tra2/62trf+np6f/p6en/+Li4v+YmJj/s7Oz/9HQ
        0P/FxcX/vLy8/7e3t/+zs7L/sLCv/6+urv+srKv/q6ur/7u7u//T09P/7e3t/+3t7f/n5+f/4ODg/9ra
        2v/T09P/zc3N/8XFxf+ioqLVCAgIYwAAAFIAAABBAAAAMAAAACAAAAATAAAACwAAAAUAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//b2
        9f/29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/5eXl/7e3
        t//e3t7/mZmZ/6mpqf/k5OT/w8PD/7Gxsf/o6Oj/z8/P/8HBwf/v7+//qKio/7Gxsf/S0tL/uLi4/8zM
        zP/7+/v/oaGh/8HBwf/Pz8//w8PD/7q6uv/4+Pj/yMjI//Pz8//Ozs7/z8/P/8XFxf/+/v7/ycnJ/7Cw
        sP/V1dX/5+fn/7m5uf/i4uL//Pz8/66urv/6+vr/lZWV/6urq//k5OT/v7+//62trf/j4+P/yMjI/7q6
        uv/k5OT/oKCg/6ioqP/IyMj/q6ur/7y8vP/h4eH/29vb/9XV1f/Ozs7/ysrK/8XFxf/Dw8P/wsHB/7+/
        vv+9vb3/ubm5/7e2tv+2trb/yMfH/9vb2//m5ub/4ODg/9nZ2f/T09P/zMzM/8XFxf+WlpbHAAAAXwAA
        AFAAAAA/AAAALQAAAB4AAAASAAAACQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/s7Oz/s7Oz/+Hh4f/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/Q0ND/4uLi//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7/19fX//7+/v/+/v7/5+fn/+Xl5f/+/v7//v7+//39/f/8/Pz/5ubm/+Hh
        4f/r6+v/s7Oz/+Li4v/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+7u7v/t7e3/6urq/+jo
        6P/k5OT/39/f/9zc3P/Z2dn/19fX/9XV1f/T09P/0dHR/8/Pz//Nzc3/ycnJ/8fHx//Dw8P/wMDA/8TE
        xP/U09P/3d3d/9nZ2f/T09P/zMzM/8XFxf+AgICxAAAAXgAAAE4AAAA8AAAAKwAAABwAAAAQAAAACAAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+vr6//j4+P/39/f/9vb2//X1
        9f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7Ozs/+np6f/n5+f/5eXl/+Tk4//i4uL/4eHh/9/f
        3//d3d3/29vb/9ra2v/X19f/1tbV/9PT0//R0dH/z8/O/8/Pzv/Pz87/1NTT/9jY1//T09P/zMzM/8XF
        xf9oaGicAAAAXAAAAEsAAAA6AAAAKAAAABkAAAAOAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//j4+P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v
        7//u7u7/7Ozs/+vr6//r6+v/6Ojo/+fn5//n5+b/5ubm/+Tk5P/j4+P/4uLh/+Hh4f/g39//3t7e/93d
        3f/b29v/2tnZ/9rZ2f/a2dn/3Nzc/97e3v/V1dX/zMzM/8TExP5OTk6IAAAAWQAAAEgAAAA2AAAAJAAA
        ABUAAAALAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/8/Pz/+/v7//r6+v/6+vr/+fn5//j4
        +P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7e3t/+3t7f/s7Oz/6+vr/+rq
        6v/p6en/6enp/+fn5//n5ub/5ubm/+Tk5P/k5OT/4+Pj/+Pj4v/h4eH/4eHh/+Hh4f/i4uH/4+Pj/+Tk
        5P/e3t7/z8/P/8XFxfw0NDR4AAAAVQAAAEMAAAAvAAAAHQAAABAAAAAHAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X19f/19fX/9vb1//b29v/29vb/9vb2//f3
        9//39/f/9/f3//j4+P/4+Pj/9vb2//n5+f/5+fn/9vb2//r6+v/6+vr/+vr6//r6+v/6+vr/9/f3//r6
        +v/7+/v/+/v7//v7+/+0tLT/29vb//v7+//BwcH/rq6u/+vr6//8/Pz/+fn5//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3/+/v7//39/f/+/v7/+/v7//7+/v/8/Pz//v7+//39/f/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/4+Pj/+/v7//r6+v/6+vr/9/f3//j4+P/39/f/8/Pz//X19f/09PT/8/Pz//Ly
        8v/x8fH/8PDw/+/v7//v7+//7u7u/+3t7f/s7Oz/7Ozs/+vr6//q6ur/6urq/+np6f/p6en/6Ojo/+jo
        6P/o6Oj/5+bm/+fm5v/n5ub/5+bm/+fm5v/n5+f/6Ojo/+jo6P/p6en/29vb/8nJyfceHh5rAAAATgAA
        ADkAAAAlAAAAFAAAAAkAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9fX1//X19f/19fX/9vb2//b29v/29vb/9/f3//f39//Q0ND/29va/8DAwP+2trb/7u7t/6Sk
        pP+tra3/2dnZ/729vf/y8vL/+vr6/5mZmf+cnJz/3d3d/6ysrP+/v7//39/f/9ra2v+fn5//+/v7/6Wl
        pf+rq6v/zs7O/6mpqf+6urr/7u7u/6ioqP/d3d3/zs7O//39/f/9/f3//f39/8HBwf+8vLz/8/Pz/6mp
        qf+7u7v/8fHx/5ubm/+jo6P/x8fH/7q6uv+0tLT/tLS0//7+/v/T09P/4uLi/62trf/8/Pz/+/v7/729
        vf+6urr/8PDw/6Ghof+pqan/2dnZ/7u7u//t7e3/8/Pz//Ly8v/x8fH/8fHx//Dw8P/v7+//7u7u/+7u
        7v/t7e3/7e3t/+zs7P/s7Oz/6+vr/+vr6//q6ur/6urq/+rq6v/q6ur/6enp/+np6f/p6en/6urq/+rq
        6v/q6ur/6urq/+vr6//r6+v/7u7u/83NzdcAAABWAAAAQQAAACsAAAAYAAAACwAAAAQAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fT/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/jIyM/9ra2v/39/f/r6+v//Pz8//4+Pj/ra2t/+bm5v/AwMD/8/Pz/6mpqf/Hx8f/oKCg/+rq
        6v+wsLD/z8/P/5mZmf/7+/v/ra2t/729vf/s7Oz/qKio/9XV1f/Nzc3/i4uL/7S0tP/Q0ND/pqam/9vb
        2//Pz8///f39//39/f/9/f3/r6+v//z8/P/9/f3/i4uL/7S0tP/T09P/vb29/5+fn//f39//uLi4/7Gx
        sf+zs7P/kZGR/+Pj4//9/f3/29vb/9HR0f/7+/v/ra2t//r6+v/6+vr/ra2t/+Dg4P/ExMT/7+/v/6Oj
        o//IyMj/8/Pz//Pz8//y8vL/8fHx//Dw8P/w8PD/7+/v/+/v7//u7u7/7e3t/+3t7f/t7e3/7Ozs/+zs
        7P/s7Oz/7Ozs/+zs7P/r6+v/6+vr/+vr6//s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+3t7f/v7+///////wAA
        AFsAAABGAAAALwAAABsAAAANAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////X19P/19fX/9fX1//b29f/29vb/9vb2//b29v/i4uL/tbW1/9vb2/+Xl5f/s7Oz//Pz
        8//Ozs7/wMDA//Hx8f+3t7f/y8vL//n5+f+UlJT/w8PD/9DQ0P/Dw8P/2NjY/+Tk5P/Kysr/9PT0/83N
        zf+9vb3/ubm5/93d3f/ExMT/t7e3//Ly8v+vr6//sbGx/+/v7//8/Pz//f39//39/f+Xl5f/uLi4//n5
        +f/ExMT/uLi4//X19f/Dw8P/u7u7//b29v+qqqr/s7Oz/9fX1//n5+f/u7u7/+Pj4//9/f3/r6+v//v7
        +/+UlJT/uLi4//f39//Nzc3/v7+///Dw8P+0tLT/ycnJ//T09P/19fX/9PT0//Pz8//y8vL/8vLy//Hx
        8f/w8PD/8PDw/+/v7//v7+//7u7u/+7u7v/u7u7/7e3t/+3t7f/t7e3/7e3t/+3t7f/t7e3/7e3t/+3t
        7f/t7e3/7e3t/+3t7f/u7u7/7u7u/+/v7///////AAAAXgAAAEkAAAAxAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX0//X19f/19fX/9fX1//b2
        9v/29vb/9vb2//f39//39/f/9/f3/+fn5v/39/f/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6/+Pj
        4//Y2Nj/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39/+rq6v/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/n5+f/4+Pj/+np6f/7+/v/+/v7//r6+v/6+vr/+fn5//j4
        +P/4+Pj/9/f3//b29v/19fX/9PT0//T09P/z8/P/8vLy//Ly8v/x8fH/8fHx//Dw8P/w8PD/7+/v/+/v
        7//v7+//7+/v/+7u7v/u7u7/7u7u/+7u7v/u7u7/7u7u/+7u7v/v7+//7+/v/+/v7//v7+//8PDw////
        //8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//n5+f/4+Pj/9/f3//b29v/29vb/9fX1//T0
        9P/09PT/8/Pz//Pz8//y8vL/8vLy//Hx8f/x8fH/8fHx//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8fHx//Hx8f/x8fH//////wAAAF8AAABKAAAAMgAAAB0AAAAOAAAABQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T09P/19fT/9fX1//X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7
        +//6+vr/+vr6//n5+f/4+Pj/+Pj4//f39//29vb/9vb2//X19f/09PT/9PT0//Pz8//z8/P/8/Pz//Ly
        8v/y8vL/8vLy//Ly8v/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLy//Ly8v/y8vL/8vLy//Pz
        8///////AAAAXwAAAEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//r6+v/5+fn/+Pj4//j4
        +P/39/f/9vb2//b29v/19fX/9fX1//T09P/09PT/9PT0//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PT/9PT0//////8AAABfAAAASgAAADIAAAAdAAAADgAA
        AAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PT/9PT0//X1
        9P/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7///////7+/v/9/f3//f39//z8
        /P/8/Pz//Pz8//v7+//7+/v/+vr6//r6+v/6+vr/+fn5//j4+P/4+Pj/9/f3//f39//29vb/9vb2//b2
        9v/19fX/9fX1//X19f/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fX/9fX1//X1
        9f/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////T09P/09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/z8/P/9ra
        2v+kpKT/29vb/8jIx/+jo6P/ra2t/9nZ2f/AwMD/t7e3/+/v7/+oqKj/uLi4/+vr6/++vr7/8vLy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz//Pz8//v7+//7+/v/+/v7//r6
        +v/6+vr/+vr6//n5+f/5+fn/+Pj4//j4+P/39/f/9/f3//f39//29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PT0//T0
        9P/19fT/9fX0//X19f/19fX/9vb1/4uLi//a2tr/9/f2/6Kiov/a2tr/yMjI/62trf/m5ub/v7+//6+v
        r//19fX/+fn5/4qKiv+zs7P/zs7O//Pz8/+oqKj/ycnJ//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//39/f/9/f3//Pz8//z8/P/7+/v/+/v7//v7+//6+vr/+vr6//r6+v/6+vr/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/4+Pj/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PP/9PT0//T09P/19fT/9fX1//X19f/29vX/4eHh/7S0
        tP/a2tr/ra2t/62trf/p6en/zc3M/7+/v//w8PD/l5eX/7S0tP/09PT/wsLC/7a2tv/v7+//tra2/8vL
        y//5+fn/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/9/f3//Pz8//z8
        /P/8/Pz/+/v7//v7+//7+/v/+/v7//r6+v/6+vr/+vr6//r6+v/6+vr/+fn5//n5+f/5+fn/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T0
        8//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f39//39/f/+Pj4//j4
        +P/m5ub/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/5+fr/2MP1/9G48//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+/+8mPD/llzq/5Vb6f+UWun/lFnp/5NY6f+TV+n/uZPw//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+/86y9P/Wvvb//Pz9//z8/P/8/Pz//Pz8//z8/P/7+/v/+/v7//v7
        +//7+/v/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PTz//T08//09PT/9PT0//X19P/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/4dL2/6+E7v+gauz/yKjy//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//bz+v+ib+v/k1jp/5NX
        6f+SVuj/klXo/5FU6P+RVOj/2ML1//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/w6Pz/5Vb
        6f+oeO3/4ND4//39/f/9/f3//Pz8//z8/P/8/Pz//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/5+fj/+fn5//n5+f/5+fn/6uD4/7iR8P+faez/n2rs/59q7P/IqPL/+vr6//r6
        +v/7+/v/+/v7//v7+//7+/v/+/v7/+bZ9/+XXen/lFnp/5RY6f+TWOn/k1fp/5JW6P+YYOn/7+f5//z8
        /P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/EpPP/llzp/5Zb6f+VWun/sYbv/+rf+f/9/f3//f39//39
        /f/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Pz8//09PP/9PTz//T09P/09PT/9fX0//X1
        9f/19fX/9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/8Or4/8Ce
        8f+faev/n2ns/59p7P+faez/n2rs/8eo8v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7/8yv
        8/+WXOn/lVvp/5Va6f+UWen/lFjp/5NX6f+qfOz/+/r8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+/8Sk
        8/+XXur/l13q/5Zb6f+VWun/lVrp/7uW8f/z7Pz//f39//39/f/9/f3//f39//39/f/9/f3//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8/Pz//Pz8//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/9vb1//b29v/29vb/9/f2//f3
        9//39/f/9/f3//j4+P/4+Pj/8/D3/8qt8v+hbez/nmjr/55o6/+faez/n2ns/59p7P+faez/x6jy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+vr7/7CG7v+XXer/llzp/5Zb6f+VWun/lFnp/5RZ
        6f/IqvP//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/xaXz/5hf6v+YXur/l13q/5Zb6f+VWun/lFnp/5dd
        6v/Hp/P/+PX9//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////z8/P/8/Pz//T08//09PP/9PT0//T0
        9P/19fT/9fX1//X19f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/9vb3/9O78/+kc+z/nmfr/55n
        6/+eaOv/nmjr/55o6/+faez/n2ns/6Bq7P/UvPT/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/8Or5/59q6/+YXur/l13q/5dd6v+WXOn/lVvp/5Zc6f/k1vj//Pz8//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/UvPX/mmLq/5lg6v+YXur/l13q/5Zc6f+VWun/lFnp/5NY6f+bZOr/0rf1//38///+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v///////////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Pz8v/z8/P/8/Pz//T08//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/9/f3/9vL8/+rfe3/nWbr/51n6/+dZ+v/nmfr/55n6/+eaOv/nmjr/55o6/+5kvD/6uD4//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/3Mr1/5lh6v+ZYOr/mF/q/5de
        6v+XXer/llzp/6Nv7P/18vv//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/s4vr/to3w/5lg6v+YXur/l13q/5Zc
        6f+VWun/lFnp/5NY6f+SVun/o3Ds/93K9//+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//X19P/19fX/9fX1//b29f/29vb/9vb2/+TY9P+yiO7/nGXr/51m6/+dZuv/nWbr/51n
        6/+dZ+v/nmfr/55n6/+whO7/4tT2//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/waDx/5pi6v+ZYer/mWDq/5hf6v+YXur/l13q/7mS8P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7/5NX4/61/7v+YX+r/l13q/5Zc6f+VW+n/lFnp/5NY6f+TV+n/klXo/6x9
        7v/n2vn//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////z8/L/8/Py//Pz8//z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1/+vk
        8/+7l+//nGbr/5xl6/+cZev/nGXr/51m6/+dZuv/nWbr/51n6/+peu3/2cX0//n4+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//49vr/q3zt/5tj
        6/+aYur/mmHq/5lh6v+ZYOr/mF/q/9W/9f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v3+/9rF
        9/+ldO3/l13q/5Zc6f+VW+n/lFnp/5RY6f+TV+n/klbo/5FV6P+2j/D/8Oj7//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Ly8v/z8/L/8/Pz//Pz
        8//09PP/9PTz//T09P/09PT/z8/O/9XS2/+ig87/nmjs/5xk6/+cZOv/nGXr/5xl6/+cZev/nWbr/51m
        6/+fbOf/q5PO/+zq7v+mpqb/uLi4/+rq6v+9vb3/8fHx//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//q4Pj/n2ns/5xl6/+bZOv/m2Pr/5pi6v+aYer/nWfr/+3k
        +f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//z6/v/Rt/X/n2rs/5Zc6f+VW+n/lVrp/5RY
        6f+TV+n/klbo/5FU6P+TWOn/waDy//fy/P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8vLy//Pz8v/z8/L/8/Pz//Pz8//09PP/9PT0/4qKiv++puH/oW3r/5tj
        6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/5xl6/+eaev/rZDX/62qsv/19fX/+Pj4/4mJif+xsbH/zc3N//Ly
        8v+oqKj/ysrK//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//TuvT/nWfr/51m6/+cZev/nGTr/5tj6/+aYuv/rYDt//r4/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/49f3/yKn0/5pi6v+WW+n/lVrp/5RY6f+TV+n/klbo/5FV6P+QU+j/l17q/8+0
        9P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vL/8vLy//Pz
        8v/z8/L/8/Pz//T08//09PP/39/f/5xp5f+bY+v/m2Pr/5tj6/+bZOv/m2Tr/5xk6/+dZev/rYvf/7q0
        w//v7+//lZWV/7Ozs//z8/P/wcHB/7S0tP/u7u3/tra2/8rKyv/4+Pj/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v6+/+5kvD/nmjr/55n6/+dZuv/nWbr/5xl
        6/+bZOv/yKnz//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7/8+z8/76a
        8v+XXOn/lVrp/5RZ6f+TV+n/klbo/5FV6P+QU+j/mmLq//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/om/r/5pi
        6/+bY+v/m2Pr/5tj6/+bZOv/tY7u/+fd9P/29vb/9/f2//f39//l5eX/9vb2//j49//4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//Pu+f+od+7/n2rs/59p7P+eaOv/nWfr/51m6/+cZuv/4tP4//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39/+vh+f+zie7/lVrp/5RZ6f+TV+n/klbo/5FV
        6P+bY+r//v7+//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08/+ib+v/mmLq/5tj6/+bY+v/m2Pr/5tj6/+1ju7/5930//b2
        9v/29vb/9/f2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7/+HS9/+hbez/oGvs/6Bq
        7P+faez/nmjr/55n6/+mde3/9O/6//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3/6+H5/7SL7/+WXOn/lVrp/5RZ6f+TWOn/klbo/5xk6v/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8//z8/P/9PTz/6Jv
        6/+aYur/mmLq/5tj6/+bY+v/m2Pr/5tj6/+cZev/vpzw/+zm9f/29vb/9/f3//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7/8mr8v+ibez/oWzs/6Br7P+ga+z/n2rs/59p7P+6lPD//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/8uz7/7+c8f+aYer/mF7q/5dd6v+WXOn/lVrp/5RZ
        6f+TWOn/nWbr//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/z7bv/6Bs6v+aYur/mmLq/5tj6/+bY+v/m2Pr/5tk
        6/+bZOv/n2ns/8eo8P/x7vb/9/f3//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+ff7/7OI
        7/+jb+3/om7s/6Ft7P+hbOz/oGvs/6Bq7P/UvPX//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/9/T8/8qr
        8/+eaez/m2Pr/5ph6v+ZYOr/mF/q/5dd6v+WXOn/lVvp/5tl6//Rt/X//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/7uvz/8Kj7v+dZuv/mmLq/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/51p5v+9pN//9fP3//f3
        9//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/29vb/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//39/f/7uX5/6d27v+jcO3/o2/t/6Ju7P+ibez/oWzs/6Rx
        7f/p4Pf//Pz8//z8/P/6+vr//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/5+fn//Pz8//r6
        +v/8/Pz//Pz8//39/f/9/f3/+/r9/9S79v+lc+z/nWfr/5xl6/+bZOv/m2Pr/5ph6v+ZYOr/mF/q/5ph
        6//EpPL/9vL8//39/f/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Pz/83Nzf/Y2Nf/j4+O/6uktf+wi+T/mmPq/5tj
        6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+oeO3/sJ3N//Dv8P/39/f/9vb1/62trf/4+Pj/paWl/9ra
        2v/Kysr/vr6+/4qKiv/e3t7/wMDA/7Gxsf/c3Nz/+vr6//r6+v/6+vr/v7+//4qKiv/f39//wMDA/7Gx
        sf/d3d3/2cT2/6Vy7f+kce3/pHDt/6Nw7f+jb+3/om7s/6N34f/d29//v7+//7y8vP/z8/P//Pz8//z8
        /P/8/Pz/ra2t//z8/P/8/Pz/qKio/7m5uf/w8PD/mZmZ/6Ghof/R0dH/xMPE/5uItP+qfOv/oGvs/59p
        7P+eaOv/nWfr/5xl6/+cZOv/m2Pr/5pj6v+3kuz/0svc/9zc3P/w8PD/4+Pj/+zs7P/6+vr//f39//39
        /f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy//Pz
        8v+Kion/19fX//Pz8/+enp7/4uLh/76+vv+mm7f/q4Ho/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk
        6/+cZev/nnLe/7ut0f/19fX/ra2t//j4+P+jo6P/2dnZ/8vLy//5+fn/q6ur//n5+f+2trb/s7Oz//Pz
        8//6+vr/+vr6//r6+v/6+vr/rKys//r6+v+3t7f/s7Oz//X19f/7+/v/wZ/y/6Zz7f+lc+3/pXLt/6Rx
        7f+jcO3/o2/t/7GS3f+tra3/+/v7//z8/P/8/Pz//Pz8//z8/P+ioqL/+/v7//z8/P+Kior/srKy/9TU
        1P+7u7v/nJyc/9jL6/+1i/D/o2/t/6Jt7P+hbOz/oGvs/59q7P+eaOv/nWfr/51m6/+pfuX/3tPv/+bm
        5v/e3t7/6+vr//Dw8P/a2tr/6enp//T09P/9/f3//f39//39/f/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8fHw//Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy/97e3f+ysrH/2NjY/5GRkf+2trX/6Ojo/8rK
        yv+8vLz/1MLs/6Jy5f+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+cZev/nGXr/7GJ6v+hl6//8PDv/4+P
        j/+urq7/6+vr/8rKyv/BwcH/+fn5/8TExP+0tLT/8PDw//r6+v/6+vr/+vr6/8vLy//CwsL/+vr6/8TE
        xP+1tbX/8fHx//v7+//18fr/sITw/6d17v+mdO3/pnPt/6Vy7f+kce3/pHDt/5mJr/+4uLj/+Pj4//v7
        +//8/Pz//Pz8/8LCwv+ysrL/6+vr/8PDw/+3t7f/9PT0/7yzyv+siN//pXPt/6Vy7f+kcO3/o2/t/6Ju
        7P+hbOz/oGvs/59q7P+leOb/3Mvz/+Pj4//f39//+fn5/+Xl5f/d3d3/8PDw/+vr6//q6ur/+vr6//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vL/8vLy//Pz8v/z8/P/wMDA//Pz8//09PP/9PT0//T09P/09PT/8/P0/8Os5f+hber/m2Pr/5tk
        6/+bZOv/nGTr/5xk6/+cZOv/nGXr/51m6//Cq+T/xMTD//j4+P/4+Pj/+Pj4/9LS0v/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6/9PT0//6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/m2vj/qXju/6h2
        7v+nde7/pnTt/6Z07f+lc+3/qnrs//Lt+f/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/ZxPb/qXju/6d27v+mdO3/pnPt/6Vy7f+kcO3/o2/t/6Ju7P+peu7/1r/1//v6/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//Ly8v/09PT//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Dw8P/x8fD/8fHw//Hx8f/y8vH/8vLx//Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/19fT/9fX0//Hu9f/HqfD/nmjs/5tj6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/8Sl
        8f/39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/RtvT/qXju/6l47v+od+7/p3bu/6d17v+mdO3/vJbx//r6
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8/8+y9P+pee7/qHfu/6d27v+nde7/pnPt/6Vy
        7f+ndu7/z7P1//f1+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8PDw//Hx8P/x8fD/8fHw//Hx
        8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X1
        9f/s5vT/vZrv/5xk6/+bZOv/m2Tr/5xk6/+cZOv/xKXx//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//n4
        +v+8lvH/qnru/6l57v+peO7/qHfu/6h27v+nde7/1Lz1//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/z7P1/6p67v+pee7/qHfu/6h27v+odu7/x6bz//Pt+v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////w8O//8PDw//Hx8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/5tzz/7SM7v+bZOv/m2Tr/5xk
        6//EpPH/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//Dp+f+wg/D/q3vv/6p67v+qee7/qXnu/6l4
        7v+qeu7/6uD4//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//Ps/T/q3vv/6p67v+pee7/v5zy/+3k
        +v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8PDw//T08//y8vL/9PT0//Pz
        8//09PP/9PT0//X19f/19fX/9vb1/93O8/+rfu3/m2Tr/8Oj8P++vr7/q6ur/+bm5v/39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/9vb2//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/5+fn/+fn5/97N9v+sfe//rH3v/6t87/+re+//qnru/6p57v+0ie//9/T6//v7+//39/f/+/v7//v7
        +//7+/v/+/v7/8+09P+sfe//uZLx/+XX9//5+fn/+/v7//r6+v/6+vr/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/i4uL/3Nzc//j4+P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHx//Ly8f/MzMv/1tbV/6Gh
        of/X19f/w8PC/6SkpP+0tLT/5eXl/5aWlv+enp7/wsLC/6enp/+oqKj/y8vL/7y8vP+Hh4f/29va/6Sk
        pf/Aq9//s5nY/6Kiov+oqKf/ycnJ/7y8vP/w8PD/+Pj3/6Wlpf/IyMj/zc3N/6ampv+4uLf/4+Pj/7a2
        tv+vr6//sbGx/76+vv+Kior/39/f/6ampv/a2tr/zc3N/6urq/+pqan/0tLS/6yO1v+tgO3/r4Lv/6x/
        7f+ugO//rX/v/6x+7v+6neP/4eHh/62trf/7+/v/+/v7/6enp//Y2Nj/wKvf/6mXwv+4uLn/8PDw/6Cg
        oP+qqqr/1tbW/7q6uv+7u7v/4ODg/9PT0/+zs7P/7Ozs/83Nzf/o6Oj/6Ojo/9XV1f/b29v/7e3t/+np
        6f/6+vr//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////w8O//8PDv//Dw
        7//w8PD/8fHw//Hx8P/x8fD/iYmJ/9bW1f/y8vH/n5+f/9XV1f/ExMP/h4eG/66urv/IyMj/tra2/5qa
        mv/c3Nz/rKys/87Ozv/MzMv/9fX1/6ioqP/19fX/oqKh/9jY2P/Jycn/paWl/9HR0f/Jycj/8PDw/6am
        pv/Hx8f/iYmJ/46Ojv/r6+v/iIiI/7Gxsf/FxcX/tLS0/62trf+xsbH/+fn5/6urq//6+vr/pKSk/9jY
        2P/Pz8//sLCw/9DQ0P/T09P/ioqK/7Gxsf/R0dH/oqKi//n5+f/39/f/jo6O/+Hh4f/7+/v/2dnZ/9DQ
        0P/7+/v/paWl/9fX1//S0tL/iYmJ/7Gxsf/U1NT/v7+//6ampv/r6+v/v7+//9nZ2f/h4eH/+/v7/8nJ
        yf/7+/v/y8vL/+jo6P/o6Oj/19fX/+np6f/s7Oz/+Pj4/+Tk5P/x8fH/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+/v7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/c3Nz/sLCw/9fX
        1v+MjIv/qqqq/+Tk5P+9vbz/sbGw/+np6f+7u7v/s7Oy//Pz8v/BwcH/qqqq/8vLy//IyMf/vb29//X1
        9f+qqqr/ra2s/+np6f+5ubn/tbW1/9jY2P+0tLP/yMjI//b29v+enp7/vLy8/7e3tv/AwMD/tLS0/+jo
        6P+mpqb/r6+v/9LS0v/Kysr/wcHB//n5+f+tra3/r6+v/+7u7v/FxcX/rKys/9PT0//BwcH/tra2//Hx
        8f/BwcH/sbGx/+np6f/j4+P/t7e3/+Dg4P/7+/v/ra2t//v7+/+Pj4//r6+v//Dw8P/CwsL/tra2//Pz
        8//ExMT/wcHB//v7+//Q0ND/vr6+/+Hh4f/b29v/2NjY//v7+//Pz8//1NTU//b29v/f39//4eHh//Hx
        8f/m5ub/7+/v//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx/7+/vv/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/9PTz//T08//f39//2tra//T09P/Pz87/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b2
        9v/39/b/9/f3/8vLy//Ozs7/9fX1//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/T09P/+fn5//n5
        +f/5+fn/+vr6//r6+v/j4+P/4uLi//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/j4+P/4eHh/8fHx//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//o6Oj/6+vr//v7
        +//i4uL/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////v7+7/7+/u/+/v7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T0
        9P/19fT/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly
        8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9/f2//f39//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b29f/29vb/9vb2//b29v/29vb/9/f2//f3
        9//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+vr6//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/8fHx//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//b29f/29vb/9vb2//b29v/09PT/9/f2//b29v/39/f/9/f3//f39//39/f/+Pj3//j4
        +P/39/f/9/f3//j4+P/4+Pj/+fn4//n5+f/19fX/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/9/f3//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8vLx//Ly8f/MzMv/1tbW/7u7u//e3t3/8/Py/6en
        p//z8/P/8/Pz/6CgoP+qqqr/0NDQ/7Ozs/+qqqr/ra2s/7q6uv/u7u7/9fX1/4mJiP+Xl5b/4ODg/5eX
        l/+fn5//xcXF/8fHxf+bm5v/9/f3/729vf+JiYn/3Nzc/6mpqP+pqan/z8/P//j4+P/Q0ND/3d3d/6ur
        q//5+fn/+fn5/7y8vP/o6Oj/+fn5/6urq//5+fn/+vr6/6Ojo/+srKz/1dXV/7e3t/+ysrL/sLCw/7+/
        v//z8/P/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/iYmJ/9bW1f/y8vH/u7u7/93d3f/z8/L/np6d//Ly8v/z8/P/qamp/+Li4f+4uLf/sbGx/6en
        p/+tra3/7u7t/6Wlpf/ExMT/o6Oj/+jo6P+tra3/uLi4/5ubm//f39//oqKi/7Ozs//n5+f/9/f3/6qq
        qv/39/f/rq6u/9DQz//Pz8//jY2N/93d3f/4+Pj/2NjY/8zMzP/5+fj/vLy8/+jo6P/5+fn/oaGh//j4
        +P/5+fn/ra2t/+Li4v++vr7/tbW1/6+vr/+xsbH/8vLy/6ampv/Nzc3/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////u7u3/7u7t/+7u7f/u7u7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/c3Nz/sbGw/9fX1v+UlJT/pKSk/93d
        3f+9vbz/rKyr/+Dg4P/Jycn/u7u7/+jo5/+jo6L/rKys/8zMzP+ysrL/xcXF//T09P+cnJz/u7u7/8jI
        yP+9vb3/tbW0//Hx8f/CwsL/7e3t/8jIyP/Jycn/wMDA//f39//CwsL/q6ur/9DQ0P/h4eH/tbW1/93d
        3f/4+Pj/rKys//f39/+UlJT/qqqq/+Tk5P/AwMD/sLCw/+fn5//Nzc3/v7+//+vr6/+mpqb/r6+v/9PT
        0/+2trb/zMzM//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx/+Xl5P+traz/2tra//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/09PT/9fX0/8vLyv/b29v/9fX1//X19f/19fX/9vb1//b29v/29vb/9vb2//b2
        9v/Q0ND/9/f2//f39//h4eH/39/f//f39//39/f/+Pj3//j4+P/j4+P/3t7e/+np6f+ysrL/4eHh//j4
        +P/5+fj/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7e3s/+7u7f/u7u3/7u7t/+7u
        7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/09PT/9PT0//X1
        9P/19fX/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+//7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//09PP/9PTz//T09P/09PT/9PT0//X19P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9vb2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb2//b29v/29vb/9vb2//b2
        9v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/L/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/8nJyf/T09L/ubm5/6+vr//k5OT/nZ2d/6enpv/S0tH/tra1/+np
        6f/x8fD/mZmY/6iop/+7u7v/oqKi/7Kysv/k5OP/oqKi/7Kysv/l5eX/p6em/7Kysf/c3Nv/u7u7/6ys
        rP/V1dX/9PTz/8zMzP/Z2dn/qKio//T09P/09PT/u7u6/7a2tf/s7Oz/oKCg/6mpqf/X19f/u7u6/+/v
        7v/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//4+Pf/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f+Hh4b/0tLS/+7u
        7v+pqaj/6urp/+/v7v+mpqb/3d3d/7m5uP/p6ej/oqKi/8DAwP+YmJj/vLy7/8DAv/+FhYX/rKys/8fH
        x/+GhoX/ra2s/8fHx/+QkJD/oqKi//Pz8v+ysrH/rq6u/+vr6/+Kior/2dnY//T08//V1dT/yMjI//T0
        9P+pqan/9PTz//X19P+qqqr/39/f/8DAwP/u7u7/pKSk/8jIx//29vX/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9/f2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3t/9ra2f+urq3/09PS/5GRkf+srKv/6urp/8XFxP+4uLf/5+fn/7Cw
        r//BwcH/7+/u/5aWlv/S0tL/2NjX/7y8u/+vr67/5+fn/7y8vP+wsK//6Ojn/6ampv/IyMj/5OTk/7+/
        vv+wsK//6urp/97e3v+ysrL/2NjY//T08/+pqaj/8/Pz/5KSkv+ysrL/8PDw/8rKyf+9vbz/7e3t/7Oz
        s//Hx8f/9PT0//X19f/29vX/9vb1//b29f/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f2//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j49//4+Pf/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/3t7d/+3t7P/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//3d3c/8DAwP/v7+//8fHw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/wsLC//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz/9/f
        3//a2tn/4uLh//T09P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//b2
        9f/29vX/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        9//4+Pf/+Pj3//j49//4+Pf/+Pj3//j49//39/f/9/f3//f39//39/f//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb1//b29f/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/9PTz//T08//09PP/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/39/b/9/f2//f39v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx
        8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f3
        9v/39/b/9/f2//b29v/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//w8O//8PDv//Dw7//w8O//8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//Hx8f/0tLR/56enf/S0tH/vr69/5yc
        nP+mpqX/0NDP/7i4t/+vr6//5eXk/6CgoP+wsK//4eHg/7W1tf/p6ej/8PDv//Dw7//w8O//8PDw//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X1
        9P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////q6un/6urp/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/hoaF/9HR0P/s7Oz/nJyb/9HR0P+/v77/paWk/9zc2/+3t7f/qKin/+rq6f/u7u3/hISE/6ur
        qv/ExMP/6Ojn/6Ghof+/v7//8PDv//Dw7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz
        8//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//Y2Nf/ra2s/9HR0P+lpaT/pqal/9/f
        3v/Dw8L/t7e2/+Xl5f+RkZD/rKyr/+np6P+5ubj/ra2t/+Tk5P+urq3/wcHA/+7u7f/v7+//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6uno/+rq6f/q6un/6urp/+vr
        6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/9zc3P/t7ez/7u7t/+7u
        7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////p6ej/6uno/+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X1
        9P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+np6P/p6ej/6uno/+rq
        6f/q6un/6urp/+vr6v/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////6ejn/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr
        6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v7//v7+//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Ly
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////o6Of/6ejn/+np
        6P/p6ej/6eno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t
        7P/t7ez/7e3s/+3t7P/t7ez/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T0
        8//09PP//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+vq
        6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly
        8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6Ofm/+jo
        5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Py//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////n5+b/6Ofm/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+fn
        5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no5//p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr
        6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/6+vq/+7u
        7f/u7u3/7u7t/+7u7f/u7u7/6+vq/+/v7v/v7+7/7+/u/+/v7v/v7+//7Ozs//Dw7//w8O//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/7u7u//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/7+/u//Ly8f/y8vL/8vLy//Ly8v/y8vL/8PDw//Ly
        8v/y8vL/8PDw//Ly8v/x8fH/8fHx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Ly8v/n5+f/5+fn//Hx
        8f/y8vL/8vLy//Ly8v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////5+bl/+fn5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no
        5//Dw8P/zs7N/9bW1f/Ozs3/6urp/6GhoP+ysrH/y8vK/6ysq/+jo6L/p6em/7Ozsv9/f3//1NTT/+zs
        6//s7Ov/7e3s/76+vv+UlJP/7e3s/5+fnv+vr67/4ODg/6Sko//u7u3/7u7t/7e3tv+oqKf/0dHR/7e3
        tv+EhIT/1dXU/5ycm/+lpaT/09PS/5+fn//R0dH/w8PD/9bW1f/W1tX/5eXk//Dw7//w8PD/8PDw/7m5
        uf+FhYX/2NjX/+bm5f+4uLf/8fHw/6Kiov+goKD/3Nzb//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLx/6Gh
        oP+ysrL/5+fm/6ioqP/V1dT/0NDP/7Cwr/+8vLz/5eXk/7m5uP/BwcD/4+Pj/8fHx//Jycn/4eHh/9nZ
        2f/IyMj/6enp/9nZ2f/p6en/6enp/+Li4v/m5ub/7u7u//Dw8P/x8fH/8vLx//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn5v/o6Of/g4OD/87NzP/p6ej/4+Pi/52dnP/l5eT/wsLB/42N
        jP/k5OP/qqmp/6CgoP+np6b/6+vq/52dnP/s7Ov/7Ozr/+zs6//s7Ov/nJyb/6ysq//d3dz/g4OC/6mp
        qP/Dw8L/mZmZ/+3t7P/u7u3/rq6t/6qqqf/n5+b/7u7t/6SkpP/v7+7/pqam/9vb2v+7u7v/nZ2c/8/P
        z//Dw8P/z8/P/9DQz//j4+L/8PDv//Dw7//w8O//8PDv/6Wlpf/w8PD/8PDw//Dw8P/x8fD/qamo/+Li
        4f+3t7b/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/hISE/6urq//Nzc3/pqam/9LS0v/R0dD/tbW0/+/v
        7v/v7+7/wMDA/+Pj4v/W1tX/y8vL/9vb2v/i4uH/8vLx/9XV1P/y8vH/2dnY/+jo5//p6ej/4+Pi/+vr
        6v/u7u3/8PDv//Hx8P/y8vH//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAdAAAAMgAAAEoAAABf/////+bm5f/m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn
        5v/U1NP/qqqp/87NzP+wr67/wcHA/7y8u/+3trX/ysrK/9PT0v+cnJz/paWk/8TEw//r6+r/nJyc/+vr
        6v/s7Ov/7Ozr/+jo5/+6urn/4+Pi/7+/v/+4uLj/rKyr/+Tk4/+4uLf/p6en/9vb2/+7u7r/rKyr/+Xl
        5P/AwMD/ubm4/+7u7f/Dw8P/uLi3/+jo5/+mpqX/p6em/+Li4f+0tLP/tLSz/9fX1/+vr6//sLCv//Dw
        7/+0tLP/n5+e//Dw7//w8O//8PDv//Dw8P+kpKT/x8fH/8rKyv+wsLD/sLCw//Hx8P/x8fD/8fHw//Hx
        8P+6urn/sLCv/+rq6f+srKz/srKy/+jo6P/Hx8f/vLy8/+rq6v/U1NT/z8/P/+7u7v/U1NT/ysrK/+Hh
        4f/d3d3/3d3d//Hx8f/a2tr/3t7e/+/v7//m5ub/6Ojo/+7u7v/t7e3/8PDw//Hx8f//////AAAAXwAA
        AEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASgAA
        AF//////5uXk/+bm5f/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o6Of/6Ojn/87Ozf+6urn/6Ojn/+np
        6P/p6ej/6uno/+rq6f/q6un/6urp/8fHxf+3t7b/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/Jycj/7u7t/+7u7f/u7u3/7u7u/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/u/7q6uf+7u7v/7+/v/+/v7//Y2Nf/8PDv//Dw7//w8O//8PDv/9nZ
        2P/Dw8P/8PDw/7u7u/+7u7v/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/k5OT/5+fn//Hx8f/i4uL/8fHx//Hx8f/x8fH/8fHx//Hx
        8f/x8fH/8fHx//Hx8P/x8fD/8fHw//////8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABJAAAAXv/////m5eT/5uXk/+bl5P/m5uX/5+bl/+fm
        5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo5//p6Of/6eno/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+rq
        6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+7/7+/u/+/v7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD//////wAA
        AF4AAABJAAAAMgAAAB0AAAAOAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAcAAAAMAAA
        AEcAAABb/////+Xl5P/l5eT/5uXk/+bl5P/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo
        5//p6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8PDw//Dw8P/w8PD/8PDw//Dw8P//////AAAAWwAAAEcAAAAwAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAFAAAADQAAABoAAAAsAAAAQgAAAFT/////7Ozr/+Xk4//l5eT/5uXk/+bl
        5P/m5uX/5ubl/+fm5f/n5uX/5+fm/+fn5v/o5+b/6Ojn/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/q6un/6+vq/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//v7+//7+/v//Dw
        7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        7//w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw7//w8O//9PTz////
        //8AAABUAAAAQgAAACwAAAAaAAAADQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAALAAAAFgAA
        ACYAAAA5AAAASf//////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////wAAAEkAAAA5AAAAJgAAABYAAAALAAAABAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAAAEcAAABJAAAASgAA
        AEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEoAAABKAAAASQAA
        AEcAAABBAAAAOAAAACwAAAAeAAAAEQAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AAwAAAAUAAAAHgAAACcAAAAtAAAAMAAAADIAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAyAAAAMAAAAC0AAAAnAAAAHgAAABQAAAAMAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAAwAAAARAAAAFgAAABoAAAAcAAAAHQAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB0AAAAcAAAAGgAAABYAAAARAAAADAAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA4AAAAOAAAADgAAAA4AAAANAAAACwAAAAgAAAAGAAAAAwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABQAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABQAAAAUAAAAEAAAAAwAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABAAAAAQAAAAEAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////
        ///////////////8AAAAAAAAAAB/////////8AAAAAAAAAAAH////////+AAAAAAAAAAAAf////////A
        AAAAAAAAAAAD////////wAAAAAAAAAAAAf///////4AAAAAAAAAAAAD///////+AAAAAAAAAAAAAP///
        ////gAAAAAAAAAAAAB///////4AAAAAAAAAAAAAP//////+AAAAAAAAAAAAAB///////gAAAAAAAAAAA
        AAP//////4AAAAAAAAAAAAAB//////+AAAAAAAAAAAAAAP//////gAAAAAAAAAAAAAB//////4AAAAAA
        AAAAAAAAP/////+AAAAAAAAAAAAAAA//////gAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAA/////+A
        AAAAAAAAAAAAAAH/////gAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAAB/
        ////gAAAAAAAAAAAAAAAP////4AAAAAAAAAAAAAAAB////+AAAAAAAAAAAAAAAAP////gAAAAAAAAAAA
        AAAAB////4AAAAAAAAAAAAAAAAP///+AAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAAAAAP///4AAAAAA
        AAAAAAAAAAB///+AAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAD///4AAAAAAAAAAAAAAAAAf//+A
        AAAAAAAAAAAAAAAAD///gAAAAAAAAAAAAAAAAAf//4AAAAAAAAAAAAAAAAAH//+AAAAAAAAAAAAAAAAA
        A///gAAAAAAAAAAAAAAAAAP//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB///AAAAAAAAAAAAAAAAAA///wAAAAAAAAAAAAAAAAAP//+AAAAAAAAAAAAAAAAAH///w
        AAAAAAAAAAAAAAAAD////AAAAAAAAAAAAAAAAD//////////////////////////////////////////
        //8oAAAAMAAAAGAAAAABACAAAAAAAIAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFBQBFhYWARkZGQIdHR0CISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEh
        IQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECHx8fAhsbGwIXFxcBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACUlJQQJCQkOBgYGFgYGBhcHBwcXCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgI
        CBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIFwcHBxcGBgYUEhISCy0s
        LAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAFBQUAQkJCQ4AAAAuAAAARwAAAEsAAABMAAAATAAAAEwAAABMAAAATAAA
        AEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAA
        AEsAAABEAAAALgsLCxQrKysFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWAQYGBhUAAABH+/v7//n5+f/6+vr++/v6//v7
        +//7+/v/+/v7/vz8/P/8/Pz+/Pz8//39/f/9/f3+/f39//39/f/+/v7+/v7+//7+/v/9/f3+/Pz8//r6
        +v/4+Pj+9fX1//Pz8//q6ur5VlZWkwICAj0AAAAbJCQkBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZAQYGBhcAAABL+fn5//b2
        9v/39/f++Pj4//n5+f/6+vr/+fn5/vr6+v/6+vr++/v7//z8/P/7+/v+/f39//39/f/9/f3+/v7+//7+
        /v/8/Pz++vr6//f39//z8/P+7+/v/+vr6//m5ub+09PT+2tra6gFBQVGAQEBHiIiIggnJycBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dAgcH
        BxgAAABM+fn5/vb29v739/f++Pj4/vn5+f75+fn++fn5/u/v7/739/f++/v7/vv7+/77+/v+/Pz8/vz8
        /P79/f3+/f39/v7+/v78/Pz++vr6/vf39/7z8/P+7+/v/uvr6/7l5eX+19fX/tDQ0P1/f3+8BAQERwAA
        ACEREREKKioqAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+09PT/7y8vP/ExMT/wsLC/sfHx//V1dX+0NDQ/9XV
        1f/Hx8f+ycnJ//v7+//W1tb+09PT/8vLy//29vb+5+fn/9LS0v/AwMD+sbGx/+jo6P+3t7f+oaGh/729
        vf/U1NT/jY2NyRAQEFUAAAAnERERCyoqKgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+8/Pz/+np6f/19fX/8vLy/vDw
        8P/19fX+9PT0//Hx8f/v7+/++Pj4//z8/P/o6Oj+9fX1//j4+P/5+fn+9fX1/+3t7f/n5+f+6urq/+zs
        7P/Y2Nj+19fX/8LBwf/h4eH/09PT/piYmNIWFhZeAAAAKRISEg0qKioCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5/vb29v739/f++Pj4/vn5
        +f75+fn++fn5/vr6+v76+vr++/v7/vn5+f7o6Oj+/Pz8/vz8/P79/f3+/f39/v39/f79/f3++/v7/vf3
        9/709PT+8PDw/u3t7f7o6Oj+4ODf/sTExP7b29v+4+Pj/tLS0v6kpKTfFhYWXwAAACkRERELKSkpAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b2
        9v/39/f+0tLS/8HBwf+2trb/v7+//sPDw//Ozs7+wsLC/8nJyf/BwcH+1tbW/9ra2v/Kysr+vr6+/8TE
        xP/Dw8P+zs7O/8rKyv/U1NT+1dXV/7m5uf+qqqr+r6+v/6CgoP+1tbX/9fX1/uTk5P/T09P/pKSk4BYW
        Fl8AAAAoEBAQCiYmJgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+fn5//b29v/39/f+8/Pz/+jo6P/z8/P/9PT0/vT09P/u7u7+8PDw//X19f/19fX+9vb2/+jo
        6P/q6ur++Pj4//j4+P/w8PD+9/f3//X19f/y8vL+6urq/9/f3//m5ub+4+Li/9DQ0P+ysrL//f39/vT0
        9P/j4+P/0dHR/peXl9MQEBBXAAAAIxEREQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/b++Pj4//j4+P/5+fn/+fn5/vr6+v/6+vr++vr6//v7
        +//7+/v+/Pz8//z8/P/8/Pz+/f39//7+/v/9/f3+/Pz8//r6+v/4+Pj+9fX1//Hx8f/t7e3+6urq/9zb
        2/+5ubn//f39/v39/f/09PT/4uLi/tHR0f6MjIzKBAQESgEBASAjIyMIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vb29f729vb+9/f3/vj4+P75+fn+1NTU/tDQ
        0P7V1dX+0dHR/sHBwf7AwMD+y8vL/r+/v/6/v7/+yMjI/s3Nzf7Hx8f+0dHR/tzc3P7W1tb+1tbW/tnZ
        2f69vb3+qqqq/r29vf7Jycn+urq6/r29vP7Nzc3+3dzc/t/f3/7R0dH+fHx8vQUFBUoAAAAeIyMjBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn4//b29f/29vb+9/f3//j4
        +P/5+fn/9PT0/uPj4//x8fH+9vb2//T09P/09PT+8vLy/+/v7//39/f++Pj4//Ly8v/09PT+9fX1//j4
        +P/s7Oz+5eXl//Dw8P/u7u7+6Ojo/+fn5//l5eX/3d3d/tjY2P/T09P/zc3N/s7Ozv/W1dX/zs7O/Who
        aKoCAgJCAQEBFy0tLQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vX1
        9f729vb+9/f3/vf39/74+Pj++fn5/vn5+f75+fn+9PT0/vDw8P7o6Oj++/v7/vz8/P78/Pz+/Pz8/v39
        /f79/f3+/f39/v39/f78/Pz++vr6/vj4+P719fX+8/Pz/vDw8P7t7e3+6+vr/unp6f7n5ub+5OTk/uLi
        4v7h4OD+4uLi/tXV1ftTU1OVAAAAMhUVFQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+Pj4//X19f/29vb+0dHR/8nJyf/Kysr/0dHR/sLCwv/Dw8P+zc3N/83Nzf/AwMD+u7u7/8XF
        xf/z8/P+1dXV/8zMzP/Hx8f+vr6+/7q6uv/b29v+3t7e/83Nzf/IyMj+z8/P/+fn5//x8fH/7+/v/u7u
        7v/s7Oz/6+vr/uvr6//q6ur/6+vr/uvr6//t7e35AAAARwcHBxQrKysBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+Pj4//X19f/19fX+8vLx/+zs7P/z8/P/9PT0/u7u7v/w8PD+9vb2//b2
        9v/09PT+9fX1//T09P/7+/v+8/Pz//j4+P/39/f+9/f3//f39//4+Pj+9PT0//Dw8P/19fX+9PT0//b2
        9v/09PT/8/Pz/vHx8f/w8PD/7+/v/u/v7//v7+//7+/v/u/v7//19fX/AAAASwkJCRYzMzMBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vT09P719fX+9vb2/vf39/74+Pf++Pj4/vn5
        +f75+fn++vr6/vr6+v76+vr++/v7/vv7+/77+/v+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/v7+/v39
        /f78/Pz++/v7/vn5+f74+Pj+9vb2/vX19f709PT+8/Pz/vLy8v7y8vL+8vLy/vPz8/74+Pj+AAAATAoK
        Chc8PDwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4//T09P/19fX+0dHR/8LC
        wv/BwcD/xMTE/snJyf/Pz8/+4uLi//r6+v/6+vr++/v7//v7+//7+/v+/Pz8//z8/P/8/Pz+/f39//39
        /f/9/f3+/v7+//7+/v/9/f3+/f39//v7+//6+vr/+fn5/vn5+f/4+Pj/9/f3/vf39//29vb/9/f3/vf3
        9//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj3//T0
        9P/19fT+8fHw/+/v7v/y8vL/7u7u/vT08//z8vP+4tb0/9C28//6+vr++/v7/8qu8v+gbOv+o3Dr/+jc
        +P/8/Pz+/f39//39/f/9/f3+/v7+//7+/v/9/f3+/v7+/82x9P/k1/j/+/r7/vv7+//6+vr/+vr6/vr6
        +v/6+vr/+vr6/vr6+v/8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9/f3/vPz8/709PT+9fX1/vb29v729vb+9/f3/uzl9v7AnvD+oWzs/rmT7/76+vr++vr6/vPv
        +f6nd+z+lFno/qp77P739Pv+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/f39/rSM7/6YX+n+u5bw/u/n
        +v79/f3+/Pz8/vz8/P78/Pz+/Pz8/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9/f3//Pz8//09PP+9fX0//X19f/u6fX/xafw/qBs6/+dZ+r+roLu/97N
        9f/5+fn++vr6//v7+//o3ff+nGXq/5Zd6f/BoPH+/Pz8//z8/P/8/Pz+/f39//39/f/9/f3+/f39/9/O
        9/+qe+3/lVvp/pde6f/DovL/9O78/v7+/v/+/v7//f39/v7+/v/+/v7/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9/f2//Pz8v/z8/P+4t/m/8iv6v+mdez/nGXq/qBw
        5f+6o9z+3tvh/+/v7//5+fn++vr6//r6+v/6+vr+z7bz/5tk6v+bY+r+3s32//z8/P/8/Pz+/f39//39
        /f/8/Pz+/f39//39/f/49fz/0bj1/qJv6/+UWOn/nWjq/s6z9P/39Pz//f39/v7+/v/+/v7/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2/vLy8v7z8/L+tJXf/ptj
        6v6eaev+waTp/s7J1f7e3t7+29vb/uLi4v75+fn++fn5/vr6+v76+vr++Pb6/rmS7/6dZuv+p3fs/vHr
        +v77+/v+/Pz8/vz8/P78/Pz+/Pz8/vz8/P78/Pz+/f39/vTu+/7IqvP+mF/p/pFV6P7CofL+/f39/v39
        /f7+/v7+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2//Ly
        8f/y8vL+w6Tu/5pi6v+eaev/x6vw/u7p9f/39/f+9/f3//j4+P/5+fn++fn5//r6+v/5+fn++vr6//Dq
        +f+rfe3+n2rr/7qU8P/59/v+/Pz8//z8/P/8/Pz+/Pz8//39/f/9/f3//Pz8/vTv+//KrfP/m2Pq/pRZ
        6f/Do/L//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9vb2//Ly8f/y8vL+4N3k/66V0f+fbeb/m2Pr/qRz6v/Ir+r+7+zz/+Tk5P/f39/+29vb/93d
        3f/29vb+5OTk/+Dg4P/Sw+j+pHLt/6Nv7P/MtO3+5eXl//v7+//s7Oz+4uLi/93d3f/d2+H/y7Tr/ql5
        7f+bZOv/onDq/sOq6P/s6fH//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9vb1/vHx8P7x8fH+19fX/sjIyP7Tztr+wKHs/p1o6v6bZOr+pnnn/r2s
        1f7Q0ND+3d3d/tra2v74+Pj+5eXl/t/f3/7t7e3+yq3z/qZz7f6ldOv+z8Xc/vv7+/7g4OD+29vb/se4
        3P6rgub+o2/s/qRx7P7HqfH+6OPv/uzs7P7v7+/++/v7/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Hx8P/x8fD+8vLx//Pz8v/z8/P/9PTz/uni
        8/+8me7+nWfr/7aO7v/39/f++Pj3//j4+P/5+fn++fn5//r6+v/5+fn+9vP5/7uV8P+od+7+to3w//Xx
        +v/6+vr++/v7/8Gf8v+qeu7/xqby/vDp+v/8/Pz/+/v7/vz8/P/8/Pz/+/v7/vz8/P/9/f3/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Dw7//x8fD+4+Pj/9nZ
        2f/Q0ND/1NTU/tTU0//b29z+v7PR/7Wb2v/ExMT+6Ojo/9jY2P/W1tb+3d3d/9jY2P/Z2dn+4eHh/87E
        2v+theT+sIfr/8u06v/p6en+5ubm/72n3f/Mwdz/3Nzd/uXl5f/p6en/7Ozs/uTk5P/19fX/+/v7/vv7
        +//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX0/u/v
        7/7w8O/+1tbV/sTEw/7MzMz+1NTU/tjY1/7V1dX+1NTU/tfX1v7W1tX+29vb/r29vf7Ozs3+09PT/tnZ
        2f7Y2Nj+3Nzc/tDQ0P7Y2Nj+3d3d/t7e3v7i4uL+z8/P/tjY2P7d3d3+4eHh/t7e3v7q6ur+5+fn/uzs
        7P7y8vL++fn5/vr6+v78/Pz+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9fX0/+/v7v/v7+/+8PDw//Hx8P/y8vH/8vLy/vPz8v/z8/P+9PT0//X19P/19fX+9vb1//b2
        9v/29vb+9/f3//j4+P/4+Pj++Pj4//n5+f/5+fn++vr6//r6+v/5+fn++vr6//r6+v/6+vr/+vr6/vr6
        +v/6+vr/+vr6/vv7+//7+/v/+vr6/vv7+//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9PT0/+7u7v/v7+7+8PDv//Dw8P/x8fD/4+Pj/uPj4v/k5OT+3Nzc/9fX
        1//V1dX+4eHh/9XV1f/S0tL+29vb/9ra2v/Z2dn+5ubm/+Tk5P/s7Oz+7Ozs/+/v7//a2tr+1tbW/+fn
        5//4+Pj/+fn5/vr6+v/6+vr/+vr6/vr6+v/6+vr/+vr6/vr6+v/7+/v/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9PTz/+7u7f/u7u7+7+/u//Dw7//w8PD/1tbV/sPD
        w//U1NT+3d3c/9HR0f/S0tL+0NDQ/83Nzf/Y2Nf+2tra/9nZ2f/X19f+1dXV/+fn5//S0tL+0dHR/+Li
        4v/e3t7+zc3N/9vb2//39/f/+fn5/vr6+v/6+vr/+fn5/vr6+v/6+vr/+fn5/vr6+v/7+/v/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/u3t7P7u7u3+7u7u/u/v
        7v7w8O/+8PDv/vHx8P7x8fH+8vLx/vLy8v7z8/P+8/Pz/vT09P709PT+9fX1/vX19f729vX+9vb2/vf3
        9v739/f+9/f3/vf39/74+Pj++Pj4/vj4+P74+Pj++Pj4/vn5+f75+fn++fn5/vn5+f75+fn++fn5/vn5
        +f77+/v+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/+3t
        7P/t7ez+4ODf/9nZ2P/U1NP/3d3d/tjY1//Ozs7+1tbW/9fX1//Y2Nf+2NjX/+Xl5P/j4+P+4+Pi/93d
        3f/e3t7+7+/u//b29v/29vb+9/f2//f39//39/f+9/f3//j49//4+Pj/+Pj4/vj4+P/4+Pj/+Pj4/vj4
        +P/4+Pj/+Pj4/vj4+P/6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8/Py/+zs6//t7ez+09PS/83NzP/Y2Nf/1tbV/snJyf/MzMv+0NDP/83Nzf/Q0ND+1NTT/9jY
        2P/c3Nz+0tLS/+Dg4P/e3t3+4uLi//X19f/19fX+9vb2//b29v/29vb+9/f2//f39//39/f/9/f3/vf3
        9//39/f/9/f3/vj49//4+Pf/9/f3/vf39//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8vLy/uvr6v7s7Ov+7e3s/u3t7P7u7u3+7u7t/u/v7v7v7+/+8PDv/vDw
        8P7x8fD+8fHx/vLy8f7y8vL+8/Py/vPz8/7z8/P+9PTz/vT09P709PT+9fX0/vX19f719fX+9fX1/vb2
        9f729vb+9vb2/vb29v729vb+9vb2/vb29v729vb+9vb2/vb29v75+fn+AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8vLx/+vr6v/r6+r+3t7e/9TU0//Ozs3/1tbV/tbW
        1f/a2tr+6eno//Dw7//w8PD+8fHw//Hx8f/x8fH+8vLy//Pz8v/z8/L+8/Pz//T08//09PP+9PT0//T0
        9P/09PT+9fX1//X19f/19fX/9fX1/vX19f/29vX/9vb1/vb29f/29vX/9vb1/vb29f/5+fn/AAAATAsL
        CxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHx/+rq6f/r6+r+0dHQ/8rK
        yv/T09L/ysrK/tPT0v/U1NT+3Nzb/+/v7//w8O/+8PDv//Hx8P/x8fD+8fHx//Ly8f/y8vH+8vLy//Pz
        8v/z8/P+8/Pz//T08//09PP+9PT0//T09P/09PT/9PT0/vX19P/19fX/9fX0/vX19f/19fX/9fX0/vX1
        9f/4+Pj/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHw/unp
        6P7q6un+6+vq/uvr6v7s7Ov+7Ozr/u3t7P7t7ez+7u7t/u7u7f7v7+7+7+/v/vDw7/7w8O/+8PDw/vHx
        8P7x8fH+8fHx/vLy8f7y8vL+8vLy/vPz8v7z8/L+8/Pz/vPz8/7z8/P+8/Pz/vT08/709PP+9PTz/vT0
        8/709PP+9PTz/vT08/74+Pj+AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8PDw/+no5//p6ej+6urp/+vr6v/r6+r/7Ozr/uzs6//t7ez+7e3s/+7u7f/u7u3+7+/u/+/v
        7v/v7+/+8PDv//Dw8P/w8PD+8fHw//Hx8f/x8fH+8vLx//Ly8f/y8vL+8vLy//Pz8v/z8/L/8/Py/vPz
        8v/z8/P/8/Pz/vPz8//z8/P/8/Pz/vPz8//39/f/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8PDv/+jn5v/o6Of+6eno/+rq6f/q6un/6+vq/uzs6//s7Ov+7e3s/+3t
        7P/t7ez+7u7t/+7u7f/v7+7+7+/u/+/v7//w8O/+8PDv//Dw8P/w8PD+8fHw//Hx8P/x8fH+8vLx//Ly
        8f/y8vH/8vLx/vLy8f/y8vH/8vLx/vLy8v/y8vL/8PDv/vLy8f/39/b/AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHx8fAggICBcAAABM7+/u/ufm5f7n5+b+xcXE/srKyf66ubn+t7e2/ri4
        t/7R0dD+3Nzb/r29vf63t7b+ysrJ/ry8u/6/v7/+xMTE/rq6uf7Jycn+2NjX/uPj4v7CwsH+5ubm/r6+
        vf7a2tr+8PDw/snJyP6+vr3+ysrJ/tTU1P7T09L+0tLS/t7e3f7j4+L+5+fm/u7u7f729vX+AAAATAoK
        Chc9PT0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxsbAQcHBxYAAABL7+7u/+bl5P/n5uX+4+Lh/9jY
        1//j4+L/4uLh/t7e3f/j4+L+6eno/+fn5v/n5+b+5ubl/+fn5v/j4+L+6urp/+jo5//o6Oj+5OTj/+Dg
        3//m5uX+7+/v/+Dg3//Z2dn+8PDv/+zs7P/q6ur/7Ozr/u3t7P/u7u3/6urp/uzs6//v7+7/8PDv/vDw
        7//29vX/AAAASwkJCRY1NTUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkYAQYGBhMAAABB9fX1/u/u
        7v7v7+7+8O/v//Dw7//w8O/+8fDw/vHx8P/x8fH+8vLx//Ly8v/z8/L+8/Py//Pz8v/z8/P+8/Pz//T0
        8//09PP+9PTz//T09P/09PT+9PT0//X19P/19fT+9fX0//X19P/19fX+9fX1/vX19f/19fX+9fX1/vX1
        9f/19fX+9fX1/vX19f75+fn+AAAAQQgICBMxMTEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoa
        GgkAAAAgAAAAMgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAAyAAAAICAgIAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADY2NgEoKCgGJiYmCioqKgsyMjILOTk5Czk5OQs5OTkLOTk5Czk5OQs5OTkLOTk5Czk5
        OQs5OTkLOTk5Czk5OQs6OjkLOjo5Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6
        Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLNzc3Cy4uLgspKSkKLCwsBj8/PwEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAA///AADwAAAA//8AAOAAAAB//wAA4AAAAD//AADgAAAAD/8AAOAA
        AAAH/wAA4AAAAAP/AADgAAAAAf8AAOAAAAAA/wAA4AAAAAB/AADgAAAAAH8AAOAAAAAAPwAA4AAAAAAf
        AADgAAAAAA8AAOAAAAAADwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA8AAAAAAPAADwAAAAAA8AAP///////wAAKAAAACAAAABAAAAAAQAgAAAA
        AACAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWFgITExMFGBgYBRwcHAUcHBwFHBwcBRwc
        HAUcHBwFHBwcBRwcHAUcHBwFHBwcBRwcHAUcHBwFHBwcBRkZGQUUFBQEGhoaAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFhYCAwMDHwAAADsAAAA+AAAAPwAA
        AD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPgAAADkDAwMfKCgoBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEwQAAAA7+vr6//n5
        +f/6+vr/+/v7//v7+//8/Pz//Pz8//z8/P/9/f3//f39//7+/v/9/f3/+/v7//f39//z8/P/6+vr/GBg
        YJoAAAAsHx8fCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYBQAA
        AD74+Pj/9/f3//j4+P/5+fn/+vr6//T09P/7+/v//Pz8//39/f/9/f3//f39//39/f/5+fn/9PT0/+7u
        7v/n5+f/1tbW/3Z2drIBAQE0FhYWCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/j4+P/39/f/z8/P/9TU1P/Q0ND/2tra/9fX1//X19f/4uLi/+Li4v/e3t7/6enp/+Hh
        4f/R0dH/z8/P/8zMzP+wsLD/1dXV/4eHh8MGBgY9ExMTDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/+Pj4//f39//4+Pj/+fn5//r6+v/6+vr/+/v7//Ly8v/9/f3//f39//39
        /f/9/f3/+vr6//X19f/v7+//6enp/9nZ2f/R0dH/3Nzc/5WVldAJCQlEExMTDgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/4+Pj/9/f3/9DQ0P/Ozs7/1NTU/9DQ0P/Pz8//09PT/+Pj
        4//Ly8v/1dXV/8vLy//T09P/4ODg/8zMzP/CwsL/v7+//6urqv/09PT/29vb/5SUlNEGBgY+EhISDAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/j4+P/39/b/+Pj4//n5+f/6+vr/+vr6//v7
        +//8/Pz//Pz8//z8/P/9/f3//f39//z8/P/4+Pj/8/Pz/+7u7v/n5+f/wcDA//39/f/z8/P/2tra/4WF
        hcMBAQE3GxsbCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/+Pj3//b29v/4+Pf/+fn5/9fX
        1//Z2dn/3Nzc/8vLy//Pz8//0dHR/9zc3P/Pz8//39/f/9ra2v/W1tb/1NTU/7+/v//Ozs7/wsLC/8rJ
        yf/V1dX/1dXV/3Nzc7MAAAAwHx8fBwAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/39/f/9vb2//f3
        9//4+Pj/+vr6//r6+v/09PT/8vLy//v7+//8/Pz//f39//39/f/+/v7//Pz8//n5+f/19fX/8vLy/+3t
        7f/o6Oj/5OTk/9/f3//c3Nz/29vb/15eXpwEBAQiJiYmAQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/f3
        9//29vX/1NTU/9jY2P/f39//xsbG/9fX1//V1dX/y8vL/+3t7f/j4+P/zs7O/8zMzP/d3d3/2tra/9nZ
        2f/d3d3/8vLy//Dw8P/t7e3/7Ozs/+vr6//s7Oz/7u7u/AAAADsjIyMEAAAAAAAAAAAAAAAAAAAAABwc
        HAUAAAA/9/f2//X19f/29vb/+Pj3//n5+f/6+vr/+vr6//v7+//7+/v//Pz8//z8/P/9/f3//f39//7+
        /v/9/f3//Pz8//r6+v/39/f/9fX1//Pz8//y8vL/8vLy//Ly8v/29vb/AAAAPi0tLQUAAAAAAAAAAAAA
        AAAAAAAAHBwcBQAAAD/29vb/9fX0/9PT0//S0tL/2dnZ/9DQ0P/s6u7/+Pb6//f0+v/i0/f/6uD4//z8
        /P/9/f3//f39//7+/v/9/f3/+vj8//n3+//6+vr/+fn5//j4+P/39/f/+Pj4//r6+v8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAcHBwFAAAAP/b29v/09PT/9fX1//b29v/39/f/2sj0/6t97f/t5fj/+vr6/7KJ
        7v+YX+n/7OP5//z8/P/9/f3//f39//7+/v/v5/v/pHHs/9nF9v/8/Pz//Pz8//v7+//7+/v//f39/wAA
        AD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9vb1//T08//19fT/4dTz/7CF7f+ibuv/zLHy//f2
        +f/6+vr/8u35/6Ju6/+rfe3/+fj7//z8/P/9/f3//f39//v5/f/Lr/T/mmPq/6p77f/k1vj//v7+//7+
        /v/+/v7/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/19fX/8/Pz/7OU3/+dZuv/u5rp/8zH
        0//W1tb/9vb2//r6+v/6+vr/4dL2/51m6//HqPL//Pz8//z8/P/9/f3//f39//39/f/07/v/wJ7x/5Va
        6f/BoPH//f39//7+/v8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/X19P/y8vL/wqPu/5xl
        6//AoO//7ej0//f39//4+Pj/+fn5//n5+f/6+vr/yazy/6Bs7P/i1Pf/+/v7//z8/P/8/Pz//Pz8//Tv
        +//DovL/mWDq/8Oi8f/9/f3//f39/wAAAD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9PT0//Ly
        8f/Kysr/x7rZ/6yB6/+daOn/uJzf/9DP0v/T09P/6enp/9/f3//c297/to3w/6h66v/e2eP/6enp/9fW
        2f+wl9P/onDo/7KH7v/ZzOz/6+vr//v7+//9/f3/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAA
        AD/09PP/8fHw//Ly8f/z8/L/8/Pz/9bD8f+nd+z/4dns//j49//4+Pj/+fn5//r6+v/t5vj/rX/u/8Ce
        8f/6+vr/8On5/7SK7//ezfb/+/v7//r6+v/5+fn//Pz8//z8/P8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/Pz8//w8O//ysrJ/8jIx//Ozs7/y8vK/8nHy//Ny8//zs7O/8PDw//Ly8v/z8/P/9DQ
        0P/MxNb/z8Tf/93b4P/U09b/zczP/9TU1P/k5OT/5OTk/+7u7v/6+vr//Pz8/wAAAD80NDQFAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/8vLy/+/v7//w8PD/8fHx//Ly8v/z8/P/9PTz//X19P/29vX/9vb2//f3
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/AAAAPzQ0
        NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/y8vH/7u7u/+/v7//w8PD/0NDQ/9LS0f/V1dX/xcXE/8nJ
        yf/Ly8v/1tbV/8nJyf/a2tr/2NjY/9jY2P/a2tr/ysrK/+7u7v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +/8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/Hx8f/u7u3/7+/u/+/v7//w8PD/8fHx//Ly
        8f/z8/L/9PTz//T09P/19fX/9vb1//b29v/39/f/9/f3//j4+P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5
        +f/5+fn/+vr6/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABwcGwUAAAA/8fHw/+3t7P/MzMv/0NDP/9bW
        1v+7u7r/xcXE/83Nzf/Q0M//2NjY/9ra2f/Q0ND/6urp//X19f/29vb/9vb2//f39//39/f/9/f3//f3
        9//39/f/+Pj3//f39//5+fn/AAAAPzMzMwUAAAAAAAAAAAAAAAAAAAAAGxsbBQAAAD/w8O//7Ozr/+3t
        7P/u7u3/7u7u/+/v7v/w8O//8fHw//Hx8f/y8vL/8/Py//Pz8//09PP/9PT0//X19P/19fX/9fX1//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//j4+P8AAAA/MzMzBQAAAAAAAAAAAAAAAAAAAAAbGxsFAAAAP+/v
        7v/r6+r/ysrJ/8nJyP/Q0M//x8fG/+Tk4//w8O//8PDw//Hx8P/y8vH/8vLy//Pz8v/z8/P/9PTz//T0
        9P/09PT/9PT0//X19P/19fX/9fX1//X19f/19fX/9/f3/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABsb
        GwUAAAA/7u7t/+rq6f/r6+r/7Ozr/+zs6//t7ez/7u7t/+/v7v/v7+//8PDv//Dw8P/x8fD/8fHx//Ly
        8f/y8vL/8/Py//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T08//29vb/AAAAPzMzMwUAAAAAAAAAAAAA
        AAAAAAAAGxsbBQAAAD/t7ez/6Ojn/+np6P/q6un/6+vq/+zs6//t7ez/7e3s/+7u7f/v7+7/7+/u//Dw
        7//w8PD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8fHx//X19f8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAZGRkFAAAAPuzs6//n5+b/zs7N/8TEw//BwcD/0NDP/9bW1f/Kysn/0NDP/8fH
        xv/R0dH/ysrJ/9bW1f/V1dT/3Nzb/8/Pzv/w8PD/xMTD/9PT0v/e3t3/3Nzc/+Pj4//r6+r/9PTz/wAA
        AD4uLi4FAAAAAAAAAAAAAAAAAAAAABUVFQQAAAA38fDw/+zs6//t7Oz/7u3t/+7u7f/v7+7/8PDv//Dw
        7//x8fD/8fHw//Hx8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PP/9PTz//T0
        8//39/b/AAAANycnJwQAAAAAAAAAAAAAAAAAAAAAHR0dAQwMDBQAAAAoAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACgODg4ULy8vAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09PQFKSkoCWFdXAlhY
        VwJYWFgCWFhYAlhYWAJYWFgCWFhYAllZWAJZWVgCWVlZAllZWQJZWVkCWVlZAllZWQJZWVkCWVlZAllZ
        WQJZWVkCWlpZAlpaWQJRUVECQUFAAQAAAAAAAAAAAAAAAAAAAADgAAf/wAAD/8AAAf/AAAD/wAAAf8AA
        AD/AAAAfwAAAD8AAAAfAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD8AAADygAAAAQAAAAIAAAAAEA
        IAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4OCQoKCiEODg4iDg4OIg4ODiIODg4iDg4OIg4O
        DiILCwsgFhYWCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCiH4+Pj/+vr5//n5+f/8/Pz//f39//39
        /f/4+Pj/7e3t/mtra50VFRUSAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4i9/f3/+Xl5f/n5+f/5+fn//Dw
        8P/w8PD/6Ojo/93d3f/MzMz/f39/tBQUFBgAAAAAAAAAAAAAAAAAAAAADg4OIvf39//k5OT/5ubm/+bm
        5v/q6ur/5+fn/+rq6v/c3Nz/xMTE//Dw8P9+fn60EhISEwAAAAAAAAAAAAAAAA4ODiL39/f/+Pj4/+np
        6f/j4+P/5ubm/+np6f/t7e3/5ubm/9vb2//W1tb/2tnZ/2tra58YGBgKAAAAAAAAAAAODg4i9vb2/+bm
        5v/m5ub/6Ojo/+zs7P/q6ur/6enp/+vr6//w8PD/8fHx/+/v7//w8PD+FBQUIAAAAAAAAAAADg4OIvX1
        9f/k5OT/39rl/9/R8//h0/b/28j2//39/f/9/f3/4dL3//Lt+f/5+fn/+vr6/xkZGSIAAAAAAAAAAA4O
        DiL09PT/ybHs/7aV5f/k3e7/+Pf6/7KJ7v/u5vn//Pz8//Do+v++m/H/zrP0//7+/v8aGhoiAAAAAAAA
        AAAODg4i8/Pz/7yj3/++nO7/3tfo/+zs7P/g2Or/uJLv/+/u8f/g2en/wqLx/8iu7P/8/Pz/GhoaIgAA
        AAAAAAAADg4OIvLy8f/e3t3/2dTf/8e53P/g4OD/4+Pj/82+4//azuv/0cTj/+Tg6v/x8fH/+/v7/xoa
        GiIAAAAAAAAAAA4ODiLx8fD/8PDw/+Li4f/h4eD/4ODg/+Pj4//p6en/6enp/+vr6//6+vr/+vr6//r6
        +v8aGhoiAAAAAAAAAAAODg0i7+/u/97e3v/d3dz/3t7d/+Tk5P/l5eX/8/Pz//f39//39/f/+Pj4//j4
        +P/5+fn/GRkZIgAAAAAAAAAADQ0NIu3t7P/b29r/3d3c/+3t7P/x8fH/8vLy//Pz8//09PT/9fX1//X1
        9f/29vX/9/f3/xkZGSIAAAAAAAAAAA0NDSLr6+r/6+rp/+zs6//u7u3/7+/u//Dw7//x8fD/8vLx//Ly
        8v/z8/L/8/Pz//T09P8ZGRkiAAAAAAAAAAALCwsg7Ozr/9vb2v/b29v/4ODf/97e3f/g4N//5OTj/+Tk
        5P/n5+b/5ubl/+rq6f/y8vL/FRUVIAAAAAAAAAAAHBwcBSIhIRUsKysWLCwsFiwsLBYsLCwWLCwsFiws
        LBYsLCwWLCwsFiwsLBYtLSwWJCQkFSUlJQUAAAAAgB8AAIAPAACABwAAgAMAAIABAACAAQAAgAEAAIAB
        AACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAA==
</value>
  </data>
</root>


================================================
File: DotNetPatcher/Frm_Exclusion.vb
================================================
ï»¿Imports System.IO
Imports System.ComponentModel
Imports LoginTheme.XertzLoginTheme
Imports Implementer.Core.Obfuscation.Exclusion
Imports Implementer.Core.Dependencing
Imports System.Security.Cryptography
Imports System.Text
Imports Helper.UtilsHelper
Imports Helper.RandomizeHelper

Public Class Frm_Exclusion

#Region " Fields "
    Private m_FilePath$ = String.Empty
    Private m_excludeList As ExcludeList
    Private m_TreeviewHandler As ExclusionTreeview
    Private SettingsButton As Dictionary(Of LogInCheckBox, Boolean)
    Private m_treeNode As TreeNode
    Private md5hash As String
#End Region

#Region " Properties "
    Public Property SettingsState As ExclusionState
    Public Property Dependencies As List(Of String)
    Public Property Title As String
    Public Property ViewAssemblyOnly As Boolean
    Public Property FilePath As String
#End Region

#Region " Events "
    Public Event OnShowingExclusionInfos As ShowingExclusionInfosDelegate
#End Region

#Region " Delegates "
    Public Delegate Sub ShowingExclusionInfosDelegate(e As ExcludeList)
#End Region

#Region " Constructor "
    Sub New()
        InitializeComponent()
    End Sub
#End Region

#Region " Methods "

    Private Sub Frm_Exclusion_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        If ViewAssemblyOnly Then
            FillViewer()
        End If
        If Not TvExclusion.Nodes.Count = 0 Then
            m_treeNode = TvExclusion.Nodes(0)
        End If
        If BgwExclusion.IsBusy = False Then
            BgwExclusion.RunWorkerAsync()
        Else
            BgwExclusion.CancelAsync()
            BgwExclusion.RunWorkerAsync()
        End If
    End Sub

    Public Sub InitializeExcludeList()
        SettingsState = New ExclusionState(True, True, True, True, True, True, True)
        m_excludeList = New ExcludeList
        RaiseEvent OnShowingExclusionInfos(m_excludeList)
    End Sub

    Public Sub FinalizeExcludeList()
        m_excludeList.CleanUp()
        RaiseEvent OnShowingExclusionInfos(m_excludeList)
    End Sub

    Private Sub Frm_Exclusion_FormClosing(sender As Object, e As FormClosedEventArgs) Handles MyBase.FormClosed
        BgwExclusion.CancelAsync()
        RaiseEvent OnShowingExclusionInfos(m_excludeList)
    End Sub

    Private Sub BgwExclusion_DoWork(sender As Object, e As DoWorkEventArgs) Handles BgwExclusion.DoWork
        BgwExclusion.ReportProgress(101, Nothing)
        Dim r As New Frm_Result("Loading", "Please wait while loading ...", "")
        BgwExclusion.ReportProgress(102, r)
        If Dependencies.Count <> 0 Then
            Dim fPath = Directory.CreateDirectory(String.Format("{0}{1}\", System.IO.Path.GetTempPath, Randomizer.GenerateNewAlphabetic)).FullName & New FileInfo(_FilePath).Name
            File.Copy(_FilePath, fPath, True)
            _FilePath = fPath

            Dim m_Dependencies = New Dependencies(_FilePath, Dependencies)
            Dim dependenciesResult = m_Dependencies.Analyze()

            If dependenciesResult.result = String.Empty Then
                m_Dependencies.Merge(BgwExclusion)
                If Functions.GetMD5HashFromFile(_FilePath) <> md5hash Then
                    m_TreeviewHandler = New ExclusionTreeview(_FilePath)
                    BgwExclusion.ReportProgress(103, r)
                    e.Result = New Object() {"Success", m_TreeviewHandler.LoadTreeNode, Nothing, True}
                    md5hash = Functions.GetMD5HashFromFile(_FilePath)
                Else
                    BgwExclusion.ReportProgress(103, r)
                    e.Result = New Object() {"Already", m_treeNode, Nothing, True}
                End If
            ElseIf dependenciesResult.result.StartsWith("Error") Then
                BgwExclusion.ReportProgress(103, r)
                e.Result = New String() {"Error", dependenciesResult.result, Nothing, True}
                m_Dependencies.CleanUp()
            Else
                m_TreeviewHandler = New ExclusionTreeview(_FilePath)
                BgwExclusion.ReportProgress(103, r)
                e.Result = New Object() {"Warning", dependenciesResult.result, m_TreeviewHandler.LoadTreeNode, True}
            End If
        Else
            If Functions.GetMD5HashFromFile(_FilePath) <> md5hash Then
                m_TreeviewHandler = New ExclusionTreeview(_FilePath)
                BgwExclusion.ReportProgress(103, r)
                e.Result = New Object() {"Success", m_TreeviewHandler.LoadTreeNode, Nothing, False}
                md5hash = Functions.GetMD5HashFromFile(_FilePath)
            Else
                BgwExclusion.ReportProgress(103, r)
                e.Result = New Object() {"Already", m_treeNode, Nothing, False}
            End If
        End If

    End Sub

    Private Sub BgwExclusion_ProgressChanged(sender As Object, e As ProgressChangedEventArgs) Handles BgwExclusion.ProgressChanged
        If e.ProgressPercentage = 101 Then
            TvExclusion.Nodes.Clear()
        ElseIf e.ProgressPercentage = 102 Then
            TryCast(e.UserState, Frm_Result).ShowDialog()
        ElseIf e.ProgressPercentage = 103 Then
            TryCast(e.UserState, Frm_Result).Close()
        End If
    End Sub

    Private Sub BgwExclusion_RunWorkerCompleted(sender As Object, e As RunWorkerCompletedEventArgs) Handles BgwExclusion.RunWorkerCompleted
        If Not e.Result Is Nothing Then
            Select Case e.Result(0)
                Case "Error"
                    Dim r As New Frm_Result(e.Result(0), e.Result(1).ToString, "")
                    r.ShowDialog()
                Case "Warning"
                    TvExclusion.Nodes.Add(e.Result(2))
                    FillForm()
                    Dim r As New Frm_Result(e.Result(0), "Following dependencies are missing : " & vbNewLine & e.Result(1).ToString, "")
                    r.ShowDialog()
                Case "Success", "Already"
                    TvExclusion.Nodes.Add(e.Result(1))
                    FillForm()
            End Select
            If CBool(e.Result(3)) Then
                Try
                    Dim fi As New FileInfo(_FilePath)
                    fi.Directory.Delete(True)
                Catch ex As Exception
                End Try
            End If
        End If

    End Sub

    Private Sub FillForm()
        If ViewAssemblyOnly = False Then
            SettingsButton = New Dictionary(Of LogInCheckBox, Boolean)
            With SettingsButton
                .Add(ChbExclusionRenaming, SettingsState.Renaming)
                .Add(ChbExclusionStringsEncrypt, SettingsState.stringEncrypt)
                .Add(ChbExclusionIntegersEncode, SettingsState.integerEncoding)
                .Add(ChbExclusionBooleanEncrypt, SettingsState.booleanEncrypt)
                .Add(ChbExclusionHideCalls, SettingsState.hideCalls)
                .Add(ChbExclusionInvalidOpCodes, SettingsState.InvalidOpcodes)
            End With

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Visible = False)

            Dim y% = 94
            For Each c In SettingsButton
                If c.Value Then
                    c.Key.Location = New Size(4, y)
                    y += 28
                    c.Key.Visible = True
                End If
            Next
        Else
            FillViewer()
            RemoveHandler TvExclusion.AfterSelect, AddressOf TvExclusion_AfterSelect
        End If

        TvExclusion.Nodes(0).Expand()
        TvExclusion.Nodes(0).FirstNode.Expand()
    End Sub

    Private Sub FillViewer()
        Frm_ExclusionThemeContainer.Text = Title
        GbxExclusionRule.Visible = False
        GbxExclusionDetails.Visible = False
        GbxExclusionViewer.Text = "                                                                             Assembly viewer"
        GbxExclusionViewer.Size = New Size(680, 640)
        TvExclusion.Size = New Size(680, 605)
    End Sub

    Private Sub TvExclusion_AfterSelect(sender As Object, e As TreeViewEventArgs) Handles TvExclusion.AfterSelect
        If Not m_TreeviewHandler.isRenamable(e.Node.Tag) Then
            ChbExclusion.Checked = False
            ChbAllEntities.Checked = False
            GbxExclusionRule.Enabled = False

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Checked = False)
            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Enabled = False)

            ChbExclusionCheckAll.Enabled = False
        ElseIf (Not e.Node.Tag Is Nothing) Then
            ChbExclusion.Checked = m_TreeviewHandler.isExclude(e.Node.Tag)
            ChbAllEntities.Checked = m_TreeviewHandler.getEntitiesVal(e.Node.Tag)
            GbxExclusionRule.Enabled = m_TreeviewHandler.isTypedef(e.Node.Tag)
            ChbAllEntities.Enabled = ChbExclusion.Checked

            ChbExclusionStringsEncrypt.Checked = m_TreeviewHandler.isStringsEncryptExclude(e.Node.Tag)
            ChbExclusionIntegersEncode.Checked = m_TreeviewHandler.isIntegersEncodingExclude(e.Node.Tag)
            ChbExclusionBooleanEncrypt.Checked = m_TreeviewHandler.isBooleansEncryptExclude(e.Node.Tag)
            ChbExclusionRenaming.Checked = m_TreeviewHandler.isRenamingExclude(e.Node.Tag)
            ChbExclusionInvalidOpCodes.Checked = m_TreeviewHandler.isInvalidOpcodesExclude(e.Node.Tag)
            ChbExclusionHideCalls.Checked = m_TreeviewHandler.isHideCallsExclude(e.Node.Tag)

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Enabled = ChbExclusion.Checked)

            ChbExclusionCheckAll.Enabled = ChbExclusion.Checked
        Else
            GbxExclusionRule.Enabled = False
            ChbExclusion.Checked = False

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Checked = False)
            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Enabled = False)

            ChbExclusionCheckAll.Enabled = False
        End If

        ChbExclusionCheckAll.Text = "Check all"
        ChbExclusionCheckAll.Checked = False
    End Sub

    Private Sub IncludeAllChildNodes(treeNode As TreeNode, Optional ByVal nodeChecked As Boolean = False, Optional ByVal stringEncr As Boolean = False, _
                                                           Optional ByVal integerEncod As Boolean = False, Optional ByVal booleanEncr As Boolean = False, _
                                                           Optional ByVal Renamin As Boolean = False, Optional ByVal invalidOp As Boolean = False, _
                                                           Optional ByVal hideCall As Boolean = False)
        For Each node As TreeNode In treeNode.Nodes
            With node
                If m_TreeviewHandler.isRenamable(.Tag) Then
                    .Tag.Exclude = nodeChecked
                    .Tag.stringEncrypt = stringEncr
                    .Tag.integerEncoding = integerEncod
                    .Tag.booleanEncrypt = booleanEncr
                    .Tag.Renaming = Renamin
                    .Tag.InvalidOpcodes = invalidOp
                    .Tag.HideCalls = hideCall
                    ColorNode(node, nodeChecked)
                    If .Nodes.Count > 0 Then
                        IncludeAllChildNodes(node, nodeChecked, stringEncr, integerEncod, booleanEncr, Renamin, invalidOp, hideCall)
                    End If
                End If
            End With
        Next
    End Sub

    Private Sub IncludeEntitiesChildNodes(treeNode As TreeNode, Optional ByVal nodeChecked As Boolean = False, Optional ByVal stringEncr As Boolean = False, _
                                                                Optional ByVal integerEncod As Boolean = False, Optional ByVal booleanEncr As Boolean = False, _
                                                                Optional ByVal Renamin As Boolean = False, Optional ByVal invalidOp As Boolean = False, _
                                                                Optional ByVal hideCall As Boolean = False)
        For Each node As TreeNode In treeNode.Nodes
            With node
                If m_TreeviewHandler.isRenamable(.Tag) Then
                    .Tag.Exclude = nodeChecked
                    .Tag.AllEntities = nodeChecked
                    .Tag.stringEncrypt = stringEncr
                    .Tag.integerEncoding = integerEncod
                    .Tag.booleanEncrypt = booleanEncr
                    .Tag.Renaming = Renamin
                    .Tag.InvalidOpcodes = invalidOp
                    .Tag.HideCalls = hideCall
                    ColorNode(node, nodeChecked)
                    If .Nodes.Count > 0 Then
                        IncludeEntitiesChildNodes(node, nodeChecked, stringEncr, integerEncod, booleanEncr, Renamin, invalidOp, hideCall)
                    End If
                End If
            End With
        Next
    End Sub

    Private Sub ChbAllEntities_Click(sender As Object, e As EventArgs) Handles ChbAllEntities.Click
        If (Not Me.TvExclusion.SelectedNode.Tag Is Nothing) Then
            With TvExclusion.SelectedNode
                .Tag.AllEntities = ChbAllEntities.Checked
                .Tag.stringEncrypt = ChbExclusionStringsEncrypt.Checked
                .Tag.integerEncoding = ChbExclusionIntegersEncode.Checked
                .Tag.booleanEncrypt = ChbExclusionBooleanEncrypt.Checked
                .Tag.Renaming = ChbExclusionRenaming.Checked
                .Tag.InvalidOpcodes = ChbExclusionInvalidOpCodes.Checked
                .Tag.HideCalls = ChbExclusionInvalidOpCodes.Checked
            End With
        End If
        If ChbAllEntities.Checked = True Then
            IncludeEntitiesChildNodes(TvExclusion.SelectedNode, ChbAllEntities.Checked, ChbExclusionStringsEncrypt.Checked, ChbExclusionIntegersEncode.Checked, _
                                      ChbExclusionBooleanEncrypt.Checked, ChbExclusionRenaming.Checked, ChbExclusionInvalidOpCodes.Checked, ChbExclusionHideCalls.Checked)
        Else
            ColorNode(TvExclusion.SelectedNode, False)
            IncludeAllChildNodes(TvExclusion.SelectedNode)
            IncludeEntitiesChildNodes(TvExclusion.SelectedNode)
        End If
    End Sub

    Private Sub ChbExclusion_Click(sender As Object, e As EventArgs) Handles ChbExclusion.Click

        If ChbExclusion.Checked = True Then
            ChbAllEntities.Enabled = True

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Enabled = True)

            ChbExclusionCheckAll.Enabled = True

            IncludeAllChildNodes(TvExclusion.SelectedNode, ChbAllEntities.Checked, ChbExclusionStringsEncrypt.Checked, ChbExclusionIntegersEncode.Checked, _
                                 ChbExclusionBooleanEncrypt.Checked, ChbExclusionRenaming.Checked, ChbExclusionInvalidOpCodes.Checked, ChbExclusionHideCalls.Checked)
        Else
            ChbAllEntities.Enabled = False

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Enabled = False)

            ChbExclusionCheckAll.Enabled = False

            ColorNode(TvExclusion.SelectedNode, False)
            IncludeAllChildNodes(TvExclusion.SelectedNode)
            IncludeEntitiesChildNodes(TvExclusion.SelectedNode)
            ChbAllEntities.Checked = False

            SettingsButton.Keys.ToList.ForEach(Sub(x) x.Checked = False)

            ChbExclusionCheckAll.Checked = False
            ChbExclusionCheckAll.Text = "Check all"
        End If

        If (Not Me.TvExclusion.SelectedNode.Tag Is Nothing) Then
            With TvExclusion.SelectedNode
                .Tag.exclude = ChbExclusion.Checked
                .Tag.AllEntities = ChbAllEntities.Checked
                .Tag.stringEncrypt = ChbExclusionStringsEncrypt.Checked
                .Tag.integerEncoding = ChbExclusionIntegersEncode.Checked
                .Tag.booleanEncrypt = ChbExclusionBooleanEncrypt.Checked
                .Tag.Renaming = ChbExclusionRenaming.Checked
                .Tag.InvalidOpcodes = ChbExclusionInvalidOpCodes.Checked
                .Tag.HideCalls = ChbExclusionHideCalls.Checked
            End With
            ColorNode(TvExclusion.SelectedNode, ChbExclusion.Checked)
        End If
    End Sub

    Private Sub CheckSettings(sender As Object, e As EventArgs) Handles ChbExclusionStringsEncrypt.Click, ChbExclusionBooleanEncrypt.Click, ChbExclusionIntegersEncode.Click, _
                                                            ChbExclusion.Click, ChbExclusionInvalidOpCodes.Click, ChbExclusionRenaming.Click, ChbExclusionHideCalls.Click

        If (Not Me.TvExclusion.SelectedNode.Tag Is Nothing) Then
            With TvExclusion.SelectedNode
                .Tag.AllEntities = ChbAllEntities.Checked
                .Tag.stringEncrypt = ChbExclusionStringsEncrypt.Checked
                .Tag.integerEncoding = ChbExclusionIntegersEncode.Checked
                .Tag.booleanEncrypt = ChbExclusionBooleanEncrypt.Checked
                .Tag.Renaming = ChbExclusionRenaming.Checked
                .Tag.InvalidOpcodes = ChbExclusionInvalidOpCodes.Checked
                .Tag.HideCalls = ChbExclusionHideCalls.Checked
            End With

        End If
    End Sub

    Private Sub ChbExclusionCheckAll_Click(sender As Object, e As EventArgs) Handles ChbExclusionCheckAll.Click
        If ChbExclusionCheckAll.Text = "Check all" Then
            If (Not Me.TvExclusion.SelectedNode.Tag Is Nothing) Then
                With TvExclusion.SelectedNode
                    .Tag.stringEncrypt = True
                    .Tag.integerEncoding = True
                    .Tag.booleanEncrypt = True
                    .Tag.Renaming = True
                    .Tag.InvalidOpcodes = True
                    .Tag.HideCalls = True

                    SettingsButton.Keys.ToList.ForEach(Sub(x) x.Checked = True)

                    .Tag.AllEntities = ChbAllEntities.Checked
                End With
                ChbExclusionCheckAll.Text = "Uncheck all"
            End If
        Else
            If (Not Me.TvExclusion.SelectedNode.Tag Is Nothing) Then
                With TvExclusion.SelectedNode
                    .Tag.stringEncrypt = False
                    .Tag.integerEncoding = False
                    .Tag.booleanEncrypt = False
                    .Tag.Renaming = False
                    .Tag.InvalidOpcodes = False
                    .Tag.HideCalls = False

                    SettingsButton.Keys.ToList.ForEach(Sub(x) x.Checked = False)

                    .Tag.AllEntities = ChbAllEntities.Checked
                End With
                ChbExclusionCheckAll.Text = "Check all"
            End If
        End If

    End Sub

    Private Sub ColorNode(Node As TreeNode, Checked As Boolean)
        If Checked = True Then
            Node.ForeColor = Color.Red
            m_excludeList.AddTo(Node.Tag)
        Else
            Node.ForeColor = Color.Black
            m_excludeList.RemoveFrom(Node.Tag)
        End If
        LblExclusionTotal.Text = "Total : " & m_excludeList.itemsCount.ToString
        LblExclusionDetailsTypes.Text = "Types : " & m_excludeList.TypesCount
        LblExclusionDetailsMethods.Text = "Methods : " & m_excludeList.MethodsCount
        LblExclusionDetailsProperties.Text = "Properties : " & m_excludeList.PropertiesCount
        LblExclusionDetailsFields.Text = "Fields : " & m_excludeList.FieldsCount
        LblExclusionDetailsEvents.Text = "Events : " & m_excludeList.EventsCount
    End Sub
#End Region

End Class


================================================
File: DotNetPatcher/Frm_Main.Designer.vb
================================================
ï»¿Imports LoginTheme
Imports LoginTheme.XertzLoginTheme

<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _
Partial Class Frm_Main
    Inherits Form

    'Form remplace la mÃ©thode Dispose pour nettoyer la liste des composants.
    <System.Diagnostics.DebuggerNonUserCode()> _
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Requise par le Concepteur Windows Form
    Private components As System.ComponentModel.IContainer

    'REMARQUEÂ : la procÃ©dure suivante est requise par le Concepteur Windows Form
    'Elle peut Ãªtre modifiÃ©e Ã  l'aide du Concepteur Windows Form.  
    'Ne la modifiez pas Ã  l'aide de l'Ã©diteur de code.
    <System.Diagnostics.DebuggerStepThrough()> _
    Private Sub InitializeComponent()
        Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Frm_Main))
        Me.BgwRenameTask = New System.ComponentModel.BackgroundWorker()
        Me.Frm_MainThemeContainer = New LoginTheme.XertzLoginTheme.LogInThemeContainer()
        Me.LnkLblBlogSpot = New System.Windows.Forms.LinkLabel()
        Me.BtnStart = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.PgbStart = New LoginTheme.XertzLoginTheme.TextProgressBar()
        Me.TbcTask = New LoginTheme.XertzLoginTheme.LogInTabControl()
        Me.TpAbout = New System.Windows.Forms.TabPage()
        Me.LblAboutCredits1 = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblWebSite = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblAboutCredits = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblAboutWebsite = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblAboutDevelopBy = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblAboutVersion = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblDNR_DevelopBy = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblDNR_Version = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.PbxAboutLogo = New System.Windows.Forms.PictureBox()
        Me.TpVersionInfos = New System.Windows.Forms.TabPage()
        Me.PnlVersionInfosEnabled = New System.Windows.Forms.Panel()
        Me.LblVersionInfosTitle = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosDescription = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosCompany = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosProduct = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosCopyright = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosTrademark = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblVersionInfosVersion = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.TxbVersionInfosVersion = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosTrademark = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosCopyright = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosProduct = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosCompany = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosDescription = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfosTitle = New System.Windows.Forms.TextBox()
        Me.ChbVersionInfosEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.TpManifestChanger = New System.Windows.Forms.TabPage()
        Me.PnlManifestEnabled = New System.Windows.Forms.Panel()
        Me.RdbManifestChangerHighestAvailable = New LoginTheme.XertzLoginTheme.LogInRadioButton()
        Me.RdbManifestChangerRequireAdministrator = New LoginTheme.XertzLoginTheme.LogInRadioButton()
        Me.RdbManifestChangerAsInvoker = New LoginTheme.XertzLoginTheme.LogInRadioButton()
        Me.ChbManifestEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.TpIconChanger = New System.Windows.Forms.TabPage()
        Me.PnlIconChangerEnabled = New System.Windows.Forms.Panel()
        Me.PbxIconChangerSelect = New System.Windows.Forms.PictureBox()
        Me.TxbIconChangerSelect = New System.Windows.Forms.TextBox()
        Me.BtnIconChangerSelect = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.ChbIconChangerEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.TpDependencies = New System.Windows.Forms.TabPage()
        Me.LblDependenciesWarning = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.PnlDependenciesEnabled = New System.Windows.Forms.Panel()
        Me.CbxDependenciesEmbedded = New LoginTheme.XertzLoginTheme.LogInComboBox()
        Me.RdbDependenciesEmbedded = New LoginTheme.XertzLoginTheme.LogInRadioButton()
        Me.RdbDependenciesMerged = New LoginTheme.XertzLoginTheme.LogInRadioButton()
        Me.BtnDependenciesDelete = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.BtnDependenciesAdd = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.LbxDependenciesAdd = New LoginTheme.XertzLoginTheme.LogInListbox()
        Me.ChbDependenciesEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.TpObfuscator = New System.Windows.Forms.TabPage()
        Me.BtnExclusion = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.PnlObfuscatorEnabled = New System.Windows.Forms.Panel()
        Me.GbxObfuscatorRenaming = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.ChbObfuscatorExcludeReflection = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorResourcesContent = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.PnlObfuscatorNamespacesGroup = New System.Windows.Forms.Panel()
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorAttributesRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorFieldsRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorEventsRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorPropertiesRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorMethodsRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorTypesRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorNamespacesRP = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.CbxObfuscatorScheme = New LoginTheme.XertzLoginTheme.LogInComboBox()
        Me.LblObfuscatorScheme = New System.Windows.Forms.Label()
        Me.GbxObfuscatorAdvanced = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.ChbObfuscatorInvalidMetadata = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorResourcesEncryption = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorInvalidOpcodes = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorAntiDumper = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorBooleanEncrypt = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorHideCalls = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorResourcesCompress = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorAntiTamper = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorAntiIlDasm = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorIntegersEncode = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorStringsEncrypt = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorAntiDebug = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.ChbObfuscatorEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.TpPacker = New System.Windows.Forms.TabPage()
        Me.LblPackerWarning = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.PnlPackerEnabled = New System.Windows.Forms.Panel()
        Me.GbxPackerLoader = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.TxbPackerFramework = New System.Windows.Forms.TextBox()
        Me.LblPackerFramework = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblPackerSystem = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.LblPackerPlatform = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.TxbPackerPlatform = New System.Windows.Forms.TextBox()
        Me.TxbPackerSystem = New System.Windows.Forms.TextBox()
        Me.ChbPackerEnabled = New LoginTheme.XertzLoginTheme.LogInCheckBox()
        Me.GbxDetection = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.PcbDetection = New System.Windows.Forms.PictureBox()
        Me.TxbDetection = New System.Windows.Forms.TextBox()
        Me.LblDetection = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.GbxSelectFile = New LoginTheme.XertzLoginTheme.LogInGroupBox()
        Me.LblType = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.TxbSelectedFile = New System.Windows.Forms.TextBox()
        Me.TxbType = New System.Windows.Forms.TextBox()
        Me.PbxSelectedFile = New System.Windows.Forms.PictureBox()
        Me.LblCpuTargetInfo = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.BtnSelectFile = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.TxbCpuTargetInfo = New System.Windows.Forms.TextBox()
        Me.LblVersionInfo = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.TxbFrameworkInfo = New System.Windows.Forms.TextBox()
        Me.TxbVersionInfo = New System.Windows.Forms.TextBox()
        Me.LblFrameworkInfo = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.Frm_MainThemeContainer.SuspendLayout()
        Me.TbcTask.SuspendLayout()
        Me.TpAbout.SuspendLayout()
        CType(Me.PbxAboutLogo, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.TpVersionInfos.SuspendLayout()
        Me.PnlVersionInfosEnabled.SuspendLayout()
        Me.TpManifestChanger.SuspendLayout()
        Me.PnlManifestEnabled.SuspendLayout()
        Me.TpIconChanger.SuspendLayout()
        Me.PnlIconChangerEnabled.SuspendLayout()
        CType(Me.PbxIconChangerSelect, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.TpDependencies.SuspendLayout()
        Me.PnlDependenciesEnabled.SuspendLayout()
        Me.TpObfuscator.SuspendLayout()
        Me.PnlObfuscatorEnabled.SuspendLayout()
        Me.GbxObfuscatorRenaming.SuspendLayout()
        Me.PnlObfuscatorNamespacesGroup.SuspendLayout()
        Me.GbxObfuscatorAdvanced.SuspendLayout()
        Me.TpPacker.SuspendLayout()
        Me.PnlPackerEnabled.SuspendLayout()
        Me.GbxPackerLoader.SuspendLayout()
        Me.GbxDetection.SuspendLayout()
        CType(Me.PcbDetection, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.GbxSelectFile.SuspendLayout()
        CType(Me.PbxSelectedFile, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.SuspendLayout()
        '
        'BgwRenameTask
        '
        Me.BgwRenameTask.WorkerReportsProgress = True
        Me.BgwRenameTask.WorkerSupportsCancellation = True
        '
        'Frm_MainThemeContainer
        '
        Me.Frm_MainThemeContainer.AllowClose = True
        Me.Frm_MainThemeContainer.AllowMaximize = False
        Me.Frm_MainThemeContainer.AllowMinimize = True
        Me.Frm_MainThemeContainer.BackColor = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_MainThemeContainer.BaseColour = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_MainThemeContainer.BorderColour = System.Drawing.Color.DimGray
        Me.Frm_MainThemeContainer.ContainerColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.Frm_MainThemeContainer.Controls.Add(Me.LnkLblBlogSpot)
        Me.Frm_MainThemeContainer.Controls.Add(Me.BtnStart)
        Me.Frm_MainThemeContainer.Controls.Add(Me.PgbStart)
        Me.Frm_MainThemeContainer.Controls.Add(Me.TbcTask)
        Me.Frm_MainThemeContainer.Controls.Add(Me.GbxDetection)
        Me.Frm_MainThemeContainer.Controls.Add(Me.GbxSelectFile)
        Me.Frm_MainThemeContainer.Dock = System.Windows.Forms.DockStyle.Fill
        Me.Frm_MainThemeContainer.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.Frm_MainThemeContainer.FontSize = 12
        Me.Frm_MainThemeContainer.HoverColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.Frm_MainThemeContainer.Location = New System.Drawing.Point(0, 0)
        Me.Frm_MainThemeContainer.MouseOverColour = System.Drawing.Color.BlueViolet
        Me.Frm_MainThemeContainer.Name = "Frm_MainThemeContainer"
        Me.Frm_MainThemeContainer.ShowControlBox = True
        Me.Frm_MainThemeContainer.ShowIcon = True
        Me.Frm_MainThemeContainer.ShowMaximizeButton = True
        Me.Frm_MainThemeContainer.ShowMinimizeButton = True
        Me.Frm_MainThemeContainer.Size = New System.Drawing.Size(704, 697)
        Me.Frm_MainThemeContainer.TabIndex = 0
        Me.Frm_MainThemeContainer.Text = "DotNet Patcher v4"
        '
        'LnkLblBlogSpot
        '
        Me.LnkLblBlogSpot.ActiveLinkColor = System.Drawing.Color.White
        Me.LnkLblBlogSpot.AutoSize = True
        Me.LnkLblBlogSpot.BackColor = System.Drawing.Color.Transparent
        Me.LnkLblBlogSpot.LinkColor = System.Drawing.Color.White
        Me.LnkLblBlogSpot.Location = New System.Drawing.Point(273, 676)
        Me.LnkLblBlogSpot.Name = "LnkLblBlogSpot"
        Me.LnkLblBlogSpot.Size = New System.Drawing.Size(161, 13)
        Me.LnkLblBlogSpot.TabIndex = 98
        Me.LnkLblBlogSpot.TabStop = True
        Me.LnkLblBlogSpot.Text = "http://3dotdevcoder.blogspot.fr/"
        Me.LnkLblBlogSpot.VisitedLinkColor = System.Drawing.Color.BlueViolet
        '
        'BtnStart
        '
        Me.BtnStart.BackColor = System.Drawing.Color.Transparent
        Me.BtnStart.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnStart.BorderColour = System.Drawing.Color.DimGray
        Me.BtnStart.Enabled = False
        Me.BtnStart.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnStart.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnStart.Location = New System.Drawing.Point(16, 627)
        Me.BtnStart.Name = "BtnStart"
        Me.BtnStart.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnStart.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnStart.Size = New System.Drawing.Size(671, 41)
        Me.BtnStart.TabIndex = 7
        Me.BtnStart.Text = "Start"
        '
        'PgbStart
        '
        Me.PgbStart.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.PgbStart.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.PgbStart.ForeColor = System.Drawing.Color.Black
        Me.PgbStart.Location = New System.Drawing.Point(16, 627)
        Me.PgbStart.Name = "PgbStart"
        Me.PgbStart.OverLayColor = System.Drawing.Color.Black
        Me.PgbStart.Percentage = 0.0R
        Me.PgbStart.PercentageAlign = System.Drawing.ContentAlignment.MiddleCenter
        Me.PgbStart.ShowAText = True
        Me.PgbStart.Size = New System.Drawing.Size(671, 41)
        Me.PgbStart.TabIndex = 97
        Me.PgbStart.TextToShow = Nothing
        '
        'TbcTask
        '
        Me.TbcTask.ActiveColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.TbcTask.BackTabColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TbcTask.BaseColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.TbcTask.BorderColour = System.Drawing.Color.DimGray
        Me.TbcTask.Controls.Add(Me.TpAbout)
        Me.TbcTask.Controls.Add(Me.TpVersionInfos)
        Me.TbcTask.Controls.Add(Me.TpManifestChanger)
        Me.TbcTask.Controls.Add(Me.TpIconChanger)
        Me.TbcTask.Controls.Add(Me.TpDependencies)
        Me.TbcTask.Controls.Add(Me.TpObfuscator)
        Me.TbcTask.Controls.Add(Me.TpPacker)
        Me.TbcTask.Enabled = False
        Me.TbcTask.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.TbcTask.HorizLineColour = System.Drawing.Color.BlueViolet
        Me.TbcTask.ItemSize = New System.Drawing.Size(240, 32)
        Me.TbcTask.Location = New System.Drawing.Point(12, 255)
        Me.TbcTask.Name = "TbcTask"
        Me.TbcTask.SelectedIndex = 0
        Me.TbcTask.Size = New System.Drawing.Size(679, 366)
        Me.TbcTask.TabIndex = 16
        Me.TbcTask.TextColour = System.Drawing.Color.White
        Me.TbcTask.UpLineColour = System.Drawing.Color.BlueViolet
        '
        'TpAbout
        '
        Me.TpAbout.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpAbout.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpAbout.Controls.Add(Me.LblAboutCredits1)
        Me.TpAbout.Controls.Add(Me.LblWebSite)
        Me.TpAbout.Controls.Add(Me.LblAboutCredits)
        Me.TpAbout.Controls.Add(Me.LblAboutWebsite)
        Me.TpAbout.Controls.Add(Me.LblAboutDevelopBy)
        Me.TpAbout.Controls.Add(Me.LblAboutVersion)
        Me.TpAbout.Controls.Add(Me.LblDNR_DevelopBy)
        Me.TpAbout.Controls.Add(Me.LblDNR_Version)
        Me.TpAbout.Controls.Add(Me.PbxAboutLogo)
        Me.TpAbout.Location = New System.Drawing.Point(4, 36)
        Me.TpAbout.Name = "TpAbout"
        Me.TpAbout.Padding = New System.Windows.Forms.Padding(3)
        Me.TpAbout.Size = New System.Drawing.Size(671, 326)
        Me.TpAbout.TabIndex = 0
        Me.TpAbout.Text = "About"
        '
        'LblAboutCredits1
        '
        Me.LblAboutCredits1.AutoSize = True
        Me.LblAboutCredits1.BackColor = System.Drawing.Color.Transparent
        Me.LblAboutCredits1.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblAboutCredits1.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutCredits1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutCredits1.Location = New System.Drawing.Point(285, 183)
        Me.LblAboutCredits1.Name = "LblAboutCredits1"
        Me.LblAboutCredits1.Size = New System.Drawing.Size(50, 15)
        Me.LblAboutCredits1.TabIndex = 97
        Me.LblAboutCredits1.Text = "Credits :"
        '
        'LblWebSite
        '
        Me.LblWebSite.AutoSize = True
        Me.LblWebSite.BackColor = System.Drawing.Color.Transparent
        Me.LblWebSite.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblWebSite.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblWebSite.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblWebSite.Location = New System.Drawing.Point(342, 157)
        Me.LblWebSite.Name = "LblWebSite"
        Me.LblWebSite.Size = New System.Drawing.Size(176, 15)
        Me.LblWebSite.TabIndex = 96
        Me.LblWebSite.Text = "http://3dotdevcoder.blogspot.fr"
        '
        'LblAboutCredits
        '
        Me.LblAboutCredits.AutoSize = True
        Me.LblAboutCredits.BackColor = System.Drawing.Color.Transparent
        Me.LblAboutCredits.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblAboutCredits.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutCredits.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutCredits.Location = New System.Drawing.Point(343, 183)
        Me.LblAboutCredits.Name = "LblAboutCredits"
        Me.LblAboutCredits.Size = New System.Drawing.Size(262, 15)
        Me.LblAboutCredits.TabIndex = 94
        Me.LblAboutCredits.Text = "Jbevain, yck1509, Aeonhack, Xertz, Pl0xy, Î©É±ega"
        '
        'LblAboutWebsite
        '
        Me.LblAboutWebsite.AutoSize = True
        Me.LblAboutWebsite.BackColor = System.Drawing.Color.Transparent
        Me.LblAboutWebsite.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblAboutWebsite.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutWebsite.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutWebsite.Location = New System.Drawing.Point(279, 157)
        Me.LblAboutWebsite.Name = "LblAboutWebsite"
        Me.LblAboutWebsite.Size = New System.Drawing.Size(56, 15)
        Me.LblAboutWebsite.TabIndex = 93
        Me.LblAboutWebsite.Text = "WebSite :"
        '
        'LblAboutDevelopBy
        '
        Me.LblAboutDevelopBy.AutoSize = True
        Me.LblAboutDevelopBy.BackColor = System.Drawing.Color.Transparent
        Me.LblAboutDevelopBy.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblAboutDevelopBy.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutDevelopBy.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutDevelopBy.Location = New System.Drawing.Point(263, 130)
        Me.LblAboutDevelopBy.Name = "LblAboutDevelopBy"
        Me.LblAboutDevelopBy.Size = New System.Drawing.Size(72, 15)
        Me.LblAboutDevelopBy.TabIndex = 92
        Me.LblAboutDevelopBy.Text = "Develop By :"
        '
        'LblAboutVersion
        '
        Me.LblAboutVersion.AutoSize = True
        Me.LblAboutVersion.BackColor = System.Drawing.Color.Transparent
        Me.LblAboutVersion.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblAboutVersion.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutVersion.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblAboutVersion.Location = New System.Drawing.Point(283, 103)
        Me.LblAboutVersion.Name = "LblAboutVersion"
        Me.LblAboutVersion.Size = New System.Drawing.Size(52, 15)
        Me.LblAboutVersion.TabIndex = 91
        Me.LblAboutVersion.Text = "Version :"
        '
        'LblDNR_DevelopBy
        '
        Me.LblDNR_DevelopBy.BackColor = System.Drawing.Color.Transparent
        Me.LblDNR_DevelopBy.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblDNR_DevelopBy.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblDNR_DevelopBy.ForeColor = System.Drawing.Color.White
        Me.LblDNR_DevelopBy.Location = New System.Drawing.Point(342, 130)
        Me.LblDNR_DevelopBy.Name = "LblDNR_DevelopBy"
        Me.LblDNR_DevelopBy.Size = New System.Drawing.Size(186, 16)
        Me.LblDNR_DevelopBy.TabIndex = 79
        Me.LblDNR_DevelopBy.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblDNR_Version
        '
        Me.LblDNR_Version.BackColor = System.Drawing.Color.Transparent
        Me.LblDNR_Version.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblDNR_Version.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblDNR_Version.ForeColor = System.Drawing.Color.White
        Me.LblDNR_Version.Location = New System.Drawing.Point(342, 103)
        Me.LblDNR_Version.Name = "LblDNR_Version"
        Me.LblDNR_Version.Size = New System.Drawing.Size(186, 16)
        Me.LblDNR_Version.TabIndex = 78
        Me.LblDNR_Version.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'PbxAboutLogo
        '
        Me.PbxAboutLogo.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.PbxAboutLogo.Cursor = System.Windows.Forms.Cursors.Hand
        Me.PbxAboutLogo.Image = Global.DotNetPatcher.My.Resources.Resources.TDD
        Me.PbxAboutLogo.Location = New System.Drawing.Point(86, 96)
        Me.PbxAboutLogo.Name = "PbxAboutLogo"
        Me.PbxAboutLogo.Size = New System.Drawing.Size(110, 110)
        Me.PbxAboutLogo.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
        Me.PbxAboutLogo.TabIndex = 74
        Me.PbxAboutLogo.TabStop = False
        Me.PbxAboutLogo.Tag = "PbxAboutLogo.Click"
        '
        'TpVersionInfos
        '
        Me.TpVersionInfos.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpVersionInfos.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpVersionInfos.Controls.Add(Me.PnlVersionInfosEnabled)
        Me.TpVersionInfos.Controls.Add(Me.ChbVersionInfosEnabled)
        Me.TpVersionInfos.Location = New System.Drawing.Point(4, 36)
        Me.TpVersionInfos.Name = "TpVersionInfos"
        Me.TpVersionInfos.Padding = New System.Windows.Forms.Padding(3)
        Me.TpVersionInfos.Size = New System.Drawing.Size(671, 326)
        Me.TpVersionInfos.TabIndex = 1
        Me.TpVersionInfos.Text = "Version Infos Changer"
        '
        'PnlVersionInfosEnabled
        '
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosTitle)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosDescription)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosCompany)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosProduct)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosCopyright)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosTrademark)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.LblVersionInfosVersion)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosVersion)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosTrademark)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosCopyright)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosProduct)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosCompany)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosDescription)
        Me.PnlVersionInfosEnabled.Controls.Add(Me.TxbVersionInfosTitle)
        Me.PnlVersionInfosEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlVersionInfosEnabled.Name = "PnlVersionInfosEnabled"
        Me.PnlVersionInfosEnabled.Size = New System.Drawing.Size(657, 273)
        Me.PnlVersionInfosEnabled.TabIndex = 8
        '
        'LblVersionInfosTitle
        '
        Me.LblVersionInfosTitle.AutoSize = True
        Me.LblVersionInfosTitle.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosTitle.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosTitle.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosTitle.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosTitle.Location = New System.Drawing.Point(85, 38)
        Me.LblVersionInfosTitle.Name = "LblVersionInfosTitle"
        Me.LblVersionInfosTitle.Size = New System.Drawing.Size(36, 15)
        Me.LblVersionInfosTitle.TabIndex = 98
        Me.LblVersionInfosTitle.Text = "Title :"
        '
        'LblVersionInfosDescription
        '
        Me.LblVersionInfosDescription.AutoSize = True
        Me.LblVersionInfosDescription.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosDescription.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosDescription.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosDescription.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosDescription.Location = New System.Drawing.Point(48, 69)
        Me.LblVersionInfosDescription.Name = "LblVersionInfosDescription"
        Me.LblVersionInfosDescription.Size = New System.Drawing.Size(73, 15)
        Me.LblVersionInfosDescription.TabIndex = 97
        Me.LblVersionInfosDescription.Text = "Description :"
        '
        'LblVersionInfosCompany
        '
        Me.LblVersionInfosCompany.AutoSize = True
        Me.LblVersionInfosCompany.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosCompany.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosCompany.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosCompany.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosCompany.Location = New System.Drawing.Point(56, 100)
        Me.LblVersionInfosCompany.Name = "LblVersionInfosCompany"
        Me.LblVersionInfosCompany.Size = New System.Drawing.Size(65, 15)
        Me.LblVersionInfosCompany.TabIndex = 96
        Me.LblVersionInfosCompany.Text = "Company :"
        '
        'LblVersionInfosProduct
        '
        Me.LblVersionInfosProduct.AutoSize = True
        Me.LblVersionInfosProduct.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosProduct.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosProduct.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosProduct.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosProduct.Location = New System.Drawing.Point(66, 131)
        Me.LblVersionInfosProduct.Name = "LblVersionInfosProduct"
        Me.LblVersionInfosProduct.Size = New System.Drawing.Size(55, 15)
        Me.LblVersionInfosProduct.TabIndex = 95
        Me.LblVersionInfosProduct.Text = "Product :"
        '
        'LblVersionInfosCopyright
        '
        Me.LblVersionInfosCopyright.AutoSize = True
        Me.LblVersionInfosCopyright.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosCopyright.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosCopyright.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosCopyright.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosCopyright.Location = New System.Drawing.Point(55, 162)
        Me.LblVersionInfosCopyright.Name = "LblVersionInfosCopyright"
        Me.LblVersionInfosCopyright.Size = New System.Drawing.Size(66, 15)
        Me.LblVersionInfosCopyright.TabIndex = 94
        Me.LblVersionInfosCopyright.Text = "Copyright :"
        '
        'LblVersionInfosTrademark
        '
        Me.LblVersionInfosTrademark.AutoSize = True
        Me.LblVersionInfosTrademark.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosTrademark.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosTrademark.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosTrademark.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosTrademark.Location = New System.Drawing.Point(51, 193)
        Me.LblVersionInfosTrademark.Name = "LblVersionInfosTrademark"
        Me.LblVersionInfosTrademark.Size = New System.Drawing.Size(70, 15)
        Me.LblVersionInfosTrademark.TabIndex = 93
        Me.LblVersionInfosTrademark.Text = "Trademark :"
        '
        'LblVersionInfosVersion
        '
        Me.LblVersionInfosVersion.AutoSize = True
        Me.LblVersionInfosVersion.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfosVersion.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfosVersion.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosVersion.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfosVersion.Location = New System.Drawing.Point(69, 224)
        Me.LblVersionInfosVersion.Name = "LblVersionInfosVersion"
        Me.LblVersionInfosVersion.Size = New System.Drawing.Size(52, 15)
        Me.LblVersionInfosVersion.TabIndex = 92
        Me.LblVersionInfosVersion.Text = "Version :"
        '
        'TxbVersionInfosVersion
        '
        Me.TxbVersionInfosVersion.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosVersion.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosVersion.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosVersion.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosVersion.Location = New System.Drawing.Point(127, 220)
        Me.TxbVersionInfosVersion.Name = "TxbVersionInfosVersion"
        Me.TxbVersionInfosVersion.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosVersion.TabIndex = 56
        Me.TxbVersionInfosVersion.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosTrademark
        '
        Me.TxbVersionInfosTrademark.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosTrademark.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosTrademark.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosTrademark.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosTrademark.Location = New System.Drawing.Point(127, 189)
        Me.TxbVersionInfosTrademark.Name = "TxbVersionInfosTrademark"
        Me.TxbVersionInfosTrademark.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosTrademark.TabIndex = 55
        Me.TxbVersionInfosTrademark.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosCopyright
        '
        Me.TxbVersionInfosCopyright.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosCopyright.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosCopyright.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosCopyright.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosCopyright.Location = New System.Drawing.Point(127, 158)
        Me.TxbVersionInfosCopyright.Name = "TxbVersionInfosCopyright"
        Me.TxbVersionInfosCopyright.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosCopyright.TabIndex = 54
        Me.TxbVersionInfosCopyright.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosProduct
        '
        Me.TxbVersionInfosProduct.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosProduct.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosProduct.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosProduct.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosProduct.Location = New System.Drawing.Point(127, 127)
        Me.TxbVersionInfosProduct.Name = "TxbVersionInfosProduct"
        Me.TxbVersionInfosProduct.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosProduct.TabIndex = 53
        Me.TxbVersionInfosProduct.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosCompany
        '
        Me.TxbVersionInfosCompany.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosCompany.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosCompany.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosCompany.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosCompany.Location = New System.Drawing.Point(127, 96)
        Me.TxbVersionInfosCompany.Name = "TxbVersionInfosCompany"
        Me.TxbVersionInfosCompany.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosCompany.TabIndex = 52
        Me.TxbVersionInfosCompany.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosDescription
        '
        Me.TxbVersionInfosDescription.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosDescription.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosDescription.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosDescription.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosDescription.Location = New System.Drawing.Point(127, 65)
        Me.TxbVersionInfosDescription.Name = "TxbVersionInfosDescription"
        Me.TxbVersionInfosDescription.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosDescription.TabIndex = 51
        Me.TxbVersionInfosDescription.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfosTitle
        '
        Me.TxbVersionInfosTitle.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfosTitle.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfosTitle.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfosTitle.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfosTitle.Location = New System.Drawing.Point(127, 34)
        Me.TxbVersionInfosTitle.Name = "TxbVersionInfosTitle"
        Me.TxbVersionInfosTitle.Size = New System.Drawing.Size(483, 25)
        Me.TxbVersionInfosTitle.TabIndex = 50
        Me.TxbVersionInfosTitle.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'ChbVersionInfosEnabled
        '
        Me.ChbVersionInfosEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbVersionInfosEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbVersionInfosEnabled.Checked = True
        Me.ChbVersionInfosEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbVersionInfosEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbVersionInfosEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbVersionInfosEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbVersionInfosEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbVersionInfosEnabled.Name = "ChbVersionInfosEnabled"
        Me.ChbVersionInfosEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbVersionInfosEnabled.TabIndex = 7
        Me.ChbVersionInfosEnabled.Tag = "Types"
        Me.ChbVersionInfosEnabled.Text = "Enabled"
        '
        'TpManifestChanger
        '
        Me.TpManifestChanger.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpManifestChanger.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpManifestChanger.Controls.Add(Me.PnlManifestEnabled)
        Me.TpManifestChanger.Controls.Add(Me.ChbManifestEnabled)
        Me.TpManifestChanger.Location = New System.Drawing.Point(4, 36)
        Me.TpManifestChanger.Name = "TpManifestChanger"
        Me.TpManifestChanger.Padding = New System.Windows.Forms.Padding(3)
        Me.TpManifestChanger.Size = New System.Drawing.Size(671, 326)
        Me.TpManifestChanger.TabIndex = 3
        Me.TpManifestChanger.Text = "Manifest Changer"
        '
        'PnlManifestEnabled
        '
        Me.PnlManifestEnabled.Controls.Add(Me.RdbManifestChangerHighestAvailable)
        Me.PnlManifestEnabled.Controls.Add(Me.RdbManifestChangerRequireAdministrator)
        Me.PnlManifestEnabled.Controls.Add(Me.RdbManifestChangerAsInvoker)
        Me.PnlManifestEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlManifestEnabled.Name = "PnlManifestEnabled"
        Me.PnlManifestEnabled.Size = New System.Drawing.Size(657, 273)
        Me.PnlManifestEnabled.TabIndex = 41
        '
        'RdbManifestChangerHighestAvailable
        '
        Me.RdbManifestChangerHighestAvailable.BaseColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.RdbManifestChangerHighestAvailable.BorderColour = System.Drawing.Color.DimGray
        Me.RdbManifestChangerHighestAvailable.Checked = False
        Me.RdbManifestChangerHighestAvailable.CheckedColour = System.Drawing.Color.FromArgb(CType(CType(173, Byte), Integer), CType(CType(173, Byte), Integer), CType(CType(174, Byte), Integer))
        Me.RdbManifestChangerHighestAvailable.CheckState = System.Windows.Forms.CheckState.Unchecked
        Me.RdbManifestChangerHighestAvailable.Cursor = System.Windows.Forms.Cursors.Hand
        Me.RdbManifestChangerHighestAvailable.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.RdbManifestChangerHighestAvailable.HighlightColour = System.Drawing.Color.FromArgb(CType(CType(50, Byte), Integer), CType(CType(49, Byte), Integer), CType(CType(51, Byte), Integer))
        Me.RdbManifestChangerHighestAvailable.Location = New System.Drawing.Point(241, 174)
        Me.RdbManifestChangerHighestAvailable.Name = "RdbManifestChangerHighestAvailable"
        Me.RdbManifestChangerHighestAvailable.Size = New System.Drawing.Size(160, 18)
        Me.RdbManifestChangerHighestAvailable.TabIndex = 8
        Me.RdbManifestChangerHighestAvailable.Tag = "highestAvailable"
        Me.RdbManifestChangerHighestAvailable.Text = "highestAvailable"
        '
        'RdbManifestChangerRequireAdministrator
        '
        Me.RdbManifestChangerRequireAdministrator.BaseColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.RdbManifestChangerRequireAdministrator.BorderColour = System.Drawing.Color.DimGray
        Me.RdbManifestChangerRequireAdministrator.Checked = False
        Me.RdbManifestChangerRequireAdministrator.CheckedColour = System.Drawing.Color.FromArgb(CType(CType(173, Byte), Integer), CType(CType(173, Byte), Integer), CType(CType(174, Byte), Integer))
        Me.RdbManifestChangerRequireAdministrator.CheckState = System.Windows.Forms.CheckState.Unchecked
        Me.RdbManifestChangerRequireAdministrator.Cursor = System.Windows.Forms.Cursors.Hand
        Me.RdbManifestChangerRequireAdministrator.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.RdbManifestChangerRequireAdministrator.HighlightColour = System.Drawing.Color.FromArgb(CType(CType(50, Byte), Integer), CType(CType(49, Byte), Integer), CType(CType(51, Byte), Integer))
        Me.RdbManifestChangerRequireAdministrator.Location = New System.Drawing.Point(241, 127)
        Me.RdbManifestChangerRequireAdministrator.Name = "RdbManifestChangerRequireAdministrator"
        Me.RdbManifestChangerRequireAdministrator.Size = New System.Drawing.Size(160, 18)
        Me.RdbManifestChangerRequireAdministrator.TabIndex = 7
        Me.RdbManifestChangerRequireAdministrator.Tag = "requireAdministrator"
        Me.RdbManifestChangerRequireAdministrator.Text = "requireAdministrator"
        '
        'RdbManifestChangerAsInvoker
        '
        Me.RdbManifestChangerAsInvoker.BaseColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.RdbManifestChangerAsInvoker.BorderColour = System.Drawing.Color.DimGray
        Me.RdbManifestChangerAsInvoker.Checked = False
        Me.RdbManifestChangerAsInvoker.CheckedColour = System.Drawing.Color.FromArgb(CType(CType(173, Byte), Integer), CType(CType(173, Byte), Integer), CType(CType(174, Byte), Integer))
        Me.RdbManifestChangerAsInvoker.CheckState = System.Windows.Forms.CheckState.Unchecked
        Me.RdbManifestChangerAsInvoker.Cursor = System.Windows.Forms.Cursors.Hand
        Me.RdbManifestChangerAsInvoker.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.RdbManifestChangerAsInvoker.HighlightColour = System.Drawing.Color.FromArgb(CType(CType(50, Byte), Integer), CType(CType(49, Byte), Integer), CType(CType(51, Byte), Integer))
        Me.RdbManifestChangerAsInvoker.Location = New System.Drawing.Point(241, 81)
        Me.RdbManifestChangerAsInvoker.Name = "RdbManifestChangerAsInvoker"
        Me.RdbManifestChangerAsInvoker.Size = New System.Drawing.Size(175, 18)
        Me.RdbManifestChangerAsInvoker.TabIndex = 6
        Me.RdbManifestChangerAsInvoker.Tag = "asInvoker"
        Me.RdbManifestChangerAsInvoker.Text = "asInvoker (Default)"
        '
        'ChbManifestEnabled
        '
        Me.ChbManifestEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbManifestEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbManifestEnabled.Checked = True
        Me.ChbManifestEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbManifestEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbManifestEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbManifestEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbManifestEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbManifestEnabled.Name = "ChbManifestEnabled"
        Me.ChbManifestEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbManifestEnabled.TabIndex = 9
        Me.ChbManifestEnabled.Tag = "Types"
        Me.ChbManifestEnabled.Text = "Enabled"
        '
        'TpIconChanger
        '
        Me.TpIconChanger.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpIconChanger.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpIconChanger.Controls.Add(Me.PnlIconChangerEnabled)
        Me.TpIconChanger.Controls.Add(Me.ChbIconChangerEnabled)
        Me.TpIconChanger.Location = New System.Drawing.Point(4, 36)
        Me.TpIconChanger.Name = "TpIconChanger"
        Me.TpIconChanger.Padding = New System.Windows.Forms.Padding(3)
        Me.TpIconChanger.Size = New System.Drawing.Size(671, 326)
        Me.TpIconChanger.TabIndex = 6
        Me.TpIconChanger.Text = "Icon Changer"
        '
        'PnlIconChangerEnabled
        '
        Me.PnlIconChangerEnabled.Controls.Add(Me.PbxIconChangerSelect)
        Me.PnlIconChangerEnabled.Controls.Add(Me.TxbIconChangerSelect)
        Me.PnlIconChangerEnabled.Controls.Add(Me.BtnIconChangerSelect)
        Me.PnlIconChangerEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlIconChangerEnabled.Name = "PnlIconChangerEnabled"
        Me.PnlIconChangerEnabled.Size = New System.Drawing.Size(657, 273)
        Me.PnlIconChangerEnabled.TabIndex = 40
        '
        'PbxIconChangerSelect
        '
        Me.PbxIconChangerSelect.BackColor = System.Drawing.Color.Transparent
        Me.PbxIconChangerSelect.Location = New System.Drawing.Point(594, 32)
        Me.PbxIconChangerSelect.Name = "PbxIconChangerSelect"
        Me.PbxIconChangerSelect.Size = New System.Drawing.Size(48, 48)
        Me.PbxIconChangerSelect.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
        Me.PbxIconChangerSelect.TabIndex = 13
        Me.PbxIconChangerSelect.TabStop = False
        '
        'TxbIconChangerSelect
        '
        Me.TxbIconChangerSelect.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbIconChangerSelect.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbIconChangerSelect.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbIconChangerSelect.ForeColor = System.Drawing.Color.White
        Me.TxbIconChangerSelect.Location = New System.Drawing.Point(92, 46)
        Me.TxbIconChangerSelect.Name = "TxbIconChangerSelect"
        Me.TxbIconChangerSelect.ReadOnly = True
        Me.TxbIconChangerSelect.Size = New System.Drawing.Size(484, 25)
        Me.TxbIconChangerSelect.TabIndex = 12
        Me.TxbIconChangerSelect.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'BtnIconChangerSelect
        '
        Me.BtnIconChangerSelect.BackColor = System.Drawing.Color.Transparent
        Me.BtnIconChangerSelect.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnIconChangerSelect.BorderColour = System.Drawing.Color.DimGray
        Me.BtnIconChangerSelect.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.BtnIconChangerSelect.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnIconChangerSelect.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnIconChangerSelect.Location = New System.Drawing.Point(11, 46)
        Me.BtnIconChangerSelect.Name = "BtnIconChangerSelect"
        Me.BtnIconChangerSelect.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnIconChangerSelect.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnIconChangerSelect.Size = New System.Drawing.Size(75, 25)
        Me.BtnIconChangerSelect.TabIndex = 11
        Me.BtnIconChangerSelect.Text = "Browse"
        '
        'ChbIconChangerEnabled
        '
        Me.ChbIconChangerEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbIconChangerEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbIconChangerEnabled.Checked = True
        Me.ChbIconChangerEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbIconChangerEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbIconChangerEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbIconChangerEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbIconChangerEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbIconChangerEnabled.Name = "ChbIconChangerEnabled"
        Me.ChbIconChangerEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbIconChangerEnabled.TabIndex = 8
        Me.ChbIconChangerEnabled.Tag = "Types"
        Me.ChbIconChangerEnabled.Text = "Enabled"
        '
        'TpDependencies
        '
        Me.TpDependencies.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpDependencies.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpDependencies.Controls.Add(Me.LblDependenciesWarning)
        Me.TpDependencies.Controls.Add(Me.PnlDependenciesEnabled)
        Me.TpDependencies.Controls.Add(Me.ChbDependenciesEnabled)
        Me.TpDependencies.Location = New System.Drawing.Point(4, 36)
        Me.TpDependencies.Name = "TpDependencies"
        Me.TpDependencies.Padding = New System.Windows.Forms.Padding(3)
        Me.TpDependencies.Size = New System.Drawing.Size(671, 326)
        Me.TpDependencies.TabIndex = 2
        Me.TpDependencies.Text = "Dependencies"
        '
        'LblDependenciesWarning
        '
        Me.LblDependenciesWarning.AutoSize = True
        Me.LblDependenciesWarning.BackColor = System.Drawing.Color.Transparent
        Me.LblDependenciesWarning.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblDependenciesWarning.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblDependenciesWarning.ForeColor = System.Drawing.Color.LimeGreen
        Me.LblDependenciesWarning.Location = New System.Drawing.Point(98, 9)
        Me.LblDependenciesWarning.Name = "LblDependenciesWarning"
        Me.LblDependenciesWarning.Size = New System.Drawing.Size(198, 15)
        Me.LblDependenciesWarning.TabIndex = 42
        Me.LblDependenciesWarning.Text = "(Dependencies detection is enabled)"
        '
        'PnlDependenciesEnabled
        '
        Me.PnlDependenciesEnabled.Controls.Add(Me.CbxDependenciesEmbedded)
        Me.PnlDependenciesEnabled.Controls.Add(Me.RdbDependenciesEmbedded)
        Me.PnlDependenciesEnabled.Controls.Add(Me.RdbDependenciesMerged)
        Me.PnlDependenciesEnabled.Controls.Add(Me.BtnDependenciesDelete)
        Me.PnlDependenciesEnabled.Controls.Add(Me.BtnDependenciesAdd)
        Me.PnlDependenciesEnabled.Controls.Add(Me.LbxDependenciesAdd)
        Me.PnlDependenciesEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlDependenciesEnabled.Name = "PnlDependenciesEnabled"
        Me.PnlDependenciesEnabled.Size = New System.Drawing.Size(657, 273)
        Me.PnlDependenciesEnabled.TabIndex = 41
        '
        'CbxDependenciesEmbedded
        '
        Me.CbxDependenciesEmbedded.ArrowColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.CbxDependenciesEmbedded.BackColor = System.Drawing.Color.Transparent
        Me.CbxDependenciesEmbedded.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.CbxDependenciesEmbedded.BorderColour = System.Drawing.Color.DimGray
        Me.CbxDependenciesEmbedded.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed
        Me.CbxDependenciesEmbedded.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
        Me.CbxDependenciesEmbedded.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.CbxDependenciesEmbedded.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.CbxDependenciesEmbedded.Items.AddRange(New Object() {"Nothing", "Encrypt", "Compress", "Both"})
        Me.CbxDependenciesEmbedded.LineColour = System.Drawing.Color.BlueViolet
        Me.CbxDependenciesEmbedded.Location = New System.Drawing.Point(285, 1)
        Me.CbxDependenciesEmbedded.Name = "CbxDependenciesEmbedded"
        Me.CbxDependenciesEmbedded.Size = New System.Drawing.Size(90, 24)
        Me.CbxDependenciesEmbedded.SqaureColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.CbxDependenciesEmbedded.SqaureHoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.CbxDependenciesEmbedded.TabIndex = 40
        Me.CbxDependenciesEmbedded.Visible = False
        '
        'RdbDependenciesEmbedded
        '
        Me.RdbDependenciesEmbedded.BaseColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.RdbDependenciesEmbedded.BorderColour = System.Drawing.Color.DimGray
        Me.RdbDependenciesEmbedded.Checked = False
        Me.RdbDependenciesEmbedded.CheckedColour = System.Drawing.Color.FromArgb(CType(CType(173, Byte), Integer), CType(CType(173, Byte), Integer), CType(CType(174, Byte), Integer))
        Me.RdbDependenciesEmbedded.CheckState = System.Windows.Forms.CheckState.Unchecked
        Me.RdbDependenciesEmbedded.Cursor = System.Windows.Forms.Cursors.Hand
        Me.RdbDependenciesEmbedded.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.RdbDependenciesEmbedded.HighlightColour = System.Drawing.Color.FromArgb(CType(CType(50, Byte), Integer), CType(CType(49, Byte), Integer), CType(CType(51, Byte), Integer))
        Me.RdbDependenciesEmbedded.Location = New System.Drawing.Point(179, 3)
        Me.RdbDependenciesEmbedded.Name = "RdbDependenciesEmbedded"
        Me.RdbDependenciesEmbedded.Size = New System.Drawing.Size(100, 18)
        Me.RdbDependenciesEmbedded.TabIndex = 8
        Me.RdbDependenciesEmbedded.Tag = ""
        Me.RdbDependenciesEmbedded.Text = "Embedding"
        '
        'RdbDependenciesMerged
        '
        Me.RdbDependenciesMerged.BaseColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.RdbDependenciesMerged.BorderColour = System.Drawing.Color.DimGray
        Me.RdbDependenciesMerged.Checked = True
        Me.RdbDependenciesMerged.CheckedColour = System.Drawing.Color.BlueViolet
        Me.RdbDependenciesMerged.CheckState = System.Windows.Forms.CheckState.Unchecked
        Me.RdbDependenciesMerged.Cursor = System.Windows.Forms.Cursors.Hand
        Me.RdbDependenciesMerged.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.RdbDependenciesMerged.HighlightColour = System.Drawing.Color.FromArgb(CType(CType(50, Byte), Integer), CType(CType(49, Byte), Integer), CType(CType(51, Byte), Integer))
        Me.RdbDependenciesMerged.Location = New System.Drawing.Point(93, 3)
        Me.RdbDependenciesMerged.Name = "RdbDependenciesMerged"
        Me.RdbDependenciesMerged.Size = New System.Drawing.Size(80, 18)
        Me.RdbDependenciesMerged.TabIndex = 7
        Me.RdbDependenciesMerged.Tag = ""
        Me.RdbDependenciesMerged.Text = "Merging"
        '
        'BtnDependenciesDelete
        '
        Me.BtnDependenciesDelete.BackColor = System.Drawing.Color.Transparent
        Me.BtnDependenciesDelete.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnDependenciesDelete.BorderColour = System.Drawing.Color.DimGray
        Me.BtnDependenciesDelete.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnDependenciesDelete.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnDependenciesDelete.Location = New System.Drawing.Point(582, 0)
        Me.BtnDependenciesDelete.Name = "BtnDependenciesDelete"
        Me.BtnDependenciesDelete.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnDependenciesDelete.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnDependenciesDelete.Size = New System.Drawing.Size(75, 25)
        Me.BtnDependenciesDelete.TabIndex = 5
        Me.BtnDependenciesDelete.Text = "Delete"
        '
        'BtnDependenciesAdd
        '
        Me.BtnDependenciesAdd.BackColor = System.Drawing.Color.Transparent
        Me.BtnDependenciesAdd.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnDependenciesAdd.BorderColour = System.Drawing.Color.DimGray
        Me.BtnDependenciesAdd.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnDependenciesAdd.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnDependenciesAdd.Location = New System.Drawing.Point(501, 0)
        Me.BtnDependenciesAdd.Name = "BtnDependenciesAdd"
        Me.BtnDependenciesAdd.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnDependenciesAdd.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnDependenciesAdd.Size = New System.Drawing.Size(75, 25)
        Me.BtnDependenciesAdd.TabIndex = 4
        Me.BtnDependenciesAdd.Text = "Add"
        '
        'LbxDependenciesAdd
        '
        Me.LbxDependenciesAdd.ArrowColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.LbxDependenciesAdd.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.LbxDependenciesAdd.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.LbxDependenciesAdd.BorderColour = System.Drawing.Color.DimGray
        Me.LbxDependenciesAdd.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.LbxDependenciesAdd.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed
        Me.LbxDependenciesAdd.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LbxDependenciesAdd.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LbxDependenciesAdd.ForeColor = System.Drawing.Color.White
        Me.LbxDependenciesAdd.FormattingEnabled = True
        Me.LbxDependenciesAdd.IntegralHeight = False
        Me.LbxDependenciesAdd.ItemHeight = 20
        Me.LbxDependenciesAdd.LineColour = System.Drawing.Color.FromArgb(CType(CType(23, Byte), Integer), CType(CType(119, Byte), Integer), CType(CType(151, Byte), Integer))
        Me.LbxDependenciesAdd.Location = New System.Drawing.Point(3, 31)
        Me.LbxDependenciesAdd.Name = "LbxDependenciesAdd"
        Me.LbxDependenciesAdd.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended
        Me.LbxDependenciesAdd.Size = New System.Drawing.Size(651, 239)
        Me.LbxDependenciesAdd.SqaureColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.LbxDependenciesAdd.SqaureHoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.LbxDependenciesAdd.TabIndex = 3
        '
        'ChbDependenciesEnabled
        '
        Me.ChbDependenciesEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbDependenciesEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbDependenciesEnabled.Checked = True
        Me.ChbDependenciesEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbDependenciesEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbDependenciesEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbDependenciesEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbDependenciesEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbDependenciesEnabled.Name = "ChbDependenciesEnabled"
        Me.ChbDependenciesEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbDependenciesEnabled.TabIndex = 10
        Me.ChbDependenciesEnabled.Tag = "Types"
        Me.ChbDependenciesEnabled.Text = "Enabled"
        '
        'TpObfuscator
        '
        Me.TpObfuscator.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpObfuscator.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpObfuscator.Controls.Add(Me.BtnExclusion)
        Me.TpObfuscator.Controls.Add(Me.PnlObfuscatorEnabled)
        Me.TpObfuscator.Controls.Add(Me.ChbObfuscatorEnabled)
        Me.TpObfuscator.Location = New System.Drawing.Point(4, 36)
        Me.TpObfuscator.Name = "TpObfuscator"
        Me.TpObfuscator.Padding = New System.Windows.Forms.Padding(3)
        Me.TpObfuscator.Size = New System.Drawing.Size(671, 326)
        Me.TpObfuscator.TabIndex = 5
        Me.TpObfuscator.Text = "Obfuscator"
        '
        'BtnExclusion
        '
        Me.BtnExclusion.BackColor = System.Drawing.Color.Transparent
        Me.BtnExclusion.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnExclusion.BorderColour = System.Drawing.Color.DimGray
        Me.BtnExclusion.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.BtnExclusion.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnExclusion.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnExclusion.Location = New System.Drawing.Point(339, 5)
        Me.BtnExclusion.Name = "BtnExclusion"
        Me.BtnExclusion.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnExclusion.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnExclusion.Size = New System.Drawing.Size(324, 24)
        Me.BtnExclusion.TabIndex = 58
        Me.BtnExclusion.Text = "Exclusion ..."
        '
        'PnlObfuscatorEnabled
        '
        Me.PnlObfuscatorEnabled.Controls.Add(Me.GbxObfuscatorRenaming)
        Me.PnlObfuscatorEnabled.Controls.Add(Me.GbxObfuscatorAdvanced)
        Me.PnlObfuscatorEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlObfuscatorEnabled.Name = "PnlObfuscatorEnabled"
        Me.PnlObfuscatorEnabled.Size = New System.Drawing.Size(657, 284)
        Me.PnlObfuscatorEnabled.TabIndex = 38
        '
        'GbxObfuscatorRenaming
        '
        Me.GbxObfuscatorRenaming.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorExcludeReflection)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorResourcesContent)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.PnlObfuscatorNamespacesGroup)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorAttributesRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorFieldsRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorEventsRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorPropertiesRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorMethodsRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorTypesRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.ChbObfuscatorNamespacesRP)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.CbxObfuscatorScheme)
        Me.GbxObfuscatorRenaming.Controls.Add(Me.LblObfuscatorScheme)
        Me.GbxObfuscatorRenaming.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GbxObfuscatorRenaming.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.GbxObfuscatorRenaming.Location = New System.Drawing.Point(3, 0)
        Me.GbxObfuscatorRenaming.MainColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.GbxObfuscatorRenaming.Name = "GbxObfuscatorRenaming"
        Me.GbxObfuscatorRenaming.Size = New System.Drawing.Size(324, 281)
        Me.GbxObfuscatorRenaming.TabIndex = 56
        Me.GbxObfuscatorRenaming.Text = "Renaming"
        Me.GbxObfuscatorRenaming.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'ChbObfuscatorExcludeReflection
        '
        Me.ChbObfuscatorExcludeReflection.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorExcludeReflection.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorExcludeReflection.Checked = True
        Me.ChbObfuscatorExcludeReflection.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorExcludeReflection.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorExcludeReflection.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorExcludeReflection.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorExcludeReflection.Location = New System.Drawing.Point(22, 78)
        Me.ChbObfuscatorExcludeReflection.Name = "ChbObfuscatorExcludeReflection"
        Me.ChbObfuscatorExcludeReflection.Size = New System.Drawing.Size(142, 22)
        Me.ChbObfuscatorExcludeReflection.TabIndex = 62
        Me.ChbObfuscatorExcludeReflection.Tag = ""
        Me.ChbObfuscatorExcludeReflection.Text = "Reflection analyzer"
        '
        'ChbObfuscatorResourcesContent
        '
        Me.ChbObfuscatorResourcesContent.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorResourcesContent.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorResourcesContent.Checked = True
        Me.ChbObfuscatorResourcesContent.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorResourcesContent.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorResourcesContent.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorResourcesContent.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorResourcesContent.Location = New System.Drawing.Point(22, 249)
        Me.ChbObfuscatorResourcesContent.Name = "ChbObfuscatorResourcesContent"
        Me.ChbObfuscatorResourcesContent.Size = New System.Drawing.Size(164, 22)
        Me.ChbObfuscatorResourcesContent.TabIndex = 56
        Me.ChbObfuscatorResourcesContent.Tag = "Resources"
        Me.ChbObfuscatorResourcesContent.Text = "Resources content"
        '
        'PnlObfuscatorNamespacesGroup
        '
        Me.PnlObfuscatorNamespacesGroup.Controls.Add(Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces)
        Me.PnlObfuscatorNamespacesGroup.Controls.Add(Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces)
        Me.PnlObfuscatorNamespacesGroup.Location = New System.Drawing.Point(46, 134)
        Me.PnlObfuscatorNamespacesGroup.Name = "PnlObfuscatorNamespacesGroup"
        Me.PnlObfuscatorNamespacesGroup.Size = New System.Drawing.Size(268, 49)
        Me.PnlObfuscatorNamespacesGroup.TabIndex = 55
        '
        'ChbObfuscatorReplaceNamespaceByEmptyNamespaces
        '
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked = True
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Location = New System.Drawing.Point(0, 28)
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Name = "ChbObfuscatorReplaceNamespaceByEmptyNamespaces"
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Size = New System.Drawing.Size(258, 22)
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.TabIndex = 3
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Tag = "1"
        Me.ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Text = "Replace namespace(s) by empty value"
        '
        'ChbObfuscatorRenameMainNamespaceOnlyNamespaces
        '
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Location = New System.Drawing.Point(0, 0)
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Name = "ChbObfuscatorRenameMainNamespaceOnlyNamespaces"
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Size = New System.Drawing.Size(245, 22)
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.TabIndex = 2
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Tag = "0"
        Me.ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Text = "Rename the main namespace only "
        '
        'ChbObfuscatorAttributesRP
        '
        Me.ChbObfuscatorAttributesRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorAttributesRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorAttributesRP.Checked = True
        Me.ChbObfuscatorAttributesRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorAttributesRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorAttributesRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorAttributesRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorAttributesRP.Location = New System.Drawing.Point(204, 221)
        Me.ChbObfuscatorAttributesRP.Name = "ChbObfuscatorAttributesRP"
        Me.ChbObfuscatorAttributesRP.Size = New System.Drawing.Size(83, 22)
        Me.ChbObfuscatorAttributesRP.TabIndex = 10
        Me.ChbObfuscatorAttributesRP.Tag = "Attributes"
        Me.ChbObfuscatorAttributesRP.Text = "Attributes"
        '
        'ChbObfuscatorFieldsRP
        '
        Me.ChbObfuscatorFieldsRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorFieldsRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorFieldsRP.Checked = True
        Me.ChbObfuscatorFieldsRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorFieldsRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorFieldsRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorFieldsRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorFieldsRP.Location = New System.Drawing.Point(111, 221)
        Me.ChbObfuscatorFieldsRP.Name = "ChbObfuscatorFieldsRP"
        Me.ChbObfuscatorFieldsRP.Size = New System.Drawing.Size(83, 22)
        Me.ChbObfuscatorFieldsRP.TabIndex = 9
        Me.ChbObfuscatorFieldsRP.Tag = "Fields"
        Me.ChbObfuscatorFieldsRP.Text = "Fields"
        '
        'ChbObfuscatorEventsRP
        '
        Me.ChbObfuscatorEventsRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorEventsRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorEventsRP.Checked = True
        Me.ChbObfuscatorEventsRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorEventsRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorEventsRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorEventsRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorEventsRP.Location = New System.Drawing.Point(22, 221)
        Me.ChbObfuscatorEventsRP.Name = "ChbObfuscatorEventsRP"
        Me.ChbObfuscatorEventsRP.Size = New System.Drawing.Size(83, 22)
        Me.ChbObfuscatorEventsRP.TabIndex = 8
        Me.ChbObfuscatorEventsRP.Tag = "Events"
        Me.ChbObfuscatorEventsRP.Text = "Events"
        '
        'ChbObfuscatorPropertiesRP
        '
        Me.ChbObfuscatorPropertiesRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorPropertiesRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorPropertiesRP.Checked = True
        Me.ChbObfuscatorPropertiesRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorPropertiesRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorPropertiesRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorPropertiesRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorPropertiesRP.Location = New System.Drawing.Point(204, 193)
        Me.ChbObfuscatorPropertiesRP.Name = "ChbObfuscatorPropertiesRP"
        Me.ChbObfuscatorPropertiesRP.Size = New System.Drawing.Size(100, 22)
        Me.ChbObfuscatorPropertiesRP.TabIndex = 49
        Me.ChbObfuscatorPropertiesRP.Tag = "Properties"
        Me.ChbObfuscatorPropertiesRP.Text = "Properties"
        '
        'ChbObfuscatorMethodsRP
        '
        Me.ChbObfuscatorMethodsRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorMethodsRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorMethodsRP.Checked = True
        Me.ChbObfuscatorMethodsRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorMethodsRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorMethodsRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorMethodsRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorMethodsRP.Location = New System.Drawing.Point(111, 193)
        Me.ChbObfuscatorMethodsRP.Name = "ChbObfuscatorMethodsRP"
        Me.ChbObfuscatorMethodsRP.Size = New System.Drawing.Size(83, 22)
        Me.ChbObfuscatorMethodsRP.TabIndex = 6
        Me.ChbObfuscatorMethodsRP.Tag = "Methods"
        Me.ChbObfuscatorMethodsRP.Text = "Methods"
        '
        'ChbObfuscatorTypesRP
        '
        Me.ChbObfuscatorTypesRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorTypesRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorTypesRP.Checked = True
        Me.ChbObfuscatorTypesRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorTypesRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorTypesRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorTypesRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorTypesRP.Location = New System.Drawing.Point(22, 193)
        Me.ChbObfuscatorTypesRP.Name = "ChbObfuscatorTypesRP"
        Me.ChbObfuscatorTypesRP.Size = New System.Drawing.Size(83, 22)
        Me.ChbObfuscatorTypesRP.TabIndex = 5
        Me.ChbObfuscatorTypesRP.Tag = "Types"
        Me.ChbObfuscatorTypesRP.Text = "Types"
        '
        'ChbObfuscatorNamespacesRP
        '
        Me.ChbObfuscatorNamespacesRP.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorNamespacesRP.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorNamespacesRP.Checked = True
        Me.ChbObfuscatorNamespacesRP.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorNamespacesRP.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorNamespacesRP.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorNamespacesRP.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorNamespacesRP.Location = New System.Drawing.Point(22, 106)
        Me.ChbObfuscatorNamespacesRP.Name = "ChbObfuscatorNamespacesRP"
        Me.ChbObfuscatorNamespacesRP.Size = New System.Drawing.Size(124, 22)
        Me.ChbObfuscatorNamespacesRP.TabIndex = 4
        Me.ChbObfuscatorNamespacesRP.Tag = "Namespaces"
        Me.ChbObfuscatorNamespacesRP.Text = "Namespaces"
        '
        'CbxObfuscatorScheme
        '
        Me.CbxObfuscatorScheme.ArrowColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.CbxObfuscatorScheme.BackColor = System.Drawing.Color.Transparent
        Me.CbxObfuscatorScheme.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.CbxObfuscatorScheme.BorderColour = System.Drawing.Color.DimGray
        Me.CbxObfuscatorScheme.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed
        Me.CbxObfuscatorScheme.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
        Me.CbxObfuscatorScheme.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.CbxObfuscatorScheme.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.CbxObfuscatorScheme.Items.AddRange(New Object() {"Alphabetic", "Dots", "Invisible", "Chinese", "Japanese", "Greek", "Symbols", "Flowing"})
        Me.CbxObfuscatorScheme.LineColour = System.Drawing.Color.BlueViolet
        Me.CbxObfuscatorScheme.Location = New System.Drawing.Point(140, 40)
        Me.CbxObfuscatorScheme.Name = "CbxObfuscatorScheme"
        Me.CbxObfuscatorScheme.Size = New System.Drawing.Size(97, 24)
        Me.CbxObfuscatorScheme.SqaureColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.CbxObfuscatorScheme.SqaureHoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.CbxObfuscatorScheme.TabIndex = 39
        '
        'LblObfuscatorScheme
        '
        Me.LblObfuscatorScheme.AutoSize = True
        Me.LblObfuscatorScheme.BackColor = System.Drawing.Color.Transparent
        Me.LblObfuscatorScheme.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblObfuscatorScheme.ForeColor = System.Drawing.Color.White
        Me.LblObfuscatorScheme.Location = New System.Drawing.Point(79, 43)
        Me.LblObfuscatorScheme.Name = "LblObfuscatorScheme"
        Me.LblObfuscatorScheme.Size = New System.Drawing.Size(55, 15)
        Me.LblObfuscatorScheme.TabIndex = 40
        Me.LblObfuscatorScheme.Text = "Scheme :"
        '
        'GbxObfuscatorAdvanced
        '
        Me.GbxObfuscatorAdvanced.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorInvalidMetadata)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorResourcesEncryption)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorInvalidOpcodes)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorAntiDumper)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorBooleanEncrypt)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorHideCalls)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorResourcesCompress)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorAntiTamper)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorAntiIlDasm)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorIntegersEncode)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorStringsEncrypt)
        Me.GbxObfuscatorAdvanced.Controls.Add(Me.ChbObfuscatorAntiDebug)
        Me.GbxObfuscatorAdvanced.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GbxObfuscatorAdvanced.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.GbxObfuscatorAdvanced.Location = New System.Drawing.Point(333, 0)
        Me.GbxObfuscatorAdvanced.MainColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.GbxObfuscatorAdvanced.Name = "GbxObfuscatorAdvanced"
        Me.GbxObfuscatorAdvanced.Size = New System.Drawing.Size(324, 281)
        Me.GbxObfuscatorAdvanced.TabIndex = 55
        Me.GbxObfuscatorAdvanced.Text = "Advanced"
        Me.GbxObfuscatorAdvanced.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'ChbObfuscatorInvalidMetadata
        '
        Me.ChbObfuscatorInvalidMetadata.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorInvalidMetadata.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorInvalidMetadata.Checked = True
        Me.ChbObfuscatorInvalidMetadata.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorInvalidMetadata.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorInvalidMetadata.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorInvalidMetadata.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorInvalidMetadata.Location = New System.Drawing.Point(164, 238)
        Me.ChbObfuscatorInvalidMetadata.Name = "ChbObfuscatorInvalidMetadata"
        Me.ChbObfuscatorInvalidMetadata.Size = New System.Drawing.Size(141, 22)
        Me.ChbObfuscatorInvalidMetadata.TabIndex = 63
        Me.ChbObfuscatorInvalidMetadata.Tag = "Parameters"
        Me.ChbObfuscatorInvalidMetadata.Text = "Invalid Metadatas"
        '
        'ChbObfuscatorResourcesEncryption
        '
        Me.ChbObfuscatorResourcesEncryption.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorResourcesEncryption.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorResourcesEncryption.Checked = True
        Me.ChbObfuscatorResourcesEncryption.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorResourcesEncryption.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorResourcesEncryption.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorResourcesEncryption.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorResourcesEncryption.Location = New System.Drawing.Point(12, 44)
        Me.ChbObfuscatorResourcesEncryption.Name = "ChbObfuscatorResourcesEncryption"
        Me.ChbObfuscatorResourcesEncryption.Size = New System.Drawing.Size(142, 22)
        Me.ChbObfuscatorResourcesEncryption.TabIndex = 62
        Me.ChbObfuscatorResourcesEncryption.Tag = "Parameters"
        Me.ChbObfuscatorResourcesEncryption.Text = "Resources encryption"
        '
        'ChbObfuscatorInvalidOpcodes
        '
        Me.ChbObfuscatorInvalidOpcodes.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorInvalidOpcodes.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorInvalidOpcodes.Checked = True
        Me.ChbObfuscatorInvalidOpcodes.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorInvalidOpcodes.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorInvalidOpcodes.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorInvalidOpcodes.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorInvalidOpcodes.Location = New System.Drawing.Point(12, 238)
        Me.ChbObfuscatorInvalidOpcodes.Name = "ChbObfuscatorInvalidOpcodes"
        Me.ChbObfuscatorInvalidOpcodes.Size = New System.Drawing.Size(141, 22)
        Me.ChbObfuscatorInvalidOpcodes.TabIndex = 61
        Me.ChbObfuscatorInvalidOpcodes.Tag = "Parameters"
        Me.ChbObfuscatorInvalidOpcodes.Text = "Invalid Opcodes"
        '
        'ChbObfuscatorAntiDumper
        '
        Me.ChbObfuscatorAntiDumper.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorAntiDumper.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorAntiDumper.Checked = True
        Me.ChbObfuscatorAntiDumper.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorAntiDumper.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorAntiDumper.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorAntiDumper.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorAntiDumper.Location = New System.Drawing.Point(12, 193)
        Me.ChbObfuscatorAntiDumper.Name = "ChbObfuscatorAntiDumper"
        Me.ChbObfuscatorAntiDumper.Size = New System.Drawing.Size(110, 22)
        Me.ChbObfuscatorAntiDumper.TabIndex = 57
        Me.ChbObfuscatorAntiDumper.Tag = "Parameters"
        Me.ChbObfuscatorAntiDumper.Text = "Anti-Dumper"
        '
        'ChbObfuscatorBooleanEncrypt
        '
        Me.ChbObfuscatorBooleanEncrypt.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorBooleanEncrypt.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorBooleanEncrypt.Checked = True
        Me.ChbObfuscatorBooleanEncrypt.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorBooleanEncrypt.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorBooleanEncrypt.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorBooleanEncrypt.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorBooleanEncrypt.Location = New System.Drawing.Point(164, 89)
        Me.ChbObfuscatorBooleanEncrypt.Name = "ChbObfuscatorBooleanEncrypt"
        Me.ChbObfuscatorBooleanEncrypt.Size = New System.Drawing.Size(141, 22)
        Me.ChbObfuscatorBooleanEncrypt.TabIndex = 56
        Me.ChbObfuscatorBooleanEncrypt.Tag = "Parameters"
        Me.ChbObfuscatorBooleanEncrypt.Text = "Booleans encryption"
        '
        'ChbObfuscatorHideCalls
        '
        Me.ChbObfuscatorHideCalls.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorHideCalls.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorHideCalls.Checked = True
        Me.ChbObfuscatorHideCalls.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorHideCalls.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorHideCalls.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorHideCalls.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorHideCalls.Location = New System.Drawing.Point(164, 118)
        Me.ChbObfuscatorHideCalls.Name = "ChbObfuscatorHideCalls"
        Me.ChbObfuscatorHideCalls.Size = New System.Drawing.Size(91, 22)
        Me.ChbObfuscatorHideCalls.TabIndex = 55
        Me.ChbObfuscatorHideCalls.Tag = "Parameters"
        Me.ChbObfuscatorHideCalls.Text = "Hide calls"
        '
        'ChbObfuscatorResourcesCompress
        '
        Me.ChbObfuscatorResourcesCompress.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorResourcesCompress.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorResourcesCompress.Checked = True
        Me.ChbObfuscatorResourcesCompress.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorResourcesCompress.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorResourcesCompress.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorResourcesCompress.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorResourcesCompress.Location = New System.Drawing.Point(164, 44)
        Me.ChbObfuscatorResourcesCompress.Name = "ChbObfuscatorResourcesCompress"
        Me.ChbObfuscatorResourcesCompress.Size = New System.Drawing.Size(156, 22)
        Me.ChbObfuscatorResourcesCompress.TabIndex = 51
        Me.ChbObfuscatorResourcesCompress.Tag = "Parameters"
        Me.ChbObfuscatorResourcesCompress.Text = "Resources compression"
        '
        'ChbObfuscatorAntiTamper
        '
        Me.ChbObfuscatorAntiTamper.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorAntiTamper.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorAntiTamper.Checked = True
        Me.ChbObfuscatorAntiTamper.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorAntiTamper.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorAntiTamper.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorAntiTamper.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorAntiTamper.Location = New System.Drawing.Point(164, 164)
        Me.ChbObfuscatorAntiTamper.Name = "ChbObfuscatorAntiTamper"
        Me.ChbObfuscatorAntiTamper.Size = New System.Drawing.Size(101, 22)
        Me.ChbObfuscatorAntiTamper.TabIndex = 52
        Me.ChbObfuscatorAntiTamper.Tag = "Parameters"
        Me.ChbObfuscatorAntiTamper.Text = "Anti-Tamper"
        '
        'ChbObfuscatorAntiIlDasm
        '
        Me.ChbObfuscatorAntiIlDasm.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorAntiIlDasm.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorAntiIlDasm.Checked = True
        Me.ChbObfuscatorAntiIlDasm.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorAntiIlDasm.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorAntiIlDasm.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorAntiIlDasm.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorAntiIlDasm.Location = New System.Drawing.Point(164, 193)
        Me.ChbObfuscatorAntiIlDasm.Name = "ChbObfuscatorAntiIlDasm"
        Me.ChbObfuscatorAntiIlDasm.Size = New System.Drawing.Size(100, 22)
        Me.ChbObfuscatorAntiIlDasm.TabIndex = 54
        Me.ChbObfuscatorAntiIlDasm.Tag = "Parameters"
        Me.ChbObfuscatorAntiIlDasm.Text = "Anti-ILDasm"
        '
        'ChbObfuscatorIntegersEncode
        '
        Me.ChbObfuscatorIntegersEncode.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorIntegersEncode.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorIntegersEncode.Checked = True
        Me.ChbObfuscatorIntegersEncode.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorIntegersEncode.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorIntegersEncode.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorIntegersEncode.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorIntegersEncode.Location = New System.Drawing.Point(12, 118)
        Me.ChbObfuscatorIntegersEncode.Name = "ChbObfuscatorIntegersEncode"
        Me.ChbObfuscatorIntegersEncode.Size = New System.Drawing.Size(142, 22)
        Me.ChbObfuscatorIntegersEncode.TabIndex = 50
        Me.ChbObfuscatorIntegersEncode.Tag = "Parameters"
        Me.ChbObfuscatorIntegersEncode.Text = "Numerics encoding"
        '
        'ChbObfuscatorStringsEncrypt
        '
        Me.ChbObfuscatorStringsEncrypt.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorStringsEncrypt.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorStringsEncrypt.Checked = True
        Me.ChbObfuscatorStringsEncrypt.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorStringsEncrypt.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorStringsEncrypt.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorStringsEncrypt.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorStringsEncrypt.Location = New System.Drawing.Point(12, 89)
        Me.ChbObfuscatorStringsEncrypt.Name = "ChbObfuscatorStringsEncrypt"
        Me.ChbObfuscatorStringsEncrypt.Size = New System.Drawing.Size(130, 22)
        Me.ChbObfuscatorStringsEncrypt.TabIndex = 49
        Me.ChbObfuscatorStringsEncrypt.Tag = "Parameters"
        Me.ChbObfuscatorStringsEncrypt.Text = "Strings encryption"
        '
        'ChbObfuscatorAntiDebug
        '
        Me.ChbObfuscatorAntiDebug.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorAntiDebug.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorAntiDebug.Checked = True
        Me.ChbObfuscatorAntiDebug.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorAntiDebug.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorAntiDebug.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorAntiDebug.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorAntiDebug.Location = New System.Drawing.Point(12, 164)
        Me.ChbObfuscatorAntiDebug.Name = "ChbObfuscatorAntiDebug"
        Me.ChbObfuscatorAntiDebug.Size = New System.Drawing.Size(94, 22)
        Me.ChbObfuscatorAntiDebug.TabIndex = 53
        Me.ChbObfuscatorAntiDebug.Tag = "Parameters"
        Me.ChbObfuscatorAntiDebug.Text = "Anti-Debug"
        '
        'ChbObfuscatorEnabled
        '
        Me.ChbObfuscatorEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbObfuscatorEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbObfuscatorEnabled.Checked = True
        Me.ChbObfuscatorEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbObfuscatorEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbObfuscatorEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbObfuscatorEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbObfuscatorEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbObfuscatorEnabled.Name = "ChbObfuscatorEnabled"
        Me.ChbObfuscatorEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbObfuscatorEnabled.TabIndex = 37
        Me.ChbObfuscatorEnabled.Tag = "Types"
        Me.ChbObfuscatorEnabled.Text = "Enabled"
        '
        'TpPacker
        '
        Me.TpPacker.BackColor = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.TpPacker.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TpPacker.Controls.Add(Me.LblPackerWarning)
        Me.TpPacker.Controls.Add(Me.PnlPackerEnabled)
        Me.TpPacker.Controls.Add(Me.ChbPackerEnabled)
        Me.TpPacker.Location = New System.Drawing.Point(4, 36)
        Me.TpPacker.Name = "TpPacker"
        Me.TpPacker.Padding = New System.Windows.Forms.Padding(3)
        Me.TpPacker.Size = New System.Drawing.Size(671, 326)
        Me.TpPacker.TabIndex = 4
        Me.TpPacker.Text = "Packer"
        '
        'LblPackerWarning
        '
        Me.LblPackerWarning.AutoSize = True
        Me.LblPackerWarning.BackColor = System.Drawing.Color.Transparent
        Me.LblPackerWarning.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblPackerWarning.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblPackerWarning.ForeColor = System.Drawing.Color.DarkOrange
        Me.LblPackerWarning.Location = New System.Drawing.Point(98, 9)
        Me.LblPackerWarning.Name = "LblPackerWarning"
        Me.LblPackerWarning.Size = New System.Drawing.Size(349, 15)
        Me.LblPackerWarning.TabIndex = 40
        Me.LblPackerWarning.Text = "(You must enable the detection of dependencies before packing)"
        Me.LblPackerWarning.Visible = False
        '
        'PnlPackerEnabled
        '
        Me.PnlPackerEnabled.Controls.Add(Me.GbxPackerLoader)
        Me.PnlPackerEnabled.Location = New System.Drawing.Point(6, 34)
        Me.PnlPackerEnabled.Name = "PnlPackerEnabled"
        Me.PnlPackerEnabled.Size = New System.Drawing.Size(657, 273)
        Me.PnlPackerEnabled.TabIndex = 39
        '
        'GbxPackerLoader
        '
        Me.GbxPackerLoader.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxPackerLoader.Controls.Add(Me.TxbPackerFramework)
        Me.GbxPackerLoader.Controls.Add(Me.LblPackerFramework)
        Me.GbxPackerLoader.Controls.Add(Me.LblPackerSystem)
        Me.GbxPackerLoader.Controls.Add(Me.LblPackerPlatform)
        Me.GbxPackerLoader.Controls.Add(Me.TxbPackerPlatform)
        Me.GbxPackerLoader.Controls.Add(Me.TxbPackerSystem)
        Me.GbxPackerLoader.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GbxPackerLoader.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.GbxPackerLoader.Location = New System.Drawing.Point(0, 0)
        Me.GbxPackerLoader.MainColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.GbxPackerLoader.Name = "GbxPackerLoader"
        Me.GbxPackerLoader.Size = New System.Drawing.Size(657, 93)
        Me.GbxPackerLoader.TabIndex = 62
        Me.GbxPackerLoader.Text = "Stub"
        Me.GbxPackerLoader.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'TxbPackerFramework
        '
        Me.TxbPackerFramework.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbPackerFramework.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbPackerFramework.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbPackerFramework.ForeColor = System.Drawing.Color.White
        Me.TxbPackerFramework.Location = New System.Drawing.Point(96, 47)
        Me.TxbPackerFramework.Name = "TxbPackerFramework"
        Me.TxbPackerFramework.ReadOnly = True
        Me.TxbPackerFramework.Size = New System.Drawing.Size(120, 25)
        Me.TxbPackerFramework.TabIndex = 63
        Me.TxbPackerFramework.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'LblPackerFramework
        '
        Me.LblPackerFramework.AutoSize = True
        Me.LblPackerFramework.BackColor = System.Drawing.Color.Transparent
        Me.LblPackerFramework.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblPackerFramework.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblPackerFramework.ForeColor = System.Drawing.Color.White
        Me.LblPackerFramework.Location = New System.Drawing.Point(18, 51)
        Me.LblPackerFramework.Name = "LblPackerFramework"
        Me.LblPackerFramework.Size = New System.Drawing.Size(72, 15)
        Me.LblPackerFramework.TabIndex = 11
        Me.LblPackerFramework.Text = "Framework :"
        '
        'LblPackerSystem
        '
        Me.LblPackerSystem.AutoSize = True
        Me.LblPackerSystem.BackColor = System.Drawing.Color.Transparent
        Me.LblPackerSystem.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblPackerSystem.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblPackerSystem.ForeColor = System.Drawing.Color.White
        Me.LblPackerSystem.Location = New System.Drawing.Point(237, 51)
        Me.LblPackerSystem.Name = "LblPackerSystem"
        Me.LblPackerSystem.Size = New System.Drawing.Size(56, 15)
        Me.LblPackerSystem.TabIndex = 12
        Me.LblPackerSystem.Text = "ExeType :"
        '
        'LblPackerPlatform
        '
        Me.LblPackerPlatform.AutoSize = True
        Me.LblPackerPlatform.BackColor = System.Drawing.Color.Transparent
        Me.LblPackerPlatform.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblPackerPlatform.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblPackerPlatform.ForeColor = System.Drawing.Color.White
        Me.LblPackerPlatform.Location = New System.Drawing.Point(445, 51)
        Me.LblPackerPlatform.Name = "LblPackerPlatform"
        Me.LblPackerPlatform.Size = New System.Drawing.Size(59, 15)
        Me.LblPackerPlatform.TabIndex = 13
        Me.LblPackerPlatform.Text = "Platform :"
        '
        'TxbPackerPlatform
        '
        Me.TxbPackerPlatform.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbPackerPlatform.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbPackerPlatform.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbPackerPlatform.ForeColor = System.Drawing.Color.White
        Me.TxbPackerPlatform.Location = New System.Drawing.Point(506, 47)
        Me.TxbPackerPlatform.Name = "TxbPackerPlatform"
        Me.TxbPackerPlatform.ReadOnly = True
        Me.TxbPackerPlatform.Size = New System.Drawing.Size(126, 25)
        Me.TxbPackerPlatform.TabIndex = 53
        Me.TxbPackerPlatform.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbPackerSystem
        '
        Me.TxbPackerSystem.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbPackerSystem.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbPackerSystem.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbPackerSystem.ForeColor = System.Drawing.Color.White
        Me.TxbPackerSystem.Location = New System.Drawing.Point(299, 47)
        Me.TxbPackerSystem.Name = "TxbPackerSystem"
        Me.TxbPackerSystem.ReadOnly = True
        Me.TxbPackerSystem.Size = New System.Drawing.Size(126, 25)
        Me.TxbPackerSystem.TabIndex = 52
        Me.TxbPackerSystem.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'ChbPackerEnabled
        '
        Me.ChbPackerEnabled.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.ChbPackerEnabled.BorderColour = System.Drawing.Color.DimGray
        Me.ChbPackerEnabled.Checked = False
        Me.ChbPackerEnabled.CheckedColour = System.Drawing.Color.BlueViolet
        Me.ChbPackerEnabled.Cursor = System.Windows.Forms.Cursors.Hand
        Me.ChbPackerEnabled.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.ChbPackerEnabled.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.ChbPackerEnabled.Location = New System.Drawing.Point(6, 6)
        Me.ChbPackerEnabled.Name = "ChbPackerEnabled"
        Me.ChbPackerEnabled.Size = New System.Drawing.Size(86, 22)
        Me.ChbPackerEnabled.TabIndex = 8
        Me.ChbPackerEnabled.Tag = "Types"
        Me.ChbPackerEnabled.Text = "Enabled"
        '
        'GbxDetection
        '
        Me.GbxDetection.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxDetection.Controls.Add(Me.PcbDetection)
        Me.GbxDetection.Controls.Add(Me.TxbDetection)
        Me.GbxDetection.Controls.Add(Me.LblDetection)
        Me.GbxDetection.Enabled = False
        Me.GbxDetection.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GbxDetection.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.GbxDetection.Location = New System.Drawing.Point(12, 154)
        Me.GbxDetection.MainColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.GbxDetection.Name = "GbxDetection"
        Me.GbxDetection.Size = New System.Drawing.Size(679, 95)
        Me.GbxDetection.TabIndex = 15
        Me.GbxDetection.Text = "Obfuscator/Packer detection"
        Me.GbxDetection.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'PcbDetection
        '
        Me.PcbDetection.BackColor = System.Drawing.Color.Transparent
        Me.PcbDetection.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.PcbDetection.Location = New System.Drawing.Point(605, 36)
        Me.PcbDetection.Name = "PcbDetection"
        Me.PcbDetection.Size = New System.Drawing.Size(48, 48)
        Me.PcbDetection.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
        Me.PcbDetection.TabIndex = 15
        Me.PcbDetection.TabStop = False
        '
        'TxbDetection
        '
        Me.TxbDetection.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbDetection.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbDetection.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbDetection.ForeColor = System.Drawing.Color.White
        Me.TxbDetection.Location = New System.Drawing.Point(103, 46)
        Me.TxbDetection.Name = "TxbDetection"
        Me.TxbDetection.ReadOnly = True
        Me.TxbDetection.Size = New System.Drawing.Size(484, 25)
        Me.TxbDetection.TabIndex = 9
        Me.TxbDetection.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'LblDetection
        '
        Me.LblDetection.AutoSize = True
        Me.LblDetection.BackColor = System.Drawing.Color.Transparent
        Me.LblDetection.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblDetection.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblDetection.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblDetection.Location = New System.Drawing.Point(52, 50)
        Me.LblDetection.Name = "LblDetection"
        Me.LblDetection.Size = New System.Drawing.Size(45, 15)
        Me.LblDetection.TabIndex = 2
        Me.LblDetection.Text = "Result :"
        '
        'GbxSelectFile
        '
        Me.GbxSelectFile.BorderColour = System.Drawing.SystemColors.ButtonShadow
        Me.GbxSelectFile.Controls.Add(Me.LblType)
        Me.GbxSelectFile.Controls.Add(Me.TxbSelectedFile)
        Me.GbxSelectFile.Controls.Add(Me.TxbType)
        Me.GbxSelectFile.Controls.Add(Me.PbxSelectedFile)
        Me.GbxSelectFile.Controls.Add(Me.LblCpuTargetInfo)
        Me.GbxSelectFile.Controls.Add(Me.BtnSelectFile)
        Me.GbxSelectFile.Controls.Add(Me.TxbCpuTargetInfo)
        Me.GbxSelectFile.Controls.Add(Me.LblVersionInfo)
        Me.GbxSelectFile.Controls.Add(Me.TxbFrameworkInfo)
        Me.GbxSelectFile.Controls.Add(Me.TxbVersionInfo)
        Me.GbxSelectFile.Controls.Add(Me.LblFrameworkInfo)
        Me.GbxSelectFile.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GbxSelectFile.HeaderColour = System.Drawing.Color.FromArgb(CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer), CType(CType(30, Byte), Integer))
        Me.GbxSelectFile.Location = New System.Drawing.Point(12, 46)
        Me.GbxSelectFile.MainColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.GbxSelectFile.Name = "GbxSelectFile"
        Me.GbxSelectFile.Size = New System.Drawing.Size(679, 102)
        Me.GbxSelectFile.TabIndex = 1
        Me.GbxSelectFile.Text = "Select .Net file (C#, VbNet)"
        Me.GbxSelectFile.TextColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        '
        'LblType
        '
        Me.LblType.AutoSize = True
        Me.LblType.BackColor = System.Drawing.Color.Transparent
        Me.LblType.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblType.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblType.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblType.Location = New System.Drawing.Point(472, 72)
        Me.LblType.Name = "LblType"
        Me.LblType.Size = New System.Drawing.Size(39, 15)
        Me.LblType.TabIndex = 13
        Me.LblType.Text = "Type :"
        '
        'TxbSelectedFile
        '
        Me.TxbSelectedFile.AllowDrop = True
        Me.TxbSelectedFile.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbSelectedFile.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbSelectedFile.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbSelectedFile.ForeColor = System.Drawing.Color.White
        Me.TxbSelectedFile.Location = New System.Drawing.Point(103, 37)
        Me.TxbSelectedFile.Name = "TxbSelectedFile"
        Me.TxbSelectedFile.ReadOnly = True
        Me.TxbSelectedFile.Size = New System.Drawing.Size(484, 25)
        Me.TxbSelectedFile.TabIndex = 10
        Me.TxbSelectedFile.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbType
        '
        Me.TxbType.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbType.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbType.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbType.ForeColor = System.Drawing.Color.White
        Me.TxbType.Location = New System.Drawing.Point(517, 68)
        Me.TxbType.Name = "TxbType"
        Me.TxbType.ReadOnly = True
        Me.TxbType.Size = New System.Drawing.Size(70, 25)
        Me.TxbType.TabIndex = 14
        Me.TxbType.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'PbxSelectedFile
        '
        Me.PbxSelectedFile.BackColor = System.Drawing.Color.Transparent
        Me.PbxSelectedFile.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.PbxSelectedFile.Location = New System.Drawing.Point(605, 39)
        Me.PbxSelectedFile.Name = "PbxSelectedFile"
        Me.PbxSelectedFile.Size = New System.Drawing.Size(48, 48)
        Me.PbxSelectedFile.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
        Me.PbxSelectedFile.TabIndex = 2
        Me.PbxSelectedFile.TabStop = False
        '
        'LblCpuTargetInfo
        '
        Me.LblCpuTargetInfo.AutoSize = True
        Me.LblCpuTargetInfo.BackColor = System.Drawing.Color.Transparent
        Me.LblCpuTargetInfo.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblCpuTargetInfo.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblCpuTargetInfo.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblCpuTargetInfo.Location = New System.Drawing.Point(326, 72)
        Me.LblCpuTargetInfo.Name = "LblCpuTargetInfo"
        Me.LblCpuTargetInfo.Size = New System.Drawing.Size(70, 15)
        Me.LblCpuTargetInfo.TabIndex = 6
        Me.LblCpuTargetInfo.Text = "CPU target :"
        '
        'BtnSelectFile
        '
        Me.BtnSelectFile.BackColor = System.Drawing.Color.Transparent
        Me.BtnSelectFile.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnSelectFile.BorderColour = System.Drawing.Color.DimGray
        Me.BtnSelectFile.Font = New System.Drawing.Font("Segoe UI", 10.0!)
        Me.BtnSelectFile.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnSelectFile.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnSelectFile.Location = New System.Drawing.Point(22, 37)
        Me.BtnSelectFile.Name = "BtnSelectFile"
        Me.BtnSelectFile.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnSelectFile.ProgressColour = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(191, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.BtnSelectFile.Size = New System.Drawing.Size(75, 25)
        Me.BtnSelectFile.TabIndex = 0
        Me.BtnSelectFile.Text = "Browse"
        '
        'TxbCpuTargetInfo
        '
        Me.TxbCpuTargetInfo.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbCpuTargetInfo.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbCpuTargetInfo.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbCpuTargetInfo.ForeColor = System.Drawing.Color.White
        Me.TxbCpuTargetInfo.Location = New System.Drawing.Point(402, 68)
        Me.TxbCpuTargetInfo.Name = "TxbCpuTargetInfo"
        Me.TxbCpuTargetInfo.ReadOnly = True
        Me.TxbCpuTargetInfo.Size = New System.Drawing.Size(65, 25)
        Me.TxbCpuTargetInfo.TabIndex = 12
        Me.TxbCpuTargetInfo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'LblVersionInfo
        '
        Me.LblVersionInfo.AutoSize = True
        Me.LblVersionInfo.BackColor = System.Drawing.Color.Transparent
        Me.LblVersionInfo.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblVersionInfo.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfo.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblVersionInfo.Location = New System.Drawing.Point(45, 72)
        Me.LblVersionInfo.Name = "LblVersionInfo"
        Me.LblVersionInfo.Size = New System.Drawing.Size(52, 15)
        Me.LblVersionInfo.TabIndex = 4
        Me.LblVersionInfo.Text = "Version :"
        '
        'TxbFrameworkInfo
        '
        Me.TxbFrameworkInfo.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbFrameworkInfo.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbFrameworkInfo.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbFrameworkInfo.ForeColor = System.Drawing.Color.White
        Me.TxbFrameworkInfo.Location = New System.Drawing.Point(252, 68)
        Me.TxbFrameworkInfo.Name = "TxbFrameworkInfo"
        Me.TxbFrameworkInfo.ReadOnly = True
        Me.TxbFrameworkInfo.Size = New System.Drawing.Size(65, 25)
        Me.TxbFrameworkInfo.TabIndex = 11
        Me.TxbFrameworkInfo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'TxbVersionInfo
        '
        Me.TxbVersionInfo.BackColor = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.TxbVersionInfo.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.TxbVersionInfo.Font = New System.Drawing.Font("Segoe UI", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxbVersionInfo.ForeColor = System.Drawing.Color.White
        Me.TxbVersionInfo.Location = New System.Drawing.Point(103, 68)
        Me.TxbVersionInfo.Name = "TxbVersionInfo"
        Me.TxbVersionInfo.ReadOnly = True
        Me.TxbVersionInfo.Size = New System.Drawing.Size(65, 25)
        Me.TxbVersionInfo.TabIndex = 10
        Me.TxbVersionInfo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
        '
        'LblFrameworkInfo
        '
        Me.LblFrameworkInfo.AutoSize = True
        Me.LblFrameworkInfo.BackColor = System.Drawing.Color.Transparent
        Me.LblFrameworkInfo.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblFrameworkInfo.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblFrameworkInfo.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblFrameworkInfo.Location = New System.Drawing.Point(174, 72)
        Me.LblFrameworkInfo.Name = "LblFrameworkInfo"
        Me.LblFrameworkInfo.Size = New System.Drawing.Size(72, 15)
        Me.LblFrameworkInfo.TabIndex = 8
        Me.LblFrameworkInfo.Text = "Framework :"
        '
        'Frm_Main
        '
        Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.ClientSize = New System.Drawing.Size(704, 697)
        Me.Controls.Add(Me.Frm_MainThemeContainer)
        Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None
        Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
        Me.MaximizeBox = False
        Me.Name = "Frm_Main"
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
        Me.Text = "DotNet Patcher"
        Me.TransparencyKey = System.Drawing.Color.Fuchsia
        Me.Frm_MainThemeContainer.ResumeLayout(False)
        Me.Frm_MainThemeContainer.PerformLayout()
        Me.TbcTask.ResumeLayout(False)
        Me.TpAbout.ResumeLayout(False)
        Me.TpAbout.PerformLayout()
        CType(Me.PbxAboutLogo, System.ComponentModel.ISupportInitialize).EndInit()
        Me.TpVersionInfos.ResumeLayout(False)
        Me.PnlVersionInfosEnabled.ResumeLayout(False)
        Me.PnlVersionInfosEnabled.PerformLayout()
        Me.TpManifestChanger.ResumeLayout(False)
        Me.PnlManifestEnabled.ResumeLayout(False)
        Me.TpIconChanger.ResumeLayout(False)
        Me.PnlIconChangerEnabled.ResumeLayout(False)
        Me.PnlIconChangerEnabled.PerformLayout()
        CType(Me.PbxIconChangerSelect, System.ComponentModel.ISupportInitialize).EndInit()
        Me.TpDependencies.ResumeLayout(False)
        Me.TpDependencies.PerformLayout()
        Me.PnlDependenciesEnabled.ResumeLayout(False)
        Me.TpObfuscator.ResumeLayout(False)
        Me.PnlObfuscatorEnabled.ResumeLayout(False)
        Me.GbxObfuscatorRenaming.ResumeLayout(False)
        Me.GbxObfuscatorRenaming.PerformLayout()
        Me.PnlObfuscatorNamespacesGroup.ResumeLayout(False)
        Me.GbxObfuscatorAdvanced.ResumeLayout(False)
        Me.TpPacker.ResumeLayout(False)
        Me.TpPacker.PerformLayout()
        Me.PnlPackerEnabled.ResumeLayout(False)
        Me.GbxPackerLoader.ResumeLayout(False)
        Me.GbxPackerLoader.PerformLayout()
        Me.GbxDetection.ResumeLayout(False)
        Me.GbxDetection.PerformLayout()
        CType(Me.PcbDetection, System.ComponentModel.ISupportInitialize).EndInit()
        Me.GbxSelectFile.ResumeLayout(False)
        Me.GbxSelectFile.PerformLayout()
        CType(Me.PbxSelectedFile, System.ComponentModel.ISupportInitialize).EndInit()
        Me.ResumeLayout(False)

    End Sub
    Friend WithEvents Frm_MainThemeContainer As LogInThemeContainer
    Friend WithEvents GbxSelectFile As LogInGroupBox
    Friend WithEvents BtnSelectFile As LogInButton
    Friend WithEvents PbxSelectedFile As System.Windows.Forms.PictureBox
    Friend WithEvents LblCpuTargetInfo As LogInLabel
    Friend WithEvents LblVersionInfo As LogInLabel
    Friend WithEvents LblFrameworkInfo As LogInLabel
    Friend WithEvents TxbCpuTargetInfo As System.Windows.Forms.TextBox
    Friend WithEvents TxbFrameworkInfo As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfo As System.Windows.Forms.TextBox
    Friend WithEvents TxbSelectedFile As System.Windows.Forms.TextBox
    Friend WithEvents BtnStart As LogInButton
    Friend WithEvents LblType As LogInLabel
    Friend WithEvents TxbType As System.Windows.Forms.TextBox
    Friend WithEvents BgwRenameTask As System.ComponentModel.BackgroundWorker
    Friend WithEvents GbxDetection As LogInGroupBox
    Friend WithEvents TxbDetection As System.Windows.Forms.TextBox
    Friend WithEvents LblDetection As LogInLabel
    Friend WithEvents TbcTask As LogInTabControl
    Friend WithEvents TpAbout As System.Windows.Forms.TabPage
    Friend WithEvents TpVersionInfos As System.Windows.Forms.TabPage
    Friend WithEvents TpDependencies As System.Windows.Forms.TabPage
    Friend WithEvents TpManifestChanger As System.Windows.Forms.TabPage
    Friend WithEvents TpPacker As System.Windows.Forms.TabPage
    Friend WithEvents TpObfuscator As System.Windows.Forms.TabPage
    Friend WithEvents TpIconChanger As System.Windows.Forms.TabPage
    Friend WithEvents PbxAboutLogo As System.Windows.Forms.PictureBox
    Friend WithEvents ChbVersionInfosEnabled As LogInCheckBox
    Friend WithEvents PnlVersionInfosEnabled As System.Windows.Forms.Panel
    Friend WithEvents TxbVersionInfosVersion As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosTrademark As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosCopyright As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosProduct As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosCompany As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosDescription As System.Windows.Forms.TextBox
    Friend WithEvents TxbVersionInfosTitle As System.Windows.Forms.TextBox
    Friend WithEvents ChbObfuscatorEnabled As LogInCheckBox
    Friend WithEvents ChbPackerEnabled As LogInCheckBox
    Friend WithEvents ChbIconChangerEnabled As LogInCheckBox
    Friend WithEvents PnlObfuscatorEnabled As System.Windows.Forms.Panel
    Friend WithEvents ChbObfuscatorNamespacesRP As LogInCheckBox
    Friend WithEvents ChbObfuscatorTypesRP As LogInCheckBox
    Friend WithEvents ChbObfuscatorMethodsRP As LogInCheckBox
    Friend WithEvents ChbObfuscatorEventsRP As LogInCheckBox
    Friend WithEvents ChbObfuscatorFieldsRP As LogInCheckBox
    Friend WithEvents ChbObfuscatorAttributesRP As LogInCheckBox
    Friend WithEvents LblObfuscatorScheme As System.Windows.Forms.Label
    Friend WithEvents CbxObfuscatorScheme As LogInComboBox
    Friend WithEvents ChbObfuscatorResourcesCompress As LogInCheckBox
    Friend WithEvents GbxObfuscatorAdvanced As LogInGroupBox
    Friend WithEvents ChbObfuscatorAntiIlDasm As LogInCheckBox
    Friend WithEvents ChbObfuscatorStringsEncrypt As LogInCheckBox
    Friend WithEvents ChbObfuscatorAntiDebug As LogInCheckBox
    Friend WithEvents ChbObfuscatorIntegersEncode As LogInCheckBox
    Friend WithEvents ChbObfuscatorAntiTamper As LogInCheckBox
    Friend WithEvents GbxObfuscatorRenaming As LogInGroupBox
    Friend WithEvents ChbObfuscatorPropertiesRP As LogInCheckBox
    Friend WithEvents PnlObfuscatorNamespacesGroup As System.Windows.Forms.Panel
    Friend WithEvents ChbObfuscatorReplaceNamespaceByEmptyNamespaces As LogInCheckBox
    Friend WithEvents ChbObfuscatorRenameMainNamespaceOnlyNamespaces As LogInCheckBox
    Friend WithEvents ChbObfuscatorBooleanEncrypt As LogInCheckBox
    Friend WithEvents ChbObfuscatorHideCalls As LogInCheckBox
    Friend WithEvents PnlPackerEnabled As System.Windows.Forms.Panel
    Friend WithEvents PnlIconChangerEnabled As System.Windows.Forms.Panel
    Friend WithEvents LblAboutWebsite As LogInLabel
    Friend WithEvents LblAboutDevelopBy As LogInLabel
    Friend WithEvents LblAboutVersion As LogInLabel
    Friend WithEvents LblAboutCredits As LogInLabel
    Friend WithEvents LblVersionInfosVersion As LogInLabel
    Friend WithEvents LblVersionInfosTitle As LogInLabel
    Friend WithEvents LblVersionInfosDescription As LogInLabel
    Friend WithEvents LblVersionInfosCompany As LogInLabel
    Friend WithEvents LblVersionInfosProduct As LogInLabel
    Friend WithEvents LblVersionInfosCopyright As LogInLabel
    Friend WithEvents LblVersionInfosTrademark As LogInLabel
    Friend WithEvents ChbObfuscatorAntiDumper As LogInCheckBox
    Friend WithEvents ChbObfuscatorInvalidOpcodes As LogInCheckBox
    Friend WithEvents ChbObfuscatorResourcesEncryption As XertzLoginTheme.LogInCheckBox
    Friend WithEvents LblPackerPlatform As XertzLoginTheme.LogInLabel
    Friend WithEvents LblPackerSystem As XertzLoginTheme.LogInLabel
    Friend WithEvents LblPackerFramework As XertzLoginTheme.LogInLabel
    Friend WithEvents TxbPackerPlatform As System.Windows.Forms.TextBox
    Friend WithEvents TxbPackerSystem As System.Windows.Forms.TextBox
    Friend WithEvents ChbManifestEnabled As XertzLoginTheme.LogInCheckBox
    Friend WithEvents PnlManifestEnabled As System.Windows.Forms.Panel
    Friend WithEvents RdbManifestChangerHighestAvailable As XertzLoginTheme.LogInRadioButton
    Friend WithEvents RdbManifestChangerRequireAdministrator As XertzLoginTheme.LogInRadioButton
    Friend WithEvents RdbManifestChangerAsInvoker As XertzLoginTheme.LogInRadioButton
    Friend WithEvents TxbIconChangerSelect As System.Windows.Forms.TextBox
    Friend WithEvents BtnIconChangerSelect As XertzLoginTheme.LogInButton
    Friend WithEvents PbxIconChangerSelect As System.Windows.Forms.PictureBox
    Friend WithEvents PnlDependenciesEnabled As System.Windows.Forms.Panel
    Friend WithEvents BtnDependenciesDelete As XertzLoginTheme.LogInButton
    Friend WithEvents BtnDependenciesAdd As XertzLoginTheme.LogInButton
    Friend WithEvents LbxDependenciesAdd As XertzLoginTheme.LogInListbox
    Friend WithEvents ChbDependenciesEnabled As XertzLoginTheme.LogInCheckBox
    Friend WithEvents LblDNR_DevelopBy As XertzLoginTheme.LogInLabel
    Friend WithEvents LblDNR_Version As XertzLoginTheme.LogInLabel
    Friend WithEvents LblWebSite As XertzLoginTheme.LogInLabel
    Friend WithEvents PgbStart As XertzLoginTheme.TextProgressBar
    Friend WithEvents GbxPackerLoader As XertzLoginTheme.LogInGroupBox
    Friend WithEvents PcbDetection As System.Windows.Forms.PictureBox
    Friend WithEvents LnkLblBlogSpot As System.Windows.Forms.LinkLabel
    Friend WithEvents ChbObfuscatorResourcesContent As XertzLoginTheme.LogInCheckBox
    Friend WithEvents LblAboutCredits1 As XertzLoginTheme.LogInLabel
    Friend WithEvents BtnExclusion As XertzLoginTheme.LogInButton
    Friend WithEvents CbxDependenciesEmbedded As LoginTheme.XertzLoginTheme.LogInComboBox
    Friend WithEvents RdbDependenciesEmbedded As LoginTheme.XertzLoginTheme.LogInRadioButton
    Friend WithEvents RdbDependenciesMerged As LoginTheme.XertzLoginTheme.LogInRadioButton
    Friend WithEvents LblPackerWarning As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents LblDependenciesWarning As LoginTheme.XertzLoginTheme.LogInLabel
    Friend WithEvents TxbPackerFramework As System.Windows.Forms.TextBox
    Friend WithEvents ChbObfuscatorInvalidMetadata As LoginTheme.XertzLoginTheme.LogInCheckBox
    Friend WithEvents ChbObfuscatorExcludeReflection As LoginTheme.XertzLoginTheme.LogInCheckBox
End Class



================================================
File: DotNetPatcher/Frm_Main.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="BgwRenameTask.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAoAMDAQAAEABABoBgAApgAAACAgEAABAAQA6AIAAA4HAAAQEBAAAQAEACgBAAD2CQAAMDAAAAEA
        CACoDgAAHgsAACAgAAABAAgAqAgAAMYZAAAQEAAAAQAIAGgFAABuIgAAgIAAAAEAIAAoCAEA1icAADAw
        AAABACAAqCUAAP4vAQAgIAAAAQAgAKgQAACmVQEAEBAAAAEAIABoBAAATmYBACgAAAAwAAAAYAAAAAEA
        BAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDA
        wAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////cAAA
        AAAAAAAAAAAA//////////////j49wAAAAAAAAAAAAAA//j/+P/////////4j3AAAAAAAAAAAAAA//iI
        iIiIj4iPiIf4iIgAAAAAAAAAAAAA+P////////////+IiPiAAAAAAAAAAAAA///4///4/////4//+I+I
        AAAAAAAAAAAA//iIiIiIj4iIiIiIeI+IgAAAAAAAAAAA//+P////+P////+PiI//iAAAAAAAAAAA/4//
        //j/////////+I//iIAAAAAAAAAA////iI+IiIiIiIiIiIiI+IgAAAAAAAAA////+P/////////4+PiI
        iPhwAAAAAAAA/4/4//+Pj///////////+Pj3AAAAAAAA//iIiIiIiPiIiIiIiPj4/4//AAAAAAAA////
        ////////j///////j/+PAAAAAAAA+P+P//////////////+P////AAAAAAAA//iIiIj//4//////////
        /4//AAAAAAAA//////+P+I2P////+I//////AAAAAAAA+P+P+I2P+ImP////+NiP////AAAAAAAA////
        jYeP//2I////+ImI////AAAAAAAA/4+Hd4j///iYj/////jX2P//AAAAAAAA//jXiIj4//+NiP/////4
        mI//AAAAAAAA+PiYj////4/3eP+P///4iY//AAAAAAAA//iNfY+Ij/j414j/iIiJ3///AAAAAAAA//iI
        h3iI+P+Ph9j4+I2I+P//AAAAAAAA+P//+I2P////+Ij/+IiP//+PAAAAAAAA//iIj4iIiIiIiH2PiIiP
        j4//AAAAAAAA+PiPiIiI+I+P+I+PiI+P////AAAAAAAA////////////////////////AAAAAAAA+P+P
        j4iIiIiI+Pj4j///j///AAAAAAAA//j/iP+PiP+Pj4j4iP////j/AAAAAAAA+P///4////////////+P
        ////AAAAAAAA//iIiIiIj4iI////////////AAAAAAAA+PiPj4+PiPj/j4/4/4//j/j/AAAAAAAA/4//
        /4//////////////////AAAAAAAA+PiIiPj4/4/4/4/4//j/j/+PAAAAAAAA//j4j4//j///////+P//
        /4//AAAAAAAA+P+P/4+P/4+Pj4+P//+P////AAAAAAAA/4//j//4////////j///j/j/AAAAAAAA+Pj4
        /4+P+Pj4+Pj//4+P////AAAAAAAA/4iIiIiIiIiIj4+I+IiIiI+PAAAAAAAA+P+PiP/4/4//j4+I/4//
        ////AAAAAAAA//j///j///+P/////////4//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////AAD///////8AAP//
        /////wAA/AAAAf//AAD8AAAA//8AAPwAAAB//wAA/AAAAD//AAD8AAAAH/8AAPwAAAAP/wAA/AAAAAf/
        AAD8AAAAA/8AAPwAAAAB/wAA/AAAAAD/AAD8AAAAAH8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA////////AAD///////8AAP//
        /////wAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACA
        gACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////9wAAAAAAAAAP////////+PiAAAAAAAAAD/iIiI
        +I+IiIiAAAAAAAAA//////////+I9wAAAAAAAP+IiIj4iI+IiPiAAAAAAAD//////////4j/iAAAAAAA
        /4+PiIj4j4iIiIiAAAAAAP/////////////4iAAAAAD/iPiIj4iPiP+Pj/8AAAAA///////////////4
        AAAAAPiIiP/4///////4/wAAAAD///9/+N////eP//8AAAAA//iNj/iH///42I//AAAAAP+NiI//h4//
        //iY/wAAAAD4h4j///jY//+I2P8AAAAA/4iHiI+IiI+I2I//AAAAAP//iN///4iI+I///wAAAAD4iIiI
        iIiIiIiPj/8AAAAA////////////////AAAAAPj/iIiIiIiIj///jwAAAAD/j///////////j/8AAAAA
        /4iIiIiI////j///AAAAAPj///////j/j////wAAAAD/iIiPj///////j/gAAAAA+P+P//+Pj4/4////
        AAAAAPj4/4+P//////j4/wAAAAD4iIj4iIiIiPiPj48AAAAA////j//////4////AAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AAA//wAAH/8AAA//AAAH/wAAA/8AAAH/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAAAAAgAAAAAQAEAAAAAACAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8A
        AAD/AP8A//8AAP///wAAAAAAAAAAAAD/////cAAAAPj4/4+IAAAA/4/4+I9wAAD/+P//iPgAAPj/j4//
        +AAA/4j4/4//AAD4j/j/+I8AAPiIiIiIjwAA+Ij4j4j/AAD/+P+P//8AAPiPj/+P/wAA+P/4//+PAAD/
        j4/4//8AAI+Pj4+PjwAAAAAAAAAAAP//AADAHwAAwA8AAMAHAADAAwAAwAMAAMADAADAAwAAwAMAAMAD
        AADAAwAAwAMAAMADAADAAwAAwAMAAP//AAAoAAAAMAAAAGAAAAABAAgAAAAAAAAJAAAAAAAAAAAAAAAB
        AAAAAQAAAAAAAJFV6ACUWegAll3pAJhf6QCfbeYAmmLqAJtk6gCcZuoAnWjqAKBt6wCibuwAoHDlAKZ5
        5wCicOoApHPqAKV06wCkcuwApnbsAKh37gCpeu0Aq33tAJqamgCdnZ0AoaGhAKWlpQCpqakAr6+vALGx
        sQC2trYAuLi3ALm5uQC8vLsAvb29AK6V0QC0ld8AtZvaAL2s1QC6o9wAvafdAL+z0QCrguYArYXkAK6C
        7gCwh+sAtY3uALmS7wC8me4Ato3wALqV8ADHuNwAwJ7xAMGk6QDAoewAw6TuAMOq6ADIr+oAy7TqAMy0
        7QDCofEAxabxAMeq8ADIqvMAyq3yAM+28wDNsvQA0LbzANG49QDBwcEAxMTDAMXFxQDJyckAzMzLAM3N
        zQDQ0M8AzsnVAM7E2gDMwdwAz8XcANPO2gDR0dEA1NTTANXV1QDY2NcA2dnZANzb2wDc3NsA29vcAN3d
        3QDg4N8A0sPoAN3b4QDezfYA4d7lAOLW9ADo3fcA5Nf4AOjc+ADi4uEA5OTjAOXl5QDo5+YA6OjnAOjj
        7wDp6ekA7OzrAO3t7QDw7+8A8PDvAOni8wDs5fYA7OnxAO/s8wDu6fUA7+f6APDq+QDz7/kA9O77APTu
        /ADx8fEA9PTzAPX19QD4+PcA9fL5APf0+wD39PwA+Pb6APj1/AD5+fkA/f39AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICA
        gHl5aBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAgICAgICAgICAeWhoaFEXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIB5gICAgIB5gICAgICAgICAgICAeXloZFFRGAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIB5eVEhRkZGUVFTR0eAU1NHgGhRIRxoIRghURkAAAAAAAAAAAAAAAAAAAAAAAAAAIB5gHloeXlo
        gHl5aICAaHqAgHloaGhoUVNGWVEaAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAaICAgICAgICA
        eXloaGRGU2RRGgAAAAAAAAAAAAAAAAAAAAAAAIB5gFFGHEZGR0ZHRlNTSkZGRlFHUVEhGhoYHHlkURwA
        AAAAAAAAAAAAAAAAAAAAAIB5eXlkeXl5aHl5eXloaHmAaIB5eWhTaGRKHIB6ZFEZAAAAAAAAAAAAAAAA
        AAAAAIB5eYCAenqAgICAgICAgICAgICAgHl5aGhTIYCAeWRKGQAAAAAAAAAAAAAAAAAAAIB5eYCAgFFR
        UVFGRkdGRkdRR1FTU1FTRBpERyEhR1NkShcAAAAAAAAAAAAAAAAAAIB5eYCAgHlkcHl5eXloeYB5eXmA
        aGZ5aGhmZFNTUUpHU0cXAAAAAAAAAAAAAAAAAIB5eYB5gHqAgHloaICAgICAgICAgICAeXlwaHloZmRk
        WWRRFwAAAAAAAAAAAAAAAIB5eVFHR1FGRkdRISFHeVNHR0YhU2RHR0doeWhsaGhoaGhoaAAAAAAAAAAA
        AAAAAIB5eXloeXloaIB5eXl5gHmAgHmAgHl5eXl5eXl5eWh5a3lweQAAAAAAAAAAAAAAAIB5eXl5eXmA
        gICAgICAgICAgICAgICAgICAgHl5eXl5cGx5egAAAAAAAAAAAAAAAIB5eVFGIUZHUWSAgICAgICAgICA
        gICAgICAgICAeXl5eXp5gAAAAAAAAAAAAAAAAHp5eWhseWh5eV5CgIBDCxFhgICAgICAgIBDYICAgICA
        gICAgAAAAAAAAAAAAAAAAHl5eXl5eYBuLwsugIB2EQMVf4CAgICAgIAwBi52gICAgICAgAAAAAAAAAAA
        AAAAAIB5eXl5cDwLBitcgICAbgYDPICAgICAgIBgFAMEPHqAgICAgAAAAAAAAAAAAAAAAHl5eVk4EQYM
        J1lwgICAgEIGBlyAgICAgICAf0MLAQlDf4CAgAAAAAAAAAAAAAAAAHlseSMGCzRKWVRkgICAgH8uBhR2
        gICAgICAgIB/PgQBPICAgAAAAAAAAAAAAAAAAHl5azQGCT5uenp5gICAgIB2FQsugICAgICAgIB6PgkB
        O4CAgAAAAAAAAAAAAAAAAHlseVkiCQYROHBkU2RTgGRZWhELQGiAeWRTZjoTCQs0a4CAgAAAAAAAAAAA
        AAAAAHl5aFNHUy8JBg0lUVNZemRZcD4REU6AZFMyKwsRPG5oeYCAgAAAAAAAAAAAAAAAAHlseXlreXlu
        LwYweoB6gICAgHouFTB6f4A8ET5ygICAgICAgAAAAAAAAAAAAAAAAHlraGRTSlFRUygkRmhTUVNTU2RM
        Kiw6aGYnTFNmaGhof4CAgAAAAAAAAAAAAAAAAHl5bFFGR1FTUVFTUVNER1NTU1NRU1NZZEdUU2ZZaGho
        eYCAgAAAAAAAAAAAAAAAAHloeWh5eXl5eXl5eYB5gHqAgIB/gICAgICAgICAgICAgICAgAAAAAAAAAAA
        AAAAAHloeWx5aGRkZFNTUWRRUVNTU2ZkaHBsU1NogICAgICAgICAgAAAAAAAAAAAAAAAAHlobGhseVFE
        UVNRUUdKU1NTU1NmUVFkU0pTgICAgICAgICAgAAAAAAAAAAAAAAAAHlobGxoeWh5eXl5eXl5eXp6enp5
        eXl6gICAgICAgICAgICAgAAAAAAAAAAAAAAAAHlobFlTUVNTR1FRU1FkZGRTWWiAeXp6enqAgICAgICA
        gICAgAAAAAAAAAAAAAAAAHloaFFHU1NHR1FHUVFTU1FkU2R5eXl5eXp5gHmAenqAgICAgAAAAAAAAAAA
        AAAAAHlobGhsbGh5bHlwbHl5eXl5eXl5eXl5eXl5eXp5enl5eXl6gAAAAAAAAAAAAAAAAHloaFlRSlNR
        U2hsaHloeWh5eXl5eXl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAGxoaFFHUUdRUVN5bGx5aHlsbGh5
        bHl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAHloaGhoaGhobGhoeWhseWh5eXlseWh5bHl5eXl5eXl5
        eXl5eQAAAAAAAAAAAAAAAGhoaGhobGhsaGxsaHlobHlobGx5aHl5bHloeWh5bHlseWx5egAAAAAAAAAA
        AAAAAHloaGhoaGhsaGxobGhsbGh5bGh5eWh5aHl5bHlseWx5aHlseQAAAAAAAAAAAAAAAGhoZkZIHx8f
        SlNEH0ghREYfR1NkRGghU2xIIUhRSlFTZGRoegAAAAAAAAAAAAAAAGxkZFlTWVlZZGhoZGRoWWhoaGRT
        aGhkU2xoaGhobGhoeWx5eQAAAAAAAAAAAAAAAHlobGxsbGxsbGxsbGx5eWx5bHl5eXl5eXl5enl6eXl5
        eXl5egAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////wAA////////AAD///////8AAPwA
        AAH//wAA/AAAAP//AAD8AAAAf/8AAPwAAAA//wAA/AAAAB//AAD8AAAAD/8AAPwAAAAH/wAA/AAAAAP/
        AAD8AAAAAf8AAPwAAAAA/wAA/AAAAAB/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAP///////wAA////////AAD///////8AACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAABAAAAAAAAlVrpAJhf6QCZYeoAnGXrAJ1o
        6QCibusAoGzsAKJw6ACkcewAp3fsAKh66gCqe+0Aq33tAK1/7gCdnZ0AoqKiAKenpwCpqakAsLCwALu7
        ugC/v78AsJfTALOU3wC4nN8ArIHrALGG7QCyie4AtIrvALua6QC2jfAAx7rZAMCe8QDBoe4AwqHxAMeo
        8gDJrPIAy6/0AMyx8gDBwcEAxMTDAMbGxQDIyMcAycfLAMrKyQDMzMsAzcvPAM3NzQDQ0M8AzMfTAMzE
        1gDPxN8A0M/SANHR0QDU09YA1dXVANfW2QDZ2dkA3NzbANzb3gDd3d0A2czsAN3a4QDWw/EA2cX2ANrI
        9ADezfYA4dnsAOHU8wDh0vYA4tT3AOTW+ADi4uIA5OTjAOXl5QDo6OcA6urpAOzs6wDs6u4A7e3tAPDw
        7wDt6PQA6uD4AOzj+QDt5vkA8On5APLt+QD07/sA8fHxAPT08wD19fUA+Pj3APf1+QD49voA+fn5APr4
        /AD+/v4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeXl5eXl5eXl5e
        Xl5eXllNDwAAAAAAAAAAAAAAAAAAAF5ZXl5eXl5eXl5eXl5ZTU03DwAAAAAAAAAAAAAAAAAAXl4wNzc5
        OTlKSkpNSjcwMBM3EAAAAAAAAAAAAAAAAABeWV5eXl5eWV5eXl5eWU1LODc5EwAAAAAAAAAAAAAAAF5e
        NzA3MDc3SjA4MDc+MCcVE005EAAAAAAAAAAAAAAAXllZXl5eXl5eXl5eXl5ZTUsVXlk5EAAAAAAAAAAA
        AABbW15eNzk5MDc3OTdIOTg3FTAoMDc3DwAAAAAAAAAAAFlbWV5eXllZW15eXl5eXllZTUtKOTk5DwAA
        AAAAAAAAXlk3OUooODcwTUo3MD45OTlZWE1QTU1QAAAAAAAAAABbWVleXl5eXl5eXl5eXl5eXl5ZWVlZ
        WVkAAAAAAAAAAFleNzc5N01bXUdTXl5eXl5eXl5eW1tbXgAAAAAAAAAAWVlZWVlADFNeHAJTXl5eXlcJ
        QF5eXl5eAAAAAAAAAABZWVlGGgYmW15XBg5eXl5eXiUEDkdeXl4AAAAAAAAAAFlZFwQdMThbXl5HBCRe
        Xl5eXlsgASJeXgAAAAAAAAAAWVkiBCFQW1tdXl4kBkdeXl5eVyIEIl5eAAAAAAAAAABZWTAfDAQYNDdN
        Pj4cDD5NORYJG0FNXl4AAAAAAAAAAFlNWVlZPwlDW1teXlUMIl5XHEJeXl5eXgAAAAAAAAAAWVkoKjAw
        KzAwKDAwMDIzPjg0N0pKUF5eAAAAAAAAAABZTVlYWFlZWVlZWVteXl5eXV1dXl5eXl4AAAAAAAAAAFlN
        UFA0MDcoMCs3MDg5OTkwTV5eXl5eXgAAAAAAAAAAWU1NWFBZWVhZWVlZWV5ZXlleXl5eXl5eAAAAAAAA
        AABQTTAwNxUoMDA4OTdNWVtZXlleWV5eXl4AAAAAAAAAAFlNTU1NTU1YWFlZUFlZWVlbWV5ZW1leXgAA
        AAAAAAAATU0wKDcoSlBYUFlZWVlZWVlZWVlbWVlbAAAAAAAAAABNTUtNTU1NUE1YTVhYWVlZWVlZWVlZ
        WVkAAAAAAAAAAE1KTUtNTU1NUE1YUFBQWFhZWFlZWVlZWQAAAAAAAAAATUswKCcwOTAwKjQwNzc5MFAo
        Nzk5Sk1ZAAAAAAAAAABZTU1NTVhNTVlQWFBYWVlZWFlZWVlZWVsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AA
        A//wAAH/8AAA//AAAH/wAAA/8AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAEAAAAAAACioqIApKSkALyj3wCyie4AtpXlALiS
        7wC+nO4AvpvxAMe53ADIruwAzb7jAMmx7ADCovEAzrP0AMTExADMzMwA1tbWANnU3wDa2toA3d3cAODg
        3wDRxOMA2s7rAN/a5QDe1+gA28j2AN/R8wDg2OkA5N3uAOHS9gDh4eEA5OTjAOXl5QDk4OoA6enpAOzs
        6wDt7e0A8PDvAO/u8QDu5vkA8Oj6APLt+QDx8fEA9fX1APj3+gD5+fkA/v7+AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAuLi4u
        Li4uJQIAAAAAAAAALSElIS0mJRMQAgAAAAAAAC0hISElISUTDy0BAAAAAAAtLSEhISElIRMREQIAAAAA
        LSEhISUlJSUlLSUlAAAAAC0fHxsbGi4uGyosLgAAAAAtCgUdLgQpLikIDi4AAAAAJgMHGSUdBicdDQwu
        AAAAAC0TEgkTIQsXFiItLgAAAAAmJh8hISEhJSUuLi4AAAAAJRMTEyEhLS0tLSwuAAAAACUTHyUmJiYm
        JiwsLgAAAAAlISQkJiYtJi0mLSYAAAAAJRMUHxMfHx8hICEtAAAAAAAAAAAAAAAAAAAAAAAA//8AAMAf
        AADADwAAwAcAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAA//8AACgA
        AACAAAAAAAEAAAEAIAAAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAFAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAFAAAABQAA
        AAQAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAMAAAACwAAAAgAAAAGAAAABAAAAAIAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAcAAAAMAAAAEQAAABYAAAAaAAAAHAAA
        AB0AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAdAAAAHAAA
        ABoAAAAXAAAAEgAAAA4AAAAJAAAABQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADAAAABQAAAAeAAAAJwAAAC0AAAAwAAAAMgAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADIAAAAwAAAALQAAACgAAAAiAAAAGgAAABIAAAALAAAABwAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAA
        AEcAAABJAAAASgAAAEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABKAAAASQAA
        AEgAAABEAAAAPgAAADUAAAAqAAAAHwAAABUAAAAOAAAABwAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAEAAAACwAAABYAAAAmAAAAOQAAAEkAAABUAAAAWwAAAF4AAABfAAAAXwAAAF8AAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAF8AAABfAAAAXQAAAFkAAABTAAAASQAAAD0AAAAwAAAAIwAA
        ABgAAAAPAAAACQAAAAQAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAANAAAAGgAAACwAAABCAAAAVP//
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////9DQ0NYhISFmAAAAUAAAAEIAAAA0AAAAJgAAABoAAAARAAAACgAAAAUAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAcAAAAMAAAAEcAAABb//////n5+f/29vb/9/f2//f39//39/f/+Pj3//j4
        +P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+fn5//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+/v7//t7e3/7e3t/+vr6//p6en/5+fn/87Ozvk3Nzd0AAAAVAAA
        AEYAAAA3AAAAKQAAABwAAAASAAAACgAAAAUAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASQAA
        AF7/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fj/+fn5//n5+f/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/7+/v/+/v7//r6+v/5+fn/9/f3//b29v/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+jo6P/m5ub/29vb/8zMzP1SUlKGAAAAVwAAAEkAAAA6AAAAKwAAAB4AAAATAAAACwAA
        AAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABKAAAAX//////29vb/9vb2//f39v/39/f/9/f3//j4
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4
        +P/39/f/9fX1//T09P/z8/P/8fHx//Dw8P/u7u7/7e3t/+vr6//p6en/6Ofn/+Tk5P/i4eH/09PT/8zM
        zP5sbGyaAAAAWgAAAEsAAAA9AAAALgAAACAAAAAVAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAdAAAAMgAA
        AEoAAABf//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v///////v7+//39/f/8/Pz/+/v7//r6+v/6+vr/+Pj4//f39//19fX/9PT0//Ly8v/x8fH/7+/v/+7u
        7v/t7e3/6+vr/+np6f/n5+f/5OTk/9/f3//a2tr/0dHR/8rKyv+FhYWwAAAAXAAAAE4AAAA/AAAAMAAA
        ACIAAAAWAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/7+/v/+vr6//r6
        +v/4+Pj/9/f3//X19f/09PT/8vLy//Hx8f/v7+//7u7u/+zs7P/r6+v/6enp/+fn5//j4+P/39/f/9jY
        2P/W1tb/0dHR/8rKyv+ZmZnHCAgIYQAAAFAAAABBAAAAMQAAACMAAAAXAAAADgAAAAgAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T09P/y8vL/8fHx/+/v
        7//u7u7/7Ozs/+vr6//p6en/5+fn/+Pj4//e3t7/1tbW/9LS0v/X19f/0dHR/8rKyv+lpaXVEhISZQAA
        AFIAAABDAAAAMwAAACUAAAAYAAAADwAAAAgAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f3
        9//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+Pj4//r6+v/6+vr/9/f3//r6+v/5+fn/+fn5//v7
        +/+1tbX/29vb//v7+//7+/v/+/v7//z8/P/8/Pz/+vr6//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7/+/v7//7+/v///////v7+//39/f/8/Pz/+/v7//r6
        +v/6+vr/9vb2//f39//19fX/9PT0//Ly8v/x8fH/7Ozs/+7u7v/s7Oz/6+vr/+np6f/n5+f/4+Pj/97e
        3v/T09P/ysrK/9bW1v/X19f/0NDQ/8rKyv+tra3gHh4ebAAAAFMAAABFAAAANQAAACYAAAAaAAAAEAAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/S0tL/3Nzc/5KS
        kv+zs7P/4ODg/6SkpP+urq7/2tra/6urq/+srKz/z8/P/9vb2/+enp7/+vr6/7+/v//z8/P//Pz8/8HB
        wf+6urr/8vLy/6ioqP/d3d3/zMzM/66urv/AwMD/4uLi//39/f/9/f3//f39/8LCwv/s7Oz//v7+/6am
        pv+vr6//4eHh/6+vr//+/v7//f39//z8/P/7+/v/+vr6/76+vv+5ubn/7u7u/6Ojo//U1NT/x8fH/6Cg
        oP+vr6//4uLi/+zs7P/r6+v/6enp/5qamv/ExMT/t7e3/4KCgv+AgID/rq6u/93d3f/X19f/0NDQ/8rK
        yv+zs7PpLy8vdAAAAFUAAABGAAAANwAAACgAAAAbAAAAEQAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f3
        9v/39/f/9/f3//j49//4+Pj/jY2N/9zc3P/5+fn/oqKi/+fn5//Dw8P/rq6u/+fn5//BwcH/sLCw/9PT
        0//Q0ND/ra2t/76+vv/s7Oz/9PT0/6mpqf/Ly8v/sbGx//n5+f/8/Pz/pqam/9zc3P/Ozs7/0dHR/5qa
        mv/9/f3//f39//39/f/9/f3/wsLC/+zs7P/+/v7/sbGx/+jo6P/IyMj/paWl//39/f/9/f3//Pz8//v7
        +//6+vr/ra2t//j4+P/39/f/oaGh/9LS0v/Jycn/hISE/6mpqf/Hx8f/7Ozs/+vr6//p6en/mJiY/8PD
        w/+5ubn/n5+f/319ff+urq7/1dXV/93d3f/W1tb/0NDQ/8nJyf+4uLjwQEBAfgAAAFcAAABIAAAAOQAA
        ACoAAAAdAAAAEgAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/j4+P/tra2/93d
        3f+VlZX/urq6/+7u7v/Pz8//wcHB//Ly8v/Hx8f/r6+v/83Nzf/Kysr/9fX1/8zMzP+3t7f/y8vL//v7
        +/+YmJj/t7e3//f39/+RkZH/sbGx/+/v7//Hx8f/2tra/+np6f/9/f3//f39//39/f+ZmZn/ra2t/+np
        6f/R0dH/xMTE//b29v/ExMT/tLS0/+vr6//8/Pz/+/v7//r6+v+UlJT/tbW1//Pz8/+MjIz/q6ur/+fn
        5/+6urr/rq6u/+Xl5f/t7e3/6+vr/+np6f+Dg4P/oKCg/9fW1v+mpqb/l5aW/769vf+4uLj/4+Pj/93d
        3f/W1tb/0NDQ/8nJyf+8vLz2UVFRiQAAAFgAAABKAAAAOgAAACsAAAAeAAAAEwAAAAsAAAAGAAAAAgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b2
        9v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fn/+fn5/8XFxf/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/l5eX/4eHh//v7+//7+/v/+/v7//v7+//7+/v//Pz8/+rq6v/7+/v//Pz8/8jIyP/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39/+/v7/+2trb/5ubm//7+/v/+/v7//v7+//7+/v/+/v7//f39//z8
        /P/7+/v/+/v7/+fn5//4+Pj/9/f3/8LCwv/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/7e2
        tv/m5uX/4uLi/9zc3P/R0dH/wMC//7e3t//p6en/4+Pj/93d3f/W1tb/0NDQ/8nJyf+/v7/7YmJilQAA
        AFoAAABMAAAAPAAAAC0AAAAfAAAAFAAAAAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5
        +P/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//7+/v/+vr6//n5+f/39/f/9vb2//T0
        9P/z8/P/8fHx//Dw8P/v7+//7e3t/+zs7P/q6ur/6Ojo/+bm5v/j4+P/3t7e/9TU1P/FxMT/s7Ky/9ra
        2v/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJyf/AwMD9c3NzowAAAFsAAABNAAAAPQAAAC4AAAAgAAAAFAAA
        AAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b2
        9v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz//Pz8//v7+//6+vr/+fn5//f39//29vb/9fX1//Pz8//y8vL/8PDw/+/v7//t7e3/7Ozs/+rq
        6v/p6ej/5ubm/+Tj4//f397/1tbW/8nJyf+3t7f/wMDA//Dw8P/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJ
        yf/BwcH/goKCsQAAAF0AAABOAAAAPgAAAC4AAAAgAAAAFAAAAAsAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz/+/v7//r6+v/5+fn/+Pj4//b2
        9v/19fX/8/Pz//Ly8v/x8fH/7+/v/+7u7v/s7Oz/6+vr/+np6f/n5+f/5eXl/+Hg4P/a2tn/zs7N/7y8
        u/+rq6v/7+/v/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQMDA14AAABPAAAAPwAA
        AC4AAAAfAAAAEwAAAAoAAAAFAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//f3
        9//6+vr/+Pj4//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz/wcHB/66u
        rv/r6+v//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//Pz8//7+/v/9/f3//v7+//7+
        /v/9/f3//f39//z8/P/7+/v/+vr6//b29v/4+Pj/9/f3//X19f/09PT/7u7u//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+Xl5f/m5ub/4ODg/9zc3P/Qz8//v7+//6ysrP/Q0ND/9vb2/+/v7//p6en/4uLi/9zc
        3P/V1dX/z8/P/8jIyP/BwcH/mJiYywMDA14AAABPAAAAPgAAAC4AAAAeAAAAEgAAAAoAAAAFAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/0dHR/9zc3P+mpqb/3d3d/8nJyf+oqKj/ubm5/+zs7P+ampr/oqKi/8nJyf+srKz/ra2t/8/P
        z//BwcH/i4uL/9/f3/+oqKj/3t7e/83Nzf+mpqb/q6ur/83Nzf/AwMD/9fX1//39/f/6+vr/sbGx//39
        /f+oqKj/39/f/9DQ0P+cnJz/pKSk/87Ozv+pqan/39/f/9HR0f+urq7/t7e3/+Tk5P/AwMD/r6+v/9vb
        2//39/f/zc3N/9ra2v+np6f/8fHx//Dw8P+fn5//zc3N/8LCwv+cnJz/qqqq/9zc3P+Kior/jY2N/62t
        rf+GhYX/eHh3/6SkpP/8/Pz/9vb2/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQAA
        AF0AAABOAAAAPQAAACwAAAAdAAAAEgAAAAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4/42Njf/b29v/+fn5/6SkpP/c3Nz/y8vL/4uL
        i/+zs7P/zc3N/7u7u/+enp7/4eHh/7Gxsf/U1NT/0dHR//v7+/+tra3/+/v7/6ampv/d3d3/zs7O/6mp
        qf/W1tb/zc3N//X19f+qqqr/zMzM//r6+v+xsbH//f39/6ampv/d3d3/0dHR/729vf+fn5//6Ojo/6en
        p//c3Nz/0dHR/5WVlf+pqan/+/v7/7e3t/+zs7P/8PDw/42Njf/c3Nz/9fX1/9LS0v/Jycn/8PDw/52d
        nf/Nzc3/w8PD/4GBgf+lpaX/wcDA/6qqqf+Li4v/xcXF/42Njf+WlpX/j4+P//r6+v/8/Pz/9fX1/+/v
        7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jIyP/AwMD/fX19uQAAAFwAAABNAAAAPAAAACsAAAAdAAAAEQAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//b29v/39/f/9/f3//f3
        9//4+Pj/4+Pj/7W1tf/d3d3/kJCQ/6+vr//s7Oz/w8PD/7a2tv/w8PD/wcHB/7e3t//5+fn/x8fH/6+v
        r//R0dH/zc3N/8LCwv/7+/v/r6+v/7Gxsf/v7+//vb29/7q6uv/d3d3/uLi4/83Nzf/7+/v/6enp/6io
        qP/19fX/kZGR/7Kysv/x8fH/w8PD/7u7u//9/f3/sLCw/7Gxsf/x8fH/rq6u/9DQ0P/v7+//xcXF/7W1
        tf/w8PD/4eHh/7S0tP/b29v/9PT0/6ioqP/w8PD/iYmJ/6enp//i4uL/tra2/6qqqv/g4OD/sLCw/6en
        p//Z2dn/n5+f/39/f/+Pj4//3d3d//7+/v/8/Pz/9fX1/+/v7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jI
        yP/AwMD/cXFxowAAAFsAAABLAAAAOgAAACoAAAAbAAAAEAAAAAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////b29f/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5+f/FxcX/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/5ubm/+Hh4f/7+/v/1NTU//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//f39//Ly8v/y8vL/+Tk5P/Jycn//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/MzMz//f39//z8/P/7+/v/+vr6//r6+v/4+Pj/9/f3//b29v/09PT/3t7e/9nZ
        2f+9vb3/7+/v/+7u7v/s7Oz/6+vr/+np6f/o5+f/4+Pj/9zc3P/Pz8//qqqq/5qamv/MzMv//v7+//7+
        /v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb2//U1NT/zs7O/8fHx/+/v7/9YmJilgAAAFoAAABKAAAAOQAA
        ACgAAAAaAAAAEAAAAAgAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9/f2//f3
        9//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7
        +//7+/v/+vr6//n5+f/4+Pj/9vb2//X19f/09PT/8vLy//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/+np
        6P/l5eX/3t7e/9LS0v+/v7//rays/7y8vP/+/v7//v7+//7+/v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb
        2//U1NT/zs7O/8fHx/+9vb37UFBQigAAAFkAAABJAAAAOAAAACcAAAAZAAAADwAAAAgAAAADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T0
        9P/z8/P/8vLy//Dw8P/v7+//7u7u/+zs7P/r6+v/6urq/+bm5v/g4OD/1dXV/8PDw/+wsLD/tbW1//7+
        /v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9vb2//U1NT/zs7O/8fHx/+6urr2PT09fwAA
        AFgAAABHAAAANgAAACYAAAAYAAAADgAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29f/29vb/9vb2//f3
        9v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//f39//29vb/9fX1//T09P/y8vL/8fHx//Dw8P/u7u7/7e3t/+zs
        7P/r6+v/5+fn/+Lh4f/Y2Nj/yMfH/7W1tf+xsbH//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u
        7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fHx/+2trbwLi4udgAAAFYAAABGAAAANQAAACUAAAAXAAAADQAA
        AAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5
        +f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//j4
        +P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3/+/v7//39/f/8/Pz//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//f39//39/f/+/v7//f39//z8/P/8/Pz/9/f3//r6+v/6+vr/+Pj4//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+zs7P/u7u7/7e3t/+zs7P/p6en/5OTk/9va2v/Nzc3/vLy8/7Cw
        sP/+/v7//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fH
        x/+wsLDpHR0dbgAAAFUAAABEAAAAMwAAACMAAAAWAAAADAAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb2//b2
        9v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/09PT/93d
        3f/BwcH/5eXl//v7+/+tra3/+/v7//v7+/+lpaX/r6+v/9bW1v+4uLj/r6+v/7Kysv+/v7//9PT0//z8
        /P+NjY3/m5ub/+bm5v+bm5v/pKSk/8zMzP/MzMz/n5+f//7+/v/CwsL/jIyM/+Pj4/+tra3/ra2t/9TU
        1P/9/f3/1NTU/+Hh4f+tra3/+/v7//r6+v+8vLz/5+fn//b29v+oqKj/9PT0//Pz8/+dnZ3/paWl/8vL
        y/+urq7/qamp/6Wlpf+vr6//2dnZ/9PT0//FxcX/t7a2/7Gxsf+ysrL/t7e3/76+vv/Ozs7/5eXl//v7
        +//6+vr/9PT0/+3t7f/n5+f/4ODg/9ra2v/T09P/zc3N/8XFxf+qqqrhERERaAAAAFQAAABDAAAAMgAA
        ACIAAAAVAAAACwAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////X19f/29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/5+fj/+fn5//n5+f/5+fn/+vr6/46Ojv/d3d3/+vr6/8HBwf/l5eX/+/v7/6Ojo//6+vr/+/v7/6+v
        r//o6Oj/vb29/7a2tv+tra3/s7Oz//X19f+qqqr/y8vL/6ioqP/v7+//srKy/729vf+fn5//5eXl/6en
        p/+4uLj/7u7u//7+/v+vr6///v7+/7Ozs//V1dX/1NTU/5GRkf/i4uL//Pz8/9vb2//Pz8//+vr6/729
        vf/n5+f/9/f3/5+fn//09PT/8/Pz/6ioqP/b29v/tra2/62trf+np6f/p6en/+Li4v+YmJj/s7Oz/9HQ
        0P/FxcX/vLy8/7e3t/+zs7L/sLCv/6+urv+srKv/q6ur/7u7u//T09P/7e3t/+3t7f/n5+f/4ODg/9ra
        2v/T09P/zc3N/8XFxf+ioqLVCAgIYwAAAFIAAABBAAAAMAAAACAAAAATAAAACwAAAAUAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//b2
        9f/29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/5eXl/7e3
        t//e3t7/mZmZ/6mpqf/k5OT/w8PD/7Gxsf/o6Oj/z8/P/8HBwf/v7+//qKio/7Gxsf/S0tL/uLi4/8zM
        zP/7+/v/oaGh/8HBwf/Pz8//w8PD/7q6uv/4+Pj/yMjI//Pz8//Ozs7/z8/P/8XFxf/+/v7/ycnJ/7Cw
        sP/V1dX/5+fn/7m5uf/i4uL//Pz8/66urv/6+vr/lZWV/6urq//k5OT/v7+//62trf/j4+P/yMjI/7q6
        uv/k5OT/oKCg/6ioqP/IyMj/q6ur/7y8vP/h4eH/29vb/9XV1f/Ozs7/ysrK/8XFxf/Dw8P/wsHB/7+/
        vv+9vb3/ubm5/7e2tv+2trb/yMfH/9vb2//m5ub/4ODg/9nZ2f/T09P/zMzM/8XFxf+WlpbHAAAAXwAA
        AFAAAAA/AAAALQAAAB4AAAASAAAACQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/s7Oz/s7Oz/+Hh4f/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/Q0ND/4uLi//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7/19fX//7+/v/+/v7/5+fn/+Xl5f/+/v7//v7+//39/f/8/Pz/5ubm/+Hh
        4f/r6+v/s7Oz/+Li4v/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+7u7v/t7e3/6urq/+jo
        6P/k5OT/39/f/9zc3P/Z2dn/19fX/9XV1f/T09P/0dHR/8/Pz//Nzc3/ycnJ/8fHx//Dw8P/wMDA/8TE
        xP/U09P/3d3d/9nZ2f/T09P/zMzM/8XFxf+AgICxAAAAXgAAAE4AAAA8AAAAKwAAABwAAAAQAAAACAAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+vr6//j4+P/39/f/9vb2//X1
        9f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7Ozs/+np6f/n5+f/5eXl/+Tk4//i4uL/4eHh/9/f
        3//d3d3/29vb/9ra2v/X19f/1tbV/9PT0//R0dH/z8/O/8/Pzv/Pz87/1NTT/9jY1//T09P/zMzM/8XF
        xf9oaGicAAAAXAAAAEsAAAA6AAAAKAAAABkAAAAOAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//j4+P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v
        7//u7u7/7Ozs/+vr6//r6+v/6Ojo/+fn5//n5+b/5ubm/+Tk5P/j4+P/4uLh/+Hh4f/g39//3t7e/93d
        3f/b29v/2tnZ/9rZ2f/a2dn/3Nzc/97e3v/V1dX/zMzM/8TExP5OTk6IAAAAWQAAAEgAAAA2AAAAJAAA
        ABUAAAALAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/8/Pz/+/v7//r6+v/6+vr/+fn5//j4
        +P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7e3t/+3t7f/s7Oz/6+vr/+rq
        6v/p6en/6enp/+fn5//n5ub/5ubm/+Tk5P/k5OT/4+Pj/+Pj4v/h4eH/4eHh/+Hh4f/i4uH/4+Pj/+Tk
        5P/e3t7/z8/P/8XFxfw0NDR4AAAAVQAAAEMAAAAvAAAAHQAAABAAAAAHAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X19f/19fX/9vb1//b29v/29vb/9vb2//f3
        9//39/f/9/f3//j4+P/4+Pj/9vb2//n5+f/5+fn/9vb2//r6+v/6+vr/+vr6//r6+v/6+vr/9/f3//r6
        +v/7+/v/+/v7//v7+/+0tLT/29vb//v7+//BwcH/rq6u/+vr6//8/Pz/+fn5//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3/+/v7//39/f/+/v7/+/v7//7+/v/8/Pz//v7+//39/f/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/4+Pj/+/v7//r6+v/6+vr/9/f3//j4+P/39/f/8/Pz//X19f/09PT/8/Pz//Ly
        8v/x8fH/8PDw/+/v7//v7+//7u7u/+3t7f/s7Oz/7Ozs/+vr6//q6ur/6urq/+np6f/p6en/6Ojo/+jo
        6P/o6Oj/5+bm/+fm5v/n5ub/5+bm/+fm5v/n5+f/6Ojo/+jo6P/p6en/29vb/8nJyfceHh5rAAAATgAA
        ADkAAAAlAAAAFAAAAAkAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9fX1//X19f/19fX/9vb2//b29v/29vb/9/f3//f39//Q0ND/29va/8DAwP+2trb/7u7t/6Sk
        pP+tra3/2dnZ/729vf/y8vL/+vr6/5mZmf+cnJz/3d3d/6ysrP+/v7//39/f/9ra2v+fn5//+/v7/6Wl
        pf+rq6v/zs7O/6mpqf+6urr/7u7u/6ioqP/d3d3/zs7O//39/f/9/f3//f39/8HBwf+8vLz/8/Pz/6mp
        qf+7u7v/8fHx/5ubm/+jo6P/x8fH/7q6uv+0tLT/tLS0//7+/v/T09P/4uLi/62trf/8/Pz/+/v7/729
        vf+6urr/8PDw/6Ghof+pqan/2dnZ/7u7u//t7e3/8/Pz//Ly8v/x8fH/8fHx//Dw8P/v7+//7u7u/+7u
        7v/t7e3/7e3t/+zs7P/s7Oz/6+vr/+vr6//q6ur/6urq/+rq6v/q6ur/6enp/+np6f/p6en/6urq/+rq
        6v/q6ur/6urq/+vr6//r6+v/7u7u/83NzdcAAABWAAAAQQAAACsAAAAYAAAACwAAAAQAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fT/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/jIyM/9ra2v/39/f/r6+v//Pz8//4+Pj/ra2t/+bm5v/AwMD/8/Pz/6mpqf/Hx8f/oKCg/+rq
        6v+wsLD/z8/P/5mZmf/7+/v/ra2t/729vf/s7Oz/qKio/9XV1f/Nzc3/i4uL/7S0tP/Q0ND/pqam/9vb
        2//Pz8///f39//39/f/9/f3/r6+v//z8/P/9/f3/i4uL/7S0tP/T09P/vb29/5+fn//f39//uLi4/7Gx
        sf+zs7P/kZGR/+Pj4//9/f3/29vb/9HR0f/7+/v/ra2t//r6+v/6+vr/ra2t/+Dg4P/ExMT/7+/v/6Oj
        o//IyMj/8/Pz//Pz8//y8vL/8fHx//Dw8P/w8PD/7+/v/+/v7//u7u7/7e3t/+3t7f/t7e3/7Ozs/+zs
        7P/s7Oz/7Ozs/+zs7P/r6+v/6+vr/+vr6//s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+3t7f/v7+///////wAA
        AFsAAABGAAAALwAAABsAAAANAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////X19P/19fX/9fX1//b29f/29vb/9vb2//b29v/i4uL/tbW1/9vb2/+Xl5f/s7Oz//Pz
        8//Ozs7/wMDA//Hx8f+3t7f/y8vL//n5+f+UlJT/w8PD/9DQ0P/Dw8P/2NjY/+Tk5P/Kysr/9PT0/83N
        zf+9vb3/ubm5/93d3f/ExMT/t7e3//Ly8v+vr6//sbGx/+/v7//8/Pz//f39//39/f+Xl5f/uLi4//n5
        +f/ExMT/uLi4//X19f/Dw8P/u7u7//b29v+qqqr/s7Oz/9fX1//n5+f/u7u7/+Pj4//9/f3/r6+v//v7
        +/+UlJT/uLi4//f39//Nzc3/v7+///Dw8P+0tLT/ycnJ//T09P/19fX/9PT0//Pz8//y8vL/8vLy//Hx
        8f/w8PD/8PDw/+/v7//v7+//7u7u/+7u7v/u7u7/7e3t/+3t7f/t7e3/7e3t/+3t7f/t7e3/7e3t/+3t
        7f/t7e3/7e3t/+3t7f/u7u7/7u7u/+/v7///////AAAAXgAAAEkAAAAxAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX0//X19f/19fX/9fX1//b2
        9v/29vb/9vb2//f39//39/f/9/f3/+fn5v/39/f/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6/+Pj
        4//Y2Nj/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39/+rq6v/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/n5+f/4+Pj/+np6f/7+/v/+/v7//r6+v/6+vr/+fn5//j4
        +P/4+Pj/9/f3//b29v/19fX/9PT0//T09P/z8/P/8vLy//Ly8v/x8fH/8fHx//Dw8P/w8PD/7+/v/+/v
        7//v7+//7+/v/+7u7v/u7u7/7u7u/+7u7v/u7u7/7u7u/+7u7v/v7+//7+/v/+/v7//v7+//8PDw////
        //8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//n5+f/4+Pj/9/f3//b29v/29vb/9fX1//T0
        9P/09PT/8/Pz//Pz8//y8vL/8vLy//Hx8f/x8fH/8fHx//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8fHx//Hx8f/x8fH//////wAAAF8AAABKAAAAMgAAAB0AAAAOAAAABQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T09P/19fT/9fX1//X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7
        +//6+vr/+vr6//n5+f/4+Pj/+Pj4//f39//29vb/9vb2//X19f/09PT/9PT0//Pz8//z8/P/8/Pz//Ly
        8v/y8vL/8vLy//Ly8v/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLy//Ly8v/y8vL/8vLy//Pz
        8///////AAAAXwAAAEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//r6+v/5+fn/+Pj4//j4
        +P/39/f/9vb2//b29v/19fX/9fX1//T09P/09PT/9PT0//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PT/9PT0//////8AAABfAAAASgAAADIAAAAdAAAADgAA
        AAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PT/9PT0//X1
        9P/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7///////7+/v/9/f3//f39//z8
        /P/8/Pz//Pz8//v7+//7+/v/+vr6//r6+v/6+vr/+fn5//j4+P/4+Pj/9/f3//f39//29vb/9vb2//b2
        9v/19fX/9fX1//X19f/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fX/9fX1//X1
        9f/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////T09P/09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/z8/P/9ra
        2v+kpKT/29vb/8jIx/+jo6P/ra2t/9nZ2f/AwMD/t7e3/+/v7/+oqKj/uLi4/+vr6/++vr7/8vLy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz//Pz8//v7+//7+/v/+/v7//r6
        +v/6+vr/+vr6//n5+f/5+fn/+Pj4//j4+P/39/f/9/f3//f39//29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PT0//T0
        9P/19fT/9fX0//X19f/19fX/9vb1/4uLi//a2tr/9/f2/6Kiov/a2tr/yMjI/62trf/m5ub/v7+//6+v
        r//19fX/+fn5/4qKiv+zs7P/zs7O//Pz8/+oqKj/ycnJ//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//39/f/9/f3//Pz8//z8/P/7+/v/+/v7//v7+//6+vr/+vr6//r6+v/6+vr/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/4+Pj/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PP/9PT0//T09P/19fT/9fX1//X19f/29vX/4eHh/7S0
        tP/a2tr/ra2t/62trf/p6en/zc3M/7+/v//w8PD/l5eX/7S0tP/09PT/wsLC/7a2tv/v7+//tra2/8vL
        y//5+fn/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/9/f3//Pz8//z8
        /P/8/Pz/+/v7//v7+//7+/v/+/v7//r6+v/6+vr/+vr6//r6+v/6+vr/+fn5//n5+f/5+fn/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T0
        8//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f39//39/f/+Pj4//j4
        +P/m5ub/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/5+fr/2MP1/9G48//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+/+8mPD/llzq/5Vb6f+UWun/lFnp/5NY6f+TV+n/uZPw//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+/86y9P/Wvvb//Pz9//z8/P/8/Pz//Pz8//z8/P/7+/v/+/v7//v7
        +//7+/v/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PTz//T08//09PT/9PT0//X19P/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/4dL2/6+E7v+gauz/yKjy//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//bz+v+ib+v/k1jp/5NX
        6f+SVuj/klXo/5FU6P+RVOj/2ML1//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/w6Pz/5Vb
        6f+oeO3/4ND4//39/f/9/f3//Pz8//z8/P/8/Pz//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/5+fj/+fn5//n5+f/5+fn/6uD4/7iR8P+faez/n2rs/59q7P/IqPL/+vr6//r6
        +v/7+/v/+/v7//v7+//7+/v/+/v7/+bZ9/+XXen/lFnp/5RY6f+TWOn/k1fp/5JW6P+YYOn/7+f5//z8
        /P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/EpPP/llzp/5Zb6f+VWun/sYbv/+rf+f/9/f3//f39//39
        /f/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Pz8//09PP/9PTz//T09P/09PT/9fX0//X1
        9f/19fX/9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/8Or4/8Ce
        8f+faev/n2ns/59p7P+faez/n2rs/8eo8v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7/8yv
        8/+WXOn/lVvp/5Va6f+UWen/lFjp/5NX6f+qfOz/+/r8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+/8Sk
        8/+XXur/l13q/5Zb6f+VWun/lVrp/7uW8f/z7Pz//f39//39/f/9/f3//f39//39/f/9/f3//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8/Pz//Pz8//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/9vb1//b29v/29vb/9/f2//f3
        9//39/f/9/f3//j4+P/4+Pj/8/D3/8qt8v+hbez/nmjr/55o6/+faez/n2ns/59p7P+faez/x6jy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+vr7/7CG7v+XXer/llzp/5Zb6f+VWun/lFnp/5RZ
        6f/IqvP//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/xaXz/5hf6v+YXur/l13q/5Zb6f+VWun/lFnp/5dd
        6v/Hp/P/+PX9//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////z8/P/8/Pz//T08//09PP/9PT0//T0
        9P/19fT/9fX1//X19f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/9vb3/9O78/+kc+z/nmfr/55n
        6/+eaOv/nmjr/55o6/+faez/n2ns/6Bq7P/UvPT/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/8Or5/59q6/+YXur/l13q/5dd6v+WXOn/lVvp/5Zc6f/k1vj//Pz8//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/UvPX/mmLq/5lg6v+YXur/l13q/5Zc6f+VWun/lFnp/5NY6f+bZOr/0rf1//38///+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v///////////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Pz8v/z8/P/8/Pz//T08//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/9/f3/9vL8/+rfe3/nWbr/51n6/+dZ+v/nmfr/55n6/+eaOv/nmjr/55o6/+5kvD/6uD4//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/3Mr1/5lh6v+ZYOr/mF/q/5de
        6v+XXer/llzp/6Nv7P/18vv//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/s4vr/to3w/5lg6v+YXur/l13q/5Zc
        6f+VWun/lFnp/5NY6f+SVun/o3Ds/93K9//+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//X19P/19fX/9fX1//b29f/29vb/9vb2/+TY9P+yiO7/nGXr/51m6/+dZuv/nWbr/51n
        6/+dZ+v/nmfr/55n6/+whO7/4tT2//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/waDx/5pi6v+ZYer/mWDq/5hf6v+YXur/l13q/7mS8P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7/5NX4/61/7v+YX+r/l13q/5Zc6f+VW+n/lFnp/5NY6f+TV+n/klXo/6x9
        7v/n2vn//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////z8/L/8/Py//Pz8//z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1/+vk
        8/+7l+//nGbr/5xl6/+cZev/nGXr/51m6/+dZuv/nWbr/51n6/+peu3/2cX0//n4+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//49vr/q3zt/5tj
        6/+aYur/mmHq/5lh6v+ZYOr/mF/q/9W/9f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v3+/9rF
        9/+ldO3/l13q/5Zc6f+VW+n/lFnp/5RY6f+TV+n/klbo/5FV6P+2j/D/8Oj7//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Ly8v/z8/L/8/Pz//Pz
        8//09PP/9PTz//T09P/09PT/z8/O/9XS2/+ig87/nmjs/5xk6/+cZOv/nGXr/5xl6/+cZev/nWbr/51m
        6/+fbOf/q5PO/+zq7v+mpqb/uLi4/+rq6v+9vb3/8fHx//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//q4Pj/n2ns/5xl6/+bZOv/m2Pr/5pi6v+aYer/nWfr/+3k
        +f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//z6/v/Rt/X/n2rs/5Zc6f+VW+n/lVrp/5RY
        6f+TV+n/klbo/5FU6P+TWOn/waDy//fy/P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8vLy//Pz8v/z8/L/8/Pz//Pz8//09PP/9PT0/4qKiv++puH/oW3r/5tj
        6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/5xl6/+eaev/rZDX/62qsv/19fX/+Pj4/4mJif+xsbH/zc3N//Ly
        8v+oqKj/ysrK//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//TuvT/nWfr/51m6/+cZev/nGTr/5tj6/+aYuv/rYDt//r4/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/49f3/yKn0/5pi6v+WW+n/lVrp/5RY6f+TV+n/klbo/5FV6P+QU+j/l17q/8+0
        9P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vL/8vLy//Pz
        8v/z8/L/8/Pz//T08//09PP/39/f/5xp5f+bY+v/m2Pr/5tj6/+bZOv/m2Tr/5xk6/+dZev/rYvf/7q0
        w//v7+//lZWV/7Ozs//z8/P/wcHB/7S0tP/u7u3/tra2/8rKyv/4+Pj/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v6+/+5kvD/nmjr/55n6/+dZuv/nWbr/5xl
        6/+bZOv/yKnz//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7/8+z8/76a
        8v+XXOn/lVrp/5RZ6f+TV+n/klbo/5FV6P+QU+j/mmLq//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/om/r/5pi
        6/+bY+v/m2Pr/5tj6/+bZOv/tY7u/+fd9P/29vb/9/f2//f39//l5eX/9vb2//j49//4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//Pu+f+od+7/n2rs/59p7P+eaOv/nWfr/51m6/+cZuv/4tP4//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39/+vh+f+zie7/lVrp/5RZ6f+TV+n/klbo/5FV
        6P+bY+r//v7+//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08/+ib+v/mmLq/5tj6/+bY+v/m2Pr/5tj6/+1ju7/5930//b2
        9v/29vb/9/f2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7/+HS9/+hbez/oGvs/6Bq
        7P+faez/nmjr/55n6/+mde3/9O/6//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3/6+H5/7SL7/+WXOn/lVrp/5RZ6f+TWOn/klbo/5xk6v/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8//z8/P/9PTz/6Jv
        6/+aYur/mmLq/5tj6/+bY+v/m2Pr/5tj6/+cZev/vpzw/+zm9f/29vb/9/f3//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7/8mr8v+ibez/oWzs/6Br7P+ga+z/n2rs/59p7P+6lPD//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/8uz7/7+c8f+aYer/mF7q/5dd6v+WXOn/lVrp/5RZ
        6f+TWOn/nWbr//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/z7bv/6Bs6v+aYur/mmLq/5tj6/+bY+v/m2Pr/5tk
        6/+bZOv/n2ns/8eo8P/x7vb/9/f3//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+ff7/7OI
        7/+jb+3/om7s/6Ft7P+hbOz/oGvs/6Bq7P/UvPX//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/9/T8/8qr
        8/+eaez/m2Pr/5ph6v+ZYOr/mF/q/5dd6v+WXOn/lVvp/5tl6//Rt/X//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/7uvz/8Kj7v+dZuv/mmLq/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/51p5v+9pN//9fP3//f3
        9//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/29vb/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//39/f/7uX5/6d27v+jcO3/o2/t/6Ju7P+ibez/oWzs/6Rx
        7f/p4Pf//Pz8//z8/P/6+vr//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/5+fn//Pz8//r6
        +v/8/Pz//Pz8//39/f/9/f3/+/r9/9S79v+lc+z/nWfr/5xl6/+bZOv/m2Pr/5ph6v+ZYOr/mF/q/5ph
        6//EpPL/9vL8//39/f/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Pz/83Nzf/Y2Nf/j4+O/6uktf+wi+T/mmPq/5tj
        6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+oeO3/sJ3N//Dv8P/39/f/9vb1/62trf/4+Pj/paWl/9ra
        2v/Kysr/vr6+/4qKiv/e3t7/wMDA/7Gxsf/c3Nz/+vr6//r6+v/6+vr/v7+//4qKiv/f39//wMDA/7Gx
        sf/d3d3/2cT2/6Vy7f+kce3/pHDt/6Nw7f+jb+3/om7s/6N34f/d29//v7+//7y8vP/z8/P//Pz8//z8
        /P/8/Pz/ra2t//z8/P/8/Pz/qKio/7m5uf/w8PD/mZmZ/6Ghof/R0dH/xMPE/5uItP+qfOv/oGvs/59p
        7P+eaOv/nWfr/5xl6/+cZOv/m2Pr/5pj6v+3kuz/0svc/9zc3P/w8PD/4+Pj/+zs7P/6+vr//f39//39
        /f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy//Pz
        8v+Kion/19fX//Pz8/+enp7/4uLh/76+vv+mm7f/q4Ho/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk
        6/+cZev/nnLe/7ut0f/19fX/ra2t//j4+P+jo6P/2dnZ/8vLy//5+fn/q6ur//n5+f+2trb/s7Oz//Pz
        8//6+vr/+vr6//r6+v/6+vr/rKys//r6+v+3t7f/s7Oz//X19f/7+/v/wZ/y/6Zz7f+lc+3/pXLt/6Rx
        7f+jcO3/o2/t/7GS3f+tra3/+/v7//z8/P/8/Pz//Pz8//z8/P+ioqL/+/v7//z8/P+Kior/srKy/9TU
        1P+7u7v/nJyc/9jL6/+1i/D/o2/t/6Jt7P+hbOz/oGvs/59q7P+eaOv/nWfr/51m6/+pfuX/3tPv/+bm
        5v/e3t7/6+vr//Dw8P/a2tr/6enp//T09P/9/f3//f39//39/f/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8fHw//Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy/97e3f+ysrH/2NjY/5GRkf+2trX/6Ojo/8rK
        yv+8vLz/1MLs/6Jy5f+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+cZev/nGXr/7GJ6v+hl6//8PDv/4+P
        j/+urq7/6+vr/8rKyv/BwcH/+fn5/8TExP+0tLT/8PDw//r6+v/6+vr/+vr6/8vLy//CwsL/+vr6/8TE
        xP+1tbX/8fHx//v7+//18fr/sITw/6d17v+mdO3/pnPt/6Vy7f+kce3/pHDt/5mJr/+4uLj/+Pj4//v7
        +//8/Pz//Pz8/8LCwv+ysrL/6+vr/8PDw/+3t7f/9PT0/7yzyv+siN//pXPt/6Vy7f+kcO3/o2/t/6Ju
        7P+hbOz/oGvs/59q7P+leOb/3Mvz/+Pj4//f39//+fn5/+Xl5f/d3d3/8PDw/+vr6//q6ur/+vr6//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vL/8vLy//Pz8v/z8/P/wMDA//Pz8//09PP/9PT0//T09P/09PT/8/P0/8Os5f+hber/m2Pr/5tk
        6/+bZOv/nGTr/5xk6/+cZOv/nGXr/51m6//Cq+T/xMTD//j4+P/4+Pj/+Pj4/9LS0v/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6/9PT0//6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/m2vj/qXju/6h2
        7v+nde7/pnTt/6Z07f+lc+3/qnrs//Lt+f/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/ZxPb/qXju/6d27v+mdO3/pnPt/6Vy7f+kcO3/o2/t/6Ju7P+peu7/1r/1//v6/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//Ly8v/09PT//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Dw8P/x8fD/8fHw//Hx8f/y8vH/8vLx//Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/19fT/9fX0//Hu9f/HqfD/nmjs/5tj6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/8Sl
        8f/39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/RtvT/qXju/6l47v+od+7/p3bu/6d17v+mdO3/vJbx//r6
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8/8+y9P+pee7/qHfu/6d27v+nde7/pnPt/6Vy
        7f+ndu7/z7P1//f1+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8PDw//Hx8P/x8fD/8fHw//Hx
        8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X1
        9f/s5vT/vZrv/5xk6/+bZOv/m2Tr/5xk6/+cZOv/xKXx//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//n4
        +v+8lvH/qnru/6l57v+peO7/qHfu/6h27v+nde7/1Lz1//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/z7P1/6p67v+pee7/qHfu/6h27v+odu7/x6bz//Pt+v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////w8O//8PDw//Hx8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/5tzz/7SM7v+bZOv/m2Tr/5xk
        6//EpPH/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//Dp+f+wg/D/q3vv/6p67v+qee7/qXnu/6l4
        7v+qeu7/6uD4//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//Ps/T/q3vv/6p67v+pee7/v5zy/+3k
        +v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8PDw//T08//y8vL/9PT0//Pz
        8//09PP/9PT0//X19f/19fX/9vb1/93O8/+rfu3/m2Tr/8Oj8P++vr7/q6ur/+bm5v/39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/9vb2//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/5+fn/+fn5/97N9v+sfe//rH3v/6t87/+re+//qnru/6p57v+0ie//9/T6//v7+//39/f/+/v7//v7
        +//7+/v/+/v7/8+09P+sfe//uZLx/+XX9//5+fn/+/v7//r6+v/6+vr/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/i4uL/3Nzc//j4+P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHx//Ly8f/MzMv/1tbV/6Gh
        of/X19f/w8PC/6SkpP+0tLT/5eXl/5aWlv+enp7/wsLC/6enp/+oqKj/y8vL/7y8vP+Hh4f/29va/6Sk
        pf/Aq9//s5nY/6Kiov+oqKf/ycnJ/7y8vP/w8PD/+Pj3/6Wlpf/IyMj/zc3N/6ampv+4uLf/4+Pj/7a2
        tv+vr6//sbGx/76+vv+Kior/39/f/6ampv/a2tr/zc3N/6urq/+pqan/0tLS/6yO1v+tgO3/r4Lv/6x/
        7f+ugO//rX/v/6x+7v+6neP/4eHh/62trf/7+/v/+/v7/6enp//Y2Nj/wKvf/6mXwv+4uLn/8PDw/6Cg
        oP+qqqr/1tbW/7q6uv+7u7v/4ODg/9PT0/+zs7P/7Ozs/83Nzf/o6Oj/6Ojo/9XV1f/b29v/7e3t/+np
        6f/6+vr//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////w8O//8PDv//Dw
        7//w8PD/8fHw//Hx8P/x8fD/iYmJ/9bW1f/y8vH/n5+f/9XV1f/ExMP/h4eG/66urv/IyMj/tra2/5qa
        mv/c3Nz/rKys/87Ozv/MzMv/9fX1/6ioqP/19fX/oqKh/9jY2P/Jycn/paWl/9HR0f/Jycj/8PDw/6am
        pv/Hx8f/iYmJ/46Ojv/r6+v/iIiI/7Gxsf/FxcX/tLS0/62trf+xsbH/+fn5/6urq//6+vr/pKSk/9jY
        2P/Pz8//sLCw/9DQ0P/T09P/ioqK/7Gxsf/R0dH/oqKi//n5+f/39/f/jo6O/+Hh4f/7+/v/2dnZ/9DQ
        0P/7+/v/paWl/9fX1//S0tL/iYmJ/7Gxsf/U1NT/v7+//6ampv/r6+v/v7+//9nZ2f/h4eH/+/v7/8nJ
        yf/7+/v/y8vL/+jo6P/o6Oj/19fX/+np6f/s7Oz/+Pj4/+Tk5P/x8fH/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+/v7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/c3Nz/sLCw/9fX
        1v+MjIv/qqqq/+Tk5P+9vbz/sbGw/+np6f+7u7v/s7Oy//Pz8v/BwcH/qqqq/8vLy//IyMf/vb29//X1
        9f+qqqr/ra2s/+np6f+5ubn/tbW1/9jY2P+0tLP/yMjI//b29v+enp7/vLy8/7e3tv/AwMD/tLS0/+jo
        6P+mpqb/r6+v/9LS0v/Kysr/wcHB//n5+f+tra3/r6+v/+7u7v/FxcX/rKys/9PT0//BwcH/tra2//Hx
        8f/BwcH/sbGx/+np6f/j4+P/t7e3/+Dg4P/7+/v/ra2t//v7+/+Pj4//r6+v//Dw8P/CwsL/tra2//Pz
        8//ExMT/wcHB//v7+//Q0ND/vr6+/+Hh4f/b29v/2NjY//v7+//Pz8//1NTU//b29v/f39//4eHh//Hx
        8f/m5ub/7+/v//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx/7+/vv/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/9PTz//T08//f39//2tra//T09P/Pz87/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b2
        9v/39/b/9/f3/8vLy//Ozs7/9fX1//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/T09P/+fn5//n5
        +f/5+fn/+vr6//r6+v/j4+P/4uLi//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/j4+P/4eHh/8fHx//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//o6Oj/6+vr//v7
        +//i4uL/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////v7+7/7+/u/+/v7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T0
        9P/19fT/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly
        8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9/f2//f39//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b29f/29vb/9vb2//b29v/29vb/9/f2//f3
        9//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+vr6//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/8fHx//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//b29f/29vb/9vb2//b29v/09PT/9/f2//b29v/39/f/9/f3//f39//39/f/+Pj3//j4
        +P/39/f/9/f3//j4+P/4+Pj/+fn4//n5+f/19fX/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/9/f3//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8vLx//Ly8f/MzMv/1tbW/7u7u//e3t3/8/Py/6en
        p//z8/P/8/Pz/6CgoP+qqqr/0NDQ/7Ozs/+qqqr/ra2s/7q6uv/u7u7/9fX1/4mJiP+Xl5b/4ODg/5eX
        l/+fn5//xcXF/8fHxf+bm5v/9/f3/729vf+JiYn/3Nzc/6mpqP+pqan/z8/P//j4+P/Q0ND/3d3d/6ur
        q//5+fn/+fn5/7y8vP/o6Oj/+fn5/6urq//5+fn/+vr6/6Ojo/+srKz/1dXV/7e3t/+ysrL/sLCw/7+/
        v//z8/P/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/iYmJ/9bW1f/y8vH/u7u7/93d3f/z8/L/np6d//Ly8v/z8/P/qamp/+Li4f+4uLf/sbGx/6en
        p/+tra3/7u7t/6Wlpf/ExMT/o6Oj/+jo6P+tra3/uLi4/5ubm//f39//oqKi/7Ozs//n5+f/9/f3/6qq
        qv/39/f/rq6u/9DQz//Pz8//jY2N/93d3f/4+Pj/2NjY/8zMzP/5+fj/vLy8/+jo6P/5+fn/oaGh//j4
        +P/5+fn/ra2t/+Li4v++vr7/tbW1/6+vr/+xsbH/8vLy/6ampv/Nzc3/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////u7u3/7u7t/+7u7f/u7u7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/c3Nz/sbGw/9fX1v+UlJT/pKSk/93d
        3f+9vbz/rKyr/+Dg4P/Jycn/u7u7/+jo5/+jo6L/rKys/8zMzP+ysrL/xcXF//T09P+cnJz/u7u7/8jI
        yP+9vb3/tbW0//Hx8f/CwsL/7e3t/8jIyP/Jycn/wMDA//f39//CwsL/q6ur/9DQ0P/h4eH/tbW1/93d
        3f/4+Pj/rKys//f39/+UlJT/qqqq/+Tk5P/AwMD/sLCw/+fn5//Nzc3/v7+//+vr6/+mpqb/r6+v/9PT
        0/+2trb/zMzM//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx/+Xl5P+traz/2tra//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/09PT/9fX0/8vLyv/b29v/9fX1//X19f/19fX/9vb1//b29v/29vb/9vb2//b2
        9v/Q0ND/9/f2//f39//h4eH/39/f//f39//39/f/+Pj3//j4+P/j4+P/3t7e/+np6f+ysrL/4eHh//j4
        +P/5+fj/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7e3s/+7u7f/u7u3/7u7t/+7u
        7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/09PT/9PT0//X1
        9P/19fX/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+//7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//09PP/9PTz//T09P/09PT/9PT0//X19P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9vb2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb2//b29v/29vb/9vb2//b2
        9v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/L/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/8nJyf/T09L/ubm5/6+vr//k5OT/nZ2d/6enpv/S0tH/tra1/+np
        6f/x8fD/mZmY/6iop/+7u7v/oqKi/7Kysv/k5OP/oqKi/7Kysv/l5eX/p6em/7Kysf/c3Nv/u7u7/6ys
        rP/V1dX/9PTz/8zMzP/Z2dn/qKio//T09P/09PT/u7u6/7a2tf/s7Oz/oKCg/6mpqf/X19f/u7u6/+/v
        7v/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//4+Pf/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f+Hh4b/0tLS/+7u
        7v+pqaj/6urp/+/v7v+mpqb/3d3d/7m5uP/p6ej/oqKi/8DAwP+YmJj/vLy7/8DAv/+FhYX/rKys/8fH
        x/+GhoX/ra2s/8fHx/+QkJD/oqKi//Pz8v+ysrH/rq6u/+vr6/+Kior/2dnY//T08//V1dT/yMjI//T0
        9P+pqan/9PTz//X19P+qqqr/39/f/8DAwP/u7u7/pKSk/8jIx//29vX/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9/f2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3t/9ra2f+urq3/09PS/5GRkf+srKv/6urp/8XFxP+4uLf/5+fn/7Cw
        r//BwcH/7+/u/5aWlv/S0tL/2NjX/7y8u/+vr67/5+fn/7y8vP+wsK//6Ojn/6ampv/IyMj/5OTk/7+/
        vv+wsK//6urp/97e3v+ysrL/2NjY//T08/+pqaj/8/Pz/5KSkv+ysrL/8PDw/8rKyf+9vbz/7e3t/7Oz
        s//Hx8f/9PT0//X19f/29vX/9vb1//b29f/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f2//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j49//4+Pf/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/3t7d/+3t7P/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//3d3c/8DAwP/v7+//8fHw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/wsLC//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz/9/f
        3//a2tn/4uLh//T09P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//b2
        9f/29vX/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        9//4+Pf/+Pj3//j49//4+Pf/+Pj3//j49//39/f/9/f3//f39//39/f//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb1//b29f/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/9PTz//T08//09PP/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/39/b/9/f2//f39v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx
        8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f3
        9v/39/b/9/f2//b29v/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//w8O//8PDv//Dw7//w8O//8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//Hx8f/0tLR/56enf/S0tH/vr69/5yc
        nP+mpqX/0NDP/7i4t/+vr6//5eXk/6CgoP+wsK//4eHg/7W1tf/p6ej/8PDv//Dw7//w8O//8PDw//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X1
        9P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////q6un/6urp/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/hoaF/9HR0P/s7Oz/nJyb/9HR0P+/v77/paWk/9zc2/+3t7f/qKin/+rq6f/u7u3/hISE/6ur
        qv/ExMP/6Ojn/6Ghof+/v7//8PDv//Dw7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz
        8//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//Y2Nf/ra2s/9HR0P+lpaT/pqal/9/f
        3v/Dw8L/t7e2/+Xl5f+RkZD/rKyr/+np6P+5ubj/ra2t/+Tk5P+urq3/wcHA/+7u7f/v7+//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6uno/+rq6f/q6un/6urp/+vr
        6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/9zc3P/t7ez/7u7t/+7u
        7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////p6ej/6uno/+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X1
        9P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+np6P/p6ej/6uno/+rq
        6f/q6un/6urp/+vr6v/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////6ejn/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr
        6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v7//v7+//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Ly
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////o6Of/6ejn/+np
        6P/p6ej/6eno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t
        7P/t7ez/7e3s/+3t7P/t7ez/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T0
        8//09PP//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+vq
        6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly
        8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6Ofm/+jo
        5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Py//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////n5+b/6Ofm/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+fn
        5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no5//p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr
        6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/6+vq/+7u
        7f/u7u3/7u7t/+7u7f/u7u7/6+vq/+/v7v/v7+7/7+/u/+/v7v/v7+//7Ozs//Dw7//w8O//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/7u7u//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/7+/u//Ly8f/y8vL/8vLy//Ly8v/y8vL/8PDw//Ly
        8v/y8vL/8PDw//Ly8v/x8fH/8fHx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Ly8v/n5+f/5+fn//Hx
        8f/y8vL/8vLy//Ly8v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////5+bl/+fn5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no
        5//Dw8P/zs7N/9bW1f/Ozs3/6urp/6GhoP+ysrH/y8vK/6ysq/+jo6L/p6em/7Ozsv9/f3//1NTT/+zs
        6//s7Ov/7e3s/76+vv+UlJP/7e3s/5+fnv+vr67/4ODg/6Sko//u7u3/7u7t/7e3tv+oqKf/0dHR/7e3
        tv+EhIT/1dXU/5ycm/+lpaT/09PS/5+fn//R0dH/w8PD/9bW1f/W1tX/5eXk//Dw7//w8PD/8PDw/7m5
        uf+FhYX/2NjX/+bm5f+4uLf/8fHw/6Kiov+goKD/3Nzb//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLx/6Gh
        oP+ysrL/5+fm/6ioqP/V1dT/0NDP/7Cwr/+8vLz/5eXk/7m5uP/BwcD/4+Pj/8fHx//Jycn/4eHh/9nZ
        2f/IyMj/6enp/9nZ2f/p6en/6enp/+Li4v/m5ub/7u7u//Dw8P/x8fH/8vLx//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn5v/o6Of/g4OD/87NzP/p6ej/4+Pi/52dnP/l5eT/wsLB/42N
        jP/k5OP/qqmp/6CgoP+np6b/6+vq/52dnP/s7Ov/7Ozr/+zs6//s7Ov/nJyb/6ysq//d3dz/g4OC/6mp
        qP/Dw8L/mZmZ/+3t7P/u7u3/rq6t/6qqqf/n5+b/7u7t/6SkpP/v7+7/pqam/9vb2v+7u7v/nZ2c/8/P
        z//Dw8P/z8/P/9DQz//j4+L/8PDv//Dw7//w8O//8PDv/6Wlpf/w8PD/8PDw//Dw8P/x8fD/qamo/+Li
        4f+3t7b/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/hISE/6urq//Nzc3/pqam/9LS0v/R0dD/tbW0/+/v
        7v/v7+7/wMDA/+Pj4v/W1tX/y8vL/9vb2v/i4uH/8vLx/9XV1P/y8vH/2dnY/+jo5//p6ej/4+Pi/+vr
        6v/u7u3/8PDv//Hx8P/y8vH//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAdAAAAMgAAAEoAAABf/////+bm5f/m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn
        5v/U1NP/qqqp/87NzP+wr67/wcHA/7y8u/+3trX/ysrK/9PT0v+cnJz/paWk/8TEw//r6+r/nJyc/+vr
        6v/s7Ov/7Ozr/+jo5/+6urn/4+Pi/7+/v/+4uLj/rKyr/+Tk4/+4uLf/p6en/9vb2/+7u7r/rKyr/+Xl
        5P/AwMD/ubm4/+7u7f/Dw8P/uLi3/+jo5/+mpqX/p6em/+Li4f+0tLP/tLSz/9fX1/+vr6//sLCv//Dw
        7/+0tLP/n5+e//Dw7//w8O//8PDv//Dw8P+kpKT/x8fH/8rKyv+wsLD/sLCw//Hx8P/x8fD/8fHw//Hx
        8P+6urn/sLCv/+rq6f+srKz/srKy/+jo6P/Hx8f/vLy8/+rq6v/U1NT/z8/P/+7u7v/U1NT/ysrK/+Hh
        4f/d3d3/3d3d//Hx8f/a2tr/3t7e/+/v7//m5ub/6Ojo/+7u7v/t7e3/8PDw//Hx8f//////AAAAXwAA
        AEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASgAA
        AF//////5uXk/+bm5f/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o6Of/6Ojn/87Ozf+6urn/6Ojn/+np
        6P/p6ej/6uno/+rq6f/q6un/6urp/8fHxf+3t7b/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/Jycj/7u7t/+7u7f/u7u3/7u7u/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/u/7q6uf+7u7v/7+/v/+/v7//Y2Nf/8PDv//Dw7//w8O//8PDv/9nZ
        2P/Dw8P/8PDw/7u7u/+7u7v/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/k5OT/5+fn//Hx8f/i4uL/8fHx//Hx8f/x8fH/8fHx//Hx
        8f/x8fH/8fHx//Hx8P/x8fD/8fHw//////8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABJAAAAXv/////m5eT/5uXk/+bl5P/m5uX/5+bl/+fm
        5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo5//p6Of/6eno/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+rq
        6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+7/7+/u/+/v7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD//////wAA
        AF4AAABJAAAAMgAAAB0AAAAOAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAcAAAAMAAA
        AEcAAABb/////+Xl5P/l5eT/5uXk/+bl5P/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo
        5//p6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8PDw//Dw8P/w8PD/8PDw//Dw8P//////AAAAWwAAAEcAAAAwAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAFAAAADQAAABoAAAAsAAAAQgAAAFT/////7Ozr/+Xk4//l5eT/5uXk/+bl
        5P/m5uX/5ubl/+fm5f/n5uX/5+fm/+fn5v/o5+b/6Ojn/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/q6un/6+vq/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//v7+//7+/v//Dw
        7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        7//w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw7//w8O//9PTz////
        //8AAABUAAAAQgAAACwAAAAaAAAADQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAALAAAAFgAA
        ACYAAAA5AAAASf//////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////wAAAEkAAAA5AAAAJgAAABYAAAALAAAABAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAAAEcAAABJAAAASgAA
        AEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEoAAABKAAAASQAA
        AEcAAABBAAAAOAAAACwAAAAeAAAAEQAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AAwAAAAUAAAAHgAAACcAAAAtAAAAMAAAADIAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAyAAAAMAAAAC0AAAAnAAAAHgAAABQAAAAMAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAAwAAAARAAAAFgAAABoAAAAcAAAAHQAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB0AAAAcAAAAGgAAABYAAAARAAAADAAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA4AAAAOAAAADgAAAA4AAAANAAAACwAAAAgAAAAGAAAAAwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABQAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABQAAAAUAAAAEAAAAAwAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABAAAAAQAAAAEAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////
        ///////////////8AAAAAAAAAAB/////////8AAAAAAAAAAAH////////+AAAAAAAAAAAAf////////A
        AAAAAAAAAAAD////////wAAAAAAAAAAAAf///////4AAAAAAAAAAAAD///////+AAAAAAAAAAAAAP///
        ////gAAAAAAAAAAAAB///////4AAAAAAAAAAAAAP//////+AAAAAAAAAAAAAB///////gAAAAAAAAAAA
        AAP//////4AAAAAAAAAAAAAB//////+AAAAAAAAAAAAAAP//////gAAAAAAAAAAAAAB//////4AAAAAA
        AAAAAAAAP/////+AAAAAAAAAAAAAAA//////gAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAA/////+A
        AAAAAAAAAAAAAAH/////gAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAAB/
        ////gAAAAAAAAAAAAAAAP////4AAAAAAAAAAAAAAAB////+AAAAAAAAAAAAAAAAP////gAAAAAAAAAAA
        AAAAB////4AAAAAAAAAAAAAAAAP///+AAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAAAAAP///4AAAAAA
        AAAAAAAAAAB///+AAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAD///4AAAAAAAAAAAAAAAAAf//+A
        AAAAAAAAAAAAAAAAD///gAAAAAAAAAAAAAAAAAf//4AAAAAAAAAAAAAAAAAH//+AAAAAAAAAAAAAAAAA
        A///gAAAAAAAAAAAAAAAAAP//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB///AAAAAAAAAAAAAAAAAA///wAAAAAAAAAAAAAAAAAP//+AAAAAAAAAAAAAAAAAH///w
        AAAAAAAAAAAAAAAAD////AAAAAAAAAAAAAAAAD//////////////////////////////////////////
        //8oAAAAMAAAAGAAAAABACAAAAAAAIAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFBQBFhYWARkZGQIdHR0CISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEh
        IQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECHx8fAhsbGwIXFxcBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACUlJQQJCQkOBgYGFgYGBhcHBwcXCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgI
        CBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIFwcHBxcGBgYUEhISCy0s
        LAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAFBQUAQkJCQ4AAAAuAAAARwAAAEsAAABMAAAATAAAAEwAAABMAAAATAAA
        AEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAA
        AEsAAABEAAAALgsLCxQrKysFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWAQYGBhUAAABH+/v7//n5+f/6+vr++/v6//v7
        +//7+/v/+/v7/vz8/P/8/Pz+/Pz8//39/f/9/f3+/f39//39/f/+/v7+/v7+//7+/v/9/f3+/Pz8//r6
        +v/4+Pj+9fX1//Pz8//q6ur5VlZWkwICAj0AAAAbJCQkBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZAQYGBhcAAABL+fn5//b2
        9v/39/f++Pj4//n5+f/6+vr/+fn5/vr6+v/6+vr++/v7//z8/P/7+/v+/f39//39/f/9/f3+/v7+//7+
        /v/8/Pz++vr6//f39//z8/P+7+/v/+vr6//m5ub+09PT+2tra6gFBQVGAQEBHiIiIggnJycBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dAgcH
        BxgAAABM+fn5/vb29v739/f++Pj4/vn5+f75+fn++fn5/u/v7/739/f++/v7/vv7+/77+/v+/Pz8/vz8
        /P79/f3+/f39/v7+/v78/Pz++vr6/vf39/7z8/P+7+/v/uvr6/7l5eX+19fX/tDQ0P1/f3+8BAQERwAA
        ACEREREKKioqAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+09PT/7y8vP/ExMT/wsLC/sfHx//V1dX+0NDQ/9XV
        1f/Hx8f+ycnJ//v7+//W1tb+09PT/8vLy//29vb+5+fn/9LS0v/AwMD+sbGx/+jo6P+3t7f+oaGh/729
        vf/U1NT/jY2NyRAQEFUAAAAnERERCyoqKgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+8/Pz/+np6f/19fX/8vLy/vDw
        8P/19fX+9PT0//Hx8f/v7+/++Pj4//z8/P/o6Oj+9fX1//j4+P/5+fn+9fX1/+3t7f/n5+f+6urq/+zs
        7P/Y2Nj+19fX/8LBwf/h4eH/09PT/piYmNIWFhZeAAAAKRISEg0qKioCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5/vb29v739/f++Pj4/vn5
        +f75+fn++fn5/vr6+v76+vr++/v7/vn5+f7o6Oj+/Pz8/vz8/P79/f3+/f39/v39/f79/f3++/v7/vf3
        9/709PT+8PDw/u3t7f7o6Oj+4ODf/sTExP7b29v+4+Pj/tLS0v6kpKTfFhYWXwAAACkRERELKSkpAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b2
        9v/39/f+0tLS/8HBwf+2trb/v7+//sPDw//Ozs7+wsLC/8nJyf/BwcH+1tbW/9ra2v/Kysr+vr6+/8TE
        xP/Dw8P+zs7O/8rKyv/U1NT+1dXV/7m5uf+qqqr+r6+v/6CgoP+1tbX/9fX1/uTk5P/T09P/pKSk4BYW
        Fl8AAAAoEBAQCiYmJgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+fn5//b29v/39/f+8/Pz/+jo6P/z8/P/9PT0/vT09P/u7u7+8PDw//X19f/19fX+9vb2/+jo
        6P/q6ur++Pj4//j4+P/w8PD+9/f3//X19f/y8vL+6urq/9/f3//m5ub+4+Li/9DQ0P+ysrL//f39/vT0
        9P/j4+P/0dHR/peXl9MQEBBXAAAAIxEREQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/b++Pj4//j4+P/5+fn/+fn5/vr6+v/6+vr++vr6//v7
        +//7+/v+/Pz8//z8/P/8/Pz+/f39//7+/v/9/f3+/Pz8//r6+v/4+Pj+9fX1//Hx8f/t7e3+6urq/9zb
        2/+5ubn//f39/v39/f/09PT/4uLi/tHR0f6MjIzKBAQESgEBASAjIyMIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vb29f729vb+9/f3/vj4+P75+fn+1NTU/tDQ
        0P7V1dX+0dHR/sHBwf7AwMD+y8vL/r+/v/6/v7/+yMjI/s3Nzf7Hx8f+0dHR/tzc3P7W1tb+1tbW/tnZ
        2f69vb3+qqqq/r29vf7Jycn+urq6/r29vP7Nzc3+3dzc/t/f3/7R0dH+fHx8vQUFBUoAAAAeIyMjBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn4//b29f/29vb+9/f3//j4
        +P/5+fn/9PT0/uPj4//x8fH+9vb2//T09P/09PT+8vLy/+/v7//39/f++Pj4//Ly8v/09PT+9fX1//j4
        +P/s7Oz+5eXl//Dw8P/u7u7+6Ojo/+fn5//l5eX/3d3d/tjY2P/T09P/zc3N/s7Ozv/W1dX/zs7O/Who
        aKoCAgJCAQEBFy0tLQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vX1
        9f729vb+9/f3/vf39/74+Pj++fn5/vn5+f75+fn+9PT0/vDw8P7o6Oj++/v7/vz8/P78/Pz+/Pz8/v39
        /f79/f3+/f39/v39/f78/Pz++vr6/vj4+P719fX+8/Pz/vDw8P7t7e3+6+vr/unp6f7n5ub+5OTk/uLi
        4v7h4OD+4uLi/tXV1ftTU1OVAAAAMhUVFQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+Pj4//X19f/29vb+0dHR/8nJyf/Kysr/0dHR/sLCwv/Dw8P+zc3N/83Nzf/AwMD+u7u7/8XF
        xf/z8/P+1dXV/8zMzP/Hx8f+vr6+/7q6uv/b29v+3t7e/83Nzf/IyMj+z8/P/+fn5//x8fH/7+/v/u7u
        7v/s7Oz/6+vr/uvr6//q6ur/6+vr/uvr6//t7e35AAAARwcHBxQrKysBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+Pj4//X19f/19fX+8vLx/+zs7P/z8/P/9PT0/u7u7v/w8PD+9vb2//b2
        9v/09PT+9fX1//T09P/7+/v+8/Pz//j4+P/39/f+9/f3//f39//4+Pj+9PT0//Dw8P/19fX+9PT0//b2
        9v/09PT/8/Pz/vHx8f/w8PD/7+/v/u/v7//v7+//7+/v/u/v7//19fX/AAAASwkJCRYzMzMBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vT09P719fX+9vb2/vf39/74+Pf++Pj4/vn5
        +f75+fn++vr6/vr6+v76+vr++/v7/vv7+/77+/v+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/v7+/v39
        /f78/Pz++/v7/vn5+f74+Pj+9vb2/vX19f709PT+8/Pz/vLy8v7y8vL+8vLy/vPz8/74+Pj+AAAATAoK
        Chc8PDwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4//T09P/19fX+0dHR/8LC
        wv/BwcD/xMTE/snJyf/Pz8/+4uLi//r6+v/6+vr++/v7//v7+//7+/v+/Pz8//z8/P/8/Pz+/f39//39
        /f/9/f3+/v7+//7+/v/9/f3+/f39//v7+//6+vr/+fn5/vn5+f/4+Pj/9/f3/vf39//29vb/9/f3/vf3
        9//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj3//T0
        9P/19fT+8fHw/+/v7v/y8vL/7u7u/vT08//z8vP+4tb0/9C28//6+vr++/v7/8qu8v+gbOv+o3Dr/+jc
        +P/8/Pz+/f39//39/f/9/f3+/v7+//7+/v/9/f3+/v7+/82x9P/k1/j/+/r7/vv7+//6+vr/+vr6/vr6
        +v/6+vr/+vr6/vr6+v/8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9/f3/vPz8/709PT+9fX1/vb29v729vb+9/f3/uzl9v7AnvD+oWzs/rmT7/76+vr++vr6/vPv
        +f6nd+z+lFno/qp77P739Pv+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/f39/rSM7/6YX+n+u5bw/u/n
        +v79/f3+/Pz8/vz8/P78/Pz+/Pz8/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9/f3//Pz8//09PP+9fX0//X19f/u6fX/xafw/qBs6/+dZ+r+roLu/97N
        9f/5+fn++vr6//v7+//o3ff+nGXq/5Zd6f/BoPH+/Pz8//z8/P/8/Pz+/f39//39/f/9/f3+/f39/9/O
        9/+qe+3/lVvp/pde6f/DovL/9O78/v7+/v/+/v7//f39/v7+/v/+/v7/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9/f2//Pz8v/z8/P+4t/m/8iv6v+mdez/nGXq/qBw
        5f+6o9z+3tvh/+/v7//5+fn++vr6//r6+v/6+vr+z7bz/5tk6v+bY+r+3s32//z8/P/8/Pz+/f39//39
        /f/8/Pz+/f39//39/f/49fz/0bj1/qJv6/+UWOn/nWjq/s6z9P/39Pz//f39/v7+/v/+/v7/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2/vLy8v7z8/L+tJXf/ptj
        6v6eaev+waTp/s7J1f7e3t7+29vb/uLi4v75+fn++fn5/vr6+v76+vr++Pb6/rmS7/6dZuv+p3fs/vHr
        +v77+/v+/Pz8/vz8/P78/Pz+/Pz8/vz8/P78/Pz+/f39/vTu+/7IqvP+mF/p/pFV6P7CofL+/f39/v39
        /f7+/v7+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2//Ly
        8f/y8vL+w6Tu/5pi6v+eaev/x6vw/u7p9f/39/f+9/f3//j4+P/5+fn++fn5//r6+v/5+fn++vr6//Dq
        +f+rfe3+n2rr/7qU8P/59/v+/Pz8//z8/P/8/Pz+/Pz8//39/f/9/f3//Pz8/vTv+//KrfP/m2Pq/pRZ
        6f/Do/L//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9vb2//Ly8f/y8vL+4N3k/66V0f+fbeb/m2Pr/qRz6v/Ir+r+7+zz/+Tk5P/f39/+29vb/93d
        3f/29vb+5OTk/+Dg4P/Sw+j+pHLt/6Nv7P/MtO3+5eXl//v7+//s7Oz+4uLi/93d3f/d2+H/y7Tr/ql5
        7f+bZOv/onDq/sOq6P/s6fH//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9vb1/vHx8P7x8fH+19fX/sjIyP7Tztr+wKHs/p1o6v6bZOr+pnnn/r2s
        1f7Q0ND+3d3d/tra2v74+Pj+5eXl/t/f3/7t7e3+yq3z/qZz7f6ldOv+z8Xc/vv7+/7g4OD+29vb/se4
        3P6rgub+o2/s/qRx7P7HqfH+6OPv/uzs7P7v7+/++/v7/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Hx8P/x8fD+8vLx//Pz8v/z8/P/9PTz/uni
        8/+8me7+nWfr/7aO7v/39/f++Pj3//j4+P/5+fn++fn5//r6+v/5+fn+9vP5/7uV8P+od+7+to3w//Xx
        +v/6+vr++/v7/8Gf8v+qeu7/xqby/vDp+v/8/Pz/+/v7/vz8/P/8/Pz/+/v7/vz8/P/9/f3/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Dw7//x8fD+4+Pj/9nZ
        2f/Q0ND/1NTU/tTU0//b29z+v7PR/7Wb2v/ExMT+6Ojo/9jY2P/W1tb+3d3d/9jY2P/Z2dn+4eHh/87E
        2v+theT+sIfr/8u06v/p6en+5ubm/72n3f/Mwdz/3Nzd/uXl5f/p6en/7Ozs/uTk5P/19fX/+/v7/vv7
        +//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX0/u/v
        7/7w8O/+1tbV/sTEw/7MzMz+1NTU/tjY1/7V1dX+1NTU/tfX1v7W1tX+29vb/r29vf7Ozs3+09PT/tnZ
        2f7Y2Nj+3Nzc/tDQ0P7Y2Nj+3d3d/t7e3v7i4uL+z8/P/tjY2P7d3d3+4eHh/t7e3v7q6ur+5+fn/uzs
        7P7y8vL++fn5/vr6+v78/Pz+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9fX0/+/v7v/v7+/+8PDw//Hx8P/y8vH/8vLy/vPz8v/z8/P+9PT0//X19P/19fX+9vb1//b2
        9v/29vb+9/f3//j4+P/4+Pj++Pj4//n5+f/5+fn++vr6//r6+v/5+fn++vr6//r6+v/6+vr/+vr6/vr6
        +v/6+vr/+vr6/vv7+//7+/v/+vr6/vv7+//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9PT0/+7u7v/v7+7+8PDv//Dw8P/x8fD/4+Pj/uPj4v/k5OT+3Nzc/9fX
        1//V1dX+4eHh/9XV1f/S0tL+29vb/9ra2v/Z2dn+5ubm/+Tk5P/s7Oz+7Ozs/+/v7//a2tr+1tbW/+fn
        5//4+Pj/+fn5/vr6+v/6+vr/+vr6/vr6+v/6+vr/+vr6/vr6+v/7+/v/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9PTz/+7u7f/u7u7+7+/u//Dw7//w8PD/1tbV/sPD
        w//U1NT+3d3c/9HR0f/S0tL+0NDQ/83Nzf/Y2Nf+2tra/9nZ2f/X19f+1dXV/+fn5//S0tL+0dHR/+Li
        4v/e3t7+zc3N/9vb2//39/f/+fn5/vr6+v/6+vr/+fn5/vr6+v/6+vr/+fn5/vr6+v/7+/v/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/u3t7P7u7u3+7u7u/u/v
        7v7w8O/+8PDv/vHx8P7x8fH+8vLx/vLy8v7z8/P+8/Pz/vT09P709PT+9fX1/vX19f729vX+9vb2/vf3
        9v739/f+9/f3/vf39/74+Pj++Pj4/vj4+P74+Pj++Pj4/vn5+f75+fn++fn5/vn5+f75+fn++fn5/vn5
        +f77+/v+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/+3t
        7P/t7ez+4ODf/9nZ2P/U1NP/3d3d/tjY1//Ozs7+1tbW/9fX1//Y2Nf+2NjX/+Xl5P/j4+P+4+Pi/93d
        3f/e3t7+7+/u//b29v/29vb+9/f2//f39//39/f+9/f3//j49//4+Pj/+Pj4/vj4+P/4+Pj/+Pj4/vj4
        +P/4+Pj/+Pj4/vj4+P/6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8/Py/+zs6//t7ez+09PS/83NzP/Y2Nf/1tbV/snJyf/MzMv+0NDP/83Nzf/Q0ND+1NTT/9jY
        2P/c3Nz+0tLS/+Dg4P/e3t3+4uLi//X19f/19fX+9vb2//b29v/29vb+9/f2//f39//39/f/9/f3/vf3
        9//39/f/9/f3/vj49//4+Pf/9/f3/vf39//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8vLy/uvr6v7s7Ov+7e3s/u3t7P7u7u3+7u7t/u/v7v7v7+/+8PDv/vDw
        8P7x8fD+8fHx/vLy8f7y8vL+8/Py/vPz8/7z8/P+9PTz/vT09P709PT+9fX0/vX19f719fX+9fX1/vb2
        9f729vb+9vb2/vb29v729vb+9vb2/vb29v729vb+9vb2/vb29v75+fn+AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8vLx/+vr6v/r6+r+3t7e/9TU0//Ozs3/1tbV/tbW
        1f/a2tr+6eno//Dw7//w8PD+8fHw//Hx8f/x8fH+8vLy//Pz8v/z8/L+8/Pz//T08//09PP+9PT0//T0
        9P/09PT+9fX1//X19f/19fX/9fX1/vX19f/29vX/9vb1/vb29f/29vX/9vb1/vb29f/5+fn/AAAATAsL
        CxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHx/+rq6f/r6+r+0dHQ/8rK
        yv/T09L/ysrK/tPT0v/U1NT+3Nzb/+/v7//w8O/+8PDv//Hx8P/x8fD+8fHx//Ly8f/y8vH+8vLy//Pz
        8v/z8/P+8/Pz//T08//09PP+9PT0//T09P/09PT/9PT0/vX19P/19fX/9fX0/vX19f/19fX/9fX0/vX1
        9f/4+Pj/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHw/unp
        6P7q6un+6+vq/uvr6v7s7Ov+7Ozr/u3t7P7t7ez+7u7t/u7u7f7v7+7+7+/v/vDw7/7w8O/+8PDw/vHx
        8P7x8fH+8fHx/vLy8f7y8vL+8vLy/vPz8v7z8/L+8/Pz/vPz8/7z8/P+8/Pz/vT08/709PP+9PTz/vT0
        8/709PP+9PTz/vT08/74+Pj+AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8PDw/+no5//p6ej+6urp/+vr6v/r6+r/7Ozr/uzs6//t7ez+7e3s/+7u7f/u7u3+7+/u/+/v
        7v/v7+/+8PDv//Dw8P/w8PD+8fHw//Hx8f/x8fH+8vLx//Ly8f/y8vL+8vLy//Pz8v/z8/L/8/Py/vPz
        8v/z8/P/8/Pz/vPz8//z8/P/8/Pz/vPz8//39/f/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8PDv/+jn5v/o6Of+6eno/+rq6f/q6un/6+vq/uzs6//s7Ov+7e3s/+3t
        7P/t7ez+7u7t/+7u7f/v7+7+7+/u/+/v7//w8O/+8PDv//Dw8P/w8PD+8fHw//Hx8P/x8fH+8vLx//Ly
        8f/y8vH/8vLx/vLy8f/y8vH/8vLx/vLy8v/y8vL/8PDv/vLy8f/39/b/AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHx8fAggICBcAAABM7+/u/ufm5f7n5+b+xcXE/srKyf66ubn+t7e2/ri4
        t/7R0dD+3Nzb/r29vf63t7b+ysrJ/ry8u/6/v7/+xMTE/rq6uf7Jycn+2NjX/uPj4v7CwsH+5ubm/r6+
        vf7a2tr+8PDw/snJyP6+vr3+ysrJ/tTU1P7T09L+0tLS/t7e3f7j4+L+5+fm/u7u7f729vX+AAAATAoK
        Chc9PT0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxsbAQcHBxYAAABL7+7u/+bl5P/n5uX+4+Lh/9jY
        1//j4+L/4uLh/t7e3f/j4+L+6eno/+fn5v/n5+b+5ubl/+fn5v/j4+L+6urp/+jo5//o6Oj+5OTj/+Dg
        3//m5uX+7+/v/+Dg3//Z2dn+8PDv/+zs7P/q6ur/7Ozr/u3t7P/u7u3/6urp/uzs6//v7+7/8PDv/vDw
        7//29vX/AAAASwkJCRY1NTUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkYAQYGBhMAAABB9fX1/u/u
        7v7v7+7+8O/v//Dw7//w8O/+8fDw/vHx8P/x8fH+8vLx//Ly8v/z8/L+8/Py//Pz8v/z8/P+8/Pz//T0
        8//09PP+9PTz//T09P/09PT+9PT0//X19P/19fT+9fX0//X19P/19fX+9fX1/vX19f/19fX+9fX1/vX1
        9f/19fX+9fX1/vX19f75+fn+AAAAQQgICBMxMTEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoa
        GgkAAAAgAAAAMgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAAyAAAAICAgIAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADY2NgEoKCgGJiYmCioqKgsyMjILOTk5Czk5OQs5OTkLOTk5Czk5OQs5OTkLOTk5Czk5
        OQs5OTkLOTk5Czk5OQs6OjkLOjo5Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6
        Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLNzc3Cy4uLgspKSkKLCwsBj8/PwEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAA///AADwAAAA//8AAOAAAAB//wAA4AAAAD//AADgAAAAD/8AAOAA
        AAAH/wAA4AAAAAP/AADgAAAAAf8AAOAAAAAA/wAA4AAAAAB/AADgAAAAAH8AAOAAAAAAPwAA4AAAAAAf
        AADgAAAAAA8AAOAAAAAADwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA8AAAAAAPAADwAAAAAA8AAP///////wAAKAAAACAAAABAAAAAAQAgAAAA
        AACAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWFgITExMFGBgYBRwcHAUcHBwFHBwcBRwc
        HAUcHBwFHBwcBRwcHAUcHBwFHBwcBRwcHAUcHBwFHBwcBRkZGQUUFBQEGhoaAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFhYCAwMDHwAAADsAAAA+AAAAPwAA
        AD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPgAAADkDAwMfKCgoBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEwQAAAA7+vr6//n5
        +f/6+vr/+/v7//v7+//8/Pz//Pz8//z8/P/9/f3//f39//7+/v/9/f3/+/v7//f39//z8/P/6+vr/GBg
        YJoAAAAsHx8fCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYBQAA
        AD74+Pj/9/f3//j4+P/5+fn/+vr6//T09P/7+/v//Pz8//39/f/9/f3//f39//39/f/5+fn/9PT0/+7u
        7v/n5+f/1tbW/3Z2drIBAQE0FhYWCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/j4+P/39/f/z8/P/9TU1P/Q0ND/2tra/9fX1//X19f/4uLi/+Li4v/e3t7/6enp/+Hh
        4f/R0dH/z8/P/8zMzP+wsLD/1dXV/4eHh8MGBgY9ExMTDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/+Pj4//f39//4+Pj/+fn5//r6+v/6+vr/+/v7//Ly8v/9/f3//f39//39
        /f/9/f3/+vr6//X19f/v7+//6enp/9nZ2f/R0dH/3Nzc/5WVldAJCQlEExMTDgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/4+Pj/9/f3/9DQ0P/Ozs7/1NTU/9DQ0P/Pz8//09PT/+Pj
        4//Ly8v/1dXV/8vLy//T09P/4ODg/8zMzP/CwsL/v7+//6urqv/09PT/29vb/5SUlNEGBgY+EhISDAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/j4+P/39/b/+Pj4//n5+f/6+vr/+vr6//v7
        +//8/Pz//Pz8//z8/P/9/f3//f39//z8/P/4+Pj/8/Pz/+7u7v/n5+f/wcDA//39/f/z8/P/2tra/4WF
        hcMBAQE3GxsbCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/+Pj3//b29v/4+Pf/+fn5/9fX
        1//Z2dn/3Nzc/8vLy//Pz8//0dHR/9zc3P/Pz8//39/f/9ra2v/W1tb/1NTU/7+/v//Ozs7/wsLC/8rJ
        yf/V1dX/1dXV/3Nzc7MAAAAwHx8fBwAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/39/f/9vb2//f3
        9//4+Pj/+vr6//r6+v/09PT/8vLy//v7+//8/Pz//f39//39/f/+/v7//Pz8//n5+f/19fX/8vLy/+3t
        7f/o6Oj/5OTk/9/f3//c3Nz/29vb/15eXpwEBAQiJiYmAQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/f3
        9//29vX/1NTU/9jY2P/f39//xsbG/9fX1//V1dX/y8vL/+3t7f/j4+P/zs7O/8zMzP/d3d3/2tra/9nZ
        2f/d3d3/8vLy//Dw8P/t7e3/7Ozs/+vr6//s7Oz/7u7u/AAAADsjIyMEAAAAAAAAAAAAAAAAAAAAABwc
        HAUAAAA/9/f2//X19f/29vb/+Pj3//n5+f/6+vr/+vr6//v7+//7+/v//Pz8//z8/P/9/f3//f39//7+
        /v/9/f3//Pz8//r6+v/39/f/9fX1//Pz8//y8vL/8vLy//Ly8v/29vb/AAAAPi0tLQUAAAAAAAAAAAAA
        AAAAAAAAHBwcBQAAAD/29vb/9fX0/9PT0//S0tL/2dnZ/9DQ0P/s6u7/+Pb6//f0+v/i0/f/6uD4//z8
        /P/9/f3//f39//7+/v/9/f3/+vj8//n3+//6+vr/+fn5//j4+P/39/f/+Pj4//r6+v8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAcHBwFAAAAP/b29v/09PT/9fX1//b29v/39/f/2sj0/6t97f/t5fj/+vr6/7KJ
        7v+YX+n/7OP5//z8/P/9/f3//f39//7+/v/v5/v/pHHs/9nF9v/8/Pz//Pz8//v7+//7+/v//f39/wAA
        AD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9vb1//T08//19fT/4dTz/7CF7f+ibuv/zLHy//f2
        +f/6+vr/8u35/6Ju6/+rfe3/+fj7//z8/P/9/f3//f39//v5/f/Lr/T/mmPq/6p77f/k1vj//v7+//7+
        /v/+/v7/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/19fX/8/Pz/7OU3/+dZuv/u5rp/8zH
        0//W1tb/9vb2//r6+v/6+vr/4dL2/51m6//HqPL//Pz8//z8/P/9/f3//f39//39/f/07/v/wJ7x/5Va
        6f/BoPH//f39//7+/v8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/X19P/y8vL/wqPu/5xl
        6//AoO//7ej0//f39//4+Pj/+fn5//n5+f/6+vr/yazy/6Bs7P/i1Pf/+/v7//z8/P/8/Pz//Pz8//Tv
        +//DovL/mWDq/8Oi8f/9/f3//f39/wAAAD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9PT0//Ly
        8f/Kysr/x7rZ/6yB6/+daOn/uJzf/9DP0v/T09P/6enp/9/f3//c297/to3w/6h66v/e2eP/6enp/9fW
        2f+wl9P/onDo/7KH7v/ZzOz/6+vr//v7+//9/f3/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAA
        AD/09PP/8fHw//Ly8f/z8/L/8/Pz/9bD8f+nd+z/4dns//j49//4+Pj/+fn5//r6+v/t5vj/rX/u/8Ce
        8f/6+vr/8On5/7SK7//ezfb/+/v7//r6+v/5+fn//Pz8//z8/P8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/Pz8//w8O//ysrJ/8jIx//Ozs7/y8vK/8nHy//Ny8//zs7O/8PDw//Ly8v/z8/P/9DQ
        0P/MxNb/z8Tf/93b4P/U09b/zczP/9TU1P/k5OT/5OTk/+7u7v/6+vr//Pz8/wAAAD80NDQFAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/8vLy/+/v7//w8PD/8fHx//Ly8v/z8/P/9PTz//X19P/29vX/9vb2//f3
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/AAAAPzQ0
        NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/y8vH/7u7u/+/v7//w8PD/0NDQ/9LS0f/V1dX/xcXE/8nJ
        yf/Ly8v/1tbV/8nJyf/a2tr/2NjY/9jY2P/a2tr/ysrK/+7u7v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +/8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/Hx8f/u7u3/7+/u/+/v7//w8PD/8fHx//Ly
        8f/z8/L/9PTz//T09P/19fX/9vb1//b29v/39/f/9/f3//j4+P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5
        +f/5+fn/+vr6/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABwcGwUAAAA/8fHw/+3t7P/MzMv/0NDP/9bW
        1v+7u7r/xcXE/83Nzf/Q0M//2NjY/9ra2f/Q0ND/6urp//X19f/29vb/9vb2//f39//39/f/9/f3//f3
        9//39/f/+Pj3//f39//5+fn/AAAAPzMzMwUAAAAAAAAAAAAAAAAAAAAAGxsbBQAAAD/w8O//7Ozr/+3t
        7P/u7u3/7u7u/+/v7v/w8O//8fHw//Hx8f/y8vL/8/Py//Pz8//09PP/9PT0//X19P/19fX/9fX1//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//j4+P8AAAA/MzMzBQAAAAAAAAAAAAAAAAAAAAAbGxsFAAAAP+/v
        7v/r6+r/ysrJ/8nJyP/Q0M//x8fG/+Tk4//w8O//8PDw//Hx8P/y8vH/8vLy//Pz8v/z8/P/9PTz//T0
        9P/09PT/9PT0//X19P/19fX/9fX1//X19f/19fX/9/f3/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABsb
        GwUAAAA/7u7t/+rq6f/r6+r/7Ozr/+zs6//t7ez/7u7t/+/v7v/v7+//8PDv//Dw8P/x8fD/8fHx//Ly
        8f/y8vL/8/Py//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T08//29vb/AAAAPzMzMwUAAAAAAAAAAAAA
        AAAAAAAAGxsbBQAAAD/t7ez/6Ojn/+np6P/q6un/6+vq/+zs6//t7ez/7e3s/+7u7f/v7+7/7+/u//Dw
        7//w8PD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8fHx//X19f8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAZGRkFAAAAPuzs6//n5+b/zs7N/8TEw//BwcD/0NDP/9bW1f/Kysn/0NDP/8fH
        xv/R0dH/ysrJ/9bW1f/V1dT/3Nzb/8/Pzv/w8PD/xMTD/9PT0v/e3t3/3Nzc/+Pj4//r6+r/9PTz/wAA
        AD4uLi4FAAAAAAAAAAAAAAAAAAAAABUVFQQAAAA38fDw/+zs6//t7Oz/7u3t/+7u7f/v7+7/8PDv//Dw
        7//x8fD/8fHw//Hx8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PP/9PTz//T0
        8//39/b/AAAANycnJwQAAAAAAAAAAAAAAAAAAAAAHR0dAQwMDBQAAAAoAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACgODg4ULy8vAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09PQFKSkoCWFdXAlhY
        VwJYWFgCWFhYAlhYWAJYWFgCWFhYAllZWAJZWVgCWVlZAllZWQJZWVkCWVlZAllZWQJZWVkCWVlZAllZ
        WQJZWVkCWlpZAlpaWQJRUVECQUFAAQAAAAAAAAAAAAAAAAAAAADgAAf/wAAD/8AAAf/AAAD/wAAAf8AA
        AD/AAAAfwAAAD8AAAAfAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD8AAADygAAAAQAAAAIAAAAAEA
        IAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4OCQoKCiEODg4iDg4OIg4ODiIODg4iDg4OIg4O
        DiILCwsgFhYWCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCiH4+Pj/+vr5//n5+f/8/Pz//f39//39
        /f/4+Pj/7e3t/mtra50VFRUSAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4i9/f3/+Xl5f/n5+f/5+fn//Dw
        8P/w8PD/6Ojo/93d3f/MzMz/f39/tBQUFBgAAAAAAAAAAAAAAAAAAAAADg4OIvf39//k5OT/5ubm/+bm
        5v/q6ur/5+fn/+rq6v/c3Nz/xMTE//Dw8P9+fn60EhISEwAAAAAAAAAAAAAAAA4ODiL39/f/+Pj4/+np
        6f/j4+P/5ubm/+np6f/t7e3/5ubm/9vb2//W1tb/2tnZ/2tra58YGBgKAAAAAAAAAAAODg4i9vb2/+bm
        5v/m5ub/6Ojo/+zs7P/q6ur/6enp/+vr6//w8PD/8fHx/+/v7//w8PD+FBQUIAAAAAAAAAAADg4OIvX1
        9f/k5OT/39rl/9/R8//h0/b/28j2//39/f/9/f3/4dL3//Lt+f/5+fn/+vr6/xkZGSIAAAAAAAAAAA4O
        DiL09PT/ybHs/7aV5f/k3e7/+Pf6/7KJ7v/u5vn//Pz8//Do+v++m/H/zrP0//7+/v8aGhoiAAAAAAAA
        AAAODg4i8/Pz/7yj3/++nO7/3tfo/+zs7P/g2Or/uJLv/+/u8f/g2en/wqLx/8iu7P/8/Pz/GhoaIgAA
        AAAAAAAADg4OIvLy8f/e3t3/2dTf/8e53P/g4OD/4+Pj/82+4//azuv/0cTj/+Tg6v/x8fH/+/v7/xoa
        GiIAAAAAAAAAAA4ODiLx8fD/8PDw/+Li4f/h4eD/4ODg/+Pj4//p6en/6enp/+vr6//6+vr/+vr6//r6
        +v8aGhoiAAAAAAAAAAAODg0i7+/u/97e3v/d3dz/3t7d/+Tk5P/l5eX/8/Pz//f39//39/f/+Pj4//j4
        +P/5+fn/GRkZIgAAAAAAAAAADQ0NIu3t7P/b29r/3d3c/+3t7P/x8fH/8vLy//Pz8//09PT/9fX1//X1
        9f/29vX/9/f3/xkZGSIAAAAAAAAAAA0NDSLr6+r/6+rp/+zs6//u7u3/7+/u//Dw7//x8fD/8vLx//Ly
        8v/z8/L/8/Pz//T09P8ZGRkiAAAAAAAAAAALCwsg7Ozr/9vb2v/b29v/4ODf/97e3f/g4N//5OTj/+Tk
        5P/n5+b/5ubl/+rq6f/y8vL/FRUVIAAAAAAAAAAAHBwcBSIhIRUsKysWLCwsFiwsLBYsLCwWLCwsFiws
        LBYsLCwWLCwsFiwsLBYtLSwWJCQkFSUlJQUAAAAAgB8AAIAPAACABwAAgAMAAIABAACAAQAAgAEAAIAB
        AACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAA==
</value>
  </data>
</root>


================================================
File: DotNetPatcher/Frm_Main.vb
================================================
ï»¿Imports System.Text
Imports System.IO
Imports System.Drawing.Imaging
Imports Core20Reader
Imports Implementer.Engine.Analyze
Imports Implementer.Engine.Context
Imports Implementer.Engine.Checking
Imports Implementer.Engine.Identification
Imports Implementer.Core.Dependencing
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Versions
Imports Implementer.Core.ManifestRequest
Imports Implementer.Core.IconChanger
Imports Implementer.Core.Packer
Imports Implementer.Core.Resources
Imports LoginTheme.XertzLoginTheme
Imports Implementer.Engine.Processing
Imports Implementer.Core.Obfuscation.Protection
Imports Implementer.Core.Obfuscation.Exclusion
Imports System.ComponentModel

Public Class Frm_Main

#Region " ######### FIELDS ######### "
    Private WithEvents m_exclude As Frm_Exclusion
    Private WithEvents m_param As Parameters
    Private WithEvents m_DependenciesChecker As Checker
    Private WithEvents m_IconChanger As Changer
    Private m_rdb As LogInRadioButton()
    Private m_Context As Tasks
    Private m_taskArgs As TaskState
    Private m_controlList As List(Of Control)
    Private m_taskIsRunning As Boolean
    Private m_LanguageType%
    Private m_lastRequested$
#End Region

#Region " ######### FRM MAIN ######### "

    Public Sub New()
        InitializeComponent()
        ShowAboutInfos()
        m_rdb = New LogInRadioButton(2) {RdbManifestChangerAsInvoker, RdbManifestChangerRequireAdministrator, RdbManifestChangerHighestAvailable}
        m_taskArgs = New TaskState
        m_DependenciesChecker = New Checker(LbxDependenciesAdd)
        m_IconChanger = New Changer
    End Sub

    Private Sub Frm_Main_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        If m_taskIsRunning Then
            MessageBox.Show("Please wait while renaming !", "Wait ...", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            e.Cancel = True
        End If
    End Sub

#End Region

#Region " ######### SELECT ASSEMBLY TASK ######### "
    Private Sub BtnSelectFile_Click(sender As Object, e As EventArgs) Handles BtnSelectFile.Click
        Using ofd = New OpenFileDialog
            With ofd
                .Title = "Select a DotNet program (VbNet, C#)"
                .Filter = "Exe|*.exe;*.exe"
                .CheckFileExists = True
                .Multiselect = False
                If .ShowDialog() = DialogResult.OK Then
                    Me.ShowSelectedFileInfos(.FileName)
                End If
            End With
        End Using
    End Sub

    Private Sub TxbSelectedFile_DragEnter(sender As Object, e As DragEventArgs) Handles TxbSelectedFile.DragEnter
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            e.Effect = DragDropEffects.All
        End If
    End Sub

    Private Sub TxbSelectedFile_DragDrop(sender As Object, e As DragEventArgs) Handles TxbSelectedFile.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim MyFiles() As String
            MyFiles = e.Data.GetData(DataFormats.FileDrop)
            TxbSelectedFile.Text = MyFiles(0)
            Me.ShowSelectedFileInfos(TxbSelectedFile.Text)
        End If
    End Sub

    Private Sub ShowSelectedFileInfos(FilePath$)
        Try
            m_param = New Parameters(FilePath, FilePath)
            If m_param.isValidFile Then
                TxbType.Text = m_param.getModuleKind
                TxbVersionInfo.Text = m_param.getAssemblyVersion
                TxbFrameworkInfo.Text = m_param.getRuntime
                TxbCpuTargetInfo.Text = m_param.getProcessArchitecture
                PbxSelectedFile.Image = m_param.getMainIcon
                TxbSelectedFile.Text = FilePath

                TxbPackerFramework.Text = TxbFrameworkInfo.Text
                TxbPackerPlatform.Text = TxbCpuTargetInfo.Text
                TxbPackerSystem.Text = TxbType.Text
            End If
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub OnFileValidationTeminated(sender As Object, e As ValidatedFile) Handles m_param.FileValidated
        If e.isValid Then
            GbxDetection.Enabled = True
            BtnStart.Enabled = True

            Dim result = Identifier.search(e)
            With result
                TxbDetection.Text = .ItemName & If(.ItemType = "Empty", "", " (" & .ItemType & ")")
                PcbDetection.Image = .Pic
                PcbDetection.Tag = .Pic
                TbcTask.Enabled = True

                With e.peInfos.GetVersionInfos
                    TxbVersionInfosTitle.Text = .FileDescription
                    TxbVersionInfosDescription.Text = .Comments
                    TxbVersionInfosCompany.Text = .CompanyName
                    TxbVersionInfosProduct.Text = .ProductName
                    TxbVersionInfosCopyright.Text = .LegalCopyright
                    TxbVersionInfosTrademark.Text = .LegalTrademarks
                    TxbVersionInfosVersion.Text = .FileVersion
                End With

                m_lastRequested = m_param.getExecutionLevel()
                m_rdb.Where(Function(x) x.Tag.ToString = m_lastRequested).First.Checked = True

                Select Case .ItemType
                    Case "Packer", "Obfuscator", "Other"
                        Modified()
                        Exit Select
                    Case "Empty"
                        UnModified()
                        Exit Select
                End Select
            End With
        Else
            GbxDetection.Enabled = False
            TbcTask.Enabled = False
            EmptyTextBox()
        End If
    End Sub

    Private Sub Modified()
        With TbcTask.TabPages
            .Remove(TpPacker)
            .Remove(TpObfuscator)
            .Remove(TpDependencies)
        End With

        ChbVersionInfosEnabled.Checked = True
        ChbVersionInfosEnabled.Enabled = True
        PnlVersionInfosEnabled.Enabled = True
        ChbDependenciesEnabled.Checked = False
        ChbDependenciesEnabled.Enabled = False
        PnlDependenciesEnabled.Enabled = False
        ChbManifestEnabled.Checked = True
        ChbManifestEnabled.Enabled = True
        PnlManifestEnabled.Enabled = True
        ChbObfuscatorEnabled.Checked = False
        ChbObfuscatorEnabled.Enabled = False
        PnlObfuscatorEnabled.Enabled = False
        ChbPackerEnabled.Checked = False
        ChbPackerEnabled.Enabled = False
        PnlPackerEnabled.Enabled = False
        ChbIconChangerEnabled.Checked = True
        ChbIconChangerEnabled.Enabled = True
        PnlIconChangerEnabled.Enabled = True
        CbxDependenciesEmbedded.Visible = False
        LbxDependenciesAdd.Items.Clear()
    End Sub

    Private Sub UnModified()
        With TbcTask
            If Not .TabPages.Contains(TpDependencies) Then .TabPages.Add(TpDependencies)
            If Not .TabPages.Contains(TpObfuscator) Then .TabPages.Add(TpObfuscator)
            If Not .TabPages.Contains(TpPacker) Then .TabPages.Add(TpPacker)
            .SelectedTab = TpAbout
        End With

        ChbVersionInfosEnabled.Checked = True
        ChbVersionInfosEnabled.Enabled = True
        PnlVersionInfosEnabled.Enabled = True
        ChbDependenciesEnabled.Checked = True
        ChbDependenciesEnabled.Enabled = True
        PnlDependenciesEnabled.Enabled = True
        ChbManifestEnabled.Checked = True
        ChbManifestEnabled.Enabled = True
        PnlManifestEnabled.Enabled = True
        ChbObfuscatorEnabled.Checked = True
        ChbObfuscatorEnabled.Enabled = True
        PnlObfuscatorEnabled.Enabled = True
        ChbPackerEnabled.Checked = False
        ChbPackerEnabled.Enabled = True
        PnlPackerEnabled.Enabled = False
        ChbIconChangerEnabled.Checked = True
        ChbIconChangerEnabled.Enabled = True
        PnlIconChangerEnabled.Enabled = True

        ChbObfuscatorResourcesContent.Enabled = True
        ChbObfuscatorResourcesContent.Checked = True
        ChbObfuscatorResourcesEncryption.Enabled = True
        ChbObfuscatorResourcesEncryption.Checked = True
        ChbObfuscatorResourcesCompress.Enabled = True
        ChbObfuscatorResourcesCompress.Checked = True
        ChbObfuscatorNamespacesRP.Enabled = True
        ChbObfuscatorNamespacesRP.Checked = True
        ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = True
        ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
        ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Enabled = True
        ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked = True
        ChbObfuscatorTypesRP.Enabled = True
        ChbObfuscatorTypesRP.Checked = True
        ChbObfuscatorMethodsRP.Enabled = True
        ChbObfuscatorMethodsRP.Checked = True
        ChbObfuscatorPropertiesRP.Enabled = True
        ChbObfuscatorPropertiesRP.Checked = True
        ChbObfuscatorFieldsRP.Enabled = True
        ChbObfuscatorFieldsRP.Checked = True
        ChbObfuscatorEventsRP.Enabled = True
        ChbObfuscatorEventsRP.Checked = True
        ChbObfuscatorAttributesRP.Enabled = True
        ChbObfuscatorAttributesRP.Checked = True
        ChbObfuscatorAntiDebug.Enabled = True
        ChbObfuscatorAntiDebug.Checked = True
        ChbObfuscatorAntiDumper.Enabled = True
        ChbObfuscatorAntiDumper.Checked = True
        ChbObfuscatorAntiIlDasm.Enabled = True
        ChbObfuscatorAntiIlDasm.Checked = True
        ChbObfuscatorAntiTamper.Enabled = True
        ChbObfuscatorAntiTamper.Checked = True
        ChbObfuscatorBooleanEncrypt.Enabled = True
        ChbObfuscatorBooleanEncrypt.Checked = True
        ChbObfuscatorIntegersEncode.Enabled = True
        ChbObfuscatorIntegersEncode.Checked = True
        ChbObfuscatorStringsEncrypt.Enabled = True
        ChbObfuscatorStringsEncrypt.Checked = True
        ChbObfuscatorHideCalls.Enabled = True
        ChbObfuscatorHideCalls.Checked = True
        ChbObfuscatorInvalidOpcodes.Enabled = True
        ChbObfuscatorInvalidOpcodes.Checked = True
        ChbObfuscatorInvalidMetadata.Enabled = True
        ChbObfuscatorInvalidMetadata.Checked = True
        CbxObfuscatorScheme.SelectedIndex = 0
        CbxDependenciesEmbedded.SelectedIndex = 0
        RdbDependenciesMerged.Checked = True
        CbxDependenciesEmbedded.Visible = False
        LbxDependenciesAdd.Items.Clear()

        m_exclude = New Frm_Exclusion
        m_exclude.InitializeExcludeList()
    End Sub

    Private Sub EmptyTextBox()
        'Select Assembly
        TxbVersionInfo.Text = String.Empty
        TxbType.Text = String.Empty
        TxbFrameworkInfo.Text = String.Empty
        TxbCpuTargetInfo.Text = String.Empty
        TxbSelectedFile.Text = String.Empty
        PbxSelectedFile.Image = Nothing
        'Detection
        TxbDetection.Text = String.Empty
        PcbDetection.Image = Nothing
        'Version Infos
        TxbVersionInfosTitle.Text = String.Empty
        TxbVersionInfosDescription.Text = String.Empty
        TxbVersionInfosCompany.Text = String.Empty
        TxbVersionInfosProduct.Text = String.Empty
        TxbVersionInfosCopyright.Text = String.Empty
        TxbVersionInfosTrademark.Text = String.Empty
        TxbVersionInfosVersion.Text = String.Empty
        'Manifest Changer
        m_rdb.All(Function(x) x.Checked = False)
        'Icon Changer
        TxbIconChangerSelect.Text = String.Empty
        PbxIconChangerSelect.Image = Nothing
        'Dependencies
        LbxDependenciesAdd.Items.Clear()
        'Packer
        TxbPackerFramework.Text = "v2.0"
        TxbPackerPlatform.Text = String.Empty
        TxbPackerSystem.Text = String.Empty
    End Sub
#End Region

#Region " ######### CATEGORY TASK ######### "

#Region " About "

    Private Sub ShowAboutInfos()
        LblDNR_Version.Text = My.Application.Info.Version.ToString
        LblDNR_DevelopBy.Text = "3DotDev"
    End Sub

    Private Sub LblWebSite_MouseHover(sender As Object, e As EventArgs) Handles LblWebSite.MouseHover
        LblWebSite.ForeColor = Color.Violet
        LblWebSite.Cursor = Cursors.Hand
    End Sub

    Private Sub LblWebSite_MouseLeave(sender As Object, e As EventArgs) Handles LblWebSite.MouseLeave
        LblWebSite.ForeColor = Color.White
        LblWebSite.Cursor = Cursors.Default
    End Sub

    Private Sub LblWebSite_Click(sender As Object, e As EventArgs) Handles LblWebSite.Click, PbxAboutLogo.Click
        Process.Start(LblWebSite.Text)
    End Sub

    Private Sub LblDNR_DevelopBy_MouseHover(sender As Object, e As EventArgs) Handles LblDNR_DevelopBy.MouseHover, LblDNR_Version.MouseHover, LblAboutCredits.MouseHover
        Dim lbl As Label = TryCast(sender, Label)
        lbl.ForeColor = Color.Violet
    End Sub

    Private Sub LblDNR_Version_MouseLeave(sender As Object, e As EventArgs) Handles LblDNR_DevelopBy.MouseLeave, LblDNR_Version.MouseLeave, LblAboutCredits.MouseLeave
        Dim lbl As Label = TryCast(sender, Label)
        lbl.ForeColor = Color.White
    End Sub

#End Region

#Region " Version Infos "

    Private Sub ChbVersionInfosEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles ChbVersionInfosEnabled.CheckedChanged
        PnlVersionInfosEnabled.Enabled = ChbVersionInfosEnabled.Checked
    End Sub

#End Region

#Region " Manifest "

    Private Sub ChbManifestEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles ChbManifestEnabled.CheckedChanged
        PnlManifestEnabled.Enabled = ChbManifestEnabled.Checked
    End Sub

#End Region

#Region " Icon Changer "

    Private Sub ChbIconChangerEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles ChbIconChangerEnabled.CheckedChanged
        PnlIconChangerEnabled.Enabled = ChbIconChangerEnabled.Checked
        GrayedImage(PbxIconChangerSelect, TxbIconChangerSelect, ChbIconChangerEnabled.Checked, Nothing)
    End Sub

    Private Sub BtnIconChangerSelect_Click(sender As Object, e As EventArgs) Handles BtnIconChangerSelect.Click
        Using ofd = New OpenFileDialog
            With ofd
                .Title = "Select an icon file (*.ico)"
                .Filter = "Icon|*.ico;*.ico"
                .CheckFileExists = True
                .Multiselect = False
                If .ShowDialog() = DialogResult.OK Then
                    m_IconChanger.SelectingIcon(.FileName)
                End If
            End With
        End Using
    End Sub

    Private Sub OnSelectedIcon(ByVal sender As Object, e As CheckEventArgs) Handles m_IconChanger.CheckerResult
        If File.Exists(e.checkedFile) Then
            TxbIconChangerSelect.Text = e.checkedFile
            PbxIconChangerSelect.Image = Icon.ExtractAssociatedIcon(e.checkedFile).ToBitmap
        Else
            MsgBox(e.message, MsgBoxStyle.Exclamation, e.title)
        End If
    End Sub


#End Region

#Region " Dependencies "

    Private Sub ChbDependenciesEnabled_click(sender As Object, e As EventArgs) Handles ChbDependenciesEnabled.Click
        PnlDependenciesEnabled.Enabled = ChbDependenciesEnabled.Checked
        ChbPackerEnabled.Enabled = ChbDependenciesEnabled.Checked

        If ChbDependenciesEnabled.Checked = True Then
            LblDependenciesWarning.ForeColor = Color.LimeGreen()
            LblDependenciesWarning.Text = "(Dependencies detection is enabled)"

            If ChbPackerEnabled.Checked Then
                ChbObfuscatorResourcesContent.Enabled = False
                ChbObfuscatorResourcesContent.Checked = False
                ChbObfuscatorResourcesEncryption.Enabled = False
                ChbObfuscatorResourcesEncryption.Checked = False
                ChbObfuscatorResourcesCompress.Enabled = False
                ChbObfuscatorResourcesCompress.Checked = False
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = False
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
            Else
                ChbObfuscatorResourcesContent.Enabled = True
                ChbObfuscatorResourcesContent.Checked = True
                ChbObfuscatorResourcesEncryption.Enabled = True
                ChbObfuscatorResourcesEncryption.Checked = True
                ChbObfuscatorResourcesCompress.Enabled = True
                ChbObfuscatorResourcesCompress.Checked = True
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = True
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
                GbxPackerLoader.Enabled = False
            End If
        Else
            LblDependenciesWarning.ForeColor = Color.DarkOrange
            LblDependenciesWarning.Text = "(Dependencies detection is disabled)"
            If ChbPackerEnabled.Checked Then
                ChbObfuscatorResourcesContent.Enabled = True
                ChbObfuscatorResourcesContent.Checked = True
                ChbObfuscatorResourcesEncryption.Enabled = True
                ChbObfuscatorResourcesEncryption.Checked = True
                ChbObfuscatorResourcesCompress.Enabled = True
                ChbObfuscatorResourcesCompress.Checked = True
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = True
                ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
                GbxPackerLoader.Enabled = False
                ChbPackerEnabled.Checked = False
            End If
        End If
    End Sub

    Private Sub BtnDependenciesAdd_Click(sender As Object, e As EventArgs) Handles BtnDependenciesAdd.Click
        Using _ofd = New OpenFileDialog
            With _ofd
                .Title = "Select libraries (*.dll)"
                .Filter = "Libraries|*.dll;*.dll"
                .CheckFileExists = True
                .Multiselect = True
                If .ShowDialog() = DialogResult.OK Then
                    m_DependenciesChecker.AddReferences(.FileNames)
                End If
            End With
        End Using
    End Sub

    Private Sub BtnDependenciesDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnDependenciesDelete.Click
        DeleteReferencesItems()
    End Sub

    Private Sub DeleteReferencesItems()
        With LbxDependenciesAdd
            For i As Integer = LbxDependenciesAdd.SelectedIndices.Count - 1 To 0 Step -1
                .Items.RemoveAt(.SelectedIndices(i))
            Next
        End With
    End Sub

    Private Sub LbxDependenciesAdd_KeyUp(ByVal sender As System.Object, ByVal e As KeyEventArgs) Handles LbxDependenciesAdd.KeyUp
        If (e.KeyCode = Keys.Delete) Then
            DeleteReferencesItems()
        End If
    End Sub

    Private Sub OnDependenciesChecked(ByVal sender As Object, e As CheckEventArgs) Handles m_DependenciesChecker.CheckerResult
        If File.Exists(e.checkedFile) Then
            LbxDependenciesAdd.Items.Add(e.checkedFile)
        Else
            MsgBox(e.message, MsgBoxStyle.Exclamation, e.title)
        End If
    End Sub

    Private Sub RdbDependenciesEmbedded_Click(sender As Object, e As EventArgs) Handles RdbDependenciesEmbedded.Click, RdbDependenciesMerged.Click
        If TryCast(sender, LogInRadioButton).Text = "Merging" Then
            CbxDependenciesEmbedded.Visible = False
        Else
            CbxDependenciesEmbedded.Visible = True
        End If
    End Sub

#End Region

#Region " Exclusion rules "

    Private Sub BtnExclusion_Click(sender As Object, e As EventArgs) Handles BtnExclusion.Click
        If Not m_exclude Is Nothing Then
            m_exclude.SettingsState = New ExclusionState(ChbObfuscatorStringsEncrypt.Checked, ChbObfuscatorIntegersEncode.Checked, _
                                                   ChbObfuscatorBooleanEncrypt.Checked, HasRenamingTask, _
                                                   ChbObfuscatorInvalidOpcodes.Checked, ChbObfuscatorHideCalls.Checked)
            With m_exclude
                .Dependencies = LbxDependenciesAdd.Items.Cast(Of String).ToList
                .Title = "Exclusion rules"
                .ViewAssemblyOnly = False
                .FilePath = TxbSelectedFile.Text
                .ShowDialog()
            End With
        End If
    End Sub

    Private Function HasRenamingTask() As Boolean
        Return ChbObfuscatorNamespacesRP.Checked OrElse ChbObfuscatorTypesRP.Checked OrElse ChbObfuscatorMethodsRP.Checked OrElse _
               ChbObfuscatorPropertiesRP.Checked OrElse ChbObfuscatorFieldsRP.Checked OrElse ChbObfuscatorEventsRP.Checked OrElse _
               ChbObfuscatorResourcesContent.Checked
    End Function

    Private Sub Frm_Exclusion_OnShowingExclusionInfos(e As ExcludeList) Handles m_exclude.OnShowingExclusionInfos
        If e.itemsCount <> 0 Then
            BtnExclusion.BorderColour = Color.BlueViolet
            BtnExclusion.Text = "Exclusion rules (" & e.itemsCount & ")"
        Else
            BtnExclusion.BorderColour = Color.DimGray
            BtnExclusion.Text = "Exclusion rules (0)"
        End If
        BtnExclusion.Invalidate()
        m_param.ExcludeList = e
    End Sub
#End Region

#Region " Obfuscator "

    Private Sub ChbObfuscatorEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles ChbObfuscatorEnabled.CheckedChanged
        PnlObfuscatorEnabled.Enabled = ChbObfuscatorEnabled.Checked
        BtnExclusion.Enabled = ChbObfuscatorEnabled.Checked
    End Sub

    Private Sub ChbObfuscatorNamespacesRP_CheckedChanged(sender As Object, e As EventArgs) Handles ChbObfuscatorNamespacesRP.CheckedChanged
        PnlObfuscatorNamespacesGroup.Enabled = ChbObfuscatorNamespacesRP.Checked
    End Sub

    Private Sub CbxObfuscatorScheme_SelectedIndexChanged(sender As Object, e As EventArgs) Handles CbxObfuscatorScheme.SelectedIndexChanged
        m_LanguageType = CbxObfuscatorScheme.SelectedIndex
    End Sub

    Private Sub ChbObfuscatorReplaceNamespaceByEmptyNamespaces_CheckedChanged(sender As Object, e As EventArgs) Handles ChbObfuscatorReplaceNamespaceByEmptyNamespaces.CheckedChanged
        If ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked = True Then
            If ChbObfuscatorTypesRP.Checked = False Then
                ChbObfuscatorTypesRP.Checked = True
            End If
        End If
    End Sub

    Private Sub ChbObfuscatorTypesRP_CheckedChanged(sender As Object, e As EventArgs) Handles ChbObfuscatorTypesRP.CheckedChanged
        If ChbObfuscatorTypesRP.Checked = False Then
            If ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked = True Then
                ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked = False
            End If
        End If
    End Sub

#End Region

#Region " Packer "

    Private Sub ChbPackerEnabled_Click(sender As Object, e As EventArgs) Handles ChbPackerEnabled.Click
        PnlPackerEnabled.Enabled = ChbPackerEnabled.Checked
        If ChbPackerEnabled.Checked Then
            ChbObfuscatorResourcesContent.Enabled = False
            ChbObfuscatorResourcesContent.Checked = False
            ChbObfuscatorResourcesEncryption.Enabled = False
            ChbObfuscatorResourcesEncryption.Checked = False
            ChbObfuscatorResourcesCompress.Enabled = False
            ChbObfuscatorResourcesCompress.Checked = False
            ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = False
            ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
            GbxPackerLoader.Enabled = True
        Else
            ChbObfuscatorResourcesContent.Enabled = True
            ChbObfuscatorResourcesContent.Checked = True
            ChbObfuscatorResourcesEncryption.Enabled = True
            ChbObfuscatorResourcesEncryption.Checked = True
            ChbObfuscatorResourcesCompress.Enabled = True
            ChbObfuscatorResourcesCompress.Checked = True
            ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Enabled = True
            ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked = False
            GbxPackerLoader.Enabled = False
            ChbPackerEnabled.Checked = False
        End If
    End Sub

    Private Sub TpPacker_Enter(sender As Object, e As EventArgs) Handles TpPacker.Enter
        If ChbDependenciesEnabled.Checked = True Then
            LblPackerWarning.Visible = False
            ChbPackerEnabled.Enabled = True
        Else
            LblPackerWarning.Visible = True
            ChbPackerEnabled.Enabled = False
            ChbPackerEnabled.Checked = False
        End If
    End Sub

#End Region

#End Region

#Region " ######### START TASK ######### "

    Private Sub BtnStart_Click(sender As Object, e As EventArgs) Handles BtnStart.Click
        If Not BgwRenameTask.IsBusy Then
            BtnStart.Enabled = False
            m_taskIsRunning = True
            EnabledControls(False)
            GrayedImage(PbxSelectedFile, TxbSelectedFile, False, Nothing)
            GrayedImage(PcbDetection, TxbDetection, False, TryCast(PcbDetection.Tag, Image))
            GrayedImage(PbxIconChangerSelect, TxbIconChangerSelect, False, Nothing)
            BgwRenameTask.RunWorkerAsync(CbxDependenciesEmbedded.SelectedIndex)
        End If
    End Sub

    Private Sub EnabledControls(state As Boolean)
        GbxSelectFile.Enabled = state
        GbxDetection.Enabled = state
        TbcTask.Enabled = state
        BtnStart.Visible = state
    End Sub

    Private Sub BgwRenameTask_DoWork(sender As Object, e As DoWorkEventArgs) Handles BgwRenameTask.DoWork
        Try
            m_param.RenamingAccept = New RenamerState(ChbObfuscatorNamespacesRP.Checked, _
                                                      ChbObfuscatorTypesRP.Checked, _
                                                      ChbObfuscatorMethodsRP.Checked, _
                                                      ChbObfuscatorPropertiesRP.Checked, _
                                                      ChbObfuscatorAttributesRP.Checked, _
                                                      ChbObfuscatorEventsRP.Checked, _
                                                      ChbObfuscatorFieldsRP.Checked, _
                                                      ChbObfuscatorMethodsRP.Checked, _
                                                      ChbObfuscatorMethodsRP.Checked, _
                                                      ChbObfuscatorReplaceNamespaceByEmptyNamespaces.Checked, _
                                                      ChbObfuscatorRenameMainNamespaceOnlyNamespaces.Checked, _
                                                      m_LanguageType, _
                                                      m_param.ExcludeList, _
                                                      ChbObfuscatorExcludeReflection.Checked)

            With m_taskArgs

                .MergeReferences = New DependenciesInfos(ChbDependenciesEnabled.Checked, _
                                                         LbxDependenciesAdd.Items.Cast(Of String).ToList, _
                                                         RdbDependenciesEmbedded.Checked, _
                                                         CInt(e.Argument))

                .Obfuscation = New ObfuscationInfos(ChbObfuscatorEnabled.Checked, _
                                                    ChbObfuscatorResourcesContent.Checked, _
                                                    ChbObfuscatorResourcesEncryption.Checked, _
                                                    ChbObfuscatorResourcesCompress.Checked, _
                                                    ChbObfuscatorIntegersEncode.Checked, _
                                                    ChbObfuscatorBooleanEncrypt.Checked, _
                                                    ChbObfuscatorStringsEncrypt.Checked, _
                                                    ChbObfuscatorAntiIlDasm.Checked, _
                                                    ChbObfuscatorAntiTamper.Checked, _
                                                    ChbObfuscatorAntiDebug.Checked, _
                                                    ChbObfuscatorAntiDumper.Checked, _
                                                    ChbObfuscatorHideCalls.Checked, _
                                                    ChbObfuscatorInvalidOpcodes.Checked, _
                                                    ChbObfuscatorInvalidMetadata.Checked, _
                                                    True)

                .VersionInfos = If(ChbVersionInfosEnabled.Checked, New Infos(ChbVersionInfosEnabled.Checked, _
                                                                             TxbVersionInfosTitle.Text, _
                                                                             TxbVersionInfosDescription.Text, _
                                                                             TxbVersionInfosCompany.Text, _
                                                                             TxbVersionInfosProduct.Text, _
                                                                             TxbVersionInfosCopyright.Text, _
                                                                             TxbVersionInfosTrademark.Text, _
                                                                             TxbVersionInfosVersion.Text, _
                                                                             TxbVersionInfosVersion.Text), _
                                                                   New Infos(ChbVersionInfosEnabled.Checked, TxbSelectedFile.Text))

                .Manifest = New ManifestInfos(m_lastRequested, m_rdb.Where(Function(currentRequested) currentRequested.Checked).First.Tag.ToString)

                .IconChanger = New IconInfos(ChbIconChangerEnabled.Checked, TxbIconChangerSelect.Text)

                .Packer = New PackInfos(ChbPackerEnabled.Checked, If(ChbIconChangerEnabled.Checked = True, TxbIconChangerSelect.Text, TxbSelectedFile.Text), _
                                        If(m_rdb.Where(Function(y) y.Checked).First.Tag.ToString <> m_lastRequested, m_rdb.Where(Function(y) y.Checked).First.Tag.ToString, m_lastRequested))
            End With

            m_param.TaskAccept = m_taskArgs

            m_Context = New Tasks(m_param, BgwRenameTask)
            With m_Context
                .EmptyTemp()
                .PreparingTask(TxbSelectedFile.Text)

                If ChbDependenciesEnabled.Checked Then
                    Dim dependenciesResult = .CheckDependencies

                    If dependenciesResult.result = String.Empty Then
                        .DependenciesTask()
                        .ManifestTask()
                        .VersionInfosTask()
                        .IconChangerTask()
                        .ObfuscationTask()
                        .PackerTask()
                        .FinalizeTask()
                    ElseIf dependenciesResult.result.StartsWith("Error") Then
                        e.Result = New String() {"Error", dependenciesResult.result}
                        .Clean()
                        Exit Sub
                    Else
                        If .HasObfuscationTask OrElse .HasPackerTask Then
                            .ManifestTask()
                            .VersionInfosTask()
                            .IconChangerTask()
                            .FinalizeTask()
                            e.Result = New String() {"Warning", dependenciesResult.result}
                            Exit Sub
                        Else
                            .ManifestTask()
                            .VersionInfosTask()
                            .IconChangerTask()
                            .FinalizeTask()
                        End If
                    End If
                Else
                    .ManifestTask()
                    .VersionInfosTask()
                    .IconChangerTask()
                    .ObfuscationTask()
                    .PackerTask()
                    .FinalizeTask()
                End If

                e.Result = New String() {"Success", .ProtectedFilePath, CStr(.HasObfuscationTask And m_param.TaskAccept.Obfuscation.InvalidMetadata)}
                .Clean()
            End With
        Catch ex As Exception
            e.Result = New String() {"Error", ex.ToString}
        End Try

    End Sub

    Private Sub BgwRenameTask_ProgressChanged(sender As Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles BgwRenameTask.ProgressChanged
        If Not e.UserState Is Nothing Then
            PgbStart.TextToShow = e.UserState.ToString
            PgbStart.Value = e.ProgressPercentage
        End If
    End Sub

    Private Sub BgwRenameTask_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles BgwRenameTask.RunWorkerCompleted
        If Not e.Result Is Nothing Then
            Select Case e.Result(0)
                Case "Error"
                    PgbStart.Text = e.Result(0).ToString
                    Dim r As New Frm_Result(e.Result(0), e.Result(1).ToString, "")
                    r.ShowDialog()
                    CleanUpMax()
                Case "Warning"
                    PgbStart.Text = e.Result(0).ToString
                    Dim r As New Frm_Result(e.Result(0), "Following dependencies are missing : " & vbNewLine & e.Result(1).ToString, "")
                    r.ShowDialog()
                    CleanUpMin()
                Case "Success"
                    PgbStart.Value = 100
                    PgbStart.Text = "Completed"
                    Dim r As New Frm_Result(e.Result(0), "Your file has been created here : " & vbNewLine & e.Result(1).ToString, e.Result(1).ToString, CBool(e.Result(2)))
                    r.ShowDialog()
                    CleanUpMax()
            End Select
        End If
    End Sub

    Private Sub CleanUpMin()
        m_taskIsRunning = False
        GbxSelectFile.Enabled = True
        GbxDetection.Enabled = True
        TbcTask.Enabled = True
        PgbStart.Text = String.Empty
        BtnStart.Visible = True
        BtnStart.Enabled = True
        PgbStart.Value = 0
        TbcTask.SelectedTab = TpDependencies
        GrayedImage(PbxSelectedFile, TxbSelectedFile, True, Nothing)
        GrayedImage(PcbDetection, TxbDetection, True, TryCast(PcbDetection.Tag, Image))
        GrayedImage(PbxIconChangerSelect, TxbIconChangerSelect, ChbIconChangerEnabled.Checked, Nothing)
    End Sub

    Private Sub CleanUpMax()
        m_taskIsRunning = False
        m_taskArgs.CleanUp()
        If Not m_exclude Is Nothing Then m_exclude.FinalizeExcludeList()
        EmptyTextBox()
        GbxSelectFile.Enabled = True
        GbxDetection.Enabled = False
        PgbStart.Text = String.Empty
        BtnStart.Visible = True
        PgbStart.Value = 0
        TbcTask.SelectedTab = TpAbout
    End Sub

#End Region

#Region " ######### OTHERS ######### "

    Private Sub GrayedImage(pcb As PictureBox, txb As TextBox, ChbEnabled As Boolean, OriginalImage As Image)
        Dim image As Image = Nothing
        If OriginalImage IsNot Nothing Then
            image = OriginalImage
            ProcessGrayedImage(pcb, txb, ChbEnabled, image)
        Else
            If Not pcb.Image Is Nothing AndAlso File.Exists(txb.Text) Then
                image = Icon.ExtractAssociatedIcon(txb.Text).ToBitmap
                ProcessGrayedImage(pcb, txb, ChbEnabled, image)
            End If
        End If
    End Sub

    Private Sub ProcessGrayedImage(pcb As PictureBox, txb As TextBox, ChbEnabled As Boolean, image As Image)
        pcb.Image = image
        If image IsNot Nothing AndAlso ChbEnabled = False Then
            Dim size As Size = image.Size
            Dim newMatrix As Single()() = New Single(4)() {}
            newMatrix(0) = New Single() {0.2125F, 0.2125F, 0.2125F, 0.0F, 0.0F}
            newMatrix(1) = New Single() {0.2577F, 0.2577F, 0.2577F, 0.0F, 0.0F}
            newMatrix(2) = New Single() {0.0361F, 0.0361F, 0.0361F, 0.0F, 0.0F}
            Dim arr As Single() = New Single(4) {}
            arr(3) = 1.0F
            newMatrix(3) = arr
            newMatrix(4) = New Single() {0.38F, 0.38F, 0.38F, 0.0F, 1.0F}
            Dim matrix As New ColorMatrix(newMatrix)
            Dim disabledAttr As New ImageAttributes()
            disabledAttr.ClearColorKey()
            disabledAttr.SetColorMatrix(matrix)
            pcb.Image = New Bitmap(image.Width, image.Height)
            Using gr As Graphics = Graphics.FromImage(pcb.Image)
                gr.DrawImage(image, New Rectangle(0, 0, size.Width, size.Height), 0, 0, size.Width, size.Height, GraphicsUnit.Pixel, disabledAttr)
            End Using
        End If
    End Sub

#End Region

End Class


================================================
File: DotNetPatcher/Frm_Result.Designer.vb
================================================
ï»¿Imports LoginTheme
Imports LoginTheme.XertzLoginTheme

<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _
Partial Class Frm_Result
    Inherits System.Windows.Forms.Form

    'Form remplace la mÃ©thode Dispose pour nettoyer la liste des composants.
    <System.Diagnostics.DebuggerNonUserCode()> _
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Requise par le Concepteur Windows Form
    Private components As System.ComponentModel.IContainer

    'REMARQUEÂ : la procÃ©dure suivante est requise par le Concepteur Windows Form
    'Elle peut Ãªtre modifiÃ©e Ã  l'aide du Concepteur Windows Form.  
    'Ne la modifiez pas Ã  l'aide de l'Ã©diteur de code.
    <System.Diagnostics.DebuggerStepThrough()> _
    Private Sub InitializeComponent()
        Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Frm_Result))
        Me.BgwRenameTask = New System.ComponentModel.BackgroundWorker()
        Me.Frm_ResultThemeContainer = New LoginTheme.XertzLoginTheme.LogInThemeContainer()
        Me.BtnResultOpenAssemblyViewer = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.BtnResultOpenFileDir = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.BtnResultClose = New LoginTheme.XertzLoginTheme.LogInButton()
        Me.PcbResultIcon = New System.Windows.Forms.PictureBox()
        Me.LblResultMessage = New LoginTheme.XertzLoginTheme.LogInLabel()
        Me.Frm_ResultThemeContainer.SuspendLayout()
        CType(Me.PcbResultIcon, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.SuspendLayout()
        '
        'BgwRenameTask
        '
        Me.BgwRenameTask.WorkerReportsProgress = True
        Me.BgwRenameTask.WorkerSupportsCancellation = True
        '
        'Frm_ResultThemeContainer
        '
        Me.Frm_ResultThemeContainer.AllowClose = True
        Me.Frm_ResultThemeContainer.AllowMaximize = False
        Me.Frm_ResultThemeContainer.AllowMinimize = False
        Me.Frm_ResultThemeContainer.BackColor = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_ResultThemeContainer.BaseColour = System.Drawing.Color.FromArgb(CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer), CType(CType(35, Byte), Integer))
        Me.Frm_ResultThemeContainer.BorderColour = System.Drawing.Color.FromArgb(CType(CType(60, Byte), Integer), CType(CType(60, Byte), Integer), CType(CType(60, Byte), Integer))
        Me.Frm_ResultThemeContainer.ContainerColour = System.Drawing.Color.FromArgb(CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer), CType(CType(54, Byte), Integer))
        Me.Frm_ResultThemeContainer.Controls.Add(Me.BtnResultOpenAssemblyViewer)
        Me.Frm_ResultThemeContainer.Controls.Add(Me.BtnResultOpenFileDir)
        Me.Frm_ResultThemeContainer.Controls.Add(Me.BtnResultClose)
        Me.Frm_ResultThemeContainer.Controls.Add(Me.PcbResultIcon)
        Me.Frm_ResultThemeContainer.Controls.Add(Me.LblResultMessage)
        Me.Frm_ResultThemeContainer.Dock = System.Windows.Forms.DockStyle.Fill
        Me.Frm_ResultThemeContainer.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.Frm_ResultThemeContainer.FontSize = 12
        Me.Frm_ResultThemeContainer.HoverColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.Frm_ResultThemeContainer.Location = New System.Drawing.Point(0, 0)
        Me.Frm_ResultThemeContainer.MouseOverColour = System.Drawing.Color.BlueViolet
        Me.Frm_ResultThemeContainer.Name = "Frm_ResultThemeContainer"
        Me.Frm_ResultThemeContainer.ShowControlBox = True
        Me.Frm_ResultThemeContainer.ShowIcon = False
        Me.Frm_ResultThemeContainer.ShowMaximizeButton = False
        Me.Frm_ResultThemeContainer.ShowMinimizeButton = False
        Me.Frm_ResultThemeContainer.Size = New System.Drawing.Size(548, 278)
        Me.Frm_ResultThemeContainer.TabIndex = 0
        '
        'BtnResultOpenAssemblyViewer
        '
        Me.BtnResultOpenAssemblyViewer.BackColor = System.Drawing.Color.Transparent
        Me.BtnResultOpenAssemblyViewer.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnResultOpenAssemblyViewer.BorderColour = System.Drawing.Color.DimGray
        Me.BtnResultOpenAssemblyViewer.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnResultOpenAssemblyViewer.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnResultOpenAssemblyViewer.Location = New System.Drawing.Point(235, 235)
        Me.BtnResultOpenAssemblyViewer.Name = "BtnResultOpenAssemblyViewer"
        Me.BtnResultOpenAssemblyViewer.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnResultOpenAssemblyViewer.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnResultOpenAssemblyViewer.Size = New System.Drawing.Size(205, 25)
        Me.BtnResultOpenAssemblyViewer.TabIndex = 13
        Me.BtnResultOpenAssemblyViewer.Text = "Open protected assembly viewer"
        '
        'BtnResultOpenFileDir
        '
        Me.BtnResultOpenFileDir.BackColor = System.Drawing.Color.Transparent
        Me.BtnResultOpenFileDir.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnResultOpenFileDir.BorderColour = System.Drawing.Color.DimGray
        Me.BtnResultOpenFileDir.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnResultOpenFileDir.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnResultOpenFileDir.Location = New System.Drawing.Point(24, 235)
        Me.BtnResultOpenFileDir.Name = "BtnResultOpenFileDir"
        Me.BtnResultOpenFileDir.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnResultOpenFileDir.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnResultOpenFileDir.Size = New System.Drawing.Size(205, 25)
        Me.BtnResultOpenFileDir.TabIndex = 12
        Me.BtnResultOpenFileDir.Text = "Open the file directory and close"
        '
        'BtnResultClose
        '
        Me.BtnResultClose.BackColor = System.Drawing.Color.Transparent
        Me.BtnResultClose.BaseColour = System.Drawing.Color.FromArgb(CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer), CType(CType(42, Byte), Integer))
        Me.BtnResultClose.BorderColour = System.Drawing.Color.DimGray
        Me.BtnResultClose.HoverColour = System.Drawing.Color.FromArgb(CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer), CType(CType(52, Byte), Integer))
        Me.BtnResultClose.LineColour = System.Drawing.Color.BlueViolet
        Me.BtnResultClose.Location = New System.Drawing.Point(446, 235)
        Me.BtnResultClose.Name = "BtnResultClose"
        Me.BtnResultClose.PressedColour = System.Drawing.Color.FromArgb(CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer), CType(CType(47, Byte), Integer))
        Me.BtnResultClose.ProgressColour = System.Drawing.Color.BlueViolet
        Me.BtnResultClose.Size = New System.Drawing.Size(78, 25)
        Me.BtnResultClose.TabIndex = 11
        Me.BtnResultClose.Text = "Close"
        '
        'PcbResultIcon
        '
        Me.PcbResultIcon.BackColor = System.Drawing.Color.Transparent
        Me.PcbResultIcon.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
        Me.PcbResultIcon.Location = New System.Drawing.Point(24, 88)
        Me.PcbResultIcon.Name = "PcbResultIcon"
        Me.PcbResultIcon.Size = New System.Drawing.Size(64, 64)
        Me.PcbResultIcon.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
        Me.PcbResultIcon.TabIndex = 9
        Me.PcbResultIcon.TabStop = False
        Me.PcbResultIcon.Visible = False
        '
        'LblResultMessage
        '
        Me.LblResultMessage.BackColor = System.Drawing.Color.Transparent
        Me.LblResultMessage.Font = New System.Drawing.Font("Segoe UI", 9.0!)
        Me.LblResultMessage.FontColour = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblResultMessage.ForeColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer))
        Me.LblResultMessage.Location = New System.Drawing.Point(94, 31)
        Me.LblResultMessage.Name = "LblResultMessage"
        Me.LblResultMessage.Size = New System.Drawing.Size(430, 201)
        Me.LblResultMessage.TabIndex = 10
        Me.LblResultMessage.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
        '
        'Frm_Result
        '
        Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.ClientSize = New System.Drawing.Size(548, 278)
        Me.ControlBox = False
        Me.Controls.Add(Me.Frm_ResultThemeContainer)
        Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None
        Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
        Me.MaximizeBox = False
        Me.Name = "Frm_Result"
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent
        Me.TransparencyKey = System.Drawing.Color.Fuchsia
        Me.Frm_ResultThemeContainer.ResumeLayout(False)
        CType(Me.PcbResultIcon, System.ComponentModel.ISupportInitialize).EndInit()
        Me.ResumeLayout(False)

    End Sub
    Friend WithEvents Frm_ResultThemeContainer As LogInThemeContainer
    Friend WithEvents BgwRenameTask As System.ComponentModel.BackgroundWorker
    Friend WithEvents PcbResultIcon As System.Windows.Forms.PictureBox
    Friend WithEvents BtnResultClose As XertzLoginTheme.LogInButton
    Friend WithEvents BtnResultOpenFileDir As XertzLoginTheme.LogInButton
    Friend WithEvents BtnResultOpenAssemblyViewer As LoginTheme.XertzLoginTheme.LogInButton
    Friend WithEvents LblResultMessage As LoginTheme.XertzLoginTheme.LogInLabel
End Class



================================================
File: DotNetPatcher/Frm_Result.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="BgwRenameTask.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAoAMDAQAAEABABoBgAApgAAACAgEAABAAQA6AIAAA4HAAAQEBAAAQAEACgBAAD2CQAAMDAAAAEA
        CACoDgAAHgsAACAgAAABAAgAqAgAAMYZAAAQEAAAAQAIAGgFAABuIgAAgIAAAAEAIAAoCAEA1icAADAw
        AAABACAAqCUAAP4vAQAgIAAAAQAgAKgQAACmVQEAEBAAAAEAIABoBAAATmYBACgAAAAwAAAAYAAAAAEA
        BAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDA
        wAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////cAAA
        AAAAAAAAAAAA//////////////j49wAAAAAAAAAAAAAA//j/+P/////////4j3AAAAAAAAAAAAAA//iI
        iIiIj4iPiIf4iIgAAAAAAAAAAAAA+P////////////+IiPiAAAAAAAAAAAAA///4///4/////4//+I+I
        AAAAAAAAAAAA//iIiIiIj4iIiIiIeI+IgAAAAAAAAAAA//+P////+P////+PiI//iAAAAAAAAAAA/4//
        //j/////////+I//iIAAAAAAAAAA////iI+IiIiIiIiIiIiI+IgAAAAAAAAA////+P/////////4+PiI
        iPhwAAAAAAAA/4/4//+Pj///////////+Pj3AAAAAAAA//iIiIiIiPiIiIiIiPj4/4//AAAAAAAA////
        ////////j///////j/+PAAAAAAAA+P+P//////////////+P////AAAAAAAA//iIiIj//4//////////
        /4//AAAAAAAA//////+P+I2P////+I//////AAAAAAAA+P+P+I2P+ImP////+NiP////AAAAAAAA////
        jYeP//2I////+ImI////AAAAAAAA/4+Hd4j///iYj/////jX2P//AAAAAAAA//jXiIj4//+NiP/////4
        mI//AAAAAAAA+PiYj////4/3eP+P///4iY//AAAAAAAA//iNfY+Ij/j414j/iIiJ3///AAAAAAAA//iI
        h3iI+P+Ph9j4+I2I+P//AAAAAAAA+P//+I2P////+Ij/+IiP//+PAAAAAAAA//iIj4iIiIiIiH2PiIiP
        j4//AAAAAAAA+PiPiIiI+I+P+I+PiI+P////AAAAAAAA////////////////////////AAAAAAAA+P+P
        j4iIiIiI+Pj4j///j///AAAAAAAA//j/iP+PiP+Pj4j4iP////j/AAAAAAAA+P///4////////////+P
        ////AAAAAAAA//iIiIiIj4iI////////////AAAAAAAA+PiPj4+PiPj/j4/4/4//j/j/AAAAAAAA/4//
        /4//////////////////AAAAAAAA+PiIiPj4/4/4/4/4//j/j/+PAAAAAAAA//j4j4//j///////+P//
        /4//AAAAAAAA+P+P/4+P/4+Pj4+P//+P////AAAAAAAA/4//j//4////////j///j/j/AAAAAAAA+Pj4
        /4+P+Pj4+Pj//4+P////AAAAAAAA/4iIiIiIiIiIj4+I+IiIiI+PAAAAAAAA+P+PiP/4/4//j4+I/4//
        ////AAAAAAAA//j///j///+P/////////4//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////AAD///////8AAP//
        /////wAA/AAAAf//AAD8AAAA//8AAPwAAAB//wAA/AAAAD//AAD8AAAAH/8AAPwAAAAP/wAA/AAAAAf/
        AAD8AAAAA/8AAPwAAAAB/wAA/AAAAAD/AAD8AAAAAH8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA////////AAD///////8AAP//
        /////wAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACA
        gACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////9wAAAAAAAAAP////////+PiAAAAAAAAAD/iIiI
        +I+IiIiAAAAAAAAA//////////+I9wAAAAAAAP+IiIj4iI+IiPiAAAAAAAD//////////4j/iAAAAAAA
        /4+PiIj4j4iIiIiAAAAAAP/////////////4iAAAAAD/iPiIj4iPiP+Pj/8AAAAA///////////////4
        AAAAAPiIiP/4///////4/wAAAAD///9/+N////eP//8AAAAA//iNj/iH///42I//AAAAAP+NiI//h4//
        //iY/wAAAAD4h4j///jY//+I2P8AAAAA/4iHiI+IiI+I2I//AAAAAP//iN///4iI+I///wAAAAD4iIiI
        iIiIiIiPj/8AAAAA////////////////AAAAAPj/iIiIiIiIj///jwAAAAD/j///////////j/8AAAAA
        /4iIiIiI////j///AAAAAPj///////j/j////wAAAAD/iIiPj///////j/gAAAAA+P+P//+Pj4/4////
        AAAAAPj4/4+P//////j4/wAAAAD4iIj4iIiIiPiPj48AAAAA////j//////4////AAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AAA//wAAH/8AAA//AAAH/wAAA/8AAAH/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAAAAAgAAAAAQAEAAAAAACAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8A
        AAD/AP8A//8AAP///wAAAAAAAAAAAAD/////cAAAAPj4/4+IAAAA/4/4+I9wAAD/+P//iPgAAPj/j4//
        +AAA/4j4/4//AAD4j/j/+I8AAPiIiIiIjwAA+Ij4j4j/AAD/+P+P//8AAPiPj/+P/wAA+P/4//+PAAD/
        j4/4//8AAI+Pj4+PjwAAAAAAAAAAAP//AADAHwAAwA8AAMAHAADAAwAAwAMAAMADAADAAwAAwAMAAMAD
        AADAAwAAwAMAAMADAADAAwAAwAMAAP//AAAoAAAAMAAAAGAAAAABAAgAAAAAAAAJAAAAAAAAAAAAAAAB
        AAAAAQAAAAAAAJFV6ACUWegAll3pAJhf6QCfbeYAmmLqAJtk6gCcZuoAnWjqAKBt6wCibuwAoHDlAKZ5
        5wCicOoApHPqAKV06wCkcuwApnbsAKh37gCpeu0Aq33tAJqamgCdnZ0AoaGhAKWlpQCpqakAr6+vALGx
        sQC2trYAuLi3ALm5uQC8vLsAvb29AK6V0QC0ld8AtZvaAL2s1QC6o9wAvafdAL+z0QCrguYArYXkAK6C
        7gCwh+sAtY3uALmS7wC8me4Ato3wALqV8ADHuNwAwJ7xAMGk6QDAoewAw6TuAMOq6ADIr+oAy7TqAMy0
        7QDCofEAxabxAMeq8ADIqvMAyq3yAM+28wDNsvQA0LbzANG49QDBwcEAxMTDAMXFxQDJyckAzMzLAM3N
        zQDQ0M8AzsnVAM7E2gDMwdwAz8XcANPO2gDR0dEA1NTTANXV1QDY2NcA2dnZANzb2wDc3NsA29vcAN3d
        3QDg4N8A0sPoAN3b4QDezfYA4d7lAOLW9ADo3fcA5Nf4AOjc+ADi4uEA5OTjAOXl5QDo5+YA6OjnAOjj
        7wDp6ekA7OzrAO3t7QDw7+8A8PDvAOni8wDs5fYA7OnxAO/s8wDu6fUA7+f6APDq+QDz7/kA9O77APTu
        /ADx8fEA9PTzAPX19QD4+PcA9fL5APf0+wD39PwA+Pb6APj1/AD5+fkA/f39AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICA
        gHl5aBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAgICAgICAgICAeWhoaFEXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAIB5gICAgIB5gICAgICAgICAgICAeXloZFFRGAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIB5eVEhRkZGUVFTR0eAU1NHgGhRIRxoIRghURkAAAAAAAAAAAAAAAAAAAAAAAAAAIB5gHloeXlo
        gHl5aICAaHqAgHloaGhoUVNGWVEaAAAAAAAAAAAAAAAAAAAAAAAAAIB5eYCAgICAgICAaICAgICAgICA
        eXloaGRGU2RRGgAAAAAAAAAAAAAAAAAAAAAAAIB5gFFGHEZGR0ZHRlNTSkZGRlFHUVEhGhoYHHlkURwA
        AAAAAAAAAAAAAAAAAAAAAIB5eXlkeXl5aHl5eXloaHmAaIB5eWhTaGRKHIB6ZFEZAAAAAAAAAAAAAAAA
        AAAAAIB5eYCAenqAgICAgICAgICAgICAgHl5aGhTIYCAeWRKGQAAAAAAAAAAAAAAAAAAAIB5eYCAgFFR
        UVFGRkdGRkdRR1FTU1FTRBpERyEhR1NkShcAAAAAAAAAAAAAAAAAAIB5eYCAgHlkcHl5eXloeYB5eXmA
        aGZ5aGhmZFNTUUpHU0cXAAAAAAAAAAAAAAAAAIB5eYB5gHqAgHloaICAgICAgICAgICAeXlwaHloZmRk
        WWRRFwAAAAAAAAAAAAAAAIB5eVFHR1FGRkdRISFHeVNHR0YhU2RHR0doeWhsaGhoaGhoaAAAAAAAAAAA
        AAAAAIB5eXloeXloaIB5eXl5gHmAgHmAgHl5eXl5eXl5eWh5a3lweQAAAAAAAAAAAAAAAIB5eXl5eXmA
        gICAgICAgICAgICAgICAgICAgHl5eXl5cGx5egAAAAAAAAAAAAAAAIB5eVFGIUZHUWSAgICAgICAgICA
        gICAgICAgICAeXl5eXp5gAAAAAAAAAAAAAAAAHp5eWhseWh5eV5CgIBDCxFhgICAgICAgIBDYICAgICA
        gICAgAAAAAAAAAAAAAAAAHl5eXl5eYBuLwsugIB2EQMVf4CAgICAgIAwBi52gICAgICAgAAAAAAAAAAA
        AAAAAIB5eXl5cDwLBitcgICAbgYDPICAgICAgIBgFAMEPHqAgICAgAAAAAAAAAAAAAAAAHl5eVk4EQYM
        J1lwgICAgEIGBlyAgICAgICAf0MLAQlDf4CAgAAAAAAAAAAAAAAAAHlseSMGCzRKWVRkgICAgH8uBhR2
        gICAgICAgIB/PgQBPICAgAAAAAAAAAAAAAAAAHl5azQGCT5uenp5gICAgIB2FQsugICAgICAgIB6PgkB
        O4CAgAAAAAAAAAAAAAAAAHlseVkiCQYROHBkU2RTgGRZWhELQGiAeWRTZjoTCQs0a4CAgAAAAAAAAAAA
        AAAAAHl5aFNHUy8JBg0lUVNZemRZcD4REU6AZFMyKwsRPG5oeYCAgAAAAAAAAAAAAAAAAHlseXlreXlu
        LwYweoB6gICAgHouFTB6f4A8ET5ygICAgICAgAAAAAAAAAAAAAAAAHlraGRTSlFRUygkRmhTUVNTU2RM
        Kiw6aGYnTFNmaGhof4CAgAAAAAAAAAAAAAAAAHl5bFFGR1FTUVFTUVNER1NTU1NRU1NZZEdUU2ZZaGho
        eYCAgAAAAAAAAAAAAAAAAHloeWh5eXl5eXl5eYB5gHqAgIB/gICAgICAgICAgICAgICAgAAAAAAAAAAA
        AAAAAHloeWx5aGRkZFNTUWRRUVNTU2ZkaHBsU1NogICAgICAgICAgAAAAAAAAAAAAAAAAHlobGhseVFE
        UVNRUUdKU1NTU1NmUVFkU0pTgICAgICAgICAgAAAAAAAAAAAAAAAAHlobGxoeWh5eXl5eXl5eXp6enp5
        eXl6gICAgICAgICAgICAgAAAAAAAAAAAAAAAAHlobFlTUVNTR1FRU1FkZGRTWWiAeXp6enqAgICAgICA
        gICAgAAAAAAAAAAAAAAAAHloaFFHU1NHR1FHUVFTU1FkU2R5eXl5eXp5gHmAenqAgICAgAAAAAAAAAAA
        AAAAAHlobGhsbGh5bHlwbHl5eXl5eXl5eXl5eXl5eXp5enl5eXl6gAAAAAAAAAAAAAAAAHloaFlRSlNR
        U2hsaHloeWh5eXl5eXl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAGxoaFFHUUdRUVN5bGx5aHlsbGh5
        bHl5eXl5eXl5eXl5eXl5gAAAAAAAAAAAAAAAAHloaGhoaGhobGhoeWhseWh5eXlseWh5bHl5eXl5eXl5
        eXl5eQAAAAAAAAAAAAAAAGhoaGhobGhsaGxsaHlobHlobGx5aHl5bHloeWh5bHlseWx5egAAAAAAAAAA
        AAAAAHloaGhoaGhsaGxobGhsbGh5bGh5eWh5aHl5bHlseWx5aHlseQAAAAAAAAAAAAAAAGhoZkZIHx8f
        SlNEH0ghREYfR1NkRGghU2xIIUhRSlFTZGRoegAAAAAAAAAAAAAAAGxkZFlTWVlZZGhoZGRoWWhoaGRT
        aGhkU2xoaGhobGhoeWx5eQAAAAAAAAAAAAAAAHlobGxsbGxsbGxsbGx5eWx5bHl5eXl5eXl5enl6eXl5
        eXl5egAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////wAA////////AAD///////8AAPwA
        AAH//wAA/AAAAP//AAD8AAAAf/8AAPwAAAA//wAA/AAAAB//AAD8AAAAD/8AAPwAAAAH/wAA/AAAAAP/
        AAD8AAAAAf8AAPwAAAAA/wAA/AAAAAB/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/
        AAD8AAAAAD8AAPwAAAAAPwAA/AAAAAA/AAD8AAAAAD8AAP///////wAA////////AAD///////8AACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAABAAAAAAAAlVrpAJhf6QCZYeoAnGXrAJ1o
        6QCibusAoGzsAKJw6ACkcewAp3fsAKh66gCqe+0Aq33tAK1/7gCdnZ0AoqKiAKenpwCpqakAsLCwALu7
        ugC/v78AsJfTALOU3wC4nN8ArIHrALGG7QCyie4AtIrvALua6QC2jfAAx7rZAMCe8QDBoe4AwqHxAMeo
        8gDJrPIAy6/0AMyx8gDBwcEAxMTDAMbGxQDIyMcAycfLAMrKyQDMzMsAzcvPAM3NzQDQ0M8AzMfTAMzE
        1gDPxN8A0M/SANHR0QDU09YA1dXVANfW2QDZ2dkA3NzbANzb3gDd3d0A2czsAN3a4QDWw/EA2cX2ANrI
        9ADezfYA4dnsAOHU8wDh0vYA4tT3AOTW+ADi4uIA5OTjAOXl5QDo6OcA6urpAOzs6wDs6u4A7e3tAPDw
        7wDt6PQA6uD4AOzj+QDt5vkA8On5APLt+QD07/sA8fHxAPT08wD19fUA+Pj3APf1+QD49voA+fn5APr4
        /AD+/v4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeXl5eXl5eXl5e
        Xl5eXllNDwAAAAAAAAAAAAAAAAAAAF5ZXl5eXl5eXl5eXl5ZTU03DwAAAAAAAAAAAAAAAAAAXl4wNzc5
        OTlKSkpNSjcwMBM3EAAAAAAAAAAAAAAAAABeWV5eXl5eWV5eXl5eWU1LODc5EwAAAAAAAAAAAAAAAF5e
        NzA3MDc3SjA4MDc+MCcVE005EAAAAAAAAAAAAAAAXllZXl5eXl5eXl5eXl5ZTUsVXlk5EAAAAAAAAAAA
        AABbW15eNzk5MDc3OTdIOTg3FTAoMDc3DwAAAAAAAAAAAFlbWV5eXllZW15eXl5eXllZTUtKOTk5DwAA
        AAAAAAAAXlk3OUooODcwTUo3MD45OTlZWE1QTU1QAAAAAAAAAABbWVleXl5eXl5eXl5eXl5eXl5ZWVlZ
        WVkAAAAAAAAAAFleNzc5N01bXUdTXl5eXl5eXl5eW1tbXgAAAAAAAAAAWVlZWVlADFNeHAJTXl5eXlcJ
        QF5eXl5eAAAAAAAAAABZWVlGGgYmW15XBg5eXl5eXiUEDkdeXl4AAAAAAAAAAFlZFwQdMThbXl5HBCRe
        Xl5eXlsgASJeXgAAAAAAAAAAWVkiBCFQW1tdXl4kBkdeXl5eVyIEIl5eAAAAAAAAAABZWTAfDAQYNDdN
        Pj4cDD5NORYJG0FNXl4AAAAAAAAAAFlNWVlZPwlDW1teXlUMIl5XHEJeXl5eXgAAAAAAAAAAWVkoKjAw
        KzAwKDAwMDIzPjg0N0pKUF5eAAAAAAAAAABZTVlYWFlZWVlZWVteXl5eXV1dXl5eXl4AAAAAAAAAAFlN
        UFA0MDcoMCs3MDg5OTkwTV5eXl5eXgAAAAAAAAAAWU1NWFBZWVhZWVlZWV5ZXlleXl5eXl5eAAAAAAAA
        AABQTTAwNxUoMDA4OTdNWVtZXlleWV5eXl4AAAAAAAAAAFlNTU1NTU1YWFlZUFlZWVlbWV5ZW1leXgAA
        AAAAAAAATU0wKDcoSlBYUFlZWVlZWVlZWVlbWVlbAAAAAAAAAABNTUtNTU1NUE1YTVhYWVlZWVlZWVlZ
        WVkAAAAAAAAAAE1KTUtNTU1NUE1YUFBQWFhZWFlZWVlZWQAAAAAAAAAATUswKCcwOTAwKjQwNzc5MFAo
        Nzk5Sk1ZAAAAAAAAAABZTU1NTVhNTVlQWFBYWVlZWFlZWVlZWVsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAH//AA
        A//wAAH/8AAA//AAAH/wAAA/8AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////KAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAEAAAAAAACioqIApKSkALyj3wCyie4AtpXlALiS
        7wC+nO4AvpvxAMe53ADIruwAzb7jAMmx7ADCovEAzrP0AMTExADMzMwA1tbWANnU3wDa2toA3d3cAODg
        3wDRxOMA2s7rAN/a5QDe1+gA28j2AN/R8wDg2OkA5N3uAOHS9gDh4eEA5OTjAOXl5QDk4OoA6enpAOzs
        6wDt7e0A8PDvAO/u8QDu5vkA8Oj6APLt+QDx8fEA9fX1APj3+gD5+fkA/v7+AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAuLi4u
        Li4uJQIAAAAAAAAALSElIS0mJRMQAgAAAAAAAC0hISElISUTDy0BAAAAAAAtLSEhISElIRMREQIAAAAA
        LSEhISUlJSUlLSUlAAAAAC0fHxsbGi4uGyosLgAAAAAtCgUdLgQpLikIDi4AAAAAJgMHGSUdBicdDQwu
        AAAAAC0TEgkTIQsXFiItLgAAAAAmJh8hISEhJSUuLi4AAAAAJRMTEyEhLS0tLSwuAAAAACUTHyUmJiYm
        JiwsLgAAAAAlISQkJiYtJi0mLSYAAAAAJRMUHxMfHx8hICEtAAAAAAAAAAAAAAAAAAAAAAAA//8AAMAf
        AADADwAAwAcAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAA//8AACgA
        AACAAAAAAAEAAAEAIAAAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAFAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAFAAAABQAA
        AAQAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAMAAAACwAAAAgAAAAGAAAABAAAAAIAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAcAAAAMAAAAEQAAABYAAAAaAAAAHAAA
        AB0AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAdAAAAHAAA
        ABoAAAAXAAAAEgAAAA4AAAAJAAAABQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADAAAABQAAAAeAAAAJwAAAC0AAAAwAAAAMgAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADIAAAAwAAAALQAAACgAAAAiAAAAGgAAABIAAAALAAAABwAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAA
        AEcAAABJAAAASgAAAEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABKAAAASQAA
        AEgAAABEAAAAPgAAADUAAAAqAAAAHwAAABUAAAAOAAAABwAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAEAAAACwAAABYAAAAmAAAAOQAAAEkAAABUAAAAWwAAAF4AAABfAAAAXwAAAF8AAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAA
        AGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAF8AAABfAAAAXQAAAFkAAABTAAAASQAAAD0AAAAwAAAAIwAA
        ABgAAAAPAAAACQAAAAQAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAANAAAAGgAAACwAAABCAAAAVP//
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////9DQ0NYhISFmAAAAUAAAAEIAAAA0AAAAJgAAABoAAAARAAAACgAAAAUAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAcAAAAMAAAAEcAAABb//////n5+f/29vb/9/f2//f39//39/f/+Pj3//j4
        +P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+fn5//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+/v7//t7e3/7e3t/+vr6//p6en/5+fn/87Ozvk3Nzd0AAAAVAAA
        AEYAAAA3AAAAKQAAABwAAAASAAAACgAAAAUAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASQAA
        AF7/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fj/+fn5//n5+f/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/7+/v/+/v7//r6+v/5+fn/9/f3//b29v/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+jo6P/m5ub/29vb/8zMzP1SUlKGAAAAVwAAAEkAAAA6AAAAKwAAAB4AAAATAAAACwAA
        AAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABKAAAAX//////29vb/9vb2//f39v/39/f/9/f3//j4
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4
        +P/39/f/9fX1//T09P/z8/P/8fHx//Dw8P/u7u7/7e3t/+vr6//p6en/6Ofn/+Tk5P/i4eH/09PT/8zM
        zP5sbGyaAAAAWgAAAEsAAAA9AAAALgAAACAAAAAVAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAdAAAAMgAA
        AEoAAABf//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v///////v7+//39/f/8/Pz/+/v7//r6+v/6+vr/+Pj4//f39//19fX/9PT0//Ly8v/x8fH/7+/v/+7u
        7v/t7e3/6+vr/+np6f/n5+f/5OTk/9/f3//a2tr/0dHR/8rKyv+FhYWwAAAAXAAAAE4AAAA/AAAAMAAA
        ACIAAAAWAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/7+/v/+vr6//r6
        +v/4+Pj/9/f3//X19f/09PT/8vLy//Hx8f/v7+//7u7u/+zs7P/r6+v/6enp/+fn5//j4+P/39/f/9jY
        2P/W1tb/0dHR/8rKyv+ZmZnHCAgIYQAAAFAAAABBAAAAMQAAACMAAAAXAAAADgAAAAgAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T09P/y8vL/8fHx/+/v
        7//u7u7/7Ozs/+vr6//p6en/5+fn/+Pj4//e3t7/1tbW/9LS0v/X19f/0dHR/8rKyv+lpaXVEhISZQAA
        AFIAAABDAAAAMwAAACUAAAAYAAAADwAAAAgAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f3
        9//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+Pj4//r6+v/6+vr/9/f3//r6+v/5+fn/+fn5//v7
        +/+1tbX/29vb//v7+//7+/v/+/v7//z8/P/8/Pz/+vr6//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7/+/v7//7+/v///////v7+//39/f/8/Pz/+/v7//r6
        +v/6+vr/9vb2//f39//19fX/9PT0//Ly8v/x8fH/7Ozs/+7u7v/s7Oz/6+vr/+np6f/n5+f/4+Pj/97e
        3v/T09P/ysrK/9bW1v/X19f/0NDQ/8rKyv+tra3gHh4ebAAAAFMAAABFAAAANQAAACYAAAAaAAAAEAAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/S0tL/3Nzc/5KS
        kv+zs7P/4ODg/6SkpP+urq7/2tra/6urq/+srKz/z8/P/9vb2/+enp7/+vr6/7+/v//z8/P//Pz8/8HB
        wf+6urr/8vLy/6ioqP/d3d3/zMzM/66urv/AwMD/4uLi//39/f/9/f3//f39/8LCwv/s7Oz//v7+/6am
        pv+vr6//4eHh/6+vr//+/v7//f39//z8/P/7+/v/+vr6/76+vv+5ubn/7u7u/6Ojo//U1NT/x8fH/6Cg
        oP+vr6//4uLi/+zs7P/r6+v/6enp/5qamv/ExMT/t7e3/4KCgv+AgID/rq6u/93d3f/X19f/0NDQ/8rK
        yv+zs7PpLy8vdAAAAFUAAABGAAAANwAAACgAAAAbAAAAEQAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f3
        9v/39/f/9/f3//j49//4+Pj/jY2N/9zc3P/5+fn/oqKi/+fn5//Dw8P/rq6u/+fn5//BwcH/sLCw/9PT
        0//Q0ND/ra2t/76+vv/s7Oz/9PT0/6mpqf/Ly8v/sbGx//n5+f/8/Pz/pqam/9zc3P/Ozs7/0dHR/5qa
        mv/9/f3//f39//39/f/9/f3/wsLC/+zs7P/+/v7/sbGx/+jo6P/IyMj/paWl//39/f/9/f3//Pz8//v7
        +//6+vr/ra2t//j4+P/39/f/oaGh/9LS0v/Jycn/hISE/6mpqf/Hx8f/7Ozs/+vr6//p6en/mJiY/8PD
        w/+5ubn/n5+f/319ff+urq7/1dXV/93d3f/W1tb/0NDQ/8nJyf+4uLjwQEBAfgAAAFcAAABIAAAAOQAA
        ACoAAAAdAAAAEgAAAAoAAAAFAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/+Pj3//j4+P/j4+P/tra2/93d
        3f+VlZX/urq6/+7u7v/Pz8//wcHB//Ly8v/Hx8f/r6+v/83Nzf/Kysr/9fX1/8zMzP+3t7f/y8vL//v7
        +/+YmJj/t7e3//f39/+RkZH/sbGx/+/v7//Hx8f/2tra/+np6f/9/f3//f39//39/f+ZmZn/ra2t/+np
        6f/R0dH/xMTE//b29v/ExMT/tLS0/+vr6//8/Pz/+/v7//r6+v+UlJT/tbW1//Pz8/+MjIz/q6ur/+fn
        5/+6urr/rq6u/+Xl5f/t7e3/6+vr/+np6f+Dg4P/oKCg/9fW1v+mpqb/l5aW/769vf+4uLj/4+Pj/93d
        3f/W1tb/0NDQ/8nJyf+8vLz2UVFRiQAAAFgAAABKAAAAOgAAACsAAAAeAAAAEwAAAAsAAAAGAAAAAgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b2
        9v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/5+fn/+fn5/8XFxf/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/l5eX/4eHh//v7+//7+/v/+/v7//v7+//7+/v//Pz8/+rq6v/7+/v//Pz8/8jIyP/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39/+/v7/+2trb/5ubm//7+/v/+/v7//v7+//7+/v/+/v7//f39//z8
        /P/7+/v/+/v7/+fn5//4+Pj/9/f3/8LCwv/09PT/8/Pz//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/7e2
        tv/m5uX/4uLi/9zc3P/R0dH/wMC//7e3t//p6en/4+Pj/93d3f/W1tb/0NDQ/8nJyf+/v7/7YmJilQAA
        AFoAAABMAAAAPAAAAC0AAAAfAAAAFAAAAAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//n5
        +P/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7+//7+/v/+vr6//n5+f/39/f/9vb2//T0
        9P/z8/P/8fHx//Dw8P/v7+//7e3t/+zs7P/q6ur/6Ojo/+bm5v/j4+P/3t7e/9TU1P/FxMT/s7Ky/9ra
        2v/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJyf/AwMD9c3NzowAAAFsAAABNAAAAPQAAAC4AAAAgAAAAFAAA
        AAsAAAAGAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b2
        9v/29vb/9/f2//f39//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz//Pz8//v7+//6+vr/+fn5//f39//29vb/9fX1//Pz8//y8vL/8PDw/+/v7//t7e3/7Ozs/+rq
        6v/p6ej/5ubm/+Tj4//f397/1tbW/8nJyf+3t7f/wMDA//Dw8P/p6en/4+Pj/9zc3P/W1tb/z8/P/8nJ
        yf/BwcH/goKCsQAAAF0AAABOAAAAPgAAAC4AAAAgAAAAFAAAAAsAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz/+/v7//r6+v/5+fn/+Pj4//b2
        9v/19fX/8/Pz//Ly8v/x8fH/7+/v/+7u7v/s7Oz/6+vr/+np6f/n5+f/5eXl/+Hg4P/a2tn/zs7N/7y8
        u/+rq6v/7+/v/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQMDA14AAABPAAAAPwAA
        AC4AAAAfAAAAEwAAAAoAAAAFAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//f3
        9//6+vr/+Pj4//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz/wcHB/66u
        rv/r6+v//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//Pz8//7+/v/9/f3//v7+//7+
        /v/9/f3//f39//z8/P/7+/v/+vr6//b29v/4+Pj/9/f3//X19f/09PT/7u7u//Hx8f/w8PD/7u7u/+3t
        7f/s7Oz/6urq/+Xl5f/m5ub/4ODg/9zc3P/Qz8//v7+//6ysrP/Q0ND/9vb2/+/v7//p6en/4uLi/9zc
        3P/V1dX/z8/P/8jIyP/BwcH/mJiYywMDA14AAABPAAAAPgAAAC4AAAAeAAAAEgAAAAoAAAAFAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/0dHR/9zc3P+mpqb/3d3d/8nJyf+oqKj/ubm5/+zs7P+ampr/oqKi/8nJyf+srKz/ra2t/8/P
        z//BwcH/i4uL/9/f3/+oqKj/3t7e/83Nzf+mpqb/q6ur/83Nzf/AwMD/9fX1//39/f/6+vr/sbGx//39
        /f+oqKj/39/f/9DQ0P+cnJz/pKSk/87Ozv+pqan/39/f/9HR0f+urq7/t7e3/+Tk5P/AwMD/r6+v/9vb
        2//39/f/zc3N/9ra2v+np6f/8fHx//Dw8P+fn5//zc3N/8LCwv+cnJz/qqqq/9zc3P+Kior/jY2N/62t
        rf+GhYX/eHh3/6SkpP/8/Pz/9vb2/+/v7//p6en/4uLi/9zc3P/V1dX/z8/P/8jIyP/BwcH/j4+PwQAA
        AF0AAABOAAAAPQAAACwAAAAdAAAAEgAAAAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4/42Njf/b29v/+fn5/6SkpP/c3Nz/y8vL/4uL
        i/+zs7P/zc3N/7u7u/+enp7/4eHh/7Gxsf/U1NT/0dHR//v7+/+tra3/+/v7/6ampv/d3d3/zs7O/6mp
        qf/W1tb/zc3N//X19f+qqqr/zMzM//r6+v+xsbH//f39/6ampv/d3d3/0dHR/729vf+fn5//6Ojo/6en
        p//c3Nz/0dHR/5WVlf+pqan/+/v7/7e3t/+zs7P/8PDw/42Njf/c3Nz/9fX1/9LS0v/Jycn/8PDw/52d
        nf/Nzc3/w8PD/4GBgf+lpaX/wcDA/6qqqf+Li4v/xcXF/42Njf+WlpX/j4+P//r6+v/8/Pz/9fX1/+/v
        7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jIyP/AwMD/fX19uQAAAFwAAABNAAAAPAAAACsAAAAdAAAAEQAA
        AAkAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////29vb/9vb2//b29v/39/f/9/f3//f3
        9//4+Pj/4+Pj/7W1tf/d3d3/kJCQ/6+vr//s7Oz/w8PD/7a2tv/w8PD/wcHB/7e3t//5+fn/x8fH/6+v
        r//R0dH/zc3N/8LCwv/7+/v/r6+v/7Gxsf/v7+//vb29/7q6uv/d3d3/uLi4/83Nzf/7+/v/6enp/6io
        qP/19fX/kZGR/7Kysv/x8fH/w8PD/7u7u//9/f3/sLCw/7Gxsf/x8fH/rq6u/9DQ0P/v7+//xcXF/7W1
        tf/w8PD/4eHh/7S0tP/b29v/9PT0/6ioqP/w8PD/iYmJ/6enp//i4uL/tra2/6qqqv/g4OD/sLCw/6en
        p//Z2dn/n5+f/39/f/+Pj4//3d3d//7+/v/8/Pz/9fX1/+/v7//o6Oj/4uLi/9vb2//V1dX/zs7O/8jI
        yP/AwMD/cXFxowAAAFsAAABLAAAAOgAAACoAAAAbAAAAEAAAAAkAAAAEAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////b29f/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5+f/FxcX/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/5ubm/+Hh4f/7+/v/1NTU//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//f39//Ly8v/y8vL/+Tk5P/Jycn//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/MzMz//f39//z8/P/7+/v/+vr6//r6+v/4+Pj/9/f3//b29v/09PT/3t7e/9nZ
        2f+9vb3/7+/v/+7u7v/s7Oz/6+vr/+np6f/o5+f/4+Pj/9zc3P/Pz8//qqqq/5qamv/MzMv//v7+//7+
        /v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb2//U1NT/zs7O/8fHx/+/v7/9YmJilgAAAFoAAABKAAAAOQAA
        ACgAAAAaAAAAEAAAAAgAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9/f2//f3
        9//39/f/+Pj3//j4+P/4+Pj/+fn4//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//Pz8//v7
        +//7+/v/+vr6//n5+f/4+Pj/9vb2//X19f/09PT/8vLy//Hx8f/w8PD/7u7u/+3t7f/s7Oz/6urq/+np
        6P/l5eX/3t7e/9LS0v+/v7//rays/7y8vP/+/v7//v7+//7+/v/7+/v/9fX1/+7u7v/o6Oj/4eHh/9vb
        2//U1NT/zs7O/8fHx/+9vb37UFBQigAAAFkAAABJAAAAOAAAACcAAAAZAAAADwAAAAgAAAADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz//Pz8//v7+//6+vr/+vr6//j4+P/39/f/9fX1//T0
        9P/z8/P/8vLy//Dw8P/v7+//7u7u/+zs7P/r6+v/6urq/+bm5v/g4OD/1dXV/8PDw/+wsLD/tbW1//7+
        /v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9vb2//U1NT/zs7O/8fHx/+6urr2PT09fwAA
        AFgAAABHAAAANgAAACYAAAAYAAAADgAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////b29f/29vb/9vb2//f3
        9v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//f39//29vb/9fX1//T09P/y8vL/8fHx//Dw8P/u7u7/7e3t/+zs
        7P/r6+v/5+fn/+Lh4f/Y2Nj/yMfH/7W1tf+xsbH//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u
        7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fHx/+2trbwLi4udgAAAFYAAABGAAAANQAAACUAAAAXAAAADQAA
        AAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//n5
        +f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//j4
        +P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3/+/v7//39/f/8/Pz//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//f39//39/f/+/v7//f39//z8/P/8/Pz/9/f3//r6+v/6+vr/+Pj4//f3
        9//29vb/9PT0//Pz8//y8vL/8PDw/+zs7P/u7u7/7e3t/+zs7P/p6en/5OTk/9va2v/Nzc3/vLy8/7Cw
        sP/+/v7//v7+//7+/v/+/v7//v7+//7+/v/7+/v/9PT0/+7u7v/n5+f/4eHh/9ra2v/U1NT/zc3N/8fH
        x/+wsLDpHR0dbgAAAFUAAABEAAAAMwAAACMAAAAWAAAADAAAAAYAAAACAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb2//b2
        9v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/09PT/93d
        3f/BwcH/5eXl//v7+/+tra3/+/v7//v7+/+lpaX/r6+v/9bW1v+4uLj/r6+v/7Kysv+/v7//9PT0//z8
        /P+NjY3/m5ub/+bm5v+bm5v/pKSk/8zMzP/MzMz/n5+f//7+/v/CwsL/jIyM/+Pj4/+tra3/ra2t/9TU
        1P/9/f3/1NTU/+Hh4f+tra3/+/v7//r6+v+8vLz/5+fn//b29v+oqKj/9PT0//Pz8/+dnZ3/paWl/8vL
        y/+urq7/qamp/6Wlpf+vr6//2dnZ/9PT0//FxcX/t7a2/7Gxsf+ysrL/t7e3/76+vv/Ozs7/5eXl//v7
        +//6+vr/9PT0/+3t7f/n5+f/4ODg/9ra2v/T09P/zc3N/8XFxf+qqqrhERERaAAAAFQAAABDAAAAMgAA
        ACIAAAAVAAAACwAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////X19f/29vX/9vb2//b29v/39/b/9/f3//f39//4+Pf/+Pj4//j4
        +P/5+fj/+fn5//n5+f/5+fn/+vr6/46Ojv/d3d3/+vr6/8HBwf/l5eX/+/v7/6Ojo//6+vr/+/v7/6+v
        r//o6Oj/vb29/7a2tv+tra3/s7Oz//X19f+qqqr/y8vL/6ioqP/v7+//srKy/729vf+fn5//5eXl/6en
        p/+4uLj/7u7u//7+/v+vr6///v7+/7Ozs//V1dX/1NTU/5GRkf/i4uL//Pz8/9vb2//Pz8//+vr6/729
        vf/n5+f/9/f3/5+fn//09PT/8/Pz/6ioqP/b29v/tra2/62trf+np6f/p6en/+Li4v+YmJj/s7Oz/9HQ
        0P/FxcX/vLy8/7e3t/+zs7L/sLCv/6+urv+srKv/q6ur/7u7u//T09P/7e3t/+3t7f/n5+f/4ODg/9ra
        2v/T09P/zc3N/8XFxf+ioqLVCAgIYwAAAFIAAABBAAAAMAAAACAAAAATAAAACwAAAAUAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//b2
        9f/29vb/9vb2//f39v/39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/5eXl/7e3
        t//e3t7/mZmZ/6mpqf/k5OT/w8PD/7Gxsf/o6Oj/z8/P/8HBwf/v7+//qKio/7Gxsf/S0tL/uLi4/8zM
        zP/7+/v/oaGh/8HBwf/Pz8//w8PD/7q6uv/4+Pj/yMjI//Pz8//Ozs7/z8/P/8XFxf/+/v7/ycnJ/7Cw
        sP/V1dX/5+fn/7m5uf/i4uL//Pz8/66urv/6+vr/lZWV/6urq//k5OT/v7+//62trf/j4+P/yMjI/7q6
        uv/k5OT/oKCg/6ioqP/IyMj/q6ur/7y8vP/h4eH/29vb/9XV1f/Ozs7/ysrK/8XFxf/Dw8P/wsHB/7+/
        vv+9vb3/ubm5/7e2tv+2trb/yMfH/9vb2//m5ub/4ODg/9nZ2f/T09P/zMzM/8XFxf+WlpbHAAAAXwAA
        AFAAAAA/AAAALQAAAB4AAAASAAAACQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/s7Oz/s7Oz/+Hh4f/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/Q0ND/4uLi//39/f/9/f3//f39//39
        /f/9/f3//f39//7+/v/+/v7/19fX//7+/v/+/v7/5+fn/+Xl5f/+/v7//v7+//39/f/8/Pz/5ubm/+Hh
        4f/r6+v/s7Oz/+Li4v/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+7u7v/t7e3/6urq/+jo
        6P/k5OT/39/f/9zc3P/Z2dn/19fX/9XV1f/T09P/0dHR/8/Pz//Nzc3/ycnJ/8fHx//Dw8P/wMDA/8TE
        xP/U09P/3d3d/9nZ2f/T09P/zMzM/8XFxf+AgICxAAAAXgAAAE4AAAA8AAAAKwAAABwAAAAQAAAACAAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//39/f/8/Pz/+/v7//v7+//6+vr/+vr6//j4+P/39/f/9vb2//X1
        9f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7Ozs/+np6f/n5+f/5eXl/+Tk4//i4uL/4eHh/9/f
        3//d3d3/29vb/9ra2v/X19f/1tbV/9PT0//R0dH/z8/O/8/Pzv/Pz87/1NTT/9jY1//T09P/zMzM/8XF
        xf9oaGicAAAAXAAAAEsAAAA6AAAAKAAAABkAAAAOAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39
        /f/8/Pz/+/v7//v7+//6+vr/+fn5//j4+P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v
        7//u7u7/7Ozs/+vr6//r6+v/6Ojo/+fn5//n5+b/5ubm/+Tk5P/j4+P/4uLh/+Hh4f/g39//3t7e/93d
        3f/b29v/2tnZ/9rZ2f/a2dn/3Nzc/97e3v/V1dX/zMzM/8TExP5OTk6IAAAAWQAAAEgAAAA2AAAAJAAA
        ABUAAAALAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+///////+/v7//f39//z8/P/8/Pz/+/v7//r6+v/6+vr/+fn5//j4
        +P/39/f/9vb2//X19f/09PT/8/Pz//Ly8v/x8fH/8PDw/+/v7//u7u7/7e3t/+3t7f/s7Oz/6+vr/+rq
        6v/p6en/6enp/+fn5//n5ub/5ubm/+Tk5P/k5OT/4+Pj/+Pj4v/h4eH/4eHh/+Hh4f/i4uH/4+Pj/+Tk
        5P/e3t7/z8/P/8XFxfw0NDR4AAAAVQAAAEMAAAAvAAAAHQAAABAAAAAHAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////X19f/19fX/9vb1//b29v/29vb/9vb2//f3
        9//39/f/9/f3//j4+P/4+Pj/9vb2//n5+f/5+fn/9vb2//r6+v/6+vr/+vr6//r6+v/6+vr/9/f3//r6
        +v/7+/v/+/v7//v7+/+0tLT/29vb//v7+//BwcH/rq6u/+vr6//8/Pz/+fn5//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3/+/v7//39/f/+/v7/+/v7//7+/v/8/Pz//v7+//39/f/+/v7//v7+//7+
        /v/+/v7//f39//z8/P/4+Pj/+/v7//r6+v/6+vr/9/f3//j4+P/39/f/8/Pz//X19f/09PT/8/Pz//Ly
        8v/x8fH/8PDw/+/v7//v7+//7u7u/+3t7f/s7Oz/7Ozs/+vr6//q6ur/6urq/+np6f/p6en/6Ojo/+jo
        6P/o6Oj/5+bm/+fm5v/n5ub/5+bm/+fm5v/n5+f/6Ojo/+jo6P/p6en/29vb/8nJyfceHh5rAAAATgAA
        ADkAAAAlAAAAFAAAAAkAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////9fX1//X19f/19fX/9vb2//b29v/29vb/9/f3//f39//Q0ND/29va/8DAwP+2trb/7u7t/6Sk
        pP+tra3/2dnZ/729vf/y8vL/+vr6/5mZmf+cnJz/3d3d/6ysrP+/v7//39/f/9ra2v+fn5//+/v7/6Wl
        pf+rq6v/zs7O/6mpqf+6urr/7u7u/6ioqP/d3d3/zs7O//39/f/9/f3//f39/8HBwf+8vLz/8/Pz/6mp
        qf+7u7v/8fHx/5ubm/+jo6P/x8fH/7q6uv+0tLT/tLS0//7+/v/T09P/4uLi/62trf/8/Pz/+/v7/729
        vf+6urr/8PDw/6Ghof+pqan/2dnZ/7u7u//t7e3/8/Pz//Ly8v/x8fH/8fHx//Dw8P/v7+//7u7u/+7u
        7v/t7e3/7e3t/+zs7P/s7Oz/6+vr/+vr6//q6ur/6urq/+rq6v/q6ur/6enp/+np6f/p6en/6urq/+rq
        6v/q6ur/6urq/+vr6//r6+v/7u7u/83NzdcAAABWAAAAQQAAACsAAAAYAAAACwAAAAQAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////19fT/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/jIyM/9ra2v/39/f/r6+v//Pz8//4+Pj/ra2t/+bm5v/AwMD/8/Pz/6mpqf/Hx8f/oKCg/+rq
        6v+wsLD/z8/P/5mZmf/7+/v/ra2t/729vf/s7Oz/qKio/9XV1f/Nzc3/i4uL/7S0tP/Q0ND/pqam/9vb
        2//Pz8///f39//39/f/9/f3/r6+v//z8/P/9/f3/i4uL/7S0tP/T09P/vb29/5+fn//f39//uLi4/7Gx
        sf+zs7P/kZGR/+Pj4//9/f3/29vb/9HR0f/7+/v/ra2t//r6+v/6+vr/ra2t/+Dg4P/ExMT/7+/v/6Oj
        o//IyMj/8/Pz//Pz8//y8vL/8fHx//Dw8P/w8PD/7+/v/+/v7//u7u7/7e3t/+3t7f/t7e3/7Ozs/+zs
        7P/s7Oz/7Ozs/+zs7P/r6+v/6+vr/+vr6//s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+3t7f/v7+///////wAA
        AFsAAABGAAAALwAAABsAAAANAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////X19P/19fX/9fX1//b29f/29vb/9vb2//b29v/i4uL/tbW1/9vb2/+Xl5f/s7Oz//Pz
        8//Ozs7/wMDA//Hx8f+3t7f/y8vL//n5+f+UlJT/w8PD/9DQ0P/Dw8P/2NjY/+Tk5P/Kysr/9PT0/83N
        zf+9vb3/ubm5/93d3f/ExMT/t7e3//Ly8v+vr6//sbGx/+/v7//8/Pz//f39//39/f+Xl5f/uLi4//n5
        +f/ExMT/uLi4//X19f/Dw8P/u7u7//b29v+qqqr/s7Oz/9fX1//n5+f/u7u7/+Pj4//9/f3/r6+v//v7
        +/+UlJT/uLi4//f39//Nzc3/v7+///Dw8P+0tLT/ycnJ//T09P/19fX/9PT0//Pz8//y8vL/8vLy//Hx
        8f/w8PD/8PDw/+/v7//v7+//7u7u/+7u7v/u7u7/7e3t/+3t7f/t7e3/7e3t/+3t7f/t7e3/7e3t/+3t
        7f/t7e3/7e3t/+3t7f/u7u7/7u7u/+/v7///////AAAAXgAAAEkAAAAxAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9fX0//X19f/19fX/9fX1//b2
        9v/29vb/9vb2//f39//39/f/9/f3/+fn5v/39/f/+Pj4//j4+P/5+fn/+fn5//n5+f/6+vr/+vr6/+Pj
        4//Y2Nj/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/9/f3//f39/+rq6v/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/n5+f/4+Pj/+np6f/7+/v/+/v7//r6+v/6+vr/+fn5//j4
        +P/4+Pj/9/f3//b29v/19fX/9PT0//T09P/z8/P/8vLy//Ly8v/x8fH/8fHx//Dw8P/w8PD/7+/v/+/v
        7//v7+//7+/v/+7u7v/u7u7/7u7u/+7u7v/u7u7/7u7u/+7u7v/v7+//7+/v/+/v7//v7+//8PDw////
        //8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/9/f2//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//n5+f/4+Pj/9/f3//b29v/29vb/9fX1//T0
        9P/09PT/8/Pz//Pz8//y8vL/8vLy//Hx8f/x8fH/8fHx//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8fHx//Hx8f/x8fH//////wAAAF8AAABKAAAAMgAAAB0AAAAOAAAABQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T09P/19fT/9fX1//X1
        9f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7
        +//6+vr/+vr6//n5+f/4+Pj/+Pj4//f39//29vb/9vb2//X19f/09PT/9PT0//Pz8//z8/P/8/Pz//Ly
        8v/y8vL/8vLy//Ly8v/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLy//Ly8v/y8vL/8vLy//Pz
        8///////AAAAXwAAAEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f3
        9//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7///////7+/v/9/f3//f39//z8/P/8/Pz/+/v7//v7+//6+vr/+vr6//r6+v/5+fn/+Pj4//j4
        +P/39/f/9vb2//b29v/19fX/9fX1//T09P/09PT/9PT0//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PT/9PT0//////8AAABfAAAASgAAADIAAAAdAAAADgAA
        AAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PT/9PT0//X1
        9P/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f39//4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7///////7+/v/9/f3//f39//z8
        /P/8/Pz//Pz8//v7+//7+/v/+vr6//r6+v/6+vr/+fn5//j4+P/4+Pj/9/f3//f39//29vb/9vb2//b2
        9v/19fX/9fX1//X19f/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fX/9fX1//X1
        9f/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////T09P/09PT/9fX0//X19f/19fX/9vb1//b29v/29vb/z8/P/9ra
        2v+kpKT/29vb/8jIx/+jo6P/ra2t/9nZ2f/AwMD/t7e3/+/v7/+oqKj/uLi4/+vr6/++vr7/8vLy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//f39//39/f/8/Pz//Pz8//v7+//7+/v/+/v7//r6
        +v/6+vr/+vr6//n5+f/5+fn/+Pj4//j4+P/39/f/9/f3//f39//29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PT0//T0
        9P/19fT/9fX0//X19f/19fX/9vb1/4uLi//a2tr/9/f2/6Kiov/a2tr/yMjI/62trf/m5ub/v7+//6+v
        r//19fX/+fn5/4qKiv+zs7P/zs7O//Pz8/+oqKj/ycnJ//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//f39//39/f/9/f3//Pz8//z8/P/7+/v/+/v7//v7+//6+vr/+vr6//r6+v/6+vr/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/4+Pj/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////09PP/9PT0//T09P/19fT/9fX1//X19f/29vX/4eHh/7S0
        tP/a2tr/ra2t/62trf/p6en/zc3M/7+/v//w8PD/l5eX/7S0tP/09PT/wsLC/7a2tv/v7+//tra2/8vL
        y//5+fn/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//39/f/9/f3//Pz8//z8
        /P/8/Pz/+/v7//v7+//7+/v/+/v7//r6+v/6+vr/+vr6//r6+v/6+vr/+fn5//n5+f/5+fn/+fn5//n5
        +f/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////T0
        8//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b29v/39/b/9/f3//f39//39/f/+Pj4//j4
        +P/m5ub/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/5+fr/2MP1/9G48//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+/+8mPD/llzq/5Vb6f+UWun/lFnp/5NY6f+TV+n/uZPw//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+/86y9P/Wvvb//Pz9//z8/P/8/Pz//Pz8//z8/P/7+/v/+/v7//v7
        +//7+/v/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////9PTz//T08//09PT/9PT0//X19P/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/4dL2/6+E7v+gauz/yKjy//r6+v/7+/v/+/v7//v7+//7+/v/+/v7//bz+v+ib+v/k1jp/5NX
        6f+SVuj/klXo/5FU6P+RVOj/2ML1//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/w6Pz/5Vb
        6f+oeO3/4ND4//39/f/9/f3//Pz8//z8/P/8/Pz//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1//b29f/29vb/9vb2//f39v/39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/5+fj/+fn5//n5+f/5+fn/6uD4/7iR8P+faez/n2rs/59q7P/IqPL/+vr6//r6
        +v/7+/v/+/v7//v7+//7+/v/+/v7/+bZ9/+XXen/lFnp/5RY6f+TWOn/k1fp/5JW6P+YYOn/7+f5//z8
        /P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/EpPP/llzp/5Zb6f+VWun/sYbv/+rf+f/9/f3//f39//39
        /f/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Pz8//09PP/9PTz//T09P/09PT/9fX0//X1
        9f/19fX/9vb1//b29v/29vb/9vb2//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/5+fn/8Or4/8Ce
        8f+faev/n2ns/59p7P+faez/n2rs/8eo8v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+/v7/8yv
        8/+WXOn/lVvp/5Va6f+UWen/lFjp/5NX6f+qfOz/+/r8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+/8Sk
        8/+XXur/l13q/5Zb6f+VWun/lVrp/7uW8f/z7Pz//f39//39/f/9/f3//f39//39/f/9/f3//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8/Pz//Pz8//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/9vb1//b29v/29vb/9/f2//f3
        9//39/f/9/f3//j4+P/4+Pj/8/D3/8qt8v+hbez/nmjr/55o6/+faez/n2ns/59p7P+faez/x6jy//r6
        +v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/+vr7/7CG7v+XXer/llzp/5Zb6f+VWun/lFnp/5RZ
        6f/IqvP//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/xaXz/5hf6v+YXur/l13q/5Zb6f+VWun/lFnp/5dd
        6v/Hp/P/+PX9//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////z8/P/8/Pz//T08//09PP/9PT0//T0
        9P/19fT/9fX1//X19f/29vX/9vb2//b29v/29vb/9/f3//f39//39/f/9vb3/9O78/+kc+z/nmfr/55n
        6/+eaOv/nmjr/55o6/+faez/n2ns/6Bq7P/UvPT/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/8Or5/59q6/+YXur/l13q/5dd6v+WXOn/lVvp/5Zc6f/k1vj//Pz8//z8/P/8/Pz//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/UvPX/mmLq/5lg6v+YXur/l13q/5Zc6f+VWun/lFnp/5NY6f+bZOr/0rf1//38///+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v///////////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Pz8v/z8/P/8/Pz//T08//09PT/9PT0//X19P/19fX/9fX1//X19f/29vX/9vb2//b2
        9v/39/b/9/f3/9vL8/+rfe3/nWbr/51n6/+dZ+v/nmfr/55n6/+eaOv/nmjr/55o6/+5kvD/6uD4//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7+//7+/v/3Mr1/5lh6v+ZYOr/mF/q/5de
        6v+XXer/llzp/6Nv7P/18vv//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//7+/v/s4vr/to3w/5lg6v+YXur/l13q/5Zc
        6f+VWun/lFnp/5NY6f+SVun/o3Ds/93K9//+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//X19P/19fX/9fX1//b29f/29vb/9vb2/+TY9P+yiO7/nGXr/51m6/+dZuv/nWbr/51n
        6/+dZ+v/nmfr/55n6/+whO7/4tT2//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/waDx/5pi6v+ZYer/mWDq/5hf6v+YXur/l13q/7mS8P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//7+
        /v/+/v7//v7+//7+/v/+/v7/5NX4/61/7v+YX+r/l13q/5Zc6f+VW+n/lFnp/5NY6f+TV+n/klXo/6x9
        7v/n2vn//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////z8/L/8/Py//Pz8//z8/P/9PTz//T09P/09PT/9fX0//X19f/19fX/9fX1/+vk
        8/+7l+//nGbr/5xl6/+cZev/nGXr/51m6/+dZuv/nWbr/51n6/+peu3/2cX0//n4+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//49vr/q3zt/5tj
        6/+aYur/mmHq/5lh6v+ZYOr/mF/q/9W/9f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7//v7+//7+/v/+/v7//v3+/9rF
        9/+ldO3/l13q/5Zc6f+VW+n/lFnp/5RY6f+TV+n/klbo/5FV6P+2j/D/8Oj7//7+/v/+/v7//v7+//7+
        /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Ly8v/z8/L/8/Pz//Pz
        8//09PP/9PTz//T09P/09PT/z8/O/9XS2/+ig87/nmjs/5xk6/+cZOv/nGXr/5xl6/+cZev/nWbr/51m
        6/+fbOf/q5PO/+zq7v+mpqb/uLi4/+rq6v+9vb3/8fHx//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7//v7+//q4Pj/n2ns/5xl6/+bZOv/m2Pr/5pi6v+aYer/nWfr/+3k
        +f/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//v7+//7+/v/+/v7//v7+//z6/v/Rt/X/n2rs/5Zc6f+VW+n/lVrp/5RY
        6f+TV+n/klbo/5FU6P+TWOn/waDy//fy/P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8vLy//Pz8v/z8/L/8/Pz//Pz8//09PP/9PT0/4qKiv++puH/oW3r/5tj
        6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/5xl6/+eaev/rZDX/62qsv/19fX/+Pj4/4mJif+xsbH/zc3N//Ly
        8v+oqKj/ysrK//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//TuvT/nWfr/51m6/+cZev/nGTr/5tj6/+aYuv/rYDt//r4/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/+/v7//v7+//7+/v/49f3/yKn0/5pi6v+WW+n/lVrp/5RY6f+TV+n/klbo/5FV6P+QU+j/l17q/8+0
        9P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vL/8vLy//Pz
        8v/z8/L/8/Pz//T08//09PP/39/f/5xp5f+bY+v/m2Pr/5tj6/+bZOv/m2Tr/5xk6/+dZev/rYvf/7q0
        w//v7+//lZWV/7Ozs//z8/P/wcHB/7S0tP/u7u3/tra2/8rKyv/4+Pj/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v6+/+5kvD/nmjr/55n6/+dZuv/nWbr/5xl
        6/+bZOv/yKnz//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+/v7/8+z8/76a
        8v+XXOn/lVrp/5RZ6f+TV+n/klbo/5FV6P+QU+j/mmLq//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
        /v/+/v7//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg//////Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/om/r/5pi
        6/+bY+v/m2Pr/5tj6/+bZOv/tY7u/+fd9P/29vb/9/f2//f39//l5eX/9vb2//j49//4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//Pu+f+od+7/n2rs/59p7P+eaOv/nWfr/51m6/+cZuv/4tP4//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39/+vh+f+zie7/lVrp/5RZ6f+TV+n/klbo/5FV
        6P+bY+r//v7+//7+/v/+/v7//v7+//39/f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08/+ib+v/mmLq/5tj6/+bY+v/m2Pr/5tj6/+1ju7/5930//b2
        9v/29vb/9/f2//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7/+HS9/+hbez/oGvs/6Bq
        7P+faez/nmjr/55n6/+mde3/9O/6//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3/6+H5/7SL7/+WXOn/lVrp/5RZ6f+TWOn/klbo/5xk6v/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8//z8/P/9PTz/6Jv
        6/+aYur/mmLq/5tj6/+bY+v/m2Pr/5tj6/+cZev/vpzw/+zm9f/29vb/9/f3//f39//39/f/9/f3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+/v7//v7+//7+/v/+/v7/8mr8v+ibez/oWzs/6Br7P+ga+z/n2rs/59p7P+6lPD//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9/f3//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/8uz7/7+c8f+aYer/mF7q/5dd6v+WXOn/lVrp/5RZ
        6f+TWOn/nWbr//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/z7bv/6Bs6v+aYur/mmLq/5tj6/+bY+v/m2Pr/5tk
        6/+bZOv/n2ns/8eo8P/x7vb/9/f3//f39//39/f/9/f3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+ff7/7OI
        7/+jb+3/om7s/6Ft7P+hbOz/oGvs/6Bq7P/UvPX//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3/9/T8/8qr
        8/+eaez/m2Pr/5ph6v+ZYOr/mF/q/5dd6v+WXOn/lVvp/5tl6//Rt/X//f39//39/f/9/f3//f39//39
        /f/9/f3//f39//39/f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/7uvz/8Kj7v+dZuv/mmLq/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/51p5v+9pN//9fP3//f3
        9//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/29vb/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//39/f/7uX5/6d27v+jcO3/o2/t/6Ju7P+ibez/oWzs/6Rx
        7f/p4Pf//Pz8//z8/P/6+vr//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/5+fn//Pz8//r6
        +v/8/Pz//Pz8//39/f/9/f3/+/r9/9S79v+lc+z/nWfr/5xl6/+bZOv/m2Pr/5ph6v+ZYOr/mF/q/5ph
        6//EpPL/9vL8//39/f/8/Pz//f39//39/f/9/f3//f39//39/f/9/f3//f39//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Pz/83Nzf/Y2Nf/j4+O/6uktf+wi+T/mmPq/5tj
        6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+oeO3/sJ3N//Dv8P/39/f/9vb1/62trf/4+Pj/paWl/9ra
        2v/Kysr/vr6+/4qKiv/e3t7/wMDA/7Gxsf/c3Nz/+vr6//r6+v/6+vr/v7+//4qKiv/f39//wMDA/7Gx
        sf/d3d3/2cT2/6Vy7f+kce3/pHDt/6Nw7f+jb+3/om7s/6N34f/d29//v7+//7y8vP/z8/P//Pz8//z8
        /P/8/Pz/ra2t//z8/P/8/Pz/qKio/7m5uf/w8PD/mZmZ/6Ghof/R0dH/xMPE/5uItP+qfOv/oGvs/59p
        7P+eaOv/nWfr/5xl6/+cZOv/m2Pr/5pj6v+3kuz/0svc/9zc3P/w8PD/4+Pj/+zs7P/6+vr//f39//39
        /f/9/f3//f39//39/f/9/f3//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy//Pz
        8v+Kion/19fX//Pz8/+enp7/4uLh/76+vv+mm7f/q4Ho/5tj6/+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk
        6/+cZev/nnLe/7ut0f/19fX/ra2t//j4+P+jo6P/2dnZ/8vLy//5+fn/q6ur//n5+f+2trb/s7Oz//Pz
        8//6+vr/+vr6//r6+v/6+vr/rKys//r6+v+3t7f/s7Oz//X19f/7+/v/wZ/y/6Zz7f+lc+3/pXLt/6Rx
        7f+jcO3/o2/t/7GS3f+tra3/+/v7//z8/P/8/Pz//Pz8//z8/P+ioqL/+/v7//z8/P+Kior/srKy/9TU
        1P+7u7v/nJyc/9jL6/+1i/D/o2/t/6Jt7P+hbOz/oGvs/59q7P+eaOv/nWfr/51m6/+pfuX/3tPv/+bm
        5v/e3t7/6+vr//Dw8P/a2tr/6enp//T09P/9/f3//f39//39/f/9/f3//f39//39/f//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////8fHw//Hx8P/x8fH/8vLx//Ly8f/y8vL/8vLy/97e3f+ysrH/2NjY/5GRkf+2trX/6Ojo/8rK
        yv+8vLz/1MLs/6Jy5f+bY+v/m2Pr/5tk6/+bZOv/nGTr/5xk6/+cZev/nGXr/7GJ6v+hl6//8PDv/4+P
        j/+urq7/6+vr/8rKyv/BwcH/+fn5/8TExP+0tLT/8PDw//r6+v/6+vr/+vr6/8vLy//CwsL/+vr6/8TE
        xP+1tbX/8fHx//v7+//18fr/sITw/6d17v+mdO3/pnPt/6Vy7f+kce3/pHDt/5mJr/+4uLj/+Pj4//v7
        +//8/Pz//Pz8/8LCwv+ysrL/6+vr/8PDw/+3t7f/9PT0/7yzyv+siN//pXPt/6Vy7f+kcO3/o2/t/6Ju
        7P+hbOz/oGvs/59q7P+leOb/3Mvz/+Pj4//f39//+fn5/+Xl5f/d3d3/8PDw/+vr6//q6ur/+vr6//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vL/8vLy//Pz8v/z8/P/wMDA//Pz8//09PP/9PT0//T09P/09PT/8/P0/8Os5f+hber/m2Pr/5tk
        6/+bZOv/nGTr/5xk6/+cZOv/nGXr/51m6//Cq+T/xMTD//j4+P/4+Pj/+Pj4/9LS0v/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6/9PT0//6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/m2vj/qXju/6h2
        7v+nde7/pnTt/6Z07f+lc+3/qnrs//Lt+f/7+/v/+/v7//v7+//7+/v//Pz8//z8/P/8/Pz//Pz8//z8
        /P/ZxPb/qXju/6d27v+mdO3/pnPt/6Vy7f+kcO3/o2/t/6Ju7P+peu7/1r/1//v6/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//Ly8v/09PT//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg//////Dw8P/x8fD/8fHw//Hx8f/y8vH/8vLx//Ly8f/y8vL/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/19fT/9fX0//Hu9f/HqfD/nmjs/5tj6/+bZOv/m2Tr/5xk6/+cZOv/nGXr/8Sl
        8f/39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/RtvT/qXju/6l47v+od+7/p3bu/6d17v+mdO3/vJbx//r6
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//8/Pz//Pz8/8+y9P+pee7/qHfu/6d27v+nde7/pnPt/6Vy
        7f+ndu7/z7P1//f1+//8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////8PDw//Hx8P/x8fD/8fHw//Hx
        8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X1
        9f/s5vT/vZrv/5xk6/+bZOv/m2Tr/5xk6/+cZOv/xKXx//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//n4
        +v+8lvH/qnru/6l57v+peO7/qHfu/6h27v+nde7/1Lz1//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/z7P1/6p67v+pee7/qHfu/6h27v+odu7/x6bz//Pt+v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////w8O//8PDw//Hx8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/19fT/9fX1//X19f/19fX/5tzz/7SM7v+bZOv/m2Tr/5xk
        6//EpPH/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/5+fn/+fn5//n5+f/5+fn/+fn5//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//Dp+f+wg/D/q3vv/6p67v+qee7/qXnu/6l4
        7v+qeu7/6uD4//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//Ps/T/q3vv/6p67v+pee7/v5zy/+3k
        +v/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg//////Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/8vLx//Ly8v/y8vL/8/Py//Pz8v/z8/P/8PDw//T08//y8vL/9PT0//Pz
        8//09PP/9PT0//X19f/19fX/9vb1/93O8/+rfu3/m2Tr/8Oj8P++vr7/q6ur/+bm5v/39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/5+fn/9vb2//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/5+fn/+fn5/97N9v+sfe//rH3v/6t87/+re+//qnru/6p57v+0ie//9/T6//v7+//39/f/+/v7//v7
        +//7+/v/+/v7/8+09P+sfe//uZLx/+XX9//5+fn/+/v7//r6+v/6+vr/+/v7//z8/P/8/Pz//Pz8//z8
        /P/8/Pz//Pz8//z8/P/i4uL/3Nzc//j4+P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8
        /P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHx//Ly8f/MzMv/1tbV/6Gh
        of/X19f/w8PC/6SkpP+0tLT/5eXl/5aWlv+enp7/wsLC/6enp/+oqKj/y8vL/7y8vP+Hh4f/29va/6Sk
        pf/Aq9//s5nY/6Kiov+oqKf/ycnJ/7y8vP/w8PD/+Pj3/6Wlpf/IyMj/zc3N/6ampv+4uLf/4+Pj/7a2
        tv+vr6//sbGx/76+vv+Kior/39/f/6ampv/a2tr/zc3N/6urq/+pqan/0tLS/6yO1v+tgO3/r4Lv/6x/
        7f+ugO//rX/v/6x+7v+6neP/4eHh/62trf/7+/v/+/v7/6enp//Y2Nj/wKvf/6mXwv+4uLn/8PDw/6Cg
        oP+qqqr/1tbW/7q6uv+7u7v/4ODg/9PT0/+zs7P/7Ozs/83Nzf/o6Oj/6Ojo/9XV1f/b29v/7e3t/+np
        6f/6+vr//Pz8//v7+//7+/v/+/v7//v7+//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////w8O//8PDv//Dw
        7//w8PD/8fHw//Hx8P/x8fD/iYmJ/9bW1f/y8vH/n5+f/9XV1f/ExMP/h4eG/66urv/IyMj/tra2/5qa
        mv/c3Nz/rKys/87Ozv/MzMv/9fX1/6ioqP/19fX/oqKh/9jY2P/Jycn/paWl/9HR0f/Jycj/8PDw/6am
        pv/Hx8f/iYmJ/46Ojv/r6+v/iIiI/7Gxsf/FxcX/tLS0/62trf+xsbH/+fn5/6urq//6+vr/pKSk/9jY
        2P/Pz8//sLCw/9DQ0P/T09P/ioqK/7Gxsf/R0dH/oqKi//n5+f/39/f/jo6O/+Hh4f/7+/v/2dnZ/9DQ
        0P/7+/v/paWl/9fX1//S0tL/iYmJ/7Gxsf/U1NT/v7+//6ampv/r6+v/v7+//9nZ2f/h4eH/+/v7/8nJ
        yf/7+/v/y8vL/+jo6P/o6Oj/19fX/+np6f/s7Oz/+Pj4/+Tk5P/x8fH/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+/v7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/c3Nz/sLCw/9fX
        1v+MjIv/qqqq/+Tk5P+9vbz/sbGw/+np6f+7u7v/s7Oy//Pz8v/BwcH/qqqq/8vLy//IyMf/vb29//X1
        9f+qqqr/ra2s/+np6f+5ubn/tbW1/9jY2P+0tLP/yMjI//b29v+enp7/vLy8/7e3tv/AwMD/tLS0/+jo
        6P+mpqb/r6+v/9LS0v/Kysr/wcHB//n5+f+tra3/r6+v/+7u7v/FxcX/rKys/9PT0//BwcH/tra2//Hx
        8f/BwcH/sbGx/+np6f/j4+P/t7e3/+Dg4P/7+/v/ra2t//v7+/+Pj4//r6+v//Dw8P/CwsL/tra2//Pz
        8//ExMT/wcHB//v7+//Q0ND/vr6+/+Hh4f/b29v/2NjY//v7+//Pz8//1NTU//b29v/f39//4eHh//Hx
        8f/m5ub/7+/v//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx/7+/vv/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz
        8//z8/P/9PTz//T08//f39//2tra//T09P/Pz87/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b2
        9v/39/b/9/f3/8vLy//Ozs7/9fX1//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/T09P/+fn5//n5
        +f/5+fn/+vr6//r6+v/j4+P/4uLi//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/j4+P/4eHh/8fHx//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//o6Oj/6+vr//v7
        +//i4uL/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////v7+7/7+/u/+/v7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T0
        9P/19fT/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f3
        9//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly
        8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9/f2//f39//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T0
        8//09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//b29f/29vb/9vb2//b29v/29vb/9/f2//f3
        9//39/f/9/f3//f39//4+Pf/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+/v7//v7+//7+/v/+/v7//v7
        +//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+vr6//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PT/8fHx//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//b29f/29vb/9vb2//b29v/09PT/9/f2//b29v/39/f/9/f3//f39//39/f/+Pj3//j4
        +P/39/f/9/f3//j4+P/4+Pj/+fn4//n5+f/19fX/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6
        +v/6+vr/9/f3//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8vLx//Ly8f/MzMv/1tbW/7u7u//e3t3/8/Py/6en
        p//z8/P/8/Pz/6CgoP+qqqr/0NDQ/7Ozs/+qqqr/ra2s/7q6uv/u7u7/9fX1/4mJiP+Xl5b/4ODg/5eX
        l/+fn5//xcXF/8fHxf+bm5v/9/f3/729vf+JiYn/3Nzc/6mpqP+pqan/z8/P//j4+P/Q0ND/3d3d/6ur
        q//5+fn/+fn5/7y8vP/o6Oj/+fn5/6urq//5+fn/+vr6/6Ojo/+srKz/1dXV/7e3t/+ysrL/sLCw/7+/
        v//z8/P/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/iYmJ/9bW1f/y8vH/u7u7/93d3f/z8/L/np6d//Ly8v/z8/P/qamp/+Li4f+4uLf/sbGx/6en
        p/+tra3/7u7t/6Wlpf/ExMT/o6Oj/+jo6P+tra3/uLi4/5ubm//f39//oqKi/7Ozs//n5+f/9/f3/6qq
        qv/39/f/rq6u/9DQz//Pz8//jY2N/93d3f/4+Pj/2NjY/8zMzP/5+fj/vLy8/+jo6P/5+fn/oaGh//j4
        +P/5+fn/ra2t/+Li4v++vr7/tbW1/6+vr/+xsbH/8vLy/6ampv/Nzc3/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////u7u3/7u7t/+7u7f/u7u7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/c3Nz/sbGw/9fX1v+UlJT/pKSk/93d
        3f+9vbz/rKyr/+Dg4P/Jycn/u7u7/+jo5/+jo6L/rKys/8zMzP+ysrL/xcXF//T09P+cnJz/u7u7/8jI
        yP+9vb3/tbW0//Hx8f/CwsL/7e3t/8jIyP/Jycn/wMDA//f39//CwsL/q6ur/9DQ0P/h4eH/tbW1/93d
        3f/4+Pj/rKys//f39/+UlJT/qqqq/+Tk5P/AwMD/sLCw/+fn5//Nzc3/v7+//+vr6/+mpqb/r6+v/9PT
        0/+2trb/zMzM//n5+f/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx/+Xl5P+traz/2tra//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T0
        8//09PP/9PT0//T09P/09PT/9fX0/8vLyv/b29v/9fX1//X19f/19fX/9vb1//b29v/29vb/9vb2//b2
        9v/Q0ND/9/f2//f39//h4eH/39/f//f39//39/f/+Pj3//j4+P/j4+P/3t7e/+np6f+ysrL/4eHh//j4
        +P/5+fj/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7e3s/+7u7f/u7u3/7u7t/+7u
        7f/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//T08//09PP/9PT0//T09P/09PT/9PT0//X1
        9P/19fX/9fX1//X19f/19fX/9vb1//b29f/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6
        +v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v7v/v7+//7+/v//Dw
        7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//09PP/9PTz//T09P/09PT/9PT0//X19P/19fT/9fX1//X19f/19fX/9fX1//b2
        9f/29vb/9vb2//b29v/29vb/9vb2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb2//b29v/29vb/9vb2//b2
        9v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//j49//4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+fn4//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+//7+/v//Dw7//w8O//8PDv//Dw8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8/Py//Pz8v/z8/L/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5
        +f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/8nJyf/T09L/ubm5/6+vr//k5OT/nZ2d/6enpv/S0tH/tra1/+np
        6f/x8fD/mZmY/6iop/+7u7v/oqKi/7Kysv/k5OP/oqKi/7Kysv/l5eX/p6em/7Kysf/c3Nv/u7u7/6ys
        rP/V1dX/9PTz/8zMzP/Z2dn/qKio//T09P/09PT/u7u6/7a2tf/s7Oz/oKCg/6mpqf/X19f/u7u6/+/v
        7v/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//4+Pf/+Pj3//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f+Hh4b/0tLS/+7u
        7v+pqaj/6urp/+/v7v+mpqb/3d3d/7m5uP/p6ej/oqKi/8DAwP+YmJj/vLy7/8DAv/+FhYX/rKys/8fH
        x/+GhoX/ra2s/8fHx/+QkJD/oqKi//Pz8v+ysrH/rq6u/+vr6/+Kior/2dnY//T08//V1dT/yMjI//T0
        9P+pqan/9PTz//X19P+qqqr/39/f/8DAwP/u7u7/pKSk/8jIx//29vX/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9/f2//f39v/39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P//////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3t/9ra2f+urq3/09PS/5GRkf+srKv/6urp/8XFxP+4uLf/5+fn/7Cw
        r//BwcH/7+/u/5aWlv/S0tL/2NjX/7y8u/+vr67/5+fn/7y8vP+wsK//6Ojn/6ampv/IyMj/5OTk/7+/
        vv+wsK//6urp/97e3v+ysrL/2NjY//T08/+pqaj/8/Pz/5KSkv+ysrL/8PDw/8rKyf+9vbz/7e3t/7Oz
        s//Hx8f/9PT0//X19f/29vX/9vb1//b29f/29vb/9vb2//b29v/29vb/9vb2//b29v/39/b/9/f2//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj3//j49//4+Pf/+Pj4//j4
        +P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4
        +P/4+Pj/+Pj4//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/3t7d/+3t7P/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//3d3c/8DAwP/v7+//8fHw//Hx
        8P/x8fD/8fHx//Hx8f/y8vH/wsLC//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz/9/f
        3//a2tn/4uLh//T09P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//b2
        9f/29vX/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//4+Pf/+Pj3//j4
        9//4+Pf/+Pj3//j49//4+Pf/+Pj3//j49//39/f/9/f3//f39//39/f//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly
        8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X19f/29vX/9vb1//b29f/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//f39v/39/b/9/f2//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39///////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/9PTz//T08//09PP/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/39/b/9/f2//f39v/39/b/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx
        8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//b29f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f39v/39/b/9/f2//f3
        9v/39/b/9/f2//b29v/29vb//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//w8O//8PDv//Dw7//w8O//8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PT/9PT0//T0
        9P/09PT/9PT0//T09P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v//////AAAAYAAA
        AEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAA
        AGD/////6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//Hx8f/0tLR/56enf/S0tH/vr69/5yc
        nP+mpqX/0NDP/7i4t/+vr6//5eXk/6CgoP+wsK//4eHg/7W1tf/p6ej/8PDv//Dw7//w8O//8PDw//Dw
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9fX0//X1
        9P/19fT/9fX0//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////q6un/6urp/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/hoaF/9HR0P/s7Oz/nJyb/9HR0P+/v77/paWk/9zc2/+3t7f/qKin/+rq6f/u7u3/hISE/6ur
        qv/ExMP/6Ojn/6Ghof+/v7//8PDv//Dw7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz
        8//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29f/29vX/9vb1//b2
        9f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX/9vb1//b29f/29vX//////wAA
        AGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAA
        AEsAAABg/////+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//Y2Nf/ra2s/9HR0P+lpaT/pqal/9/f
        3v/Dw8L/t7e2/+Xl5f+RkZD/rKyr/+np6P+5ubj/ra2t/+Tk5P+urq3/wcHA/+7u7f/v7+//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6uno/+rq6f/q6un/6urp/+vr
        6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/9zc3P/t7ez/7u7t/+7u
        7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1////
        //8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAA
        ADMAAABLAAAAYP/////p6ej/6uno/+rq6f/q6un/6urp/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs
        6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v
        7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT/9fX0//X1
        9P/19fT/9fX0//X19P/19fT/9fX0//X19P/19fT//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+np6P/p6ej/6uno/+rq
        6f/q6un/6urp/+vr6v/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly
        8f/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAA
        AB4AAAAzAAAASwAAAGD/////6ejn/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr
        6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v7//v7+//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly8v/y8vL/8vLy//Ly
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//T0
        9P/09PT/9PT0//T09P/09PT/9PT0//T09P/09PT/9PT0//////8AAABgAAAASwAAADMAAAAeAAAADwAA
        AAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP/////o6Of/6ejn/+np
        6P/p6ej/6eno/+rq6f/q6un/6urp/+vq6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t
        7P/t7ez/7e3s/+3t7P/t7ez/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//09PP/9PTz//T0
        8//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T08//09PP/9PTz//T0
        8//09PP//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AA8AAAAeAAAAMwAAAEsAAABg/////+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+vq
        6f/r6+r/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v//Dw7//w8O//8PDv//Dw
        7//w8O//8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/8fHx//Hx8f/y8vH/8vLx//Ly
        8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8///////AAAAYAAAAEsAAAAzAAAAHgAA
        AA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////6Ofm/+jo
        5//o6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs
        6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//w8O//8PDv//Dw7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHx//Hx8f/x8fH/8fHx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8/Py//////8AAABgAAAASwAAADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAPAAAAHgAAADMAAABLAAAAYP/////n5+b/6Ofm/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//t7ez/7e3s/+3t
        7P/t7ez/7e3s/+3t7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fH/8fHx//Hx8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/8vLx//Ly8v/y8vL/8vLy//Ly
        8v/y8vL/8vLy//Ly8v/y8vL/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz
        8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L/8/Py//Pz8v/z8/L//////wAAAGAAAABLAAAAMwAA
        AB4AAAAPAAAABgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAA8AAAAeAAAAMwAAAEsAAABg/////+fn
        5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no5//p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr
        6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/6+vq/+7u
        7f/u7u3/7u7t/+7u7f/u7u7/6+vq/+/v7v/v7+7/7+/u/+/v7v/v7+//7Ozs//Dw7//w8O//8PDv//Dw
        7//w8O//8PDv//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/7u7u//Hx
        8f/x8fH/8vLx//Ly8f/y8vH/8vLx//Ly8f/y8vH/7+/u//Ly8f/y8vL/8vLy//Ly8v/y8vL/8PDw//Ly
        8v/y8vL/8PDw//Ly8v/x8fH/8fHx//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Ly8v/n5+f/5+fn//Hx
        8f/y8vL/8vLy//Ly8v//////AAAAYAAAAEsAAAAzAAAAHgAAAA8AAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAGAAAADwAAAB4AAAAzAAAASwAAAGD/////5+bl/+fn5v/n5+b/6Ofm/+jo5//o6Of/6Ojn/+no
        5//Dw8P/zs7N/9bW1f/Ozs3/6urp/6GhoP+ysrH/y8vK/6ysq/+jo6L/p6em/7Ozsv9/f3//1NTT/+zs
        6//s7Ov/7e3s/76+vv+UlJP/7e3s/5+fnv+vr67/4ODg/6Sko//u7u3/7u7t/7e3tv+oqKf/0dHR/7e3
        tv+EhIT/1dXU/5ycm/+lpaT/09PS/5+fn//R0dH/w8PD/9bW1f/W1tX/5eXk//Dw7//w8PD/8PDw/7m5
        uf+FhYX/2NjX/+bm5f+4uLf/8fHw/6Kiov+goKD/3Nzb//Hx8f/x8fH/8fHx//Hx8f/x8fH/8vLx/6Gh
        oP+ysrL/5+fm/6ioqP/V1dT/0NDP/7Cwr/+8vLz/5eXk/7m5uP/BwcD/4+Pj/8fHx//Jycn/4eHh/9nZ
        2f/IyMj/6enp/9nZ2f/p6en/6enp/+Li4v/m5ub/7u7u//Dw8P/x8fH/8vLx//////8AAABgAAAASwAA
        ADMAAAAeAAAADwAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAPAAAAHgAAADMAAABLAAAAYP//
        ///m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn5v/o6Of/g4OD/87NzP/p6ej/4+Pi/52dnP/l5eT/wsLB/42N
        jP/k5OP/qqmp/6CgoP+np6b/6+vq/52dnP/s7Ov/7Ozr/+zs6//s7Ov/nJyb/6ysq//d3dz/g4OC/6mp
        qP/Dw8L/mZmZ/+3t7P/u7u3/rq6t/6qqqf/n5+b/7u7t/6SkpP/v7+7/pqam/9vb2v+7u7v/nZ2c/8/P
        z//Dw8P/z8/P/9DQz//j4+L/8PDv//Dw7//w8O//8PDv/6Wlpf/w8PD/8PDw//Dw8P/x8fD/qamo/+Li
        4f+3t7b/8fHw//Hx8P/x8fD/8fHw//Hx8f/x8fH/hISE/6urq//Nzc3/pqam/9LS0v/R0dD/tbW0/+/v
        7v/v7+7/wMDA/+Pj4v/W1tX/y8vL/9vb2v/i4uH/8vLx/9XV1P/y8vH/2dnY/+jo5//p6ej/4+Pi/+vr
        6v/u7u3/8PDv//Hx8P/y8vH//////wAAAGAAAABLAAAAMwAAAB4AAAAPAAAABgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABQAAAA4AAAAdAAAAMgAAAEoAAABf/////+bm5f/m5uX/5+bl/+fn5v/n5+b/6Ofm/+jn
        5v/U1NP/qqqp/87NzP+wr67/wcHA/7y8u/+3trX/ysrK/9PT0v+cnJz/paWk/8TEw//r6+r/nJyc/+vr
        6v/s7Ov/7Ozr/+jo5/+6urn/4+Pi/7+/v/+4uLj/rKyr/+Tk4/+4uLf/p6en/9vb2/+7u7r/rKyr/+Xl
        5P/AwMD/ubm4/+7u7f/Dw8P/uLi3/+jo5/+mpqX/p6em/+Li4f+0tLP/tLSz/9fX1/+vr6//sLCv//Dw
        7/+0tLP/n5+e//Dw7//w8O//8PDv//Dw8P+kpKT/x8fH/8rKyv+wsLD/sLCw//Hx8P/x8fD/8fHw//Hx
        8P+6urn/sLCv/+rq6f+srKz/srKy/+jo6P/Hx8f/vLy8/+rq6v/U1NT/z8/P/+7u7v/U1NT/ysrK/+Hh
        4f/d3d3/3d3d//Hx8f/a2tr/3t7e/+/v7//m5ub/6Ojo/+7u7v/t7e3/8PDw//Hx8f//////AAAAXwAA
        AEoAAAAyAAAAHQAAAA4AAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAFAAAADgAAAB0AAAAyAAAASgAA
        AF//////5uXk/+bm5f/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o6Of/6Ojn/87Ozf+6urn/6Ojn/+np
        6P/p6ej/6uno/+rq6f/q6un/6urp/8fHxf+3t7b/6+vq/+vr6v/s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u7f/Jycj/7u7t/+7u7f/u7u3/7u7u/+7u
        7v/v7+7/7+/u/+/v7v/v7+7/7+/u/7q6uf+7u7v/7+/v/+/v7//Y2Nf/8PDv//Dw7//w8O//8PDv/9nZ
        2P/Dw8P/8PDw/7u7u/+7u7v/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/k5OT/5+fn//Hx8f/i4uL/8fHx//Hx8f/x8fH/8fHx//Hx
        8f/x8fH/8fHx//Hx8P/x8fD/8fHw//////8AAABfAAAASgAAADIAAAAdAAAADgAAAAUAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAUAAAAOAAAAHQAAADIAAABJAAAAXv/////m5eT/5uXk/+bl5P/m5uX/5+bl/+fm
        5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo5//p6Of/6eno/+np6P/p6ej/6uno/+rq6f/q6un/6urp/+rq
        6f/r6+r/6+vq/+vr6v/r6+r/7Ozr/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7e3s/+3t7P/t7ez/7e3s/+3t
        7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u7f/u7u7/7+/u/+/v7v/v7+7/7+/u/+/v
        7v/v7+7/7+/u/+/v7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx8P/x8fD//////wAA
        AF4AAABJAAAAMgAAAB0AAAAOAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAA4AAAAcAAAAMAAA
        AEcAAABb/////+Xl5P/l5eT/5uXk/+bl5P/m5uX/5+bl/+fm5f/n5+b/5+fm/+jn5v/o5+b/6Ojn/+jo
        5//p6Of/6ejn/+np6P/p6ej/6eno/+rp6P/q6un/6urp/+rq6f/r6un/6+vq/+vr6v/r6+r/6+vq/+zs
        6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7e3/7u7t/+7u
        7f/u7u3/7u7t/+7u7f/u7u3/7u7u/+7u7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v
        7//v7+//7+/v//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8PD/8PDw//Dw
        8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/x8fD/8fHw//Hx8P/x8fD/8fHw//Hx
        8P/x8fD/8PDw//Dw8P/w8PD/8PDw//Dw8P//////AAAAWwAAAEcAAAAwAAAAHAAAAA4AAAAFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAFAAAADQAAABoAAAAsAAAAQgAAAFT/////7Ozr/+Xk4//l5eT/5uXk/+bl
        5P/m5uX/5ubl/+fm5f/n5uX/5+fm/+fn5v/o5+b/6Ojn/+jo5//o6Of/6ejn/+np6P/p6ej/6eno/+rp
        6P/q6un/6urp/+rq6f/q6un/6+vq/+vr6v/r6+r/6+vq/+zs6//s7Ov/7Ozr/+zs6//s7Ov/7Ozr/+zs
        6//t7ez/7e3s/+3t7P/t7ez/7e3s/+3t7P/t7ez/7e3t/+7u7f/u7u3/7u7t/+7u7f/u7u3/7u7t/+7u
        7f/u7u7/7u7u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/u/+/v7v/v7+7/7+/v/+/v7//v7+//7+/v//Dw
        7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw7//w8O//8PDv//Dw
        7//w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw7//w8O//9PTz////
        //8AAABUAAAAQgAAACwAAAAaAAAADQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAALAAAAFgAA
        ACYAAAA5AAAASf//////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////wAAAEkAAAA5AAAAJgAAABYAAAALAAAABAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAARAAAAHgAAACwAAAA4AAAAQQAAAEcAAABJAAAASgAA
        AEoAAABKAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAA
        AEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEsAAABLAAAASwAAAEoAAABKAAAASQAA
        AEcAAABBAAAAOAAAACwAAAAeAAAAEQAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAA
        AAwAAAAUAAAAHgAAACcAAAAtAAAAMAAAADIAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMwAAADMAAAAzAAAAMwAAADMAAAAyAAAAMAAAAC0AAAAnAAAAHgAAABQAAAAMAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAAwAAAARAAAAFgAAABoAAAAcAAAAHQAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB0AAAAcAAAAGgAAABYAAAARAAAADAAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABgAAAAgAAAALAAAADQAAAA4AAAAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA4AAAAOAAAADgAAAA4AAAANAAAACwAAAAgAAAAGAAAAAwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABQAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABQAAAAUAAAAEAAAAAwAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABAAAAAQAAAAEAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////
        ///////////////8AAAAAAAAAAB/////////8AAAAAAAAAAAH////////+AAAAAAAAAAAAf////////A
        AAAAAAAAAAAD////////wAAAAAAAAAAAAf///////4AAAAAAAAAAAAD///////+AAAAAAAAAAAAAP///
        ////gAAAAAAAAAAAAB///////4AAAAAAAAAAAAAP//////+AAAAAAAAAAAAAB///////gAAAAAAAAAAA
        AAP//////4AAAAAAAAAAAAAB//////+AAAAAAAAAAAAAAP//////gAAAAAAAAAAAAAB//////4AAAAAA
        AAAAAAAAP/////+AAAAAAAAAAAAAAA//////gAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAA/////+A
        AAAAAAAAAAAAAAH/////gAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAAB/
        ////gAAAAAAAAAAAAAAAP////4AAAAAAAAAAAAAAAB////+AAAAAAAAAAAAAAAAP////gAAAAAAAAAAA
        AAAAB////4AAAAAAAAAAAAAAAAP///+AAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAAAAAP///4AAAAAA
        AAAAAAAAAAB///+AAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAD///4AAAAAAAAAAAAAAAAAf//+A
        AAAAAAAAAAAAAAAAD///gAAAAAAAAAAAAAAAAAf//4AAAAAAAAAAAAAAAAAH//+AAAAAAAAAAAAAAAAA
        A///gAAAAAAAAAAAAAAAAAP//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+A
        AAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAA
        Af//gAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAA
        AAAAAAH//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAH//4AAAAAA
        AAAAAAAAAAAB///AAAAAAAAAAAAAAAAAA///wAAAAAAAAAAAAAAAAAP//+AAAAAAAAAAAAAAAAAH///w
        AAAAAAAAAAAAAAAAD////AAAAAAAAAAAAAAAAD//////////////////////////////////////////
        //8oAAAAMAAAAGAAAAABACAAAAAAAIAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFBQBFhYWARkZGQIdHR0CISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECISEhAiEh
        IQIhISECISEhAiEhIQIhISECISEhAiEhIQIhISECHx8fAhsbGwIXFxcBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACUlJQQJCQkOBgYGFgYGBhcHBwcXCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgI
        CBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIGAgICBgICAgYCAgIFwcHBxcGBgYUEhISCy0s
        LAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAFBQUAQkJCQ4AAAAuAAAARwAAAEsAAABMAAAATAAAAEwAAABMAAAATAAA
        AEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAA
        AEsAAABEAAAALgsLCxQrKysFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWAQYGBhUAAABH+/v7//n5+f/6+vr++/v6//v7
        +//7+/v/+/v7/vz8/P/8/Pz+/Pz8//39/f/9/f3+/f39//39/f/+/v7+/v7+//7+/v/9/f3+/Pz8//r6
        +v/4+Pj+9fX1//Pz8//q6ur5VlZWkwICAj0AAAAbJCQkBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZAQYGBhcAAABL+fn5//b2
        9v/39/f++Pj4//n5+f/6+vr/+fn5/vr6+v/6+vr++/v7//z8/P/7+/v+/f39//39/f/9/f3+/v7+//7+
        /v/8/Pz++vr6//f39//z8/P+7+/v/+vr6//m5ub+09PT+2tra6gFBQVGAQEBHiIiIggnJycBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dAgcH
        BxgAAABM+fn5/vb29v739/f++Pj4/vn5+f75+fn++fn5/u/v7/739/f++/v7/vv7+/77+/v+/Pz8/vz8
        /P79/f3+/f39/v7+/v78/Pz++vr6/vf39/7z8/P+7+/v/uvr6/7l5eX+19fX/tDQ0P1/f3+8BAQERwAA
        ACEREREKKioqAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+09PT/7y8vP/ExMT/wsLC/sfHx//V1dX+0NDQ/9XV
        1f/Hx8f+ycnJ//v7+//W1tb+09PT/8vLy//29vb+5+fn/9LS0v/AwMD+sbGx/+jo6P+3t7f+oaGh/729
        vf/U1NT/jY2NyRAQEFUAAAAnERERCyoqKgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/f+8/Pz/+np6f/19fX/8vLy/vDw
        8P/19fX+9PT0//Hx8f/v7+/++Pj4//z8/P/o6Oj+9fX1//j4+P/5+fn+9fX1/+3t7f/n5+f+6urq/+zs
        7P/Y2Nj+19fX/8LBwf/h4eH/09PT/piYmNIWFhZeAAAAKRISEg0qKioCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5/vb29v739/f++Pj4/vn5
        +f75+fn++fn5/vr6+v76+vr++/v7/vn5+f7o6Oj+/Pz8/vz8/P79/f3+/f39/v39/f79/f3++/v7/vf3
        9/709PT+8PDw/u3t7f7o6Oj+4ODf/sTExP7b29v+4+Pj/tLS0v6kpKTfFhYWXwAAACkRERELKSkpAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn5//b2
        9v/39/f+0tLS/8HBwf+2trb/v7+//sPDw//Ozs7+wsLC/8nJyf/BwcH+1tbW/9ra2v/Kysr+vr6+/8TE
        xP/Dw8P+zs7O/8rKyv/U1NT+1dXV/7m5uf+qqqr+r6+v/6CgoP+1tbX/9fX1/uTk5P/T09P/pKSk4BYW
        Fl8AAAAoEBAQCiYmJgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+fn5//b29v/39/f+8/Pz/+jo6P/z8/P/9PT0/vT09P/u7u7+8PDw//X19f/19fX+9vb2/+jo
        6P/q6ur++Pj4//j4+P/w8PD+9/f3//X19f/y8vL+6urq/9/f3//m5ub+4+Li/9DQ0P+ysrL//f39/vT0
        9P/j4+P/0dHR/peXl9MQEBBXAAAAIxEREQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+fn5//b29v/39/b++Pj4//j4+P/5+fn/+fn5/vr6+v/6+vr++vr6//v7
        +//7+/v+/Pz8//z8/P/8/Pz+/f39//7+/v/9/f3+/Pz8//r6+v/4+Pj+9fX1//Hx8f/t7e3+6urq/9zb
        2/+5ubn//f39/v39/f/09PT/4uLi/tHR0f6MjIzKBAQESgEBASAjIyMIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vb29f729vb+9/f3/vj4+P75+fn+1NTU/tDQ
        0P7V1dX+0dHR/sHBwf7AwMD+y8vL/r+/v/6/v7/+yMjI/s3Nzf7Hx8f+0dHR/tzc3P7W1tb+1tbW/tnZ
        2f69vb3+qqqq/r29vf7Jycn+urq6/r29vP7Nzc3+3dzc/t/f3/7R0dH+fHx8vQUFBUoAAAAeIyMjBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+fn4//b29f/29vb+9/f3//j4
        +P/5+fn/9PT0/uPj4//x8fH+9vb2//T09P/09PT+8vLy/+/v7//39/f++Pj4//Ly8v/09PT+9fX1//j4
        +P/s7Oz+5eXl//Dw8P/u7u7+6Ojo/+fn5//l5eX/3d3d/tjY2P/T09P/zc3N/s7Ozv/W1dX/zs7O/Who
        aKoCAgJCAQEBFy0tLQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vX1
        9f729vb+9/f3/vf39/74+Pj++fn5/vn5+f75+fn+9PT0/vDw8P7o6Oj++/v7/vz8/P78/Pz+/Pz8/v39
        /f79/f3+/f39/v39/f78/Pz++vr6/vj4+P719fX+8/Pz/vDw8P7t7e3+6+vr/unp6f7n5ub+5OTk/uLi
        4v7h4OD+4uLi/tXV1ftTU1OVAAAAMhUVFQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM+Pj4//X19f/29vb+0dHR/8nJyf/Kysr/0dHR/sLCwv/Dw8P+zc3N/83Nzf/AwMD+u7u7/8XF
        xf/z8/P+1dXV/8zMzP/Hx8f+vr6+/7q6uv/b29v+3t7e/83Nzf/IyMj+z8/P/+fn5//x8fH/7+/v/u7u
        7v/s7Oz/6+vr/uvr6//q6ur/6+vr/uvr6//t7e35AAAARwcHBxQrKysBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM+Pj4//X19f/19fX+8vLx/+zs7P/z8/P/9PT0/u7u7v/w8PD+9vb2//b2
        9v/09PT+9fX1//T09P/7+/v+8/Pz//j4+P/39/f+9/f3//f39//4+Pj+9PT0//Dw8P/19fX+9PT0//b2
        9v/09PT/8/Pz/vHx8f/w8PD/7+/v/u/v7//v7+//7+/v/u/v7//19fX/AAAASwkJCRYzMzMBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4/vT09P719fX+9vb2/vf39/74+Pf++Pj4/vn5
        +f75+fn++vr6/vr6+v76+vr++/v7/vv7+/77+/v+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/v7+/v39
        /f78/Pz++/v7/vn5+f74+Pj+9vb2/vX19f709PT+8/Pz/vLy8v7y8vL+8vLy/vPz8/74+Pj+AAAATAoK
        Chc8PDwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj4//T09P/19fX+0dHR/8LC
        wv/BwcD/xMTE/snJyf/Pz8/+4uLi//r6+v/6+vr++/v7//v7+//7+/v+/Pz8//z8/P/8/Pz+/f39//39
        /f/9/f3+/v7+//7+/v/9/f3+/f39//v7+//6+vr/+fn5/vn5+f/4+Pj/9/f3/vf39//29vb/9/f3/vf3
        9//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM+Pj3//T0
        9P/19fT+8fHw/+/v7v/y8vL/7u7u/vT08//z8vP+4tb0/9C28//6+vr++/v7/8qu8v+gbOv+o3Dr/+jc
        +P/8/Pz+/f39//39/f/9/f3+/v7+//7+/v/9/f3+/v7+/82x9P/k1/j/+/r7/vv7+//6+vr/+vr6/vr6
        +v/6+vr/+vr6/vr6+v/8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9/f3/vPz8/709PT+9fX1/vb29v729vb+9/f3/uzl9v7AnvD+oWzs/rmT7/76+vr++vr6/vPv
        +f6nd+z+lFno/qp77P739Pv+/Pz8/vz8/P78/Pz+/f39/v39/f79/f3+/f39/rSM7/6YX+n+u5bw/u/n
        +v79/f3+/Pz8/vz8/P78/Pz+/Pz8/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9/f3//Pz8//09PP+9fX0//X19f/u6fX/xafw/qBs6/+dZ+r+roLu/97N
        9f/5+fn++vr6//v7+//o3ff+nGXq/5Zd6f/BoPH+/Pz8//z8/P/8/Pz+/f39//39/f/9/f3+/f39/9/O
        9/+qe+3/lVvp/pde6f/DovL/9O78/v7+/v/+/v7//f39/v7+/v/+/v7/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9/f2//Pz8v/z8/P+4t/m/8iv6v+mdez/nGXq/qBw
        5f+6o9z+3tvh/+/v7//5+fn++vr6//r6+v/6+vr+z7bz/5tk6v+bY+r+3s32//z8/P/8/Pz+/f39//39
        /f/8/Pz+/f39//39/f/49fz/0bj1/qJv6/+UWOn/nWjq/s6z9P/39Pz//f39/v7+/v/+/v7/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2/vLy8v7z8/L+tJXf/ptj
        6v6eaev+waTp/s7J1f7e3t7+29vb/uLi4v75+fn++fn5/vr6+v76+vr++Pb6/rmS7/6dZuv+p3fs/vHr
        +v77+/v+/Pz8/vz8/P78/Pz+/Pz8/vz8/P78/Pz+/f39/vTu+/7IqvP+mF/p/pFV6P7CofL+/f39/v39
        /f7+/v7+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9vb2//Ly
        8f/y8vL+w6Tu/5pi6v+eaev/x6vw/u7p9f/39/f+9/f3//j4+P/5+fn++fn5//r6+v/5+fn++vr6//Dq
        +f+rfe3+n2rr/7qU8P/59/v+/Pz8//z8/P/8/Pz+/Pz8//39/f/9/f3//Pz8/vTv+//KrfP/m2Pq/pRZ
        6f/Do/L//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9vb2//Ly8f/y8vL+4N3k/66V0f+fbeb/m2Pr/qRz6v/Ir+r+7+zz/+Tk5P/f39/+29vb/93d
        3f/29vb+5OTk/+Dg4P/Sw+j+pHLt/6Nv7P/MtO3+5eXl//v7+//s7Oz+4uLi/93d3f/d2+H/y7Tr/ql5
        7f+bZOv/onDq/sOq6P/s6fH//Pz8/v39/f/9/f3/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9vb1/vHx8P7x8fH+19fX/sjIyP7Tztr+wKHs/p1o6v6bZOr+pnnn/r2s
        1f7Q0ND+3d3d/tra2v74+Pj+5eXl/t/f3/7t7e3+yq3z/qZz7f6ldOv+z8Xc/vv7+/7g4OD+29vb/se4
        3P6rgub+o2/s/qRx7P7HqfH+6OPv/uzs7P7v7+/++/v7/vz8/P79/f3+AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Hx8P/x8fD+8vLx//Pz8v/z8/P/9PTz/uni
        8/+8me7+nWfr/7aO7v/39/f++Pj3//j4+P/5+fn++fn5//r6+v/5+fn+9vP5/7uV8P+od+7+to3w//Xx
        +v/6+vr++/v7/8Gf8v+qeu7/xqby/vDp+v/8/Pz/+/v7/vz8/P/8/Pz/+/v7/vz8/P/9/f3/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX1//Dw7//x8fD+4+Pj/9nZ
        2f/Q0ND/1NTU/tTU0//b29z+v7PR/7Wb2v/ExMT+6Ojo/9jY2P/W1tb+3d3d/9jY2P/Z2dn+4eHh/87E
        2v+theT+sIfr/8u06v/p6en+5ubm/72n3f/Mwdz/3Nzd/uXl5f/p6en/7Ozs/uTk5P/19fX/+/v7/vv7
        +//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9fX0/u/v
        7/7w8O/+1tbV/sTEw/7MzMz+1NTU/tjY1/7V1dX+1NTU/tfX1v7W1tX+29vb/r29vf7Ozs3+09PT/tnZ
        2f7Y2Nj+3Nzc/tDQ0P7Y2Nj+3d3d/t7e3v7i4uL+z8/P/tjY2P7d3d3+4eHh/t7e3v7q6ur+5+fn/uzs
        7P7y8vL++fn5/vr6+v78/Pz+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM9fX0/+/v7v/v7+/+8PDw//Hx8P/y8vH/8vLy/vPz8v/z8/P+9PT0//X19P/19fX+9vb1//b2
        9v/29vb+9/f3//j4+P/4+Pj++Pj4//n5+f/5+fn++vr6//r6+v/5+fn++vr6//r6+v/6+vr/+vr6/vr6
        +v/6+vr/+vr6/vv7+//7+/v/+vr6/vv7+//8/Pz/AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM9PT0/+7u7v/v7+7+8PDv//Dw8P/x8fD/4+Pj/uPj4v/k5OT+3Nzc/9fX
        1//V1dX+4eHh/9XV1f/S0tL+29vb/9ra2v/Z2dn+5ubm/+Tk5P/s7Oz+7Ozs/+/v7//a2tr+1tbW/+fn
        5//4+Pj/+fn5/vr6+v/6+vr/+vr6/vr6+v/6+vr/+vr6/vr6+v/7+/v/AAAATAsLCxdCQkICAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM9PTz/+7u7f/u7u7+7+/u//Dw7//w8PD/1tbV/sPD
        w//U1NT+3d3c/9HR0f/S0tL+0NDQ/83Nzf/Y2Nf+2tra/9nZ2f/X19f+1dXV/+fn5//S0tL+0dHR/+Li
        4v/e3t7+zc3N/9vb2//39/f/+fn5/vr6+v/6+vr/+fn5/vr6+v/6+vr/+fn5/vr6+v/7+/v/AAAATAsL
        CxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/u3t7P7u7u3+7u7u/u/v
        7v7w8O/+8PDv/vHx8P7x8fH+8vLx/vLy8v7z8/P+8/Pz/vT09P709PT+9fX1/vX19f729vX+9vb2/vf3
        9v739/f+9/f3/vf39/74+Pj++Pj4/vj4+P74+Pj++Pj4/vn5+f75+fn++fn5/vn5+f75+fn++fn5/vn5
        +f77+/v+AAAATAsLCxdCQkICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8/Pz/+3t
        7P/t7ez+4ODf/9nZ2P/U1NP/3d3d/tjY1//Ozs7+1tbW/9fX1//Y2Nf+2NjX/+Xl5P/j4+P+4+Pi/93d
        3f/e3t7+7+/u//b29v/29vb+9/f2//f39//39/f+9/f3//j49//4+Pj/+Pj4/vj4+P/4+Pj/+Pj4/vj4
        +P/4+Pj/+Pj4/vj4+P/6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8/Py/+zs6//t7ez+09PS/83NzP/Y2Nf/1tbV/snJyf/MzMv+0NDP/83Nzf/Q0ND+1NTT/9jY
        2P/c3Nz+0tLS/+Dg4P/e3t3+4uLi//X19f/19fX+9vb2//b29v/29vb+9/f2//f39//39/f/9/f3/vf3
        9//39/f/9/f3/vj49//4+Pf/9/f3/vf39//6+vr/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8vLy/uvr6v7s7Ov+7e3s/u3t7P7u7u3+7u7t/u/v7v7v7+/+8PDv/vDw
        8P7x8fD+8fHx/vLy8f7y8vL+8/Py/vPz8/7z8/P+9PTz/vT09P709PT+9fX0/vX19f719fX+9fX1/vb2
        9f729vb+9vb2/vb29v729vb+9vb2/vb29v729vb+9vb2/vb29v75+fn+AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8vLx/+vr6v/r6+r+3t7e/9TU0//Ozs3/1tbV/tbW
        1f/a2tr+6eno//Dw7//w8PD+8fHw//Hx8f/x8fH+8vLy//Pz8v/z8/L+8/Pz//T08//09PP+9PT0//T0
        9P/09PT+9fX1//X19f/19fX/9fX1/vX19f/29vX/9vb1/vb29f/29vX/9vb1/vb29f/5+fn/AAAATAsL
        CxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHx/+rq6f/r6+r+0dHQ/8rK
        yv/T09L/ysrK/tPT0v/U1NT+3Nzb/+/v7//w8O/+8PDv//Hx8P/x8fD+8fHx//Ly8f/y8vH+8vLy//Pz
        8v/z8/P+8/Pz//T08//09PP+9PT0//T09P/09PT/9PT0/vX19P/19fX/9fX0/vX19f/19fX/9fX0/vX1
        9f/4+Pj/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggICBgAAABM8fHw/unp
        6P7q6un+6+vq/uvr6v7s7Ov+7Ozr/u3t7P7t7ez+7u7t/u7u7f7v7+7+7+/v/vDw7/7w8O/+8PDw/vHx
        8P7x8fH+8fHx/vLy8f7y8vL+8vLy/vPz8v7z8/L+8/Pz/vPz8/7z8/P+8/Pz/vT08/709PP+9PTz/vT0
        8/709PP+9PTz/vT08/74+Pj+AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISEhAggI
        CBgAAABM8PDw/+no5//p6ej+6urp/+vr6v/r6+r/7Ozr/uzs6//t7ez+7e3s/+7u7f/u7u3+7+/u/+/v
        7v/v7+/+8PDv//Dw8P/w8PD+8fHw//Hx8f/x8fH+8vLx//Ly8f/y8vL+8vLy//Pz8v/z8/L/8/Py/vPz
        8v/z8/P/8/Pz/vPz8//z8/P/8/Pz/vPz8//39/f/AAAATAsLCxdBQUECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAggICBgAAABM8PDv/+jn5v/o6Of+6eno/+rq6f/q6un/6+vq/uzs6//s7Ov+7e3s/+3t
        7P/t7ez+7u7t/+7u7f/v7+7+7+/u/+/v7//w8O/+8PDv//Dw8P/w8PD+8fHw//Hx8P/x8fH+8vLx//Ly
        8f/y8vH/8vLx/vLy8f/y8vH/8vLx/vLy8v/y8vL/8PDv/vLy8f/39/b/AAAATAsLCxdBQUECAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHx8fAggICBcAAABM7+/u/ufm5f7n5+b+xcXE/srKyf66ubn+t7e2/ri4
        t/7R0dD+3Nzb/r29vf63t7b+ysrJ/ry8u/6/v7/+xMTE/rq6uf7Jycn+2NjX/uPj4v7CwsH+5ubm/r6+
        vf7a2tr+8PDw/snJyP6+vr3+ysrJ/tTU1P7T09L+0tLS/t7e3f7j4+L+5+fm/u7u7f729vX+AAAATAoK
        Chc9PT0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxsbAQcHBxYAAABL7+7u/+bl5P/n5uX+4+Lh/9jY
        1//j4+L/4uLh/t7e3f/j4+L+6eno/+fn5v/n5+b+5ubl/+fn5v/j4+L+6urp/+jo5//o6Oj+5OTj/+Dg
        3//m5uX+7+/v/+Dg3//Z2dn+8PDv/+zs7P/q6ur/7Ozr/u3t7P/u7u3/6urp/uzs6//v7+7/8PDv/vDw
        7//29vX/AAAASwkJCRY1NTUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkYAQYGBhMAAABB9fX1/u/u
        7v7v7+7+8O/v//Dw7//w8O/+8fDw/vHx8P/x8fH+8vLx//Ly8v/z8/L+8/Py//Pz8v/z8/P+8/Pz//T0
        8//09PP+9PTz//T09P/09PT+9PT0//X19P/19fT+9fX0//X19P/19fX+9fX1/vX19f/19fX+9fX1/vX1
        9f/19fX+9fX1/vX19f75+fn+AAAAQQgICBMxMTEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoa
        GgkAAAAgAAAAMgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAA2AAAANgAA
        ADYAAAA2AAAANgAAADYAAAA2AAAANgAAADYAAAAyAAAAICAgIAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADY2NgEoKCgGJiYmCioqKgsyMjILOTk5Czk5OQs5OTkLOTk5Czk5OQs5OTkLOTk5Czk5
        OQs5OTkLOTk5Czk5OQs6OjkLOjo5Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6
        Ogs6OjoLOjo6Czo6Ogs6OjoLOjo6Czo6Ogs6OjoLNzc3Cy4uLgspKSkKLCwsBj8/PwEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAA///AADwAAAA//8AAOAAAAB//wAA4AAAAD//AADgAAAAD/8AAOAA
        AAAH/wAA4AAAAAP/AADgAAAAAf8AAOAAAAAA/wAA4AAAAAB/AADgAAAAAH8AAOAAAAAAPwAA4AAAAAAf
        AADgAAAAAA8AAOAAAAAADwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAA
        AAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAHAADgAAAAAAcAAOAAAAAABwAA4AAAAAAH
        AADgAAAAAAcAAOAAAAAABwAA8AAAAAAPAADwAAAAAA8AAP///////wAAKAAAACAAAABAAAAAAQAgAAAA
        AACAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWFgITExMFGBgYBRwcHAUcHBwFHBwcBRwc
        HAUcHBwFHBwcBRwcHAUcHBwFHBwcBRwcHAUcHBwFHBwcBRkZGQUUFBQEGhoaAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFhYCAwMDHwAAADsAAAA+AAAAPwAA
        AD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPgAAADkDAwMfKCgoBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEwQAAAA7+vr6//n5
        +f/6+vr/+/v7//v7+//8/Pz//Pz8//z8/P/9/f3//f39//7+/v/9/f3/+/v7//f39//z8/P/6+vr/GBg
        YJoAAAAsHx8fCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYBQAA
        AD74+Pj/9/f3//j4+P/5+fn/+vr6//T09P/7+/v//Pz8//39/f/9/f3//f39//39/f/5+fn/9PT0/+7u
        7v/n5+f/1tbW/3Z2drIBAQE0FhYWCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/j4+P/39/f/z8/P/9TU1P/Q0ND/2tra/9fX1//X19f/4uLi/+Li4v/e3t7/6enp/+Hh
        4f/R0dH/z8/P/8zMzP+wsLD/1dXV/4eHh8MGBgY9ExMTDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/+Pj4//f39//4+Pj/+fn5//r6+v/6+vr/+/v7//Ly8v/9/f3//f39//39
        /f/9/f3/+vr6//X19f/v7+//6enp/9nZ2f/R0dH/3Nzc/5WVldAJCQlEExMTDgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/4+Pj/9/f3/9DQ0P/Ozs7/1NTU/9DQ0P/Pz8//09PT/+Pj
        4//Ly8v/1dXV/8vLy//T09P/4ODg/8zMzP/CwsL/v7+//6urqv/09PT/29vb/5SUlNEGBgY+EhISDAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/j4+P/39/b/+Pj4//n5+f/6+vr/+vr6//v7
        +//8/Pz//Pz8//z8/P/9/f3//f39//z8/P/4+Pj/8/Pz/+7u7v/n5+f/wcDA//39/f/z8/P/2tra/4WF
        hcMBAQE3GxsbCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/+Pj3//b29v/4+Pf/+fn5/9fX
        1//Z2dn/3Nzc/8vLy//Pz8//0dHR/9zc3P/Pz8//39/f/9ra2v/W1tb/1NTU/7+/v//Ozs7/wsLC/8rJ
        yf/V1dX/1dXV/3Nzc7MAAAAwHx8fBwAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/39/f/9vb2//f3
        9//4+Pj/+vr6//r6+v/09PT/8vLy//v7+//8/Pz//f39//39/f/+/v7//Pz8//n5+f/19fX/8vLy/+3t
        7f/o6Oj/5OTk/9/f3//c3Nz/29vb/15eXpwEBAQiJiYmAQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/f3
        9//29vX/1NTU/9jY2P/f39//xsbG/9fX1//V1dX/y8vL/+3t7f/j4+P/zs7O/8zMzP/d3d3/2tra/9nZ
        2f/d3d3/8vLy//Dw8P/t7e3/7Ozs/+vr6//s7Oz/7u7u/AAAADsjIyMEAAAAAAAAAAAAAAAAAAAAABwc
        HAUAAAA/9/f2//X19f/29vb/+Pj3//n5+f/6+vr/+vr6//v7+//7+/v//Pz8//z8/P/9/f3//f39//7+
        /v/9/f3//Pz8//r6+v/39/f/9fX1//Pz8//y8vL/8vLy//Ly8v/29vb/AAAAPi0tLQUAAAAAAAAAAAAA
        AAAAAAAAHBwcBQAAAD/29vb/9fX0/9PT0//S0tL/2dnZ/9DQ0P/s6u7/+Pb6//f0+v/i0/f/6uD4//z8
        /P/9/f3//f39//7+/v/9/f3/+vj8//n3+//6+vr/+fn5//j4+P/39/f/+Pj4//r6+v8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAcHBwFAAAAP/b29v/09PT/9fX1//b29v/39/f/2sj0/6t97f/t5fj/+vr6/7KJ
        7v+YX+n/7OP5//z8/P/9/f3//f39//7+/v/v5/v/pHHs/9nF9v/8/Pz//Pz8//v7+//7+/v//f39/wAA
        AD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9vb1//T08//19fT/4dTz/7CF7f+ibuv/zLHy//f2
        +f/6+vr/8u35/6Ju6/+rfe3/+fj7//z8/P/9/f3//f39//v5/f/Lr/T/mmPq/6p77f/k1vj//v7+//7+
        /v/+/v7/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/19fX/8/Pz/7OU3/+dZuv/u5rp/8zH
        0//W1tb/9vb2//r6+v/6+vr/4dL2/51m6//HqPL//Pz8//z8/P/9/f3//f39//39/f/07/v/wJ7x/5Va
        6f/BoPH//f39//7+/v8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/X19P/y8vL/wqPu/5xl
        6//AoO//7ej0//f39//4+Pj/+fn5//n5+f/6+vr/yazy/6Bs7P/i1Pf/+/v7//z8/P/8/Pz//Pz8//Tv
        +//DovL/mWDq/8Oi8f/9/f3//f39/wAAAD80NDQFAAAAAAAAAAAAAAAAAAAAABwcHAUAAAA/9PT0//Ly
        8f/Kysr/x7rZ/6yB6/+daOn/uJzf/9DP0v/T09P/6enp/9/f3//c297/to3w/6h66v/e2eP/6enp/9fW
        2f+wl9P/onDo/7KH7v/ZzOz/6+vr//v7+//9/f3/AAAAPzQ0NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAA
        AD/09PP/8fHw//Ly8f/z8/L/8/Pz/9bD8f+nd+z/4dns//j49//4+Pj/+fn5//r6+v/t5vj/rX/u/8Ce
        8f/6+vr/8On5/7SK7//ezfb/+/v7//r6+v/5+fn//Pz8//z8/P8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAA
        AAAcHBwFAAAAP/Pz8//w8O//ysrJ/8jIx//Ozs7/y8vK/8nHy//Ny8//zs7O/8PDw//Ly8v/z8/P/9DQ
        0P/MxNb/z8Tf/93b4P/U09b/zczP/9TU1P/k5OT/5OTk/+7u7v/6+vr//Pz8/wAAAD80NDQFAAAAAAAA
        AAAAAAAAAAAAABwcHAUAAAA/8vLy/+/v7//w8PD/8fHx//Ly8v/z8/P/9PTz//X19P/29vX/9vb2//f3
        9//4+Pj/+Pj4//n5+f/5+fn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//r6+v/7+/v/AAAAPzQ0
        NAUAAAAAAAAAAAAAAAAAAAAAHBwcBQAAAD/y8vH/7u7u/+/v7//w8PD/0NDQ/9LS0f/V1dX/xcXE/8nJ
        yf/Ly8v/1tbV/8nJyf/a2tr/2NjY/9jY2P/a2tr/ysrK/+7u7v/6+vr/+vr6//r6+v/6+vr/+vr6//v7
        +/8AAAA/NDQ0BQAAAAAAAAAAAAAAAAAAAAAcHBwFAAAAP/Hx8f/u7u3/7+/u/+/v7//w8PD/8fHx//Ly
        8f/z8/L/9PTz//T09P/19fX/9vb1//b29v/39/f/9/f3//j4+P/4+Pj/+Pj4//n5+P/5+fn/+fn5//n5
        +f/5+fn/+vr6/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABwcGwUAAAA/8fHw/+3t7P/MzMv/0NDP/9bW
        1v+7u7r/xcXE/83Nzf/Q0M//2NjY/9ra2f/Q0ND/6urp//X19f/29vb/9vb2//f39//39/f/9/f3//f3
        9//39/f/+Pj3//f39//5+fn/AAAAPzMzMwUAAAAAAAAAAAAAAAAAAAAAGxsbBQAAAD/w8O//7Ozr/+3t
        7P/u7u3/7u7u/+/v7v/w8O//8fHw//Hx8f/y8vL/8/Py//Pz8//09PP/9PT0//X19P/19fX/9fX1//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//j4+P8AAAA/MzMzBQAAAAAAAAAAAAAAAAAAAAAbGxsFAAAAP+/v
        7v/r6+r/ysrJ/8nJyP/Q0M//x8fG/+Tk4//w8O//8PDw//Hx8P/y8vH/8vLy//Pz8v/z8/P/9PTz//T0
        9P/09PT/9PT0//X19P/19fX/9fX1//X19f/19fX/9/f3/wAAAD8zMzMFAAAAAAAAAAAAAAAAAAAAABsb
        GwUAAAA/7u7t/+rq6f/r6+r/7Ozr/+zs6//t7ez/7u7t/+/v7v/v7+//8PDv//Dw8P/x8fD/8fHx//Ly
        8f/y8vL/8/Py//Pz8//z8/P/8/Pz//T08//09PP/9PTz//T08//29vb/AAAAPzMzMwUAAAAAAAAAAAAA
        AAAAAAAAGxsbBQAAAD/t7ez/6Ojn/+np6P/q6un/6+vq/+zs6//t7ez/7e3s/+7u7f/v7+7/7+/u//Dw
        7//w8PD/8fHw//Hx8f/x8fH/8vLx//Ly8f/y8vL/8vLy//Ly8v/y8vL/8fHx//X19f8AAAA/MzMzBQAA
        AAAAAAAAAAAAAAAAAAAZGRkFAAAAPuzs6//n5+b/zs7N/8TEw//BwcD/0NDP/9bW1f/Kysn/0NDP/8fH
        xv/R0dH/ysrJ/9bW1f/V1dT/3Nzb/8/Pzv/w8PD/xMTD/9PT0v/e3t3/3Nzc/+Pj4//r6+r/9PTz/wAA
        AD4uLi4FAAAAAAAAAAAAAAAAAAAAABUVFQQAAAA38fDw/+zs6//t7Oz/7u3t/+7u7f/v7+7/8PDv//Dw
        7//x8fD/8fHw//Hx8f/y8vH/8vLy//Ly8v/z8/L/8/Py//Pz8//z8/P/9PTz//T08//09PP/9PTz//T0
        8//39/b/AAAANycnJwQAAAAAAAAAAAAAAAAAAAAAHR0dAQwMDBQAAAAoAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAA
        ACoAAAAqAAAAKgAAACgODg4ULy8vAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09PQFKSkoCWFdXAlhY
        VwJYWFgCWFhYAlhYWAJYWFgCWFhYAllZWAJZWVgCWVlZAllZWQJZWVkCWVlZAllZWQJZWVkCWVlZAllZ
        WQJZWVkCWlpZAlpaWQJRUVECQUFAAQAAAAAAAAAAAAAAAAAAAADgAAf/wAAD/8AAAf/AAAD/wAAAf8AA
        AD/AAAAfwAAAD8AAAAfAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD8AAADygAAAAQAAAAIAAAAAEA
        IAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4OCQoKCiEODg4iDg4OIg4ODiIODg4iDg4OIg4O
        DiILCwsgFhYWCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCiH4+Pj/+vr5//n5+f/8/Pz//f39//39
        /f/4+Pj/7e3t/mtra50VFRUSAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4i9/f3/+Xl5f/n5+f/5+fn//Dw
        8P/w8PD/6Ojo/93d3f/MzMz/f39/tBQUFBgAAAAAAAAAAAAAAAAAAAAADg4OIvf39//k5OT/5ubm/+bm
        5v/q6ur/5+fn/+rq6v/c3Nz/xMTE//Dw8P9+fn60EhISEwAAAAAAAAAAAAAAAA4ODiL39/f/+Pj4/+np
        6f/j4+P/5ubm/+np6f/t7e3/5ubm/9vb2//W1tb/2tnZ/2tra58YGBgKAAAAAAAAAAAODg4i9vb2/+bm
        5v/m5ub/6Ojo/+zs7P/q6ur/6enp/+vr6//w8PD/8fHx/+/v7//w8PD+FBQUIAAAAAAAAAAADg4OIvX1
        9f/k5OT/39rl/9/R8//h0/b/28j2//39/f/9/f3/4dL3//Lt+f/5+fn/+vr6/xkZGSIAAAAAAAAAAA4O
        DiL09PT/ybHs/7aV5f/k3e7/+Pf6/7KJ7v/u5vn//Pz8//Do+v++m/H/zrP0//7+/v8aGhoiAAAAAAAA
        AAAODg4i8/Pz/7yj3/++nO7/3tfo/+zs7P/g2Or/uJLv/+/u8f/g2en/wqLx/8iu7P/8/Pz/GhoaIgAA
        AAAAAAAADg4OIvLy8f/e3t3/2dTf/8e53P/g4OD/4+Pj/82+4//azuv/0cTj/+Tg6v/x8fH/+/v7/xoa
        GiIAAAAAAAAAAA4ODiLx8fD/8PDw/+Li4f/h4eD/4ODg/+Pj4//p6en/6enp/+vr6//6+vr/+vr6//r6
        +v8aGhoiAAAAAAAAAAAODg0i7+/u/97e3v/d3dz/3t7d/+Tk5P/l5eX/8/Pz//f39//39/f/+Pj4//j4
        +P/5+fn/GRkZIgAAAAAAAAAADQ0NIu3t7P/b29r/3d3c/+3t7P/x8fH/8vLy//Pz8//09PT/9fX1//X1
        9f/29vX/9/f3/xkZGSIAAAAAAAAAAA0NDSLr6+r/6+rp/+zs6//u7u3/7+/u//Dw7//x8fD/8vLx//Ly
        8v/z8/L/8/Pz//T09P8ZGRkiAAAAAAAAAAALCwsg7Ozr/9vb2v/b29v/4ODf/97e3f/g4N//5OTj/+Tk
        5P/n5+b/5ubl/+rq6f/y8vL/FRUVIAAAAAAAAAAAHBwcBSIhIRUsKysWLCwsFiwsLBYsLCwWLCwsFiws
        LBYsLCwWLCwsFiwsLBYtLSwWJCQkFSUlJQUAAAAAgB8AAIAPAACABwAAgAMAAIABAACAAQAAgAEAAIAB
        AACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAA==
</value>
  </data>
</root>


================================================
File: DotNetPatcher/Frm_Result.vb
================================================
ï»¿Imports System.IO
Imports Implementer.Core.Obfuscation.Exclusion

Public Class Frm_Result

#Region " Fields "
    Private m_FilePath$
    Private m_hideAssemblyViewer As Boolean
#End Region

#Region " Constructor "
    Sub New(Title$, Message$, FilePath$, Optional ByVal hideAssemblyViewer As Boolean = False)
        InitializeComponent()
        Frm_ResultThemeContainer.Text = Title
        LblResultMessage.Text = Message
        m_FilePath = FilePath
        m_hideAssemblyViewer = hideAssemblyViewer
    End Sub
#End Region

#Region " Methods "

    Private Sub Frm_Result_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        If Frm_ResultThemeContainer.Text.Contains("Error") Then
            PcbResultIcon.Image = My.Resources._error
            BtnResultOpenFileDir.Visible = False
            BtnResultOpenAssemblyViewer.Visible = False
        ElseIf Frm_ResultThemeContainer.Text.Contains("Success") Then
            PcbResultIcon.Image = My.Resources.Valid
            BtnResultOpenFileDir.Visible = True
            BtnResultOpenAssemblyViewer.Visible = True
            BtnResultOpenAssemblyViewer.Enabled = If(m_hideAssemblyViewer, False, True)
        ElseIf Frm_ResultThemeContainer.Text.Contains("Warning") Then
            PcbResultIcon.Image = My.Resources.Warning
            BtnResultOpenFileDir.Visible = False
            BtnResultOpenAssemblyViewer.Visible = False
        ElseIf Frm_ResultThemeContainer.Text.Contains("Loading") Then
            PcbResultIcon.Image = My.Resources.Loading
            BtnResultOpenFileDir.Visible = False
            BtnResultOpenAssemblyViewer.Visible = False      
        End If
        PcbResultIcon.Visible = True
    End Sub

    Private Sub BtnStart_Click(sender As Object, e As EventArgs) Handles BtnResultClose.Click
        Me.Close()
    End Sub

    Private Sub BtnResultOpenFileDir_Click(sender As Object, e As EventArgs) Handles BtnResultOpenFileDir.Click
        Dim fi As New FileInfo(m_FilePath)
        Process.Start(fi.DirectoryName)
        Me.Close()
    End Sub

    Private Sub BtnResultOpenAssemblyViewer_Click(sender As Object, e As EventArgs) Handles BtnResultOpenAssemblyViewer.Click
        Dim m_exclude = New Frm_Exclusion
        m_exclude.InitializeExcludeList()
        m_exclude.SettingsState = New ExclusionState(False, False, False, False, False, False)
        With m_exclude
            .Dependencies = New List(Of String)
            .Title = "Protected file"
            .ViewAssemblyOnly = True
            .FilePath = m_FilePath
            .ShowDialog()
        End With

        'Dim frm As New Frm_Exclusion(New ExclusionTreeview(_FilePath), "Protected file", True)
        'frm.ShowDialog()
    End Sub
#End Region

End Class


================================================
File: DotNetPatcher/Program.vb
================================================
ï»¿Imports System.Threading

Friend Class Program
    <STAThread()>
    Public Shared Sub Main(ByVal Args As String())
        Application.EnableVisualStyles()
        Application.SetCompatibleTextRenderingDefault(False)
        Dim instanceCountOne As Boolean = False
        Using mtex As Mutex = New Mutex(True, Application.ProductName, instanceCountOne)
            If instanceCountOne Then
                Application.Run(New Frm_Main)
                mtex.ReleaseMutex()
            End If
        End Using
    End Sub
End Class




================================================
File: DotNetPatcher/app.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- Cette section dÃ©finit la configuration de l'enregistrement dans le fichier journal de My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Supprimez les marques de commentaire dans la section suivante pour Ã©crire dans le journal des Ã©vÃ©nements de l'application -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information" />
        </switches>
        <sharedListeners>
            <add name="FileLog"
                 type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"
                 initializeData="FileLogWriter"/>
            <!-- Supprimez les marques de commentaire dans la section suivante et remplacez APPLICATION_NAME par le nom de votre application Ã  Ã©crire dans le journal des Ã©vÃ©nements de l'application -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
</configuration>



================================================
File: DotNetPatcher/My Project/Application.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.18449
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On




================================================
File: DotNetPatcher/My Project/Application.myapp
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MySubMain>false</MySubMain>
  <MainForm>Frm_Main</MainForm>
  <SingleInstance>false</SingleInstance>
  <ShutdownMode>0</ShutdownMode>
  <EnableVisualStyles>true</EnableVisualStyles>
  <AuthenticationMode>0</AuthenticationMode>
  <SaveMySettingsOnExit>false</SaveMySettingsOnExit>
</MyApplicationData>


================================================
File: DotNetPatcher/My Project/AssemblyInfo.vb
================================================
ï»¿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
' l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
' associÃ©es Ã  un assembly.

' Passez en revue les valeurs des attributs de l'assembly

<Assembly: AssemblyTitle("DotNetPatcher")> 
<Assembly: AssemblyDescription("DotNetPatcher")> 
<Assembly: AssemblyCompany("3DotDev Freewares")> 
<Assembly: AssemblyProduct("DotNetPatcher")> 
<Assembly: AssemblyCopyright("Copyright Â© 3DotDev 2015")> 
<Assembly: AssemblyTrademark("DotNetPatcher")> 

<Assembly: ComVisible(False)>

'Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
<Assembly: Guid("915ff3d7-13e1-42a5-b672-b3e31e96fa76")> 

' Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
'
'      Version principale
'      Version secondaire 
'      NumÃ©ro de build
'      RÃ©vision
'
' Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
' en utilisant '*', comme indiquÃ© ci-dessousÂ :
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("4.4.2.0")> 
<Assembly: AssemblyFileVersion("4.4.2.0")> 



================================================
File: DotNetPatcher/My Project/Resources.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.18408
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'Cette classe a Ã©tÃ© gÃ©nÃ©rÃ©e automatiquement par la classe StronglyTypedResourceBuilder
    'Ã  l'aide d'un outil, tel que ResGen ou Visual Studio.
    'Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis rÃ©exÃ©cutez ResGen
    'avec l'option /str ou rÃ©gÃ©nÃ©rez votre projet VS.
    '''<summary>
    '''  Une classe de ressource fortement typÃ©e destinÃ©e, entre autres, Ã  la consultation des chaÃ®nes localisÃ©es.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Retourne l'instance ResourceManager mise en cache utilisÃ©e par cette classe.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("DotNetPatcher.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Remplace la propriÃ©tÃ© CurrentUICulture du thread actuel pour toutes
        '''  les recherches de ressources Ã  l'aide de cette classe de ressource fortement typÃ©e.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property _error() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("_error", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Loading() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Loading", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property TDD() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("TDD", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Valid() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Valid", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Warning() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Warning", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
    End Module
End Namespace



================================================
File: DotNetPatcher/My Project/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Loading" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Loading.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TDD" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\TDD.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Valid" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Valid.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Warning" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Warning.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="_error" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\error.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DotNetPatcher/My Project/Settings.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.18449
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My
    
    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"),  _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase
        
        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)
        
#Region "FonctionnalitÃ© Enregistrement automatique My.Settings"
#If _MyType = "WindowsForms" Then
    Private Shared addedHandler As Boolean

    Private Shared addedHandlerLockObject As New Object

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
        If My.Application.SaveMySettingsOnExit Then
            My.Settings.Save()
        End If
    End Sub
#End If
#End Region
        
        Public Shared ReadOnly Property [Default]() As MySettings
            Get
                
#If _MyType = "WindowsForms" Then
               If Not addedHandler Then
                    SyncLock addedHandlerLockObject
                        If Not addedHandler Then
                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                            addedHandler = True
                        End If
                    End SyncLock
                End If
#End If
                Return defaultInstance
            End Get
        End Property
    End Class
End Namespace

Namespace My
    
    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
    Friend Module MySettingsProperty
        
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")> _
        Friend ReadOnly Property Settings() As Global.DotNetPatcher.My.MySettings
            Get
                Return Global.DotNetPatcher.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace



================================================
File: DotNetPatcher/My Project/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">
  <Profiles />
  <Settings />
</SettingsFile>


================================================
File: DotNetPatcher/My Project/app.manifest
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<asmv1:assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1" xmlns:asmv1="urn:schemas-microsoft-com:asm.v1" xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <assemblyIdentity version="1.0.0.0" name="MyApplication.app"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <!-- Options du manifeste de contrÃ´le de compte d'utilisateur
             Si vous souhaitez modifier le niveau du contrÃ´le de compte d'utilisateur Windows, remplacez le nÅ“ud 

             requestedExecutionLevel par l'une des propositions suivantes.
        <requestedExecutionLevel  level="asInvoker"  uiAccess="false" />
        <requestedExecutionLevel  level="requireAdministrator"  uiAccess="false" />
        <requestedExecutionLevel  level="highestAvailable"  uiAccess="false" />

            La spÃ©cification du nÅ“ud requestedExecutionLevel dÃ©sactivera la virtualisation de fichiers et du Registre.
            Si vous souhaitez utiliser la virtualisation de fichiers et du Registre pour la compatibilitÃ© 
            descendante, supprimez le noeud requestedExecutionLevel.
        -->
        <requestedExecutionLevel  level="requireAdministrator"  uiAccess="false" />
      </requestedPrivileges>
    </security>
  </trustInfo>

  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!-- Liste de toutes les versions de Windows avec lesquelles cette application peut fonctionner. 
      Windows sÃ©lectionnera automatiquement l'environnement le plus compatible.-->

      <!-- Si votre application est conÃ§ue pour fonctionner avec WindowsÂ Vista, supprimez les commentaires du nÅ“ud supportedOS suivant-->
      <!--<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"></supportedOS>-->

      <!-- Si votre application est conÃ§ue pour fonctionner avec Windows 7, supprimez les commentaires du nÅ“ud supportedOS suivant-->
      <!--<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>-->

      <!-- Si votre application est conÃ§ue pour fonctionner avec WindowsÂ 8, supprimez les commentaires du nÅ“ud supportedOS suivant-->
      <!--<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"></supportedOS>-->

    </application>
  </compatibility>

  <!-- Activer les thÃ¨mes pour les contrÃ´les et boÃ®tes de dialogue communes de Windows (Windows XP et version ultÃ©rieure) -->
  <!-- <dependency>
    <dependentAssembly>
      <assemblyIdentity
          type="win32"
          name="Microsoft.Windows.Common-Controls"
          version="6.0.0.0"
          processorArchitecture="*"
          publicKeyToken="6595b64144ccf1df"
          language="*"
        />
    </dependentAssembly>
  </dependency>-->

</asmv1:assembly>




================================================
File: Helper/Helper.vbproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{C83FB11B-F2FC-4895-BEDE-11BFA9C90AE3}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>Helper</RootNamespace>
    <AssemblyName>Helper</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <OptionExplicit>On</OptionExplicit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionCompare>Binary</OptionCompare>
  </PropertyGroup>
  <PropertyGroup>
    <OptionStrict>Off</OptionStrict>
  </PropertyGroup>
  <PropertyGroup>
    <OptionInfer>On</OptionInfer>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Mono.Cecil, Version=0.9.4.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\Implementer\bin\Mono.Cecil.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Assembly\DataFull.vb" />
    <Compile Include="Cecil\DelegateEmitter.vb" />
    <Compile Include="Cecil\Finder.vb" />
    <Compile Include="Cecil\NameChecker.vb" />
    <Compile Include="Cecil\ProcessedIL.vb" />
    <Compile Include="CodeDom\Compiler.vb" />
    <Compile Include="Assembly\Data.vb" />
    <Compile Include="Assembly\Infos.vb" />
    <Compile Include="Assembly\Loader.vb" />
    <Compile Include="Assembly\IAssemblyInfos.vb" />
    <Compile Include="Cecil\Utils.vb" />
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="Crypto\Crypt.vb" />
    <Compile Include="Crypto\Generator.vb" />
    <Compile Include="Cecil\Msil.vb" />
    <Compile Include="Cecil\Injecter.vb" />
    <Compile Include="Resource\NativeMethods.vb" />
    <Compile Include="Resource\ResourceEx.vb" />
    <Compile Include="Randomize\Randomizer.vb" />
    <Compile Include="Randomize\RandomizerType.vb" />
    <Compile Include="Utils\Functions.vb" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: Helper/Assembly/Data.vb
================================================
ï»¿Imports System.Reflection

Namespace AssemblyHelper
    Public Class Data

#Region " Properties "
        Public Property AssName As String
        Public Property AssVersion As String
        Public Property IsWpf As Boolean
        Public Property Location As String
        Public Property EntryPoint As MethodInfo
        Public Property AssemblyReferences As AssemblyName()
        Public Property Result As Message
#End Region

#Region " Enumerations"
        Public Enum Message
            Failed = 0
            Success = 1
        End Enum
#End Region
      
    End Class
End Namespace




================================================
File: Helper/Assembly/DataFull.vb
================================================
ï»¿Imports System.Reflection
Imports System.IO

Namespace AssemblyHelper
    Public Class DataFull
        Inherits Data

#Region " Properties "
        Public Property ManifestResourceNames As IEnumerable(Of String)
        Public Property ManifestResourceStreams As List(Of Stream)
        Public Property TypesClass As IEnumerable(Of Type)
        Public Property Modules As IEnumerable(Of Reflection.Module)
#End Region

    End Class
End Namespace




================================================
File: Helper/Assembly/IAssemblyInfos.vb
================================================
ï»¿Imports System.Reflection
Imports System.IO

Namespace AssemblyHelper
    Public Interface IAssemblyInfos
        Sub GetAssemblyInfo(assembly() As Byte, ByRef AssName$, ByRef AssVersion$, ByRef IsWpfApp As Boolean, ByRef EntryPoint As MethodInfo, ByRef AssemblyReferences As AssemblyName(), ByRef ManifestResourceNames As IEnumerable(Of String), ByRef ManifestResourceStreams As List(Of Stream), ByRef TypesClass As IEnumerable(Of Type), ByRef Modules As IEnumerable(Of [Module]), ByRef Result As Data.Message, Optional ByVal LoadMaxInfos As Boolean = False)
    End Interface

End Namespace




================================================
File: Helper/Assembly/Infos.vb
================================================
ï»¿Imports System.Reflection
Imports System.IO

Namespace AssemblyHelper

    <Serializable> _
    Public Class Infos
        Implements IAssemblyInfos

#Region " Methods "

        Private Sub AssemblyInfo(assemblyBuffer As Byte(), ByRef AssName$, ByRef AssVersion$, ByRef IsWpfApp As Boolean, ByRef EntryPoint As MethodInfo, ByRef AssemblyReferences As AssemblyName(), ByRef ManifestResourceNames As IEnumerable(Of String), ByRef ManifestResourceStreams As List(Of Stream), ByRef TypesClass As IEnumerable(Of Type), ByRef Modules As IEnumerable(Of [Module]), ByRef Result As Data.Message, Optional ByVal LoadMaxInfos As Boolean = False)
            Try
                Dim assembly = AppDomain.CurrentDomain.Load(assemblyBuffer)

                Dim manifest = assembly.ManifestModule
                AssName = manifest.ScopeName

                Dim fileVersionAttributes = assembly.GetCustomAttributes(GetType(AssemblyFileVersionAttribute), True)
                If fileVersionAttributes.Length = 1 Then
                    Dim fileVersion = TryCast(fileVersionAttributes(0), AssemblyFileVersionAttribute)
                    AssVersion = fileVersion.Version
                End If

                Dim isWpfProg = assembly.GetReferencedAssemblies().Any(Function(x) x.Name.ToLower = "system.xaml") AndAlso _
        assembly.GetManifestResourceNames().Any(Function(x) x.ToLower.EndsWith(".g.resources"))

                IsWpfApp = isWpfProg
                EntryPoint = assembly.EntryPoint
                AssemblyReferences = assembly.GetReferencedAssemblies

                If LoadMaxInfos = True Then
                    ManifestResourceNames = assembly.GetManifestResourceNames

                    For Each r In ManifestResourceNames
                        Dim resourceStream As Stream = assembly.GetManifestResourceStream(r)
                        If Not resourceStream Is Nothing Then
                            ManifestResourceStreams.Add(resourceStream)
                        End If
                    Next

                    TypesClass = assembly.GetTypes.Where(Function(t) t.IsClass)
                    Modules = assembly.GetModules
                End If

                Result = Data.Message.Success

            Catch ex As ReflectionTypeLoadException
                Result = Data.Message.Failed
            Catch ex As FileNotFoundException
                Result = Data.Message.Failed
            Catch ex As FileLoadException
                Result = Data.Message.Failed
            Catch ex As NotSupportedException
                Result = Data.Message.Failed
            Catch ex As BadImageFormatException
                Result = Data.Message.Failed
            Finally
                'LogLoadedAssemblies()
            End Try
        End Sub

        Public Sub GetAssemblyInfo(assembly() As Byte, ByRef AssName$, ByRef AssVersion$, ByRef IsWpfApp As Boolean, ByRef EntryPoint As MethodInfo, ByRef AssemblyReferences As AssemblyName(), ByRef ManifestResourceNames As IEnumerable(Of String), ByRef ManifestResourceStreams As List(Of Stream), ByRef TypesClass As IEnumerable(Of Type), ByRef Modules As IEnumerable(Of [Module]), ByRef Result As Data.Message, Optional ByVal LoadMaxInfos As Boolean = False) Implements IAssemblyInfos.GetAssemblyInfo
            AssemblyInfo(assembly, AssName, AssVersion, IsWpfApp, EntryPoint, AssemblyReferences, ManifestResourceNames, ManifestResourceStreams, TypesClass, Modules, Result, LoadMaxInfos)
        End Sub

#End Region

    End Class

End Namespace



================================================
File: Helper/Assembly/Loader.vb
================================================
ï»¿Imports System.Reflection
Imports System.IO
Imports Helper.RandomizeHelper
Imports Helper.UtilsHelper

Namespace AssemblyHelper
    Public Class Loader

#Region " Methods "
        Public Shared Function Minimal(AssPath$) As Data

            'Dim inf As New Infos()
            'inf.

            Dim tempAppDomain As AppDomain = Nothing
            Dim fName = Randomizer.GenerateNewAlphabetic
            Dim path As String = String.Format("{0}{1}\", System.IO.Path.GetTempPath, fName)
            Directory.CreateDirectory(path)
            Dim tempAssemblyFilePath As String = (path & fName)
            File.Copy(AssPath, tempAssemblyFilePath, True)

            Dim AssData As New Data
            Try
                tempAppDomain = AppDomain.CreateDomain(Randomizer.GenerateNewAlphabetic)

                Dim assemblyBuffer As Byte() = File.ReadAllBytes(tempAssemblyFilePath)

                Dim anObject As Object = Nothing

                If Assembly.GetExecutingAssembly.GetName.Name.ToLower = "helper" Then
                    anObject = tempAppDomain.CreateInstanceAndUnwrap("Helper", "Helper.AssemblyHelper.Infos")
                Else
                    anObject = tempAppDomain.CreateInstanceAndUnwrap("DotNetPatcher", "Helper.AssemblyHelper.Infos")
                End If

                Dim assemblyInspector As IAssemblyInfos = TryCast(anObject, IAssemblyInfos)

                Dim AssName$ = String.Empty
                Dim AssVersion$ = String.Empty
                Dim IsWpf As Boolean
                Dim Location$ = String.Empty
                Dim EntryPoint As MethodInfo = Nothing
                Dim AssemblyReferences As AssemblyName() = Nothing
                Dim ManifestResourceNames As IEnumerable(Of String) = Nothing
                Dim ManifestResourceStreams As New List(Of Stream)
                Dim TypesClass As IEnumerable(Of Type) = Nothing
                Dim Modules As IEnumerable(Of [Module]) = Nothing
                Dim Result As Data.Message

                assemblyInspector.GetAssemblyInfo(assemblyBuffer, AssName, AssVersion, IsWpf, EntryPoint, AssemblyReferences, ManifestResourceNames, ManifestResourceStreams, TypesClass, Modules, Result)

                With AssData
                    .AssName = AssName
                    .AssVersion = AssVersion
                    .IsWpf = IsWpf
                    .Location = AssPath
                    .EntryPoint = EntryPoint
                    .AssemblyReferences = AssemblyReferences
                    .Result = Result
                End With

            Catch exception As Exception
                'MsgBox(exception.ToString)
            Finally
                CleanDomain(tempAppDomain, tempAssemblyFilePath, path)
            End Try
            Return AssData
        End Function

        Public Shared Function Full(AssPath$) As DataFull

            Dim tempAppDomain As AppDomain = Nothing
            Dim fName = Randomizer.GenerateNewAlphabetic
            Dim path As String = String.Format("{0}{1}\", System.IO.Path.GetTempPath, fName)
            Directory.CreateDirectory(path)
            Dim tempAssemblyFilePath As String = (path & fName)
            File.Copy(AssPath, tempAssemblyFilePath, True)

            Dim AssData As New DataFull
            Try
                tempAppDomain = AppDomain.CreateDomain(Randomizer.GenerateNewAlphabetic)

                Dim assemblyBuffer As Byte() = File.ReadAllBytes(tempAssemblyFilePath)

                Dim anObject As Object = Nothing

                If Assembly.GetExecutingAssembly.GetName.Name.ToLower = "helper" Then
                    anObject = tempAppDomain.CreateInstanceAndUnwrap("Helper", "Helper.AssemblyHelper.Infos")
                Else
                    anObject = tempAppDomain.CreateInstanceAndUnwrap("DotNetPatcher", "Helper.AssemblyHelper.Infos")
                End If

                Dim assemblyInspector As IAssemblyInfos = TryCast(anObject, IAssemblyInfos)

                Dim AssName$ = String.Empty
                Dim AssVersion$ = String.Empty
                Dim IsWpf As Boolean
                Dim Location$ = String.Empty
                Dim EntryPoint As MethodInfo = Nothing
                Dim AssemblyReferences As AssemblyName() = Nothing
                Dim ManifestResourceNames As IEnumerable(Of String) = Nothing
                Dim ManifestResourceStreams As New List(Of Stream)
                Dim TypesClass As IEnumerable(Of Type) = Nothing
                Dim Modules As IEnumerable(Of [Module]) = Nothing
                Dim Result As DataFull.Message

                assemblyInspector.GetAssemblyInfo(assemblyBuffer, AssName, AssVersion, IsWpf, EntryPoint, AssemblyReferences, ManifestResourceNames, ManifestResourceStreams, TypesClass, Modules, Result, True)

                With AssData
                    .AssName = AssName
                    .AssVersion = AssVersion
                    .IsWpf = IsWpf
                    .Location = New FileInfo(AssPath).DirectoryName
                    .EntryPoint = EntryPoint
                    .AssemblyReferences = AssemblyReferences
                    .ManifestResourceNames = ManifestResourceNames
                    .ManifestResourceStreams = ManifestResourceStreams
                    .TypesClass = TypesClass
                    .Modules = Modules
                    .Result = Result
                End With

            Catch exception As Exception
                'MsgBox(exception.ToString)
            Finally
                CleanDomain(tempAppDomain, tempAssemblyFilePath, path)
            End Try
            Return AssData
        End Function

        Private Shared Sub CleanDomain(tempAppDomain As AppDomain, tempAssemblyFilePath$, path$)
            If Not tempAppDomain Is Nothing Then
                AppDomain.Unload(tempAppDomain)
                If File.Exists(tempAssemblyFilePath) Then
                    File.Delete(tempAssemblyFilePath)
                End If
                If Directory.Exists(path) Then
                    Directory.Delete(path)
                End If
            End If
        End Sub

        Public Shared Function GenerateInfos(ByVal Title As String, ByVal Description As String, ByVal Company As String, ByVal Product As String, ByVal Copyright As String, ByVal Trademark As String, ByVal Version As String) As String
            Return "Imports System.Reflection" & vbNewLine & vbNewLine _
            & "<" & "Assembly: AssemblyTitle(""" & Title & """)>" & vbNewLine _
            & "<Assembly: AssemblyDescription(""" & Description & """)>" & vbNewLine _
            & "<" & "Assembly: AssemblyCompany(""" & Company & """)>" & vbNewLine _
            & "<Assembly: AssemblyProduct(""" & Product & """)>" & vbNewLine _
            & "<Assembly: AssemblyCopyright(""" & Copyright & """)>" & vbNewLine _
            & "<" & "Assembly: AssemblyTrademark(""" & Trademark & """)>" & vbNewLine _
            & "<Assembly: AssemblyVersion(""" & Version & """)>" & vbNewLine _
            & "<Assembly: AssemblyFileVersion(""" & Version & """)>"
        End Function
#End Region
      
    End Class
End Namespace


================================================
File: Helper/Cecil/DelegateEmitter.vb
================================================
ï»¿Imports Mono.Cecil
Imports Helper.RandomizeHelper

Namespace CecilHelper
    Public Class DelegateEmitter

#Region " Constants "
        Private Const DelegateTypeAttributes As TypeAttributes = TypeAttributes.Class Or TypeAttributes.Public Or TypeAttributes.Sealed
        Private Const ConstructorAttributes As MethodAttributes = MethodAttributes.Public Or MethodAttributes.SpecialName Or MethodAttributes.RTSpecialName
        Private Const DelegateMethodAttributes As MethodAttributes = MethodAttributes.Public Or MethodAttributes.Virtual Or MethodAttributes.VtableLayoutMask
#End Region

#Region " Fields "
        Private Shared voidType As TypeReference
        Private Shared objectType As TypeReference
        Private Shared nativeIntType As TypeReference
        Private Shared multidelegate As TypeReference
#End Region

#Region " Methods "

        Public Shared Function Create(asm As AssemblyDefinition, delegateName As String, returnType As TypeReference, arguments As List(Of TypeReference)) As TypeDefinition
            InitializeTypes(asm)

            Dim TypeDef = New TypeDefinition(String.Empty, delegateName, DelegateTypeAttributes, multidelegate)
            With TypeDef.Methods
                .Add(BuildConstructor)
                .Add(BuildInvoke(returnType, arguments))
            End With
          
            Return TypeDef
        End Function

        Private Shared Sub InitializeTypes(assDef As AssemblyDefinition)
            voidType = assDef.MainModule.Import(GetType(Void))
            objectType = assDef.MainModule.Import(GetType(Object))
            nativeIntType = assDef.MainModule.Import(GetType(IntPtr))
            multidelegate = assDef.MainModule.Import(GetType(System.MulticastDelegate))
        End Sub

        Private Shared Function BuildConstructor() As MethodDefinition
            Dim constructor = New MethodDefinition(".ctor", ConstructorAttributes, voidType)
            With constructor
                .Parameters.Add(New ParameterDefinition("objectInstance", ParameterAttributes.None, objectType))
                .Parameters.Add(New ParameterDefinition("functionPtr", ParameterAttributes.None, nativeIntType))
                .ImplAttributes = MethodImplAttributes.Runtime
            End With
            Return constructor
        End Function

        Private Shared Function BuildInvoke(returnType As TypeReference, arguments As List(Of TypeReference)) As MethodDefinition
            Dim invoke = New MethodDefinition("Invoke", DelegateMethodAttributes, returnType)
            With invoke
                For Each argument In arguments
                    .Parameters.Add(New ParameterDefinition(Randomizer.GenerateNew, ParameterAttributes.None, argument))
                Next
                .ImplAttributes = MethodImplAttributes.Runtime
            End With
            Return invoke
        End Function

#End Region

    End Class
End Namespace


================================================
File: Helper/Cecil/Finder.vb
================================================
ï»¿Imports Mono.Cecil

Namespace CecilHelper
    Public NotInheritable Class Finder

#Region " Methods "
        Public Shared Function FindCustomAttributeByName(member As MethodDefinition, CaName$) As Boolean
            Return Enumerable.Any(Of CustomAttribute)(member.CustomAttributes, Function(ca) ca.AttributeType.Name = CaName)
        End Function

        Public Shared Function FindCustomAttributeByName(member As TypeDefinition, CaName$) As Boolean
            Return Enumerable.Any(Of CustomAttribute)(member.CustomAttributes, Function(ca) ca.AttributeType.Name = CaName)
        End Function

        Public Shared Function FindCustomAttributeByName(member As AssemblyDefinition, CaName$) As Boolean
            Return Enumerable.Any(Of CustomAttribute)(member.CustomAttributes, Function(ca) ca.AttributeType.Name = CaName)
        End Function

        Public Shared Function FindGenericParameter(member As MethodDefinition) As Boolean
            If Not member Is Nothing AndAlso Not member.ReturnType Is Nothing AndAlso member.ReturnType.IsGenericParameter Then
                Return True
            End If
            Return False
        End Function

        Public Shared Function FindType(moduleDef As ModuleDefinition, Name As String, Optional ByVal Full As Boolean = False) As TypeDefinition
            For Each typeDef As TypeDefinition In moduleDef.Types
                Dim returnType As TypeDefinition = Nothing

                If Full Then
                    If typeDef.FullName = Name Then
                        Return typeDef
                    End If
                Else
                    If typeDef.Name = Name Then
                        Return typeDef
                    End If
                End If

                returnType = FindNestedType(typeDef, Name)

                If returnType IsNot Nothing Then
                    Return returnType
                End If
            Next

            Return Nothing
        End Function

        ''' <summary>
        ''' Recursive search for nested types
        ''' </summary>
        ''' <param name="parentType"></param>
        ''' <param name="fullname"></param>
        ''' <returns></returns>
        Private Shared Function FindNestedType(parentType As TypeDefinition, fullname As String) As TypeDefinition
            For Each type In parentType.NestedTypes
                If type.FullName = fullname Then
                    Return type
                End If

                If type.HasNestedTypes Then
                    Return FindNestedType(type, fullname)
                End If
            Next

            Return Nothing
        End Function

        ''' <summary>
        ''' by The Unknown Programmer
        ''' </summary>
        ''' <param name="parentDef"></param>
        ''' <param name="name"></param>
        ''' <returns></returns>
        Public Shared Function FindType(parentDef As TypeDefinition, name As String) As TypeDefinition
            Return parentDef.NestedTypes.First(Function(t) t.Name = name)
        End Function

        Public Shared Function FindMethod(assDef As AssemblyDefinition, name As String) As MethodDefinition
            For Each t In assDef.MainModule.GetTypes
                If t.HasMethods Then
                    For Each methodDef As MethodDefinition In t.Methods
                        If methodDef.Name = name Then
                            Return methodDef
                        End If
                    Next
                End If
            Next
            Return Nothing
        End Function

        Public Shared Function FindMethod(typeDef As TypeDefinition, name As String) As MethodDefinition
            For Each methodDef As MethodDefinition In typeDef.Methods
                If methodDef.Name = name Then
                    Return methodDef
                End If
            Next
            Return Nothing
        End Function

        Public Shared Function FindField(parentType As TypeDefinition, name As String) As FieldDefinition
            Return parentType.Fields.First(Function(f) f.Name = name)
        End Function

        Public Shared Function FindDefaultNamespace(assDef As AssemblyDefinition) As String
            Dim NamespaceDefault = assDef.MainModule.EntryPoint.DeclaringType.Namespace
            If NamespaceDefault.EndsWith(".My") Then
                NamespaceDefault = NamespaceDefault.Split(".")(0)
            End If
            Return NamespaceDefault
        End Function

        Public Shared Function FindDefaultNamespace(assDef As AssemblyDefinition, Pack As Boolean) As String
            Return If(Pack = True, String.Empty, assDef.MainModule.EntryPoint.DeclaringType.Namespace)
        End Function

        Public Shared Function frameworkVersion(assDef As AssemblyDefinition) As String
            Return If(assDef.MainModule.Runtime.ToString.StartsWith("Net_4"), "v4.0", "v2.0")
        End Function

        Public Shared Function AccessorMethods(ByVal type As TypeDefinition) As List(Of MethodDefinition)
            Dim list As New List(Of MethodDefinition)
            For Each Pdef In type.Properties
                list.Add(Pdef.GetMethod)
                list.Add(Pdef.SetMethod)
                If Pdef.HasOtherMethods Then
                    For Each oDef In Pdef.OtherMethods
                        list.Add(oDef)
                    Next
                End If
            Next
            For Each eDef In type.Events
                list.Add(eDef.AddMethod)
                list.Add(eDef.RemoveMethod)
                list.Add(eDef.InvokeMethod)
                If eDef.HasOtherMethods Then
                    For Each oDef In eDef.OtherMethods
                        list.Add(oDef)
                    Next
                End If
            Next
            Return list
        End Function
#End Region
     
    End Class
End Namespace



================================================
File: Helper/Cecil/Injecter.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Helper.CecilHelper
Imports System.Runtime.InteropServices
Imports Helper.RandomizeHelper

Namespace CecilHelper
    ' Credits: yck1509 / Confuser
    Public NotInheritable Class Injecter

#Region " Methods "
        Public Shared Function CreateGenericCctor(ByVal assDef As AssemblyDefinition) As MethodDefinition
            Dim cctor__1 As New MethodDefinition(".cctor", Mono.Cecil.MethodAttributes.[Private] Or Mono.Cecil.MethodAttributes.HideBySig Or Mono.Cecil.MethodAttributes.SpecialName Or Mono.Cecil.MethodAttributes.RTSpecialName Or Mono.Cecil.MethodAttributes.[Static], assDef.MainModule.Import(GetType(System.Void)))
            Dim ilproc As ILProcessor
            cctor__1.Body = New Cil.MethodBody(cctor__1)
            ilproc = cctor__1.Body.GetILProcessor()
            ilproc.Emit(OpCodes.Ret)
            Return cctor__1
        End Function

        Public Shared Sub InjectAssemblyInfoCustomAttribute(member As AssemblyDefinition, AttributeType As Type, attributeValue$)
            Dim ca As New CustomAttribute(member.MainModule.Import(AttributeType.GetConstructor(New Type() {GetType(System.String)})))
            Dim carg = New CustomAttributeArgument(member.MainModule.Import(GetType(System.String)), attributeValue)
            ca.ConstructorArguments.Add(carg)
            member.CustomAttributes.Add(ca)
        End Sub

        Public Shared Function InjectTypeDefinition(ByVal mdef As ModuleDefinition, ByVal name As String, ByVal baseType As TypeReference) As TypeDefinition
            Dim str As String = String.Empty
            If name.Contains(".") Then
                Dim length As Integer = name.LastIndexOf(".")
                str = name.Substring(0, length)
                name = name.Substring((length + 1))
            End If
            Dim item As New TypeDefinition(str, name, (TypeAttributes.AnsiClass Or TypeAttributes.NotPublic), baseType)
            mdef.Types.Add(item)
            Return item
        End Function

        Private Shared Function ImportType(typeRef As TypeReference, mDef As ModuleDefinition, context As MethodReference, mems As Dictionary(Of MetadataToken, IMemberDefinition)) As TypeReference
            Dim ret As TypeReference = typeRef
            If TypeOf typeRef Is TypeSpecification Then
                If TypeOf typeRef Is ArrayType Then
                    Dim _spec As ArrayType = TryCast(typeRef, ArrayType)
                    ret = New ArrayType(ImportType(_spec.ElementType, mDef, context, mems))
                    TryCast(ret, ArrayType).Dimensions.Clear()
                    For Each i In _spec.Dimensions
                        TryCast(ret, ArrayType).Dimensions.Add(i)
                    Next
                ElseIf TypeOf typeRef Is GenericInstanceType Then
                    Dim _spec As GenericInstanceType = TryCast(typeRef, GenericInstanceType)
                    ret = New GenericInstanceType(ImportType(_spec.ElementType, mDef, context, mems))
                    For Each i In _spec.GenericArguments
                        TryCast(ret, GenericInstanceType).GenericArguments.Add(ImportType(i, mDef, context, mems))
                    Next
                ElseIf TypeOf typeRef Is OptionalModifierType Then
                    ret = New OptionalModifierType(ImportType(TryCast(typeRef, OptionalModifierType).ModifierType, mDef, context, mems), ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                ElseIf TypeOf typeRef Is RequiredModifierType Then
                    ret = New RequiredModifierType(ImportType(TryCast(typeRef, RequiredModifierType).ModifierType, mDef, context, mems), ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                ElseIf TypeOf typeRef Is ByReferenceType Then
                    ret = New ByReferenceType(ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                ElseIf TypeOf typeRef Is PointerType Then
                    ret = New PointerType(ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                ElseIf TypeOf typeRef Is PinnedType Then
                    ret = New PinnedType(ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                ElseIf TypeOf typeRef Is SentinelType Then
                    ret = New SentinelType(ImportType(TryCast(typeRef, TypeSpecification).ElementType, mDef, context, mems))
                Else
                    Throw New NotSupportedException()
                End If
            ElseIf TypeOf typeRef Is GenericParameter Then
                If context Is Nothing OrElse TypeOf TryCast(typeRef, GenericParameter).Owner Is TypeReference OrElse TryCast(typeRef, GenericParameter).Position >= context.GenericParameters.Count Then
                    Return typeRef
                End If
                Return context.GenericParameters(TryCast(typeRef, GenericParameter).Position)
            Else
                If mems IsNot Nothing AndAlso mems.ContainsKey(typeRef.MetadataToken) Then
                    ret = TryCast(mems(typeRef.MetadataToken), TypeReference)
                ElseIf Not (TypeOf ret Is TypeDefinition) Then
                    ret = mDef.Import(ret)
                End If
            End If
            Return ret
        End Function

        Private Shared Function ImportMethod(mtdRef As MethodReference, mDef As ModuleDefinition, context As MethodReference, mems As Dictionary(Of MetadataToken, IMemberDefinition)) As MethodReference
            Dim ret As MethodReference = mtdRef
            If TypeOf mtdRef Is GenericInstanceMethod Then
                Dim _spec As GenericInstanceMethod = TryCast(mtdRef, GenericInstanceMethod)
                ret = New GenericInstanceMethod(ImportMethod(_spec.ElementMethod, mDef, context, mems))
                For Each i In _spec.GenericArguments
                    TryCast(ret, GenericInstanceMethod).GenericArguments.Add(ImportType(i, mDef, context, mems))
                Next

                ret.ReturnType = ImportType(ret.ReturnType, mDef, ret, mems)
                For Each i In ret.Parameters
                    i.ParameterType = ImportType(i.ParameterType, mDef, ret, mems)
                Next
            Else
                If mems IsNot Nothing AndAlso mems.ContainsKey(mtdRef.MetadataToken) Then
                    ret = TryCast(mems(mtdRef.MetadataToken), MethodReference)
                Else
                    ret = mDef.Import(ret)
                    ret.ReturnType = ImportType(ret.ReturnType, mDef, ret, mems)
                    For Each i In ret.Parameters
                        i.ParameterType = ImportType(i.ParameterType, mDef, ret, mems)
                    Next
                End If
            End If
            If Not (TypeOf mtdRef Is MethodDefinition) AndAlso Not (TypeOf mtdRef Is MethodSpecification) Then
                ret.DeclaringType = ImportType(mtdRef.DeclaringType, mDef, context, mems)
            End If
            Return ret
        End Function

        Private Shared Function ImportField(fldRef As FieldReference, mDef As ModuleDefinition, mems As Dictionary(Of MetadataToken, IMemberDefinition)) As FieldReference
            If mems IsNot Nothing AndAlso mems.ContainsKey(fldRef.MetadataToken) Then
                Return TryCast(mems(fldRef.MetadataToken), FieldReference)
            Else
                Return mDef.Import(fldRef)
            End If
        End Function

        Private Shared Sub PopulateDatas(mDef As ModuleDefinition, type As TypeDefinition, mems As Dictionary(Of MetadataToken, IMemberDefinition))
            Dim newType As TypeDefinition = TryCast(mems(type.MetadataToken), TypeDefinition)

            If type.BaseType IsNot Nothing Then
                newType.BaseType = ImportType(type.BaseType, mDef, Nothing, mems)
            End If

            For Each ty As TypeDefinition In type.NestedTypes
                PopulateDatas(mDef, ty, mems)
            Next
            For Each fld As FieldDefinition In type.Fields
                If fld.IsLiteral Then
                    Continue For
                End If
                TryCast(mems(fld.MetadataToken), FieldDefinition).FieldType = ImportType(fld.FieldType, mDef, Nothing, mems)
            Next
            For Each mtd As MethodDefinition In type.Methods
                PopulateMethod(mDef, mtd, TryCast(mems(mtd.MetadataToken), MethodDefinition), mems)
            Next
        End Sub

        Public Shared Sub PopulateMethod(mDef As ModuleDefinition, mtd As MethodDefinition, newMtd As MethodDefinition, mems As Dictionary(Of MetadataToken, IMemberDefinition))
            newMtd.Attributes = mtd.Attributes
            newMtd.ImplAttributes = mtd.ImplAttributes
            If mtd.IsPInvokeImpl Then
                newMtd.PInvokeInfo = mtd.PInvokeInfo
                Dim has As Boolean = False
                For Each modRef As ModuleReference In mDef.ModuleReferences
                    If modRef.Name = newMtd.PInvokeInfo.[Module].Name Then
                        has = True
                        newMtd.PInvokeInfo.[Module] = modRef
                        Exit For
                    End If
                Next
                If Not has Then
                    mDef.ModuleReferences.Add(newMtd.PInvokeInfo.[Module])
                End If
            End If
            If mtd.HasCustomAttributes Then
                For Each attr As CustomAttribute In mtd.CustomAttributes
                    Dim nAttr As New CustomAttribute(ImportMethod(attr.Constructor, mDef, newMtd, mems), attr.GetBlob())
                    newMtd.CustomAttributes.Add(nAttr)
                Next
            End If

            For Each param As GenericParameter In mtd.GenericParameters
                Dim p = New GenericParameter(param.Name, newMtd)
                If param.HasCustomAttributes Then
                    For Each attr As CustomAttribute In param.CustomAttributes
                        Dim nAttr As New CustomAttribute(mDef.Import(attr.Constructor), attr.GetBlob())
                        p.CustomAttributes.Add(nAttr)
                    Next
                End If
                newMtd.GenericParameters.Add(p)
            Next

            newMtd.ReturnType = ImportType(mtd.ReturnType, mDef, newMtd, mems)

            For Each param As ParameterDefinition In mtd.Parameters
                Dim p = New ParameterDefinition(param.Name, param.Attributes, ImportType(param.ParameterType, mDef, newMtd, mems))
                If param.HasCustomAttributes Then
                    For Each attr As CustomAttribute In param.CustomAttributes
                        Dim nAttr As New CustomAttribute(ImportMethod(attr.Constructor, mDef, newMtd, mems), attr.GetBlob())
                        p.CustomAttributes.Add(nAttr)
                    Next
                End If
                newMtd.Parameters.Add(p)
            Next

            If mtd.HasBody Then
                Dim old As MethodBody = mtd.Body
                Dim bdy As New MethodBody(newMtd)
                bdy.MaxStackSize = old.MaxStackSize
                bdy.InitLocals = old.InitLocals

                Dim psr As ILProcessor = bdy.GetILProcessor()

                For Each var As VariableDefinition In old.Variables
                    bdy.Variables.Add(New VariableDefinition(var.Name, ImportType(var.VariableType, mDef, newMtd, mems)))
                Next

                For Each inst As Instruction In old.Instructions
                    Select Case inst.OpCode.OperandType
                        Case OperandType.InlineArg, OperandType.ShortInlineArg
                            If inst.Operand Is old.ThisParameter Then
                                psr.Emit(inst.OpCode, bdy.ThisParameter)
                            Else
                                Dim param As Integer = mtd.Parameters.IndexOf(TryCast(inst.Operand, ParameterDefinition))
                                psr.Emit(inst.OpCode, newMtd.Parameters(param))
                            End If
                            Exit Select
                        Case OperandType.InlineVar, OperandType.ShortInlineVar
                            Dim var As Integer = old.Variables.IndexOf(TryCast(inst.Operand, VariableDefinition))
                            psr.Emit(inst.OpCode, bdy.Variables(var))
                            Exit Select
                        Case OperandType.InlineField
                            psr.Emit(inst.OpCode, ImportField(TryCast(inst.Operand, FieldReference), mDef, mems))
                            Exit Select
                        Case OperandType.InlineMethod
                            psr.Emit(inst.OpCode, ImportMethod(TryCast(inst.Operand, MethodReference), mDef, newMtd, mems))
                            Exit Select
                        Case OperandType.InlineType
                            psr.Emit(inst.OpCode, ImportType(TryCast(inst.Operand, TypeReference), mDef, newMtd, mems))
                            Exit Select
                        Case OperandType.InlineTok
                            If TypeOf inst.Operand Is FieldReference Then
                                psr.Emit(inst.OpCode, ImportField(TryCast(inst.Operand, FieldReference), mDef, mems))
                            ElseIf TypeOf inst.Operand Is MethodReference Then
                                psr.Emit(inst.OpCode, ImportMethod(TryCast(inst.Operand, MethodReference), mDef, newMtd, mems))
                            ElseIf TypeOf inst.Operand Is TypeReference Then
                                psr.Emit(inst.OpCode, ImportType(TryCast(inst.Operand, TypeReference), mDef, newMtd, mems))
                            End If
                            Exit Select
                        Case Else
                            psr.Append(inst)
                            Exit Select
                    End Select
                Next

                For i As Integer = 0 To bdy.Instructions.Count - 1
                    Dim inst As Instruction = bdy.Instructions(i)
                    Dim o As Instruction = old.Instructions(i)

                    If inst.OpCode.OperandType = OperandType.InlineSwitch Then
                        Dim olds As Instruction() = DirectCast(o.Operand, Instruction())
                        Dim news As Instruction() = New Instruction(olds.Length - 1) {}

                        For ii As Integer = 0 To news.Length - 1
                            news(ii) = bdy.Instructions(old.Instructions.IndexOf(olds(ii)))
                        Next

                        inst.Operand = news
                    ElseIf inst.OpCode.OperandType = OperandType.ShortInlineBrTarget OrElse inst.OpCode.OperandType = OperandType.InlineBrTarget Then
                        inst.Operand = bdy.Instructions(old.Instructions.IndexOf(TryCast(inst.Operand, Instruction)))
                    End If
                Next

                For Each eh As ExceptionHandler In old.ExceptionHandlers
                    Dim neh As New ExceptionHandler(eh.HandlerType)
                    If old.Instructions.IndexOf(eh.TryStart) <> -1 Then
                        neh.TryStart = bdy.Instructions(old.Instructions.IndexOf(eh.TryStart))
                    End If
                    If old.Instructions.IndexOf(eh.TryEnd) <> -1 Then
                        neh.TryEnd = bdy.Instructions(old.Instructions.IndexOf(eh.TryEnd))
                    End If
                    If old.Instructions.IndexOf(eh.HandlerStart) <> -1 Then
                        neh.HandlerStart = bdy.Instructions(old.Instructions.IndexOf(eh.HandlerStart))
                    End If
                    If old.Instructions.IndexOf(eh.HandlerEnd) <> -1 Then
                        neh.HandlerEnd = bdy.Instructions(old.Instructions.IndexOf(eh.HandlerEnd))
                    End If

                    Select Case eh.HandlerType
                        Case ExceptionHandlerType.Catch
                            neh.CatchType = ImportType(eh.CatchType, mDef, newMtd, mems)
                            Exit Select
                        Case ExceptionHandlerType.Filter
                            neh.FilterStart = bdy.Instructions(old.Instructions.IndexOf(eh.FilterStart))
                            'neh.FilterEnd = bdy.Instructions[old.Instructions.IndexOf(eh.FilterEnd)];
                            Exit Select
                    End Select

                    bdy.ExceptionHandlers.Add(neh)
                Next

                newMtd.Body = bdy
            End If
        End Sub

        Public Shared Function Inject(targetModule As ModuleDefinition, mtd As MethodDefinition) As MethodDefinition

            If mtd Is Nothing Then
                Return Nothing
            End If

            Dim ret As New MethodDefinition(mtd.Name, mtd.Attributes, targetModule.TypeSystem.Void)
            ret.Attributes = mtd.Attributes
            ret.ImplAttributes = mtd.ImplAttributes

            If mtd.IsPInvokeImpl Then
                ret.PInvokeInfo = mtd.PInvokeInfo
                Dim has As Boolean = False
                For Each modRef As ModuleReference In targetModule.ModuleReferences
                    If modRef.Name = ret.PInvokeInfo.Module.Name Then
                        has = True
                        ret.PInvokeInfo.[Module] = modRef
                        Exit For
                    End If
                Next
                If Not has Then
                    targetModule.ModuleReferences.Add(ret.PInvokeInfo.[Module])
                End If
            End If
            If mtd.HasCustomAttributes Then
                For Each attr As CustomAttribute In mtd.CustomAttributes
                    Dim nAttr As New CustomAttribute(ImportMethod(attr.Constructor, targetModule, ret, Nothing), attr.GetBlob())
                    ret.CustomAttributes.Add(nAttr)
                Next
            End If

            For Each param As GenericParameter In mtd.GenericParameters
                Dim p = New GenericParameter(param.Name, ret)
                If param.HasCustomAttributes Then
                    For Each attr As CustomAttribute In param.CustomAttributes
                        Dim nAttr As New CustomAttribute(ImportMethod(attr.Constructor, targetModule, ret, Nothing), attr.GetBlob())
                        p.CustomAttributes.Add(nAttr)
                    Next
                End If
                ret.GenericParameters.Add(p)
            Next

            ret.ReturnType = ImportType(mtd.ReturnType, targetModule, ret, Nothing)

            For Each param As ParameterDefinition In mtd.Parameters
                Dim p = New ParameterDefinition(param.Name, param.Attributes, ImportType(param.ParameterType, targetModule, ret, Nothing))
                If param.HasCustomAttributes Then
                    For Each attr As CustomAttribute In param.CustomAttributes
                        Dim nAttr As New CustomAttribute(ImportMethod(attr.Constructor, targetModule, ret, Nothing), attr.GetBlob())
                        p.CustomAttributes.Add(nAttr)
                    Next
                End If
                ret.Parameters.Add(p)
            Next

            If mtd.HasBody Then
                Dim old As MethodBody = mtd.Body
                Dim bdy As New MethodBody(ret)
                bdy.MaxStackSize = old.MaxStackSize
                bdy.InitLocals = old.InitLocals

                Dim psr As ILProcessor = bdy.GetILProcessor()

                For Each var As VariableDefinition In old.Variables
                    bdy.Variables.Add(New VariableDefinition(var.Name, ImportType(var.VariableType, targetModule, ret, Nothing)))
                Next

                For Each inst As Instruction In old.Instructions
                    Select Case inst.OpCode.OperandType
                        Case OperandType.InlineArg, OperandType.ShortInlineArg
                            If inst.Operand Is old.ThisParameter Then
                                psr.Emit(inst.OpCode, bdy.ThisParameter)
                            Else
                                Dim param As Integer = mtd.Parameters.IndexOf(TryCast(inst.Operand, ParameterDefinition))
                                psr.Emit(inst.OpCode, ret.Parameters(param))
                            End If
                            Exit Select
                        Case OperandType.InlineVar, OperandType.ShortInlineVar
                            Dim var As Integer = old.Variables.IndexOf(TryCast(inst.Operand, VariableDefinition))
                            psr.Emit(inst.OpCode, bdy.Variables(var))
                            Exit Select
                        Case OperandType.InlineField
                            psr.Emit(inst.OpCode, ImportField(TryCast(inst.Operand, FieldReference), targetModule, Nothing))
                            Exit Select
                        Case OperandType.InlineMethod
                            If inst.Operand Is mtd Then
                                psr.Emit(inst.OpCode, ret)
                            Else
                                psr.Emit(inst.OpCode, ImportMethod(TryCast(inst.Operand, MethodReference), targetModule, ret, Nothing))
                            End If
                            Exit Select
                        Case OperandType.InlineType
                            psr.Emit(inst.OpCode, ImportType(TryCast(inst.Operand, TypeReference), targetModule, ret, Nothing))
                            Exit Select
                        Case OperandType.InlineTok
                            If TypeOf inst.Operand Is TypeReference Then
                                psr.Emit(inst.OpCode, ImportType(TryCast(inst.Operand, TypeReference), targetModule, ret, Nothing))
                            ElseIf TypeOf inst.Operand Is FieldReference Then
                                psr.Emit(inst.OpCode, ImportField(TryCast(inst.Operand, FieldReference), targetModule, Nothing))
                            ElseIf TypeOf inst.Operand Is MethodReference Then
                                psr.Emit(inst.OpCode, ImportMethod(TryCast(inst.Operand, MethodReference), targetModule, ret, Nothing))
                            End If
                            Exit Select
                        Case Else
                            psr.Append(inst)
                            Exit Select
                    End Select
                Next

                For i As Integer = 0 To bdy.Instructions.Count - 1
                    Dim inst As Instruction = bdy.Instructions(i)
                    Dim o As Instruction = old.Instructions(i)

                    If inst.OpCode.OperandType = OperandType.InlineSwitch Then
                        Dim olds As Instruction() = DirectCast(o.Operand, Instruction())
                        Dim news As Instruction() = New Instruction(olds.Length - 1) {}

                        For ii As Integer = 0 To news.Length - 1
                            news(ii) = bdy.Instructions(old.Instructions.IndexOf(olds(ii)))
                        Next

                        inst.Operand = news
                    ElseIf inst.OpCode.OperandType = OperandType.ShortInlineBrTarget OrElse inst.OpCode.OperandType = OperandType.InlineBrTarget Then
                        inst.Operand = bdy.Instructions(old.Instructions.IndexOf(TryCast(inst.Operand, Instruction)))
                    End If
                Next

                For Each eh As ExceptionHandler In old.ExceptionHandlers
                    Dim neh As New ExceptionHandler(eh.HandlerType)
                    If old.Instructions.IndexOf(eh.TryStart) <> -1 Then
                        neh.TryStart = bdy.Instructions(old.Instructions.IndexOf(eh.TryStart))
                    End If
                    If old.Instructions.IndexOf(eh.TryEnd) <> -1 Then
                        neh.TryEnd = bdy.Instructions(old.Instructions.IndexOf(eh.TryEnd))
                    End If
                    If old.Instructions.IndexOf(eh.HandlerStart) <> -1 Then
                        neh.HandlerStart = bdy.Instructions(old.Instructions.IndexOf(eh.HandlerStart))
                    End If
                    If old.Instructions.IndexOf(eh.HandlerEnd) <> -1 Then
                        neh.HandlerEnd = bdy.Instructions(old.Instructions.IndexOf(eh.HandlerEnd))
                    End If

                    Select Case eh.HandlerType
                        Case ExceptionHandlerType.[Catch]
                            neh.CatchType = ImportType(eh.CatchType, targetModule, ret, Nothing)
                            Exit Select
                        Case ExceptionHandlerType.Filter
                            neh.FilterStart = bdy.Instructions(old.Instructions.IndexOf(eh.FilterStart))
                            Exit Select
                    End Select

                    bdy.ExceptionHandlers.Add(neh)
                Next

                ret.Body = bdy
            End If

            Return ret
        End Function

        Public Shared Function Inject(ByVal m As ModuleDefinition, ByVal type As TypeDefinition) As TypeDefinition
            Dim mems As New Dictionary(Of MetadataToken, IMemberDefinition)
            Dim definition As TypeDefinition = m_Inject(m, type, mems)
            PopulateDatas(m, type, mems)
            Return definition
        End Function

        Private Shared Function m_Inject(mDef As ModuleDefinition, ByVal type As TypeDefinition, ByVal mems As Dictionary(Of MetadataToken, IMemberDefinition)) As TypeDefinition
            Dim definition As New TypeDefinition(type.Namespace, type.Name, type.Attributes) With { _
                .Scope = mDef, _
                .ClassSize = type.ClassSize, _
                .PackingSize = type.PackingSize _
            }
            If (Not type.BaseType Is Nothing) Then
                definition.BaseType = mDef.Import(type.BaseType)
            End If
            mems.Add(type.MetadataToken, definition)
            For Each definition2 In type.NestedTypes
                Dim item As TypeDefinition = m_Inject(mDef, definition2, mems)
                definition.NestedTypes.Add(item)
            Next
            For Each definition4 In type.Fields
                If Not definition4.IsLiteral Then
                    Dim definition5 As New FieldDefinition(definition4.Name, definition4.Attributes, mDef.TypeSystem.Void)
                    mems.Add(definition4.MetadataToken, definition5)
                    definition.Fields.Add(definition5)
                End If
            Next
            For Each definition6 In type.Methods
                Dim definition7 As New MethodDefinition(definition6.Name, definition6.Attributes, definition6.ReturnType)
                mems.Add(definition6.MetadataToken, definition7)
                definition.Methods.Add(definition7)
            Next
            Return definition
        End Function

        Public Shared Function InjectResource(ByVal mdef As ModuleDefinition, ByVal name As String, ByVal resourceType As ResourceType, ByVal data As Byte()) As Resource
            Dim item As Resource = Nothing
            Select Case resourceType
                Case resourceType.Embedded
                    item = New EmbeddedResource(name, ManifestResourceAttributes.Private, data)
                    Exit Select
                Case resourceType.Linked
                    item = New LinkedResource(name, ManifestResourceAttributes.Public)
                    Exit Select
                Case resourceType.AssemblyLinked
                    Dim reference As New AssemblyNameReference(name, New Version)
                    mdef.AssemblyReferences.Add(reference)
                    item = New AssemblyLinkedResource(name, ManifestResourceAttributes.Public, reference)
                    Exit Select
                Case Else
                    Throw New ArgumentException
            End Select
            mdef.Resources.Add(item)
            Return item
        End Function
#End Region  

    End Class
End Namespace


================================================
File: Helper/Cecil/Msil.vb
================================================
ï»¿Imports Mono.Cecil.Cil

Namespace CecilHelper
    Public Class Msil
        Implements IDisposable

#Region " Properties "
        Property MethodBody As MethodBody
        Property ProcessedInstructions As List(Of ProcessedIL)
#End Region
       
#Region " Constructor "
        Public Sub New(ByVal methodBody As MethodBody)
            _MethodBody = methodBody
            CollectInstructions()
        End Sub
#End Region
      
#Region " Methods "
        Public Sub Append(ByVal newInstruction As Instruction)
            _MethodBody.Instructions.Add(newInstruction)
            ProcessedInstructions.Add(New ProcessedIL(newInstruction))
        End Sub

        Public Sub StackOverFlow(r As Random)
            If (_MethodBody.Instructions.Item(0).OpCode.Code <> Code.Br_S OrElse _MethodBody.Instructions.Item(0).OpCode.Code <> Code.Ldarg) Then
                Dim body = _MethodBody
                Dim iLProcessor = body.GetILProcessor
                Dim target = body.Instructions.Item(0)
                Dim instruct = iLProcessor.Create(OpCodes.Br_S, target)
                Dim instruction2 = iLProcessor.Create(OpCodes.Pop)
                Dim instruction3 = iLProcessor.Create(OpCodes.Ldc_I8, CLng(r.Next))
                InsertBefore(target, instruction3)
                InsertBefore(instruction3, instruction2)
                InsertBefore(instruction2, instruct)
            End If
        End Sub

        Public Sub StackUnflow(r As Random)
            Dim iLProcessor0 = _MethodBody.GetILProcessor
            _MethodBody.Instructions.Add(iLProcessor0.Create(GetRndCrap(r)))
            _MethodBody.Instructions.Add(iLProcessor0.Create(OpCodes.Ret))
        End Sub

        Private Function GetRndCrap(r As Random) As OpCode
            Dim code As OpCode
            Select Case r.Next(1, 5)
                Case 1
                    Return OpCodes.Add
                Case 2
                    Return OpCodes.Div
                Case 3
                    Return OpCodes.Xor
                Case 4
                    Return OpCodes.Mul
            End Select
            Return code
        End Function

        Public Sub CalculateOffsets()
            Dim num As Integer = 0
            Dim i As Integer
            For i = 0 To Me.ProcessedInstructions.Count - 1
                Me.ProcessedInstructions.Item(i).Instruction.Offset = num
                num = (num + Me.ProcessedInstructions.Item(i).Instruction.GetSize)
            Next i
        End Sub

        Private Sub CollectInstructions()
            ProcessedInstructions = New List(Of ProcessedIL)
            Dim i%
            For i = 0 To Me._MethodBody.Instructions.Count - 1
                _MethodBody.Instructions.Item(i).OpCode = Me.SimplifyOpCode(Me._MethodBody.Instructions.Item(i).OpCode)
                ProcessedInstructions.Add(New ProcessedIL(Me.MethodBody.Instructions.Item(i)))
            Next i
        End Sub

        Public Function containsTryCatch() As Boolean
            Return _MethodBody.ExceptionHandlers.Count <> 0
        End Function

        Public Function IsSettingStr(str$) As Boolean
            If _MethodBody.Method.IsGetter Then
                Return _MethodBody.Method.Name.ToLower = "get_" & str.ToLower
            ElseIf _MethodBody.Method.IsSetter Then
                Return _MethodBody.Method.Name.ToLower = "set_" & str.ToLower
            End If
            Return False
        End Function

        Public Sub FixBranchOffsets()
            For Each instruct In ProcessedInstructions
                If (instruct.OriginalOffset <> -1) Then
                    If ((Not instruct.Instruction.Operand Is Nothing) AndAlso TypeOf instruct.Instruction.Operand Is Instruction) Then
                        Dim operand = TryCast(instruct.Instruction.Operand, Instruction)
                        For Each instruction3 In ProcessedInstructions
                            If (operand.Offset = instruction3.OriginalOffset) Then
                                instruct.Instruction.OpCode = SimplifyOpCode(instruct.Instruction.OpCode)
                                instruct.Instruction.Operand = instruction3.Instruction
                            End If
                        Next
                    End If
                    If (instruct.Instruction.OpCode.OperandType = OperandType.InlineSwitch) Then
                        Dim instructionArray As Instruction() = TryCast(instruct.Instruction.Operand, Instruction())
                        Dim i%
                        For i = 0 To instructionArray.Length - 1
                            For Each instruction4 In ProcessedInstructions
                                If (instructionArray(i).Offset = instruction4.OriginalOffset) Then
                                    instructionArray(i) = instruction4.Instruction
                                End If
                            Next
                        Next i
                        instruct.Instruction.Operand = instructionArray
                    End If
                End If
            Next
        End Sub

        Private Function GetIndex(ByVal instruction As Instruction) As Integer
            Dim i%
            For i = 0 To ProcessedInstructions.Count - 1
                If (ProcessedInstructions.Item(i).Instruction Is instruction) Then
                    Return i
                End If
            Next i
            Return -1
        End Function

        Private Function GetOpCodeByName(ByVal name As String) As OpCode?
            Dim info As Reflection.FieldInfo
            For Each info In GetType(OpCodes).GetFields
                If (info.Name.ToLower = name) Then
                    Return New OpCode?(DirectCast(info.GetValue(Nothing), OpCode))
                End If
            Next
            Return Nothing
        End Function

        Public Sub InsertAfter(ByVal targetInstruction As Instruction, ByVal newInstruction As Instruction)
            Dim index% = (GetIndex(targetInstruction) + 1)
            _MethodBody.Instructions.Insert(index, newInstruction)
            UpdateExceptionHandlers(newInstruction, (targetInstruction.Offset + targetInstruction.GetSize))
            ProcessedInstructions.Insert(index, New ProcessedIL(newInstruction, True))
        End Sub

        Public Sub InsertBefore(ByVal targetInstruction As Instruction, ByVal newInstruction As Instruction)
            Dim index% = GetIndex(targetInstruction)
            Me._MethodBody.Instructions.Insert(index, newInstruction)
            Me.UpdateExceptionHandlers(newInstruction, targetInstruction.Offset)
            Me.ProcessedInstructions.Insert(index, New ProcessedIL(newInstruction, True))
        End Sub

        Private Function OptimizeOpCode(ByVal opcode As OpCode) As OpCode
            If (opcode.OperandType = OperandType.InlineBrTarget) Then
                Dim name As String = (opcode.Name.ToLower & "_s")
                Dim opCodeByName As OpCode? = Me.GetOpCodeByName(name)
                If opCodeByName.HasValue Then
                    Return opCodeByName.Value
                End If
            End If
            Return opcode
        End Function

        Public Sub Replace(ByVal targetInstruction As Instruction, ByVal newInstruction As Instruction)
            Dim index% = GetIndex(targetInstruction)
            UpdateExceptionHandlers(newInstruction, targetInstruction.Offset)
            ProcessedInstructions.RemoveAt(index)
            ProcessedInstructions.Insert(index, New ProcessedIL(newInstruction, targetInstruction.Offset))
            _MethodBody.Instructions.RemoveAt(index)
            _MethodBody.Instructions.Insert(index, newInstruction)
        End Sub

        Private Function SimplifyOpCode(ByVal opcode As OpCode) As OpCode
            If (opcode.OperandType = OperandType.ShortInlineBrTarget) Then
                Dim name = opcode.Name.Remove((opcode.Name.Length - 2)).ToLower
                Dim opCodeByName As OpCode? = Me.GetOpCodeByName(name)
                If opCodeByName.HasValue Then
                    Return opCodeByName.Value
                End If
            End If
            Return opcode
        End Function

        Private Sub UpdateExceptionHandlers(ByVal instruction As Instruction, ByVal offset As Integer)
            Dim handler As ExceptionHandler
            For Each handler In _MethodBody.ExceptionHandlers
                If (handler.TryStart.Offset = offset) Then
                    handler.TryStart = instruction
                End If
                If (handler.TryEnd.Offset = offset) Then
                    handler.TryEnd = instruction
                End If
                If (handler.HandlerStart.Offset = offset) Then
                    handler.HandlerStart = instruction
                End If
                If (handler.HandlerEnd.Offset = offset) Then
                    handler.HandlerEnd = instruction
                End If
                If ((Not handler.FilterStart Is Nothing) AndAlso (handler.FilterStart.Offset = offset)) Then
                    handler.FilterStart = instruction
                End If
            Next
        End Sub
#End Region
       
#Region "IDisposable Support"
        Private disposedValue As Boolean ' Pour dÃ©tecter les appels redondants

        ' IDisposable
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    ' TODO: supprimez l'Ã©tat managÃ© (objets managÃ©s).
                End If
                If ProcessedInstructions.Count <> 0 Then ProcessedInstructions.Clear()
                _MethodBody = Nothing
                ' TODO: libÃ©rez les ressources non managÃ©es (objets non managÃ©s) et substituez la mÃ©thode Finalize() ci-dessous.
                ' TODO: dÃ©finissez les champs volumineux Ã  null.
            End If
            Me.disposedValue = True
        End Sub

        ' Ce code a Ã©tÃ© ajoutÃ© par Visual Basic pour permettre l'implÃ©mentation correcte du modÃ¨le pouvant Ãªtre supprimÃ©.
        Public Sub Dispose() Implements IDisposable.Dispose
            ' Ne modifiez pas ce code. Ajoutez du code de nettoyage dans Dispose(disposing As Boolean) ci-dessus.
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class

End Namespace





================================================
File: Helper/Cecil/NameChecker.vb
================================================
ï»¿Imports Mono.Cecil

Namespace CecilHelper
    Public NotInheritable Class NameChecker

#Region " Methods "
        ''' <summary>
        ''' INFO : Verifying if typeDefinition is renamable
        ''' </summary>
        ''' <param name="type"></param>
        Public Shared Function IsRenamable(type As TypeDefinition) As Boolean
            If Not type.BaseType Is Nothing Then
                If type.BaseType.IsArray Then
                    Return False
                End If
            End If
            Return Not type.FullName = "<Module>" AndAlso Not type.IsImport
        End Function

        ''' <summary>
        ''' INFO : Verifying if methodDefinition is renamable
        ''' </summary>
        ''' <param name="method"></param>
        Public Shared Function IsRenamable(method As MethodDefinition, Optional ByVal Force As Boolean = False) As Boolean
            If Force Then
                If method.HasBody Then
                    If Finder.AccessorMethods(method.DeclaringType).Contains(method) Then
                        Return Not Finder.FindGenericParameter(method) AndAlso Not Finder.FindCustomAttributeByName(method, "DebuggerHiddenAttribute")
                    End If
                End If
            End If
            Return method IsNot Nothing AndAlso Not (method.IsRuntimeSpecialName OrElse method.IsRuntime OrElse method.IsSpecialName OrElse method.IsConstructor OrElse method.HasOverrides OrElse method.IsVirtual OrElse method.IsAbstract OrElse method.Name.EndsWith("GetEnumerator"))
        End Function

        ''' <summary>
        ''' INFO : Verifying if eventDefinition is renamable
        ''' </summary>
        ''' <param name="Events"></param>
        Public Shared Function IsRenamable(ByVal Events As EventDefinition) As Boolean
            Return If(Not Events.IsSpecialName OrElse Not Events.IsRuntimeSpecialName OrElse Not Events.IsDefinition, True, False)
        End Function

        ''' <summary>
        ''' INFO : Verifying if propertyDefinition is renamable
        ''' </summary>
        ''' <param name="prop"></param>
        Public Shared Function IsRenamable(prop As PropertyDefinition) As Boolean
            Return Not prop.IsRuntimeSpecialName OrElse Not prop.IsSpecialName
        End Function

        ''' <summary>
        ''' INFO : Verifying if fieldDefinition is renamable
        ''' </summary>
        ''' <param name="field"></param>
        Public Shared Function IsRenamable(field As FieldDefinition) As Boolean
            If (Not field.IsRuntimeSpecialName AndAlso Not field.DeclaringType.HasGenericParameters) And Not field.IsPInvokeImpl AndAlso Not field.IsSpecialName Then
                Return True
            End If
            Return False
        End Function
#End Region

    End Class
End Namespace




================================================
File: Helper/Cecil/ProcessedIL.vb
================================================
ï»¿Imports Mono.Cecil.Cil

Namespace CecilHelper
    Public NotInheritable Class ProcessedIL

#Region " Fields "
        Public Instruction As Instruction
        Public OriginalOffset As Integer
#End Region

#Region " Constructors "
        Public Sub New(ByVal instruct As Instruction)
            Me.New(instruct, instruct.Offset)
        End Sub

        Public Sub New(instruct As Instruction, isNewInstruction As Boolean)
            Me.New(instruct, If(isNewInstruction, -1, instruct.Offset))
        End Sub

        Public Sub New(instruct As Instruction, originalOffset%)
            Instruction = instruct
            originalOffset = originalOffset
        End Sub
#End Region

    End Class

End Namespace



================================================
File: Helper/Cecil/Utils.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports Helper.AssemblyHelper

Namespace CecilHelper
    Public NotInheritable Class Utils

#Region " Methods "
     
        Public Shared Function HasUnsafeInstructions(member As MethodDefinition) As Boolean
            If member.HasBody Then
                If member.Body.HasVariables Then
                    Return member.Body.Variables.Any(Function(x) x.VariableType.IsPointer)
                End If
            End If
            Return False
        End Function

        Public Shared Function RemoveCustomAttributeByName(member As AssemblyDefinition, CaName$) As Boolean
            If member.HasCustomAttributes Then
                Dim caList = Enumerable.Where(Of CustomAttribute)(member.CustomAttributes, Function(ca) ca.AttributeType.Name = CaName)
                Dim caCount = caList.Count
                If caCount <> 0 Then
                    Dim Finded = caList.First
                    If Not Finded Is Nothing Then
                        Return member.CustomAttributes.Remove(Finded)
                    End If
                End If
            End If
            Return False
        End Function

        Public Shared Function isStronglyTypedResourceBuilder(td As TypeDefinition) As Boolean
            If td.HasCustomAttributes Then
                For Each ca In (From c In td.CustomAttributes
                    Where c IsNot Nothing AndAlso c.AttributeType.Name = "GeneratedCodeAttribute" AndAlso c.HasConstructorArguments AndAlso c.ConstructorArguments(0).Value = "System.Resources.Tools.StronglyTypedResourceBuilder"
                    Select c)
                    Return True
                Next
            End If
            Return False
        End Function

        Public Shared Function IsDebuggerNonUserCode(assDef As AssemblyDefinition) As Boolean
            Return assDef.MainModule.EntryPoint.DeclaringType.Namespace.EndsWith(".My")
        End Function

        Public Shared Function MakeGeneric(method As MethodReference, genericarg As TypeReference) As MethodReference
            Dim genericTypeRef = New GenericInstanceMethod(method)
            genericTypeRef.GenericArguments.Add(genericarg)
            Return genericTypeRef
        End Function

#End Region

    End Class
End Namespace


================================================
File: Helper/CodeDom/Compiler.vb
================================================
ï»¿Imports Helper.RandomizeHelper
Imports System.CodeDom.Compiler
Imports System.IO
Imports Helper.UtilsHelper

Namespace CodeDomHelper
    Public Class Compiler

#Region " Methods "
        Public Shared Function CreateStubFromString(MainClass$, FrmwkVersion$, str$, Optional ByVal ReferencencedAssemblies As Dictionary(Of String, Byte()) = Nothing) As String
            Try
                Dim nam = Randomizer.GenerateNewAlphabetic()
                Dim Version = New Collections.Generic.Dictionary(Of String, String) : Version.Add("CompilerVersion", FrmwkVersion)
                Dim cProv As New VBCodeProvider(Version)
                Dim cParams As New CompilerParameters()
                With cParams
                    With cParams.ReferencedAssemblies
                        .Add("System.Windows.Forms.dll")
                        .Add("mscorlib.dll")
                        .Add("System.dll")
                        If str.Contains("Imports System.Linq") Then
                            .Add("System.Core.dll")
                        End If
                        If Not ReferencencedAssemblies Is Nothing Then
                            For Each it In ReferencencedAssemblies
                                File.WriteAllBytes(it.Key, it.Value)
                                .Add(it.Key)
                            Next
                        End If
                    End With
                    .CompilerOptions = "/target:library /platform:anycpu /optimize+ /debug-"
                    .GenerateExecutable = False
                    .OutputAssembly = My.Computer.FileSystem.SpecialDirectories.Temp & "\" & nam
                    .GenerateInMemory = True
                    .IncludeDebugInformation = False
                    .MainClass = MainClass
                End With
                Dim cResults As CompilerResults = cProv.CompileAssemblyFromSource(cParams, str)
                If cResults.Errors.Count <> 0 Then
                    For Each er In cResults.Errors
                        MsgBox("Error on line : " & er.Line.ToString & vbNewLine & _
                              "Error description : " & er.ErrorText & vbNewLine & _
                              "File : " & vbNewLine & str)
                    Next
                Else
                    Return My.Computer.FileSystem.SpecialDirectories.Temp & "\" & nam
                End If
            Catch ex As Exception
                MsgBox("Error (CreateStubFromString) : " & ex.ToString)
            End Try

            Return Nothing
        End Function

        Public Shared Function CreateTypeFromString(MainClass$, FrmwkVersion$, str$) As Type
            Try
                Dim Version = New Collections.Generic.Dictionary(Of String, String) : Version.Add("CompilerVersion", FrmwkVersion)
                Dim cProv As New VBCodeProvider(Version)
                Dim cParams As New CompilerParameters()
                With cParams
                    With .ReferencedAssemblies
                        .Add("mscorlib.dll")
                        .Add("System.dll")
                        .Add("System.Windows.Forms.dll")
                    End With
                    .CompilerOptions = "/target:library /platform:anycpu /optimize+ /debug-"
                    .GenerateExecutable = False
                    .GenerateInMemory = True
                    .IncludeDebugInformation = False
                End With

                Dim cResults As CompilerResults = cProv.CompileAssemblyFromSource(cParams, Str)
                If cResults.Errors.Count <> 0 Then
                    For Each er In cResults.Errors
                        MsgBox("Error on line : " & er.Line.ToString & vbNewLine & _
                               "Error description : " & er.ErrorText & vbNewLine & _
                               "File : " & vbNewLine & str)
                    Next
                Else
                    Return cResults.CompiledAssembly.CreateInstance(MainClass).GetType()
                End If
            Catch ex As Exception
                MsgBox("Error (CreateTypeFromString) : " & ex.ToString)
            End Try

            Return Nothing
        End Function
#End Region
      
    End Class
End Namespace


================================================
File: Helper/Crypto/Crypt.vb
================================================
ï»¿Imports System.Security.Cryptography
Imports System.Text
Imports Helper.RandomizeHelper

Namespace CryptoHelper
    Public Class Crypt

#Region "Fields "
        Private _SaltSize%
        Private _key As Byte()
#End Region

#Region "Properties "
        Public ReadOnly Property SaltSize() As Integer
            Get
                Return _SaltSize
            End Get
        End Property

        Public ReadOnly Property key() As Byte()
            Get
                Return _key
            End Get
        End Property
#End Region
      
#Region " Constructor "
        Public Sub New()
            _SaltSize = New Random().Next(1, 8)
            _key = Encoding.ASCII.GetBytes(Randomizer.GenerateNew)
        End Sub
#End Region
      
#Region " Methods "
        Public Function Encrypt(ByVal input As Byte()) As Byte()
            Dim RND As New RNGCryptoServiceProvider()
            Dim Output As Byte() = New Byte(input.Length - 1) {}
            Dim Salt As Byte() = New Byte(SaltSize - 1) {}
            RND.GetBytes(Salt)
            For i As Integer = 0 To input.Length - 1
                Output(i) = CByte(input(i) Xor key(i Mod key.Length) Xor Salt(i Mod Salt.Length))
            Next
            Array.Resize(Of Byte)(Output, Output.Length + SaltSize)
            Buffer.BlockCopy(Salt, 0, Output, Output.Length - SaltSize, SaltSize)
            Return Output
        End Function
#End Region
     
        'Public Function AESEncrypt(ByVal input As Byte()) As Byte()
        '    Dim AES As New RijndaelManaged()
        '    Dim hash As Byte() = New Byte(&H20 - 1) {}
        '    Dim temp As Byte() = New MD5CryptoServiceProvider().ComputeHash(key)
        '    Array.Copy(temp, 0, hash, 0, 16)
        '    Array.Copy(temp, 0, hash, 15, 16)
        '    AES.Key = hash
        '    AES.Mode = CipherMode.ECB
        '    Dim DESEncrypter As ICryptoTransform = AES.CreateEncryptor()
        '    Return DESEncrypter.TransformFinalBlock(input, 0, input.Length)
        'End Function

        'Public Function AESDecrypt(ByVal input As Byte()) As Byte()
        '    Dim managed As New RijndaelManaged
        '    Dim destinationArray As Byte() = New Byte(&H20 - 1) {}
        '    Dim sourceArray As Byte() = New MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(Pass))
        '    Array.Copy(sourceArray, 0, destinationArray, 0, &H10)
        '    Array.Copy(sourceArray, 0, destinationArray, 15, &H10)
        '    managed.Key = destinationArray
        '    managed.Mode = CipherMode.ECB
        '    Return managed.CreateDecryptor.TransformFinalBlock(input, 0, input.Length)
        'End Function

        'Public Function Decrypt(ByVal input As Byte()) As Byte()
        '    Dim Output As Byte() = New Byte(input.Length - SaltSize - 1) {}
        '    Dim Salt As Byte() = New Byte(SaltSize - 1) {}
        '    Buffer.BlockCopy(input, input.Length - SaltSize, Salt, 0, SaltSize)
        '    Array.Resize(Of Byte)(input, input.Length - SaltSize)
        '    For i As Integer = 0 To input.Length - 1
        '        Output(i) = CByte(input(i) Xor key(i Mod key.Length) Xor Salt(i Mod Salt.Length))
        '    Next
        '    Return Output
        'End Function

    End Class
End Namespace



================================================
File: Helper/Crypto/Generator.vb
================================================
ï»¿Imports Helper.RandomizeHelper
Imports Helper.AssemblyHelper

Namespace CryptoHelper
    Public Class Generator

        Public Shared numberPrime As Integer() = New Integer() {547, 557, 563, 569, 571, 577, 587, 593, 599, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, _
                                             739, 743, 751, 757, 761, 769, 773, 787, 797, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, _
                                             1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, _
                                             3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, _
                                             5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, _
                                             9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973}

        Public Shared numberUnPrime As Integer() = New Integer() {548, 549, 550, 570, 572, 578, 588, 594, 600, 608, 614, 618, 620, 632, 642, 644, 649, 655, 660, _
                                                          740, 744, 752, 758, 763, 770, 774, 789, 799, 812, 822, 826, 889, 830, 840, 855, 858, 861, 869, 939, 949, 948, 955, 970, 972, 979, 984, 992, 999, _
                                                          1525, 1535, 1547, 1550, 1554, 1561, 1569, 1573, 1585, 1584, 2065, 2070, 2082, 2085, 2090, 2091, 2092, 2112, 2116, 2130, _
                                                          3660, 3675, 3674, 3679, 3696, 3699, 3703, 3711, 3720, 3728, 4156, 4158, 4160, 4178, 4209, 4215, 4218, 4220, 4230, 4236, _
                                                          5282, 5298, 5306, 5326, 5335, 5348, 5354, 5386, 5388, 6313, 6319, 6325, 6330, 6339, 6345, 6351, 6360, 6365, 6363, _
                                                          9905, 9909, 9928, 9930, 9946, 9950, 9970, 9974}

        Public Shared Function IntEncrypt(num%, integ%) As String
            Dim ch As Char
            Dim str = String.Empty
            Dim num2 = New Random().Next(0, &H13)
            Dim random As New Random
            Dim i%
            For i = 0 To &H13 - 1
                If (i = num2) Then
                    ch = ChrW(integ)
                    str = (str & num.ToString & ch.ToString)
                Else
                    str = (str & random.Next(100).ToString & ChrW(integ).ToString)
                End If
            Next i
            ch = ChrW(integ)
            Return (str & num2.ToString & ch.ToString)
        End Function

        Public Shared Function GenerateDecryptIntFunc(_ClassIntName$, _DecryptIntFuncName$) As String
            Dim str = "Public Class " & _ClassIntName & vbNewLine _
                              & "    Public Shared Function " & _DecryptIntFuncName & " (ByVal d$, Byval integ%) As Integer" & vbNewLine _
                              & "        Dim s As String() = d.Split(New Char() {Strings.ChrW(integ)})" & vbNewLine _
                              & "        Dim n As Integer() = New Integer((s.Length - 1) - 1) {}" & vbNewLine _
                              & "        Dim i%" & vbNewLine _
                              & "        For i = 0 To n.Length - 1" & vbNewLine _
                              & "            n(i) = Integer.Parse(s(i))" & vbNewLine _
                              & "        Next i" & vbNewLine _
                              & "        Return n(n(n.Length - 1))" & vbNewLine _
                              & "    End Function" & vbNewLine _
                              & "End Class"
            Return str
        End Function

        Public Shared Function GenerateDecryptOddFunc(_ClassOddName$, _DecryptOddFuncName$) As String
            Dim str = "Public Class " & _ClassOddName & vbNewLine _
                              & "    Public Shared Function " & _DecryptOddFuncName & " (ByVal n%) As Boolean" & vbNewLine _
                              & "        Return n Mod 2 <> 0" & vbNewLine _
                              & "    End Function" & vbNewLine _
                              & "End Class"
            Return str
        End Function

        Public Shared Function GenerateDecryptXorFunc(_ClassXorName$, _DecryptXorFuncName$) As String
            Dim str = "Public Class " & _ClassXorName & vbNewLine _
                              & "    Public Shared Function " & _DecryptXorFuncName & " (ByVal t$, ByVal n%) As String" & vbNewLine _
                              & "        Dim s$ = String.Empty" & vbNewLine _
                              & "        Dim o% = (t.Length - 1)" & vbNewLine _
                              & "        Dim j% = 0" & vbNewLine _
                              & "        Do While (j <= o)" & vbNewLine _
                              & "            Dim p% = (Convert.ToInt32(t.Chars(j)) Xor n)" & vbNewLine _
                              & "            s = (s & Char.ConvertFromUtf32(p))" & vbNewLine _
                              & "            j += 1" & vbNewLine _
                              & "        Loop" & vbNewLine _
                              & "        Return s" & vbNewLine _
                              & "    End Function" & vbNewLine _
                              & "End Class"
            Return str
        End Function

        Public Shared Function GenerateCompressWithGzipByteFunc(_Decompress0$, Decompress1$) As String
            Return "    Public Shared Function " & _Decompress0 & "(ByVal d As Byte()) As Byte()" & vbNewLine _
                     & "        Try : Return " & Decompress1 & "(New GZipStream(New MemoryStream(d), CompressionMode.Decompress, False), d.Length)" & vbNewLine _
                     & "        Catch : Return Nothing : End Try" & vbNewLine _
                     & "    End Function" & vbNewLine _
                     & GenerateDeCompressWithGzipFunc(Decompress1)
        End Function

        Public Shared Function GenerateDeCompressWithGzipStreamFunc(_Decompress0$, Decompress1$) As String
            Return "    Private Shared Function " & _Decompress0 & "(ByVal d As Stream) As Byte()" & vbNewLine _
                     & "        Try : Return " & Decompress1 & "(New GZipStream(d, CompressionMode.Decompress, False), d.Length)" & vbNewLine _
                     & "        Catch : Return Nothing : End Try" & vbNewLine _
                     & "    End Function" & vbNewLine _
                     & GenerateDeCompressWithGzipFunc(Decompress1)
        End Function

        Private Shared Function GenerateDeCompressWithGzipFunc(Decompress1$) As String
            Return "    Public Shared Function " & Decompress1 & "(ByVal ds As Stream, ByVal c As Integer) As Byte()" & vbNewLine _
                     & "        Dim d() As Byte : Dim tb As Int32 = 0" & vbNewLine _
                     & "        Try : While True" & vbNewLine _
                     & "            ReDim Preserve d(tb + c)" & vbNewLine _
                     & "            Dim br As Int32 = ds.Read(d, tb, c)" & vbNewLine _
                     & "            If br = 0 Then Exit While" & vbNewLine _
                     & "                tb += br" & vbNewLine _
                     & "              End While" & vbNewLine _
                     & "            ReDim Preserve d(tb - 1)" & vbNewLine _
                     & "            Return d" & vbNewLine _
                     & "        Catch : Return Nothing : End Try" & vbNewLine _
                     & "    End Function" & vbNewLine
        End Function

        Public Shared Function GenereateDecryptPrimeFunc(_FunctionName$) As String
            Return "Public Shared Function " & _FunctionName & " (n as Integer) As Boolean" & vbNewLine _
                 & "        Dim b As Boolean = True" & vbNewLine _
                 & "        Dim f as integer = n / 2" & vbNewLine _
                 & "        Dim i as integer = 0" & vbNewLine _
                 & "        For i = 2 To f" & vbNewLine _
                 & "            If (n Mod i) = 0 Then" & vbNewLine _
                 & "                b = False" & vbNewLine _
                 & "            End If" & vbNewLine _
                 & "        Next" & vbNewLine _
                 & "        Return b" & vbNewLine _
                 & "     End Function"
        End Function

        Public Shared Function GenerateDecryptRPNFunc(_FunctionName0$, _FunctionName1$) As String
            Return "    Public Shared Function " & _FunctionName0 & " (ByVal operands As String()) As Integer" & vbNewLine _
                 & "        Dim sta As New Stack(Of Integer)" & vbNewLine _
                 & "        'Dim operands() As String = expression.ToLower().Split(New Char() {"" ""c}, StringSplitOptions.RemoveEmptyEntries)" & vbNewLine _
                 & "        For Each op As String In operands" & vbNewLine _
                 & "            Select Case op" & vbNewLine _
                 & "                Case ""+""" & vbNewLine _
                 & "                    sta.Push(sta.Pop() + sta.Pop())" & vbNewLine _
                 & "                Case ""-""" & vbNewLine _
                 & "                    sta.Push(-sta.Pop() + sta.Pop())" & vbNewLine _
                 & "                Case ""*""" & vbNewLine _
                 & "                    sta.Push(sta.Pop() * sta.Pop())" & vbNewLine _
                 & "                Case ""/""" & vbNewLine _
                 & "                    Dim tmp As Integer = sta.Pop()" & vbNewLine _
                 & "                    sta.Push(sta.Pop() / tmp)" & vbNewLine _
                 & "                Case ""sqrt""" & vbNewLine _
                 & "                    sta.Push(Math.Sqrt(sta.Pop()))" & vbNewLine _
                 & "                Case Else" & vbNewLine _
                 & "                    sta.Push(Integer.Parse(op))" & vbNewLine _
                 & "            End Select" & vbNewLine _
                 & "        Next" & vbNewLine _
                 & "        If sta.Count <> 1 Then Throw New ArgumentException(""Unbalanced expression"")" & vbNewLine _
                 & "        Return sta.Pop()" & vbNewLine _
                 & "    End Function" & vbNewLine _
                 & "    Public Shared Function " & _FunctionName1 & " (ByVal expression As String) As String()" & vbNewLine _
                 & "        Return expression.ToLower().Split(New Char() {"",""c}, StringSplitOptions.RemoveEmptyEntries)" & vbNewLine _
                 & "    End Function" & vbNewLine
        End Function

        Public Shared Function GenerateReadFromResourcesFunc(ClassName$, ReadFromResourcesFuncName$, ResName$) As String
            Return "Public Class " & ClassName & vbNewLine _
                          & "    Public Shared Function " & ReadFromResourcesFuncName & " (ByVal N As String) As String" & vbNewLine _
                          & "        Dim m As New ResourceManager(""" & ResName & """, GetType(System.Reflection.Assembly).GetMethod(""GetExecutingAssembly"").Invoke(Nothing, Nothing))" & vbNewLine _
                          & "        Dim s As String = DirectCast(m.GetObject(N), String)" & vbNewLine _
                          & "        m.ReleaseAllResources()" & vbNewLine _
                          & "        Return s" & vbNewLine _
                          & "    End Function" & vbNewLine _
                          & "End Class" & vbNewLine

        End Function

        Public Shared Function GenerateFromBase64Func(ClassName$, FromBase64FuncName$, GetStringFuncName$) As String
            Return "Public Class " & ClassName & vbNewLine _
                          & "    Public Shared Function " & FromBase64FuncName & " (ByVal bbbb As String) As Byte()" & vbNewLine _
                          & "        Return Convert.FromBase64String(bbbb)" & vbNewLine _
                          & "    End Function" & vbNewLine _
                          & "    Public Shared Function " & GetStringFuncName & " (ByVal aaaa As Byte()) As String" & vbNewLine _
                          & "        Return Encoding.Unicode.GetString(aaaa)" & vbNewLine _
                          & "    End Function" & vbNewLine _
                          & "End Class" & vbNewLine
        End Function

    End Class


End Namespace



================================================
File: Helper/My Project/Application.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On




================================================
File: Helper/My Project/Application.myapp
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MySubMain>false</MySubMain>
  <SingleInstance>false</SingleInstance>
  <ShutdownMode>0</ShutdownMode>
  <EnableVisualStyles>true</EnableVisualStyles>
  <AuthenticationMode>0</AuthenticationMode>
  <ApplicationType>1</ApplicationType>
  <SaveMySettingsOnExit>true</SaveMySettingsOnExit>
</MyApplicationData>



================================================
File: Helper/My Project/AssemblyInfo.vb
================================================
ï»¿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
' l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
' associÃ©es Ã  un assembly.

' Passez en revue les valeurs des attributs de l'assembly

<Assembly: AssemblyTitle("Helper")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("3DotDev Freewares")> 
<Assembly: AssemblyProduct("Helper")> 
<Assembly: AssemblyCopyright("Copyright Â© 3DotDev 2015")> 
<Assembly: AssemblyTrademark("Helper")> 

<Assembly: ComVisible(False)>

'Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
<Assembly: Guid("7f2ea4b2-5d71-4ec9-92fb-edf8654c2ef9")> 

' Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
'
'      Version principale
'      Version secondaire 
'      NumÃ©ro de build
'      RÃ©vision
'
' Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
' en utilisant '*', comme indiquÃ© ci-dessousÂ :
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("4.4.2.0")> 
<Assembly: AssemblyFileVersion("4.4.2.0")> 



================================================
File: Helper/My Project/Resources.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'Cette classe a Ã©tÃ© gÃ©nÃ©rÃ©e automatiquement par la classe StronglyTypedResourceBuilder
    'Ã  l'aide d'un outil, tel que ResGen ou Visual Studio.
    'Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis rÃ©exÃ©cutez ResGen
    'avec l'option /str ou rÃ©gÃ©nÃ©rez votre projet VS.
    '''<summary>
    '''  Une classe de ressource fortement typÃ©e destinÃ©e, entre autres, Ã  la consultation des chaÃ®nes localisÃ©es.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Retourne l'instance ResourceManager mise en cache utilisÃ©e par cette classe.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("Helper.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Remplace la propriÃ©tÃ© CurrentUICulture du thread actuel pour toutes
        '''  les recherches de ressources Ã  l'aide de cette classe de ressource fortement typÃ©e.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
    End Module
End Namespace



================================================
File: Helper/My Project/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: Helper/My Project/Settings.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My

    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"), _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase

        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()), MySettings)

#Region "FonctionnalitÃ© Enregistrement automatique My.Settings"
#If _MyType = "WindowsForms" Then
    Private Shared addedHandler As Boolean

    Private Shared addedHandlerLockObject As New Object

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
        If My.Application.SaveMySettingsOnExit Then
            My.Settings.Save()
        End If
    End Sub
#End If
#End Region

        Public Shared ReadOnly Property [Default]() As MySettings
            Get

#If _MyType = "WindowsForms" Then
               If Not addedHandler Then
                    SyncLock addedHandlerLockObject
                        If Not addedHandler Then
                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                            addedHandler = True
                        End If
                    End SyncLock
                End If
#End If
                Return defaultInstance
            End Get
        End Property
    End Class
End Namespace

Namespace My

    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(), _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()> _
    Friend Module MySettingsProperty

        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")> _
        Friend ReadOnly Property Settings() As Global.Helper.My.MySettings
            Get
                Return Global.Helper.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace



================================================
File: Helper/My Project/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>



================================================
File: Helper/Randomize/Randomizer.vb
================================================
﻿Imports System.Security.Cryptography
Imports System.Text
Imports Helper.RandomizeHelper.RandomizerType

Namespace RandomizeHelper
    Public NotInheritable Class Randomizer

#Region " Fields "
        Private Shared m_maxLength% = 1
        Private Shared m_generatedNames As New List(Of String)()
        Private Shared m_alphabeticChars As Char()() = {"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray()}
        Private Shared m_japenese$ = "れづれなるまゝに日暮らし硯にむかひて心にうりゆくよな事を、こはかとなく書きつくればあやうこそものぐるほけれ。"
        Private Shared m_greek$ = "αβγδεζηθικλµνξοπρστυϕχψω"
        Private Shared m_Symbols$ = "☹☺☻☼☽☾☿♀♁♂♔♕♖♗♘♙♚♛♜♝♞♟♠♡♢♣♤♥♦♧♩♪♫♬♭♮♯♻♼♿⚐⚑⚒⚓⚔⚕⚖⚠⚢⚣⚤⚥⚦⚧⚨⚩⛄⛅⚽✔✓✕✖✗✘✝✞✟❗❓❤☸"
        Private Shared m_rdn As Random = New Random()
        Private Shared m_rdnBool = New Random(DateTime.Now.Millisecond)
        Private Shared m_reservedWords As String() = New String() {"addhandler", "addressof", "alias", "and", "andalso", "ansi", "append", "as", "assembly", "auto", "binary", "boolean", "byref", "byte", "byval", "call", "case", "catch", "cbool", "cbyte", "cchar", "cdate", "cdec", "cdbl", "char", "cint", "class", "clng", "cobj", "compare", "const", "continue", "cbyte", "cshort", "csng", "cstr", "ctype", "cuint", "culng", "cushort", "date", "decimal", "declare", "default", "delegate", "dim", "directcast", "do", "double", "each", "else", "elseif", "end", "endif", "enum", "erase", "error", "event", "explicit", "exit", "false", "finally", "for", "friend", "function", "get", "gettype", "global", "gosub", "goto", "handles", "if", "implements", "imports", "in", "inherits", "input", "integer", "interface", "internal", "is", "isnot", "let", "lib", "like", "lock", "long", "loop", "me", "mid", "mod", "module", "notinheritable", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "next", "not", "nothing", "notinheritable", "notoverridable", "object", "of", "off", "on", "operator", "option", "optional", "or", "orelse", "output", "overloads", "overridable", "overrides", "paramarray", "preserve", "partial", "private", "property", "protected", "public", "raiseevent", "random", "read", "readonly", "redim", "rem", "removehandler", "resume", "return", "sbyte", "seek", "select", "set", "shadows", "shared", "short", "single", "static", "step", "stop", "strict", "string", "structure", "sub", "synclock", "then", "throw", "to", "true", "try", "trycast", "typeof", "variant", "wend", "uinteger", "ulong", "until", "ushort", "using", "void", "when", "while", "widening", "with", "withevents", "writeonly", "xor", "region"}
        Private Shared m_flowing As String = ".̃̏̂͑̽̿̄ͯ҉̬̬̭͉͙.ͮͦ͌̑̄ͤͥͫ̕͏͉̖̪̪̤͈̝̠͓̥̹̥̺͉ͅ.̶̸̘̘̙̭̻͖̪͍̖̰͍͇̟̯̖̃͒ͧ̈́ͧ͛͑ͣ̂̌͑̽̎̔̚͢.͙̙͓͔̻̺̪͙̼̺͙̠̭̣̯̫͔̭ͥͦͫ͜͟͞.̩͈̤̼̬̬̼̘͎̻̼̠̼͓̝̯̰̌̆̋̃͗̃̅͂̂̈́̔͒̑̕͜.̧̭̫̭̮͙̣̺̳̦̝̦͍͚̟̯̟̽̂ͨ͑̈̀͟͠.̡̣̖͚̮͓͇͔͈̱̯̞͓̙̞͕͚́ͩ̾ͯ̍̏̿̆ͫ̆͛̑́͝ͅ.̛̊ͨ̆͂͌ͭ͏̸͓͕͕͓̗͙͇̤͍̦͕̥̘͇.̡͔͇͍̦͚̲͔̯̪̙̘͓͚̬̲͔̼͕̽̃̉ͫ̓̑ͫ̉ͫ̒̊͜.͎̹̫͕ͯ̐͌̐͒͛̐̎̏ͨͮ͂̒̀̚͠.̶̷̨̝̣͖͇̲̯͇̰͈̙͉͙͚͉̄͑͗̏̒ͪ̏ͮ͌͗ͬͪͥͭ̊͋͞.̜̟͕̺̣͕̥͚͔͓̠̞̳̭̠ͪ̽ͭ͒ͮ͘͝.̛̝̦͎͚̈̉̈́̈͛ͯ͑ͫ̊ͮͬ̆ͣ͂ͥ.̸͇̮͙͈͇̱͈͕̜̬̻̮ͫ͊ͭ̏͑̔͐̑ͬ̾̂ͩ͆ͫ̀.ͤ͂ͩ̀͑̒͏̷́͏͓̮̙͈̮̳̲̭̺̟̱̞͍̜̥͜.̶̷̣̮͍͇͈̝̞͓̦͐ͤͦͤͦͭ̆͒̓̀ͫ̅̐̚͡.̵̢͇̯͕͕̤̥̘͍͂̆̊ͮ̆̋̿ͧ͊ͩ̑͜.̸̧̗̜̼͖̲̟̹̞̈ͭ̊̔ͪ̐ͤ͆̇̔ͫͮ̀́.̏̅̃̓ͭ͏͇̲͎̹̖͙͎̯̥͡.̢̰͕̭̲͖͇͒́̾͋ͬ̅̈͑ͥͅͅ.͊̒̃͒́͜͏̢͉̲̹̼̥̥͖̘̼̹͈͉.̸̷̶̜̞͖̪̻̦͕͕̼̮̳͙̯̹̩̗̓͌̑ͭ̏͂̾͂̒ͭ̍̀̚.̵̡̘͕͚̳͐ͦͥ̉͘͢ͅ.̶̸̨̨͍̳̣̱͓̫̫̱̖̣͔̅ͧ̂́ͯ̓͋͋͂̾͑̈́̇̑̎̑ͭ̍͜.̴̵̘̩͍͖̻̦̣͕̗̖͔̘͓͗̈͛͂́̾ͫ͛̄͆ͤ̑͘͘.̡̛̮͇̫̮͔̲͕̫̹̘̞̱̾̈ͬ̆ͦ̈́͂̀̌̈́̆͋͆͋́.̶̴̨̩̻̮̹͔̞̻͖̭̻̲̉͆̓ͨͥ̈́̈́ͤ̅͑̆̑̔̔̍̀͘͝.̃̏̂͑̽̿̄ͯ҉̬̬̭͉͙.ͮͦ͌̑̄ͤͥͫ̕͏͉̖̪̪̤͈̝̠͓̥̹̥̺͉ͅ.̶̸̘̘̙̭̻͖̪͍̖̰͍͇̟̯̖̃͒ͧ̈́ͧ͛͑ͣ̂̌͑̽̎̔̚͢.͙̙͓͔̻̺̪͙̼̺͙̠̭̣̯̫͔̭ͥͦͫ͜͟͞.̩͈̤̼̬̬̼̘͎̻̼̠̼͓̝̯̰̌̆̋̃͗̃̅͂̂̈́̔͒̑̕͜.̧̭̫̭̮͙̣̺̳̦̝̦͍͚̟̯̟̽̂ͨ͑̈̀͟͠.̡̣̖͚̮͓͇͔͈̱̯̞͓̙̞͕͚́ͩ̾ͯ̍̏̿̆ͫ̆͛̑́͝ͅ.̛̊ͨ̆͂͌ͭ͏̸͓͕͕͓̗͙͇̤͍̦͕̥̘͇.̡͔͇͍̦͚̲͔̯̪̙̘͓͚̬̲͔̼͕̽̃̉ͫ̓̑ͫ̉ͫ̒̊͜.͎̹̫͕ͯ̐͌̐͒͛̐̎̏ͨͮ͂̒̀̚͠.̶̷̨̝̣͖͇̲̯͇̰͈̙͉͙͚͉̄͑͗̏̒ͪ̏ͮ͌͗ͬͪͥͭ̊͋͞.̜̟͕̺̣͕̥͚͔͓̠̞̳̭̠ͪ̽ͭ͒ͮ͘͝.̛̝̦͎͚̈̉̈́̈͛ͯ͑ͫ̊ͮͬ̆ͣ͂ͥ.̸͇̮͙͈͇̱͈͕̜̬̻̮ͫ͊ͭ̏͑̔͐̑ͬ̾̂ͩ͆ͫ̀.ͤ͂ͩ̀͑̒͏̷́͏͓̮̙͈̮̳̲̭̺̟̱̞͍̜̥͜.̶̷̣̮͍͇͈̝̞͓̦͐ͤͦͤͦͭ̆͒̓̀ͫ̅̐̚͡.̵̢͇̯͕͕̤̥̘͍͂̆̊ͮ̆̋̿ͧ͊ͩ̑͜.̸̧̗̜̼͖̲̟̹̞̈ͭ̊̔ͪ̐ͤ͆̇̔ͫͮ̀́.̏̅̃̓ͭ͏͇̲͎̹̖͙͎̯̥͡.̢̰͕̭̲͖͇͒́̾͋ͬ̅̈͑ͥͅͅ.͊̒̃͒́͜͏̢͉̲̹̼̥̥͖̘̼̹͈͉.̸̷̶̜̞͖̪̻̦͕͕̼̮̳͙̯̹̩̗̓͌̑ͭ̏͂̾͂̒ͭ̍̀̚.̵̡̘͕͚̳͐ͦͥ̉͘͢ͅ.̶̸̨̨͍̳̣̱͓̫̫̱̖̣͔̅ͧ̂́ͯ̓͋͋͂̾͑̈́̇̑̎̑ͭ̍͜.̴̵̘̩͍͖̻̦̣͕̗̖͔̘͓͗̈͛͂́̾ͫ͛̄͆ͤ̑͘͘.̡̛̮͇̫̮͔̲͕̫̹̘̞̱̾̈ͬ̆ͦ̈́͂̀̌̈́̆͋͆͋́.̶̴̨̩̻̮̹͔̞̻͖̭̻̲̉͆̓ͨͥ̈́̈́ͤ̅͑̆̑̔̔̍̀͘͝ḩ̷̸͎̞̬͚͙́͒̃̿̑ส็็็็็็็็็็็็็็็็็็็i͇̠̱̽͛ͣͯͭ̐͐ͩͪ̀͒̿̍̆̌ͣ̕͞ţ̈́̄ͦ͑͐ͤ̇ͯ̚͜͢͏̺͎̰̯̰̳̣̺͉͉̻̯̱͉̱̳̠̫l̢̮̝̰̖̲̯͉̱͉̤̗̯͇ͫ͋͑͋͊́͑͠e̛̼͉̝̯̼͚͇̜̹̬̼͚̥̝̟̩̮̎̾ͧ͟͝ͅr̷͎̣͙͇̦̱̺͚̬͍͎̗̺͍͈͍̔̃̆ͬ̃͌ͦ͗ͧ̓͋̓͟͟͡ͅ ̵̩̼͙̣̦͕̃ͨͧ̂ͭ͂̀͜ḣ͚͖͉͓̫̲̦͓́̆̈ͯ͒͂ͫ͛ͣ̓ͫ̄́́̕͜͜͜ą̴̢̺̼͎̩͓̱͍̯͓̻̖͓̯̿ͩͩͦ̕ͅt͂ͫ̔͋͆̀ͩͨ͂̎̓ͧ̿̈́̓̏̃ͯ̈͘͘҉͚̬̝͙̟̗̰̹̱̗ ̵̠̤̼̬̩͔̲̖̎̍̈̌̾̎̋̂̓ͬ̒ͫ̽ͭ́̕͠n̛̲͙̻̤̮̥̠͇͇͖͎̘̠̲ͥͣ̋͛ͨ̀i̧͓͖͈̭͔͉̼ͪͫ̓͂̔̿͠ͅč̨̆̉͂̑͞͏̻̠̖̼̹̻̹̯͇͙̰̪̯hͭ͌ͦ̉̊͐͂҉̸͇̹̹̬̖͕̱͕͕̠̗̀͘͝tͤͫͫͧ̈́͂͛ͭ̉ͧ͛ͫ̚҉̴͚̯̭̲̫̦͖̮̭͖̗͎̳̟̀͘s̸ͧ͗̌͊ͨ̐̅̇͟҉͈̤̘͉̤̯̝͈͚ ͤ͆͆ͨ̓҉̤̣̩̠̩̯̩̱͕̹͜͝f̡̞͔̮͖̩͔̀̆̅̓̈ͪͥ͋͊̉ͪ̇̉̃̔͋̃̈́͟͠͝ä̵̸̺̖͓͖̳̬̲̲͎͎͔̈͋͑͋ͦͅͅl̻̟̲̞̘͚̤͎͉̯̫̹̜̥̳͈̙ͧ͋̇ͫ͋̎ͯ̋͂ͮ̈͂̾ͯ̎̊̾ͯ͘͢ͅs̴̡͍̖̖͕̱̫̤̣͛ͩͤ͆̅ͣ͐̿ͣ͐̔ͨ̄ͫͩ̄̍͘̕͜c̵̷̨͇̰̰̼̝̝̼̤͎̯̺̰͕̤̤͇ͧͦ̄̇̓ͩ̎͂̊ͯ͋͋̋̀ͬͧ͗̔̚͝͡ͅͅh͓͙̩̭̬̠̜͇̗̮̐ͥͧͭ̆͆̔ͬ́̄͊ͮ͡͝͠ ̩̹̥̯̲͉͔̟͕͎̪͔̱̬̌ͭ͗̔̏̊̚͡͞g̴̴̫͖̥̲̦͉̩̲̪̹̙̘̩̣̯̜̱͌ͩ͑̆̿̏̽ͤ͂ͩ́͢͠e̤̳͈̹͉̹̪̥̜̲͙͕͍̟̱̱̳͗̽ͤ̈́̽̽̊͢͡ḿ͈̮͓͇̞̯͍̦͖̟͔̫͈̏̑̋̂̒ͬ͌̌̓̄͢͞ą̶̴͈̳̥͙͚͓͉̟̬̤͋͒ͫ̓̿́̒͐͒͘͡c̡̞̪̞̣̦̖̙̬̜̜̋̿͐̇̓̋̃͆̚h̨̛̝͓͚̱͍͕̝̬̯̩̓̽̉͌͊̇͐̒̈͋͋̌ͩ̋ͭt̶̄́͑̐҉҉̟̭̟͓̜̩͖̲͔̀ ̷̧̡̦̞̝̯̥͍̻͚̠̞̣̯͎̇̓̇̐̓́͝h̡̺̳͇̤̬̻̮̭͇̿̑̔̽ͮ̉̏̃͂̄̌̍͒̑̇ͪ̑͡͞ĭ̵͔͙̞̻̰̻̬̖͇̩͔̪̮̩̘̔ͪͥ̈́͋͞t̸̝̪̹̲̤̜̓͌ͤ̍ͫͧ͋͋ͣ͆̈́ͩͯ̒ͮ̊ͧ̕͢͜ͅl̈́ͦ̈̌͆ͧ͏̷̛̮̼̬͓̞̻̣̼͙ͅe̗͚̺̰͎͖̥̙̻͕̮͕̱͇̓̑ͫ͋ͭͯ̍ͨ̌͗̊̔̒̈́̽̕͜͝ͅṛ̶̷̟̹̥̹̬̖͖͇̬̭̲̬̠̮ͣͧ̓̓̈́̅͢ ̨̛̘̲͉̮̲̹̳͔̗̣̣̗̱̱̘͚ͦ͋̀̍̃̑ͣ̍͒̇ͭ̆ͧ͒͒̋̕h̷͔̠͈̙̝̻̺͔͕̤ͯ̃̎̋͑ͫ̎̾̃̿̀̄́̀͞a̍̏͛̔͆͗͒̆̐́̈ͥ̃͌͝҉̧҉̷̪̳̻͓̘̜̘͔̘̞̱̫͈̹ͅť̷̢̫̰̦̫̯̮̟͇̍͊̒̅̀̐͊ͯ́̒̅ͤͅ ̵̮̤̳̺̤̼̝̉̑̎ͧ̏̀̽̽́n̴̴̯̹̮̣͉̹̝̑͑̐̿ͮ̈̆̔́̏ͥ͋ͨ̒͘͘͟i̲̬͓̯̋͑̂̋͋͡c͑̒̈́ͫ̓̎͆̃̃ͬͯ͜͏͓̲̝̺̥̘͍͚̕ḩ̜͖̤̼͇̳̳̭̻͖̳̙͑͌̑̓͒ͦ͂ͮ̅̅͌̈ͭͭ̄ͅṫ̴͎̺̭̺̞̺̮̼̣͔͎͔̗̱̭̄̆̓͋̔͝s̛͓͇̮̹̙̫̮̦̪̜̋ͪ̊̊ͮ̎͌̂̂̿̽̔̉̓̍̔͆̕ ̛̽͌͋ͩ̃̈̍ͨ̅ͦ̀̏̍̓̑̍̊ͧ͘͏̪͔͇ͅf̢̰̲̺͙̝̣͕̭̝̙͍ͧ̌ͤͮ͛͋ͭ́̓̽̔̈́̂ͤ̉̆ͩ̚͘ͅa̧̡ͪ̊̊ͩ̈͠͏҉̠̬̝̻͙̰̖̻̼̖̘̠̺̝l̸̷͊͒ͨ̄̓̂҉̥̩̮̳̯̠̻͎̹͈̟̠̫̮̫̠̖̥͙s̶͒̓̇͑͗̍̿̐ͮ҉͇͖͓̣͉̗̰̯͎̖͎̱c̶͇̭̣͍̞̝͓͇̫̯̜̫̞͉̑ͤͧ̎̒̈ͯͣͥ̍ͪ̌̎̒́h̵̢̼̮̖͎̭̭͇͚̮͙͙͇̗̤̝̺͚̐̏͋ͬ̋̿̎ͭ̂̾̂̓ͪ̏̋̀ ̵̨̛̱̖̫͇̱͈̞̭̱́̔ͪ̋̎̎ͭͨ̈̿ͤ̎̿͟ͅg̉͂͛̍̓ͫ̇̿̎͐̓̏͏͏̴̤̗̙͖͙̱̺͎̖̩͝ę̵̞͖̭̳͔̻͉̯̻̯̣̈́́̈̊̽̾͗ͣ̃͊ͬ̔ṃ̶̳̫̲̩̺͍̝̰̻̱̖̦̪̘̠̏ͫ̎ͤ̓ͣ̾͊̑͒͗̋͂̉̈́͜͞a̰̯͔̗̠͖̣̬̖͐ͬ̏͐ͬ͊̂̍̇ͣͩ́͠͞c̨̡̬̥̟̩̠̬̟̪͖̙̮̺̩͍̮̝ͥ̌̉ͣ͊̈͌̓̈̉̈͐̿̈ͬ̀h̛̬͚̝͉̮̝͉̥̺̩̼̞̙̖͎̮̳̒͂̋̋ͬ̓͋̂̊̚̕t͒ͮ̿ͤͬ̎ͭ͌̅̂̾̐̉ͦ͌ͧͯ͋̈͏̮̮̰̻̕͜͞ ̸͎̥̞̟͙͚͙̥ͬ̈́̋̔̿ͣͨͧͫ͒̿ͬͫͧ̊͢͜͠ḫ̝̘̤̰͐͆ͤ̑̒͛ͩ́͞iͤ̓͑̊̏ͥ̀͘͞҉̨̗̬͉̜̘̜t̑ͨ͋̾ͦ̋̊ͤ̔̒̑̿̓́͏̵̛̱͚̖͓̲̕l̶͍̳̳͎͓̀ͭ̎̉̌̓̊̌̍̍̀̕e̵̡͇͈͉̥̼̼̺͎͉̦ͮ̾̒̃ͫ̃͒̃̓́̅͆ͬ͗ͨ̿ͥ̂̚͝͡ŗ̡̊͋̾ͩ̽͆̋̈́͐͊̂ͮͨ̉̏ͨ͐͐̆̕͞͏͍͍̰̻̖̥ ͨ́̿̃̇ͯ̾̕͢҉̩͇̟̪̥̬͍̲͈͔͔͍̼̭͇̣h̷̻̝̫̪͚̦͙͉͎̥̦̳͉̖̃ͥ̅͗͢ḁ̛̪̗̮̦̳̪̭̞̗̠̟̈́̌͐̈́ͦ̄̉̎ͬ͆̒̉̕͟t̶̛͔͍͔͎̫̞̖͓̰̒̇̆ͯ̀ͥ̈́̏̓̀ͮͥ̍̀ ̨ͥ̄̓ͩ̿̃̿̊̈̔͒͗͊ͭ̽ͥͥ͐҉̶̸̲̻̱̩̖̪̹͈̙̩͎̲̘̙n"
        Public Shared invisibleChars As Integer() = New Integer(3) {8203, 8204, 8206, 8207}
#End Region

#Region " Methods "

        Public Shared Function GenerateInvisible() As Integer
            Dim b = invisibleChars
            Return m_rdn.Next(b(0), b(3))
        End Function

        Public Shared Function GenerateBoolean() As Boolean
            Dim b = New Integer(9) {5, 8, 1, 7, 3, 2, 9, 0, 4, 6}
            Return (Odd(b(m_rdnBool.Next(10))))
        End Function

        Public Shared Function GenerateNumber() As Integer
            Dim b = New Integer(1) {0, 1}
            Return m_rdnBool.Next(2)
        End Function

        Private Shared Function Odd(value%) As Boolean
            Return (value And 1) = 1
        End Function

        ''' <summary>
        ''' Creates a pseudo-random password containing the number of character classes
        ''' </summary>
        Private Shared Function GenerateKey(length%) As String
            Dim csp As New System.Security.Cryptography.RNGCryptoServiceProvider()

            Dim allchars = m_alphabeticChars.Take(1).SelectMany(Function(c) c).ToArray()
            Dim bytes = New Byte(allchars.Length - 1) {}
            csp.GetBytes(bytes)

            For i% = 0 To allchars.Length - 1
                Dim tmp = allchars(i)
                allchars(i) = allchars(bytes(i) Mod allchars.Length)
                allchars(bytes(i) Mod allchars.Length) = tmp
            Next
            Array.Resize(bytes, length)
            Dim result = New Char(length - 1) {}
            While True
                csp.GetBytes(bytes)
                For i% = 0 To length - 1
                    result(i) = allchars(bytes(i) Mod allchars.Length)
                Next
                If Char.IsWhiteSpace(result(0)) OrElse Char.IsWhiteSpace(result((length - 1) Mod length)) Then
                    Continue While
                End If

                Dim testResult As New String(result)
                If 0 <> m_alphabeticChars.Take(1).Count(Function(c) testResult.IndexOfAny(c) < 0) Then
                    Continue While
                End If

                Return testResult
            End While
            Return m_alphabeticChars.Take(1).ToString
        End Function

        Private Shared Function Alphabetic() As String
            Dim str$ = GenerateKey(m_maxLength)
            If m_generatedNames.Contains(str.ToLower) OrElse m_reservedWords.Contains(str.ToLower) Then
                m_maxLength += 1
                Return Alphabetic()
            End If
            m_generatedNames.Add(str.ToLower)
            Return str
        End Function

        Public Shared Function GenerateNewAlphabetic() As String
            Return Alphabetic()
        End Function

        Private Shared Function japanese() As String
            Dim str$ = New String(Enumerable.Repeat(m_japenese, m_rdn.Next(1, m_maxLength)).Select(Function(s) s(m_rdn.Next(s.Length))).ToArray())
            If m_generatedNames.Contains(str) Then
                m_maxLength += 1
                Return japanese()
            End If
            m_generatedNames.Add(str)
            Return str
        End Function

        Private Shared Function Dots() As String
            Dim builder As New StringBuilder()
            Dim randomize As New Random(Guid.NewGuid().GetHashCode())

            For i% = 0 To m_maxLength - 1
                builder.Append(Convert.ToChar(randomize.Next(AscW("⠀"c), AscW("⠎"c))))
            Next

            If m_generatedNames.Contains(builder.ToString()) Then
                m_maxLength += 1
                Return Dots()
            End If

            m_generatedNames.Add(builder.ToString())
            Return builder.ToString()
        End Function

        Public Shared Function GenerateNewInvisible() As String
            Return Invisible()
        End Function

        Private Shared Function Invisible() As String
            Dim builder As New StringBuilder()
            Dim randomize As New Random(Guid.NewGuid().GetHashCode())

            For i% = 0 To m_maxLength - 1
                builder.Append(Convert.ToChar(randomize.Next(AscW("​"c), AscW("‏"c))))
            Next

            If m_generatedNames.Contains(builder.ToString()) Then
                m_maxLength += 1
                Return Invisible()
            End If

            m_generatedNames.Add(builder.ToString())
            Return builder.ToString()
        End Function

        ''' <summary>
        ''' by Yck from Confuser
        ''' </summary>
        Private Shared Function Chinese() As String
            Dim arr As New BitArray(MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(Guid.NewGuid().GetHashCode().ToString())))

            Dim rand As New Random(Guid.NewGuid().GetHashCode())
            Dim xorB As Byte() = New Byte(arr.Length / 8 - 1) {}
            rand.NextBytes(xorB)
            Dim x As New BitArray(xorB)

            Dim result As BitArray = arr.Xor(x)
            Dim ret As Byte() = New Byte(result.Length / 8 - 1) {}
            result.CopyTo(ret, 0)

            Return Encoding.Unicode.GetString(ret).Replace(vbNullChar, "").Replace(".", "").Replace("/", "")
        End Function

        Private Shared Function Greek() As String
            Dim str$ = New String(Enumerable.Repeat(m_greek, m_rdn.Next(1, m_maxLength)).Select(Function(s) s(m_rdn.Next(s.Length))).ToArray())
            If m_generatedNames.Contains(str) Then
                m_maxLength += 1
                Return Greek()
            End If
            m_generatedNames.Add(str)
            Return str
        End Function

        Private Shared Function Symbols() As String
            Dim str$ = New String(Enumerable.Repeat(m_Symbols, m_rdn.Next(1, m_maxLength)).Select(Function(s) s(m_rdn.Next(s.Length))).ToArray())
            If m_generatedNames.Contains(str) Then
                m_maxLength += 1
                Return Symbols()
            End If
            m_generatedNames.Add(str)
            Return str
        End Function

        Private Shared Function Flowing() As String
            Dim str$ = New String(Enumerable.Repeat(m_flowing, m_rdn.Next(1, m_maxLength)).Select(Function(s) s(m_rdn.Next(s.Length))).ToArray())
            If m_generatedNames.Contains(str) Then
                m_maxLength += 1
                Return Flowing()
            End If
            m_generatedNames.Add(str)
            Return str
        End Function

        Public Shared Function GenerateNew() As String
            Select Case RandomizerType.RenameSetting
                Case RandomizerType.RenameEnum.Alphabetic
                    Return Alphabetic()
                Case RandomizerType.RenameEnum.Dot
                    Return Dots()
                Case RandomizerType.RenameEnum.Invisible
                    Return Invisible()
                Case RandomizerType.RenameEnum.Chinese
                    Return Chinese()
                Case RandomizerType.RenameEnum.Japanese
                    Return japanese()
                Case RandomizerType.RenameEnum.Greek
                    Return Greek()
                Case RandomizerType.RenameEnum.Symbols
                    Return Symbols()
                Case RandomizerType.RenameEnum.Flowing
                    Return Flowing()
            End Select

            Return Nothing
        End Function

        Public Shared Function GetScheme(IntVal%) As RenameEnum
            Select Case IntVal
                Case 0
                    Return RandomizerType.RenameEnum.Alphabetic
                Case 1
                    Return RandomizerType.RenameEnum.Dot
                Case 2
                    Return RandomizerType.RenameEnum.Invisible
                Case 3
                    Return RandomizerType.RenameEnum.Chinese
                Case 4
                    Return RandomizerType.RenameEnum.Japanese
                Case 5
                    Return RandomizerType.RenameEnum.Greek
                Case 6
                    Return RandomizerType.RenameEnum.Symbols
                Case 7
                    Return RandomizerType.RenameEnum.Flowing
            End Select

            Return RandomizerType.RenameEnum.Alphabetic
        End Function

        Public Shared Sub CleanUp()
            m_maxLength = 1
            m_generatedNames.Clear()
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Helper/Randomize/RandomizerType.vb
================================================
ï»¿Namespace RandomizeHelper
    Public NotInheritable Class RandomizerType

#Region " Fields "
        Public Shared RenameSetting As RenameEnum
#End Region

#Region " Enumerations "
        Public Enum RenameEnum
            Alphabetic = 0
            Dot = 1
            Invisible = 2
            Chinese = 3
            Japanese = 4
            Greek = 5
            Symbols = 6
            Flowing = 7
        End Enum
#End Region

    End Class
End Namespace


================================================
File: Helper/Resource/NativeMethods.vb
================================================
ï»¿Imports System.Runtime.InteropServices

Namespace ResourcesHelper

    Public NotInheritable Class NativeMethods

#Region " Methods "
        <DllImport("Kernel32.dll", CharSet:=CharSet.Auto, SetLastError:=True)> _
        Public Shared Function LoadLibrary(lpFileName As String) As IntPtr
        End Function

        <DllImport("kernel32.dll")> _
        Public Shared Function LoadLibraryEx(ByVal lpFileName As String, ByVal hReservedNull As IntPtr, ByVal dwFlags As Integer) As IntPtr
        End Function

        <DllImport("kernel32.dll", SetLastError:=True)> _
        Public Shared Function FindResource(ByVal hModule As IntPtr, ByVal lpszName As IntPtr, ByVal lpszType As IntPtr) As IntPtr
        End Function

        <DllImport("kernel32.dll", SetLastError:=True)> _
        Public Shared Function LoadResource(ByVal hModule As IntPtr, ByVal hResInfo As IntPtr) As IntPtr
        End Function

        <DllImport("kernel32.dll")> _
        Public Shared Function LockResource(ByVal hResData As IntPtr) As IntPtr
        End Function

        <DllImport("kernel32.dll", SetLastError:=True)> _
        Public Shared Function SizeofResource(ByVal hModule As IntPtr, ByVal hResInfo As IntPtr) As UInteger
        End Function

        <DllImport("kernel32.dll", SetLastError:=True, EntryPoint:="FreeLibrary")> _
        Public Shared Function FreeLibrary(ByVal hModule As IntPtr) As Boolean
        End Function

        <DllImport("kernel32.dll", SetLastError:=False)> _
        Public Shared Function BeginUpdateResource(ByVal pFileName As String, <MarshalAs(UnmanagedType.Bool)> ByVal bDeleteExistingResources As Boolean) As IntPtr
        End Function

        <DllImport("kernel32.dll", SetLastError:=True)> _
        Public Shared Function UpdateResource(ByVal hUpdate As IntPtr, ByVal lpType As IntPtr, ByVal lpName As IntPtr, ByVal wLanguage As UInt16, ByVal lpData As Byte(), ByVal cbData As UInt32) As Boolean
        End Function

        <DllImport("kernel32.dll", SetLastError:=True)> _
        Public Shared Function UpdateResource(ByVal hUpdate As IntPtr, ByVal lpType As String, ByVal lpName As String, ByVal wLanguage As UInt16, ByVal lpData As IntPtr, ByVal cbData As UInt32) As Boolean
        End Function

        <DllImport("kernel32.dll", setlasterror:=True)> _
        Public Shared Function EndUpdateResource(ByVal hUpdate As IntPtr, ByVal fDiscard As Boolean) As Boolean
        End Function

        <DllImport("Kernel32.dll")> _
        Public Shared Sub CopyMemory(Destination As IntPtr, Source As IntPtr, Length As Integer)
        End Sub

        <DllImport("Kernel32.dll")> _
        Public Shared Function FreeResource(hglbResource As IntPtr) As Integer
        End Function
#End Region

    End Class

End Namespace





================================================
File: Helper/Resource/ResourceEx.vb
================================================
ï»¿Imports System.Runtime.InteropServices
Imports System.ComponentModel
Imports System.Text
Imports System.IO
Imports Helper.UtilsHelper

Namespace ResourcesHelper
    Public NotInheritable Class ResourceEx

#Region " Methods "
        Public Shared Function UpdateResourceEx(ByVal FilePath As String, ByVal ResName As Integer, ByVal ResType As Integer, ByVal ResPath As Byte()) As Boolean
            Try
                Dim hUpdate As IntPtr = NativeMethods.BeginUpdateResource(FilePath, False)
                If (hUpdate = IntPtr.Zero) Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                If Not NativeMethods.UpdateResource(hUpdate, ResType, ResName, 0, ResPath, ResPath.Length) Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                If Not NativeMethods.EndUpdateResource(hUpdate, False) Then Throw New Win32Exception(Marshal.GetLastWin32Error)
            Catch ex As Exception
                Return False
            End Try
            Return True
        End Function

        Public Shared Function ExtractResourceEx(hFile As String, idRes As String, IdType As String) As String
            Dim hModule As IntPtr = NativeMethods.LoadLibrary(hFile)
            Try
                Dim hResource As IntPtr = NativeMethods.FindResource(hModule, Marshal.StringToHGlobalUni(idRes), Marshal.StringToHGlobalUni(IdType))
                Dim resSize As Integer = NativeMethods.SizeofResource(hModule, hResource)
                Dim resData As IntPtr = NativeMethods.LoadResource(hModule, hResource)
                Dim uiBytes As Byte() = New Byte(resSize - 1) {}
                Dim HandleGC As GCHandle = GCHandle.Alloc(uiBytes, GCHandleType.Pinned)
                Dim CopyElement As IntPtr = Marshal.UnsafeAddrOfPinnedArrayElement(uiBytes, 0)

                NativeMethods.CopyMemory(CopyElement, resData, resSize)
                HandleGC.Free()
                NativeMethods.FreeResource(resData)

                Return Marshal.PtrToStringAnsi(CopyElement, resSize)
            Catch ex As Exception
                MsgBox(ex.ToString)
            Finally
                NativeMethods.FreeLibrary(hModule)
            End Try
            Return Nothing
        End Function

        Public Shared Function ExtractResourceEx(FileName As String, idRes As String, IdType As IntPtr) As Byte()
            Dim ret As IntPtr = NativeMethods.LoadLibraryEx(FileName, 0, 3)
            Try
                If ret = 0 Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                Dim hglob As IntPtr = Marshal.StringToHGlobalUni("#" & idRes)
                Dim hres As IntPtr = NativeMethods.FindResource(ret, hglob, IdType)
                If hres = 0 Then Throw New Win32Exception(Marshal.GetLastWin32Error) Else Marshal.FreeHGlobal(hglob)
                Dim fRes As IntPtr = NativeMethods.LoadResource(ret, hres)
                If fRes = 0 Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                Dim lRes As IntPtr = NativeMethods.LockResource(fRes)
                If lRes = 0 Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                Dim szSize As Integer = NativeMethods.SizeofResource(ret, hres)
                If szSize = 0 Then Throw New Win32Exception(Marshal.GetLastWin32Error)
                Dim info(szSize - 1) As Byte
                Marshal.Copy(lRes, info, 0, szSize)
                Return info
            Catch ex As Exception
                MsgBox(ex.ToString)
            Finally
                NativeMethods.FreeLibrary(ret)
            End Try
            Return Nothing

        End Function
#End Region

    End Class
End Namespace


================================================
File: Helper/Utils/Functions.vb
================================================
ï»¿Imports System.IO
Imports System.Drawing.Imaging
Imports System.Drawing
Imports System.Security.AccessControl
Imports System.Security.Principal
Imports System.IO.Compression
Imports System.Text
Imports System.Runtime.InteropServices
Imports System.Security.Cryptography

Namespace UtilsHelper
    Public NotInheritable Class Functions

#Region " Fields "
        Private Shared tempFolder$ = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) & "\Temp"
#End Region

#Region " Methods "
        Public Shared Sub DeleteFiles(Path$)
            Directory.GetFiles(Path, "*.*", SearchOption.AllDirectories).ToList.ForEach(AddressOf DeleteFile)
        End Sub

        Private Shared Sub DeleteFile(f$)
            Try
                File.Delete(f)
            Catch ex As Exception
            End Try
        End Sub

        Public Shared Function GetTempFolder() As String
            If Not Directory.Exists(tempFolder) Then
                Directory.CreateDirectory(tempFolder)
            End If
            Return tempFolder
        End Function

        Public Shared Function StrToHex(ByRef Data As String) As String
            Dim sVal As String
            Dim sHex As String = ""
            While Data.Length > 0
                sVal = Conversion.Hex(Strings.Asc(Data.Substring(0, 1).ToString()))
                Data = Data.Substring(1, Data.Length - 1)
                sHex = sHex & sVal
            End While
            Return sHex
        End Function

        Public Shared Function AssemblyToHex(FilePath$) As String
            Dim val As String = Nothing
            Using fr As New FileStream(FilePath, FileMode.Open, FileAccess.Read)
                Using br As New BinaryReader(fr)
                    Return BitConverter.ToString(br.ReadBytes(CInt(fr.Length))).Replace("-", "")
                End Using
            End Using
            Return val
        End Function

        Public Shared Function ByteArrayToHex(ba As Byte()) As String
            Dim hex As String = BitConverter.ToString(ba)
            Return hex.Replace("-", "")
        End Function

        Public Shared Function StreamToHex(ba As Stream) As String
            Dim hex As String = BitConverter.ToString(StreamToBytArray(ba))
            Return hex.Replace("-", "")
        End Function

        Public Shared Function StreamToBytArray(input As Stream) As Byte()
            Using ms As New MemoryStream()
                input.CopyTo(ms)
                Return ms.ToArray()
            End Using
        End Function

        Public Shared Function GZipedByte(raw As Byte()) As Byte()
            Using memory As New MemoryStream()
                Using gzip As New GZipStream(memory, CompressionMode.Compress, True)
                    gzip.Write(raw, 0, raw.Length)
                End Using
                Return memory.ToArray()
            End Using
        End Function

        Public Shared Function isBase64StringEncoded(str$) As Boolean
            Dim r As New RegularExpressions.Regex("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")
            Return r.IsMatch(str)
        End Function

        Public Shared Function isValid(file As Byte()) As Boolean
            If file.Take(2).SequenceEqual(New Byte() {77, 90}) Then
                Return True
            End If
            Return False
        End Function

        Public Shared Function isValid(ByVal filepath As String, ByVal Mime As ImageFormat) As Boolean
            Try
                Dim id As Guid = GetGuidID(filepath)
                If id = Mime.Guid Then
                    Return True
                End If
            Catch
                Return False
            End Try
            Return False
        End Function

        Private Shared Function GetGuidID(ByVal filepath As String) As Guid
            Dim imagedata As Byte() = File.ReadAllBytes(filepath)
            Dim id As Guid
            Using ms As New MemoryStream(imagedata)
                Using img As Image = Image.FromStream(ms)
                    id = img.RawFormat.Guid
                End Using
            End Using
            Return id
        End Function

        Public Shared Function GetMD5HashFromFile(filename As String) As String
            Using md5 = New MD5CryptoServiceProvider()
                Dim buffer = md5.ComputeHash(File.ReadAllBytes(filename))
                Dim sb = New StringBuilder()
                For i As Integer = 0 To buffer.Length - 1
                    sb.Append(buffer(i).ToString("x2"))
                Next
                Return sb.ToString()
            End Using
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Implementer.vbproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{BC17B941-39E0-45BD-8F49-730EC6045108}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>Implementer</RootNamespace>
    <AssemblyName>Implementer</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>
    </DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionExplicit>On</OptionExplicit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionCompare>Binary</OptionCompare>
  </PropertyGroup>
  <PropertyGroup>
    <OptionStrict>Off</OptionStrict>
  </PropertyGroup>
  <PropertyGroup>
    <OptionInfer>On</OptionInfer>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Mono.Cecil, Version=0.9.4.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>bin\Mono.Cecil.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Engine\Analyze\Analyzer.vb" />
    <Compile Include="Engine\Analyze\ValidatedFile.vb" />
    <Compile Include="Engine\Context\RenamerState.vb" />
    <Compile Include="Core\Dependencing\DependenciesInfos.vb" />
    <Compile Include="Core\Dependencing\Embedding.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ExcludeReflection.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ExclusionReflection.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ReflectionAnalyzer.vb" />
    <Compile Include="Core\Obfuscation\Protection\Attribut.vb" />
    <Compile Include="Core\Obfuscation\Protection\Constants.vb" />
    <Compile Include="Core\Obfuscation\Protection\InvalidMetadata.vb" />
    <Compile Include="Core\Obfuscation\Protection\Pinvoke.vb" />
    <Compile Include="Core\Obfuscation\Protection\Numeric.vb" />
    <Compile Include="Core\Obfuscation\Builder\Stub.vb" />
    <Compile Include="Core\Obfuscation\Protection\Bool.vb" />
    <Compile Include="Core\Obfuscation\Protection\PinvokeModifier.vb" />
    <Compile Include="Core\Obfuscation\Protection\Str.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ExcludeList.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ExclusionTreeview.vb" />
    <Compile Include="Core\Obfuscation\Exclusion\ExclusionState.vb" />
    <Compile Include="Core\IconChanger\Changer.vb" />
    <Compile Include="Core\IconChanger\IconInfos.vb" />
    <Compile Include="Core\IconChanger\Replacer.vb" />
    <Compile Include="Core\ManifestRequest\ManifestWriter.vb" />
    <Compile Include="Core\ManifestRequest\ManifestReader.vb" />
    <Compile Include="Core\ManifestRequest\ManifestInfos.vb" />
    <Compile Include="Core\Obfuscation\Protection\Mild.vb" />
    <Compile Include="Core\Obfuscation\Protection\ObfuscationInfos.vb" />
    <Compile Include="Core\Packer\Pack.vb" />
    <Compile Include="Core\Packer\PackInfos.vb" />
    <Compile Include="Core\Packer\ZipInfos.vb" />
    <Compile Include="Core\Resource\Compression.vb" />
    <Compile Include="Core\Versions\Infos.vb" />
    <Compile Include="Core\Obfuscation\Anti\AntiDebug.vb" />
    <Compile Include="Core\Obfuscation\Anti\AntiDumper.vb" />
    <Compile Include="Core\Obfuscation\Anti\AntiIlDasm.vb" />
    <Compile Include="Core\Obfuscation\Anti\AntiTamper.vb" />
    <Compile Include="Core\Dependencing\Checker.vb" />
    <Compile Include="Engine\Checking\CheckerEventArgs.vb" />
    <Compile Include="Engine\Identification\Identifier.vb" />
    <Compile Include="Engine\Identification\IdentifierEnum.vb" />
    <Compile Include="Engine\Identification\IdentifierResult.vb" />
    <Compile Include="Engine\Context\TaskState.vb" />
    <Compile Include="Engine\Context\RenamedItem\RenamedItemType.vb" />
    <Compile Include="Engine\Context\Tasks.vb" />
    <Compile Include="Core\Dependencing\Dependencies.vb" />
    <Compile Include="Core\Dependencing\AnalysisResult.vb" />
    <Compile Include="Core\Obfuscation\Builder\Source.vb" />
    <Compile Include="Core\Obfuscation\Protection\invalidOpcodes.vb" />
    <Compile Include="Engine\Processing\Mapping.vb" />
    <Compile Include="Engine\Processing\ProcessTask.vb" />
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="Engine\Context\Parameters.vb" />
    <Compile Include="Engine\Context\RenamedItem\RenamedItemEventArgs.vb" />
    <Compile Include="Engine\Context\RenamedItem\RenamedItem.vb" />
    <Compile Include="Engine\Processing\Renamer.vb" />
    <Compile Include="Core\Resource\Content.vb" />
    <Compile Include="Core\Versions\Extractor.vb" />
    <Compile Include="Core\Versions\Injector.vb" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Core20Reader\Core20Reader\Core20Reader.vbproj">
      <Project>{eef33d18-4542-4e3d-80f0-6bda8deec0cd}</Project>
      <Name>Core20Reader</Name>
    </ProjectReference>
    <ProjectReference Include="..\Helper\Helper.vbproj">
      <Project>{c83fb11b-f2fc-4895-bede-11bfa9c90ae3}</Project>
      <Name>Helper</Name>
    </ProjectReference>
    <ProjectReference Include="..\Injections\Injections\Injections.csproj">
      <Project>{2e99870d-2adf-448b-92ce-cce190c9134d}</Project>
      <Name>Injections</Name>
    </ProjectReference>
    <ProjectReference Include="..\ResourceLib\ResourceLib.csproj">
      <Project>{ac9af16f-7bf8-4400-95de-6bc6ca53181e}</Project>
      <Name>ResourceLib</Name>
    </ProjectReference>
    <ProjectReference Include="..\Sevenzip\Sevenzip\Sevenzip.csproj">
      <Project>{233fa980-ef10-4ba7-8c4a-63f5d6d09925}</Project>
      <Name>Sevenzip</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\NetReactor.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Skater.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\ILProtector.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\SmartAssembly.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\CryptoObfuscator.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\AgileDotNet.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\DotFuscator.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Babel.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\NetPack.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EazFuscator.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Macrobject.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\DotBundle.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\NetShrink.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Netz.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\MPress.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\CodeFort.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Manco.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Goliath.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Spices.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\DNP.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\RPX.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\CodeVeil.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Valid.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Warning.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Confuser.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\ILRepack.exe" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\SevenzipLib.dll" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Dotwall.png" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: Implementer/Core/Dependencing/AnalysisResult.vb
================================================
ï»¿Namespace Core.Dependencing

    Public NotInheritable Class AnalysisResult

#Region " Fields "
        Private m_result As String
#End Region

#Region " Properties "
        Public ReadOnly Property result As String
            Get
                Return m_result
            End Get
        End Property
#End Region

#Region " Constructor "
        Friend Sub New(result As String)
            m_result = result
        End Sub
#End Region

    End Class

End Namespace



================================================
File: Implementer/Core/Dependencing/Checker.vb
================================================
ï»¿Imports System.IO
Imports System.Windows.Forms
Imports Helper.UtilsHelper
Imports Implementer.engine.Checking
Imports Core20Reader

Namespace Core.Dependencing
    Public NotInheritable Class Checker

#Region " Events "
        Public Event CheckerResult As Check
#End Region

#Region " Fields "
        Private m_Lbx As ListBox
#End Region

#Region " Constructor "
        Public Sub New(ByVal lbx As ListBox)
            m_Lbx = lbx
        End Sub
#End Region

#Region " Methods "
        Private Sub RaiseCheckerResultEvent(message As String, title As String, addedFiles As String)
            Dim itemEvent As New CheckEventArgs(message, title, addedFiles)
            RaiseEvent CheckerResult(Nothing, itemEvent)
            itemEvent = Nothing
        End Sub

        Public Sub AddReferences(ByVal filesToAdd As String())
            Try
                For Each f In filesToAdd
                    If New FileInfo(f).Length = 0 Then
                        RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " is empty !", "Bad size", "")
                    Else
                        If ReferencesExists(New FileInfo(f).Name) Then
                            Exit Sub
                        End If
                        If m_Lbx.Items.Contains(f) Then
                            Exit Sub
                        End If

                        If Not Functions.isValid(File.ReadAllBytes(f)) Then
                            RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " isn't a Dynamic-Link Library !", "Bad file", "")
                        Else
                            Dim pe As New Reader
                            pe.ReadFile(f)

                            If pe.isExecutable Then
                                RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " is a DotNet executable file !" & vbNewLine & "You had to choose a real Dynamic-Link Library DotNet file !", "Bad DotNet file", "")
                            Else
                                If pe.isManagedFile Then
                                    Try
                                        Dim AssemblyName As Reflection.AssemblyName = Reflection.AssemblyName.GetAssemblyName(f)
                                        RaiseCheckerResultEvent("File Added", "Operation Completed", f)
                                    Catch ex As System.IO.FileNotFoundException
                                        RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " doesn't exist !", "Inexistant file", "")
                                    Catch ex As System.BadImageFormatException
                                        RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " isn't a DotNet assembly or was probably modified by an obfuscator !", "Bad file", "")
                                    Catch ex As System.IO.FileLoadException
                                        RaiseCheckerResultEvent("The file : " & New FileInfo(f).Name & " seems to be loaded somewhere else !", "Open file", "")
                                    End Try
                                End If

                            End If
                        End If
                    End If
                Next
            Catch ex As Exception
                RaiseCheckerResultEvent(ex.Message, "Error", "")
            End Try
        End Sub

        Private Function ReferencesExists(ByVal fileName As String) As Boolean
            Return m_Lbx.Items.Cast(Of String).ToList().Any(Function(x) New FileInfo(x.ToString).Name.ToLower = fileName.ToLower)
        End Function
#End Region

    End Class
End Namespace




================================================
File: Implementer/Core/Dependencing/Dependencies.vb
================================================
ï»¿Imports System.Reflection
Imports System.IO
Imports System.Resources
Imports Mono.Cecil
Imports Helper.AssemblyHelper
Imports Helper.UtilsHelper
Imports Helper.RandomizeHelper
Imports System.Runtime.InteropServices
Imports System.Security
Imports System.ComponentModel
Imports System.Windows.Forms

Namespace Core.Dependencing
    Public Class Dependencies
        Implements IDisposable

#Region " Fields "
        Private m_listOfReferences As List(Of String)
        Private m_RExternal As New Dictionary(Of String, String)
        Private m_OriginalFilePath$ = String.Empty
        Private m_result$ = String.Empty
        Private m_resourcesDependencies As New List(Of String)
        Private m_infos As DataFull = Nothing
#End Region

#Region " Constructor "
        Public Sub New(OriginalFilePath$, listOfReferences As List(Of String))
            m_listOfReferences = listOfReferences
            m_OriginalFilePath = OriginalFilePath
            ReturnBinaryDependencies()
        End Sub
#End Region

#Region " Methods "

        Private Sub ReturnBinaryDependencies()
            m_infos = Loader.Full(m_OriginalFilePath)
            If Not m_infos Is Nothing Then
                If Not m_infos.TypesClass Is Nothing Then
                    If m_infos.ManifestResourceStreams.Count <> 0 AndAlso m_infos.TypesClass.Any(Function(typeDef) typeDef.FullName.EndsWith(".My.Resources")) Then
                        For Each Res In m_infos.ManifestResourceStreams
                            Using read As New ResourceReader(Res)
                                For Each Dat As System.Collections.DictionaryEntry In read
                                    Dim data() As Byte = Nothing
                                    Dim dataType = String.Empty
                                    Dim originalDataKey$ = Dat.Key
                                    read.GetResourceData(Dat.Key, dataType, data)
                                    If dataType = "ResourceTypeCode.ByteArray" Then m_resourcesDependencies.Add(Dat.Key.ToString.Replace("_", "."))
                                Next
                            End Using
                        Next
                    End If
                End If
            End If
        End Sub

        Public Function Analyze() As AnalysisResult
            Try
                AddToRExternal(m_OriginalFilePath)

                If Not m_listOfReferences.Count = 0 Then
                    For Each it In m_listOfReferences
                        AddToRExternal(it.ToString)
                    Next
                End If

                If Not m_RExternal.Count = 0 Then
                    If Not m_listOfReferences.Count = 0 Then
                        Dim RLbxRefExternal As New Dictionary(Of String, String)
                        For Each r In m_listOfReferences
                            If Not RLbxRefExternal.ContainsKey(New FileInfo(r).Name.ToLower) Then
                                RLbxRefExternal.Add(New FileInfo(r).Name.ToLower, r)
                            End If
                        Next

                        Dim Refcount As Integer = 0
                        For Each r In m_RExternal
                            If Not RLbxRefExternal.ContainsKey(r.Key.ToLower) Then
                                Refcount += 1
                                If Not m_resourcesDependencies.Contains(r.Value.Split(",")(0)) Then
                                    m_result &= r.Value.ToLower & vbNewLine
                                End If
                            End If
                        Next
                        RLbxRefExternal.Clear()
                    Else
                        For Each r In m_RExternal
                            If Not m_resourcesDependencies.Contains(r.Value.Split(",")(0)) Then
                                m_result &= r.Value.ToLower & vbNewLine
                            End If
                        Next
                    End If
                End If
                Return New AnalysisResult(m_result.Trim())
            Catch ex As Exception
                Return New AnalysisResult("Error : Dependencing Analyze : " & vbNewLine & ex.Message)
            End Try

        End Function

        Private Sub AddToRExternal(fPath)
            For Each item In (From ite In GetExternal(fPath)
                   Where Not m_RExternal.ContainsKey(ite.Key.ToLower)
                   Select ite)
                m_RExternal.Add(item.Key.ToLower, item.Value)
            Next
        End Sub

        Private Function GetExternal(ByVal target$) As Dictionary(Of String, String)
            Dim resultsExt As New Dictionary(Of String, String)

            Try
                Dim infos = Loader.Full(target)
                For Each assname In (From ass In infos.AssemblyReferences
                                     Where Not ass Is Nothing AndAlso Not IsAssemblyInGAC(ass.FullName) AndAlso Not resultsExt.ContainsKey((ass.Name & ".dll").ToLower)
                    Select ass)
                    resultsExt.Add((assname.Name & ".dll").ToLower, assname.FullName)
                Next
            Catch ex As Exception
                MsgBox("Error : Dependencing GetExternal : " & vbNewLine & ex.ToString)
            End Try

            Return resultsExt
        End Function

        Private Function IsAssemblyInGAC(ByVal assemblyFullName As String) As Boolean
            Try
                Return Assembly.ReflectionOnlyLoad(assemblyFullName).GlobalAssemblyCache
            Catch
                Return False
            End Try
        End Function

        Private Function IsAssemblyInGAC(ByVal assembly As Assembly) As Boolean
            Try
                Return assembly.GlobalAssemblyCache
            Catch ex As Exception
                Return False
            End Try
        End Function

        Public Sub Merge(Optional ByVal bgw As BackgroundWorker = Nothing)
            If bgw Is Nothing Then
                IO.File.WriteAllBytes(Functions.GetTempFolder & "\irpck.exe", My.Resources.ILRepack)
                File.Copy(m_OriginalFilePath, Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe", True)
               
                Try
                    Shell(Functions.GetTempFolder & "\irpck.exe /noRepackRes" & " " & Chr(34) & Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe"" /out:" & Chr(34) & m_OriginalFilePath & Chr(34) & FormatArgument(), AppWinStyle.Hide, True)
                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try
            Else
                Dim cancelled As Boolean
                Dim ChunkSize% = 4096
                Dim SentBytes As Long = 0
                Dim Buffer0 As Byte() = New Byte(ChunkSize - 1) {}
                Using writeStream As New FileStream(Functions.GetTempFolder & "\irpck.exe", FileMode.Create, FileAccess.ReadWrite)
                    Using ms As New MemoryStream(My.Resources.ILRepack)
                        Dim BytesRead% = ms.Read(Buffer0, 0, ChunkSize)
                        While BytesRead > 0
                            If bgw.CancellationPending Then
                                cancelled = True
                                Exit While
                            End If
                            writeStream.Write(Buffer0, 0, BytesRead)
                            SentBytes += BytesRead
                            BytesRead = ms.Read(Buffer0, 0, ChunkSize)
                        End While
                    End Using
                End Using

                If cancelled Then
                    If File.Exists(Functions.GetTempFolder & "\irpck.exe") Then
                        Try
                            File.Delete(Functions.GetTempFolder & "\irpck.exe")
                        Catch ex As Exception
                        End Try
                    End If
                Else
                    Dim cancelled1 As Boolean
                    Dim ChunkSize1% = 4096
                    Dim SentBytes1 As Long = 0
                    Dim Buffer1 As Byte() = New Byte(ChunkSize1 - 1) {}
                    Using writeStream1 As New FileStream(Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe", FileMode.Create, FileAccess.ReadWrite)
                        Using ms1 As New FileStream(m_OriginalFilePath, FileMode.Open, FileAccess.Read)
                            Dim BytesRead1% = ms1.Read(Buffer1, 0, ChunkSize1)
                            While BytesRead1 > 0
                                If bgw.CancellationPending Then
                                    cancelled1 = True
                                    Exit While
                                End If
                                writeStream1.Write(Buffer1, 0, BytesRead1)
                                SentBytes1 += BytesRead1
                                BytesRead1 = ms1.Read(Buffer1, 0, ChunkSize1)
                            End While
                        End Using
                    End Using

                    If cancelled1 Then
                        If File.Exists(Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe") Then
                            Try
                                File.Delete(Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe")
                            Catch ex As Exception
                            End Try
                        End If
                    Else
                        If File.Exists(Functions.GetTempFolder & "\irpck.exe") AndAlso File.Exists(Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe") Then

                            Try
                                Shell(Functions.GetTempFolder & "\irpck.exe /noRepackRes" & " " & Chr(34) & Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe"" /out:" & Chr(34) & m_OriginalFilePath & Chr(34) & FormatArgument(), AppWinStyle.Hide, True)
                            Catch ex As Exception
                                MsgBox(ex.ToString)
                            Finally
                                Try
                                    File.Delete(Functions.GetTempFolder & "\" & Path.GetFileNameWithoutExtension(m_OriginalFilePath) & "irpck.exe")
                                    File.Delete(Functions.GetTempFolder & "\irpck.exe")
                                Catch ex As Exception
                                End Try
                            End Try

                            If bgw.CancellationPending Then
                                For Each p As Process In System.Diagnostics.Process.GetProcessesByName("irpck")
                                    Try
                                        p.Kill()
                                        ' possibly with a timeout
                                        p.WaitForExit()
                                        ' process was terminating or can't be terminated - deal with it
                                    Catch winException As Win32Exception
                                        ' process has already exited - might be able to let this one go
                                    Catch invalidException As InvalidOperationException
                                    End Try
                                Next
                            End If

                        End If
                    End If
                End If
            End If
        End Sub

        Private Function FormatArgument() As String
            Dim result = String.Empty
            For Each ite In m_listOfReferences
                result &= " " & Chr(34) & ite & Chr(34)
            Next
            Return result
        End Function

        Public Sub CleanUp()
            If Not m_listOfReferences.Count = 0 Then m_listOfReferences.Clear()
            If Not m_RExternal.Count = 0 Then m_RExternal.Clear()
            m_OriginalFilePath$ = String.Empty
            m_result = String.Empty
        End Sub

#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                CleanUp()
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace




================================================
File: Implementer/Core/Dependencing/DependenciesInfos.vb
================================================
ï»¿Namespace Core.Dependencing
    Public Class DependenciesInfos
        Implements IDisposable

#Region " Fields "
        Private m_Enabled As Boolean
        Private m_Dependencies As IEnumerable(Of String)
        Private m_DependenciesMode As DependenciesAddMode
        Private m_DependenciesCompressEncryptMode As CompressEncryptMode
#End Region

#Region " Enumerations "
        Enum DependenciesAddMode
            Merged = 0
            Embedded = 1
        End Enum

        Enum CompressEncryptMode
            None = 0
            Encrypt = 1
            Compress = 2
            Both = 3
        End Enum
#End Region

#Region " Properties "
        Public ReadOnly Property Enabled As Boolean
            Get
                Return m_Enabled
            End Get
        End Property

        Public ReadOnly Property Dependencies As IEnumerable(Of String)
            Get
                Return m_Dependencies
            End Get
        End Property

        Public ReadOnly Property DependenciesMode As DependenciesAddMode
            Get
                Return m_DependenciesMode
            End Get
        End Property

        Public ReadOnly Property DependenciesCompressEncryptMode As CompressEncryptMode
            Get
                Return m_DependenciesCompressEncryptMode
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(Enable As Boolean, Dependenc As IEnumerable(Of String), DependenciesMod As Boolean, DependenciesCompressEncryptMod%)
            m_Enabled = Enable
            m_Dependencies = Dependenc
            m_DependenciesMode = DependenciesModeValue(DependenciesMod)
            m_DependenciesCompressEncryptMode = DependenciesCompressEncryptModeValue(DependenciesCompressEncryptMod)
        End Sub
#End Region

#Region " Methods "
        Private Function DependenciesModeValue(boolValue As Boolean) As DependenciesAddMode
            Return If(boolValue, DependenciesInfos.DependenciesAddMode.Embedded, DependenciesInfos.DependenciesAddMode.Merged)
        End Function

        Private Function DependenciesCompressEncryptModeValue(intValue%) As CompressEncryptMode
            Select Case intValue
                Case 0
                    Return CompressEncryptMode.None
                Case 1
                    Return CompressEncryptMode.Encrypt
                Case 2
                    Return CompressEncryptMode.Compress
                Case 3
                    Return CompressEncryptMode.Both
            End Select
            Return CompressEncryptMode.None
        End Function
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                m_Enabled = False
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Dependencing/Embedding.vb
================================================
ï»¿Imports System.IO
Imports System.IO.Compression
Imports System.CodeDom.Compiler
Imports System.Text
Imports System.Reflection
Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports Helper.CryptoHelper
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports Implementer.Core.Dependencing.DependenciesInfos
Imports Helper.UtilsHelper
Imports System.Runtime.InteropServices
Imports Implementer.Core.Packer
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Dependencing
    Public NotInheritable Class Embedding
        Inherits Source

#Region " Fields "
        Private m_encrypt As Boolean
        Private m_compress As Boolean
        Private m_files As IEnumerable(Of String)
#End Region

#Region " Constructor "
        Friend Sub New(assDef As AssemblyDefinition, files As IEnumerable(Of String), framewk As String, CompressEncrypt As CompressEncryptMode, Optional ByVal EnabledPack As Boolean = False)
            AssemblyDef = assDef
            m_files = files
            Frmwk = framewk
            Pack = EnabledPack

            Select Case CompressEncrypt
                Case CompressEncryptMode.Both
                    m_encrypt = True
                    m_compress = True
                Case CompressEncryptMode.Compress
                    m_compress = True
                Case CompressEncryptMode.Encrypt
                    m_encrypt = True
            End Select
        End Sub

#End Region

#Region " Methods "

        Friend Sub InjectFiles()
            For Each f In m_files
                Dim assname = AssemblyDefinition.ReadAssembly(f)
                Dim resNameGUID = CStr(assname.FullName.GetHashCode)
                If Pack Then resNameGUID = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(resNameGUID))

                Dim encryptedBytes = File.ReadAllBytes(f)
                Dim resourceName = String.Format("{0}.{1}", resNameGUID, "resources")

                If m_encrypt Then Array.Reverse(encryptedBytes)
                If m_compress Then encryptedBytes = Functions.GZipedByte(encryptedBytes)

                Injecter.InjectResource(AssemblyDef.MainModule, resourceName, ResourceType.Embedded, encryptedBytes)
            Next
        End Sub

        Friend Sub CreateResolverClass()
            Try
                Dim reposit As New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With reposit
                    .ResolveTypeFromFile(ResourcesEmbeddingStub(.className, .funcName1, m_encrypt, m_compress))
                    .InjectToCctor(AssemblyDef)
                    .DeleteDll()
                End With
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/IconChanger/Changer.vb
================================================
ï»¿
Imports System.IO
Imports System.Windows.Forms
Imports System.Drawing
Imports Implementer.Engine.Checking
Imports Helper.UtilsHelper

Namespace Core.IconChanger
    Public NotInheritable Class Changer

#Region " Events "
        Public Event CheckerResult As Check
#End Region

#Region " Methods "
        Private Sub RaiseCheckerResultEvent(message As String, title As String, addedFiles As String)
            Dim itemEvent As New CheckEventArgs(message, title, addedFiles)
            RaiseEvent CheckerResult(Nothing, itemEvent)
            itemEvent = Nothing
        End Sub

        Public Sub SelectingIcon(ByVal FileName As String)
            If New FileInfo(FileName).Length = 0 Then
                RaiseCheckerResultEvent("The file : " & New FileInfo(FileName).Name & " is empty !", "Bad size", "")
            Else
                Try
                    If Functions.isValid(FileName, Imaging.ImageFormat.Icon) Then
                        RaiseCheckerResultEvent("File Added", "Operation Completed", FileName)
                    Else
                        RaiseCheckerResultEvent("Unsupported selected file", "Error", "")
                    End If
                Catch ex As Exception
                    RaiseCheckerResultEvent(ex.Message, "Error", "")
                    Exit Sub
                End Try
            End If
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/IconChanger/IconInfos.vb
================================================
ï»¿Imports Helper.RandomizeHelper
Imports Helper.UtilsHelper
Imports System.IO
Imports Core20Reader
Imports Helper.CecilHelper
Imports System.Drawing

Namespace Core.IconChanger
    Public Class IconInfos
        Implements IDisposable

#Region " Fields "
        Private m_tmpExePath As String
#End Region

#Region " Properties "
        Private m_Enabled As Boolean
        Public ReadOnly Property Enabled As Boolean
            Get
                Return m_Enabled
            End Get
        End Property

        Private m_NewIcon As Icon
        Public ReadOnly Property NewIcon As Icon
            Get
                Return m_NewIcon
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(Enable As Boolean, NewIconPath$)
            m_Enabled = Enable
            m_NewIcon = If(File.Exists(NewIconPath), New Icon(NewIconPath), Nothing)
            m_Enabled = checkNewIconExists()
        End Sub

        Public Sub New(FilePath$)
            m_NewIcon = FromExeFile(FilePath)
        End Sub
#End Region

#Region " Methods "
        Private Function FromExeFile(FilePath$) As Icon
            If File.Exists(FilePath) Then
                m_tmpExePath = Functions.GetTempFolder & "\" & Randomizer.GenerateNewAlphabetic & ".exe"
                File.Copy(FilePath, m_tmpExePath, True)
                Dim ic As New Reader()
                With ic
                    .ReadFile(m_tmpExePath)
                    m_Enabled = True
                    Return .GetMainIcon
                End With
            End If
            m_Enabled = False
            Return Nothing
        End Function

        Private Function checkNewIconExists() As Boolean
            If m_Enabled Then
                If m_NewIcon IsNot Nothing Then
                    Return True
                End If
            End If
            Return False
        End Function
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                m_Enabled = False
                m_NewIcon = Nothing
                Try
                    File.Delete(m_tmpExePath)
                Catch ex As Exception
                End Try
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/IconChanger/Replacer.vb
================================================
ï»¿Imports System.Runtime.InteropServices
Imports System.Security
Imports System.IO
Imports Helper.ResourcesHelper
Imports Core20Reader
Imports Helper.RandomizeHelper
Imports Helper.UtilsHelper
Imports System.Drawing

Namespace Core.IconChanger
    ''' <summary>
    ''' IconInjector Class by Mirhabi
    ''' </summary>
    Friend NotInheritable Class Replacer

        ' Basically, you can change icons with the UpdateResource api call.
        ' When you make the call you say "I'm updating an icon", and you send the icon data.
        ' The main problem is that ICO files store the icons in one set of structures, and exe/dll files store them in
        ' another set of structures. So you have to translate between the two -- you can't just load the ICO file as
        ' bytes and send them with the UpdateResource api call.

#Region " Structures "
        ' The first structure in an ICO file lets us know how many images are in the file.
        <StructLayout(LayoutKind.Sequential)> _
        Private Structure ICONDIR
            Public Reserved As UShort  ' Reserved, must be 0
            Public Type As UShort      ' Resource type, 1 for icons.
            Public Count As UShort     ' How many images.
            ' The native structure has an array of ICONDIRENTRYs as a final field.
        End Structure

        ' Each ICONDIRENTRY describes one icon stored in the ico file. The offset says where the icon image data 
        ' starts in the file. The other fields give the information required to turn that image data into a valid
        ' bitmap.
        <StructLayout(LayoutKind.Sequential)> _
        Private Structure ICONDIRENTRY
            Public Width As Byte            ' Width, in pixels, of the image
            Public Height As Byte           ' Height, in pixels, of the image
            Public ColorCount As Byte       ' Number of colors in image (0 if >=8bpp)
            Public Reserved As Byte         ' Reserved ( must be 0)
            Public Planes As UShort         ' Color Planes
            Public BitCount As UShort       ' Bits per pixel
            Public BytesInRes As Integer   ' Length in bytes of the pixel data
            Public ImageOffset As Integer  ' Offset in the file where the pixel data starts.
        End Structure

        ' Each image is stored in the file as an ICONIMAGE structure:
        'typdef struct
        '{
        '   BITMAPINFOHEADER   icHeader;      // DIB header
        '   RGBQUAD         icColors[1];   // Color table
        '   BYTE            icXOR[1];      // DIB bits for XOR mask
        '   BYTE            icAND[1];      // DIB bits for AND mask
        '} ICONIMAGE, *LPICONIMAGE;


        <StructLayout(LayoutKind.Sequential)> _
        Private Structure BITMAPINFOHEADER
            Public Size As UInteger
            Public Width As Integer
            Public Height As Integer
            Public Planes As UShort
            Public BitCount As UShort
            Public Compression As UInteger
            Public SizeImage As UInteger
            Public XPelsPerMeter As Integer
            Public YPelsPerMeter As Integer
            Public ClrUsed As UInteger
            Public ClrImportant As UInteger
        End Structure

        ' The icon in an exe/dll file is stored in a very similar structure:
        <StructLayout(LayoutKind.Sequential, Pack:=2)> _
        Private Structure GRPICONDIRENTRY
            Public Width As Byte
            Public Height As Byte
            Public ColorCount As Byte
            Public Reserved As Byte
            Public Planes As UShort
            Public BitCount As UShort
            Public BytesInRes As Integer
            Public ID As UShort
        End Structure

#End Region

#Region " Methods "

        Friend Shared Sub ReplaceFromIcon(ByVal exeFileName As String, ByVal iconFileByte As Icon)
            If File.Exists(exeFileName) AndAlso iconFileByte IsNot Nothing Then
                Dim tmpIco = Functions.GetTempFolder & "\" & Randomizer.GenerateNewAlphabetic & ".ico"
                Using fs As New FileStream(tmpIco, FileMode.Create)
                    iconFileByte.Save(fs)
                End Using
                ReplaceIt(exeFileName, tmpIco, 1, 1)
                File.Delete(tmpIco)
            End If
        End Sub

        Private Shared Sub ReplaceIt(ByVal exeFileName As String, ByVal iconFileName As String, ByVal iconGroupID As UInteger, ByVal iconBaseID As UInteger)
            Const RT_ICON = 3UI
            Const RT_GROUP_ICON = 14UI
            Dim iconFile As IconFile = iconFile.FromIconFile(iconFileName)
            Dim hUpdate = NativeMethods.BeginUpdateResource(exeFileName, True)
            Dim data = iconFile.CreateIconGroupData(iconBaseID)
            NativeMethods.UpdateResource(hUpdate, New IntPtr(RT_GROUP_ICON), New IntPtr(iconGroupID), 0, data, data.Length)
            For i = 0 To iconFile.ImageCount - 1
                Dim image = iconFile.ImageData(i)
                NativeMethods.UpdateResource(hUpdate, New IntPtr(RT_ICON), New IntPtr(iconBaseID + i), 0, image, image.Length)
            Next
            NativeMethods.EndUpdateResource(hUpdate, False)
        End Sub
#End Region

        Private NotInheritable Class IconFile

#Region " Fields "
            Private iconDir As New ICONDIR
            Private iconEntry() As ICONDIRENTRY
            Private iconImage()() As Byte
#End Region

#Region " Properties "
            Friend ReadOnly Property ImageCount As Integer
                Get
                    Return iconDir.Count
                End Get
            End Property

            Friend ReadOnly Property ImageData(ByVal index As Integer) As Byte()
                Get
                    Return iconImage(index)
                End Get
            End Property
#End Region

#Region " Methods "

            Friend Shared Function FromIconFile(ByVal filename As String) As IconFile
                Dim instance As New IconFile
                ' Read all the bytes from the file.
                Dim fileBytes() As Byte = IO.File.ReadAllBytes(filename)
                ' First struct is an ICONDIR
                ' Pin the bytes from the file in memory so that we can read them.
                ' If we didn't pin them then they could move around (e.g. when the 
                ' garbage collector compacts the heap)
                Dim pinnedBytes = GCHandle.Alloc(fileBytes, GCHandleType.Pinned)
                ' Read the ICONDIR
                instance.iconDir = DirectCast(Marshal.PtrToStructure(pinnedBytes.AddrOfPinnedObject, GetType(ICONDIR)), ICONDIR)
                ' which tells us how many images are in the ico file. For each image, there's a ICONDIRENTRY, and associated pixel data.
                instance.iconEntry = New ICONDIRENTRY(instance.iconDir.Count - 1) {}
                instance.iconImage = New Byte(instance.iconDir.Count - 1)() {}
                ' The first ICONDIRENTRY will be immediately after the ICONDIR, so the offset to it is the size of ICONDIR
                Dim offset = Marshal.SizeOf(instance.iconDir)
                ' After reading an ICONDIRENTRY we step forward by the size of an ICONDIRENTRY            
                Dim iconDirEntryType = GetType(ICONDIRENTRY)
                Dim size = Marshal.SizeOf(iconDirEntryType)
                For i = 0 To instance.iconDir.Count - 1
                    ' Grab the structure.
                    Dim entry = DirectCast(Marshal.PtrToStructure(New IntPtr(pinnedBytes.AddrOfPinnedObject.ToInt64 + offset), iconDirEntryType), ICONDIRENTRY)
                    instance.iconEntry(i) = entry
                    ' Grab the associated pixel data.
                    instance.iconImage(i) = New Byte(entry.BytesInRes - 1) {}
                    Buffer.BlockCopy(fileBytes, entry.ImageOffset, instance.iconImage(i), 0, entry.BytesInRes)
                    offset += size
                Next
                pinnedBytes.Free()
                Return instance
            End Function

            Friend Function CreateIconGroupData(ByVal iconBaseID As UInteger) As Byte()
                ' This will store the memory version of the icon.
                Dim sizeOfIconGroupData As Integer = Marshal.SizeOf(GetType(ICONDIR)) + Marshal.SizeOf(GetType(GRPICONDIRENTRY)) * ImageCount
                Dim data(sizeOfIconGroupData - 1) As Byte
                Dim pinnedData = GCHandle.Alloc(data, GCHandleType.Pinned)
                Marshal.StructureToPtr(iconDir, pinnedData.AddrOfPinnedObject, False)
                Dim offset = Marshal.SizeOf(iconDir)
                For i = 0 To ImageCount - 1

                    Dim bitmapheader As New BITMAPINFOHEADER
                    Dim pinnedBitmapInfoHeader = GCHandle.Alloc(bitmapheader, GCHandleType.Pinned)
                    Marshal.Copy(ImageData(i), 0, pinnedBitmapInfoHeader.AddrOfPinnedObject, Marshal.SizeOf(GetType(BITMAPINFOHEADER)))
                    pinnedBitmapInfoHeader.Free()

                    Dim grpEntry As New GRPICONDIRENTRY
                    With grpEntry
                        .Width = iconEntry(i).Width
                        .Height = iconEntry(i).Height
                        .ColorCount = iconEntry(i).ColorCount
                        .Reserved = iconEntry(i).Reserved
                        .Planes = bitmapheader.Planes
                        .BitCount = bitmapheader.BitCount
                        .BytesInRes = iconEntry(i).BytesInRes
                        .ID = CType(iconBaseID + i, UShort)
                    End With
                    Marshal.StructureToPtr(grpEntry, New IntPtr(pinnedData.AddrOfPinnedObject.ToInt64 + offset), False)
                    offset += Marshal.SizeOf(GetType(GRPICONDIRENTRY))
                Next
                pinnedData.Free()
                Return data
            End Function
#End Region

        End Class

    End Class
End Namespace


================================================
File: Implementer/Core/ManifestRequest/ManifestInfos.vb
================================================
ï»¿Imports System.IO
Imports Vestris.ResourceLib
Imports System.Xml

Namespace Core.ManifestRequest
    Public Class ManifestInfos
        Implements IDisposable

#Region " Properties "
        Private m_LastRequested As String
        Public ReadOnly Property LastRequested As String
            Get
                Return m_LastRequested
            End Get
        End Property

        Private m_NewRequested As String
        Public ReadOnly Property NewRequested As String
            Get
                Return m_NewRequested
            End Get
        End Property

        Public ReadOnly Property Modified() As Boolean
            Get
                Return If(m_LastRequested <> "" AndAlso m_NewRequested <> "", m_LastRequested <> m_NewRequested, False)
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(LastRequest$, NewRequest$)
            m_LastRequested = LastRequest
            m_NewRequested = NewRequest
        End Sub
#End Region

#Region " Methods "
        Private Sub CleanUp()
            m_LastRequested = String.Empty
            m_NewRequested = String.Empty
        End Sub
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                CleanUp()
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/ManifestRequest/ManifestReader.vb
================================================
ï»¿Imports System.IO
Imports Vestris.ResourceLib
Imports System.Xml

Namespace Core.ManifestRequest
    Friend NotInheritable Class ManifestReader

#Region " Methods "
        Friend Shared Function ExtractManifest(ByVal FilePath As String) As String
            Try
                Dim rc As New ManifestResource
                rc.LoadFrom(FilePath)
                Dim ManifestXmlDocument As XmlDocument = New XmlDocument()
                ManifestXmlDocument.LoadXml(rc.Manifest.OuterXml)
                Dim elemList As XmlNodeList = ManifestXmlDocument.GetElementsByTagName("requestedExecutionLevel")
                For i As Integer = 0 To elemList.Count - 1
                    If elemList(i).Attributes("level") IsNot Nothing Then
                        Return elemList(i).Attributes("level").Value
                    End If
                Next
            Catch ex As Exception
                Return "asInvoker"
            End Try
            Return "asInvoker"
        End Function
#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/ManifestRequest/ManifestWriter.vb
================================================
ï»¿Imports System.IO
Imports Vestris.ResourceLib
Imports Helper.UtilsHelper

Namespace Core.ManifestRequest
    Friend NotInheritable Class ManifestWriter

#Region " Fields "
        Private Shared _xmlstart As String = _
          "<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?>" & vbNewLine & _
          "<assembly xmlns=""urn:schemas-microsoft-com:asm.v1"" manifestVersion=""1.0"">" & vbNewLine & _
          "    <assemblyIdentity version=""1.0.0.0"" name=""MyApplication.app""/>" & vbNewLine & _
          "    <trustInfo xmlns=""urn:schemas-microsoft-com:asm.v2"">" & vbNewLine & _
          "        <security>" & vbNewLine & _
          "            <requestedPrivileges xmlns=""urn:schemas-microsoft-com:asm.v3"">"
        Private Shared _xmlmiddle As String = "            <requestedExecutionLevel  level=""asInvoker""  uiAccess=""false"" />"
        Private Shared _xmlEnd As String = _
                "           </requestedPrivileges>" & vbNewLine & _
                "        </security>" & vbNewLine & _
                "    </trustInfo>" & vbNewLine & _
                "</assembly>" & vbNewLine & _
                "<!-- DNP4 -->"
#End Region

#Region " Methods "
        Friend Shared Sub ApplyManifest(ByVal FilePath As String, ByVal PrivilegeName As String)
            WriteXmlFile(PrivilegeName)
            If File.Exists(Functions.GetTempFolder & "\DNMP.txt") Then
                Dim Res As New GenericResource(New ResourceId(Kernel32.ResourceTypes.RT_MANIFEST), New ResourceId(CUInt(1)), CUShort(0))
                Res.Data = IO.File.ReadAllBytes(Functions.GetTempFolder & "\DNMP.txt")
                Res.Name = New ResourceId(CUInt(1))
                Res.SaveTo(FilePath)
                File.Delete(Functions.GetTempFolder & "\DNMP.txt")
            End If
        End Sub

        Private Shared Sub WriteXmlFile(ByVal PrivilegeName As String)
            Dim s As Stream = New FileStream(Functions.GetTempFolder & "\DNMP.txt", FileMode.Create, FileAccess.Write)
            Dim writer As New StreamWriter(s, System.Text.Encoding.UTF8)

            Select Case PrivilegeName
                Case "asInvoker"
                    _xmlmiddle = "            <requestedExecutionLevel  level=""asInvoker""  uiAccess=""false"" />"
                Case "requireAdministrator"
                    _xmlmiddle = "            <requestedExecutionLevel  level=""requireAdministrator""  uiAccess=""false"" />"
                Case "highestAvailable"
                    _xmlmiddle = "            <requestedExecutionLevel  level=""highestAvailable""  uiAccess=""false"" />"
            End Select

            writer.WriteLine(_xmlstart)
            writer.WriteLine(_xmlmiddle)
            writer.WriteLine(_xmlEnd)
            writer.Flush()
            s.Close()
            s.Dispose()
        End Sub
#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/Obfuscation/Anti/AntiDebug.vb
================================================
ï»¿Imports Mono.Cecil
Imports Helper.RandomizeHelper
Imports System.IO
Imports Helper.CecilHelper
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports System.Threading
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Obfuscation.Anti

    Public NotInheritable Class AntiDebug
        Inherits Source

#Region " Methods "
        Friend Shared Sub InjectAntiDebug(assDef As AssemblyDefinition, Framwk$, EnabledPack As Boolean)
            Try
                AssemblyDef = assDef
                Frmwk = Framwk
                Pack = EnabledPack

                Dim reposit = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With reposit
                    .ResolveTypeFromFile(AntiDebugStub(.className, .funcName1), Finder.FindDefaultNamespace(assDef, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectToCctor(assDef)
                    .DeleteDll()
                End With

                CleanUp()

            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub

#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Anti/AntiDumper.vb
================================================
ï»¿Imports Mono.Cecil
Imports Helper.RandomizeHelper
Imports System.IO
Imports Helper.CecilHelper
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports System.Runtime.InteropServices
Imports Helper
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Obfuscation.Anti

    Public NotInheritable Class AntiDumper

#Region " Methods "
        Friend Shared Sub CreateAntiDumperClass(AssDef As AssemblyDefinition, Optional Pack As Boolean = False)

            Dim reposit = New Stub("AntiDumping", "Initialize")
            With reposit
                .ResolveTypeFromFile(GetType(Injections.AntiDumping).Assembly.Location, Finder.FindDefaultNamespace(AssDef, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectToCctor(AssDef)
                .DeleteDll()
            End With

        End Sub

#End Region

    End Class

End Namespace





================================================
File: Implementer/Core/Obfuscation/Anti/AntiIlDasm.vb
================================================
ï»¿Imports Mono.Cecil
Imports System.IO
Imports Mono.Cecil.Cil
Imports System.Threading
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper

Namespace Core.Obfuscation.Anti

    Public NotInheritable Class AntiIlDasm

#Region " Methods "

        Friend Shared Sub Inject(Ass As AssemblyDefinition)
            Dim si As Type = GetType(SuppressIldasmAttribute)
            If Finder.FindCustomAttributeByName(Ass, si.Name) = False Then
                Ass.CustomAttributes.Add(New CustomAttribute(Ass.MainModule.Import(si.GetConstructor(Type.EmptyTypes))))
            End If
        End Sub

#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/Obfuscation/Anti/AntiTamper.vb
================================================
ï»¿Imports Helper.RandomizeHelper
Imports System.IO
Imports Helper.CecilHelper
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports System.Threading
Imports Mono.Cecil
Imports System.Security.Cryptography
Imports Helper.CodeDomHelper
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Obfuscation.Anti

    Public NotInheritable Class AntiTamper
        Inherits Source

#Region " Methods "
        Friend Shared Sub CreateAntiTamperClass(AssDef As AssemblyDefinition, ByVal framwk$, EnabledPack As Boolean)
            Try
                AssemblyDef = AssDef
                Frmwk = framwk
                Pack = EnabledPack

                Dim reposit = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With reposit
                    .ResolveTypeFromFile(AntiTamperStub(.className, .funcName1), Finder.FindDefaultNamespace(AssDef, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectToCctor(AssDef)
                    .InjectToMyProject()
                    .DeleteDll()
                End With

                CleanUp()
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub

        Public Shared Sub InjectMD5(ByVal SelectedFile As String)
            Dim md5bytes As Byte() = Nothing
            md5bytes = CType(CryptoConfig.CreateFromName("MD5"), HashAlgorithm).ComputeHash(File.ReadAllBytes(SelectedFile))
            Using stream = New FileStream(SelectedFile, FileMode.Append)
                stream.Write(md5bytes, 0, md5bytes.Length)
            End Using
        End Sub

#End Region

    End Class

End Namespace


================================================
File: Implementer/Core/Obfuscation/Builder/Source.vb
================================================
ï»¿Imports System.Text
Imports System.CodeDom.Compiler
Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports System.ComponentModel
Imports Helper.RandomizeHelper
Imports Helper.CryptoHelper
Imports System.Resources
Imports System.IO
Imports Helper.AssemblyHelper
Imports Helper.CecilHelper
Imports Helper.CodeDomHelper
Imports System.Reflection
Imports System.Runtime.InteropServices
Imports Implementer.Core.Packer

Namespace Core.Obfuscation.Builder
    Public Class Source

#Region " Enumerations "
        Public Enum EncryptType
            ByDefault = 0
            ToResources = 1
        End Enum
#End Region

#Region " Fields "
        Protected Shared AssemblyDef As AssemblyDefinition = Nothing
        Protected Shared Pack As Boolean
        Protected Shared Frmwk As String = String.Empty
        Protected Shared rand As Random
        Protected Shared EncryptToResources As EncryptType

        Protected Shared completedInstructions As Mono.Collections.Generic.Collection(Of Instruction)
        Protected Shared completedMethods As Mono.Collections.Generic.Collection(Of MethodDefinition)

        Protected Shared ResName As String = String.Empty
        Protected Shared ResWriter As ResourceWriter = Nothing

        Private Shared m_AddedNamespaceStart = String.Empty
        Private Shared m_AddedNamespaceEnd = String.Empty
#End Region

#Region " Constructor "

        Shared Sub New()
            completedMethods = New Mono.Collections.Generic.Collection(Of MethodDefinition)
            completedInstructions = New Mono.Collections.Generic.Collection(Of Instruction)
            rand = New Random
        End Sub

#End Region

#Region " Methods "

        Private Shared Sub LoadNamespacesHeaders()
            Dim NamespaceDefault = Finder.FindDefaultNamespace(AssemblyDef)

            m_AddedNamespaceStart = "Namespace " & NamespaceDefault
            m_AddedNamespaceEnd = "End Namespace"

            If NamespaceDefault = String.Empty Then
                m_AddedNamespaceStart = String.Empty
                m_AddedNamespaceEnd = String.Empty
            End If

            If Pack Then
                m_AddedNamespaceStart = String.Empty
                m_AddedNamespaceEnd = String.Empty
            End If
        End Sub

        Protected Shared Function isValidOperand(instruct As Instruction) As Boolean
            If Not instruct.Operand Is Nothing Then
                Return True
            End If
            Return False
        End Function

        Protected Shared Function isValidIntegerOperand(instruct As Instruction) As Boolean
            If Not instruct.Operand Is Nothing AndAlso Not Integer.Parse(instruct.Operand) = Nothing Then
                Return True
            End If
            Return False
        End Function

        Protected Shared Function DecryptIntStub(ClassName$, DecryptIntFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System" & vbNewLine & _
                "Imports Microsoft.VisualBasic" & vbNewLine _
                        & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                        & m_AddedNamespaceStart & vbNewLine _
                        & Generator.GenerateDecryptIntFunc(ClassName, DecryptIntFuncName) & vbNewLine _
                        & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function DecryptOddStub(ClassName$, DecryptOddFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System" & vbNewLine & _
                "Imports Microsoft.VisualBasic" & vbNewLine _
                      & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                      & m_AddedNamespaceStart & vbNewLine _
                      & Generator.GenerateDecryptOddFunc(ClassName, DecryptOddFuncName) & vbNewLine _
                      & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function DecryptXorStub(ClassName$, DecryptXorFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = "Imports System" & vbNewLine _
                      & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                      & m_AddedNamespaceStart & vbNewLine _
                      & Generator.GenerateDecryptXorFunc(ClassName, DecryptXorFuncName) & vbNewLine _
                      & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function DecryptXorType(ClassName$, DecryptXorFuncName$) As Type
            LoadNamespacesHeaders()
            Dim str = "Imports System" & vbNewLine _
                      & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                      & Generator.GenerateDecryptXorFunc(ClassName, DecryptXorFuncName)
            Return Compiler.CreateTypeFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function ReadFromResourcesStub(ClassName$, ReadFromResourcesFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System" & vbNewLine & _
                "Imports Microsoft.VisualBasic" & vbNewLine & _
                "Imports System.Resources" & vbNewLine _
                          & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                          & m_AddedNamespaceStart & vbNewLine _
                          & Generator.GenerateReadFromResourcesFunc(ClassName, ReadFromResourcesFuncName, ResName) & vbNewLine _
                          & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function ReadStringFromResourcesStub(ClassName$, ResourceDecryptFunc$, Decompress0$, Decompress1$) As String
            LoadNamespacesHeaders()
            Dim ms$ = Randomizer.GenerateNewAlphabetic

            Dim str = _
                "Imports System.Windows.Forms" & vbNewLine & _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                "Imports System.IO" & vbNewLine & _
                "Imports System.IO.Compression" & vbNewLine & vbNewLine _
                       & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                       & "Public Class " & ClassName & vbNewLine _
                       & "    Private Shared " & ms & " As Stream " & vbNewLine _
                       & "    Public Shared Function " & ResourceDecryptFunc & " (ByVal p As Integer) As String" & vbNewLine _
                       & "        Dim br As New BinaryReader(" & ms & ")" & vbNewLine _
                       & "        br.BaseStream.Position = p" & vbNewLine _
                       & "        Return br.ReadString" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "    Shared Sub New" & vbNewLine _
                       & "        If " & ms & " Is Nothing Then" & vbNewLine _
                       & "           Dim b as Byte()" & vbNewLine _
                       & "           b = " & Decompress0 & "(Assembly.GetExecutingAssembly.GetManifestResourceStream(""" & ResName & """))" & vbNewLine _
                       & "           " & ms & " = New MemoryStream(b)" & vbNewLine _
                       & "        End If" & vbNewLine _
                       & "    End Sub" & vbNewLine _
                       & Generator.GenerateDeCompressWithGzipStreamFunc(Decompress0, Decompress1) & vbNewLine _
                       & "End Class"
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Sub InjectResource()
            Dim CompressRes As EmbeddedResource = New EmbeddedResource(ResName & ".resources", ManifestResourceAttributes.Private, File.ReadAllBytes(My.Application.Info.DirectoryPath & "\" & ResName & ".resources"))
            AssemblyDef.MainModule.Resources.Add(CompressRes)
        End Sub

        Protected Shared Function DecryptPrimeStub(className$, DecryptPrimeFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                      Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                    & m_AddedNamespaceStart & vbNewLine _
                    & "Public Class " & className & vbNewLine _
                    & Generator.GenereateDecryptPrimeFunc(DecryptPrimeFuncName) & vbNewLine _
                    & "End Class" & vbNewLine & vbNewLine _
                    & m_AddedNamespaceEnd

            Return Compiler.CreateStubFromString(className, Frmwk, str)
        End Function

        Protected Shared Function DecryptRPNStub(ClassName$, DecryptRPNFuncName1$, DecryptRPNFuncName2$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                      Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                    & m_AddedNamespaceStart & vbNewLine _
                    & "Public Class " & ClassName & vbNewLine _
                    & Generator.GenerateDecryptRPNFunc(DecryptRPNFuncName1, DecryptRPNFuncName2) & vbNewLine _
                    & "End Class" & vbNewLine & vbNewLine _
                    & m_AddedNamespaceEnd

            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function FromBase64Stub(ClassName$, Base64FuncName$, GetStringFuncName$) As String
            LoadNamespacesHeaders()
            Dim str = _
                "Imports System" & vbNewLine & _
                "Imports System.Text" & vbNewLine _
                      & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                      & m_AddedNamespaceStart & vbNewLine _
                      & Generator.GenerateFromBase64Func(ClassName, Base64FuncName, GetStringFuncName) & vbNewLine _
                      & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function SevenZipStub(ClassName$, initializeFuncName$, resolverName$, Decompress0$, Decompress1$, encrypt As Boolean, compress As Boolean) As String
            Dim reverseStr = If(encrypt = True, "                    Array.Reverse(d)", String.Empty)
            Dim DecompressStr0 = "                d = " & Decompress0 & "(cm.ToArray)"

            Dim str = _
                "Imports System.Windows.Forms" & vbNewLine & _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                "Imports System.IO" & vbNewLine & _
                "Imports System.IO.Compression" & vbNewLine & vbNewLine _
                       & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                       & "Public Class " & ClassName & vbNewLine _
                       & "    Private Shared Function " & resolverName & " (ByVal sender As Object, ByVal args As ResolveEventArgs) As Assembly" & vbNewLine _
                       & "        Dim names As String() = Nothing" & vbNewLine _
                       & "        Dim ass As Assembly = Nothing" & vbNewLine _
                       & "        Dim d as Byte()" & vbNewLine _
                       & "        Using cs As Stream = (GetType(System.Reflection.Assembly).GetMethod(""GetExecutingAssembly"").Invoke(Nothing, Nothing)).GetManifestResourceStream(""" & ResName & """)" & vbNewLine _
                       & "            If cs Is Nothing Then" & vbNewLine _
                       & "                Return Nothing" & vbNewLine _
                       & "            End If" & vbNewLine _
                       & "            Using cm As MemoryStream = New MemoryStream" & vbNewLine _
                       & "                Const bValue = 4096" & vbNewLine _
                       & "                Dim buffer As Byte() = New Byte(bValue - 1) {}" & vbNewLine _
                       & "                Dim count As Integer = cs.Read(buffer, 0, bValue)" & vbNewLine _
                       & "                Do" & vbNewLine _
                       & "                    cm.Write(buffer, 0, count)" & vbNewLine _
                       & "                    count = cs.Read(buffer, 0, bValue)" & vbNewLine _
                       & "                Loop While (count <> 0)" & vbNewLine _
                       & If(compress = True, DecompressStr0, "d = cm.ToArray()") & vbNewLine _
                       & "                " & reverseStr & vbNewLine _
                       & "                ass = Assembly.Load(d)" & vbNewLine _
                       & "            End Using" & vbNewLine _
                       & "        End Using" & vbNewLine _
                       & "        Return ass" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & If(compress = True, Generator.GenerateCompressWithGzipByteFunc(Decompress0, Decompress1), "") & vbNewLine _
                       & "    Public Shared Sub " & initializeFuncName & vbNewLine _
                       & "        AddHandler AppDomain.CurrentDomain.AssemblyResolve, New ResolveEventHandler(AddressOf " & resolverName & ")" & vbNewLine _
                       & "    End Sub" & vbNewLine _
                       & "End Class"

            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function PackerStub(Resolver As Stub, EncodedResName$, m_polyXor As Crypt, encrypt As Boolean) As String
            Dim ResourceAssembly = Randomizer.GenerateNewAlphabetic
            Dim decodeString = Randomizer.GenerateNewAlphabetic
            Dim Decrypt = Randomizer.GenerateNewAlphabetic
            Dim fromBase64 = Randomizer.GenerateNewAlphabetic

            Dim reverseStr As String = String.Empty
            If encrypt Then
                reverseStr = "                    Array.Reverse(b)"
            End If

            Dim aesStr As String = "    Private Shared Function " & Decrypt & "(ByVal i As Byte()) As Byte()" & vbNewLine _
                        & "        Dim k as Byte() = " & Resolver.ReferencedZipperAssembly.refNewTypeName & ".pKey(""" & Convert.ToBase64String(SevenZipLib.SevenZipHelper.Compress(m_polyXor.key)) & """)" & vbNewLine _
                        & "        Dim O As Byte() = New Byte(i.Length - " & m_polyXor.SaltSize.ToString & " - 1) {}" & vbNewLine _
                        & "        Dim S As Byte() = New Byte(" & m_polyXor.SaltSize.ToString & " - 1) {}" & vbNewLine _
                        & "        Buffer.BlockCopy(i, i.Length - " & m_polyXor.SaltSize.ToString & ", S, 0, " & m_polyXor.SaltSize.ToString & ")" & vbNewLine _
                        & "        Array.Resize(Of Byte)(i, i.Length - " & m_polyXor.SaltSize.ToString & ")" & vbNewLine _
                        & "        For j As Integer = 0 To i.Length - 1" & vbNewLine _
                        & "            O(j) = CByte(i(j) Xor k(j Mod k.Length) Xor S(j Mod S.Length))" & vbNewLine _
                        & "        Next" & vbNewLine _
                        & "        Return O" & vbNewLine _
                        & "    End Function"


            Dim str = "Imports System.Windows.Forms" & vbNewLine & _
                    "Imports System.Security.Cryptography" & vbNewLine & _
                    "Imports System" & vbNewLine & _
                    "Imports System.Threading" & vbNewLine & _
                    "Imports System.Text" & vbNewLine & _
                    "Imports System.IO" & vbNewLine & _
                    "Imports System.Resources" & vbNewLine & _
                    "Imports System.IO.Compression" & vbNewLine & _
                    "Imports " & Resolver.ReferencedZipperAssembly.refNewNamespaceName & vbNewLine & vbNewLine _
          & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
          & "Friend Class " & Resolver.className & vbNewLine & vbNewLine _
          & "    Private Delegate Function z() As Assembly" & vbNewLine _
          & "    <STAThread()> _" & vbNewLine _
          & "    Public Shared Sub Main(ByVal a As String())" & vbNewLine _
          & "        Dim y As Assembly = " & ResourceAssembly & "((""app, version=0.0.0.0, culture=neutral, publickeytoken=null"").Replace("".resources"",""""))" & vbNewLine _
          & "        If y.EntryPoint.GetParameters().Length = 0 Then" & vbNewLine _
          & "            y.EntryPoint.Invoke(Nothing, New Object(-1) {})" & vbNewLine _
          & "        Else" & vbNewLine _
          & "            y.EntryPoint.Invoke(Nothing, New Object() {a})" & vbNewLine _
          & "        End If" & vbNewLine _
          & "    End Sub" & vbNewLine _
          & "    Private Shared Function " & decodeString & "(Byval S as String) As String" & vbNewLine _
          & "        Return Encoding.Default.GetString(" & fromBase64 & "(S))" & vbNewLine _
          & "    End Function" & vbNewLine _
          & "    Private Shared Function " & ResourceAssembly & "(n As String) As Assembly" & vbNewLine _
          & "        Dim a As Assembly = Nothing" & vbNewLine _
          & "        Using st As Stream = DirectCast([Delegate].CreateDelegate(GetType(z), GetType(Assembly).GetMethod(""GetExecutingAssembly"", New Type() {})), z).Invoke.GetManifestResourceStream(n & "".resources"")" & vbNewLine _
          & "            If st Is Nothing Then" & vbNewLine _
          & "                Exit Function" & vbNewLine _
          & "            End If" & vbNewLine _
          & "            Dim b As Byte() = " & Resolver.ReferencedZipperAssembly.refNewTypeName & "." & Resolver.ReferencedZipperAssembly.refNewMethodName & "(New BinaryReader(st).ReadBytes(CInt(st.Length)))" & vbNewLine _
          & "            " & reverseStr & vbNewLine _
          & "            a = Assembly.Load(" & Decrypt & "(b))" & vbNewLine _
          & "        End Using" & vbNewLine _
          & "        Return a" & vbNewLine _
          & "    End Function" & vbNewLine _
          & Generator.GenerateCompressWithGzipByteFunc(Resolver.funcName1, Resolver.funcName2) & vbNewLine _
          & "    Private Shared Function " & fromBase64 & "(ByVal i As String) As Byte()" & vbNewLine _
          & "        Return Convert.FromBase64String(i)" & vbNewLine _
          & "    End Function" & vbNewLine _
          & "    " & aesStr & vbNewLine _
          & "End Class"

            Dim dic As New Dictionary(Of String, Byte())
            dic.Add(Resolver.ReferencedZipperAssembly.fPath, Resolver.ReferencedZipperAssembly.refByte)

            Return Compiler.CreateStubFromString(Resolver.className, Frmwk, str.Replace("app, version=0.0.0.0, culture=neutral, publickeytoken=null", EncodedResName), dic)
        End Function

        Protected Shared Function ResourcesStub(ClassName$, initializeFuncName$, resolverName$, Decompress0$, Decompress1$, encrypt As Boolean, compress As Boolean) As String
            LoadNamespacesHeaders()

            Dim reverseStr = If(encrypt = True, "                    Array.Reverse(d)", String.Empty)
            Dim DecompressStr0 = "                d = " & Decompress0 & "(cm.ToArray)"

            Dim str = _
                "Imports System.Windows.Forms" & vbNewLine & _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                "Imports System.IO" & vbNewLine & _
                "Imports System.IO.Compression" & vbNewLine & vbNewLine _
                       & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                       & m_AddedNamespaceStart & vbNewLine _
                       & "Public Class " & ClassName & vbNewLine _
                       & "    Private Shared Function " & resolverName & " (ByVal sender As Object, ByVal args As ResolveEventArgs) As Assembly" & vbNewLine _
                       & "        Dim names As String() = Nothing" & vbNewLine _
                       & "        Dim ass As Assembly = Nothing" & vbNewLine _
                       & "        Dim d as Byte()" & vbNewLine _
                       & "        If (ass Is Nothing) Then" & vbNewLine _
                       & "        Using cs As Stream = (GetType(System.Reflection.Assembly).GetMethod(""GetExecutingAssembly"").Invoke(Nothing, Nothing)).GetManifestResourceStream(""" & ResName & """)" & vbNewLine _
                       & "            If cs Is Nothing Then" & vbNewLine _
                       & "                Return Nothing" & vbNewLine _
                       & "            End If" & vbNewLine _
                       & "            Using cm As MemoryStream = New MemoryStream" & vbNewLine _
                       & "                Const bValue = 4096" & vbNewLine _
                       & "                Dim buffer As Byte() = New Byte(bValue - 1) {}" & vbNewLine _
                       & "                Dim count As Integer = cs.Read(buffer, 0, bValue)" & vbNewLine _
                       & "                Do" & vbNewLine _
                       & "                    cm.Write(buffer, 0, count)" & vbNewLine _
                       & "                    count = cs.Read(buffer, 0, bValue)" & vbNewLine _
                       & "                Loop While (count <> 0)" & vbNewLine _
                       & If(compress = True, DecompressStr0, "d = cm.ToArray()") & vbNewLine _
                       & "                " & reverseStr & vbNewLine _
                       & "                ass = Assembly.Load(d)" & vbNewLine _
                       & "                names = ass.GetManifestResourceNames" & vbNewLine _
                       & "            End Using" & vbNewLine _
                       & "        End Using" & vbNewLine _
                       & "        End If" & vbNewLine _
                       & "        If New List(Of String)(names).Contains(args.Name) Then" & vbNewLine _
                       & "            Return ass" & vbNewLine _
                       & "        End If" & vbNewLine _
                       & "        Return Nothing" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & If(compress = True, Generator.GenerateCompressWithGzipByteFunc(Decompress0, Decompress1), "") & vbNewLine _
                       & "    Public Shared Sub " & initializeFuncName & vbNewLine _
                       & "        AddHandler AppDomain.CurrentDomain.ResourceResolve, New ResolveEventHandler(AddressOf " & resolverName & ")" & vbNewLine _
                       & "    End Sub" & vbNewLine _
                       & "End Class" & vbNewLine _
                       & m_AddedNamespaceEnd

            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Protected Shared Function AntiDebugStub(classname$, funcName$) As String
            LoadNamespacesHeaders()
            Dim FuncName2 = Randomizer.GenerateNewAlphabetic

            Dim str As String = _
    "Imports System" & vbNewLine & _
    "Imports System.Diagnostics" & vbNewLine & _
    "Imports System.Threading" & vbNewLine & _
     Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
    & m_AddedNamespaceStart & vbNewLine & _
        "Friend Class " & classname & vbNewLine & _
            "Public Shared Sub " & funcName & "()" & vbNewLine & _
            "   If ((Not Environment.GetEnvironmentVariable(""COR_ENABLE_PROFILING"") Is Nothing) OrElse (Not Environment.GetEnvironmentVariable(""COR_PROFILER"") Is Nothing)) Then" & vbNewLine & _
            "       Environment.FailFast(""Profiler detected"")" & vbNewLine & _
            "   End If" & vbNewLine & _
            "   Dim parameter As New Thread(New ParameterizedThreadStart(AddressOf " & FuncName2 & "))" & vbNewLine & _
            "   Dim t As New Thread(New ParameterizedThreadStart(AddressOf " & FuncName2 & "))" & vbNewLine & _
            "   parameter.IsBackground = True" & vbNewLine & _
            "   t.IsBackground = True" & vbNewLine & _
            "   parameter.Start(t)" & vbNewLine & _
            "   Thread.Sleep(500)" & vbNewLine & _
            "   t.Start(parameter)" & vbNewLine & _
            "End Sub" & vbNewLine & vbNewLine & _
            "Private Shared Sub " & FuncName2 & "(ByVal th As Object)" & vbNewLine & _
            "   Thread.Sleep(&H3E8)" & vbNewLine & _
            "   Dim t As Thread = DirectCast(th, Thread)" & vbNewLine & _
            "   Do While True" & vbNewLine & _
            "       If (Debugger.IsAttached OrElse Debugger.IsLogging) Then" & vbNewLine & _
            "           Environment.FailFast(""Debugger detected (Managed)"")" & vbNewLine & _
            "       End If" & vbNewLine & _
            "       If Not t.IsAlive Then" & vbNewLine & _
            "           Environment.FailFast(""Loop broken"")" & vbNewLine & _
            "       End If" & vbNewLine & _
            "       Thread.Sleep(&H3E8)" & vbNewLine & _
            "   Loop" & vbNewLine & _
            "End Sub" & vbNewLine & vbNewLine & _
        "End Class" & vbNewLine & vbNewLine & _
    m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(classname, Frmwk, str)
        End Function

        Protected Shared Function AntiTamperStub(className$, FuncName$) As String
            LoadNamespacesHeaders()
            Dim str As String = _
                "Imports System.Security.Cryptography" & vbNewLine & _
                "Imports System.Windows.Forms" & vbNewLine & _
                "Imports System.Collections.Generic" & vbNewLine & _
                "Imports System" & vbNewLine & _
                "Imports System.IO" & vbNewLine & _
                "Imports System.IO.Compression" & vbNewLine & vbNewLine _
                 & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                 & m_AddedNamespaceStart & vbNewLine _
                 & "Public Class " & className & vbNewLine _
                 & "    Public Shared Sub " & FuncName & " ()" & vbNewLine _
                 & "        Dim l As String = (GetType(System.Reflection.Assembly).GetMethod(""GetExecutingAssembly"").Invoke(Nothing, Nothing)).Location" & vbNewLine _
                 & "        Dim b As Stream = New StreamReader(l).BaseStream" & vbNewLine _
                 & "        Dim r As New BinaryReader(b)" & vbNewLine _
                 & "        Dim b0 As String = Nothing" & vbNewLine _
                 & "        Dim b1 As String = Nothing" & vbNewLine _
                 & "        b0 = BitConverter.ToString(Ctype(CryptoConfig.CreateFromName(" & Chr(34) & "MD5" & Chr(34) & "), HashAlgorithm).ComputeHash(r.ReadBytes((File.ReadAllBytes(l).Length - 16))))" & vbNewLine _
                 & "        b.Seek(-16, SeekOrigin.End)" & vbNewLine _
                 & "        b1 = BitConverter.ToString(r.ReadBytes(16))" & vbNewLine _
                 & "        If (b0 <> b1) Then" & vbNewLine _
                 & "            Throw New BadImageFormatException" & vbNewLine _
                 & "        End If" & vbNewLine _
                 & "    End Sub" & vbNewLine _
                 & "End Class" & vbNewLine _
                 & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(className, Frmwk, str)
        End Function

        Protected Shared Function DynamicInvokeStub(className$, m_loadLibraryFuncName$, m_getMethProcFuncName$, m_invokeMethFuncName$)
            LoadNamespacesHeaders()
            Dim str = "Imports System.Threading" & vbNewLine & _
                        "Imports System" & vbNewLine & _
                        "Imports System.Reflection.Emit" & vbNewLine & _
                        "Imports System.Runtime.InteropServices" & vbNewLine & vbNewLine _
                       & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                       & m_AddedNamespaceStart & vbNewLine _
                       & "Public Class " & className & vbNewLine _
                       & "    <DllImport(""kernel32.dll"", EntryPoint :=""LoadLibrary"")> _" & vbNewLine _
                       & "    Private Shared Function " & m_loadLibraryFuncName & "(hLib As String) As IntPtr" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "    <DllImport(""kernel32.dll"", EntryPoint :=""GetProcAddress"")> _" & vbNewLine _
                       & "    Private Shared Function " & m_getMethProcFuncName & "(hMod As IntPtr, pName As String) As IntPtr" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "    Public Shared Function " & m_invokeMethFuncName & " (Of T As Class)(libF$, funcN$) As T" & vbNewLine _
                       & "        Dim ll As IntPtr = " & m_loadLibraryFuncName & "(libF)" & vbNewLine _
                       & "        Dim delegT As System.Delegate = Marshal.GetDelegateForFunctionPointer(" & m_getMethProcFuncName & "(ll, funcN), GetType(T))" & vbNewLine _
                       & "        Return TryCast(delegT, T)" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "End Class" & vbNewLine _
                       & m_AddedNamespaceEnd
            Return Compiler.CreateStubFromString(className, Frmwk, str)
        End Function

        Protected Shared Function ResourcesEmbeddingStub(ClassName$, initializeFuncName$, encrypt As Boolean, compress As Boolean) As String
            LoadNamespacesHeaders()

            Dim resolverName = Randomizer.GenerateNewAlphabetic
            Dim Decompress0 = Randomizer.GenerateNewAlphabetic
            Dim Decompress1 = Randomizer.GenerateNewAlphabetic

            Dim reverseStr = If(encrypt = True, "                    Array.Reverse(b)", String.Empty)
            Dim DecompressStr0 = "                b = " & Decompress0 & "(b)"

            Dim str = "Imports Microsoft.VisualBasic" & vbNewLine & _
                        "Imports System.Windows.Forms" & vbNewLine & _
                        "Imports System.Runtime.InteropServices" & vbNewLine & _
                        "Imports System.Collections.Generic" & vbNewLine & _
                        "Imports System" & vbNewLine & _
                        "Imports System.IO" & vbNewLine & _
                        "Imports System.IO.Compression" & vbNewLine & vbNewLine _
                       & Loader.GenerateInfos(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, "1.0.0.0") & vbNewLine _
                       & m_AddedNamespaceStart & vbNewLine _
                       & "Public Class " & ClassName & vbNewLine _
                       & "    <DllImport(""kernel32"")> _" & vbNewLine _
                       & "    Private Shared Function MoveFileEx(ByVal existingFileName As String, ByVal newFileName As String, ByVal flags As Integer) As Boolean" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "    Private Delegate Function z() As Assembly" & vbNewLine _
                       & "    Private Shared Function " & resolverName & " (ByVal sender As Object, ByVal args As ResolveEventArgs) As Assembly" & vbNewLine _
                       & If(Pack, "        Dim k As String = getEnc(Cstr(New AssemblyName(args.Name).FullName.GetHashCode))", "        Dim k As String = Cstr(New AssemblyName(args.Name).FullName.GetHashCode)") & vbNewLine _
                       & "        Dim ass As Assembly = Nothing" & vbNewLine _
                       & "        If Not k.Length = 0 Then" & vbNewLine _
                       & "        Dim baseResourceName As String =  k & "".resources""" & vbNewLine _
                       & "        Dim bn as boolean" & vbNewLine _
                       & "        SyncLock hashtable" & vbNewLine _
                       & "            If hashtable.ContainsKey(baseResourceName) Then" & vbNewLine _
                       & "                Return hashtable.Item(baseResourceName)" & vbNewLine _
                       & "            End If" & vbNewLine _
                       & "            Using st As Stream = DirectCast([Delegate].CreateDelegate(GetType(z), GetType(Assembly).GetMethod(""GetExecutingAssembly"", New Type() {})), z).Invoke.GetManifestResourceStream(baseResourceName)" & vbNewLine _
                       & "                If st Is Nothing Then" & vbNewLine _
                       & "                    Return ass" & vbNewLine _
                       & "                End If" & vbNewLine _
                       & "                Dim b As Byte() = New BinaryReader(st).ReadBytes(CInt(st.Length))" & vbNewLine _
                       & If(compress = True, DecompressStr0, "") & vbNewLine _
                       & "                " & reverseStr & vbNewLine _
                       & "                Try" & vbNewLine _
                       & "                    ass = Assembly.Load(b)" & vbNewLine _
                       & "                Catch ex1 As FileLoadException" & vbNewLine _
                       & "                    bn = True" & vbNewLine _
                       & "                Catch ex2 As BadImageFormatException" & vbNewLine _
                       & "                    bn = True" & vbNewLine _
                       & "                End Try" & vbNewLine _
                       & "                If bn Then" & vbNewLine _
                       & "                    Try" & vbNewLine _
                       & "                        Dim npath As String = String.Format(""{0}{1}\"", System.IO.Path.GetTempPath, k)" & vbNewLine _
                       & "                        Directory.CreateDirectory(npath)" & vbNewLine _
                       & "                        Dim nfileP As String = (npath & baseResourceName)" & vbNewLine _
                       & "                        If Not File.Exists(nfileP) Then" & vbNewLine _
                       & "                            Dim fStream As FileStream = File.OpenWrite(nfileP)" & vbNewLine _
                       & "                            fStream.Write(b, 0, b.Length)" & vbNewLine _
                       & "                            fStream.Close" & vbNewLine _
                       & "                            MoveFileEx(nfileP, Nothing, 4)" & vbNewLine _
                       & "                            MoveFileEx(npath, Nothing, 4)" & vbNewLine _
                       & "                        End If" & vbNewLine _
                       & "                        ass = Assembly.LoadFile(nfileP)" & vbNewLine _
                       & "                    Catch Ex As Exception" & vbNewLine _
                       & "                    End Try" & vbNewLine _
                       & "                End If" & vbNewLine _
                       & "                hashtable.Item(baseResourceName) = ass" & vbNewLine _
                       & "                Return ass" & vbNewLine _
                       & "            End Using" & vbNewLine _
                       & "        End SyncLock" & vbNewLine _
                       & "        End If" & vbNewLine _
                       & "        Return ass" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "    Shared Sub new" & vbNewLine _
                       & "        hashtable = New Dictionary(Of String, Assembly)" & vbNewLine _
                       & "    End Sub" & vbNewLine _
                       & If(compress = True, Generator.GenerateCompressWithGzipByteFunc(Decompress0, Decompress1), "") & vbNewLine _
                       & "    Private Shared hashtable As Dictionary(Of String, Assembly)" & vbNewLine _
                       & "    Public Shared Sub " & initializeFuncName & vbNewLine _
                       & "        AddHandler AppDomain.CurrentDomain.AssemblyResolve, New ResolveEventHandler(AddressOf " & resolverName & ")" & vbNewLine _
                       & "    End Sub" & vbNewLine _
                       & "    Private Shared Function getEnc(Str$) As String" & vbNewLine _
                       & "        Return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(Str))" & vbNewLine _
                       & "    End Function" & vbNewLine _
                       & "End Class" & vbNewLine & vbNewLine & _
                       m_AddedNamespaceEnd

            Return Compiler.CreateStubFromString(ClassName, Frmwk, str)
        End Function

        Overloads Shared Sub CleanUp()
            Frmwk = String.Empty
            completedInstructions.Clear()
            completedMethods.Clear()
            If Not ResWriter Is Nothing Then ResWriter.Dispose()
            If File.Exists(My.Application.Info.DirectoryPath & "\" & ResName & ".resources") Then
                File.Delete(My.Application.Info.DirectoryPath & "\" & ResName & ".resources")
            End If
            ResName = String.Empty
            Pack = False
        End Sub

#End Region

    End Class
End Namespace







================================================
File: Implementer/Core/Obfuscation/Builder/Stub.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Helper.CecilHelper
Imports System.IO
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports Implementer.Engine.Processing
Imports Implementer.Core.Packer

Namespace Core.Obfuscation.Builder

    Public Class Stub
        Implements IDisposable

#Region " Fields "
        Private m_assDef As AssemblyDefinition = Nothing
        Private m_assDefTarget As AssemblyDefinition = Nothing
        Private m_typeDefResolver As TypeDefinition = Nothing
        Private m_resolverDll As String = String.Empty
#End Region

#Region " Properties "
        Private m_className = String.Empty
        Friend ReadOnly Property className As String
            Get
                Return m_className
            End Get
        End Property

        Private m_funcName1 = String.Empty
        Friend ReadOnly Property funcName1 As String
            Get
                Return m_funcName1
            End Get
        End Property

        Private m_funcName2 = String.Empty
        Friend ReadOnly Property funcName2 As String
            Get
                Return m_funcName2
            End Get
        End Property

        Private m_funcName3 = String.Empty
        Friend ReadOnly Property funcName3 As String
            Get
                Return m_funcName3
            End Get
        End Property

        Private m_funcName4 = String.Empty
        Friend ReadOnly Property funcName4 As String
            Get
                Return m_funcName4
            End Get
        End Property

        Private m_resolvedTypeDef As TypeDefinition = Nothing
        Friend ReadOnly Property resolvedTypeDef As TypeDefinition
            Get
                Return m_resolvedTypeDef
            End Get
        End Property

        Public Property ReferencedZipperAssembly As ZipInfos

#End Region

#Region " Constructor "
        Friend Sub New(className$, FuncName1$, Optional ByVal FuncName2 As String = Nothing, Optional ByVal FuncName3 As String = Nothing, Optional ByVal FuncName4 As String = Nothing)
            m_className = className
            m_funcName1 = FuncName1
            m_funcName2 = FuncName2
            m_funcName3 = FuncName3
            m_funcName4 = FuncName4
        End Sub
#End Region

#Region " Methods "
        Friend Function ResolveTypeFromFile(ResolverDll$, Optional ByVal replaceNamespace As String = "", _
                                                          Optional ByVal replaceClassName As String = "", _
                                                          Optional ByVal FuncNewName1 As String = "", _
                                                          Optional ByVal FuncNewName2 As String = "", _
                                                          Optional ByVal FuncNewName3 As String = "", _
                                                          Optional ByVal FuncNewName4 As String = "") As TypeDefinition

            If Not ResolverDll.ToLower.EndsWith(".exe") Then
                If Not ResolverDll.ToLower.EndsWith(".dll") Then
                    ResolverDll &= ".dll"
                End If
            End If
            m_resolverDll = ResolverDll
            m_assDef = AssemblyDefinition.ReadAssembly(ResolverDll)
            m_typeDefResolver = Finder.FindType(m_assDef.MainModule, m_className)

            If Not replaceNamespace = "" Then m_typeDefResolver.Namespace = replaceNamespace
            If Not replaceClassName = "" Then m_typeDefResolver.Name = replaceClassName

            If Not FuncNewName1 = "" Then
                Finder.FindMethod(m_typeDefResolver, m_funcName1).Name = FuncNewName1
                m_funcName1 = FuncNewName1
            End If
            If Not FuncNewName2 = "" Then
                Finder.FindMethod(m_typeDefResolver, m_funcName2).Name = FuncNewName2
                m_funcName2 = FuncNewName2
            End If
            If Not FuncNewName3 = "" Then
                Finder.FindMethod(m_typeDefResolver, m_funcName3).Name = FuncNewName3
                m_funcName3 = FuncNewName3
            End If
            If Not FuncNewName4 = "" Then
                Finder.FindMethod(m_typeDefResolver, m_funcName4).Name = FuncNewName4
                m_funcName4 = FuncNewName4
            End If

            Return m_typeDefResolver
        End Function

        Friend Function InjectType(assDefTarget As AssemblyDefinition) As TypeDefinition
            m_assDefTarget = assDefTarget
            m_resolvedTypeDef = Injecter.Inject(assDefTarget.MainModule, m_typeDefResolver)
            assDefTarget.MainModule.Types.Add(m_resolvedTypeDef)
            Return m_resolvedTypeDef
        End Function

        Friend Sub InjectToCctor(assDefTarget As AssemblyDefinition)
            m_assDefTarget = assDefTarget
            m_resolvedTypeDef = Injecter.Inject(assDefTarget.MainModule, m_typeDefResolver)

            Dim globalType = m_assDefTarget.MainModule.GetType("<Module>")

            Dim cctorMethod = globalType.GetStaticConstructor
            If cctorMethod Is Nothing Then
                globalType.Methods.Add(Injecter.CreateGenericCctor(m_assDefTarget))
                cctorMethod = globalType.GetStaticConstructor
            End If

            If cctorMethod.Body.Instructions.Count > 0 AndAlso cctorMethod.Body.Instructions.Last.OpCode = OpCodes.Ret Then
                cctorMethod.Body.Instructions.Remove(cctorMethod.Body.Instructions.Last)
            End If

            m_assDefTarget.MainModule.Types.Add(m_resolvedTypeDef)
            Dim initializeMethod = Finder.FindMethod(m_assDefTarget, m_funcName1)

            If Not initializeMethod Is Nothing Then
                If Not cctorMethod Is Nothing Then
                    Dim ilproc = cctorMethod.Body.GetILProcessor()
                    Dim last = ilproc.Body.Instructions.Count
                    Dim init = ilproc.Create(OpCodes.Call, initializeMethod)
                    cctorMethod.Body.Instructions.Insert(last, init)
                    ilproc.InsertAfter(init, ilproc.Create(Mono.Cecil.Cil.OpCodes.Ret))
                End If
            End If
        End Sub

        Friend Sub InjectToMyProject()
            If Utils.IsDebuggerNonUserCode(m_assDefTarget) Then
                Dim myProjectType = Finder.FindType(m_assDefTarget.MainModule, Finder.FindDefaultNamespace(m_assDefTarget) & ".My.MyProject", True)

                If Not myProjectType Is Nothing Then
                    Dim cctr = myProjectType.GetStaticConstructor
                    If Not cctr Is Nothing Then

                        If cctr.HasBody Then
                            If cctr.Body.Instructions.Count <> 0 Then
                                Dim originalMeth = Finder.FindMethod(m_typeDefResolver, m_funcName1)
                                If Not originalMeth Is Nothing Then

                                    If cctr.Body.Instructions.Last.OpCode = OpCodes.Ret Then cctr.Body.Instructions.Remove(cctr.Body.Instructions.Last)
                                    Dim ImportedMeth = Injecter.Inject(m_assDefTarget.MainModule, originalMeth)
                                    myProjectType.Methods.Add(ImportedMeth)

                                    Dim ilproc = cctr.Body.GetILProcessor()
                                    Dim last = ilproc.Body.Instructions.Count
                                    Dim init = ilproc.Create(OpCodes.Call, ImportedMeth)
                                    cctr.Body.Instructions.Insert(last, init)
                                    ilproc.InsertAfter(init, ilproc.Create(Mono.Cecil.Cil.OpCodes.Ret))
                                End If

                            End If
                        End If
                    End If
                End If
            End If
        End Sub

        Friend Function GetMethod1() As MethodDefinition
            Return Finder.FindMethod(m_assDefTarget, m_funcName1)
        End Function

        Friend Function GetMethod2() As MethodDefinition
            Return Finder.FindMethod(m_assDefTarget, m_funcName2)
        End Function

        Friend Function GetMethod3() As MethodDefinition
            Return Finder.FindMethod(m_assDefTarget, m_funcName3)
        End Function

        Friend Function GetMethod4() As MethodDefinition
            Return Finder.FindMethod(m_assDefTarget, m_funcName4)
        End Function

        Friend Sub DeleteDll()
            If File.Exists(m_resolverDll) Then
                Try
                    System.IO.File.Delete(m_resolverDll)
                Catch ex As Exception
                End Try
            End If
        End Sub
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                Try
                    m_assDef = Nothing
                    File.Delete(m_resolverDll)
                Catch ex As Exception
                End Try
            End If
            Me.disposedValue = True
        End Sub

        Friend Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Implementer/Core/Obfuscation/Exclusion/ExcludeList.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks

Namespace Core.Obfuscation.Exclusion
    Public NotInheritable Class ExcludeList

#Region " Fields "
        Private m_ObfTypes As New Dictionary(Of TypeDefinition, ExclusionState)
        Private m_ObfMethods As New Dictionary(Of MethodDefinition, ExclusionState)
        Private m_ObfProperties As New Dictionary(Of PropertyDefinition, ExclusionState)
        Private m_ObfEvents As New Dictionary(Of EventDefinition, ExclusionState)
        Private m_ObfFields As New Dictionary(Of FieldDefinition, ExclusionState)
#End Region

#Region " Methods "
        Public Sub AddTo(m As Object)
            If Not m Is Nothing AndAlso Not m.member Is Nothing Then
                If m.memberType = ExclusionState.mType.Types Then
                    If Not m_ObfTypes.ContainsKey(m.member) Then m_ObfTypes.Add(m.member, m)
                ElseIf m.memberType = ExclusionState.mType.Methods Then
                    If Not m_ObfMethods.ContainsKey(m.member) Then m_ObfMethods.Add(m.member, m)
                ElseIf m.memberType = ExclusionState.mType.Properties Then
                    If Not m_ObfProperties.ContainsKey(m.member) Then m_ObfProperties.Add(m.member, m)
                ElseIf m.memberType = ExclusionState.mType.Events Then
                    If Not m_ObfEvents.ContainsKey(m.member) Then m_ObfEvents.Add(m.member, m)
                ElseIf m.memberType = ExclusionState.mType.Fields Then
                    If Not m_ObfFields.ContainsKey(m.member) Then m_ObfFields.Add(m.member, m)
                End If
            End If
        End Sub

        Public Sub RemoveFrom(m As Object)
            If Not m Is Nothing AndAlso Not m.member Is Nothing Then
                If m.memberType = ExclusionState.mType.Types Then
                    If m_ObfTypes.ContainsKey(m.member) Then m_ObfTypes.Remove(m.member)
                ElseIf m.memberType = ExclusionState.mType.Methods Then
                    If m_ObfMethods.ContainsKey(m.member) Then m_ObfMethods.Remove(m.member)
                ElseIf m.memberType = ExclusionState.mType.Properties Then
                    If m_ObfProperties.ContainsKey(m.member) Then m_ObfProperties.Remove(m.member)
                ElseIf m.memberType = ExclusionState.mType.Events Then
                    If m_ObfEvents.ContainsKey(m.member) Then m_ObfEvents.Remove(m.member)
                ElseIf m.memberType = ExclusionState.mType.Fields Then
                    If m_ObfFields.ContainsKey(m.member) Then m_ObfFields.Remove(m.member)
                End If
            End If
        End Sub

        Public Sub CleanUp()
            m_ObfTypes.Clear()
            m_ObfMethods.Clear()
            m_ObfProperties.Clear()
            m_ObfEvents.Clear()
            m_ObfFields.Clear()
        End Sub

        Friend Function isRenamingExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.Renaming = True)
        End Function

        Friend Function isStringEncryptExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.stringEncrypt = True)
        End Function

        Friend Function isIntegerEncodExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.integerEncoding = True)
        End Function

        Friend Function isBooleanEncryptExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.booleanEncrypt = True)
        End Function

        Friend Function isInvalidOpcodesExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.InvalidOpcodes = True)
        End Function

        Friend Function isHideCallsExclude(m As TypeDefinition) As Boolean
            Return m_ObfTypes.Any(Function(x) x.Key.FullName = m.FullName AndAlso x.Value.hideCalls = True)
        End Function

        Public Function itemsCount() As Integer
            Return m_ObfTypes.Count + m_ObfMethods.Count + m_ObfProperties.Count + m_ObfEvents.Count + m_ObfFields.Count
        End Function

        Public Function TypesCount() As String
            Return m_ObfTypes.Count.ToString
        End Function

        Public Function MethodsCount() As String
            Return m_ObfMethods.Count.ToString
        End Function

        Public Function PropertiesCount() As String
            Return m_ObfProperties.Count.ToString
        End Function

        Public Function FieldsCount() As String
            Return m_ObfFields.Count.ToString
        End Function

        Public Function EventsCount() As String
            Return m_ObfEvents.Count.ToString
        End Function

#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Exclusion/ExcludeReflection.vb
================================================
ï»¿Imports System.IO
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil

Namespace Core.Obfuscation.Exclusion

    Public NotInheritable Class ExcludeReflection

#Region " Properties "
        Public Shared HasItems As Boolean
#End Region

#Region " Methods "
        Public Shared Sub AnalyzeCodes(assDef As AssemblyDefinition, m_exclude As ExcludeList)
            For Each modul In assDef.Modules
                If modul.HasTypes Then
                    For Each type In modul.GetAllTypes
                        If type.HasMethods Then
                            For Each method In type.Methods
                                If method.HasBody AndAlso method.Body.Instructions.Count <> 0 Then
                                    For i = 0 To method.Body.Instructions.Count - 1
                                        Dim Inst = method.Body.Instructions(i)
                                        If TypeOf Inst.Operand Is MethodReference Then
                                            Dim refer As MethodReference = TryCast(Inst.Operand, MethodReference)
                                            Dim id = refer.DeclaringType.FullName & "::" & refer.Name

                                            If ExclusionReflection.Reflections.ContainsKey(id) Then
                                                Dim Rmtd = ExclusionReflection.Reflections(id)
                                                Dim memInst As Instruction = Nothing
                                                Dim mem = ReflectionAnalyzer.StackTrace(i, method.Body, Rmtd, method.Module, memInst)
                                                If Not mem Is Nothing Then
                                                    m_exclude.AddTo(New ExclusionState(True, TryCast(mem, TypeDefinition), ExclusionState.mType.Types, False, False, False, False, True, False, False))
                                                    m_exclude.AddTo(New ExclusionState(True, TryCast(refer, MethodDefinition), ExclusionState.mType.Methods, False, False, False, False, False, True, False))
                                                    HasItems = True
                                                End If
                                            End If
                                        End If
                                    Next
                                End If
                            Next
                        End If
                    Next
                End If
            Next
            'm_methodReferences = m_assdef.MainModule.Types.Cast(Of TypeDefinition).SelectMany(Function(type) Type.Methods.Cast(Of MethodDefinition)()).Where(Function(method) method.Body IsNot Nothing).SelectMany(Function(method) method.Body.Instructions.Cast(Of Instruction)()).Select(Function(instr) InStr.Operand).OfType(Of MethodReference)()
        End Sub

        Public Shared Sub CleanUp()
            HasItems = False
        End Sub

#End Region

    End Class

End Namespace



================================================
File: Implementer/Core/Obfuscation/Exclusion/ExclusionReflection.vb
================================================
ï»¿Imports System.IO
Imports Implementer.Core.Obfuscation.Exclusion.ReflectionAnalyzer

Namespace Core.Obfuscation.Exclusion
    Public NotInheritable Class ExclusionReflection

#Region " Constants "
        Private Const database = "Microsoft.VisualBasic.CompilerServices.LateBinding" & ChrW(13) & ChrW(10) & _
                                    "LateCall[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateGet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateSet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateSetComplex[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "Microsoft.VisualBasic.CompilerServices.NewLateBinding" & ChrW(13) & ChrW(10) & _
                                    "LateCall[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateCanEvaluate[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateGet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateSet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                    "LateSetComplex[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Type" & ChrW(13) & ChrW(10) & _
                                    "GetEvent[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetField[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetMember[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetMethod[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetNestedType[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetProperty[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "GetType[0:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "InvokeMember[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                    "ReflectionOnlyGetType[0:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Delegate" & ChrW(13) & ChrW(10) & _
                                    "CreateDelegate[1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Reflection.Assembly" & ChrW(13) & ChrW(10) & _
                                    "GetType[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Reflection.Module" & ChrW(13) & ChrW(10) & _
                                    "GetType[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Activator" & ChrW(13) & ChrW(10) & _
                                    "CreateInstance[1:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "CreateInstanceFrom[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.AppDomain" & ChrW(13) & ChrW(10) & _
                                    "CreateInstance[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "CreateInstanceFrom[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "CreateInstanceAndUnwrap[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "CreateInstanceFromAndUnwrap[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                    "CreateComInstanceFrom[2:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                    "System.Windows.DependencyProperty" & ChrW(13) & ChrW(10) & _
                                    "Register[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                    "RegisterAttached[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                    "RegisterAttachedReadOnly[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                    "RegisterReadOnly[0:Target,2:Type]" & ChrW(13) & ChrW(10) & "="

        Private Const exclude = "System.ServiceModel.ServiceContractAttribute" & ChrW(13) & ChrW(10) & _
                                          "System.ServiceModel.OperationContractAttribute" & ChrW(13) & ChrW(10) & _
                                          "System.Data.Services.Common.DataServiceKeyAttribute" & ChrW(13) & ChrW(10) & _
                                          "System.Data.Services.Common.EntitySetAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlFacetAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlFunctionAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlMethodAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlProcedureAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlTriggerAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" & ChrW(13) & ChrW(10) & _
                                          "Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" & ChrW(13) & ChrW(10) & "="
#End Region
       
#Region " Fields "
        Public Shared ReadOnly ExcludeAttributes As List(Of String)
        Public Shared ReadOnly Reflections As Dictionary(Of String, ReflectionMethod) = New Dictionary(Of String, ReflectionMethod)
#End Region
      
#Region " Constructor "
        Shared Sub New()
            Dim str As String = Nothing
            Using reader = New StringReader("Microsoft.VisualBasic.CompilerServices.LateBinding" & ChrW(13) & ChrW(10) & _
                                                            "LateCall[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateGet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateSet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateSetComplex[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "Microsoft.VisualBasic.CompilerServices.NewLateBinding" & ChrW(13) & ChrW(10) & _
                                                            "LateCall[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateCanEvaluate[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateGet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateSet[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & _
                                                            "LateSetComplex[0:This,1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Type" & ChrW(13) & ChrW(10) & _
                                                            "GetEvent[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetField[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetMember[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetMethod[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetNestedType[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetProperty[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "GetType[0:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "InvokeMember[0:Type,1:Target]" & ChrW(13) & ChrW(10) & _
                                                            "ReflectionOnlyGetType[0:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Delegate" & ChrW(13) & ChrW(10) & _
                                                            "CreateDelegate[1:Type,2:Target]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Reflection.Assembly" & ChrW(13) & ChrW(10) & _
                                                            "GetType[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Reflection.Module" & ChrW(13) & ChrW(10) & _
                                                            "GetType[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Activator" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstance[1:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstanceFrom[1:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.AppDomain" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstance[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstanceFrom[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstanceAndUnwrap[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "CreateInstanceFromAndUnwrap[2:TargetType]" & ChrW(13) & ChrW(10) & _
                                                            "CreateComInstanceFrom[2:TargetType]" & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & _
                                                            "System.Windows.DependencyProperty" & ChrW(13) & ChrW(10) & _
                                                            "Register[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                                            "RegisterAttached[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                                            "RegisterAttachedReadOnly[0:Target,2:Type]" & ChrW(13) & ChrW(10) & _
                                                            "RegisterReadOnly[0:Target,2:Type]" & ChrW(13) & ChrW(10) & "=")
                Dim str2 As String
Label_0017:
                str2 = reader.ReadLine
                If (str2 <> "=") Then
                    If (str Is Nothing) Then
                        str = str2
                    ElseIf (str2 = "") Then
                        str = Nothing
                    Else
                        Dim method As New ReflectionMethod With { _
                            .typeName = str, _
                            .mtdName = str2.Substring(0, str2.IndexOf("["c)) _
                        }
                        Dim strArray As String() = str2.Substring((str2.IndexOf("["c) + 1), ((str2.IndexOf("]"c) - str2.IndexOf("["c)) - 1)).Split(New Char() {","c})
                        method.paramLoc = New Integer(strArray.Length - 1) {}
                        method.paramType = New String(strArray.Length - 1) {}
                        Dim i As Integer
                        For i = 0 To strArray.Length - 1
                            method.paramLoc(i) = Integer.Parse(strArray(i).Split(New Char() {":"c})(0))
                            method.paramType(i) = strArray(i).Split(New Char() {":"c})(1)
                        Next i
                        ExclusionReflection.Reflections.Add((method.typeName & "::" & method.mtdName), method)
                    End If
                    GoTo Label_0017
                End If
            End Using
            ExclusionReflection.ExcludeAttributes = New List(Of String)
            Using reader2 = New StringReader("System.ServiceModel.ServiceContractAttribute" & ChrW(13) & ChrW(10) & _
                                                             "System.ServiceModel.OperationContractAttribute" & ChrW(13) & ChrW(10) & _
                                                             "System.Data.Services.Common.DataServiceKeyAttribute" & ChrW(13) & ChrW(10) & _
                                                             "System.Data.Services.Common.EntitySetAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlFacetAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlFunctionAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlMethodAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlProcedureAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlTriggerAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" & ChrW(13) & ChrW(10) & _
                                                             "Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" & ChrW(13) & ChrW(10) & "=")
                Dim str4 As String
Label_017E:
                str4 = reader2.ReadLine
                If Not (str4 = "=") Then
                    ExclusionReflection.ExcludeAttributes.Add(str4)
                    GoTo Label_017E
                End If
            End Using
        End Sub
#End Region
      
    End Class

End Namespace




================================================
File: Implementer/Core/Obfuscation/Exclusion/ExclusionState.vb
================================================
ï»¿
Namespace Core.Obfuscation.Exclusion
    Public NotInheritable Class ExclusionState

#Region " Enumerations "
        Enum mType
            Namespaces = 0
            Types = 1
            Methods = 2
            Properties = 3
            Events = 4
            Fields = 5
        End Enum
#End Region

#Region " Properties "
        Public Property exclude As Boolean
        Public Property member As Object
        Public Property memberType As mType
        Public Property allEntities As Boolean

        Public Property stringEncrypt As Boolean
        Public Property integerEncoding As Boolean
        Public Property booleanEncrypt As Boolean
        Public Property Renaming As Boolean
        Public Property InvalidOpcodes As Boolean
        Public Property hideCalls As Boolean
#End Region

#Region " Constructor "
        Public Sub New(exclud As Boolean, memb As Object, memberT As mType, Optional ByVal allEntit As Boolean = False, _
               Optional ByVal stringEncr As Boolean = False, Optional ByVal integerEncod As Boolean = False, _
               Optional ByVal booleanEncr As Boolean = False, Optional ByVal Renamin As Boolean = False, _
               Optional ByVal InvalidOp As Boolean = False, Optional ByVal HideCall As Boolean = False)
            _exclude = exclud
            _member = memb
            _memberType = memberT
            _allEntities = allEntit
            _stringEncrypt = stringEncr
            _integerEncoding = integerEncod
            _booleanEncrypt = booleanEncr
            _Renaming = Renamin
            _InvalidOpcodes = InvalidOp
            _hideCalls = HideCall
        End Sub

        Public Sub New(stringEncr As Boolean, integerEncod As Boolean, booleanEncr As Boolean, Renamin As Boolean, InvalidOp As Boolean, HideCall As Boolean)
            _stringEncrypt = stringEncr
            _integerEncoding = integerEncod
            _booleanEncrypt = booleanEncr
            _Renaming = Renamin
            _InvalidOpcodes = InvalidOp
            _hideCalls = HideCall
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Exclusion/ExclusionTreeview.vb
================================================
ï»¿Imports System.Windows.Forms
Imports System.Drawing
Imports Mono.Cecil
Imports Helper.CecilHelper
Imports Helper.UtilsHelper
Imports System.Security.Cryptography
Imports System.IO
Imports System.Text

Namespace Core.Obfuscation.Exclusion
    Public NotInheritable Class ExclusionTreeview

#Region " Fields "
        Private m_AssDef As AssemblyDefinition = Nothing
#End Region

#Region " Properties "
        Public Property filepath() As String
        Public Property fileMD5 As String
#End Region

#Region " Constructor "
        Sub New(FilePath$)
            _filepath = FilePath$
            fileMD5 = Functions.GetMD5HashFromFile(FilePath)
        End Sub
#End Region

#Region " Methods "

        Public Function LoadTreeNode() As TreeNode
            m_AssDef = AssemblyDefinition.ReadAssembly(_filepath)

            Dim assNode As New TreeNode(m_AssDef.FullName)
            assNode.ExpandAll()
            SetImageKey(assNode, "assembly.png")

            Dim namespaces As New Dictionary(Of String, TreeNode)

            For Each Mdef In m_AssDef.Modules
                Dim libNode As New TreeNode(Mdef.Name)
                libNode.ExpandAll()
                SetImageKey(libNode, "library.png")
                For Each tDef In Mdef.Types
                    Dim tNode As TreeNode = Nothing
                    If Not namespaces.ContainsKey(tDef.Namespace) Then
                        tNode = New TreeNode(tDef.Namespace) With { _
                            .Tag = New ExclusionState(False, tDef, ExclusionState.mType.Namespaces)}
                        SetImageKey(tNode, "namespace.png")
                        namespaces.Add(tDef.Namespace, tNode)
                        libNode.Nodes.Add(tNode)
                    Else
                        tNode = namespaces.Item(tDef.Namespace)
                    End If
                    If (tNode.Text = tDef.Namespace) Then
                        Dim destNode As New TreeNode(tDef.Name)
                        For Each ntDef In tDef.NestedTypes
                            Dim ntNode As New TreeNode(ntDef.Name)
                            CreateMembers(ntDef, ntNode)
                            destNode.Nodes.Add(ntNode)
                        Next
                        CreateMembers(tDef, destNode)
                        tNode.Nodes.Add(destNode)
                    Else
                        Continue For
                    End If
                Next
                assNode.Nodes.Add(libNode)
            Next
            namespaces.Clear()
            Return assNode
        End Function

        Private Sub CreateMembers(ByRef OriginalType As TypeDefinition, ByRef DestNode As TreeNode)

            DestNode.Tag = New ExclusionState(False, OriginalType, ExclusionState.mType.Types)
            SetImageKey(DestNode, GetTypeImage(OriginalType))

            For Each mDef As MethodDefinition In OriginalType.Methods
                If Not Finder.AccessorMethods(OriginalType).Contains(mDef) Then
                    CreateMethodNode(mDef, DestNode)
                End If
            Next

            For Each fieldDef In OriginalType.Fields
                Dim fieldNode = New TreeNode(fieldDef.Name.ToString & " : " & fieldDef.FieldType.Name) With { _
                    .Tag = New ExclusionState(False, fieldDef, ExclusionState.mType.Fields)}
                SetImageKey(fieldNode, "field.png")

                DestNode.Nodes.Add(fieldNode)
            Next

            For Each propDef In OriginalType.Properties
                Dim propNode = New TreeNode(propDef.Name.ToString & " : " & propDef.PropertyType.Name) With { _
                    .Tag = New ExclusionState(False, propDef, ExclusionState.mType.Properties)}
                SetImageKey(propNode, "property.png")

                If Not propDef.GetMethod Is Nothing Then CreateMethodNode(propDef.GetMethod, propNode)
                If Not propDef.SetMethod Is Nothing Then CreateMethodNode(propDef.SetMethod, propNode)

                For Each def In propDef.OtherMethods
                    CreateMethodNode(def, propNode)
                Next

                DestNode.Nodes.Add(propNode)
            Next

            For Each EventDef In OriginalType.Events
                Dim eventNode = New TreeNode(EventDef.Name) With { _
                    .Tag = New ExclusionState(False, EventDef, ExclusionState.mType.Events)}
                SetImageKey(eventNode, "event.png")

                If Not EventDef.AddMethod Is Nothing Then CreateMethodNode(EventDef.AddMethod, eventNode)
                If Not EventDef.RemoveMethod Is Nothing Then CreateMethodNode(EventDef.RemoveMethod, eventNode)

                For Each def In EventDef.OtherMethods
                    CreateMethodNode(def, eventNode)
                Next

                DestNode.Nodes.Add(eventNode)
            Next
        End Sub

        Private Sub CreateMethodNode(mDef As MethodDefinition, DestNode As TreeNode)
            Dim methodNode As New TreeNode(mDef.Name) With { _
                .Tag = New ExclusionState(False, mDef, ExclusionState.mType.Methods)}
            SetImageKey(methodNode, GetMethodImage(mDef))

            Dim tmpStr As String = Nothing

            For Each paramDef In mDef.Parameters
                If Not paramDef.ParameterType.Name = mDef.DeclaringType.Name Then
                    tmpStr &= String.Concat(paramDef.ParameterType.Name, ",")
                End If
            Next

            methodNode.Text &= String.Concat("(", (If(tmpStr IsNot Nothing, tmpStr.TrimEnd(New Char() {","c, " "c}), Nothing)), ")")
            DestNode.Nodes.Add(methodNode)
        End Sub

        Private Function GetMethodImage(mdef As MethodDefinition) As String
            Dim str = "Method.png"
            If mdef.IsConstructor Then
                str = "Constructor.png"
            ElseIf mdef.IsPInvokeImpl Then
                str = "PInvokeMethod.png"
            End If
            Return str
        End Function

        Private Function GetTypeImage(mdef As TypeDefinition) As String
            Dim str = "class.png"
            If mdef.IsInterface Then
                str = "interface.png"
            ElseIf mdef.IsEnum Then
                str = "enum.png"
            ElseIf mdef.IsValueType Then
                str = "enumvalue.png"
            ElseIf (mdef.BaseType IsNot Nothing) AndAlso (mdef.BaseType.Name.ToLower.Contains("delegate")) Then
                str = "delegate.png"
            ElseIf mdef.IsSealed Then
                str = "staticclass.png"
            End If
            Return str
        End Function

        Private Sub SetImageKey(node As TreeNode, imageKey$)
            node.ImageKey = imageKey
            node.SelectedImageKey = imageKey
        End Sub

        Public Function isRenamable(Obj As Object) As Boolean
            If Obj Is Nothing Then Return False
            Dim b As Boolean = False
            If TypeOf TryCast(Obj.member, MethodDefinition) Is MethodDefinition Then
                b = NameChecker.IsRenamable(TryCast(Obj.member, MethodDefinition), True)
            ElseIf TypeOf TryCast(Obj.member, TypeDefinition) Is TypeDefinition Then
                b = NameChecker.IsRenamable(TryCast(Obj.member, TypeDefinition))
            ElseIf TypeOf TryCast(Obj.member, EventDefinition) Is EventDefinition Then
                b = NameChecker.IsRenamable(TryCast(Obj.member, EventDefinition))
            ElseIf TypeOf TryCast(Obj.member, PropertyDefinition) Is PropertyDefinition Then
                b = NameChecker.IsRenamable(TryCast(Obj.member, PropertyDefinition))
            ElseIf TypeOf TryCast(Obj.member, FieldDefinition) Is FieldDefinition Then
                b = NameChecker.IsRenamable(TryCast(Obj.member, FieldDefinition))
            End If
            Return b
        End Function

        Public Function isTypedef(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return TypeOf TryCast(n.member, TypeDefinition) Is TypeDefinition
        End Function

        Public Function getEntitiesVal(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return CBool(n.AllEntities)
        End Function

        Public Function isExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.exclude
        End Function

        Public Function isStringsEncryptExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.stringEncrypt
        End Function

        Public Function isIntegersEncodingExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.integerEncoding
        End Function

        Public Function isBooleansEncryptExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.booleanEncrypt
        End Function

        Public Function isRenamingExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.Renaming
        End Function

        Public Function isInvalidOpcodesExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.InvalidOpcodes
        End Function

        Public Function isHideCallsExclude(n As Object) As Boolean
            If n Is Nothing Then Return False
            Return n.HideCalls
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Exclusion/ReflectionAnalyzer.vb
================================================
ï»¿Imports Mono.Cecil.Cil
Imports Mono.Cecil

Namespace Core.Obfuscation.Exclusion
    ''' <summary>
    ''' By Yck from Confuser
    ''' </summary>
    Public NotInheritable Class ReflectionAnalyzer

#Region " Structures "
        Public Structure ReflectionMethod
            Public typeName As String
            Public mtdName As String
            Public paramLoc As Integer()
            Public paramType As String()
        End Structure
#End Region

#Region " Methods "
        Private Shared Sub FollowStack(ByVal op As OpCode, ByVal stack As Stack(Of Object))
            Select Case op.StackBehaviourPop
                Case StackBehaviour.Pop1, StackBehaviour.Pop1_pop1, StackBehaviour.Popi, StackBehaviour.Popref
                    stack.Pop()
                    Exit Select
                Case StackBehaviour.Popi_pop1, StackBehaviour.Popi_popi, StackBehaviour.Popi_popi8, StackBehaviour.Popi_popr4, StackBehaviour.Popi_popr8, StackBehaviour.Popref_pop1, StackBehaviour.Popref_popi
                    stack.Pop()
                    stack.Pop()
                    Exit Select
                Case StackBehaviour.Popi_popi_popi, StackBehaviour.Popref_popi_popi, StackBehaviour.Popref_popi_popi8, StackBehaviour.Popref_popi_popr4, StackBehaviour.Popref_popi_popr8, StackBehaviour.Popref_popi_popref
                    stack.Pop()
                    stack.Pop()
                    stack.Pop()
                    Exit Select
                Case StackBehaviour.PopAll
                    stack.Clear()
                    Exit Select
                Case StackBehaviour.Varpop
                    Throw New InvalidOperationException
            End Select
            Select Case op.StackBehaviourPush
                Case StackBehaviour.Push1, StackBehaviour.Pushi, StackBehaviour.Pushi8, StackBehaviour.Pushr4, StackBehaviour.Pushr8, StackBehaviour.Pushref
                    stack.Push(Nothing)
                    Return
                Case StackBehaviour.Push1_push1
                    stack.Push(Nothing)
                    stack.Push(Nothing)
                    Return
                Case StackBehaviour.Varpop
                    Return
                Case StackBehaviour.Varpush
                    Throw New InvalidOperationException
            End Select
        End Sub

        Private Shared Sub FollowStack(ByVal op As OpCode, ByRef stack As Integer)
            Select Case op.StackBehaviourPop
                Case StackBehaviour.Pop1, StackBehaviour.Pop1_pop1, StackBehaviour.Popi, StackBehaviour.Popref
                    stack -= 1
                    Exit Select
                Case StackBehaviour.Popi_pop1, StackBehaviour.Popi_popi, StackBehaviour.Popi_popi8, StackBehaviour.Popi_popr4, StackBehaviour.Popi_popr8, StackBehaviour.Popref_pop1, StackBehaviour.Popref_popi
                    stack = (stack - 2)
                    Exit Select
                Case StackBehaviour.Popi_popi_popi, StackBehaviour.Popref_popi_popi, StackBehaviour.Popref_popi_popi8, StackBehaviour.Popref_popi_popr4, StackBehaviour.Popref_popi_popr8, StackBehaviour.Popref_popi_popref
                    stack = (stack - 3)
                    Exit Select
                Case StackBehaviour.PopAll
                    stack = 0
                    Exit Select
                Case StackBehaviour.Varpop
                    Throw New InvalidOperationException
            End Select
            Select Case op.StackBehaviourPush
                Case StackBehaviour.Push1, StackBehaviour.Pushi, StackBehaviour.Pushi8, StackBehaviour.Pushr4, StackBehaviour.Pushr8, StackBehaviour.Pushref
                    stack += 1
                    Return
                Case StackBehaviour.Push1_push1
                    stack = (stack + 2)
                    Return
                Case StackBehaviour.Varpop
                    Return
                Case StackBehaviour.Varpush
                    Throw New InvalidOperationException
            End Select
        End Sub

        Public Shared Function StackTrace(ByVal idx As Integer, ByVal body As MethodBody, ByVal mtd As ReflectionMethod, ByVal scope As ModuleDefinition, ByRef memInst As Instruction) As MemberReference
            memInst = Nothing
            Dim instructions As Mono.Collections.Generic.Collection(Of Instruction) = body.Instructions
            Dim c As Integer = (If(TryCast(instructions.Item(idx).Operand, MethodReference).HasThis, 1, 0) + TryCast(instructions.Item(idx).Operand, MethodReference).Parameters.Count)
            If (instructions.Item(idx).OpCode.Code = Code.Newobj) Then
                c -= 1
            End If
            Dim stack As Integer = 0
            idx -= 1
            Do While (idx >= 0)
                If (c = stack) Then
                    Exit Do
                End If
                Dim instruction As Instruction = instructions.Item(idx)
                Select Case instruction.OpCode.Code
                    Case Code.Ldc_I4, Code.Ldc_I8, Code.Ldc_R4, Code.Ldc_R8, Code.Ldstr
                        stack += 1
                        Exit Select
                    Case Code.Pop
                        stack -= 1
                        Exit Select
                    Case Code.Call, Code.Callvirt
                        Dim operand As MethodReference = TryCast(instruction.Operand, MethodReference)
                        stack = (stack - (If(operand.HasThis, 1, 0) + operand.Parameters.Count))
                        If (operand.ReturnType.FullName <> "System.Void") Then
                            stack += 1
                        End If
                        Exit Select
                    Case Code.Ldnull
                        stack += 1
                        Exit Select
                    Case Code.Newobj
                        Dim reference2 As MethodReference = TryCast(instruction.Operand, MethodReference)
                        stack = (stack - (reference2.Parameters.Count - 1))
                        Exit Select
                    Case Code.Ldfld
                        stack += 1
                        Exit Select
                    Case Code.Stfld, Code.Starg, Code.Stloc
                        stack -= 1
                        Exit Select
                    Case Code.Ldtoken
                        stack += 1
                        Exit Select
                    Case Code.Ldarg
                        stack += 1
                        Exit Select
                    Case Code.Ldloc
                        stack += 1
                        Exit Select
                    Case Else
                        ReflectionAnalyzer.FollowStack(instruction.OpCode, stack)
                        Exit Select
                End Select
                idx -= 1
            Loop
            Return ReflectionAnalyzer.StackTrace2((idx + 1), c, body, mtd, scope, memInst)
        End Function

        Private Shared Function StackTrace2(ByVal idx As Integer, ByVal c As Integer, ByVal body As MethodBody, ByVal mtd As ReflectionMethod, ByVal scope As ModuleDefinition, ByRef memInst As Instruction) As MemberReference
            memInst = Nothing
            Dim num As Integer = c
            Dim stack As New Stack(Of Object)
            Dim num2 As Integer = idx
            Do While True
                If (stack.Count = num) Then
                    Dim arr As Object() = stack.ToArray
                    Array.Reverse(arr)
                    Dim str As String = Nothing
                    Dim type As TypeDefinition = Nothing
                    Dim resource As Resource = Nothing
                    Dim i As Integer
                    For i = 0 To mtd.paramLoc.Length - 1
                        Dim predicate As Func(Of Resource, Boolean) = Nothing
                        If (mtd.paramLoc(i) >= arr.Length) Then
                            Return Nothing
                        End If
                        Dim param As Object = arr(mtd.paramLoc(i))
                        Dim str2 As String = mtd.paramType(i)
                        If (Not str2 Is Nothing) Then
                            If Not (str2 = "Target") Then
                                If ((str2 = "Type") OrElse (str2 = "This")) Then
                                    GoTo Label_0333
                                End If
                                If (str2 = "TargetType") Then
                                    GoTo Label_0363
                                End If
                                If (str2 = "TargetResource") Then
                                    GoTo Label_038A
                                End If
                            Else
                                str = TryCast(param, String)
                                If (str Is Nothing) Then
                                    Return Nothing
                                End If
                                memInst = ReflectionAnalyzer.StackTrace3(idx, c, body.Instructions, mtd.paramLoc(i))
                            End If
                        End If
                        Continue For
Label_0333:
                        If TypeOf param Is TypeDefinition Then
                            type = TryCast(param, TypeDefinition)
                        Else
                            type = body.Method.DeclaringType
                        End If
                        Continue For
Label_0363:
                        If Not TypeOf param Is String Then
                            Return Nothing
                        End If
                        type = scope.GetType(TryCast(param, String))
                        Continue For
Label_038A:
                        If Not TypeOf param Is String Then
                            Return Nothing
                        End If
                        If (predicate Is Nothing) Then
                            predicate = Function(r) (r.Name = (TryCast(param, String) & ".resources"))
                        End If
                        resource = Enumerable.FirstOrDefault(Of Resource)(scope.Resources, predicate)
                        memInst = ReflectionAnalyzer.StackTrace3(idx, c, body.Instructions, mtd.paramLoc(i))
                    Next i
                    If (((Not str Is Nothing) OrElse (Not type Is Nothing)) OrElse (Not resource Is Nothing)) Then
                        If (Not resource Is Nothing) Then
                            Return Nothing
                        End If
                        If ((Not str Is Nothing) AndAlso (Not type Is Nothing)) Then
                            Dim definition2 As FieldDefinition
                            For Each definition2 In type.Fields
                                If (definition2.Name = str) Then
                                    Return definition2
                                End If
                            Next
                            Dim definition3 As MethodDefinition
                            For Each definition3 In type.Methods
                                If (definition3.Name = str) Then
                                    Return definition3
                                End If
                            Next
                            Dim definition4 As PropertyDefinition
                            For Each definition4 In type.Properties
                                If (definition4.Name = str) Then
                                    Return definition4
                                End If
                            Next
                            Dim definition5 As EventDefinition
                            For Each definition5 In type.Events
                                If (definition5.Name = str) Then
                                    Return definition5
                                End If
                            Next
                        ElseIf (Not type Is Nothing) Then
                            memInst = ReflectionAnalyzer.StackTrace3(idx, c, body.Instructions, mtd.paramLoc(Array.IndexOf(Of String)(mtd.paramType, "TargetType")))
                            Return type
                        End If
                    End If
                    Return Nothing
                End If
                Dim instruction As Instruction = body.Instructions.Item(num2)
                Select Case instruction.OpCode.Code
                    Case Code.Ldc_I4, Code.Ldc_I8, Code.Ldc_R4, Code.Ldc_R8, Code.Ldstr
                        stack.Push(instruction.Operand)
                        Exit Select
                    Case Code.Pop
                        stack.Pop()
                        Exit Select
                    Case Code.Call, Code.Callvirt
                        Dim operand As MethodReference = TryCast(instruction.Operand, MethodReference)
                        If ((operand.Name <> "GetTypeFromHandle") OrElse (operand.DeclaringType.FullName <> "System.Type")) Then
                            Dim num3 As Integer = (-If(operand.HasThis, 1, 0) - operand.Parameters.Count)
                            Dim j As Integer = num3
                            Do While (j <> 0)
                                stack.Pop()
                                j += 1
                            Loop
                            If (operand.ReturnType.FullName <> "System.Void") Then
                                stack.Push(operand.ReturnType)
                            End If
                        End If
                        Exit Select
                    Case Code.Ldnull
                        stack.Push(Nothing)
                        Exit Select
                    Case Code.Newobj
                        Dim reference2 As MethodReference = TryCast(instruction.Operand, MethodReference)
                        Dim k As Integer = -reference2.Parameters.Count
                        Do While (k <> 0)
                            stack.Pop()
                            k += 1
                        Loop
                        stack.Push(reference2.DeclaringType)
                        Exit Select
                    Case Code.Ldfld
                        stack.Push(TryCast(instruction.Operand, FieldReference).FieldType)
                        Exit Select
                    Case Code.Stfld, Code.Starg, Code.Stloc
                        stack.Pop()
                        Exit Select
                    Case Code.Ldtoken
                        stack.Push(instruction.Operand)
                        Exit Select
                    Case Code.Ldarg
                        stack.Push(TryCast(instruction.Operand, ParameterReference).ParameterType)
                        Exit Select
                    Case Code.Ldloc
                        stack.Push(TryCast(instruction.Operand, VariableReference).VariableType)
                        Exit Select
                    Case Else
                        ReflectionAnalyzer.FollowStack(instruction.OpCode, stack)
                        Exit Select
                End Select
                num2 += 1
            Loop

            Return Nothing
        End Function

        Private Shared Function StackTrace3(ByVal idx As Integer, ByVal count As Integer, ByVal insts As Mono.Collections.Generic.Collection(Of Instruction), ByVal c As Integer) As Instruction
            c = (count - c)
            Do While True
                If (count < c) Then
                    Return insts.Item((idx - 1))
                End If
                Dim instruction As Instruction = insts.Item(idx)
                Select Case instruction.OpCode.Code
                    Case Code.Ldc_I4, Code.Ldc_I8, Code.Ldc_R4, Code.Ldc_R8, Code.Ldstr
                        count -= 1
                        Exit Select
                    Case Code.Pop
                        count += 1
                        Exit Select
                    Case Code.Call, Code.Callvirt
                        Dim operand As MethodReference = TryCast(instruction.Operand, MethodReference)
                        count = (count + (If(operand.HasThis, 1, 0) + operand.Parameters.Count))
                        If (operand.ReturnType.FullName <> "System.Void") Then
                            count -= 1
                        End If
                        Exit Select
                    Case Code.Ldnull
                        count -= 1
                        Exit Select
                    Case Code.Newobj
                        Dim reference2 As MethodReference = TryCast(instruction.Operand, MethodReference)
                        c = (c + (reference2.Parameters.Count - 1))
                        Exit Select
                    Case Code.Ldfld
                        count -= 1
                        Exit Select
                    Case Code.Stfld, Code.Starg, Code.Stloc
                        count += 1
                        Exit Select
                    Case Code.Ldtoken
                        count -= 1
                        Exit Select
                    Case Code.Ldarg
                        count -= 1
                        Exit Select
                    Case Code.Ldloc
                        count -= 1
                        Exit Select
                    Case Else
                        Dim num As Integer = count
                        ReflectionAnalyzer.FollowStack(instruction.OpCode, count)
                        count = (count - (count - num))
                        Exit Select
                End Select
                idx += 1
            Loop
            Return Nothing
        End Function
#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/Obfuscation/Protection/Attribut.vb
================================================
ï»¿Imports Mono.Cecil
Imports System.IO
Imports Mono.Cecil.Cil
Imports System.Reflection

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Attribut

#Region " Fields "
        Private Shared attribs As String()
#End Region

#Region " Constructor "
        Shared Sub New()
            attribs = New String() {"DotNetPatcherObfuscatorAttribute", "DotNetPatcherPackerAttribute", "DotfuscatorAttribute", "ConfusedByAttribute", _
                                            "ObfuscatedByGoliath", "dotNetProtector", "PoweredByAttribute", "AssemblyInfoAttribute"}
        End Sub
#End Region

#Region " Methods "
        Public Shared Sub DoInjection(assdef As AssemblyDefinition, pack As Boolean)
            assdef.MainModule.Resources.Add(New EmbeddedResource(If(pack, My.Resources.DnpPattribute, My.Resources.DnpOattribute), ManifestResourceAttributes.Private, File.ReadAllBytes(IO.Path.GetTempFileName)))

            For Each it In attribs
                Dim item As New TypeDefinition("", it, Mono.Cecil.TypeAttributes.AnsiClass, assdef.MainModule.Import(GetType(Attribute)))
                If it = "DotNetPatcherObfuscatorAttribute" AndAlso pack = False Then
                    creatAttribut(assdef, item, it)
                ElseIf it = "DotNetPatcherPackerAttribute" AndAlso pack = True Then
                    creatAttribut(assdef, item, it)
                ElseIf it = "AssemblyInfoAttribute" Then
                    creatAttribut(assdef, item, it)
                Else
                    If it = "DotNetPatcherObfuscatorAttribute" Then
                    ElseIf it = "DotNetPatcherPackerAttribute" Then
                    ElseIf it = "AssemblyInfoAttribute" Then
                    Else
                        assdef.MainModule.Types.Add(item)
                    End If
                End If
            Next
        End Sub

        Private Shared Sub creatAttribut(assdef As AssemblyDefinition, item As TypeDefinition, it$)
            Dim method As New MethodDefinition(".ctor", (Mono.Cecil.MethodAttributes.CompilerControlled Or (Mono.Cecil.MethodAttributes.FamANDAssem Or (Mono.Cecil.MethodAttributes.Family Or (Mono.Cecil.MethodAttributes.RTSpecialName Or Mono.Cecil.MethodAttributes.SpecialName)))), assdef.MainModule.TypeSystem.Void)
            method.Parameters.Add(New ParameterDefinition(assdef.MainModule.TypeSystem.String))

            Dim iLProc As ILProcessor = method.Body.GetILProcessor
            With iLProc
                .Emit(OpCodes.Ldarg_0)
                .Emit(OpCodes.Call, assdef.MainModule.Import(GetType(Attribute).GetConstructor((BindingFlags.NonPublic Or BindingFlags.Instance), Nothing, Type.EmptyTypes, Nothing)))
                .Emit(OpCodes.Ret)
            End With

            item.Methods.Add(method)
            assdef.MainModule.Types.Add(item)
            Dim att As New CustomAttribute(method)
            att.ConstructorArguments.Add(New CustomAttributeArgument(assdef.MainModule.TypeSystem.String, If(it = "AssemblyInfoAttribute", "", String.Format(("DotNetPatcher v" & GetType(Attribut).Assembly.GetName.Version.ToString), New Object(0 - 1) {}))))
            assdef.MainModule.CustomAttributes.Add(att)
            assdef.CustomAttributes.Add(att)
        End Sub
#End Region

    End Class
End Namespace




================================================
File: Implementer/Core/Obfuscation/Protection/Bool.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports Helper.CryptoHelper
Imports System.Resources
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Bool
        Inherits Source

#Region " Fields "
        Private Shared DecryptReadResources As Stub
        Private Shared DecryptInt As Stub
        Private Shared DecryptOdd As Stub
        Private Shared DecryptPrime As Stub
        Private Shared MtdByInteger As New Dictionary(Of Integer, MethodDefinition)
        Private Shared Types As New List(Of TypeDefinition)()
#End Region

#Region " Methods "
        Friend Shared Function DoJob(ByVal asm As AssemblyDefinition, Framework$, encryptToRes As EncryptType, Exclude As ExcludeList, Optional ByVal packIt As Boolean = False) As AssemblyDefinition
            AssemblyDef = asm
            Frmwk = Framework
            Pack = packIt
            EncryptToResources = encryptToRes

            If encryptToRes = EncryptType.ToResources Then
                ResName = Randomizer.GenerateNew
                ResWriter = New ResourceWriter(ResName & ".resources")
                DecryptReadResources = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With DecryptReadResources
                    .ResolveTypeFromFile(ReadFromResourcesStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                End With

                DecryptInt = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With DecryptInt
                    .ResolveTypeFromFile(DecryptIntStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                End With
            End If

            DecryptOdd = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptOdd
                .ResolveTypeFromFile(DecryptOddStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
            End With

            DecryptPrime = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptPrime
                .ResolveTypeFromFile(DecryptPrimeStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
            End With

            For Each m As ModuleDefinition In asm.Modules
                Types.AddRange(m.GetAllTypes())
                For Each type As TypeDefinition In Types
                    If NameChecker.IsRenamable(type) Then
                        If Exclude.isBooleanEncryptExclude(type) = False Then
                            IterateType(type)
                        End If
                    End If
                Next
                Types.Clear()
            Next

            If encryptToRes = EncryptType.ToResources Then
                If Not ResWriter Is Nothing Then ResWriter.Close()
                InjectResource()
            End If

            MethodByClear()
            DeleteStubs()
            CleanUp()

            Return asm
        End Function

        Private Shared Sub DeleteStubs()
            If Not DecryptReadResources Is Nothing Then DecryptReadResources.DeleteDll()
            If Not DecryptInt Is Nothing Then DecryptInt.DeleteDll()
            If Not DecryptOdd Is Nothing Then DecryptOdd.DeleteDll()
        End Sub

        Private Shared Sub MethodByClear()
            MtdByInteger.Clear()
        End Sub


        Private Shared Sub IterateType(ByVal td As TypeDefinition)
            Dim publicMethods As New List(Of MethodDefinition)()
            publicMethods.AddRange(From m In td.Methods Where (m.HasBody AndAlso m.Body.Instructions.Count > 2 AndAlso Not completedMethods.Contains(m) AndAlso Not Finder.FindCustomAttributeByName(m.DeclaringType, "EditorBrowsableAttribute")))
            Try
                For Each md In publicMethods
                    If publicMethods.Contains(md) Then
                        Using optim As New Msil(md.Body)
                            For i = 0 To md.Body.Instructions.Count - 1
                                Dim Instruct = md.Body.Instructions(i)

                                If Not completedInstructions.Contains(Instruct) Then
                                    Dim mdFinal As MethodDefinition = Nothing
                                    Dim index = md.Body.Instructions.IndexOf(Instruct)

                                    If ((Instruct.OpCode = OpCodes.Ldc_I4) OrElse (Instruct.OpCode = OpCodes.Ldc_I4_S)) Then
                                        If isValidOperand(Instruct) AndAlso (CInt(Instruct.Operand) = 0 OrElse CInt(Instruct.Operand) = 1) Then
                                            Dim value%
                                            If CInt(Instruct.Operand) = 0 Then
                                                value = 0
                                            ElseIf CInt(Instruct.Operand) = 1 Then
                                                value = 1
                                            End If
                                            Dim instructNext = Instruct.Next
                                            If isValidOperand(instructNext) Then
                                                If instructNext.Operand.ToString.ToLower.EndsWith("system.boolean)") Then
                                                    CreateMethod(mdFinal, value, md)
                                                End If

                                                If (Not mdFinal Is Nothing) Then
                                                    If mdFinal.DeclaringType.IsNotPublic Then
                                                        mdFinal.DeclaringType.IsPublic = True
                                                    End If
                                                    md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                    md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)
                                                    completedMethods.Add(mdFinal)
                                                    completedInstructions.Add(Instruct)
                                                End If
                                            End If
                                        End If
                                    ElseIf ((Instruct.OpCode = OpCodes.Ldc_I4_0) OrElse (Instruct.OpCode = OpCodes.Ldc_I4_1)) Then
                                        Dim value%
                                        If Instruct.OpCode = OpCodes.Ldc_I4_0 Then
                                            value = 0
                                        ElseIf Instruct.OpCode = OpCodes.Ldc_I4_1 Then
                                            value = 1
                                        End If

                                        CreateMethod(mdFinal, value, md)

                                        If (Not mdFinal Is Nothing) Then
                                            If mdFinal.DeclaringType.IsNotPublic Then
                                                mdFinal.DeclaringType.IsPublic = True
                                            End If
                                            md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                            md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)
                                            completedMethods.Add(mdFinal)
                                            completedInstructions.Add(Instruct)
                                        End If
                                    End If
                                End If
                            Next
                            optim.FixBranchOffsets()
                            optim.MethodBody.SimplifyMacros()
                        End Using
                    End If
                Next
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            publicMethods.Clear()
        End Sub

        Private Shared Sub CreateMethod(ByRef mDef As MethodDefinition, value As Integer, ByRef md As MethodDefinition)
            If Randomizer.GenerateBoolean Then
                mDef = New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(GetType(Boolean)))
                mDef.Body = New MethodBody(mDef)

                If EncryptToResources = EncryptType.ToResources Then
                    Dim integ = Randomizer.GenerateInvisible

                    Dim encSt = Generator.IntEncrypt(testNumber(If(value = 0, False, True)), integ)
                    Dim dataKeyName = Randomizer.GenerateNew
                    ResWriter.AddResource(dataKeyName, encSt)

                    Dim ilProc As ILProcessor = mDef.Body.GetILProcessor()
                    With ilProc
                        .Body.MaxStackSize = 8
                        .Body.InitLocals = True

                        mDef.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Boolean))))
                        .Emit(OpCodes.Ldstr, dataKeyName)
                        .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptReadResources.GetMethod1))
                        .Emit(OpCodes.Ldc_I4, integ)
                        .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptInt.GetMethod1))
                        .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptOdd.GetMethod1))
                        .Emit(OpCodes.Stloc_0)
                        .Emit(OpCodes.Ldloc_0)
                        .Emit(OpCodes.Ret)
                    End With

                    md.DeclaringType.Methods.Add(mDef)
                Else
                    Dim encStr = testNumber(If(CInt(value) = 0, False, True))
                    Dim IlProc1 As ILProcessor = mDef.Body.GetILProcessor()
                    With IlProc1
                        .Body.MaxStackSize = 2
                        .Body.InitLocals = True
                        mDef.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Boolean))))
                        .Emit(OpCodes.Ldc_I4, encStr)
                        .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptOdd.GetMethod1))
                        .Emit(OpCodes.Stloc_0)
                        .Emit(OpCodes.Ldloc_0)
                        .Emit(OpCodes.Ret)
                    End With

                    md.DeclaringType.Methods.Add(mDef)
                End If
            Else
                Dim UnPrime = rand.Next(Generator.numberUnPrime.Length)
                Dim Prime = rand.Next(Generator.numberPrime.Length)
                Dim valFinale%

                If value = 0 Then
                    valFinale = Generator.numberUnPrime(UnPrime)
                ElseIf value = 1 Then
                    valFinale = Generator.numberPrime(Prime)
                End If

                mDef = New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(GetType(Boolean)))
                mDef.Body = New MethodBody(mDef)
                Dim IlProc1 As ILProcessor = mDef.Body.GetILProcessor()
                With IlProc1
                    .Body.MaxStackSize = 2
                    .Body.InitLocals = True
                    mDef.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Boolean))))
                    .Emit(OpCodes.Ldc_I4, valFinale)
                    .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptPrime.GetMethod1))
                    .Emit(OpCodes.Stloc_0)
                    .Emit(OpCodes.Ldloc_0)
                    .Emit(OpCodes.Ret)
                End With

                md.DeclaringType.Methods.Add(mDef)
            End If
        End Sub

        Private Shared Function isOdd(num As Integer) As Boolean
            Return num Mod 2 <> 0
        End Function

        Private Shared Function testNumber(isPair As Boolean) As Integer
            Dim n%
            Dim result As Boolean = False
            Do While result = False
                n = rand.Next(1000000, 99999999)
                result = If(isOdd(n) = isPair, True, False)
                If result Then
                    Exit Do
                End If
            Loop
            Return n
        End Function

#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/Constants.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports Helper.CecilHelper
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Constants

#Region " Fields "
        Private Shared Rand As Random
#End Region

#Region " Constructor "
        Shared Sub New()
            Rand = New Random
        End Sub
#End Region

#Region " Methods "
        Friend Shared Sub DoJob(AssDef As AssemblyDefinition, Exclude As ExcludeList)
            Dim num% = 0
            Dim tRef As TypeReference = Nothing
            For Each m In AssDef.Modules
                For Each def In m.GetTypes
                    If Exclude.isIntegerEncodExclude(def) = False Then
                        For Each mDef In (From mtd In def.Methods
                        Where mtd.HasBody AndAlso Not Finder.FindCustomAttributeByName(mtd.DeclaringType, "EditorBrowsableAttribute") AndAlso Utils.HasUnsafeInstructions(mtd) = False
                        Select mtd)
                            Dim i%
                            Using optim As New Msil(mDef.Body)
                                For i = 0 To mDef.Body.Instructions.Count - 1
                                    Dim instruct = mDef.Body.Instructions(i)
                                    If Not instruct.OpCode = OpCodes.Ldc_I4 Then
                                        Continue For
                                    End If
                                    Select Case Rand.Next(1, 8)
                                        Case 1
                                            tRef = AssDef.MainModule.Import(GetType(Integer))
                                            num = 4
                                            Exit Select
                                        Case 2
                                            tRef = AssDef.MainModule.Import(GetType(SByte))
                                            num = 1
                                            Exit Select
                                        Case 3
                                            tRef = AssDef.MainModule.Import(GetType(Byte))
                                            num = 1
                                            Exit Select
                                        Case 4
                                            tRef = AssDef.MainModule.Import(GetType(Boolean))
                                            num = 1
                                            Exit Select
                                        Case 5
                                            tRef = AssDef.MainModule.Import(GetType(Decimal))
                                            num = 16
                                            Exit Select
                                        Case 6
                                            tRef = AssDef.MainModule.Import(GetType(Short))
                                            num = 2
                                            Exit Select
                                        Case 7
                                            tRef = AssDef.MainModule.Import(GetType(Long))
                                            num = 8
                                            Exit Select
                                    End Select

                                    Try
                                        Dim nmr% = Rand.Next(1, 1000)
                                        Dim flag As Boolean = Convert.ToBoolean(Rand.Next(0, 2))
                                        Select Case If((num <> 0), If(((Convert.ToInt32(instruct.Operand) Mod num) = 0), Rand.Next(1, 5), Rand.Next(1, 4)), Rand.Next(1, 4))
                                            Case 1
                                                Dim newOp = ((Convert.ToInt32(instruct.Operand) - num) + If(flag, -nmr, nmr))
                                                With mDef.Body
                                                    .Instructions.Insert((i + 1), Instruction.Create(OpCodes.Sizeof, tRef))
                                                    .Instructions.Insert((i + 2), Instruction.Create(OpCodes.Add))
                                                    instruct.Operand = newOp
                                                    .Instructions.Insert((i + 3), Instruction.Create(OpCodes.Ldc_I4, nmr))
                                                    .Instructions.Insert((i + 4), Instruction.Create(If(flag, OpCodes.Add, OpCodes.Sub)))
                                                End With
                                                i = (i + 2)
                                                Exit Select
                                            Case 2
                                                Dim newOp = ((Convert.ToInt32(instruct.Operand) + num) + If(flag, -nmr, nmr))
                                                With mDef.Body
                                                    .Instructions.Insert((i + 1), Instruction.Create(OpCodes.Sizeof, tRef))
                                                    .Instructions.Insert((i + 2), Instruction.Create(OpCodes.Sub))
                                                    instruct.Operand = newOp
                                                    .Instructions.Insert((i + 3), Instruction.Create(OpCodes.Ldc_I4, nmr))
                                                    .Instructions.Insert((i + 4), Instruction.Create(If(flag, OpCodes.Add, OpCodes.Sub)))
                                                End With
                                                i = (i + 2)
                                                Exit Select
                                            Case 3
                                                Dim newOp = ((Convert.ToInt32(instruct.Operand) + If(flag, -nmr, nmr)) * num)
                                                With mDef.Body
                                                    .Instructions.Insert((i + 1), Instruction.Create(OpCodes.Sizeof, tRef))
                                                    .Instructions.Insert((i + 2), Instruction.Create(OpCodes.Div))
                                                    instruct.Operand = newOp
                                                    .Instructions.Insert((i + 3), Instruction.Create(OpCodes.Ldc_I4, nmr))
                                                    .Instructions.Insert((i + 4), Instruction.Create(If(flag, OpCodes.Add, OpCodes.Sub)))
                                                End With
                                                i = (i + 2)
                                                Exit Select
                                        End Select
                                    Catch ex As OverflowException
                                        Continue For
                                    End Try
                                Next
                                optim.FixBranchOffsets()
                                optim.MethodBody.SimplifyMacros()
                            End Using
                        Next
                    End If
                Next
            Next
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/InvalidMetadata.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Mono.Cecil.PE
Imports Mono.Cecil.MetadataProcessor
Imports Mono.Cecil.Metadata
Imports Helper.RandomizeHelper
Imports System.IO
Imports System.Text
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    ''' <summary>
    ''' By Yck from Confuser
    ''' </summary>
    Public NotInheritable Class InvalidMetadata

#Region " Fields "
        Private Shared rand As Random
#End Region

#Region " Constructor "
        Shared Sub New()
            rand = New Random
        End Sub
#End Region

#Region " Methods "


        Public Shared Sub DoJob(asm As AssemblyDefinition, psr As MetadataProcessor)
            Try
                AddHandler psr.BeforeWriteTables, Function(accessor)

                                                      accessor.TableHeap.GetTable(Of DeclSecurityTable)(Table.DeclSecurity).AddRow(New Row(Of SecurityAction, UInt32, UInt32)(&HFFFF, UInt32.MaxValue, UInt32.MaxValue))
                                                      accessor.TableHeap.GetTable(Of TypeDefTable)(2).Item(0).Col2 = 65535

                                                      If ExcludeReflection.HasItems = False Then
                                                          If accessor.Module.Runtime <> TargetRuntime.Net_4_0 Then
                                                              Dim mtdLen As UInteger = CUInt(accessor.TableHeap.GetTable(Of MethodTable)(Table.Method).Length) + 1
                                                              Dim fldLen As UInteger = CUInt(accessor.TableHeap.GetTable(Of FieldTable)(Table.Field).Length) + 1

                                                              Dim nss As New List(Of UInteger)()
                                                              For Each k As Row(Of TypeAttributes, UInteger, UInteger, UInteger, UInteger, UInteger) In accessor.TableHeap.GetTable(Of TypeDefTable)(Table.TypeDef)
                                                                  If k Is Nothing Then
                                                                      Exit For
                                                                  ElseIf Not nss.Contains(k.Col3) Then
                                                                      nss.Add(k.Col3)
                                                                  End If
                                                              Next
                                                              Dim nested As UInteger = CUInt(accessor.TableHeap.GetTable(Of TypeDefTable)(Table.TypeDef).AddRow(New Row(Of TypeAttributes, UInteger, UInteger, UInteger, UInteger, UInteger)(0, &H7FFFFFFF, 0, &H3FFFD, fldLen, mtdLen)))
                                                              accessor.TableHeap.GetTable(Of NestedClassTable)(Table.NestedClass).AddRow(New Row(Of UInteger, UInteger)(nested, nested))
                                                              For Each l In nss
                                                                  Dim type As UInteger = CUInt(accessor.TableHeap.GetTable(Of TypeDefTable)(Table.TypeDef).AddRow(New Row(Of TypeAttributes, UInteger, UInteger, UInteger, UInteger, UInteger)(0, &H7FFFFFFF, l, &H3FFFD, fldLen, mtdLen)))
                                                                  accessor.TableHeap.GetTable(Of NestedClassTable)(Table.NestedClass).AddRow(New Row(Of UInteger, UInteger)(nested, type))
                                                              Next
                                                              For Each r As Row(Of ParameterAttributes, UShort, UInteger) In accessor.TableHeap.GetTable(Of ParamTable)(Table.Param)
                                                                  If r IsNot Nothing Then
                                                                      r.Col3 = &H7FFFFFFF
                                                                  End If
                                                              Next
                                                          End If
                                                      End If

                                                      accessor.TableHeap.GetTable(Of ModuleTable)(Table.Module).AddRow(New Row(Of UInt16, UInt32, UInt16, UInt16, UInt16)(0, &H7FFF7FFF, 0, 0, 0).Col2)
                                                      accessor.TableHeap.GetTable(Of AssemblyTable)(Table.Assembly).AddRow(New Row(Of AssemblyHashAlgorithm, UInt16, UInt16, UInt16, UInt16, AssemblyAttributes, UInt32, UInt32, UInt32)(0, 0, 0, 0, 0, 0, 0, &H7FFF7FFF, 0))

                                                      Dim num% = rand.Next(8, &H10)
                                                      Dim i%
                                                      For i = 0 To num - 1
                                                          accessor.TableHeap.GetTable(Of ENCLogTable)(Table.EncLog).AddRow(New Row(Of UInt32, UInt32)(rand.Next, rand.Next))
                                                      Next i
                                                      num = rand.Next(8, &H10)
                                                      Dim j%
                                                      For j = 0 To num - 1
                                                          accessor.TableHeap.GetTable(Of ENCMapTable)(Table.EncMap).AddRow(rand.Next)
                                                      Next j

                                                      accessor.TableHeap.GetTable(Of AssemblyRefTable)(Table.AssemblyRef).AddRow(New Row(Of UInt16, UInt16, UInt16, UInt16, AssemblyAttributes, UInt32, UInt32, UInt32, UInt32)(0, 0, 0, 0, 0, 0, &HFFFF, 0, &HFFFF))
                                                      Randomize(Of Row(Of UInt32, UInt32))(accessor.TableHeap.GetTable(Of NestedClassTable)(Table.NestedClass))

                                                      If ExcludeReflection.HasItems = False Then
                                                          Dim pad As Char() = New Char(65535) {}
                                                          Dim len As Integer = 0
                                                          While accessor.StringHeap.Length + len < &H10000
                                                              For s As Integer = 0 To 4095
                                                                  While (InlineAssignHelper(pad(len + s), CChar(ChrW(rand.Next(0, &H100))))) = ControlChars.NullChar
                                                                  End While
                                                              Next
                                                              len += &H1000
                                                          End While
                                                          Dim idx As UInteger = accessor.StringHeap.GetStringIndex(New String(pad, 0, len))
                                                          accessor.TableHeap.GetTable(Of ManifestResourceTable)(Table.ManifestResource).AddRow(New Row(Of UInteger, ManifestResourceAttributes, UInteger, UInteger)(&HFFFFFFFFUI, ManifestResourceAttributes.[Private], idx, 2))
                                                      Else
                                                          Randomize(Of Row(Of UInt32, ManifestResourceAttributes, UInt32, UInt32))(accessor.TableHeap.GetTable(Of ManifestResourceTable)(Table.ManifestResource))
                                                      End If
                                                      Randomize(Of Row(Of UInt32, UInt32))(accessor.TableHeap.GetTable(Of GenericParamConstraintTable)(Table.GenericParamConstraint))

                                                      Return accessor
                                                  End Function

                AddHandler psr.ProcessPe, Function(stream, accessor)
                                              Dim reader As New BinaryReader(stream)
                                              stream.Seek(60L, SeekOrigin.Begin)
                                              Dim num As UInteger = reader.ReadUInt32()
                                              stream.Seek(CLng(num), SeekOrigin.Begin)
                                              stream.Seek(6L, SeekOrigin.Current)
                                              Dim num2 As UInteger = reader.ReadUInt16()
                                              stream.Seek(CLng(num + &H18), SeekOrigin.Begin)
                                              Dim MagicPos = stream.Position
                                              ' 0x10b = PE32
                                              Dim is32 As Boolean = (reader.ReadUInt16 = &H10B)
                                              stream.Seek(CLng(num + If(is32, &HE0, 240)), SeekOrigin.Begin)
                                              stream.Seek(-12L, SeekOrigin.Current)
                                              For i As Integer = 0 To num2 - 1
                                                  Dim flag2 As Boolean = False
                                                  For k As Integer = 0 To 7
                                                      If (reader.ReadByte() = 0) And Not flag2 Then
                                                          flag2 = True
                                                          stream.Seek(-1L, SeekOrigin.Current)
                                                          stream.WriteByte(&H20)
                                                      End If
                                                  Next
                                                  reader.ReadUInt32()
                                                  reader.ReadUInt32()
                                                  reader.ReadUInt32()
                                                  reader.ReadUInt32()
                                                  stream.Seek(&H10L, SeekOrigin.Current)
                                              Next
                                              Dim num6 As UInteger = accessor.ResolveVirtualAddress(accessor.GetTextSegmentRange(TextSegment.MetadataHeader).Start)
                                              stream.Position = num6 + 12
                                              Dim position As Long = stream.Position
                                              Dim num8 As UInteger = reader.ReadUInt32()
                                              stream.Position += num8
                                              stream.Position += 2L
                                              Dim num9 As UShort = reader.ReadUInt16()
                                              Dim maxValue As UInteger = UInteger.MaxValue
                                              For j As Integer = 0 To num9 - 1
                                                  Dim num14 As Byte
                                                  maxValue = Math.Min(reader.ReadUInt32(), maxValue)
                                                  stream.Position += 4L
                                                  Dim num12 As Long = stream.Position
                                                  Dim num13 As Integer = 0
                                                  Dim str As String = ""
                                                  While (InlineAssignHelper(num14, reader.ReadByte())) <> 0
                                                      str = str & CChar(ChrW(num14))
                                                      num13 += 1
                                                  End While
                                                  If str = "#~" Then
                                                      stream.Position = num12 + 1L
                                                      stream.WriteByte(&H2D)
                                                  End If
                                                  stream.Position = (stream.Position + 3L) And -4L
                                              Next
                                              Dim num15 As UInteger = maxValue - (CUInt(stream.Position) - num6)
                                              Dim num16 As UInteger = CUInt(stream.Position - (position + 4L))
                                              stream.Position = position
                                              stream.Write(BitConverter.GetBytes(CUInt(num8 + num15)), 0, 4)
                                              Dim buffer As Byte() = New Byte(num8 - 1) {}
                                              stream.Read(buffer, 0, CInt(num8))
                                              Dim buffer2 As Byte() = New Byte(num16 - num8 - 1) {}
                                              stream.Read(buffer2, 0, buffer2.Length)
                                              stream.Position = position + 4L
                                              stream.Write(buffer, 0, buffer.Length)
                                              stream.Write(New Byte(num15 - 1) {}, 0, CInt(num15))
                                              stream.Write(buffer2, 0, buffer2.Length)
                                              stream.Seek(236, SeekOrigin.Begin)
                                              stream.Write(BitConverter.GetBytes(rand.Next(1000, 10000)), 0, 4)
                                              reader.ReadUInt32()
                                              stream.Write(BitConverter.GetBytes(rand.Next(11, 14)), 0, 4) 'Anti-Decompilation
                                              stream.Flush()
                                              stream.Close()
                                              reader.Close()

                                              Return accessor
                                          End Function

            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try

        End Sub

        Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
            target = value
            Return value
        End Function

        Private Shared Sub Randomize(Of T)(ByVal tbl As MetadataTable(Of T))
            Dim localArray As T() = Enumerable.ToArray(Of T)(Enumerable.OfType(Of T)(tbl))
            Dim i As Integer
            For i = 0 To localArray.Length - 1
                Dim local As T = localArray(i)
                Dim index As Integer = rand.Next(0, localArray.Length)
                localArray(i) = localArray(index)
                localArray(index) = local
            Next i
            tbl.Clear()
            Dim local2 As T
            For Each local2 In localArray
                tbl.AddRow(local2)
            Next
        End Sub

#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/Mild.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports System.Text.RegularExpressions
Imports Helper.CryptoHelper
Imports System.Resources
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Exclusion
Imports System.IO

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Mild
        Inherits Source

#Region " Fields "
        Private Shared MdByString As New Dictionary(Of String, MethodDefinition)
        Private Shared MdByInteger As New Dictionary(Of Integer, MethodDefinition)
        Private Shared MdByDouble As New Dictionary(Of Double, MethodDefinition)
        Private Shared MdBySingle As New Dictionary(Of Single, MethodDefinition)
        Private Shared MdByByte As New Dictionary(Of Byte, MethodDefinition)
        Private Shared MdByRef As New Dictionary(Of MethodReference, MethodDefinition)
        Private Shared Types As New List(Of TypeDefinition)
#End Region

#Region " Methods "
        Friend Shared Function DoJob(asm As AssemblyDefinition, Framework$, Exclude As ExcludeList, Optional ByVal packIt As Boolean = False) As AssemblyDefinition
            AssemblyDef = asm
            Frmwk = Framework
            Pack = packIt

            For Each m As ModuleDefinition In asm.Modules
                Types.AddRange(m.GetAllTypes())
                For Each type As TypeDefinition In Types
                    If NameChecker.IsRenamable(type) Then
                        If Exclude.isHideCallsExclude(type) = False Then
                            IterateType(type)
                        End If
                    End If
                Next
                Types.Clear()
            Next

            MethodByClear()
            Return asm
        End Function

        Private Shared Sub MethodByClear()
            MdByString.Clear()
            MdByInteger.Clear()
            MdByDouble.Clear()
            MdBySingle.Clear()
            MdByByte.Clear()
            MdByRef.Clear()
        End Sub

        Private Shared Sub IterateType(ByVal td As TypeDefinition)
            Dim publicMethods As New List(Of MethodDefinition)()
            publicMethods.AddRange(From m In td.Methods Where (m.HasBody AndAlso m.Body.Instructions.Count > 2 AndAlso Not completedMethods.Contains(m) AndAlso Not m.DeclaringType.BaseType Is Nothing AndAlso Not m.DeclaringType.BaseType.Name = "ApplicationSettingsBase" AndAlso Not Finder.FindCustomAttributeByName(m.DeclaringType, "EditorBrowsableAttribute")))
            Try
                For Each md In publicMethods
                    If publicMethods.Contains(md) Then
                        If Utils.HasUnsafeInstructions(md) = False Then
                            Using optim As New Msil(md.Body)
                                For i = 0 To md.Body.Instructions.Count - 1
                                    Dim Instruction = md.Body.Instructions(i)

                                    If Not completedInstructions.Contains(Instruction) Then
                                        Dim mdFinal As MethodDefinition = Nothing
                                        Dim index% = md.Body.Instructions.IndexOf(Instruction)

                                        If (Instruction.OpCode = OpCodes.Ldc_I4) Then
                                            If isValidIntegerOperand(Instruction) AndAlso Not Randomizer.invisibleChars.Contains(CInt(Instruction.Operand)) Then
                                                If Not Instruction.Next Is Nothing AndAlso Not Instruction.Next.Operand Is Nothing Then
                                                    If Instruction.Next.Operand.ToString.EndsWith("System.Int32)") Then
                                                        If MdByInteger.ContainsKey(CInt(Instruction.Operand)) Then
                                                            mdFinal = MdByInteger.Item(CInt(Instruction.Operand))
                                                        Else
                                                            mdFinal = CreateMethod(Integer.Parse(Instruction.Operand.ToString), md)
                                                            MdByInteger.Add(CInt(Instruction.Operand), mdFinal)
                                                        End If
                                                        If (Not mdFinal Is Nothing) Then
                                                            md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                            md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                            completedMethods.Add(mdFinal)
                                                            completedInstructions.Add(Instruction)
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        ElseIf Instruction.OpCode = OpCodes.Ldc_I4_0 OrElse Instruction.OpCode = OpCodes.Ldc_I4_1 OrElse Instruction.OpCode = OpCodes.Ldc_I4_2 _
                                             OrElse Instruction.OpCode = OpCodes.Ldc_I4_3 OrElse Instruction.OpCode = OpCodes.Ldc_I4_4 OrElse Instruction.OpCode = OpCodes.Ldc_I4_5 _
                                              OrElse Instruction.OpCode = OpCodes.Ldc_I4_6 OrElse Instruction.OpCode = OpCodes.Ldc_I4_7 OrElse Instruction.OpCode = OpCodes.Ldc_I4_8 Then
                                            Dim num = Integer.Parse(Instruction.OpCode.ToString().Split(".")(2))

                                            If MdByInteger.ContainsKey(num) Then
                                                mdFinal = MdByInteger.Item(num)
                                            Else
                                                mdFinal = CreateMethod(num, md)
                                                MdByInteger.Add(num, mdFinal)
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruction)
                                            End If
                                        ElseIf (Instruction.OpCode = OpCodes.Ldstr) Then
                                            If Not CStr(Instruction.Operand) = String.Empty Then
                                                If MdByString.ContainsKey(CStr(Instruction.Operand)) Then
                                                    mdFinal = MdByString.Item(CStr(Instruction.Operand))
                                                Else
                                                    mdFinal = CreateMethod(CStr(Instruction.Operand), md)
                                                    MdByString.Add(CStr(Instruction.Operand), mdFinal)
                                                End If
                                                If (Not mdFinal Is Nothing) Then
                                                    md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                    md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                    completedMethods.Add(mdFinal)
                                                    completedInstructions.Add(Instruction)
                                                End If
                                            End If
                                        ElseIf Instruction.OpCode = OpCodes.Ldc_I4_S Then
                                            If MdByByte.ContainsKey(CByte(Instruction.Operand)) Then
                                                mdFinal = MdByByte.Item(CByte(Instruction.Operand))
                                            Else
                                                mdFinal = CreateMethod(Byte.Parse(Instruction.Operand.ToString), md)
                                                MdByByte.Add(CByte(Instruction.Operand), mdFinal)
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruction)
                                            End If
                                        ElseIf (Instruction.OpCode = OpCodes.Newobj) Then
                                            Dim mRef = DirectCast(Instruction.Operand, MethodReference)
                                            If Not mRef Is Nothing Then
                                                If MdByRef.ContainsKey(mRef) Then
                                                    mdFinal = MdByRef.Item(mRef)
                                                Else
                                                    mdFinal = CreateReferenceMethod(mRef, md)
                                                    MdByRef.Add(mRef, mdFinal)
                                                End If
                                                If (Not mdFinal Is Nothing) Then
                                                    md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                    md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                    completedMethods.Add(mdFinal)
                                                    completedInstructions.Add(Instruction)
                                                End If
                                            End If
                                        ElseIf (Instruction.OpCode = OpCodes.Ldc_R4) Then
                                            If MdBySingle.ContainsKey(CSng(Instruction.Operand)) Then
                                                mdFinal = MdBySingle.Item(CSng(Instruction.Operand))
                                            Else
                                                mdFinal = CreateMethod(CSng(Instruction.Operand), md)
                                                MdBySingle.Add(CSng(Instruction.Operand), mdFinal)
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruction)
                                            End If
                                        ElseIf (Instruction.OpCode = OpCodes.Ldc_R8) Then
                                            If MdByDouble.ContainsKey(CDbl(Instruction.Operand)) Then
                                                mdFinal = MdByDouble.Item(CDbl(Instruction.Operand))
                                            Else
                                                mdFinal = CreateMethod(CDbl(Instruction.Operand), md)
                                                MdByDouble.Add(CDbl(Instruction.Operand), mdFinal)
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)

                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruction)
                                            End If
                                        End If
                                    End If
                                Next
                                optim.FixBranchOffsets()
                                optim.MethodBody.SimplifyMacros()
                            End Using
                        End If
                    End If
                Next
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            publicMethods.Clear()
        End Sub

        Private Shared Function CreateReferenceMethod(targetConstructor As MethodReference, md As MethodDefinition) As MethodDefinition
            If (targetConstructor.Parameters.Count <> 0) Then
                Return Nothing
            End If
            Dim item As New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(targetConstructor.DeclaringType))
            item.Body = New MethodBody(item)
            Dim ilProc As ILProcessor = item.Body.GetILProcessor()
            With ilProc
                .Body.MaxStackSize = 1
                .Body.InitLocals = True
                .Emit(OpCodes.Newobj, targetConstructor)
                .Emit(OpCodes.Ret)
            End With

            md.DeclaringType.Methods.Add(item)

            Return item
        End Function

        Private Shared Function CreateMethod(value As Object, md As MethodDefinition) As MethodDefinition
            Dim opc As OpCode = Nothing
            Select Case value.GetType
                Case GetType(String)
                    opc = OpCodes.Ldstr
                Case GetType(Integer)
                    opc = OpCodes.Ldc_I4
                Case GetType(Byte)
                    opc = OpCodes.Ldc_I4_S
                Case GetType(Single)
                    opc = OpCodes.Ldc_R4
                Case GetType(Double)
                    opc = OpCodes.Ldc_R8
            End Select
            Dim item As New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(value.GetType))
            item.Body = New MethodBody(item)
            Dim ilProc As ILProcessor = item.Body.GetILProcessor()
            With ilProc
                .Body.MaxStackSize = 1
                .Body.InitLocals = True
                .Emit(opc, value)
                .Emit(OpCodes.Ret)
            End With

            md.DeclaringType.Methods.Add(item)

            Return item
        End Function

#End Region

    End Class

End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/Numeric.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports System.Text.RegularExpressions
Imports Helper.CryptoHelper
Imports System.Resources
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Numeric
        Inherits Source

#Region " Fields "
        Private Shared DecryptReadResources As Stub
        Private Shared DecryptInt As Stub
        Private Shared DecryptRPN As Stub
        Private Shared MethodByInteger As New Dictionary(Of Integer, MethodDefinition)
        Private Shared MethodByIntegerS As New Dictionary(Of Integer, MethodDefinition)
        Private Shared MethodByInteger2 As New Dictionary(Of Integer, MethodDefinition)
        Private Shared Types As New List(Of TypeDefinition)()
#End Region

#Region " Methods "
        Friend Shared Function DoJob(ByVal asm As AssemblyDefinition, Framework$, encryptToRes As EncryptType, Exclude As ExcludeList, Optional ByVal packIt As Boolean = False) As AssemblyDefinition
            AssemblyDef = asm
            Frmwk = Framework
            Pack = packIt
            EncryptToResources = encryptToRes

            If encryptToRes = EncryptType.ToResources Then
                ResName = Randomizer.GenerateNew
                ResWriter = New ResourceWriter(ResName & ".resources")
                DecryptReadResources = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With DecryptReadResources
                    .ResolveTypeFromFile(ReadFromResourcesStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                    completedMethods.Add(.GetMethod2)
                    completedMethods.Add(.GetMethod3)
                End With
            End If

            DecryptInt = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptInt
                .ResolveTypeFromFile(DecryptIntStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
            End With

            DecryptRPN = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptRPN
                .ResolveTypeFromFile(DecryptRPNStub(.className, .funcName1, .funcName2), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
                completedMethods.Add(.GetMethod2)
            End With

            For Each m As ModuleDefinition In asm.Modules
                Types.AddRange(m.GetAllTypes())
                For Each type As TypeDefinition In Types
                    If NameChecker.IsRenamable(type) Then
                        If Exclude.isIntegerEncodExclude(type) = False Then
                            IterateType(type)
                        End If
                    End If
                Next
                Types.Clear()
            Next

            If encryptToRes = EncryptType.ToResources Then
                If Not ResWriter Is Nothing Then ResWriter.Close()
                InjectResource()
            End If

            MethodByClear()
            DeleteStubs()
            CleanUp()

            Return asm
        End Function

        Private Shared Sub IterateType(ByVal td As TypeDefinition)
            Dim publicMethods As New List(Of MethodDefinition)()
            publicMethods.AddRange(From m In td.Methods Where (m.HasBody AndAlso m.Body.Instructions.Count > 2 AndAlso Not completedMethods.Contains(m) AndAlso Not Finder.FindCustomAttributeByName(m.DeclaringType, "EditorBrowsableAttribute")))
            Try
                For Each md In publicMethods
                    If publicMethods.Contains(md) Then
                        'If Utils.HasUnsafeInstructions(md) = False Then
                        Using optim As New Msil(md.Body)
                            For i = 0 To md.Body.Instructions.Count - 1
                                Dim Instruct = md.Body.Instructions(i)

                                If Not completedInstructions.Contains(Instruct) Then
                                    Dim mdFinal As MethodDefinition = Nothing

                                    Dim index As Integer = md.Body.Instructions.IndexOf(Instruct)
                                    If ((Instruct.OpCode = OpCodes.Ldc_I4) OrElse (Instruct.OpCode = OpCodes.Ldc_I4_S)) Then
                                        If isValidOperand(Instruct) AndAlso CInt(Instruct.Operand) > 1 Then
                                            If Instruct.OpCode = OpCodes.Ldc_I4 Then
                                                If Not MethodByInteger.TryGetValue(CInt(Instruct.Operand), mdFinal) Then
                                                    If Randomizer.GenerateBoolean Then

                                                        mdFinal = New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), md.DeclaringType.Module.Import(GetType(Integer)))
                                                        mdFinal.Body = New MethodBody(mdFinal)

                                                        If EncryptToResources = EncryptType.ToResources Then
                                                            Dim integ = Randomizer.GenerateInvisible

                                                            Dim encStr = Generator.IntEncrypt(CInt(Instruct.Operand), integ)
                                                            Dim dataKeyName = Randomizer.GenerateNew
                                                            ResWriter.AddResource(dataKeyName, encStr)

                                                            Dim ilProc = mdFinal.Body.GetILProcessor()
                                                            With ilProc
                                                                .Body.MaxStackSize = 2
                                                                .Body.InitLocals = True
                                                                mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Integer))))
                                                                .Emit(OpCodes.Ldstr, dataKeyName)
                                                                .Emit(OpCodes.Call, md.Module.Import(DecryptReadResources.GetMethod1))
                                                                .Emit(OpCodes.Ldc_I4, integ)
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptInt.GetMethod1))
                                                                .Emit(OpCodes.Stloc_0)
                                                                .Emit(OpCodes.Ldloc_0)
                                                                .Emit(OpCodes.Ret)
                                                            End With

                                                            md.DeclaringType.Methods.Add(mdFinal)
                                                            MethodByInteger.Add(CInt(Instruct.Operand), mdFinal)
                                                        Else
                                                            Dim integ = Randomizer.GenerateInvisible
                                                            Dim encStr = Generator.IntEncrypt(CInt(Instruct.Operand), integ)

                                                            Dim ilProc = mdFinal.Body.GetILProcessor()
                                                            With ilProc
                                                                .Body.MaxStackSize = 2
                                                                .Body.InitLocals = True
                                                                mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Integer))))
                                                                .Emit(OpCodes.Ldstr, encStr)
                                                                .Emit(OpCodes.Ldc_I4, integ)
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptInt.GetMethod1))
                                                                .Emit(OpCodes.Stloc_0)
                                                                .Emit(OpCodes.Ldloc_0)
                                                                .Emit(OpCodes.Ret)
                                                            End With

                                                            md.DeclaringType.Methods.Add(mdFinal)
                                                            MethodByInteger.Add(CInt(Instruct.Operand), mdFinal)
                                                        End If
                                                    Else
                                                        Dim resultPrimes = GetPrimes(CInt(Instruct.Operand))
                                                        Dim countPrimes = resultPrimes.Count
                                                        If countPrimes > 2 Then

                                                            Dim num = CInt(Instruct.Operand)
                                                            Dim divider0 = 0
                                                            Dim resultdivider0 = DetermineDiv(num, divider0)
                                                            Dim StrDivider0 = resultdivider0 & " / " & divider0
                                                            Dim divider1 = 0
                                                            Dim resultdivider1 = DetermineDiv(num, divider1)
                                                            Dim StrDivider1 = resultdivider1 & " / " & divider1

                                                            Dim StrDivider = StrDivider0 & " - " & StrDivider1 & " + "

                                                            Dim strPrimes = String.Empty
                                                            strPrimes = String.Join(" ", resultPrimes).TrimEnd(" ")
                                                            For k% = 0 To countPrimes - 2
                                                                strPrimes &= " *"
                                                            Next

                                                            Dim InFix = (StrDivider & strPrimes).TrimEnd(" ")

                                                            Dim postfix = String.Empty
                                                            Dim bResult = InfixToPostfixConvert(InFix, postfix)

                                                            postfix = postfix.TrimEnd(" ").Replace(" ", ",")

                                                            mdFinal = New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(GetType(Integer)))
                                                            mdFinal.Body = New MethodBody(mdFinal)

                                                            Dim ilProc = mdFinal.Body.GetILProcessor()
                                                            With ilProc
                                                                .Body.MaxStackSize = 2
                                                                .Body.InitLocals = True
                                                                mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Integer))))
                                                                .Emit(OpCodes.Ldstr, postfix)
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptRPN.GetMethod2))
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptRPN.GetMethod1))
                                                                .Emit(OpCodes.Stloc_0)
                                                                .Emit(OpCodes.Ldloc_0)
                                                                .Emit(OpCodes.Ret)
                                                            End With

                                                            md.DeclaringType.Methods.Add(mdFinal)
                                                            MethodByInteger.Add(CInt(Instruct.Operand), mdFinal)
                                                        Else
                                                            Dim divider0 = 0
                                                            Dim resultdivider0 = DetermineDiv(CInt(Instruct.Operand), divider0)
                                                            Dim str = resultdivider0 & "," & divider0 & ",/"

                                                            mdFinal = New MethodDefinition(Randomizer.GenerateNew, (MethodAttributes.CompilerControlled Or (MethodAttributes.FamANDAssem Or (MethodAttributes.Family Or MethodAttributes.Static))), AssemblyDef.MainModule.Import(GetType(Integer)))
                                                            mdFinal.Body = New MethodBody(mdFinal)

                                                            Dim ilProc = mdFinal.Body.GetILProcessor()
                                                            With ilProc
                                                                .Body.MaxStackSize = 2
                                                                .Body.InitLocals = True
                                                                mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Integer))))
                                                                .Emit(OpCodes.Ldstr, str)
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptRPN.GetMethod2))
                                                                .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(DecryptRPN.GetMethod1))
                                                                .Emit(OpCodes.Stloc_0)
                                                                .Emit(OpCodes.Ldloc_0)
                                                                .Emit(OpCodes.Ret)
                                                            End With

                                                            md.DeclaringType.Methods.Add(mdFinal)
                                                            MethodByInteger.Add(CInt(Instruct.Operand), mdFinal)
                                                        End If
                                                    End If
                                                Else
                                                    mdFinal = MethodByInteger.Item(CInt(Instruct.Operand))
                                                End If
                                            ElseIf Instruct.OpCode = OpCodes.Ldc_I4_S Then
                                                Dim num4 As Double = Math.Log10(Convert.ToDouble(Instruct.Operand))

                                                Dim methodName = Randomizer.GenerateNew
                                                mdFinal = New MethodDefinition(methodName, MethodAttributes.[Static] Or MethodAttributes.[Public] Or MethodAttributes.HideBySig, AssemblyDef.MainModule.Import(GetType(Integer)))
                                                mdFinal.Body = New MethodBody(mdFinal)

                                                Dim ilProc = mdFinal.Body.GetILProcessor()
                                                With ilProc
                                                    .Body.MaxStackSize = 8
                                                    .Body.InitLocals = True
                                                    mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Integer))))
                                                    .Emit(OpCodes.Ldc_R8, CDbl(10))
                                                    .Emit(OpCodes.Ldc_R8, num4)
                                                    .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(GetType(Math).GetMethod("Pow", New Type() {GetType(Double), GetType(Double)})))
                                                    .Emit(OpCodes.Call, AssemblyDef.MainModule.Import(GetType(Convert).GetMethod("ToInt32", New Type() {GetType(Double)})))
                                                    .Emit(OpCodes.Stloc_0)
                                                    .Emit(OpCodes.Ldloc_0)
                                                    .Emit(OpCodes.Ret)
                                                End With

                                                md.DeclaringType.Methods.Add(mdFinal)
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                If mdFinal.DeclaringType.IsNotPublic Then
                                                    mdFinal.DeclaringType.IsPublic = True
                                                End If
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)
                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruct)
                                            End If
                                        End If
                                    ElseIf (Instruct.OpCode = OpCodes.Ldc_R4) Then
                                        If isValidOperand(Instruct) AndAlso CSng(Instruct.Operand) >= 0 Then
                                            Dim integ As Single
                                            If Single.TryParse(Instruct.Operand, integ) Then
                                                Dim pdefName = Randomizer.GenerateNew

                                                Dim pdef As New PropertyDefinition(pdefName, PropertyAttributes.None, AssemblyDef.MainModule.Import(GetType(Single)))
                                                md.DeclaringType.Properties.Add(pdef)

                                                mdFinal = New MethodDefinition(("get_" & pdef.Name), MethodAttributes.Static Or MethodAttributes.Public, pdef.PropertyType)
                                                mdFinal.Body = New MethodBody(mdFinal)

                                                pdef.GetMethod = mdFinal
                                                pdef.DeclaringType.Methods.Add(mdFinal)

                                                If Not pdef.DeclaringType.IsInterface Then
                                                    Dim iLProcessor = mdFinal.Body.GetILProcessor
                                                    With iLProcessor
                                                        .Body.MaxStackSize = 1
                                                        .Body.InitLocals = True
                                                        mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Single))))
                                                        .Emit(OpCodes.Ldc_R4, integ)
                                                        .Emit(OpCodes.Ret)
                                                    End With
                                                Else
                                                    mdFinal.IsAbstract = True
                                                    mdFinal.IsVirtual = True
                                                    mdFinal.IsNewSlot = True
                                                End If
                                                mdFinal.IsSpecialName = True
                                                mdFinal.IsGetter = True
                                            End If
                                            If (Not mdFinal Is Nothing) Then
                                                If mdFinal.DeclaringType.IsNotPublic Then
                                                    mdFinal.DeclaringType.IsPublic = True
                                                End If
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)
                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruct)
                                            End If
                                        End If
                                    ElseIf (Instruct.OpCode = OpCodes.Ldc_R8) Then
                                        If isValidOperand(Instruct) AndAlso CDbl(Instruct.Operand) >= 0 Then

                                            Dim integ As Double
                                            If Double.TryParse(Instruct.Operand, integ) Then

                                                Dim pdefName = Randomizer.GenerateNew

                                                Dim pdef As New PropertyDefinition(pdefName, PropertyAttributes.None, AssemblyDef.MainModule.Import(GetType(Double)))
                                                md.DeclaringType.Properties.Add(pdef)

                                                mdFinal = New MethodDefinition(("get_" & pdef.Name), MethodAttributes.Static Or MethodAttributes.Public, pdef.PropertyType)
                                                mdFinal.Body = New MethodBody(mdFinal)

                                                pdef.GetMethod = mdFinal
                                                pdef.DeclaringType.Methods.Add(mdFinal)

                                                If Not pdef.DeclaringType.IsInterface Then
                                                    Dim iLProcessor = mdFinal.Body.GetILProcessor
                                                    With iLProcessor
                                                        .Body.MaxStackSize = 1
                                                        .Body.InitLocals = True
                                                        mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(Double))))
                                                        .Emit(OpCodes.Ldc_R8, integ)
                                                        .Emit(OpCodes.Ret)
                                                    End With
                                                Else
                                                    mdFinal.IsAbstract = True
                                                    mdFinal.IsVirtual = True
                                                    mdFinal.IsNewSlot = True
                                                End If
                                                mdFinal.IsSpecialName = True
                                                mdFinal.IsGetter = True
                                            End If

                                            If (Not mdFinal Is Nothing) Then
                                                If mdFinal.DeclaringType.IsNotPublic Then
                                                    mdFinal.DeclaringType.IsPublic = True
                                                End If
                                                md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                                md.Body.Instructions.Item(index).Operand = AssemblyDef.MainModule.Import(mdFinal)
                                                completedMethods.Add(mdFinal)
                                                completedInstructions.Add(Instruct)
                                            End If
                                        End If
                                    End If
                                End If
                            Next
                            optim.FixBranchOffsets()
                            optim.MethodBody.SimplifyMacros()
                        End Using
                    End If
                Next
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            publicMethods.Clear()
        End Sub

        Private Shared Function GetPrimes(n As Decimal) As List(Of Integer)
            Dim storage As New List(Of Integer)()
            While n > 1
                Dim i% = 1
                While True
                    If IsPrime(i) Then
                        If (CDec(n) / i) = Math.Round(CDec(n) / i) Then
                            n /= i
                            storage.Add(i)
                            Exit While
                        End If
                    End If
                    i += 1
                End While
            End While
            Return storage
        End Function

        Private Shared Function IsPrime(n As Integer) As Boolean
            If n <= 1 Then
                Return False
            End If
            For i% = 2 To Math.Sqrt(n)
                If n Mod i = 0 Then
                    Return False
                End If
            Next
            Return True
        End Function

        Private Shared Function DetermineDiv(ByVal real As Integer, ByRef div As Integer) As Integer
            Dim num% = rand.Next(5, 40)
            div = num
            Dim v% = real
            Try
                v = (real * num)
            Catch ex As System.OverflowException
                div = 1
            End Try

            Return v
        End Function

        Private Shared Function InfixToPostfixConvert(ByRef infixBuffer As String, ByRef postfixBuffer As String) As Boolean
            Dim prior% = 0
            postfixBuffer = ""

            Dim s1 As New Stack(Of Char)

            For i% = 0 To infixBuffer.Length - 1
                Dim item As Char = infixBuffer.Chars(i)
                Select Case item
                    Case "+"c, "-"c, "*"c, "/"c
                        If (s1.Count <= 0) Then
                            s1.Push(item)
                        Else
                            If ((s1.Peek = "*"c) OrElse (s1.Peek = "/"c)) Then
                                prior = 1
                            Else
                                prior = 0
                            End If
                            If (prior = 1) Then
                                Select Case item
                                    Case "+"c, "-"c
                                        postfixBuffer = (postfixBuffer & CStr(s1.Pop))
                                        i -= 1
                                        Continue For
                                End Select
                                postfixBuffer = (postfixBuffer & CStr(s1.Pop))
                                i -= 1
                            Else
                                Select Case item
                                    Case "+"c, "-"c
                                        postfixBuffer = (postfixBuffer & CStr(s1.Pop))
                                        s1.Push(item)
                                        Continue For
                                End Select
                                s1.Push(item)
                            End If
                        End If
                        Exit Select
                    Case Else
                        postfixBuffer = (postfixBuffer & CStr(item))
                        Exit Select
                End Select
            Next

            Dim len% = s1.Count
            For j% = 0 To len - 1
                postfixBuffer = (postfixBuffer & CStr(s1.Pop))
            Next

            postfixBuffer = postfixBuffer.Replace("/", " / ").Replace("*", " * ").Replace("+", " + ").Replace("-", " - ")
            postfixBuffer = New Regex("[ ]{2,}", RegexOptions.None).Replace(postfixBuffer, " ")
            Return True
        End Function

        Private Shared Sub DeleteStubs()
            If Not DecryptReadResources Is Nothing Then DecryptReadResources.DeleteDll()
            If Not DecryptInt Is Nothing Then DecryptInt.DeleteDll()
            If Not DecryptRPN Is Nothing Then DecryptRPN.DeleteDll()
        End Sub

        Private Shared Sub MethodByClear()
            MethodByInteger.Clear()
            MethodByIntegerS.Clear()
            MethodByInteger2.Clear()
        End Sub
#End Region

    End Class

End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/ObfuscationInfos.vb
================================================
ï»¿Namespace Core.Obfuscation.Protection
    Public Class ObfuscationInfos
        Implements IDisposable

#Region " Properties "
        Private m_Enabled As Boolean
        Public ReadOnly Property Enabled As Boolean
            Get
                Return m_Enabled
            End Get
        End Property

        Private m_RenameResourcesContent As Boolean
        Public ReadOnly Property RenameResourcesContent As Boolean
            Get
                Return m_RenameResourcesContent
            End Get
        End Property

        Private m_EncryptResources As Boolean
        Public ReadOnly Property EncryptResources As Boolean
            Get
                Return m_EncryptResources
            End Get
        End Property

        Private m_CompressResources As Boolean
        Public ReadOnly Property CompressResources As Boolean
            Get
                Return m_CompressResources
            End Get
        End Property

        Private m_AntiIlDasm As Boolean
        Public ReadOnly Property AntiIlDasm As Boolean
            Get
                Return m_AntiIlDasm
            End Get
        End Property

        Private m_AntiTamper As Boolean
        Public ReadOnly Property AntiTamper As Boolean
            Get
                Return m_AntiTamper
            End Get
        End Property

        Private m_AntiDebug As Boolean
        Public ReadOnly Property AntiDebug As Boolean
            Get
                Return m_AntiDebug
            End Get
        End Property

        Private m_AntiDumper As Boolean
        Public ReadOnly Property AntiDumper As Boolean
            Get
                Return m_AntiDumper
            End Get
        End Property

        'Private m_AntiReflector As Boolean
        'Public ReadOnly Property AntiReflector As Boolean
        '    Get
        '        Return m_AntiReflector
        '    End Get
        'End Property

        Private m_EncryptBoolean As Boolean
        Public ReadOnly Property EncryptBoolean As Boolean
            Get
                Return m_EncryptBoolean
            End Get
        End Property

        Private m_EncryptNumeric As Boolean
        Public ReadOnly Property EncryptNumeric As Boolean
            Get
                Return m_EncryptNumeric
            End Get
        End Property

        Private m_EncryptString As Boolean
        Public ReadOnly Property EncryptString As Boolean
            Get
                Return m_EncryptString
            End Get
        End Property

        Private m_HidePublicCalls As Boolean
        Public ReadOnly Property HidePublicCalls As Boolean
            Get
                Return m_HidePublicCalls
            End Get
        End Property

        Private m_InvalidOpcodes As Boolean
        Public ReadOnly Property InvalidOpcodes As Boolean
            Get
                Return m_InvalidOpcodes
            End Get
        End Property

        Private m_InvalidMetadata As Boolean
        Public ReadOnly Property InvalidMetadata As Boolean
            Get
                Return m_InvalidMetadata
            End Get
        End Property

        Private m_RenameAssembly As Boolean
        Public ReadOnly Property RenameAssembly As Boolean
            Get
                Return m_RenameAssembly
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(Enable As Boolean, RenameResourcesCont As Boolean, EncryptRes As Boolean, CompressRes As Boolean, EncryptNum As Boolean, EncryptBool As Boolean, EncryptStr As Boolean, _
                       AntiIlD As Boolean, AntiT As Boolean, AntiD As Boolean, AntiDump As Boolean, HideCalls As Boolean, InvalidOp As Boolean, InvalidM As Boolean, RenameAss As Boolean)
            m_Enabled = Enable
            m_RenameResourcesContent = RenameResourcesCont
            m_EncryptResources = EncryptRes
            m_CompressResources = CompressRes
            m_EncryptNumeric = EncryptNum
            m_EncryptBoolean = EncryptBool
            m_EncryptString = EncryptStr
            m_AntiIlDasm = AntiIlD
            m_AntiTamper = AntiT
            m_AntiDebug = AntiD
            m_AntiDumper = AntiDump
            m_HidePublicCalls = HideCalls
            m_InvalidOpcodes = InvalidOp
            m_InvalidMetadata = InvalidM
            m_RenameAssembly = RenameAss
        End Sub
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                m_Enabled = False
                m_RenameResourcesContent = False
                m_EncryptResources = False
                m_CompressResources = False
                m_AntiIlDasm = False
                m_AntiTamper = False
                m_AntiDebug = False
                m_AntiDumper = False
                'm_AntiReflector = False
                m_EncryptBoolean = False
                m_EncryptNumeric = False
                m_EncryptString = False
                m_HidePublicCalls = False
                m_InvalidOpcodes = False
                m_InvalidMetadata = False
                m_RenameAssembly = False
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/Pinvoke.vb
================================================
ï»¿Imports System.Text
Imports System.IO
Imports System.CodeDom.Compiler
Imports System.ComponentModel
Imports System.Resources
Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Mono.Cecil.Rocks
Imports Helper.CecilHelper
Imports Helper.CodeDomHelper
Imports Helper.AssemblyHelper
Imports Helper.RandomizeHelper
Imports Implementer.Engine.Processing
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Pinvoke
        Inherits Source

#Region " Fields "
        Private Shared LoaderInvoke As Stub
        Private Shared PinvokeCreate As PinvokeModifier
#End Region

#Region " Constructor "
        Shared Sub New()
            PinvokeCreate = New PinvokeModifier
        End Sub
#End Region

#Region " Methods "

        Friend Shared Sub DoJob(ByVal asm As AssemblyDefinition, Framework$, Exclude As ExcludeList, Optional ByVal packIt As Boolean = False)
            AssemblyDef = asm
            Frmwk = Framework
            Pack = packIt

            Dim Types As New List(Of TypeDefinition)()
            Dim HasPinvokeCalls As Boolean
            For Each mo As ModuleDefinition In asm.Modules
                For Each t In mo.GetAllTypes()
                    Types.Add(t)
                    For Each m In t.Methods
                        If m.IsPInvokeImpl Then
                            HasPinvokeCalls = True
                            Exit For
                        End If
                    Next
                Next
            Next

            If HasPinvokeCalls Then
                LoaderInvoke = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, _
                              Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With LoaderInvoke
                    .ResolveTypeFromFile(DynamicInvokeStub(.className, .funcName1, .funcName2, .funcName3), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                    completedMethods.Add(.GetMethod2)
                    completedMethods.Add(.GetMethod3)
                End With

                PinvokeCreate.AddModuleRef(asm.MainModule)

                For Each type As TypeDefinition In Types
                    If NameChecker.IsRenamable(type) Then
                        If Exclude.isHideCallsExclude(type) = False Then
                            IterateType(type)
                        End If
                    End If
                Next

                LoaderInvoke.DeleteDll()
                PinvokeCreate.Dispose()
            End If

            Types.Clear()
        End Sub

        Private Shared Sub IterateType(ByVal td As TypeDefinition)
            Dim publicMethods As New List(Of MethodDefinition)()
            publicMethods.AddRange(From m In td.Methods Where (m.HasBody AndAlso m.Body.Instructions.Count > 1 AndAlso Not completedMethods.Contains(m)))

            Try
                For Each md In publicMethods
                    If publicMethods.Contains(md) Then
                        If Utils.HasUnsafeInstructions(md) = False Then
                            Using optim As New Msil(md.Body)
                                For i = 0 To md.Body.Instructions.Count - 1
                                    Dim item As Instruction = md.Body.Instructions.Item(i)
                                    If (item.OpCode = OpCodes.Call) Then
                                        Try
                                            Dim originalReference As MethodReference = DirectCast(item.Operand, MethodReference)
                                            Dim originalMethod As MethodDefinition = originalReference.Resolve

                                            If Not originalMethod Is Nothing AndAlso Not originalMethod.DeclaringType Is Nothing AndAlso Not completedMethods.Contains(originalMethod) Then
                                                If originalMethod.IsPInvokeImpl Then
                                                    If originalMethod.Name = "SendMessage" OrElse originalMethod.Name = "PostMessage" Then
                                                        Continue For
                                                    End If

                                                    PinvokeCreate.InitPinvokeInfos(originalMethod, td)
                                                    PinvokeCreate.CreatePinvokeBody(LoaderInvoke)

                                                    completedMethods.Add(originalMethod)
                                                End If
                                            End If
                                        Catch ex As Mono.Cecil.AssemblyResolutionException
                                            Continue For
                                        End Try
                                    End If
                                Next
                                optim.FixBranchOffsets()
                                optim.MethodBody.SimplifyMacros()
                            End Using
                        End If
                    End If
                Next
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            publicMethods.Clear()
        End Sub

#End Region

    End Class

End Namespace




================================================
File: Implementer/Core/Obfuscation/Protection/PinvokeModifier.vb
================================================
ï»¿Imports Mono.Cecil
Imports Helper.CecilHelper
Imports Helper.RandomizeHelper
Imports Mono.Cecil.Cil
Imports System.Runtime.InteropServices
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Obfuscation.Protection
    Public Class PinvokeModifier
        Implements IDisposable

#Region " Fields "
        Private originalMeth As MethodDefinition
        Private iteratedT As TypeDefinition
        Private isNotSystemVoid As Boolean
        Private charSetVal As Integer
        Private moduleName As String
        Private functionName As String
        Private returnedType As TypeReference
        Private parameters As Mono.Collections.Generic.Collection(Of ParameterDefinition)
        Private typeRefs As Generic.List(Of TypeReference)
#End Region

#Region " Methods "
        Public Sub AddModuleRef(mDef As ModuleDefinition)
            Dim module_ref = New ModuleReference("kernel32.dll")
            If Not mDef.ModuleReferences.Any(Function(m) m.Name.ToLower = "kernel32.dll") Then
                mDef.ModuleReferences.Add(module_ref)
            Else
                module_ref = mDef.ModuleReferences.Where(Function(x) x.Name = "kernel32.dll").First
            End If
        End Sub

        Public Sub InitPinvokeInfos(originalMethod As MethodDefinition, iteratedType As TypeDefinition)
            originalMeth = originalMethod
            iteratedT = iteratedType

            charSetVal = CharsetValue(originalMeth.PInvokeInfo)
            isNotSystemVoid = If(Not originalMeth.ReturnType.ToString = "System.Void", True, False)
            moduleName = If(originalMeth.PInvokeInfo.Module.Name.EndsWith(".dll"), originalMeth.PInvokeInfo.Module.Name, originalMeth.PInvokeInfo.Module.Name & ".dll")
            functionName = If(originalMeth.PInvokeInfo.EntryPoint.ToString = Nothing, originalMeth.Name, originalMeth.PInvokeInfo.EntryPoint.ToString)
            returnedType = iteratedT.Module.Import(originalMeth.ReturnType)
            parameters = originalMeth.Parameters
            typeRefs = parameters.ToList.ConvertAll(Of TypeReference)(Function(rt) rt.ParameterType)
        End Sub

        Public Sub CreatePinvokeBody(LoaderInvoke As Stub)
            Dim newDelegate = DelegateEmitter.Create(iteratedT.Module.Assembly, Randomizer.GenerateNew, returnedType, typeRefs)

            Dim ca As New CustomAttribute(iteratedT.Module.Import(GetType(UnmanagedFunctionPointerAttribute).GetConstructor(New Type() {GetType(CallingConvention)})))
            Dim carg = New CustomAttributeArgument(iteratedT.Module.Import(GetType(CallingConvention)), 2)

            ca.ConstructorArguments.Add(carg)

            If Not charSetVal = 1 Then
                Dim caf As New CustomAttributeArgument(iteratedT.Module.Import(GetType(CharSet)), charSetVal)
                Dim canA As New CustomAttributeNamedArgument("CharSet", caf)
                ca.Fields.Add(canA)
            End If

            newDelegate.CustomAttributes.Add(ca)

            iteratedT.Module.Types.Add(newDelegate)

            originalMeth.IsPInvokeImpl = False
            originalMeth.IsPreserveSig = False

            originalMeth.Body = New MethodBody(originalMeth)

            Dim ILProc As ILProcessor = originalMeth.Body.GetILProcessor()
            ILProc.Body.MaxStackSize = 8
            ILProc.Body.InitLocals = True

            If isNotSystemVoid Then
                originalMeth.Body.Variables.Add(New VariableDefinition(returnedType))
            End If

            originalMeth.Body.Variables.Add(New VariableDefinition(iteratedT.Module.Import(newDelegate)))

            ILProc.Emit(OpCodes.Ldstr, moduleName)
            ILProc.Emit(OpCodes.Ldstr, functionName)
            ILProc.Emit(OpCodes.Call, Utils.MakeGeneric(LoaderInvoke.GetMethod3.GetElementMethod, newDelegate.GetElementType))

            If isNotSystemVoid Then
                ILProc.Emit(OpCodes.Stloc_1)
                ILProc.Emit(OpCodes.Ldloc_1)
            Else
                ILProc.Emit(OpCodes.Stloc_0)
                ILProc.Emit(OpCodes.Ldloc_0)
            End If

            If parameters.Count <> 0 Then
                For k = 0 To parameters.Count - 1
                    ILProc.Emit(OpCodes.Ldarg, k)
                    If parameters(k).ParameterType.IsValueType Then
                        iteratedT.Module.Assembly.MainModule.Import(parameters(k).ParameterType)
                    Else
                        iteratedT.Module.Assembly.MainModule.Import(parameters(k).ParameterType.Resolve)
                    End If
                Next
            End If

            ILProc.Emit(OpCodes.Callvirt, iteratedT.Module.Import(Finder.FindMethod(newDelegate, "Invoke")))

            If isNotSystemVoid Then
                ILProc.Emit(OpCodes.Stloc_0)
                ILProc.Emit(OpCodes.Ldloc_0)
            End If

            ILProc.Emit(OpCodes.Ret)
        End Sub

        Private Function CharsetValue(pInfo As PInvokeInfo) As Integer
            If pInfo.IsCharSetNotSpec Then
                Return 1
            ElseIf pInfo.IsCharSetAnsi Then
                Return 2
            ElseIf pInfo.IsCharSetUnicode Then
                Return 3
            ElseIf pInfo.IsCharSetAuto Then
                Return 4
            End If
            Return 0
        End Function
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                functionName = String.Empty
                charSetVal = 1
                moduleName = String.Empty
                isNotSystemVoid = False
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/Str.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports System.Text.RegularExpressions
Imports Helper.CryptoHelper
Imports Helper.UtilsHelper
Imports System.Resources
Imports System.IO
Imports System.CodeDom.Compiler
Imports System.Text
Imports System.IO.Compression
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class Str
        Inherits Source

#Region " Fields "
        Private Shared DecryptReadStringResources As Stub
        Private Shared DecryptXor As Stub
        Private Shared DecryptBase64 As Stub
        Private Shared m_s As MemoryStream = Nothing
        Private Shared m_bw As BinaryWriter = Nothing
        Private Shared randSalt As Random
        Private Shared Types As New List(Of TypeDefinition)
#End Region

#Region " Properties "
        Shared Property objTarget() As Object
        Shared Property XorEncryptType() As Type
#End Region

#Region " Constructor "
        Shared Sub New()
            randSalt = New Random
        End Sub
#End Region

#Region " Methods "
        Friend Shared Function DoJob(ByVal asm As AssemblyDefinition, Framework$, encryptToRes As EncryptType, Exclude As ExcludeList, Optional ByVal packIt As Boolean = False) As AssemblyDefinition
            AssemblyDef = asm
            Frmwk = Framework
            Pack = packIt

            EncryptToResources = encryptToRes

            If encryptToRes = EncryptType.ToResources Then
                ResName = Randomizer.GenerateNew
                m_s = New MemoryStream
                m_bw = New BinaryWriter(m_s)

                DecryptReadStringResources = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With DecryptReadStringResources
                    .ResolveTypeFromFile(ReadStringFromResourcesStub(.className, .funcName1, .funcName2, .funcName3), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                End With
            End If

            DecryptXor = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptXor
                .ResolveTypeFromFile(DecryptXorStub(.className, .funcName1), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
                _XorEncryptType = GenerateEncryptXor()
            End With

            DecryptBase64 = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
            With DecryptBase64
                .ResolveTypeFromFile(FromBase64Stub(.className, .funcName1, .funcName2), Finder.FindDefaultNamespace(asm, Pack), Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew)
                .InjectType(asm)
                completedMethods.Add(.GetMethod1)
                completedMethods.Add(.GetMethod2)
            End With

            For Each m As ModuleDefinition In asm.Modules
                Types.AddRange(m.GetAllTypes())
                For Each type As TypeDefinition In Types
                    If NameChecker.IsRenamable(type) Then
                        If Exclude.isStringEncryptExclude(type) = False Then
                            IterateType(type)
                        End If
                    End If
                Next
                Types.Clear()
            Next

            If encryptToRes = EncryptType.ToResources Then
                Injecter.InjectResource(asm.MainModule, ResName, ResourceType.Embedded, CompressWithGStream(m_s.ToArray))
                m_bw.Close()
            End If

            DeleteStubs()
            CleanUp()

            Return asm
        End Function

        Private Shared Function writeData(str$) As Integer
            Dim IntegPosit% = m_bw.BaseStream.Position
            m_bw.Write(str)
            m_bw.Flush()
            Return IntegPosit
        End Function

        Private Shared Sub DeleteStubs()
            If Not DecryptReadStringResources Is Nothing Then DecryptReadStringResources.DeleteDll()
            If Not DecryptXor Is Nothing Then DecryptXor.DeleteDll()
            If Not DecryptBase64 Is Nothing Then DecryptBase64.DeleteDll()
        End Sub

        Private Shared Sub IterateType(ByVal td As TypeDefinition)
            Dim publicMethods As New List(Of MethodDefinition)()
            publicMethods.AddRange(From m In td.Methods Where (m.HasBody AndAlso m.Body.Instructions.Count >= 1 AndAlso Not completedMethods.Contains(m) AndAlso Not m.Name = "get_ResourceManager" AndAlso Not Utils.isStronglyTypedResourceBuilder(m.DeclaringType) AndAlso Not Finder.FindCustomAttributeByName(m.DeclaringType, "EditorBrowsableAttribute")))

            Try
                For Each md In publicMethods
                    If publicMethods.Contains(md) Then

                        Using optim As New Msil(md.Body)
                            For i = 0 To md.Body.Instructions.Count - 1
                                Dim Instruction As Instruction = md.Body.Instructions(i)
                                If Not completedInstructions.Contains(Instruction) Then
                                    Dim mdFinal As MethodDefinition = Nothing
                                    Dim index As Integer = md.Body.Instructions.IndexOf(Instruction)
                                    If (Instruction.OpCode = OpCodes.Ldstr) Then
                                        Dim str = TryCast(Instruction.Operand, String)
                                        Dim salt = randSalt.Next(1, 255)
                                        Dim addProperty As Boolean = Randomizer.GenerateBoolean
                                        If Not String.IsNullOrWhiteSpace(str) And str.Length > 0 Then
                                            If optim.IsSettingStr(str) = False Then
                                                If Not str = ResName Then
                                                    'If Functions.isBase64StringEncoded(str) = False Then

                                                    mdFinal = New MethodDefinition(Randomizer.GenerateNew, MethodAttributes.[Static] Or MethodAttributes.[Public] Or MethodAttributes.HideBySig, AssemblyDef.MainModule.Import(GetType(String)))
                                                    mdFinal.Body = New MethodBody(mdFinal)

                                                    Dim encXor = EncryptXor(EncodeTo_64(str), salt)

                                                    Dim ilProc As ILProcessor = mdFinal.Body.GetILProcessor()
                                                    ilProc.Body.MaxStackSize = 8
                                                    ilProc.Body.InitLocals = True
                                                    mdFinal.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(String))))

                                                    If EncryptToResources = EncryptType.ToResources Then
                                                        Dim inte = writeData(encXor)
                                                        ilProc.Emit(OpCodes.Ldc_I4, inte)
                                                        ilProc.Emit(OpCodes.Call, DecryptReadStringResources.GetMethod1)
                                                    Else
                                                        ilProc.Emit(Mono.Cecil.Cil.OpCodes.Ldstr, encXor)
                                                    End If

                                                    ilProc.Emit(OpCodes.Ldc_I4, salt)
                                                    ilProc.Emit(OpCodes.Call, DecryptXor.GetMethod1)
                                                    ilProc.Emit(OpCodes.Call, DecryptBase64.GetMethod1)
                                                    ilProc.Emit(OpCodes.Call, DecryptBase64.GetMethod2)
                                                    ilProc.Emit(OpCodes.Stloc_0)
                                                    ilProc.Emit(OpCodes.Ldloc_0)
                                                    ilProc.Emit(OpCodes.Ret)

                                                    md.DeclaringType.Methods.Add(mdFinal)

                                                    If addProperty Then
                                                        Dim pDefinit As New PropertyDefinition(Randomizer.GenerateNew, PropertyAttributes.None, AssemblyDef.MainModule.Import(GetType(String)))
                                                        md.DeclaringType.Properties.Add(pDefinit)

                                                        Dim mDefinit = New MethodDefinition(("get_" & pDefinit.Name), MethodAttributes.Static Or MethodAttributes.Public, pDefinit.PropertyType)
                                                        mDefinit.Body = New MethodBody(mDefinit)
                                                        pDefinit.GetMethod = mDefinit
                                                        pDefinit.DeclaringType.Methods.Add(mDefinit)

                                                        If Not pDefinit.DeclaringType.IsInterface Then
                                                            Dim iLProcessor As ILProcessor = mDefinit.Body.GetILProcessor
                                                            With iLProcessor
                                                                .Body.MaxStackSize = 1
                                                                .Body.InitLocals = True
                                                                mDefinit.Body.Variables.Add(New VariableDefinition(AssemblyDef.MainModule.Import(GetType(String))))
                                                                .Emit(OpCodes.Call, mdFinal)
                                                                .Emit(OpCodes.Stloc_0)
                                                                .Emit(OpCodes.Ldloc_0)
                                                                .Emit(OpCodes.Ret)
                                                            End With
                                                        Else
                                                            mDefinit.IsAbstract = True
                                                            mDefinit.IsVirtual = True
                                                            mDefinit.IsNewSlot = True
                                                        End If
                                                        mDefinit.IsSpecialName = True
                                                        mDefinit.IsGetter = True
                                                    End If
                                                    'End If
                                                End If
                                            End If
                                        End If
                                        If (Not mdFinal Is Nothing) Then
                                            If mdFinal.DeclaringType.IsNotPublic Then
                                                mdFinal.DeclaringType.IsPublic = True
                                            End If
                                            md.Body.Instructions.Item(index).OpCode = OpCodes.Call
                                            md.Body.Instructions.Item(index).Operand = mdFinal

                                            completedMethods.Add(mdFinal)
                                            completedInstructions.Add(Instruction)
                                        End If
                                    End If
                                End If
                            Next
                            optim.FixBranchOffsets()
                            optim.MethodBody.SimplifyMacros()
                        End Using
                    End If
                Next
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            publicMethods.Clear()
        End Sub

        Private Shared Function CompressWithGStream(raw As Byte()) As Byte()
            Using memory As New MemoryStream()
                Using gzip As New GZipStream(memory, CompressionMode.Compress, True)
                    gzip.Write(raw, 0, raw.Length)
                End Using
                Return memory.ToArray()
            End Using
        End Function

        Private Shared Function EncodeTo_64(toEncode$) As String
            Return Convert.ToBase64String(System.Text.Encoding.Unicode.GetBytes(toEncode))
        End Function

        Private Shared Function GenerateEncryptXor() As Type
            _objTarget = DecryptXorType(DecryptXor.className, DecryptXor.funcName1)
            Return _objTarget
        End Function

        Private Shared Function EncryptXor(text$, key%) As String
            Return XorEncryptType.InvokeMember(DecryptXor.funcName1, Reflection.BindingFlags.InvokeMethod Or Reflection.BindingFlags.Default, Nothing, _objTarget, New Object() {text, key})
        End Function

        Overloads Shared Sub CleanUp()
            objTarget() = Nothing
            XorEncryptType() = Nothing
            Frmwk = String.Empty
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Obfuscation/Protection/invalidOpcodes.vb
================================================
ï»¿Imports System.Text
Imports System.IO
Imports System.CodeDom.Compiler
Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports System.ComponentModel
Imports System.Resources
Imports Helper.RandomizeHelper
Imports Helper.CecilHelper
Imports Mono.Cecil.Rocks
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Core.Obfuscation.Protection
    Public NotInheritable Class invalidOpcodes

#Region " Fields "
        Private Shared r As Random
#End Region

#Region " Constructor "
        Shared Sub New()
            r = New Random
        End Sub
#End Region

#Region " Methods "
        Friend Shared Sub Inject(library As AssemblyDefinition, Exclude As ExcludeList)
            For Each mode In (From m In library.Modules
                 Where m.HasTypes
                 Select m)

                For Each type In (From t In mode.Types
                    Where t.HasMethods
                    Select t)

                    For Each method In (From mtd In type.Methods
                        Where mtd.HasBody AndAlso Not Finder.FindCustomAttributeByName(mtd.DeclaringType, "EditorBrowsableAttribute")
                        Select mtd)
                        Using optim As New Msil(method.Body)
                            For i% = 0 To method.Body.Instructions.Count - 1
                                Dim Instruction As Instruction = method.Body.Instructions(i)
                                If Randomizer.GenerateBoolean() Then
                                    If Exclude.isInvalidOpcodesExclude(type) = False Then
                                        optim.StackUnflow(r)
                                    End If
                                Else
                                    If Exclude.isInvalidOpcodesExclude(type) = False Then
                                        optim.StackOverFlow(r)
                                    End If
                                End If
                            Next
                            optim.FixBranchOffsets()
                            optim.MethodBody.SimplifyMacros()
                        End Using
                    Next
                Next
            Next
        End Sub
#End Region

    End Class
End Namespace




================================================
File: Implementer/Core/Packer/Pack.vb
================================================
ï»¿Imports System.IO
Imports System.IO.Compression
Imports System.CodeDom.Compiler
Imports System.Text
Imports System.Reflection
Imports Mono.Cecil
Imports System.Windows.Forms
Imports Helper.CryptoHelper
Imports Core20Reader
Imports Implementer.Core.Versions
Imports Helper.RandomizeHelper
Imports Helper.UtilsHelper
Imports Injections
Imports System.Resources
Imports System.Runtime.CompilerServices
Imports Helper.CecilHelper
Imports System.Runtime.InteropServices
Imports SevenZipLib
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.IconChanger
Imports Implementer.Core.ManifestRequest
Imports System.Drawing

Namespace Core.Packer
    Friend Class Pack
        Inherits Source

#Region " Fields "
        Private m_FilePathToPack As String = String.Empty
        Private m_reverse As Boolean
        Private m_polyXor As New Crypt
#End Region

#Region " Properties "
        Public Property OutputFilePath() As String
#End Region

#Region " Constructor "
        Friend Sub New(ByVal FilePathToPack As String)
            m_FilePathToPack = FilePathToPack
            m_reverse = Randomizer.GenerateBoolean
        End Sub
#End Region

#Region " Methods "
        Friend Function CreateStub(framework$, SevenZipResPath$) As String
            Dim tmpFile = Functions.GetTempFolder & "\" & New FileInfo(m_FilePathToPack).Name.Replace(".exe", Randomizer.GenerateNewAlphabetic & ".exe")
            Try
                Frmwk = framework

                Dim mainmodule = AssemblyDefinition.ReadAssembly(m_FilePathToPack).MainModule

                Dim parameters As New ModuleParameters With {.Architecture = mainmodule.Architecture, _
                                                             .Kind = mainmodule.Kind, _
                                                             .Runtime = mainmodule.Runtime}

                Dim asm = AssemblyDefinition.CreateAssembly(mainmodule.Assembly.Name, mainmodule.Name, parameters)
                Dim asmModule = asm.MainModule
                asmModule.Attributes = (asmModule.Attributes Or (mainmodule.Attributes And ModuleAttributes.Required32Bit))

                File.Copy(m_FilePathToPack, tmpFile, True)

                Dim EncodedResName = GetEncodedFileName(tmpFile)

                Dim PackerLoader = New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)

                With PackerLoader
                    .ReferencedZipperAssembly = New ZipInfos(SevenZipResPath, My.Resources.SevenzipLib, "SevenZipLib", "SevenZipHelper", "Decompress")
                    .ResolveTypeFromFile(PackerStub(PackerLoader, EncodedResName, m_polyXor, m_reverse))
                    .InjectType(asm)
                    completedMethods.Add(.GetMethod1)
                End With

                Dim byt = m_polyXor.Encrypt(File.ReadAllBytes(tmpFile))

                If m_reverse Then Array.Reverse(byt)

                Injecter.InjectResource(asm.MainModule, EncodedResName, ResourceType.Embedded, CompressWithSevenZip(byt).ToArray)
                asm.MainModule.Assembly.EntryPoint = Enumerable.FirstOrDefault(Of MethodDefinition)(PackerLoader.resolvedTypeDef.Methods, DirectCast(Function(mtd) (mtd.Name = "Main"), Func(Of MethodDefinition, Boolean)))
                asm.Write(m_FilePathToPack)

                Return m_FilePathToPack

            Catch ex As Exception
                MsgBox("Error : Packer CreateExecutable : " & vbNewLine & ex.ToString)
            Finally
                Try
                    File.Delete(tmpFile)
                    File.Delete(SevenZipResPath)
                Catch ex As Exception
                End Try
            End Try

            Return m_FilePathToPack
        End Function

        Public Sub ReplaceIcon(newIconByte As Icon)
            Replacer.ReplaceFromIcon(m_FilePathToPack, newIconByte)
        End Sub

        Public Sub InjectAssemblyVersionInfos(vInfos As Infos)
            Injector.InjectAssemblyVersionInfos(m_FilePathToPack, vInfos)
        End Sub

        Public Sub InjectManifest(reqLevel$)
            ManifestWriter.ApplyManifest(m_FilePathToPack, reqLevel)
        End Sub

        Private Function GetEncodedFileName(ByVal asmName As String) As String
            Dim asm = AssemblyDefinition.ReadAssembly(asmName)
            Dim compressedName = Convert.ToBase64String(Encoding.Default.GetBytes(asm.FullName.ToLower))
            compressedName &= ".resources"
            Return compressedName
        End Function

        Private Function CompressWithSevenZip(raw As Byte()) As Byte()
            Return SevenZipHelper.Compress(raw)
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Packer/PackInfos.vb
================================================
ï»¿Imports Implementer.Core.IconChanger
Imports System.IO
Imports System.Drawing

Namespace Core.Packer
    Public Class PackInfos
        Implements IDisposable

#Region " Fields "
        Private m_Enabled As Boolean
        Private m_NewIcon As Icon
        Private m_RequestedLevel As String
#End Region

#Region " Properties "
        Public ReadOnly Property Enabled As Boolean
            Get
                Return m_Enabled
            End Get
        End Property

        Public ReadOnly Property NewIcon As Icon
            Get
                Return m_NewIcon
            End Get
        End Property

        Public ReadOnly Property RequestedLevel As String
            Get
                Return m_RequestedLevel
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(Enable As Boolean, NewIconP$, RequestedL$)
            m_Enabled = Enable
            m_NewIcon = NewIconValue(NewIconP)
            m_RequestedLevel = RequestedL
        End Sub
#End Region

#Region " Methods "
        Private Function NewIconValue(fPath$) As Icon
            If fPath.ToLower.EndsWith(".ico") Then Return New Icon(fPath)
            Return New IconInfos(fPath).NewIcon
        End Function
#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean ' Pour dÃ©tecter les appels redondants

        ' IDisposable
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    ' TODO: supprimez l'Ã©tat managÃ© (objets managÃ©s).
                End If

                ' TODO: libÃ©rez les ressources non managÃ©es (objets non managÃ©s) et substituez la mÃ©thode Finalize() ci-dessous.
                ' TODO: dÃ©finissez les champs volumineux Ã  null.
            End If
            Me.disposedValue = True
        End Sub

        ' Ce code a Ã©tÃ© ajoutÃ© par Visual Basic pour permettre l'implÃ©mentation correcte du modÃ¨le pouvant Ãªtre supprimÃ©.
        Public Sub Dispose() Implements IDisposable.Dispose
            ' Ne modifiez pas ce code. Ajoutez du code de nettoyage dans Dispose(disposing As Boolean) ci-dessus.
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Packer/ZipInfos.vb
================================================
ï»¿Imports System.IO
Imports Mono.Cecil

Namespace Core.Packer
    Public NotInheritable Class ZipInfos

#Region " Fields "
        Private m_fPath As String
        Private m_refByte As Byte()
        Private m_refNewNamespaceName As String
        Private m_refNewTypeName As String
        Private m_refNewMethodName As String
#End Region

#Region " Properties "
        Friend ReadOnly Property fPath As String
            Get
                Return m_fPath
            End Get
        End Property

        Friend ReadOnly Property refByte As Byte()
            Get
                Return m_refByte
            End Get
        End Property

        Friend ReadOnly Property refNewNamespaceName As String
            Get
                Return m_refNewNamespaceName
            End Get
        End Property

        Friend ReadOnly Property refNewTypeName As String
            Get
                Return m_refNewTypeName
            End Get
        End Property

        Friend ReadOnly Property refNewMethodName As String
            Get
                Return m_refNewMethodName
            End Get
        End Property
#End Region

#Region " Constructor "

        Friend Sub New(filePath$, rByte As Byte(), refNewNamespaceName$, refNewTypeName$, refNewMethodName$)
            m_fPath = filePath
            m_refByte = rByte
            m_refNewNamespaceName = refNewNamespaceName
            m_refNewTypeName = refNewTypeName
            m_refNewMethodName = refNewMethodName
        End Sub

#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Resource/Compression.vb
================================================
ï»¿Imports System.IO
Imports System.IO.Compression
Imports System.CodeDom.Compiler
Imports System.Text
Imports System.Reflection
Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Helper.RandomizeHelper
Imports Helper.CryptoHelper
Imports Helper.CecilHelper
Imports Helper.AssemblyHelper
Imports Helper.CodeDomHelper
Imports Helper.UtilsHelper
Imports Implementer.Core.Dependencing
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Obfuscation.Builder

Namespace Core.Resources
    Public Class Compression
        Inherits Source

#Region " Fields "
        Private m_encrypt As Boolean
        Private m_compress As Boolean
#End Region

#Region " Constructor "
        Friend Sub New(ByVal assDef As AssemblyDefinition, ByVal frwk As String, encrypt As Boolean, compress As Boolean, EnabledPack As Boolean)
            AssemblyDef = assDef
            Frmwk = frwk
            m_encrypt = encrypt
            m_compress = compress
            Pack = EnabledPack

            ResName = Randomizer.GenerateNew & ".resources"
        End Sub

        Friend Sub New(ByVal frwk As String, encrypt As Boolean, compress As Boolean, EnabledPack As Boolean)
            Frmwk = frwk
            m_encrypt = encrypt
            m_compress = compress
            Pack = EnabledPack

            ResName = Randomizer.GenerateNew & ".resources"
        End Sub
#End Region

#Region " Methods "
        Friend Sub CreateResolverClass(SevenZip As Boolean)
            Try
                Dim m_NamespaceName = String.Empty
                If Not AssemblyDef Is Nothing Then m_NamespaceName = Finder.FindDefaultNamespace(AssemblyDef, Pack)

                Dim reposit As New Stub(Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic, Randomizer.GenerateNewAlphabetic)
                With reposit
                    .ResolveTypeFromFile(If(SevenZip = False, ResourcesStub(.className, .funcName1, .funcName2, .funcName3, .funcName4, m_encrypt, m_compress), _
                                      SevenZipStub(.className, .funcName1, .funcName2, .funcName3, .funcName4, m_encrypt, m_compress)), m_NamespaceName, Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew, Randomizer.GenerateNew)
                    .InjectToCctor(AssemblyDef)
                    .DeleteDll()
                End With
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub

        Friend Sub InjectSevenzipLibrary(assDef As AssemblyDefinition)
            Dim encryptedBytes = My.Resources.SevenzipLib
            If m_encrypt Then Array.Reverse(encryptedBytes)
            If m_compress Then encryptedBytes = Functions.GZipedByte(encryptedBytes)

            Injecter.InjectResource(assDef.MainModule, ResName, ResourceType.Embedded, encryptedBytes)
        End Sub

        Friend Sub CompressInjectResources(assDef As AssemblyDefinition)
            Dim tempAsm = AssemblyDefinition.CreateAssembly(New AssemblyNameDefinition(Randomizer.GenerateNewAlphabetic, New Version()), Randomizer.GenerateNewAlphabetic, ModuleKind.Dll)
            For Each resou As Mono.Cecil.Resource In assDef.MainModule.Resources
                tempAsm.MainModule.Resources.Add(resou)
            Next

            Dim encryptedBytes As Byte() = Nothing
            Using stream As New MemoryStream()
                tempAsm.Write(stream)
                encryptedBytes = stream.ToArray()
                If m_encrypt Then Array.Reverse(encryptedBytes)
                If m_compress Then encryptedBytes = Functions.GZipedByte(encryptedBytes)
            End Using

            assDef.MainModule.Resources.Clear()
            Injecter.InjectResource(assDef.MainModule, ResName, ResourceType.Embedded, encryptedBytes.ToArray)
        End Sub

#End Region

    End Class
End Namespace


================================================
File: Implementer/Core/Resource/Content.vb
================================================
ï»¿Imports System.Resources
Imports Mono.Cecil
Imports Helper.RandomizeHelper
Imports System.IO
Imports Helper.CecilHelper
Imports System.Text.RegularExpressions
Imports Helper.UtilsHelper
Imports Helper.ResourcesHelper
Imports Implementer.Core.Dependencing
Imports Implementer.engine.Processing

Namespace Core.Resources

    Public NotInheritable Class Content

#Region " Fields "
        Private Shared m_Resources As New List(Of EmbeddedResource)
        Private Shared m_embeddedResource As New Dictionary(Of EmbeddedResource, EmbeddedResource)
#End Region

#Region " Methods "

        Friend Shared Sub Rename(assdef As AssemblyDefinition)
            If assdef.MainModule.HasResources Then
                For Each EmbRes As Resource In assdef.MainModule.Resources
                    m_Resources.Add(EmbRes)
                Next
                For Each modul In (From m In assdef.Modules
                    Where m.HasTypes
                    Select m)
                    For Each type As TypeDefinition In modul.GetTypes
                        RenameContent(type)
                    Next
                Next
            End If
        End Sub

        Private Shared Sub RenameContent(typeDef As TypeDefinition)
            For Each prop In (From p In typeDef.Properties
                Where Not p.GetMethod Is Nothing AndAlso p.GetMethod.Name = "get_ResourceManager" AndAlso p.GetMethod.HasBody
                Select p)
                If prop.GetMethod.Body.Instructions.Count <> 0 Then
                    For Each instruction In prop.GetMethod.Body.Instructions
                        If TypeOf instruction.Operand Is String Then
                            Dim NewResManagerName$ = instruction.Operand
                            For Each EmbRes As Resource In m_Resources
                                UpdateResources(typeDef, EmbRes, NewResManagerName)
                            Next
                        End If
                    Next
                End If
            Next
        End Sub

        Private Shared Sub UpdateResources(TypeDef As TypeDefinition, OriginalEmbeddedRes As EmbeddedResource, KeyNameOriginal$)
            Try
                Dim ToHex = Functions.StreamToHex(OriginalEmbeddedRes.GetResourceStream)
                If Not ToHex.StartsWith(Functions.StrToHex("MZ")) Then
                    If ToHex.Contains(Functions.StrToHex("System.Resources.ResourceReader, mscorlib, ")) Then

                        If Not OriginalEmbeddedRes.GetResourceStream Is Nothing Then
                            Dim NewEmbeddedRes As New ResourceWriter(KeyNameOriginal)

                            Using read As New ResourceReader(OriginalEmbeddedRes.GetResourceStream)
                                For Each Dat As System.Collections.DictionaryEntry In read
                                    Dim data() As Byte = Nothing
                                    Dim dataType = String.Empty
                                    Dim originalDataKey$ = Dat.Key
                                    read.GetResourceData(Dat.Key, dataType, data)
                                    Dim obfuscatedDataKey$ = UpdateKey(NewEmbeddedRes, dataType, data)
                                    UpdateResourcesKeys(TypeDef, obfuscatedDataKey, originalDataKey, OriginalEmbeddedRes.Name)
                                Next
                            End Using

                            NewEmbeddedRes.Generate()
                            NewEmbeddedRes.Close()
                            NewEmbeddedRes.Dispose()

                            UpdateAssembly(TypeDef, KeyNameOriginal, OriginalEmbeddedRes)
                        End If
                    End If
                End If
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub

        Private Shared Sub UpdateResourcesKeys(TypeDef As TypeDefinition, NewKeyName$, OriginalKeyName$, resName$, Optional ByVal Ren As Boolean = False)
            If resName.EndsWith("Resources.resources") = False Then
                If resName.EndsWith(".resources") Then
                    Dim typeFullName$ = resName.Substring(0, resName.LastIndexOf("."))
                    Dim typeName$ = typeFullName.Replace(".resources", String.Empty).Substring(typeFullName.LastIndexOf(".") + 1)
                    Dim typeSearch As TypeDefinition = Finder.FindType(TypeDef.Module.Assembly.MainModule, typeName)
                    If Not typeSearch Is Nothing Then
                        Dim methodSearch As MethodDefinition = Finder.FindMethod(typeSearch, "InitializeComponent")
                        If Not methodSearch Is Nothing Then
                            UpdateMethodBody(methodSearch, NewKeyName, OriginalKeyName)
                        End If
                    End If
                End If
            ElseIf resName.EndsWith("Resources.resources") Then
                For Each pr In TypeDef.Properties
                    If Not pr.GetMethod Is Nothing Then
                        If pr.GetMethod.Name = "get_" & Regex.Replace(OriginalKeyName, "[^\w]+", "_") Then
                            pr.GetMethod.Name = Mapping.RenameMethodMember(pr.GetMethod, Randomizer.GenerateNew())
                            UpdateMethodBody(pr.GetMethod, NewKeyName, OriginalKeyName)
                        End If
                    End If
                Next
            End If
        End Sub

        Private Shared Sub UpdateMethodBody(Meth As MethodDefinition, NewKeyName$, OriginalKeyName$)
            If Meth.HasBody AndAlso Meth.Body.Instructions.Count <> 0 Then
                For Each instruction As Cil.Instruction In Meth.Body.Instructions
                    If TypeOf instruction.Operand Is String Then
                        If CStr(instruction.Operand) = OriginalKeyName Then
                            instruction.Operand = NewKeyName
                        End If
                    End If
                Next
            End If
        End Sub

        Private Shared Function UpdateKey(NewEmbeddedRes As ResourceWriter, datatype As Object, data As Byte(), Optional ByVal Ren As Boolean = False) As String
            Dim newdataKey = Randomizer.GenerateNew()
            NewEmbeddedRes.AddResourceData(newdataKey, datatype, data)
            Return newdataKey
        End Function

        Private Shared Sub UpdateAssembly(TypeDef As TypeDefinition, resWriterPath$, OriginalEmbeddedResource As Resource)
            Try
                Dim CompressRes = New EmbeddedResource(OriginalEmbeddedResource.Name, ManifestResourceAttributes.Private, File.ReadAllBytes(My.Application.Info.DirectoryPath & "\" & resWriterPath))
                If Not m_embeddedResource.ContainsKey(OriginalEmbeddedResource) Then
                    m_embeddedResource.Add(OriginalEmbeddedResource, CompressRes)
                    TypeDef.Module.Assembly.MainModule.Resources.Remove(OriginalEmbeddedResource)
                    TypeDef.Module.Assembly.MainModule.Resources.Add(CompressRes)
                End If
                File.Delete(My.Application.Info.DirectoryPath & "\" & resWriterPath)
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End Sub

        Private Shared Sub CleanUpTmpFiles()
            Try
                For Each f In System.IO.Directory.GetFiles(My.Application.Info.DirectoryPath, "*.resources", IO.SearchOption.TopDirectoryOnly)
                    System.IO.File.Delete(f)
                Next
            Catch ex As Exception
            End Try
        End Sub

        Friend Shared Sub Cleanup()
            If m_Resources.Count <> 0 Then m_Resources.Clear()
            If m_embeddedResource.Count <> 0 Then m_embeddedResource.Clear()
            CleanUpTmpFiles()
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Implementer/Core/Versions/Extractor.vb
================================================
ï»¿Imports Helper.ResourcesHelper

Namespace Core.Versions
    Friend NotInheritable Class Extractor

#Region " Methods "
        Friend Shared Sub SaveFileInfoTo(ByVal FileName As String, ByVal ResPath As Byte())
            ResourceEx.UpdateResourceEx(FileName, 1, 16, ResPath)
        End Sub

        Friend Shared Function LoadFileInfoFrom(ByVal FileName As String) As Byte()
            Return ResourceEx.ExtractResourceEx(FileName, "1", New IntPtr(16))
        End Function

        Friend Shared Function ReturnAssemblyInfosFormat(ByVal filename As String) As String
            Dim fvi As FileVersionInfo = FileVersionInfo.GetVersionInfo(filename)
            Return "<" & "Assembly: AssemblyTitle(""" & fvi.FileDescription & """)>" & vbNewLine _
          & "<Assembly: AssemblyDescription(""" & fvi.Comments & """)>" & vbNewLine _
          & "<" & "Assembly: AssemblyCompany(""" & fvi.CompanyName & """)>" & vbNewLine _
          & "<Assembly: AssemblyProduct(""" & fvi.ProductName & """)>" & vbNewLine _
          & "<Assembly: AssemblyCopyright(""" & fvi.LegalCopyright & """)>" & vbNewLine _
          & "<" & "Assembly: AssemblyTrademark(""" & fvi.LegalTrademarks & """)>" & vbNewLine _
          & "<Assembly: AssemblyVersion(""" & fvi.FileVersion & """)>" & vbNewLine _
          & "<Assembly: AssemblyFileVersion(""" & fvi.ProductVersion & """)>" & vbNewLine & vbNewLine
        End Function
#End Region

    End Class
End Namespace


================================================
File: Implementer/Core/Versions/Infos.vb
================================================
ï»¿
Namespace Core.Versions
    Public Class Infos
        Implements IDisposable

#Region " Fields "
        Private m_Enabled As Boolean
        Private m_FileDescription As String
        Private m_Comments As String
        Private m_CompanyName As String
        Private m_ProductName As String
        Private m_LegalCopyright As String
        Private m_LegalTrademarks As String
        Private m_FileVersion As String
        Private m_ProductVersion As String
#End Region

#Region " Properties "

        Public ReadOnly Property Enabled As Boolean
            Get
                Return m_Enabled
            End Get
        End Property

        Public ReadOnly Property FileDescription As String
            Get
                Return m_FileDescription
            End Get
        End Property

        Public ReadOnly Property Comments As String
            Get
                Return m_Comments
            End Get
        End Property

        Public ReadOnly Property CompanyName As String
            Get
                Return m_CompanyName
            End Get
        End Property

        Public ReadOnly Property ProductName As String
            Get
                Return m_ProductName
            End Get
        End Property

        Public ReadOnly Property LegalCopyright As String
            Get
                Return m_LegalCopyright
            End Get
        End Property

        Public ReadOnly Property LegalTrademarks As String
            Get
                Return m_LegalTrademarks
            End Get
        End Property

        Public ReadOnly Property FileVersion As String
            Get
                Return checkVersion(m_FileVersion)
            End Get
        End Property

        Public ReadOnly Property ProductVersion As String
            Get
                Return checkVersion(m_ProductVersion)
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(Enabl As Boolean, FileDescript$, Comment$, CompanyN$, ProductN$, LegalCopy$, LegalTrade$, FileV$, ProductV$)
            m_Enabled = Enabl
            m_FileDescription = FileDescript
            m_Comments = Comment
            m_CompanyName = CompanyN
            m_ProductName = ProductN
            m_LegalCopyright = LegalCopy
            m_LegalTrademarks = LegalTrade
            m_FileVersion = FileV
            m_ProductVersion = ProductV
        End Sub

        Public Sub New(Enabl As Boolean, FilePath$)
            Dim fvi As FileVersionInfo = FileVersionInfo.GetVersionInfo(FilePath)
            m_Enabled = Enabl
            m_FileDescription = fvi.FileDescription
            m_Comments = fvi.Comments
            m_CompanyName = fvi.CompanyName
            m_ProductName = fvi.ProductName
            m_LegalCopyright = fvi.LegalCopyright
            m_LegalTrademarks = fvi.LegalTrademarks
            m_FileVersion = fvi.FileVersion
            m_ProductVersion = fvi.ProductVersion
        End Sub
#End Region

#Region " Methods "

        Private Sub CleanUp()
            m_Enabled = False
            m_FileDescription = String.Empty
            m_Comments = String.Empty
            m_CompanyName = String.Empty
            m_ProductName = String.Empty
            m_LegalCopyright = String.Empty
            m_LegalTrademarks = String.Empty
            m_FileVersion = String.Empty
            m_ProductVersion = String.Empty
        End Sub

        Private Function checkVersion(VersionValue$) As String
            If (VersionValue <> String.Empty) Then
                If Not VersionValue.Contains(".") Then Return "0.0.0.0"
                If (VersionValue.Split(New Char() {"."c}).Length = 4) Then Return VersionValue
            End If
            Return "0.0.0.0"
        End Function

#End Region

#Region "IDisposable Support"
        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                End If
                CleanUp()
            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Core/Versions/Injector.vb
================================================
ï»¿Imports System.ComponentModel
Imports System.Runtime.InteropServices
Imports System.CodeDom.Compiler
Imports System.IO
Imports Helper.RandomizeHelper
Imports Helper.UtilsHelper
Imports Mono.Cecil
Imports System.Reflection
Imports Helper.CecilHelper
Imports Vestris.ResourceLib

Namespace Core.Versions
    Friend NotInheritable Class Injector

#Region " Fields "
        Private Shared langId As Integer()
#End Region

#Region " Constructor "
        Shared Sub New()
            langId = New Integer(1) {0, 1033}
        End Sub
#End Region

#Region " Methods "
        Private Shared Sub InjectAssemblyInfos(SelectedFilePath$, vInfos As Infos)
            Dim AssDefTarget = AssemblyDefinition.ReadAssembly(SelectedFilePath)
            Dim AttribInfos As New Dictionary(Of Type, String) From { _
                                                                {GetType(AssemblyTitleAttribute), vInfos.FileDescription}, _
                                                                {GetType(AssemblyDescriptionAttribute), vInfos.Comments}, _
                                                                {GetType(AssemblyCompanyAttribute), vInfos.CompanyName}, _
                                                                {GetType(AssemblyProductAttribute), vInfos.ProductName}, _
                                                                {GetType(AssemblyCopyrightAttribute), vInfos.LegalCopyright}, _
                                                                {GetType(AssemblyTrademarkAttribute), vInfos.LegalTrademarks}, _
                                                                {GetType(AssemblyFileVersionAttribute), vInfos.FileVersion}, _
                                                                {GetType(AssemblyVersionAttribute), vInfos.ProductVersion}}

            For Each info In AttribInfos
                Utils.RemoveCustomAttributeByName(AssDefTarget, info.Key.Name)
                Injecter.InjectAssemblyInfoCustomAttribute(AssDefTarget, info.Key, info.Value)
            Next

            AssDefTarget.Write(SelectedFilePath)
        End Sub

        Private Shared Sub InjectVersionInfos(ByVal SelectedFilePath$, ByVal vInfos As Infos)

            DeleteVersionFromLangId(SelectedFilePath)

            Dim versionResource As New VersionResource()
            With versionResource
                .FileVersion = vInfos.FileVersion
                .ProductVersion = vInfos.ProductVersion

                Dim stringFileInfo As New StringFileInfo()
                versionResource(stringFileInfo.Key) = stringFileInfo

                Dim stringFileInfoStrings As New StringTable()
                stringFileInfoStrings.LanguageID = 1033
                stringFileInfoStrings.CodePage = 1252
                stringFileInfo.Strings.Add(stringFileInfoStrings.Key, stringFileInfoStrings)
                stringFileInfoStrings("ProductName") = vInfos.ProductName
                stringFileInfoStrings("FileDescription") = vInfos.FileDescription
                stringFileInfoStrings("CompanyName") = vInfos.CompanyName
                stringFileInfoStrings("LegalCopyright") = vInfos.LegalCopyright
                stringFileInfoStrings("LegalTrademarks") = vInfos.LegalTrademarks
                stringFileInfoStrings("Comments") = vInfos.Comments
                stringFileInfoStrings("FileVersion") = versionResource.FileVersion
                stringFileInfoStrings("ProductVersion") = versionResource.ProductVersion

                Dim varFileInfo As New VarFileInfo()
                versionResource(varFileInfo.Key) = varFileInfo
                Dim varFileInfoTranslation As New VarTable("Translation")
                varFileInfo.Vars.Add(varFileInfoTranslation.Key, varFileInfoTranslation)
                varFileInfoTranslation(ResourceUtil.NEUTRALLANGID) = 1252

                .SaveTo(SelectedFilePath)
            End With

        End Sub

        Friend Shared Sub InjectAssemblyVersionInfos(SelectedFilePath$, vInfos As Infos)
            InjectVersionInfos(SelectedFilePath, vInfos)
            InjectAssemblyInfos(SelectedFilePath, vInfos)
        End Sub

        Private Shared Sub DeleteVersionFromLangId(SelectedFilePath$)
            Dim OldversionResource As New VersionResource()
            For Each id In langId
                Try
                    With OldversionResource
                        .Language = id
                        .LoadFrom(SelectedFilePath)
                        .DeleteFrom(SelectedFilePath)
                    End With
                Catch ex As Exception
                End Try
            Next
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Implementer/Engine/Analyze/Analyzer.vb
================================================
ï»¿Imports System.Reflection
Imports Core20Reader
Imports System.Runtime.InteropServices
Imports Helper.RandomizeHelper
Imports Mono.Cecil
Imports System.Runtime.CompilerServices
Imports System.Xml
Imports System.IO
Imports System.Drawing
Imports Helper.AssemblyHelper
Imports Implementer.Core.ManifestRequest
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Engine.Analyze

    ''' <summary>
    ''' INFO : This is the first step of the renamer library. 
    '''        You must pass two arguments (inputFile and outputFile properties) when instantiating this class.
    '''        You can either check if the selected file if executable and DotNet by calling the isValidFile routine.
    ''' </summary>
    Public Class Analyzer

#Region " Fields "
        Private m_pe As IReader
        Private m_assemblyName As String = String.Empty
        Private m_assemblyVersion As String = String.Empty
        Private m_isWpfProgram As Boolean
#End Region

#Region " Events "
        Public Event FileValidated(sender As Object, e As ValidatedFile)
#End Region

#Region " Properties "
        Public Property inputFile As String
        Public Property outputFile As String
        Public Property currentFile As String
#End Region

#Region " Constructor "
        ''' <summary>
        ''' INFO : Initilize a new instance of the class Analyzer.Cls_Analyzer which used to check if the selected inputfile is a valid PE and executable file. 
        ''' </summary>
        ''' <param name="inputFilePath"></param>
        ''' <param name="outputFilePath"></param>
        Public Sub New(inputFilePath$, outPutFilePath$)
            _inputFile = inputFilePath
            _outputFile = outPutFilePath
            m_pe = New Reader()
            m_pe.ReadFile(_inputFile)
        End Sub
#End Region

#Region " Methods "
        ''' <summary>
        ''' INFO : Check if inputfile is valid DotNet and executable and not Wpf !
        ''' </summary>
        Public Function isValidFile() As Boolean
            If m_pe.isExecutable Then
                If m_pe.isManagedFile Then
                    Dim infos = Loader.Minimal(_inputFile)
                    If infos.Result = Data.Message.Success Then
                        If infos.EntryPoint IsNot Nothing Then
                            m_assemblyName = infos.AssName
                            m_assemblyVersion = infos.AssVersion
                            m_isWpfProgram = infos.IsWpf
                            If m_isWpfProgram = False Then
                                RaiseEvent FileValidated(Me, New ValidatedFile(True, m_pe, infos))
                                Return True
                            End If
                        End If
                    Else
                        RaiseEvent FileValidated(Me, New ValidatedFile(False, m_pe, Nothing))
                        Return False
                    End If
                End If
            End If
            RaiseEvent FileValidated(Me, New ValidatedFile(False, m_pe, Nothing))
            Return False
        End Function

        Public Function getAssemblyName() As String
            Return m_assemblyName
        End Function

        Public Function getAssemblyVersion() As String
            Return m_assemblyVersion
        End Function

        Public Function getModuleKind() As String
            Return m_pe.GetSystemType
        End Function

        Public Function getRuntime() As String
            Return m_pe.GetTargetRuntime
        End Function

        Public Function getProcessArchitecture() As String
            Return m_pe.GetTargetPlatform
        End Function

        Public Function getExecutionLevel() As String
            Try
                Return ManifestReader.ExtractManifest(_inputFile)
            Catch ex As Exception
                Return "asInvoker"
            End Try
            Return "asInvoker"
        End Function

        Public Function getMainIcon() As Bitmap
            Return If(m_pe.GetMainIcon Is Nothing, System.Drawing.Icon.ExtractAssociatedIcon(_inputFile).ToBitmap, m_pe.GetMainIcon.ToBitmap)
        End Function

        ''' <summary>
        ''' INFO : Check if inputfile is WPF application. 
        ''' </summary>
        ''' <remarks>
        '''        DotNet Renamer didn't take charge WPF program !
        ''' </remarks>
        Private Function isWpfProgram() As Boolean
            Return m_isWpfProgram
            Return False
        End Function

        Public Function getTreeViewHandler() As ExclusionTreeview
            Return New ExclusionTreeview(_inputFile)
        End Function

#End Region
    End Class
End Namespace



================================================
File: Implementer/Engine/Analyze/ValidatedFile.vb
================================================
ï»¿Imports System.Reflection
Imports Helper.AssemblyHelper
Imports Core20Reader

Namespace Engine.Analyze
    Public NotInheritable Class ValidatedFile
        Inherits EventArgs

#Region " Fields "
        Private m_peInfos As IReader
        Private m_isValid As Boolean
        Private m_assembly As Data
#End Region

#Region " Properties "
        Public ReadOnly Property peInfos As IReader
            Get
                Return m_peInfos
            End Get
        End Property

        Public ReadOnly Property isValid As Boolean
            Get
                Return m_isValid
            End Get
        End Property

        Public ReadOnly Property assembly As Data
            Get
                Return m_assembly
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(isvalid As Boolean, peInfos As Reader, ass As Data)
            m_isValid = isvalid
            m_assembly = ass
            m_peInfos = peInfos
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Implementer/Engine/Checking/CheckerEventArgs.vb
================================================
ï»¿Imports System.Windows.Forms

Namespace Engine.Checking

#Region " Delegates "
    Public Delegate Sub Check(sender As Object, e As CheckEventArgs)
#End Region

    Public NotInheritable Class CheckEventArgs
        Inherits EventArgs

#Region " Fields "
        Private m_message As String
        Private m_title As String
        Private m_checkedFile As String
#End Region

#Region " Properties "
        Public ReadOnly Property message As String
            Get
                Return m_message
            End Get
        End Property

        Public ReadOnly Property title As String
            Get
                Return m_title
            End Get
        End Property

        Public ReadOnly Property checkedFile As String
            Get
                Return m_checkedFile
            End Get
        End Property
#End Region

#Region " Constructor "
        Public Sub New(message As String, title As String, checkedFile As String)
            m_message = message
            m_title = title
            m_checkedFile = checkedFile
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Context/Parameters.vb
================================================
ï»¿Imports Implementer.Engine.Context
Imports Implementer.Engine.Analyze
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Engine.Context

    ''' <summary>
    ''' INFO : This is the first step of the renamer library. 
    '''        You must pass two arguments (inputFile and outputFile properties) when instantiating this class and calling the ReadAssembly sub.
    '''        This Class inherits Cls_Analyzer.
    ''' </summary>
    Public NotInheritable Class Parameters
        Inherits Analyzer

#Region " Fields "
        Property ExcludeList As ExcludeList
        Property RenamingAccept As RenamerState
        Property TaskAccept As TaskState
#End Region

#Region " Constructor "
        ''' <summary>
        ''' INFO : Initializes a new instance of the class Context.Cls_Parameters (inherits Context.Cls_Analyzer class) which used to check if the selected inputfile is a valid PE and executable file. 
        ''' </summary>
        Public Sub New(inputFile$, outputFile$)
            MyBase.New(inputFile, outputFile)
        End Sub
#End Region

    End Class
End Namespace




================================================
File: Implementer/Engine/Context/RenamerState.vb
================================================
ï»¿Imports Helper.RandomizeHelper
Imports Implementer.Core.Obfuscation.Exclusion

Namespace Engine.Context
    Public NotInheritable Class RenamerState

#Region " Fields "
        Private m_Namespaces As Boolean
        Private m_Types As Boolean
        Private m_Methods As Boolean
        Private m_Properties As Boolean
        Private m_Fields As Boolean
        Private m_CustomAttributes As Boolean
        Private m_Events As Boolean
        Private m_Variables As Boolean
        Private m_Parameters As Boolean
        Private m_ReplaceNamespacesSetting As ReplaceNamespaces
        Private m_RenameMainNamespaceSetting As RenameMainNamespace
        Private m_RenamingType As RandomizerType.RenameEnum
        Private m_ExclusionRule As ExcludeList
        Private m_ExcludeReflection As Boolean
#End Region

#Region " Properties "
        Public ReadOnly Property Namespaces As Boolean
            Get
                Return m_Namespaces
            End Get
        End Property

        Public ReadOnly Property Types As Boolean
            Get
                Return m_Types
            End Get
        End Property

        Public ReadOnly Property Methods As Boolean
            Get
                Return m_Methods
            End Get
        End Property

        Public ReadOnly Property Properties As Boolean
            Get
                Return m_Properties
            End Get
        End Property

        Public ReadOnly Property Fields As Boolean
            Get
                Return m_Fields
            End Get
        End Property

        Public ReadOnly Property CustomAttributes As Boolean
            Get
                Return m_CustomAttributes
            End Get
        End Property

        Public ReadOnly Property Events As Boolean
            Get
                Return m_Events
            End Get
        End Property

        Public ReadOnly Property Variables As Boolean
            Get
                Return m_Variables
            End Get
        End Property

        Public ReadOnly Property Parameters As Boolean
            Get
                Return m_Parameters
            End Get
        End Property

        Public ReadOnly Property ReplaceNamespacesSetting As ReplaceNamespaces
            Get
                Return m_ReplaceNamespacesSetting
            End Get
        End Property

        Public ReadOnly Property RenameMainNamespaceSetting As RenameMainNamespace
            Get
                Return m_RenameMainNamespaceSetting
            End Get
        End Property

        Public ReadOnly Property RenamingType As RandomizerType.RenameEnum
            Get
                Return m_RenamingType
            End Get
        End Property

        Public ReadOnly Property ExclusionRule As ExcludeList
            Get
                Return m_ExclusionRule
            End Get
        End Property

        Public ReadOnly Property ExcludeReflection As Boolean
            Get
                Return m_ExcludeReflection
            End Get
        End Property


#End Region

#Region " Constructor "
        Public Sub New(Namespac As Boolean, Typ As Boolean, Meth As Boolean, Prop As Boolean, Fiel As Boolean, Custom As Boolean, Even As Boolean, Vari As Boolean, _
                param As Boolean, ReplaceNamespace As Boolean, RenameMainNamespace As Boolean, RenamingType%, Exclusion As ExcludeList, ExludeReflect As Boolean)
            m_Namespaces = Namespac
            m_Types = Typ
            m_Methods = Meth
            m_Properties = Prop
            m_Fields = Fiel
            m_CustomAttributes = Custom
            m_Events = Even
            m_Variables = Vari
            m_Parameters = param
            m_ReplaceNamespacesSetting = ReplaceNamespacesValue(ReplaceNamespace)
            m_RenameMainNamespaceSetting = RenameMainNamespaceValue(RenameMainNamespace)
            m_RenamingType = RenameTypeValue(RenamingType)
            m_ExclusionRule = Exclusion
            m_ExcludeReflection = ExludeReflect
        End Sub
#End Region

#Region " Methods "
        Private Function ReplaceNamespacesValue(boolValue As Boolean) As ReplaceNamespaces
            Return If(boolValue, RenamerState.ReplaceNamespaces.Empty, RenamerState.ReplaceNamespaces.ByDefault)
        End Function

        Private Function RenameMainNamespaceValue(boolValue As Boolean) As RenameMainNamespace
            Return If(boolValue, RenamerState.RenameMainNamespace.Only, RenamerState.RenameMainNamespace.NotOnly)
        End Function

        Private Function RenameTypeValue(intValue%) As RandomizerType.RenameEnum
            Return Randomizer.GetScheme(intValue)
        End Function

        Public Sub CleanUp()
            m_Namespaces = False
            m_Types = False
            m_Methods = False
            m_Properties = False
            m_Fields = False
            m_CustomAttributes = False
            m_Events = False
            m_Variables = False
            m_Parameters = False
            m_ExclusionRule.CleanUp()
            m_ExcludeReflection = False
        End Sub
#End Region

#Region " Enumerations "
        ''' <summary>
        ''' INFO : ByDefault : Namespaces of the assembly stayed on first level of the tree. 
        '''        Empty : Namespaces are renamed by String.Empty value and store the types into the -1 level. 
        ''' </summary>
        Enum ReplaceNamespaces
            ByDefault = 0
            Empty = 1
        End Enum

        ''' <summary>
        ''' INFO : Full : rename all types and members. 
        '''        Medium : set to false events, variables, parameters. It will set the other one automatically to True.
        '''        Personnalize : requires you to set the boolean values manually for each types and members. 
        ''' </summary>
        Enum RenameRule
            Full = 0
            Medium = 1
            Personalize = 2
        End Enum

        ''' <summary>
        ''' INFO : NotOnly : Rename all namespaces.
        '''        Only : It will maybe solve many problems due to rename namespaces of merged assembly(s) !
        ''' </summary>
        Enum RenameMainNamespace
            NotOnly = 0
            Only = 1
        End Enum

#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Context/TaskState.vb
================================================
ï»¿Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Versions
Imports Implementer.Core.ManifestRequest
Imports Implementer.Core.IconChanger
Imports Implementer.Core.Packer
Imports Implementer.Core.Dependencing
Imports Implementer.Core.Obfuscation.Protection

Namespace Engine.Context
    Public NotInheritable Class TaskState

#Region " Fields "
        Public MergeReferences As DependenciesInfos
        Public Obfuscation As ObfuscationInfos
        Public Packer As PackInfos
        Public VersionInfos As Infos
        Public Manifest As ManifestInfos
        Public IconChanger As IconInfos
#End Region

#Region " Methods "
        Public Sub CleanUp()
            If Not MergeReferences Is Nothing Then MergeReferences.Dispose()
            If Not Obfuscation Is Nothing Then Obfuscation.Dispose()
            If Not Packer Is Nothing Then Packer.Dispose()
            If Not VersionInfos Is Nothing Then VersionInfos.Dispose()
            If Not Manifest Is Nothing Then Manifest.Dispose()
            If Not IconChanger Is Nothing Then IconChanger.Dispose()
        End Sub
#End Region

    End Class

End Namespace




================================================
File: Implementer/Engine/Context/Tasks.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports System.IO
Imports System.Resources
Imports System.Threading
Imports System.Threading.Tasks
Imports System.ComponentModel
Imports System.Windows.Forms
Imports Implementer.Engine.Context
Imports Implementer.Engine.Processing
Imports Implementer.Engine.Processing.ProcessTask
Imports Implementer.Core.Resources
Imports Implementer.Core.Dependencing
Imports Implementer.Core.Versions
Imports Implementer.Core.ManifestRequest
Imports Implementer.Core.IconChanger
Imports Implementer.Core.Packer
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Obfuscation.Builder
Imports Implementer.Core.Obfuscation.Protection
Imports Implementer.Core.Obfuscation.Exclusion
Imports Helper.UtilsHelper
Imports Helper.CecilHelper
Imports Helper.RandomizeHelper

Namespace Engine.Context

    ''' <summary>
    ''' INFO : This is the second step of the renamer library. 
    '''        You must pass one argument (parameter) when instantiating this class and calling the RenameAssembly routine.
    ''' </summary>
    Public NotInheritable Class Tasks

#Region " Fields "
        Public AssDef As AssemblyDefinition
        Public ProtectedFilePath$
        Private m_bgw As BackgroundWorker
        Private m_parameters As Parameters
        Private m_processing As ProcessTask
        Private m_resourceCompress As Compression
        Private m_framework$
        Private m_Dependencies As Dependencies

        Private m_fi As FileInfo
        Private m_i% = 0

        Private m_ProtectedPath$
        Private m_TmpProtectedPath$
        Private m_isCountedTask As Boolean
#End Region

#Region " Events "
        Public Shared Event RenamedItem As RenamedItemDelegate
#End Region

#Region " Constructor "
        ''' <summary>
        ''' INFO : Initializes a new instance of the Context.Cls_Context class which allows to add parameters such as members and types state before the task of renaming starts.
        ''' </summary>
        ''' <param name="Parameters"></param>
        Public Sub New(parameters As Parameters, Bgw As BackgroundWorker)
            m_bgw = Bgw
            m_parameters = parameters
        End Sub
#End Region

#Region " Methods "
        Public Sub PreparingTask(inputF$)
            m_bgw.ReportProgress(2, "Preparing Task ...")
            m_parameters.inputFile = inputF
            m_parameters.currentFile = m_parameters.inputFile
            m_ProtectedPath = New FileInfo(m_parameters.currentFile).DirectoryName & "\Protected"
            m_TmpProtectedPath = Functions.GetTempFolder & "\" & Randomizer.GenerateNewAlphabetic

            If Not Directory.Exists(m_ProtectedPath) Then Directory.CreateDirectory(m_ProtectedPath)
            If Not Directory.Exists(m_TmpProtectedPath) Then Directory.CreateDirectory(m_TmpProtectedPath)

            m_fi = New FileInfo(m_parameters.inputFile)
            m_parameters.outputFile = m_TmpProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name
            File.Copy(m_parameters.inputFile, m_parameters.outputFile, True)

            m_parameters.inputFile = m_parameters.outputFile
            m_processing = New ProcessTask(m_parameters.RenamingAccept)

            m_isCountedTask = False
        End Sub

        ''' <summary>
        ''' INFO : Raise event when a type or a member renamed.
        ''' </summary>
        ''' <param name="it"></param>
        Public Shared Sub RaiseRenamedItemEvent(it As RenamedItem)
            Dim itemEvent As New RenamedItemEventArgs(it)
            RaiseEvent RenamedItem(Nothing, itemEvent)
            itemEvent = Nothing
        End Sub

        ''' <summary>
        ''' INFO : this routine reads the assembly. It uses Mono Cecil library.
        ''' </summary>
        Private Sub ReadAssembly()
            AssDef = AssemblyDefinition.ReadAssembly(m_parameters.inputFile)
            m_framework = Finder.frameworkVersion(AssDef)
            m_i += 1
            m_fi = New FileInfo(m_parameters.inputFile)
            m_parameters.outputFile = m_parameters.inputFile.Replace(m_fi.Name, m_i.ToString & ".exe")
            m_parameters.inputFile = m_parameters.outputFile
            m_isCountedTask = True
        End Sub

        Public Sub EmptyTemp()
            Functions.DeleteFiles(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) & "\Temp")
        End Sub

        Public Function HasObfuscationTask() As Boolean
            With m_parameters.TaskAccept.Obfuscation
                If .Enabled AndAlso _
              (.EncryptNumeric OrElse _
              .EncryptBoolean OrElse _
              .EncryptString OrElse _
              .AntiTamper OrElse _
              .AntiDebug OrElse _
              .AntiDumper OrElse _
              .AntiIlDasm OrElse _
              .HidePublicCalls OrElse _
              .CompressResources OrElse _
              .RenameAssembly OrElse _
              .InvalidOpcodes OrElse _
              .InvalidMetadata) Then
                    Return True
                End If
            End With
            Return False
        End Function

        Private Function HasRenameTask()
            With m_parameters
                If .TaskAccept.Obfuscation.Enabled AndAlso _
                (.RenamingAccept.Namespaces OrElse _
                .RenamingAccept.Types OrElse _
                .RenamingAccept.Methods OrElse _
                .RenamingAccept.Fields OrElse _
                .RenamingAccept.Events OrElse _
                .RenamingAccept.Properties OrElse _
                .TaskAccept.Obfuscation.RenameResourcesContent OrElse _
                .RenamingAccept.CustomAttributes) Then
                    Return True
                End If
            End With
            Return False
        End Function

        Public Function HasPackerTask() As Boolean
            Return m_parameters.TaskAccept.Packer.Enabled
        End Function

        Public Function CheckDependencies() As AnalysisResult
            m_bgw.ReportProgress(8, "Dependencies analysis ...")
            m_Dependencies = New Dependencies(m_parameters.inputFile, m_parameters.TaskAccept.MergeReferences.Dependencies)
            Return m_Dependencies.Analyze()
        End Function

        Public Sub DependenciesTask()
            With m_parameters.TaskAccept
                If .MergeReferences.Enabled Then
                    If .MergeReferences.Dependencies.Count <> 0 Then
                        If .MergeReferences.DependenciesMode = DependenciesInfos.DependenciesAddMode.Merged Then
                            m_bgw.ReportProgress(16, "Dependencies merging ...")
                            m_Dependencies.Merge()
                        ElseIf .MergeReferences.DependenciesMode = DependenciesInfos.DependenciesAddMode.Embedded Then
                            If .Packer.Enabled = False Then DependenciesEmbedded()
                        End If
                    End If
                End If
            End With
        End Sub

        Private Function DependenciesEmbedded(Optional ByVal Pack As Boolean = False) As Embedding
            With m_parameters.TaskAccept.MergeReferences
                If .Enabled AndAlso .Dependencies.Count <> 0 AndAlso .DependenciesMode = DependenciesInfos.DependenciesAddMode.Embedded Then
                    m_bgw.ReportProgress(16, "Dependencies embedding ...")
                    ReadAssembly()
                    Dim em As New Embedding(AssDef, .Dependencies, m_framework, .DependenciesCompressEncryptMode, Pack)
                    With em
                        .CreateResolverClass()
                        .InjectFiles()
                    End With
                    WriteAssembly()
                    Return em
                End If
            End With
            Return Nothing
        End Function

        Public Sub ManifestTask()
            If m_parameters.TaskAccept.Manifest.Modified Then
                m_bgw.ReportProgress(20, "Requested Level patching ...")
                m_processing.ProcessManifest(m_parameters.inputFile, m_parameters.TaskAccept.Manifest.NewRequested)
            End If
        End Sub

        Public Sub VersionInfosTask()
            If m_parameters.TaskAccept.VersionInfos.Enabled Then
                m_bgw.ReportProgress(25, "Version Infos patching ...")
                m_processing.ProcessVersionInfos(m_parameters.inputFile, m_framework, m_parameters.TaskAccept.VersionInfos)
            End If
        End Sub

        Public Sub IconChangerTask()
            If m_parameters.TaskAccept.IconChanger.Enabled Then
                m_bgw.ReportProgress(28, "Icon Changing ...")
                m_processing.ProcessIconChanger(m_parameters.inputFile, m_framework, m_parameters.TaskAccept.IconChanger.NewIcon, m_parameters.TaskAccept.VersionInfos)
            End If
        End Sub

        Public Sub ObfuscationTask()
            With m_parameters.TaskAccept
                If .Obfuscation.Enabled Then
                    If .Obfuscation.RenameResourcesContent AndAlso .Packer.Enabled = False Then RenameResourcesContent()

                    If .Obfuscation.EncryptNumeric Then EncryptNumeric()
                    If .Obfuscation.EncryptBoolean Then EncryptBoolean()

                    If .Obfuscation.AntiTamper AndAlso .Packer.Enabled = False Then PreAntiTamper()
                    If .Obfuscation.AntiDebug AndAlso .Packer.Enabled = False Then AntiDebug()
                    If .Obfuscation.AntiDumper AndAlso .Packer.Enabled = False Then AntiDumper()
                    If .Obfuscation.AntiIlDasm AndAlso .Packer.Enabled = False Then AntiIlDasm()

                    If .Obfuscation.CompressResources OrElse .Obfuscation.EncryptResources Then PreCompressResources()

                    If .Obfuscation.HidePublicCalls AndAlso .Obfuscation.InvalidMetadata = False Then HidePinvokeCalls()
                    If .Obfuscation.EncryptString Then EncryptString()
                    If .Obfuscation.HidePublicCalls Then MildCalls()
                    If .Obfuscation.EncryptNumeric Then HideConstants()

                    If HasRenameTask() Then RenameAssembly()
                    If .Obfuscation.CompressResources OrElse .Obfuscation.EncryptResources Then PostCompressResources()

                    If .Obfuscation.InvalidOpcodes Then InvalidOpcodes()
                    If HasObfuscationTask() Then InjectDnpWatermark()

                    If .Obfuscation.InvalidMetadata AndAlso .Packer.Enabled = False Then InvalidMetadata()
                    If .Obfuscation.AntiTamper AndAlso .Packer.Enabled = False Then PostAntiTamper()
                End If
            End With

        End Sub

        Public Sub PackerTask()
            With m_parameters.TaskAccept
                If .Packer.Enabled Then

                    PreparingPacking()
                    CreateStub()

                    DependenciesEmbedded(True)

                    If .Obfuscation.Enabled AndAlso .Obfuscation.EncryptNumeric Then EncryptNumeric(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.EncryptBoolean Then EncryptBoolean(True)

                    If .Obfuscation.Enabled AndAlso .Obfuscation.AntiTamper Then PreAntiTamper(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.AntiDebug Then AntiDebug(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.AntiDumper Then AntiDumper(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.AntiIlDasm Then AntiIlDasm(True)

                    PreCompressResolver()

                    If .Obfuscation.Enabled AndAlso .Obfuscation.HidePublicCalls AndAlso .Obfuscation.InvalidMetadata = False Then HidePinvokeCalls(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.EncryptString Then EncryptString(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.HidePublicCalls Then MildCalls(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.EncryptNumeric Then HideConstants(True)

                    If HasRenameTask() Then RenameAssembly(True)

                    PostCompressResolver()

                    If .Obfuscation.Enabled AndAlso .Obfuscation.InvalidOpcodes Then InvalidOpcodes(True)
                    If HasPackerTask() Then InjectDnpWatermark(True)

                    If .Obfuscation.Enabled AndAlso .Obfuscation.InvalidMetadata Then InvalidMetadata(True)
                    If .Obfuscation.Enabled AndAlso .Obfuscation.AntiTamper Then PostAntiTamper(True)
                End If
            End With

        End Sub

        Private Sub PreparingPacking()
            m_bgw.ReportProgress(10, "Packing (Preparing ...)")
            m_i += 1
            m_fi = New FileInfo(m_parameters.inputFile)
            Dim AssDef = AssemblyDefinition.ReadAssembly(m_parameters.inputFile)
            m_framework = Finder.frameworkVersion(AssDef)
            m_parameters.outputFile = m_parameters.inputFile.Replace(m_fi.Name, m_i.ToString & ".exe")

            File.Copy(m_parameters.inputFile, m_parameters.outputFile, True)
            m_parameters.inputFile = m_parameters.outputFile
            m_isCountedTask = True
        End Sub

        Private Sub CreateStub()
            m_bgw.ReportProgress(13, "Packing (Creating stub ...)")
            m_processing.ProcessPacker(m_parameters.inputFile, Functions.GetTempFolder & "\SevenzipLib.dll", m_framework, m_parameters.TaskAccept.Packer, m_parameters.TaskAccept.VersionInfos)
        End Sub

        Public Sub FinalizeTask()
            m_bgw.ReportProgress(99, "Finalizing Task ...")
            Try
                If m_isCountedTask Then
                    File.Delete(m_TmpProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name)
                    My.Computer.FileSystem.RenameFile(m_parameters.outputFile, New FileInfo(m_parameters.currentFile).Name)
                    Dim files = Directory.GetFiles(m_TmpProtectedPath)
                    For Each f In files
                        If Not f = m_TmpProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name Then File.Delete(f)
                    Next
                End If

                File.Copy(m_TmpProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name, m_ProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name, True)

                ProtectedFilePath = m_ProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name

                File.Delete(m_TmpProtectedPath & "\" & New FileInfo(m_parameters.currentFile).Name)
                Directory.Delete(m_TmpProtectedPath)
            Catch ex As Exception
                'MsgBox(ex.ToString)
            End Try
        End Sub

        Private Sub InjectDnpWatermark(Optional pack As Boolean = False)
            ReadAssembly()
            m_processing.ProcessInjectWatermark(AssDef, pack)
            WriteAssembly()
        End Sub

        Private Sub RenameResourcesContent()
            m_bgw.ReportProgress(30, "Obfuscating (Resources content renaming ...)")
            ReadAssembly()
            m_processing.ProcessRenameResourcesContent(AssDef)
            WriteAssembly()
        End Sub

        Private Sub EncryptNumeric(Optional pack As Boolean = False)
            m_bgw.ReportProgress(38, If(pack, "Packing", "Obfuscating") & " (Numeric encryption part 1...)")
            ReadAssembly()
            If m_parameters.TaskAccept.Obfuscation.HidePublicCalls Then
                m_processing.ProcessEncryptNumeric(AssDef, m_framework, Source.EncryptType.ByDefault, pack)
            Else
                m_processing.ProcessEncryptNumeric(AssDef, m_framework, If(m_parameters.TaskAccept.Obfuscation.CompressResources = True OrElse m_parameters.TaskAccept.Obfuscation.EncryptResources = True, Source.EncryptType.ByDefault, Source.EncryptType.ToResources), pack)
            End If
            WriteAssembly()
        End Sub

        Private Sub EncryptBoolean(Optional pack As Boolean = False)
            m_bgw.ReportProgress(40, If(pack, "Packing", "Obfuscating") & " (Boolean encryption ...)")
            ReadAssembly()
            If m_parameters.TaskAccept.Obfuscation.HidePublicCalls Then
                m_processing.ProcessEncryptBoolean(AssDef, m_framework, Source.EncryptType.ByDefault, pack)
            Else
                m_processing.ProcessEncryptBoolean(AssDef, m_framework, If(m_parameters.TaskAccept.Obfuscation.CompressResources = True OrElse m_parameters.TaskAccept.Obfuscation.EncryptResources = True, Source.EncryptType.ByDefault, Source.EncryptType.ToResources), pack)
            End If
            WriteAssembly()
        End Sub

        Private Sub PreAntiTamper(Optional pack As Boolean = False)
            m_bgw.ReportProgress(44, If(pack, "Packing", "Obfuscating") & " (Anti-Tamper preparing ...)")
            ReadAssembly()
            m_processing.ProcessPreAntiTamper(AssDef, m_framework, pack)
            WriteAssembly()
        End Sub

        Private Sub AntiDebug(Optional pack As Boolean = False)
            m_bgw.ReportProgress(48, If(pack, "Packing", "Obfuscating") & " (Anti-Debug injecting ...)")
            ReadAssembly()
            m_processing.ProcessAntiDebug(AssDef, m_framework, pack)
            WriteAssembly()
        End Sub

        Private Sub AntiDumper(Optional pack As Boolean = False)
            m_bgw.ReportProgress(52, If(pack, "Packing", "Obfuscating") & " (Anti-Dumper injecting ...)")
            ReadAssembly()
            m_processing.ProcessAntiDumper(AssDef, pack)
            WriteAssembly()
        End Sub

        Private Sub AntiIlDasm(Optional pack As Boolean = False)
            m_bgw.ReportProgress(56, If(pack, "Packing", "Obfuscating") & " (Anti-ILDasm adding ...)")
            ReadAssembly()
            m_processing.ProcessAntiIlDasm(AssDef)
            WriteAssembly()
        End Sub

        Private Sub PreCompressResources()
            Dim str = "Obfuscating (Resources "

            If m_parameters.TaskAccept.Obfuscation.EncryptResources And m_parameters.TaskAccept.Obfuscation.CompressResources = False Then
                str &= "encrypt preparing ...)"
            ElseIf m_parameters.TaskAccept.Obfuscation.EncryptResources = False And m_parameters.TaskAccept.Obfuscation.CompressResources Then
                str &= "compress preparing ...)"
            ElseIf m_parameters.TaskAccept.Obfuscation.EncryptResources And m_parameters.TaskAccept.Obfuscation.CompressResources Then
                str &= "encrypt & compress preparing ...)"
            End If

            m_bgw.ReportProgress(60, str)
            ReadAssembly()
            m_resourceCompress = New Compression(AssDef, m_framework, m_parameters.TaskAccept.Obfuscation.EncryptResources, m_parameters.TaskAccept.Obfuscation.CompressResources, False)
            m_resourceCompress.CreateResolverClass(False)
            WriteAssembly()
        End Sub

        Private Sub PreCompressResolver()
            ReadAssembly()
            m_resourceCompress = New Compression(AssDef, m_framework, True, True, True)
            m_resourceCompress.CreateResolverClass(True)
            WriteAssembly()
        End Sub

        Private Sub HidePinvokeCalls(Optional pack As Boolean = False)
            m_bgw.ReportProgress(65, If(pack, "Packing", "Obfuscating") & If(m_parameters.TaskAccept.Obfuscation.InvalidMetadata = False, " (Hide calls part 1...)", " (Hide calls ...)"))
            ReadAssembly()
            m_processing.ProcessHidePinvokeCalls(AssDef, m_framework, pack)
            WriteAssembly()
        End Sub

        Private Sub EncryptString(Optional pack As Boolean = False)
            m_bgw.ReportProgress(70, If(pack, "Packing", "Obfuscating") & " (String encryption ...)")
            ReadAssembly()
            If m_parameters.TaskAccept.Obfuscation.HidePublicCalls Then
                m_processing.ProcessEncryptString(AssDef, m_framework, Source.EncryptType.ByDefault, pack)
            Else
                m_processing.ProcessEncryptString(AssDef, m_framework, If(m_parameters.TaskAccept.Obfuscation.CompressResources = True OrElse m_parameters.TaskAccept.Obfuscation.EncryptResources = True, Source.EncryptType.ByDefault, Source.EncryptType.ToResources), pack)
            End If
            WriteAssembly()
        End Sub

        Private Sub MildCalls(Optional pack As Boolean = False)
            m_bgw.ReportProgress(75, If(pack, "Packing", "Obfuscating") & If(m_parameters.TaskAccept.Obfuscation.InvalidMetadata = False, " (Hide calls part 2...)", " (Hide calls ...)"))
            ReadAssembly()
            m_processing.ProcessMildCalls(AssDef, m_framework, pack)
            WriteAssembly()
        End Sub

        Private Sub HideConstants(Optional pack As Boolean = False)
            m_bgw.ReportProgress(78, If(pack, "Packing", "Obfuscating") & " (Numeric encryption part 2...)")
            ReadAssembly()
            m_processing.ProcessConstants(AssDef)
            WriteAssembly()
        End Sub

        ''' <summary>
        ''' INFO : Loop through the modules and types of the loaded assembly and start renaming.
        ''' </summary>
        Private Sub RenameAssembly(Optional pack As Boolean = False)
            If m_parameters.RenamingAccept.ExcludeReflection Then
                m_bgw.ReportProgress(82, If(pack, "Packing", "Obfuscating") & " (Reflection analysis...)")
            End If

            ReadAssembly()
            Dim assemblyMainName$ = AssDef.EntryPoint.DeclaringType.Namespace

            If m_parameters.RenamingAccept.ExcludeReflection Then
                ExcludeReflection.AnalyzeCodes(AssDef, m_parameters.ExcludeList)
            End If

            m_bgw.ReportProgress(85, If(pack, "Packing", "Obfuscating") & " (Renaming assembly...)")
            For Each modul In AssDef.Modules
                If modul.HasTypes Then
                    For Each type In modul.GetAllTypes
                        If m_parameters.ExcludeList.isRenamingExclude(type) = False Then
                            RenameSelectedNamespace(type, assemblyMainName)
                        End If
                    Next
                End If
            Next
            WriteAssembly()
        End Sub

        ''' <summary>
        ''' INFO : Rename the main Namespace or all namespaces according to Cls_Parameters.RenameMainNamespaceSetting setting.
        ''' </summary>
        ''' <param name="type"></param>
        ''' <param name="assemblyMainName"></param>
        ''' <param name="processing"></param>
        Private Sub RenameSelectedNamespace(type As TypeDefinition, assemblyMainName$)
            If m_parameters.RenamingAccept.RenameMainNamespaceSetting = CBool(RenamerState.RenameMainNamespace.Only) Then
                If type.Namespace.StartsWith(assemblyMainName) Then m_processing.ProcessType(type)
            Else
                m_processing.ProcessType(type)
            End If

            If type.HasProperties Then m_processing.ProcessProperties(type)
            If type.HasMethods Then m_processing.ProcessMethods(type)
            If type.HasFields Then m_processing.ProcessFields(type)
            If type.HasEvents Then m_processing.ProcessEvents(type)
        End Sub

        Private Sub PostCompressResources()
            Dim str = "Obfuscating (Resources "

            If m_parameters.TaskAccept.Obfuscation.EncryptResources And m_parameters.TaskAccept.Obfuscation.CompressResources = False Then
                str &= "encrypt finishing ...)"
            ElseIf m_parameters.TaskAccept.Obfuscation.EncryptResources = False And m_parameters.TaskAccept.Obfuscation.CompressResources Then
                str &= "compress finishing ...)"
            ElseIf m_parameters.TaskAccept.Obfuscation.EncryptResources And m_parameters.TaskAccept.Obfuscation.CompressResources Then
                str &= "encrypt & compress finishing ...)"
            End If

            m_bgw.ReportProgress(86, str)
            ReadAssembly()
            m_resourceCompress.CompressInjectResources(AssDef)
            WriteAssembly()
        End Sub

        Private Sub PostCompressResolver()
            ReadAssembly()
            m_resourceCompress.InjectSevenzipLibrary(AssDef)
            WriteAssembly()
        End Sub

        Private Sub InvalidOpcodes(Optional pack As Boolean = False)
            m_bgw.ReportProgress(90, If(pack, "Packing", "Obfuscating") & " (ControlFlow injecting ...)")
            ReadAssembly()
            m_processing.ProcessInvalidOpcodes(AssDef)
            WriteAssembly()
        End Sub

        Private Sub InvalidMetadata(Optional ByVal Pack As Boolean = False)
            m_bgw.ReportProgress(94, If(Pack, "Packing", "Obfuscating") & " (Invalid Metadatas ...)")
            ReadAssembly()
            Dim psr As New MetadataProcessor
            m_processing.ProcessInvalidMetadata(AssDef, psr)
            WriteAssembly(psr)
        End Sub

        Private Sub PostAntiTamper(Optional pack As Boolean = False)
            m_bgw.ReportProgress(98, If(pack, "Packing", "Obfuscating") & " (Anti-Tamper finishing ...)")
            m_i += 1
            m_fi = New FileInfo(m_parameters.inputFile)
            m_parameters.outputFile = m_parameters.inputFile.Replace(m_fi.Name, m_i.ToString & ".exe")
            File.Copy(m_parameters.inputFile, m_parameters.outputFile, True)
            m_parameters.inputFile = m_parameters.outputFile
            m_isCountedTask = True
            m_processing.ProcessPostAntiTamper(m_parameters.inputFile)
        End Sub

        ''' <summary>
        ''' INFO : Records changes to the loaded assembly. It uses Mono Cecil library.
        ''' </summary>
        Private Sub WriteAssembly(Optional ByVal ma As MetadataProcessor = Nothing)
            If Not ma Is Nothing Then
                ma.Process(AssDef.MainModule, m_parameters.outputFile, New WriterParameters())
            Else
                AssDef.Write(m_parameters.outputFile)
            End If
        End Sub

        ''' <summary>
        ''' INFO : Clear the randomize names from the dictionary.
        ''' </summary>
        Public Sub Clean()
            Randomizer.CleanUp()
            Mapping.CleanUp()
            Str.CleanUp()
            Numeric.CleanUp()
            Bool.CleanUp()
            Mild.CleanUp()
            Content.Cleanup()
            Pinvoke.CleanUp()
            EmptyTemp()
            m_parameters.TaskAccept.CleanUp()
            If Not m_parameters.RenamingAccept.ExclusionRule Is Nothing Then m_parameters.RenamingAccept.ExclusionRule.CleanUp()
            If Not m_Dependencies Is Nothing Then m_Dependencies.CleanUp()
        End Sub
#End Region

    End Class

End Namespace



================================================
File: Implementer/Engine/Context/RenamedItem/RenamedItem.vb
================================================
ï»¿Namespace Engine.Context

    Public NotInheritable Class RenamedItem

#Region " Fields "
        Private ReadOnly m_itemType As RenamedItemType.ItemType
        Private ReadOnly m_itemName$
        Private ReadOnly m_obfuscatedItemName$
#End Region

#Region " Constructor "
        Friend Sub New(ItemType As RenamedItemType.ItemType, ItemName$, obfuscatedItemName$)
            m_itemType = ItemType
            m_itemName = ItemName
            m_obfuscatedItemName = obfuscatedItemName
        End Sub
#End Region

#Region " Properties "
        Public ReadOnly Property ItemType As String
            Get
                Return TypeToString(Me.m_itemType)
            End Get
        End Property

        Public ReadOnly Property ItemName As String
            Get
                Return m_itemName
            End Get
        End Property

        Public ReadOnly Property obfuscatedItemName As String
            Get
                Return m_obfuscatedItemName
            End Get
        End Property
#End Region

#Region " Methods "
        Private Function TypeToString(ItemType%) As String
            Select Case ItemType
                Case 0
                    Return "Namespace"
                    Exit Select
                Case 1
                    Return "Type"
                    Exit Select
                Case 2
                    Return "Method"
                    Exit Select
                Case 3
                    Return "Parameter"
                    Exit Select
                Case 4
                    Return "Generic Parameter"
                    Exit Select
                Case 5
                    Return "Variable"
                    Exit Select
                Case 6
                    Return "Property"
                    Exit Select
                Case 7
                    Return "Event"
                    Exit Select
                Case 8
                    Return "Field"
                    Exit Select
            End Select
            Return Nothing
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Context/RenamedItem/RenamedItemEventArgs.vb
================================================
ï»¿Namespace Engine.Context

#Region " Delegates "
    Public Delegate Sub RenamedItemDelegate(sender As Object, e As RenamedItemEventArgs)
#End Region

    Public NotInheritable Class RenamedItemEventArgs
        Inherits EventArgs

#Region " Fields "
        Private m_item As RenamedItem
#End Region

#Region " Constructor "
        Public Sub New(item As RenamedItem)
            m_item = item
        End Sub
#End Region

#Region " Properties "
        Public ReadOnly Property item As RenamedItem
            Get
                Return m_item
            End Get
        End Property
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Context/RenamedItem/RenamedItemType.vb
================================================
ï»¿Namespace Engine.Context
    Friend NotInheritable Class RenamedItemType

#Region " Enumerations"
        Enum ItemType
            Namespaces = 0
            Types = 1
            Methods = 2
            Parameters = 3
            GenericParameters = 4
            Variables = 5
            Properties = 6
            Events = 7
            Fields = 8
        End Enum
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Identification/Identifier.vb
================================================
ï»¿Imports System.IO
Imports Mono.Cecil
Imports Mono.Cecil.Rocks
Imports System.Runtime.InteropServices
Imports System.Reflection.Emit
Imports System.Reflection
Imports Helper.UtilsHelper
Imports Helper.AssemblyHelper
Imports Helper.CecilHelper
Imports Mono.Cecil.Cil
Imports Implementer.engine.Analyze

Namespace Engine.Identification

    Public NotInheritable Class Identifier

#Region " Fields "
        Private Shared m_HexAssembly As String = String.Empty
        Private Shared m_assem As Data = Nothing
        Private Shared m_assDef As AssemblyDefinition = Nothing
        Private Shared m_assDefEntryPoint As MethodDefinition = Nothing
        Private Shared m_assDefReferences As Generic.ICollection(Of AssemblyNameReference)
        Private Shared m_assDefResources As Generic.ICollection(Of Resource)
        Private Shared m_assDefTypes As Generic.ICollection(Of TypeDefinition)
        Private Shared m_assDefModuleReferences As Generic.ICollection(Of ModuleReference)

        Private Shared ReadOnly IdentifierSearcher As New List(Of ObfuscatorPackerIdentifierDelegate)() From { _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findConfuserObfuscator), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findIdentifierInitializer), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findRpxMethods), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findILProtectorReferences), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findDotBundle), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findNetz), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findNetPack), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findMpress), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findNetshrink), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findDotNetPatcherAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findSmartAssemblyAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findBabelAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findCliSecureAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findCodeVeilType), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findCryptoObfuscatorAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findDotfuscatorAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findGoliathNETAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findSpicesAttributes), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findSkaterAttribute), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findManco), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findCodeFort), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findMacrobjectObfuscator), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findPhoenixProtectorObfuscator), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findEazFuscatorObfuscator), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findDotWallObfuscator), _
      New ObfuscatorPackerIdentifierDelegate(AddressOf findOtherAttribute) _
      }
#End Region

#Region " Delegates "
        Private Delegate Function ObfuscatorPackerIdentifierDelegate(ByRef found As Boolean) As IdentifierResult
#End Region

#Region " Methods "
        Public Shared Function search(e As ValidatedFile) As IdentifierResult
            If e.peInfos.HasInvalidSectionHeader Then
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End If

            m_assem = e.assembly
            m_HexAssembly = Functions.AssemblyToHex(m_assem.Location)

            For Each task In IdentifierSearcher
                Dim found As Boolean
                Dim signature = task(found)
                If found Then
                    Return signature
                End If
            Next
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        Private Shared Function findConfuserObfuscator(ByRef found As Boolean) As IdentifierResult
            Try
                If Not m_HexAssembly Is Nothing Then
                    With m_HexAssembly
                        If .Contains(Functions.StrToHex("___.netmodule")) Then
                            found = True
                            Return New IdentifierResult(IdentifierEnum.ResultName.Confuser, IdentifierEnum.ResultType.Packer, My.Resources.Confuser)
                        ElseIf .Contains(Functions.StrToHex("ConfusedByAttribute")) Then
                            found = True
                            Return New IdentifierResult(IdentifierEnum.ResultName.Confuser, IdentifierEnum.ResultType.Obfuscator, My.Resources.Confuser)
                        ElseIf .Contains(Functions.StrToHex("IsDebuggerPresent")) AndAlso _
                            .Contains(Functions.StrToHex("CloseHandle")) AndAlso _
                            .Contains(Functions.StrToHex("NtSetInformationProcess")) AndAlso _
                            .Contains(Functions.StrToHex("NtQueryInformationProcess")) AndAlso _
                            .Contains(Functions.StrToHex("OutputDebugString")) Then
                            found = True
                            Return New IdentifierResult(IdentifierEnum.ResultName.Confuser, IdentifierEnum.ResultType.Obfuscator, My.Resources.Confuser)
                        End If
                    End With
                End If
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        Private Shared Function findIdentifierInitializer(ByRef found As Boolean) As IdentifierResult
            Try
                If Not m_assem.EntryPoint Is Nothing Then
                    m_assDef = AssemblyDefinition.ReadAssembly(m_assem.Location)
                    m_assDefEntryPoint = m_assDef.MainModule.EntryPoint
                    m_assDefReferences = m_assDef.MainModule.AssemblyReferences
                    m_assDefResources = m_assDef.MainModule.Resources
                    m_assDefTypes = m_assDef.MainModule.Types
                    m_assDefModuleReferences = m_assDef.MainModule.ModuleReferences
                Else
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
                End If
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'RPX
        Private Shared Function findRpxMethods(ByRef found As Boolean) As IdentifierResult
            Try
                If ((m_assDefEntryPoint.Body.Instructions.Item(0).OpCode.Code = Code.Ldtoken) AndAlso TryCast(m_assDefEntryPoint.Body.Instructions.Item(0).Operand, TypeReference).FullName = "R.P") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.Rpx, IdentifierEnum.ResultType.Packer, My.Resources.RPX)
                End If
            Catch ex As FileNotFoundException
                found = False
                Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'ILPROTECTOR
        Private Shared Function findILProtectorReferences(ByRef found As Boolean) As IdentifierResult
            Try
                If m_assDefModuleReferences.Any(Function(ref) ref.Name.EndsWith("Protect32.dll") OrElse ref.Name.EndsWith("Protect64.dll") OrElse ref.Name.EndsWith(m_assDef.MainModule.Name & "32.dll") OrElse ref.Name.EndsWith(m_assDef.MainModule.Name & "64.dll")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.ILProtector, IdentifierEnum.ResultType.Packer, My.Resources.ILProtector)
                End If
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'DOTBUNDLE PACKER
        Private Shared Function findDotBundle(ByRef found As Boolean) As IdentifierResult
            Try
                '################################### EAZFUSCATOR DOTNET #####################################
                If m_assDefResources.Any(Function(r) r.Name = "dbrsrc") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.DotBundle, IdentifierEnum.ResultType.Packer, My.Resources.DotBundle)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'NETZ DOTNET PACKER
        Private Shared Function findNetz(ByRef found As Boolean) As IdentifierResult
            Try
                '###################################### NETZ PACKER #########################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("netz") AndAlso typeDef.Name = "NetzStarter") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.Netz, IdentifierEnum.ResultType.Packer, My.Resources.Netz)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'NETPACK
        Private Shared Function findNetPack(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## NETPACK ###########################################
                If m_assDefEntryPoint.DeclaringType.Name = "netpack" AndAlso m_assDefEntryPoint.DeclaringType.Namespace = "npack" Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.NetPack, IdentifierEnum.ResultType.Packer, My.Resources.NetPack)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'MPRESS DOTNET PACKER
        Private Shared Function findMpress(ByRef found As Boolean) As IdentifierResult
            Try
                '##################################### MPRESS PACKER ########################################
                If m_assDefEntryPoint.DeclaringType.Name = "_" AndAlso m_assDefEntryPoint.DeclaringType.Namespace = "mpress" Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.MPress, IdentifierEnum.ResultType.Packer, My.Resources.MPress)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        '.NETSHRINK PACKER
        Private Shared Function findNetshrink(ByRef found As Boolean) As IdentifierResult
            Try
                '################################### DOTNETSHRINK PACKER ####################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("stub_2.Properties")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.NetShrink, IdentifierEnum.ResultType.Packer, My.Resources.NetShrink)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'SMARTASSEMBLY
        Private Shared Function findSmartAssemblyAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## SMARTASSEMBLY #####################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.Name = "PoweredByAttribute") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.SmartAssembly, IdentifierEnum.ResultType.Obfuscator, My.Resources.SmartAssembly)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'BABELNET
        Private Shared Function findBabelAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## BABEL OBFUSCATOR ##################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.Name = "Babel" AndAlso typeDef.Name = "Attribute") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.BabelObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.Babel)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'CLISECURE
        Private Shared Function findCliSecureAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## AGILEDOTNET #######################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("AgileDotNet")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.AgileDotNet, IdentifierEnum.ResultType.Obfuscator, My.Resources.AgileDotNet)
                ElseIf m_assDefModuleReferences.Any(Function(ref) ref.Name = "AgileDotNetRT.dll" OrElse ref.Name = "AgileDotNetRT64.dll") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.AgileDotNet, IdentifierEnum.ResultType.Obfuscator, My.Resources.AgileDotNet)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'CODEVEIL
        Private Shared Function findCodeVeilType(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## CODEVEIL ##########################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName = "____KILL") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.CodeVeil, IdentifierEnum.ResultType.Obfuscator, My.Resources.CodeVeil)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'CRYPTOOBFUSCATOR
        Private Shared Function findCryptoObfuscatorAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '################################### CRYPTO OBFUSCATOR ######################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("CryptoObfuscator")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.CryptoObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.CryptoObfuscator)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'DOTFUSCATOR
        Private Shared Function findDotfuscatorAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '###################################### DOTFUSCATOR #########################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("Dotfuscator")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.DotFuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.DotFuscator)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'GOLIATH.NET
        Private Shared Function findGoliathNETAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '###################################### GOLIATH DOTNET ######################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName = "ObfuscatedByGoliath") Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.GoliathDotNet, IdentifierEnum.ResultType.Obfuscator, My.Resources.Goliath)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'SPICES.NET
        Private Shared Function findSpicesAttributes(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################### NINERAYS #########################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("NineRays")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.SpicesDotNet, IdentifierEnum.ResultType.Obfuscator, My.Resources.Spices)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'SKATER DOTNET OBFUSCATOR
        Private Shared Function findSkaterAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '################################ SKATER DOTNET OBFUSCATOR ##################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.Name.Contains("Skater_NET_Obfuscator")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.SkaterDotNetObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.Skater)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'MANCO DOTNET OBFUSCATOR
        Private Shared Function findManco(ByRef found As Boolean) As IdentifierResult
            Try
                '#################################### MANCO OBFUSCATOR ######################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.Name.Contains("();" & vbTab)) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.MancoDotNetObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.Manco)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'CODEFORT OBFUSCTAOR
        Private Shared Function findCodeFort(ByRef found As Boolean) As IdentifierResult
            Try
                '################################## CODEFORT OBFUSCATOR #####################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("___codefort")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.CodeFortObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.CodeFort)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'DOTNETPATCHER
        Private Shared Function findDotNetPatcherAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                '######################################## DOTNETPATCHER #####################################
                If m_assDefResources.Any(Function(r) r.Name = My.Resources.DnpPattribute) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.DotNetPatcher, IdentifierEnum.ResultType.Packer, My.Resources.DNP)
                ElseIf m_assDefResources.Any(Function(r) r.Name = My.Resources.DnpOattribute) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.DotNetPatcher, IdentifierEnum.ResultType.Obfuscator, My.Resources.DNP)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'MACROBJECT OBFUSCATOR
        Private Shared Function findMacrobjectObfuscator(ByRef found As Boolean) As IdentifierResult
            Try
                '################################## MACROBJECT OBFUSCATOR ###################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("Macrobject.Obfuscator")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.MacrobjectObfuscator, IdentifierEnum.ResultType.Obfuscator, My.Resources.Macrobject)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'PHOENIXPROTECTOR
        Private Shared Function findPhoenixProtectorObfuscator(ByRef found As Boolean) As IdentifierResult
            Try
                '################################### PHOENIX PROTECTOR ######################################
                If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.StartsWith("?") AndAlso typeDef.FullName.EndsWith("?")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.PhoenixProtector, IdentifierEnum.ResultType.Obfuscator, My.Resources.NetReactor)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'EAZFUSCATOR OBFUSCATOR
        Private Shared Function findEazFuscatorObfuscator(ByRef found As Boolean) As IdentifierResult
            Try
                '################################### EAZFUSCATOR DOTNET #####################################
                If m_assDefResources.Any(Function(r) r.Name.StartsWith("Eazfuscator.NET")) Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.EazfuscatorDotNet, IdentifierEnum.ResultType.Obfuscator, My.Resources.EazFuscator)
                End If
                '############################################################################################
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'DOTWALL OBFUSCATOR
        Private Shared Function findDotWallObfuscator(ByRef found As Boolean) As IdentifierResult
            Try
                Dim hasFieldRef As Boolean
                Dim RetTypeIsString As Integer

                For Each td In m_assDefTypes
                    For Each meth In td.Methods
                        If meth.HasBody AndAlso meth.IsConstructor AndAlso meth.Name = ".cctor" AndAlso meth.DeclaringType.Methods.Count = 5 AndAlso meth.DeclaringType.Fields.Count = 1 Then
                            For j As Integer = 0 To meth.Body.Instructions.Count - 1
                                Dim ins As Instruction = meth.Body.Instructions(j)
                                If ins.OpCode = Mono.Cecil.Cil.OpCodes.Stsfld Then
                                    Dim fRef As FieldReference = DirectCast(ins.Operand, FieldReference)
                                    If meth.DeclaringType.Fields(0) Is fRef.Resolve Then
                                        hasFieldRef = True
                                    End If
                                ElseIf ins.OpCode.OperandType <> Mono.Cecil.Cil.OperandType.InlineMethod Then
                                    Continue For
                                End If
                            Next
                        ElseIf Not meth.IsConstructor AndAlso meth.DeclaringType.Methods.Count = 5 AndAlso meth.DeclaringType.Fields.Count = 1 Then
                            If meth.ReturnType.ToString = "System.String" Then
                                RetTypeIsString += 1
                            End If
                        End If
                    Next
                Next
                If hasFieldRef AndAlso RetTypeIsString = 3 Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.DotWall, IdentifierEnum.ResultType.Obfuscator, My.Resources.DotWall)
                End If
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function

        'OTHER
        Private Shared Function findOtherAttribute(ByRef found As Boolean) As IdentifierResult
            Try
                If m_assDef.MainModule.HasResources Then
                    If m_assDefTypes.Any(Function(typeDef) typeDef.FullName.Contains("Resources")) = False Then
                        found = True
                        Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
                    End If
                End If

                If m_assDef.MainModule.GetType("<Module>") Is Nothing Then
                    found = True
                    Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
                Else
                    If Not m_assDef.MainModule.GetType("<Module>") Is Nothing AndAlso Not m_assDef.MainModule.GetType("<Module>").GetStaticConstructor Is Nothing Then
                        found = True
                        Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
                    End If
                End If

                'Dim TDef As IEnumerable(Of TypeDefinition) = asmDef.Modules.SelectMany(Function(modDef) modDef.Types).Where(Function(typeDef) typeDef.Namespace = "").Where(Function(typeDef) Not typeDef.Name.ToString.StartsWith("<"))
                'If TDef.Count > 1 Then
                '    found = True
                '    Return New Cls_IdentifierResult(Cls_IdentifierEnum.ResultName.Unknown, Cls_IdentifierEnum.ResultType.Other)
                'End If
            Catch
                found = True
                Return New IdentifierResult(IdentifierEnum.ResultName.Unknown, IdentifierEnum.ResultType.Other, My.Resources.Warning)
            End Try
            found = False
            Return New IdentifierResult(IdentifierEnum.ResultName.Unidentified, IdentifierEnum.ResultType.Empty, My.Resources.Valid)
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Identification/IdentifierEnum.vb
================================================
ï»¿
Namespace Engine.Identification
    Public NotInheritable Class IdentifierEnum

#Region " Enumerations "
        Enum ResultName
            Unknown = 0
            Confuser = 1
            Rpx = 2
            DotNetPatcher = 3
            MPress = 4
            Netz = 5
            ILProtector = 6
            NetPack = 7
            NetShrink = 8
            DotBundle = 9
            SmartAssembly = 10
            BabelObfuscator = 11
            AgileDotNet = 12
            CodeVeil = 13
            CryptoObfuscator = 14
            DotFuscator = 15
            GoliathDotNet = 16
            SpicesDotNet = 17
            XenocodeObfuscator = 18
            SkaterDotNetObfuscator = 19
            MancoDotNetObfuscator = 20
            CodeFortObfuscator = 21
            PhoenixProtector = 22
            MacrobjectObfuscator = 23
            EazfuscatorDotNet = 24
            DotWall = 25
            Unidentified = 26
        End Enum

        Enum ResultType
            Other = 0
            Packer = 1
            Obfuscator = 2
            Empty = 3
        End Enum
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Identification/IdentifierResult.vb
================================================
ï»¿Imports System.Drawing

Namespace Engine.Identification

    Public NotInheritable Class IdentifierResult

#Region " Fields "
        Private ReadOnly m_itemName As IdentifierEnum.ResultName
        Private ReadOnly m_itemType As IdentifierEnum.ResultType
        Private ReadOnly m_picture As Bitmap
#End Region

#Region " Constructor "
        Friend Sub New(ItemName As IdentifierEnum.ResultName, ItemType As IdentifierEnum.ResultType, pic As Bitmap)
            m_itemName = ItemName
            m_itemType = ItemType
            m_picture = pic
        End Sub
#End Region

#Region " Properties "
        Public ReadOnly Property ItemType As String
            Get
                Return returnType(m_itemType)
            End Get
        End Property

        Public ReadOnly Property ItemName As String
            Get
                Return returnName(Me.m_itemName)
            End Get
        End Property

        Public ReadOnly Property Pic As Bitmap
            Get
                Return m_picture
            End Get
        End Property
#End Region

#Region " Methods "
        Private Function returnName(itName As IdentifierEnum.ResultName) As String
            Select Case itName
                Case 0
                    Return "Unknown"
                Case 1
                    Return "Confuser"
                Case 2
                    Return "Rpx"
                Case 3
                    Return "DotNetPatcher"
                Case 4
                    Return "MPress"
                Case 5
                    Return "Netz"
                Case 6
                    Return "ILProtector"
                Case 7
                    Return "NetPack"
                Case 8
                    Return "NetShrink"
                Case 9
                    Return "DotBundle"
                Case 10
                    Return "SmartAssembly"
                Case 11
                    Return "BabelObfuscator"
                Case 12
                    Return "AgileDotNet"
                Case 13
                    Return "CodeVeil"
                Case 14
                    Return "CryptoObfuscator"
                Case 15
                    Return "DotFuscator"
                Case 16
                    Return "GoliathDotNet"
                Case 17
                    Return "SpicesDotNet"
                Case 18
                    Return "XenocodeObfuscator"
                Case 19
                    Return "SkaterDotNetObfuscator"
                Case 20
                    Return "MancoDotNetObfuscator"
                Case 21
                    Return "CodeFortObfuscator"
                Case 22
                    Return "PhoenixProtector"
                Case 23
                    Return "MacrobjectObfuscator"
                Case 24
                    Return "EazfuscatorDotNet"
                Case 25
                    Return "DotWall"
                Case 26
                    Return "Unidentified"
            End Select
            Return "Unknown"
        End Function

        Private Function returnType(itType As IdentifierEnum.ResultType) As String
            Select Case itType
                Case 0
                    Return "Other"
                Case 1
                    Return "Packer"
                Case 2
                    Return "Obfuscator"
                Case 3
                    Return "Empty"
            End Select
            Return "Other"
        End Function
#End Region

    End Class
End Namespace



================================================
File: Implementer/Engine/Processing/Mapping.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Implementer.Engine.Context

Namespace Engine.Processing
    ''' <summary>
    ''' INFO : This is the fith step of the renamer library. 
    '''        This will check the existence of the name and if true will return the associated renamed value.
    '''        This class is able to clean dictionaries when the renaming process is complete.
    ''' </summary>
    Public NotInheritable Class Mapping

#Region " Fields "
        Private Shared m_ObfNamespaces As New Dictionary(Of String, String)
        Private Shared m_ObfTypes As New Dictionary(Of TypeDefinition, String)
        Private Shared m_ObfMethods As New Dictionary(Of MethodDefinition, String)
        Private Shared m_ObfParameters As New Dictionary(Of ParameterDefinition, String)
        Private Shared m_ObfGenericParameters As New Dictionary(Of GenericParameter, String)
        Private Shared m_ObfVariables As New Dictionary(Of VariableDefinition, String)
        Private Shared m_ObfProperties As New Dictionary(Of PropertyDefinition, String)
        Private Shared m_ObfEvents As New Dictionary(Of EventDefinition, String)
        Private Shared m_ObfFields As New Dictionary(Of FieldDefinition, String)
#End Region

#Region " Methods "

        ''' <summary>
        ''' INFO : Store Key/Value pair (TypeDefinition/ObfuscatedName and third arg set to True if this is a namespace) to dictionary only if key not exists. Return NamespaceObfuscated value.
        ''' </summary>
        ''' <param name="Type"></param>
        ''' <param name="NamespaceObfuscated"></param>
        Friend Shared Function RenameTypeDef(Type As TypeDefinition, ByRef NamespaceObfuscated$, Optional ByVal isNamespace As Boolean = False) As String
            If isNamespace Then
                If Not m_ObfNamespaces.ContainsKey(Type.Namespace) Then
                    m_ObfNamespaces.Add(Type.Namespace, NamespaceObfuscated)
                    Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Namespaces, Type.Namespace, NamespaceObfuscated))
                Else
                    NamespaceObfuscated = m_ObfNamespaces.Item(Type.Namespace)
                End If
            Else
                If Not m_ObfTypes.ContainsKey(Type) Then
                    m_ObfTypes.Add(Type, NamespaceObfuscated)
                    Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Types, Type.Name, NamespaceObfuscated))
                Else
                    NamespaceObfuscated = m_ObfTypes.Item(Type)
                End If
            End If
            Return NamespaceObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (MethodDefinition/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameMethodMember(Member As MethodDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfMethods.ContainsKey(Member) Then
                m_ObfMethods.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Methods, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfMethods.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (Parameter/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameParamMember(Member As ParameterDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfParameters.ContainsKey(Member) Then
                m_ObfParameters.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Parameters, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfParameters.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (GenericParameter/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameGenericParamMember(Member As GenericParameter, ByRef MemberObfuscated$) As String
            If Not m_ObfGenericParameters.ContainsKey(Member) Then
                m_ObfGenericParameters.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.GenericParameters, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfGenericParameters.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (VariableDefinition/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameVariableMember(Member As VariableDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfVariables.ContainsKey(Member) Then
                m_ObfVariables.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Variables, Member.ToString, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfVariables.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (PropertydDefinition/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenamePropertyMember(Member As PropertyDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfProperties.ContainsKey(Member) Then
                m_ObfProperties.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Properties, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfProperties.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (EventDefinition/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameEventMember(Member As EventDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfEvents.ContainsKey(Member) Then
                m_ObfEvents.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Events, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfEvents.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : Store Key/Value pair (FieldDefinition/ObfuscatedName) to dictionary only if key not exists. Return MemberObfuscated value.
        ''' </summary>
        ''' <param name="Member"></param>
        ''' <param name="MemberObfuscated"></param>
        Friend Shared Function RenameFieldMember(Member As FieldDefinition, ByRef MemberObfuscated$) As String
            If Not m_ObfFields.ContainsKey(Member) Then
                m_ObfFields.Add(Member, MemberObfuscated)
                Tasks.RaiseRenamedItemEvent(New RenamedItem(RenamedItemType.ItemType.Fields, Member.Name, MemberObfuscated))
            Else
                MemberObfuscated = m_ObfFields.Item(Member)
            End If
            Return MemberObfuscated
        End Function

        ''' <summary>
        ''' INFO : CleanUp Namespaces dictionary and MethodReferences List.
        ''' </summary>
        Friend Shared Sub CleanUp()
            If Not m_ObfNamespaces.Count <> 0 Then m_ObfNamespaces.Clear()
            If Not m_ObfTypes.Count <> 0 Then m_ObfTypes.Clear()
            If Not m_ObfMethods.Count <> 0 Then m_ObfMethods.Clear()
            If Not m_ObfGenericParameters.Count <> 0 Then m_ObfGenericParameters.Clear()
            If Not m_ObfParameters.Count <> 0 Then m_ObfParameters.Clear()
            If Not m_ObfVariables.Count <> 0 Then m_ObfVariables.Clear()
            If Not m_ObfProperties.Count <> 0 Then m_ObfProperties.Clear()
            If Not m_ObfEvents.Count <> 0 Then m_ObfEvents.Clear()
            If Not m_ObfFields.Count <> 0 Then m_ObfFields.Clear()
        End Sub
#End Region

    End Class
End Namespace





================================================
File: Implementer/Engine/Processing/ProcessTask.vb
================================================
ï»¿Imports Mono.Cecil
Imports Helper.CecilHelper
Imports Helper.RandomizeHelper
Imports Implementer.Core.Resources
Imports Implementer.Core.Obfuscation
Imports Implementer.Core.Versions
Imports Implementer.Core.ManifestRequest
Imports Implementer.Core.Packer
Imports Implementer.Core.IconChanger
Imports Implementer.Core.Dependencing
Imports Implementer.Core.Obfuscation.Anti
Imports Implementer.Core.Obfuscation.Builder.Source
Imports Implementer.Core.Obfuscation.Protection
Imports Implementer.Engine.Context
Imports System.IO
Imports System.Resources
Imports System.Drawing

Namespace Engine.Processing

    ''' <summary>
    ''' INFO : This is the third step of the renamer library. 
    '''        This will process to rename types and members from the selected assembly with settings of your choice.
    ''' </summary>
    Public NotInheritable Class ProcessTask

#Region " Fields "
        Private m_RenamingAccept As RenamerState
#End Region

#Region " Constructor "
        ''' <summary>
        ''' INFO : Initializes a new instance of the Processing.Cls_Processing class from which is started the task of renaming.
        ''' </summary>
        ''' <param name="RenamingAccept"></param>
        Public Sub New(RenamingAccept As RenamerState)
            m_RenamingAccept = RenamingAccept
            RandomizerType.RenameSetting = m_RenamingAccept.RenamingType
        End Sub
#End Region

#Region " Methods "

        ''' <summary>
        ''' INFO : This is the EntryPoint of the renamer method ! Namespaces, Types and Resources renaming.
        ''' </summary>
        ''' <param name="type"></param>
        Public Sub ProcessType(type As TypeDefinition)

            Dim NamespaceOriginal$ = type.Namespace
            Dim NamespaceObfuscated$ = type.Namespace

            If Not type.Name = "<Module>" Then
                If m_RenamingAccept.Namespaces Then
                    NamespaceObfuscated = If(CBool(m_RenamingAccept.ReplaceNamespacesSetting) = True, String.Empty, Randomizer.GenerateNew())
                    type.Namespace = Mapping.RenameTypeDef(type, NamespaceObfuscated, True)
                End If
            End If

            If NameChecker.IsRenamable(type) Then

                Dim TypeOriginal$ = type.Name
                Dim TypeObfuscated$ = type.Name

                If m_RenamingAccept.CustomAttributes Then Renamer.RenameCustomAttributesValues(type)

                If m_RenamingAccept.Types Then
                    type.Name = Mapping.RenameTypeDef(type, Randomizer.GenerateNew())
                    TypeObfuscated = type.Name
                    Renamer.RenameResources(type, NamespaceOriginal, NamespaceObfuscated, TypeOriginal, TypeObfuscated)
                End If

                If m_RenamingAccept.Namespaces Then
                    type.Namespace = Mapping.RenameTypeDef(type, NamespaceObfuscated, True)
                    Renamer.RenameResources(type, NamespaceOriginal, NamespaceObfuscated, TypeOriginal, TypeObfuscated)
                End If

                If m_RenamingAccept.Properties Then Renamer.RenameResourceManager(type)

                If m_RenamingAccept.Types OrElse m_RenamingAccept.Namespaces Then
                    Renamer.RenameInitializeComponentsValues(type, TypeOriginal, TypeObfuscated, False)
                End If
            End If
        End Sub

        Public Sub ProcessMildCalls(AssDef As AssemblyDefinition, frmwk$, pack As Boolean)
            Mild.DoJob(AssDef, frmwk, m_RenamingAccept.ExclusionRule, pack)
        End Sub

        Public Sub ProcessHidePinvokeCalls(AssDef As AssemblyDefinition, frmwk$, pack As Boolean)
            Pinvoke.DoJob(AssDef, frmwk, m_RenamingAccept.ExclusionRule, pack)
        End Sub

        Public Sub ProcessConstants(AssDef As AssemblyDefinition)
            Constants.DoJob(AssDef, m_RenamingAccept.ExclusionRule)
        End Sub

        Public Sub ProcessEncryptString(AssDef As AssemblyDefinition, frmwk$, EncryptToResources As EncryptType, pack As Boolean)
            Dim emptyNamespaces = If(m_RenamingAccept.ReplaceNamespacesSetting = RenamerState.ReplaceNamespaces.Empty, True, False)
            Str.DoJob(AssDef, frmwk, If(pack = True, EncryptType.ByDefault, EncryptToResources), m_RenamingAccept.ExclusionRule, emptyNamespaces)
        End Sub

        Public Sub ProcessEncryptBoolean(AssDef As AssemblyDefinition, frmwk$, EncryptToResources As EncryptType, pack As Boolean)
            Bool.DoJob(AssDef, frmwk, If(pack = True, EncryptType.ByDefault, EncryptToResources), m_RenamingAccept.ExclusionRule, pack)
        End Sub

        Public Sub ProcessEncryptNumeric(AssDef As AssemblyDefinition, frmwk$, EncryptToResources As EncryptType, pack As Boolean)
            Numeric.DoJob(AssDef, frmwk, If(pack = True, EncryptType.ByDefault, EncryptToResources), m_RenamingAccept.ExclusionRule, pack)
        End Sub

        Public Sub ProcessRenameResourcesContent(AssDef As AssemblyDefinition)
            Content.Rename(AssDef)
        End Sub

        Public Sub ProcessAntiDebug(AssDef As AssemblyDefinition, Frmwk$, pack As Boolean)
            AntiDebug.InjectAntiDebug(AssDef, Frmwk, pack)
        End Sub

        Public Sub ProcessAntiDumper(AssDef As AssemblyDefinition, pack As Boolean)
            AntiDumper.CreateAntiDumperClass(AssDef, pack)
        End Sub

        Public Sub ProcessPreAntiTamper(AssDef As AssemblyDefinition, Frmwk$, Pack As Boolean)
            AntiTamper.CreateAntiTamperClass(AssDef, Frmwk, Pack)
        End Sub

        Public Sub ProcessPostAntiTamper(FilePath$)
            AntiTamper.InjectMD5(FilePath)
        End Sub

        Public Sub ProcessAntiIlDasm(AssDef As AssemblyDefinition)
            AntiIlDasm.Inject(AssDef)
        End Sub

        Public Sub ProcessInvalidOpcodes(AssDef As AssemblyDefinition)
            invalidOpcodes.Inject(AssDef, m_RenamingAccept.ExclusionRule)
        End Sub

        Public Sub ProcessVersionInfos(FilePath$, Frmwk$, vInfos As Infos)
            Injector.InjectAssemblyVersionInfos(FilePath, vInfos)
        End Sub

        Public Sub ProcessManifest(FilePath$, CurrentRequested As String)
            ManifestWriter.ApplyManifest(FilePath, CurrentRequested)
        End Sub

        Public Sub ProcessPacker(FilePath$, SevenZipResName$, Frmwk$, pInfos As PackInfos, vInfos As Infos)
            Dim pack As New Pack(FilePath)
            With pack
                .CreateStub(Frmwk, SevenZipResName)
                .ReplaceIcon(pInfos.NewIcon)
                .InjectAssemblyVersionInfos(vInfos)
                .InjectManifest(pInfos.RequestedLevel)
            End With
        End Sub

        Public Sub ProcessIconChanger(FilePath$, Frmwk$, NewIconPath As Icon, vInfos As Infos)
            Replacer.ReplaceFromIcon(FilePath, NewIconPath)
            Injector.InjectAssemblyVersionInfos(FilePath, vInfos)
        End Sub

        Public Sub ProcessInjectWatermark(AssDef As AssemblyDefinition, ByVal Pack As Boolean)
            Attribut.DoInjection(AssDef, Pack)
        End Sub

        Public Sub ProcessInvalidMetadata(AssDef As AssemblyDefinition, psr As MetadataProcessor)
            InvalidMetadata.DoJob(AssDef, psr)
        End Sub

        ''' <summary>
        ''' INFO : Methods, Parameters and Variables renamer routine.
        ''' </summary>
        ''' <param name="type"></param>
        Public Sub ProcessMethods(type As TypeDefinition)
            If m_RenamingAccept.Methods OrElse m_RenamingAccept.Parameters Then
                For Each method As MethodDefinition In type.Methods
                    If NameChecker.IsRenamable(method) Then
                        If Not Finder.AccessorMethods(type).Contains(method) Then ProcessMethod(method, "Methods")
                    Else
                        ProcessParameters(method)
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Properties, CustomAttributes (Only "AccessedThroughPropertyAttribute" attribute) renamer routine. 
        ''' </summary>
        ''' <param name="type"></param>
        Public Sub ProcessProperties(type As TypeDefinition)
            If m_RenamingAccept.Properties OrElse m_RenamingAccept.CustomAttributes Then
                For Each propDef As PropertyDefinition In type.Properties
                    If NameChecker.IsRenamable(propDef) Then

                        Dim originalN = propDef.Name
                        Dim obfuscatedN = propDef.Name

                        If m_RenamingAccept.Properties Then
                            obfuscatedN = Randomizer.GenerateNew()
                        End If

                        Renamer.RenameProperty(propDef, obfuscatedN)
                        Renamer.RenameInitializeComponentsValues(propDef.DeclaringType, originalN, obfuscatedN, True)
                        Renamer.RenameSettings(propDef.GetMethod, originalN, obfuscatedN)
                        Renamer.RenameSettings(propDef.SetMethod, originalN, obfuscatedN)

                        If m_RenamingAccept.CustomAttributes Then
                            Renamer.RenameCustomAttributes(type, propDef, originalN, obfuscatedN)
                        End If

                        If m_RenamingAccept.Methods Then
                            Dim flag = "Property"
                            If Not propDef.GetMethod Is Nothing Then ProcessMethod(propDef.GetMethod, flag)
                            If Not propDef.SetMethod Is Nothing Then ProcessMethod(propDef.SetMethod, flag)
                            For Each def In propDef.OtherMethods
                                ProcessMethod(def, flag)
                            Next
                        End If
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Fields renamer routine. 
        ''' </summary>
        ''' <param name="type"></param>
        Public Sub ProcessFields(type As TypeDefinition)
            If m_RenamingAccept.Fields Then
                For Each field As FieldDefinition In type.Fields
                    If NameChecker.IsRenamable(field) Then Renamer.RenameField(field, Randomizer.GenerateNew())
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Events renamer routine. 
        ''' </summary>
        ''' <param name="type"></param>
        Public Sub ProcessEvents(type As TypeDefinition)
            If m_RenamingAccept.Events Then
                For Each events As EventDefinition In type.Events
                    If NameChecker.IsRenamable(events) Then
                        If m_RenamingAccept.CustomAttributes Then Renamer.RenameCustomAttributesValues(events)
                        If m_RenamingAccept.Events Then Renamer.RenameEvent(events, Randomizer.GenerateNew())

                        Dim flag = "Event"
                        If Not events.AddMethod Is Nothing Then ProcessMethod(events.AddMethod, flag)
                        If Not events.RemoveMethod Is Nothing Then ProcessMethod(events.RemoveMethod, flag)
                        For Each def In events.OtherMethods
                            ProcessMethod(def, flag)
                        Next
                    End If
                Next
            End If
        End Sub

        Private Sub ProcessMethod(mDef As MethodDefinition, DestNodeName$)
            Dim meth As MethodDefinition = mDef
            If m_RenamingAccept.Methods Then
                If DestNodeName = "Event" Then
                    meth = Renamer.RenameMethod(meth.DeclaringType, meth)
                Else
                    If NameChecker.IsRenamable(meth) Then
                        meth = Renamer.RenameMethod(meth.DeclaringType, meth)
                    End If
                End If
            End If
            ProcessParameters(meth)
        End Sub

        Private Sub ProcessParameters(Meth As MethodDefinition)
            If m_RenamingAccept.Parameters Then
                Renamer.RenameParameters(Meth)
            End If
            If m_RenamingAccept.Variables Then Renamer.RenameVariables(Meth)
        End Sub
#End Region

    End Class
End Namespace


================================================
File: Implementer/Engine/Processing/Renamer.vb
================================================
ï»¿Imports Mono.Cecil
Imports Mono.Cecil.Cil
Imports Implementer.Engine.Context
Imports Helper.RandomizeHelper
Imports Helper.CecilHelper
Imports Implementer.core.Obfuscation.Exclusion
Imports Mono.Collections

Namespace Engine.Processing
    ''' <summary>
    ''' INFO : This is the forth step of the renamer library. 
    '''        This is the core of the rename library !
    ''' </summary>
    Friend NotInheritable Class Renamer

#Region " Methods "
        ''' <summary>
        ''' INFO : Rename the method. Return methodDefinition member.
        ''' </summary>
        ''' <param name="method"></param>
        Friend Shared Function RenameMethod(type As TypeDefinition, method As MethodDefinition) As MethodDefinition
            Dim MethodOriginal$ = method.Name
            Dim MethodPublicObf$ = Randomizer.GenerateNew()

            If method.IsPInvokeImpl Then
                If method.PInvokeInfo.EntryPoint = String.Empty Then method.PInvokeInfo.EntryPoint = MethodOriginal
            End If

            If Not Finder.FindGenericParameter(method) AndAlso Not Finder.FindCustomAttributeByName(method, "DebuggerHiddenAttribute") Then
                method.Name = Mapping.RenameMethodMember(method, MethodPublicObf)
            End If

            Return method
        End Function

        ''' <summary>
        ''' INFO : Rename Parameters from method.
        ''' </summary>
        ''' <param name="method"></param>
        Friend Shared Sub RenameParameters(method As MethodDefinition)
            If method.HasParameters Then
                For Each ParDef As ParameterDefinition In method.Parameters
                    If ParDef.CustomAttributes.Count = 0 Then
                        ParDef.Name = Mapping.RenameParamMember(ParDef, Randomizer.GenerateNew())
                    End If
                Next
            End If
            If method.HasGenericParameters Then
                For Each GenPar As GenericParameter In method.GenericParameters
                    If GenPar.CustomAttributes.Count = 0 Then
                        GenPar.Name = Mapping.RenameGenericParamMember(GenPar, Randomizer.GenerateNew())
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Rename Variables from method.
        ''' </summary>
        ''' <param name="method"></param>
        Friend Shared Sub RenameVariables(Method As MethodDefinition)
            If Method.HasBody Then
                For Each vari In Method.Body.Variables
                    vari.Name = Mapping.RenameVariableMember(vari, Randomizer.GenerateNew())
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Rename embedded Resources from Resources dir and updates method bodies.
        ''' </summary>
        ''' <param name="TypeDef"></param>
        ''' <param name="NamespaceOriginal"></param>
        ''' <param name="NamespaceObfuscated"></param>
        ''' <param name="TypeOriginal"></param>
        ''' <param name="TypeObfuscated"></param>
        Friend Shared Sub RenameResources(TypeDef As TypeDefinition, ByRef NamespaceOriginal$, ByRef NamespaceObfuscated$, TypeOriginal$, TypeObfuscated$)
            Dim ModuleDef As ModuleDefinition = TypeDef.Module

            For Each EmbRes As Resource In ModuleDef.Resources
                If Utils.isStronglyTypedResourceBuilder(TypeDef) Then
                    If NamespaceOriginal.EndsWith(".My.Resources") Then
                        If EmbRes.Name = NamespaceOriginal.Replace(".My.Resources", "") & "." & TypeOriginal & ".resources" Then
                            EmbRes.Name = If(NamespaceObfuscated = String.Empty, TypeObfuscated & ".resources", NamespaceObfuscated & "." & TypeObfuscated & ".resources")
                        End If
                    Else
                        If EmbRes.Name = NamespaceOriginal & "." & TypeOriginal & ".resources" Then
                            EmbRes.Name = If(NamespaceObfuscated = String.Empty, TypeObfuscated & ".resources", NamespaceObfuscated & "." & TypeObfuscated & ".resources")
                        End If
                    End If
                Else
                    If EmbRes.Name = NamespaceOriginal & "." & TypeOriginal & ".resources" Then
                        EmbRes.Name = If(NamespaceObfuscated = String.Empty, TypeObfuscated & ".resources", NamespaceObfuscated & "." & TypeObfuscated & ".resources")
                    End If
                End If
            Next

            If TypeDef.HasMethods Then
                For Each method In TypeDef.Methods
                    If method.HasBody Then
                        For Each inst In method.Body.Instructions
                            If inst.OpCode = OpCodes.Ldstr Then
                                If NamespaceOriginal.EndsWith(".My.Resources") Then
                                    If inst.Operand.ToString() = (NamespaceOriginal.Replace(".My.Resources", "") & ".Resources") Then
                                        inst.Operand = If(NamespaceObfuscated = String.Empty, TypeObfuscated, NamespaceObfuscated & "." & TypeObfuscated)
                                    End If
                                Else
                                    If inst.Operand.ToString() = (NamespaceOriginal & "." & TypeOriginal) Then
                                        inst.Operand = If(NamespaceObfuscated = String.Empty, TypeObfuscated, NamespaceObfuscated & "." & TypeObfuscated)
                                    End If
                                End If
                            End If
                        Next
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' INFO : Rename embedded Resources from Resources dir and from ResourcesManager method.
        ''' </summary>
        ''' <param name="typeDef"></param>
        Friend Shared Sub RenameResourceManager(typeDef As TypeDefinition)
            For Each pr In (From p In typeDef.Properties
                            Where Not p.GetMethod Is Nothing AndAlso p.GetMethod.Name = "get_ResourceManager" AndAlso p.GetMethod.HasBody AndAlso p.GetMethod.Body.Instructions.Count <> 0
                            Select p)
                For Each instruction In pr.GetMethod.Body.Instructions
                    If TypeOf instruction.Operand Is String Then
                        Dim NewResManagerName$ = instruction.Operand
                        For Each EmbRes As EmbeddedResource In typeDef.Module.Resources
                            If EmbRes.Name = instruction.Operand & ".resources" Then
                                NewResManagerName = Randomizer.GenerateNew()
                                EmbRes.Name = NewResManagerName & ".resources"
                            End If
                        Next
                        instruction.Operand = NewResManagerName
                    End If
                Next
            Next
        End Sub

        Friend Shared Sub RenameSettings(mDef As MethodDefinition, originalN$, obfuscatedN$)
            If Not mDef Is Nothing Then
                If Not mDef.DeclaringType.BaseType Is Nothing AndAlso mDef.DeclaringType.BaseType.Name = "ApplicationSettingsBase" Then
                    If mDef.HasBody AndAlso mDef.Body.Instructions.Count <> 0 Then
                        For Each instruction In mDef.Body.Instructions
                            If TypeOf instruction.Operand Is String Then
                                Dim Name$ = instruction.Operand
                                If originalN = Name Then
                                    If mDef.Name.StartsWith("set_") Then
                                        mDef.Name = "set_" & obfuscatedN
                                    ElseIf mDef.Name.StartsWith("get_") Then
                                        mDef.Name = "get_" & obfuscatedN
                                    End If
                                    instruction.Operand = obfuscatedN
                                End If
                            End If
                        Next
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' INFO : Rename Property.
        ''' </summary>
        ''' <param name="prop"></param>
        ''' <param name="obfuscatedN"></param>
        Friend Shared Sub RenameProperty(ByRef prop As PropertyDefinition, obfuscatedN$)
            prop.Name = Mapping.RenamePropertyMember(prop, obfuscatedN)

            If Not prop.GetMethod Is Nothing Then
                Dim meth = Renamer.RenameMethod(prop.DeclaringType, prop.GetMethod)
                Renamer.RenameParameters(meth)
                Renamer.RenameVariables(meth)
            End If
            If Not prop.SetMethod Is Nothing Then
                Dim meth = Renamer.RenameMethod(prop.DeclaringType, prop.SetMethod)
                Renamer.RenameParameters(meth)
                Renamer.RenameVariables(meth)
            End If

            For Each m In (From p In prop.OtherMethods
                           Where Not p Is Nothing AndAlso NameChecker.IsRenamable(p)
                           Select p)
                Dim meth = Renamer.RenameMethod(prop.DeclaringType, m)
                Renamer.RenameParameters(meth)
                Renamer.RenameVariables(meth)
            Next
        End Sub

        ''' <summary>
        ''' INFO : Rename Field.
        ''' </summary>
        ''' <param name="field"></param>
        ''' <param name="obfuscatedN"></param>
        Friend Shared Sub RenameField(field As FieldDefinition, obfuscatedN$)
            field.Name = Mapping.RenameFieldMember(field, obfuscatedN)
        End Sub

        ''' <summary>
        ''' INFO : Rename Event.
        ''' </summary>
        ''' <param name="events"></param>
        ''' <param name="obfuscatedN"></param>
        Friend Shared Sub RenameEvent(ByRef events As EventDefinition, obfuscatedN$)
            events.Name = Mapping.RenameEventMember(events, obfuscatedN)
        End Sub

        ''' <summary>
        ''' INFO : Rename CustomAttributes.
        ''' </summary>
        ''' <remarks>
        ''' REMARKS : Only AccessedThroughPropertyAttribute attribute is renamed to prevent de4Dot to retrieve original names.
        ''' </remarks>
        ''' <param name="type"></param>
        ''' <param name="prop"></param>
        ''' <param name="originalN"></param>
        ''' <param name="obfuscatedN"></param> 
        Friend Shared Sub RenameCustomAttributes(type As TypeDefinition, prop As PropertyDefinition, originalN$, obfuscatedN$)
            If type.HasFields Then
                For Each field As FieldDefinition In (From f In type.Fields
                                                      Where f.IsPrivate AndAlso f.HasCustomAttributes
                                                      Select f)
                    For Each ca In (From c In field.CustomAttributes
                                    Where c.AttributeType.Name = "AccessedThroughPropertyAttribute" AndAlso c.HasConstructorArguments AndAlso c.ConstructorArguments(0).Value = originalN
                                    Select c)
                        ca.ConstructorArguments(0) = New CustomAttributeArgument(ca.AttributeType, obfuscatedN)
                        RenameProperty(prop, obfuscatedN)
                        Exit For
                    Next
                Next
            End If
            RenameCustomAttributesValues(prop)
        End Sub

        Friend Shared Sub RenameCustomAttributesValues(member As Object)
            If member.HasCustomAttributes Then
                For Each ca As CustomAttribute In member.CustomAttributes
                    If Not ca Is Nothing Then
                        If ca.AttributeType.Name = "CategoryAttribute" OrElse ca.AttributeType.Name = "DescriptionAttribute" Then
                            If ca.HasConstructorArguments Then
                                ca.ConstructorArguments(0) = New CustomAttributeArgument(ca.AttributeType, Randomizer.GenerateNew())
                            End If
                        End If
                    End If
                Next
            End If
        End Sub

        Friend Shared Sub RenameInitializeComponentsValues(TypeDef As TypeDefinition, OriginalKeyName$, NewKeyName$, ByVal Properties As Boolean)
            Dim methodSearch As MethodDefinition = Finder.FindMethod(TypeDef, "InitializeComponent")
            If Not methodSearch Is Nothing Then
                If methodSearch.HasBody Then
                    If methodSearch.Body.Instructions.Count <> 0 Then
                        For Each instruction As Cil.Instruction In methodSearch.Body.Instructions
                            If TypeOf instruction.Operand Is String Then
                                If Properties Then
                                    If Not instruction.Previous Is Nothing Then
                                        If instruction.Previous.OpCode = Mono.Cecil.Cil.OpCodes.Callvirt AndAlso instruction.Previous.Operand.ToString.EndsWith("get_" & OriginalKeyName & "()") Then
                                            If CStr(instruction.Operand) = OriginalKeyName Then
                                                instruction.Operand = NewKeyName
                                            End If
                                        End If
                                    End If
                                Else
                                    If Not instruction.Next Is Nothing Then
                                        If instruction.Next.OpCode = Mono.Cecil.Cil.OpCodes.Callvirt AndAlso instruction.Next.ToString.EndsWith("set_Name(System.String)") Then
                                            If CStr(instruction.Operand) = OriginalKeyName Then
                                                instruction.Operand = NewKeyName
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                End If
            End If
        End Sub
#End Region

    End Class
End Namespace



================================================
File: Implementer/My Project/Application.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On




================================================
File: Implementer/My Project/Application.myapp
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MySubMain>false</MySubMain>
  <SingleInstance>false</SingleInstance>
  <ShutdownMode>0</ShutdownMode>
  <EnableVisualStyles>true</EnableVisualStyles>
  <AuthenticationMode>0</AuthenticationMode>
  <ApplicationType>1</ApplicationType>
  <SaveMySettingsOnExit>true</SaveMySettingsOnExit>
</MyApplicationData>



================================================
File: Implementer/My Project/AssemblyInfo.vb
================================================
ï»¿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
' l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
' associÃ©es Ã  un assembly.

' Passez en revue les valeurs des attributs de l'assembly

<Assembly: AssemblyTitle("Implementer")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("3DotDev Freewares")> 
<Assembly: AssemblyProduct("Implementer")> 
<Assembly: AssemblyCopyright("Copyright Â© 3DotDev 2015")> 
<Assembly: AssemblyTrademark("Implementer")> 

<Assembly: ComVisible(False)>

'Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
<Assembly: Guid("cdb3d0ad-5052-464a-aef3-cb9d9562d94c")> 

' Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
'
'      Version principale
'      Version secondaire 
'      NumÃ©ro de build
'      RÃ©vision
'
' Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
' en utilisant '*', comme indiquÃ© ci-dessousÂ :
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("4.4.2.0")> 
<Assembly: AssemblyFileVersion("4.4.2.0")> 



================================================
File: Implementer/My Project/Resources.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.18408
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'Cette classe a Ã©tÃ© gÃ©nÃ©rÃ©e automatiquement par la classe StronglyTypedResourceBuilder
    'Ã  l'aide d'un outil, tel que ResGen ou Visual Studio.
    'Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis rÃ©exÃ©cutez ResGen
    'avec l'option /str ou rÃ©gÃ©nÃ©rez votre projet VS.
    '''<summary>
    '''  Une classe de ressource fortement typÃ©e destinÃ©e, entre autres, Ã  la consultation des chaÃ®nes localisÃ©es.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Retourne l'instance ResourceManager mise en cache utilisÃ©e par cette classe.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("Implementer.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Remplace la propriÃ©tÃ© CurrentUICulture du thread actuel pour toutes
        '''  les recherches de ressources Ã  l'aide de cette classe de ressource fortement typÃ©e.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property AgileDotNet() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("AgileDotNet", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Babel() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Babel", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property CodeFort() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("CodeFort", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property CodeVeil() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("CodeVeil", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Confuser() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Confuser", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property CryptoObfuscator() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("CryptoObfuscator", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property DNP() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("DNP", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une chaÃ®ne localisÃ©e semblable Ã  &lt;ObfuscatedByDotNetPatcher&gt;.
        '''</summary>
        Friend ReadOnly Property DnpOattribute() As String
            Get
                Return ResourceManager.GetString("DnpOattribute", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une chaÃ®ne localisÃ©e semblable Ã  &lt;PackedByDotNetPatcher&gt;.
        '''</summary>
        Friend ReadOnly Property DnpPattribute() As String
            Get
                Return ResourceManager.GetString("DnpPattribute", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property DotBundle() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("DotBundle", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property DotFuscator() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("DotFuscator", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property DotWall() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("DotWall", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property EazFuscator() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("EazFuscator", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Goliath() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Goliath", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property ILProtector() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("ILProtector", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Byte[].
        '''</summary>
        Friend ReadOnly Property ILRepack() As Byte()
            Get
                Dim obj As Object = ResourceManager.GetObject("ILRepack", resourceCulture)
                Return CType(obj,Byte())
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Macrobject() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Macrobject", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Manco() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Manco", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property MPress() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("MPress", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property NetPack() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("NetPack", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property NetReactor() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("NetReactor", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property NetShrink() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("NetShrink", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Netz() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Netz", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property RPX() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("RPX", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Byte[].
        '''</summary>
        Friend ReadOnly Property SevenzipLib() As Byte()
            Get
                Dim obj As Object = ResourceManager.GetObject("SevenzipLib", resourceCulture)
                Return CType(obj,Byte())
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Skater() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Skater", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property SmartAssembly() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("SmartAssembly", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Spices() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Spices", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Valid() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Valid", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
        
        '''<summary>
        '''  Recherche une ressource localisÃ©e de type System.Drawing.Bitmap.
        '''</summary>
        Friend ReadOnly Property Warning() As System.Drawing.Bitmap
            Get
                Dim obj As Object = ResourceManager.GetObject("Warning", resourceCulture)
                Return CType(obj,System.Drawing.Bitmap)
            End Get
        End Property
    End Module
End Namespace



================================================
File: Implementer/My Project/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="NetReactor" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\NetReactor.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="AgileDotNet" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\AgileDotNet.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Babel" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Babel.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CryptoObfuscator" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\CryptoObfuscator.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DotFuscator" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DotFuscator.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="EazFuscator" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\EazFuscator.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ILProtector" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ILProtector.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NetPack" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\NetPack.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Skater" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Skater.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SmartAssembly" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SmartAssembly.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CodeFort" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\CodeFort.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CodeVeil" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\CodeVeil.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DNP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DNP.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DotBundle" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DotBundle.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Goliath" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Goliath.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Macrobject" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Macrobject.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Manco" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Manco.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MPress" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\MPress.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NetShrink" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\NetShrink.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Netz" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Netz.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="RPX" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\RPX.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Spices" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Spices.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Valid" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Valid.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Confuser" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Confuser.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Warning" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Warning.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DnpOattribute" xml:space="preserve">
    <value>&lt;ObfuscatedByDotNetPatcher&gt;</value>
  </data>
  <data name="DnpPattribute" xml:space="preserve">
    <value>&lt;PackedByDotNetPatcher&gt;</value>
  </data>
  <data name="ILRepack" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ILRepack.exe;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="SevenzipLib" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SevenzipLib.dll;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="DotWall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Dotwall.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: Implementer/My Project/Settings.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a Ã©tÃ© gÃ©nÃ©rÃ© par un outil.
'     Version du runtime :4.0.30319.34014
'
'     Les modifications apportÃ©es Ã  ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est rÃ©gÃ©nÃ©rÃ©.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My
    
    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"),  _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase
        
        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)
        
#Region "FonctionnalitÃ© Enregistrement automatique My.Settings"
#If _MyType = "WindowsForms" Then
    Private Shared addedHandler As Boolean

    Private Shared addedHandlerLockObject As New Object

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
        If My.Application.SaveMySettingsOnExit Then
            My.Settings.Save()
        End If
    End Sub
#End If
#End Region
        
        Public Shared ReadOnly Property [Default]() As MySettings
            Get
                
#If _MyType = "WindowsForms" Then
               If Not addedHandler Then
                    SyncLock addedHandlerLockObject
                        If Not addedHandler Then
                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                            addedHandler = True
                        End If
                    End SyncLock
                End If
#End If
                Return defaultInstance
            End Get
        End Property
    End Class
End Namespace

Namespace My
    
    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
    Friend Module MySettingsProperty
        
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
        Friend ReadOnly Property Settings() As Global.Implementer.My.MySettings
            Get
                Return Global.Implementer.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace



================================================
File: Implementer/My Project/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>




================================================
File: Injections/Injections.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Injections", "Injections\Injections.csproj", "{2E99870D-2ADF-448B-92CE-CCE190C9134D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2E99870D-2ADF-448B-92CE-CCE190C9134D}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: Injections/Injections/AntiDumping.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Reflection;
using System.Reflection.Emit;
using System.IO;
using System.Security.Cryptography;

namespace Injections
{
    public class AntiDumping
    {
        [DllImportAttribute("kernel32.dll")]
        static unsafe extern bool VirtualProtect(byte* lpAddress, int dwSize, uint flNewProtect, out uint lpflOldProtect);

        public static unsafe void Initialize()
        {
            uint old;
            byte* bas = (byte*)Marshal.GetHINSTANCE(typeof(AntiDumping).Module);
            byte* ptr = bas + 0x3c;
            byte* ptr2;
            ptr = ptr2 = bas + *(uint*)ptr;
            ptr += 0x6;
            ushort sectNum = *(ushort*)ptr;
            ptr += 14;
            ushort optSize = *(ushort*)ptr;
            ptr = ptr2 = ptr + 0x4 + optSize;

            byte* @new = stackalloc byte[11];// (byte*)Marshal.AllocHGlobal(11);
            if (typeof(AntiDumping).Module.FullyQualifiedName[0] != '<')   //Mapped
            {
                //VirtualProtect(ptr - 16, 8, 0x40, out old);
                //*(uint*)(ptr - 12) = 0;
                byte* mdDir = bas + *(uint*)(ptr - 16);
                //*(uint*)(ptr - 16) = 0;

                if (*(uint*)(ptr - 0x78) != 0)
                {
                    byte* importDir = bas + *(uint*)(ptr - 0x78);
                    byte* oftMod = bas + *(uint*)importDir;
                    byte* modName = bas + *(uint*)(importDir + 12);
                    byte* funcName = bas + *(uint*)oftMod + 2;
                    VirtualProtect(modName, 11, 0x40, out old);

                    *(uint*)@new = 0x6c64746e;
                    *((uint*)@new + 1) = 0x6c642e6c;
                    *((ushort*)@new + 4) = 0x006c;
                    *(@new + 10) = 0;

                    for (int i = 0; i < 11; i++)
                        *(modName + i) = *(@new + i);

                    VirtualProtect(funcName, 11, 0x40, out old);

                    *(uint*)@new = 0x6f43744e;
                    *((uint*)@new + 1) = 0x6e69746e;
                    *((ushort*)@new + 4) = 0x6575;
                    *(@new + 10) = 0;

                    for (int i = 0; i < 11; i++)
                        *(funcName + i) = *(@new + i);
                }

                for (int i = 0; i < sectNum; i++)
                {
                    VirtualProtect(ptr, 8, 0x40, out old);
                    Marshal.Copy(new byte[8], 0, (IntPtr)ptr, 8);
                    ptr += 0x28;
                }
                VirtualProtect(mdDir, 0x48, 0x40, out old);
                byte* mdHdr = bas + *(uint*)(mdDir + 8);
                *(uint*)mdDir = 0;
                *((uint*)mdDir + 1) = 0;
                *((uint*)mdDir + 2) = 0;
                *((uint*)mdDir + 3) = 0;

                VirtualProtect(mdHdr, 4, 0x40, out old);
                *(uint*)mdHdr = 0;
                mdHdr += 12;
                mdHdr += *(uint*)mdHdr;
                mdHdr = (byte*)(((uint)mdHdr + 7) & ~3);
                mdHdr += 2;
                ushort numOfStream = *mdHdr;
                mdHdr += 2;
                for (int i = 0; i < numOfStream; i++)
                {
                    VirtualProtect(mdHdr, 8, 0x40, out old);
                    //*(uint*)mdHdr = 0;
                    mdHdr += 4;
                    //*(uint*)mdHdr = 0;
                    mdHdr += 4;
                    for (int ii = 0; ii < 8; ii++)
                    {
                        VirtualProtect(mdHdr, 4, 0x40, out old);
                        *mdHdr = 0; mdHdr++;
                        if (*mdHdr == 0)
                        {
                            mdHdr += 3;
                            break;
                        }
                        *mdHdr = 0; mdHdr++;
                        if (*mdHdr == 0)
                        {
                            mdHdr += 2;
                            break;
                        }
                        *mdHdr = 0; mdHdr++;
                        if (*mdHdr == 0)
                        {
                            mdHdr += 1;
                            break;
                        }
                        *mdHdr = 0; mdHdr++;
                    }
                }
            }
            else   //Flat
            {
                //VirtualProtect(ptr - 16, 8, 0x40, out old);
                //*(uint*)(ptr - 12) = 0;
                uint mdDir = *(uint*)(ptr - 16);
                //*(uint*)(ptr - 16) = 0;
                uint importDir = *(uint*)(ptr - 0x78);

                uint[] vAdrs = new uint[sectNum];
                uint[] vSizes = new uint[sectNum];
                uint[] rAdrs = new uint[sectNum];
                for (int i = 0; i < sectNum; i++)
                {
                    VirtualProtect(ptr, 8, 0x40, out old);
                    Marshal.Copy(new byte[8], 0, (IntPtr)ptr, 8);
                    vAdrs[i] = *(uint*)(ptr + 12);
                    vSizes[i] = *(uint*)(ptr + 8);
                    rAdrs[i] = *(uint*)(ptr + 20);
                    ptr += 0x28;
                }


                if (importDir != 0)
                {
                    for (int i = 0; i < sectNum; i++)
                        if (vAdrs[i] < importDir && importDir < vAdrs[i] + vSizes[i])
                        {
                            importDir = importDir - vAdrs[i] + rAdrs[i];
                            break;
                        }
                    byte* importDirPtr = bas + importDir;
                    uint oftMod = *(uint*)importDirPtr;
                    for (int i = 0; i < sectNum; i++)
                        if (vAdrs[i] < oftMod && oftMod < vAdrs[i] + vSizes[i])
                        {
                            oftMod = oftMod - vAdrs[i] + rAdrs[i];
                            break;
                        }
                    byte* oftModPtr = bas + oftMod;
                    uint modName = *(uint*)(importDirPtr + 12);
                    for (int i = 0; i < sectNum; i++)
                        if (vAdrs[i] < modName && modName < vAdrs[i] + vSizes[i])
                        {
                            modName = modName - vAdrs[i] + rAdrs[i];
                            break;
                        }
                    uint funcName = *(uint*)oftModPtr + 2;
                    for (int i = 0; i < sectNum; i++)
                        if (vAdrs[i] < funcName && funcName < vAdrs[i] + vSizes[i])
                        {
                            funcName = funcName - vAdrs[i] + rAdrs[i];
                            break;
                        }
                    VirtualProtect(bas + modName, 11, 0x40, out old);

                    *(uint*)@new = 0x6c64746e;
                    *((uint*)@new + 1) = 0x6c642e6c;
                    *((ushort*)@new + 4) = 0x006c;
                    *(@new + 10) = 0;

                    for (int i = 0; i < 11; i++)
                        *(bas + modName + i) = *(@new + i);

                    VirtualProtect(bas + funcName, 11, 0x40, out old);

                    *(uint*)@new = 0x6f43744e;
                    *((uint*)@new + 1) = 0x6e69746e;
                    *((ushort*)@new + 4) = 0x6575;
                    *(@new + 10) = 0;

                    for (int i = 0; i < 11; i++)
                        *(bas + funcName + i) = *(@new + i);
                }


                for (int i = 0; i < sectNum; i++)
                    if (vAdrs[i] < mdDir && mdDir < vAdrs[i] + vSizes[i])
                    {
                        mdDir = mdDir - vAdrs[i] + rAdrs[i];
                        break;
                    }
                byte* mdDirPtr = bas + mdDir;
                VirtualProtect(mdDirPtr, 0x48, 0x40, out old);
                uint mdHdr = *(uint*)(mdDirPtr + 8);
                for (int i = 0; i < sectNum; i++)
                    if (vAdrs[i] < mdHdr && mdHdr < vAdrs[i] + vSizes[i])
                    {
                        mdHdr = mdHdr - vAdrs[i] + rAdrs[i];
                        break;
                    }
                *(uint*)mdDirPtr = 0;
                *((uint*)mdDirPtr + 1) = 0;
                *((uint*)mdDirPtr + 2) = 0;
                *((uint*)mdDirPtr + 3) = 0;


                byte* mdHdrPtr = bas + mdHdr;
                VirtualProtect(mdHdrPtr, 4, 0x40, out old);
                *(uint*)mdHdrPtr = 0;
                mdHdrPtr += 12;
                mdHdrPtr += *(uint*)mdHdrPtr;
                mdHdrPtr = (byte*)(((uint)mdHdrPtr + 7) & ~3);
                mdHdrPtr += 2;
                ushort numOfStream = *mdHdrPtr;
                mdHdrPtr += 2;
                for (int i = 0; i < numOfStream; i++)
                {
                    VirtualProtect(mdHdrPtr, 8, 0x40, out old);
                    //*(uint*)mdHdrPtr = 0;
                    mdHdrPtr += 4;
                    //*(uint*)mdHdrPtr = 0;
                    mdHdrPtr += 4;
                    for (int ii = 0; ii < 8; ii++)
                    {
                        VirtualProtect(mdHdrPtr, 4, 0x40, out old);
                        *mdHdrPtr = 0; mdHdrPtr++;
                        if (*mdHdrPtr == 0)
                        {
                            mdHdrPtr += 3;
                            break;
                        }
                        *mdHdrPtr = 0; mdHdrPtr++;
                        if (*mdHdrPtr == 0)
                        {
                            mdHdrPtr += 2;
                            break;
                        }
                        *mdHdrPtr = 0; mdHdrPtr++;
                        if (*mdHdrPtr == 0)
                        {
                            mdHdrPtr += 1;
                            break;
                        }
                        *mdHdrPtr = 0; mdHdrPtr++;
                    }
                }
            }
            //Marshal.FreeHGlobal((IntPtr)@new);
        }
    }



    //static class Proxies
    //{
    //    private static void CtorProxy(RuntimeFieldHandle f)
    //    {
    //        FieldInfo fld = FieldInfo.GetFieldFromHandle(f);
    //        var m = fld.Module;
    //        byte[] dat = m.ResolveSignature(fld.MetadataToken);

    //        uint x =
    //            ((uint)dat[dat.Length - 6] << 0) |
    //            ((uint)dat[dat.Length - 5] << 8) |
    //            ((uint)dat[dat.Length - 3] << 16) |
    //            ((uint)dat[dat.Length - 2] << 24);

    //        ConstructorInfo mtd = m.ResolveMethod(Mutation.Placeholder((int)x) | ((int)dat[dat.Length - 7] << 24)) as ConstructorInfo;

    //        var args = mtd.GetParameters();
    //        Type[] arg = new Type[args.Length];
    //        for (int i = 0; i < args.Length; i++)
    //            arg[i] = args[i].ParameterType;

    //        DynamicMethod dm;
    //        if (mtd.DeclaringType.IsInterface || mtd.DeclaringType.IsArray)
    //            dm = new DynamicMethod("", mtd.DeclaringType, arg, fld.DeclaringType, true);
    //        else
    //            dm = new DynamicMethod("", mtd.DeclaringType, arg, mtd.DeclaringType, true);
    //        Console.WriteLine(mtd.DeclaringType);
    //        Console.WriteLine(mtd.Name);
    //        var info = dm.GetDynamicILInfo();
    //        info.SetLocalSignature(new byte[] { 0x7, 0x0 });
    //        byte[] y = new byte[2 * arg.Length + 6 + 5];
    //        for (int i = 0; i < arg.Length; i++)
    //        {
    //            y[i * 2] = 0x0e;
    //            y[i * 2 + 1] = (byte)i;
    //        }
    //        y[arg.Length * 2] = 0x73;
    //        Buffer.BlockCopy(BitConverter.GetBytes(info.GetTokenFor(mtd.MethodHandle)), 0, y, arg.Length * 2 + 1, 4);
    //        y[arg.Length * 2 + 5] = 0x74;
    //        Buffer.BlockCopy(BitConverter.GetBytes(info.GetTokenFor(mtd.DeclaringType.TypeHandle)), 0, y, arg.Length * 2 + 6, 4);
    //        y[y.Length - 1] = 0x2a;
    //        info.SetCode(y, arg.Length + 1);
    //        //Mutation.Break();
    //        fld.SetValue(null, dm.CreateDelegate(fld.FieldType));
    //    }
    //    private static void MtdProxy(RuntimeFieldHandle f)
    //    {
    //        var fld = FieldInfo.GetFieldFromHandle(f);
    //        var m = fld.Module;
    //        byte[] dat = m.ResolveSignature(fld.MetadataToken);

    //        uint x =
    //            ((uint)dat[dat.Length - 6] << 0) |
    //            ((uint)dat[dat.Length - 5] << 8) |
    //            ((uint)dat[dat.Length - 3] << 16) |
    //            ((uint)dat[dat.Length - 2] << 24);

    //        var mtd = m.ResolveMethod(Mutation.Placeholder((int)x) | ((int)dat[dat.Length - 7] << 24)) as MethodInfo;

    //        if (mtd.IsStatic)
    //            fld.SetValue(null, Delegate.CreateDelegate(fld.FieldType, mtd));
    //        else
    //        {
    //            string n = fld.Name;

    //            var tmp = mtd.GetParameters();
    //            Type[] arg = new Type[tmp.Length + 1];
    //            arg[0] = typeof(object);
    //            for (int i = 0; i < tmp.Length; i++)
    //                arg[i + 1] = tmp[i].ParameterType;

    //            DynamicMethod dm;
    //            var decl = mtd.DeclaringType;
    //            var decl2 = fld.DeclaringType;
    //            if (decl.IsInterface || decl.IsArray)
    //                dm = new DynamicMethod("", mtd.ReturnType, arg, decl2, true);
    //            else
    //                dm = new DynamicMethod("", mtd.ReturnType, arg, decl, true);

    //            var info = dm.GetDynamicILInfo();
    //            info.SetLocalSignature(new byte[] { 0x7, 0x0 });
    //            byte[] y = new byte[2 * arg.Length + 11];
    //            int idx = 0;
    //            for (int i = 0; i < arg.Length; i++)
    //            {
    //                y[idx++] = 0x0e;
    //                y[idx++] = (byte)i;
    //                if (i == 0)
    //                {
    //                    y[idx++] = 0x74;
    //                    Buffer.BlockCopy(BitConverter.GetBytes(info.GetTokenFor(decl.TypeHandle)), 0, y, idx, 4);
    //                    idx += 4;
    //                }
    //            }
    //            y[idx++] = (byte)((n[0] == Mutation.Key0I) ? 0x6f : 0x28);
    //            Buffer.BlockCopy(BitConverter.GetBytes(info.GetTokenFor(mtd.MethodHandle)), 0, y, idx, 4);
    //            idx += 4;
    //            y[idx] = 0x2a;
    //            info.SetCode(y, arg.Length + 1);

    //            fld.SetValue(null, dm.CreateDelegate(fld.FieldType));
    //        }
    //    }
    //}





    //static class AntiTamperMem
    //{
    //    [DllImportAttribute("kernel32.dll")]
    //    static extern bool VirtualProtect(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

    //    public static unsafe void Initalize()
    //    {
    //        Module mod = typeof(AntiTamperMem).Module;
    //        IntPtr modPtr = Marshal.GetHINSTANCE(mod);
    //        if (modPtr == (IntPtr)(-1)) Environment.FailFast("Module error");
    //        bool mapped = mod.FullyQualifiedName[0] != '<'; //<Unknown>
    //        Stream stream;
    //        stream = new UnmanagedMemoryStream((byte*)modPtr.ToPointer(), 0xfffffff, 0xfffffff, FileAccess.ReadWrite);

    //        byte[] buff;
    //        int checkSumOffset;
    //        ulong checkSum;
    //        byte[] iv;
    //        byte[] dats;
    //        int sn;
    //        int snLen;
    //        using (BinaryReader rdr = new BinaryReader(stream))
    //        {
    //            stream.Seek(0x3c, SeekOrigin.Begin);
    //            uint offset = rdr.ReadUInt32();
    //            stream.Seek(offset, SeekOrigin.Begin);
    //            stream.Seek(0x6, SeekOrigin.Current);
    //            uint sections = rdr.ReadUInt16();
    //            stream.Seek(0xC, SeekOrigin.Current);
    //            uint optSize = rdr.ReadUInt16();
    //            stream.Seek(offset = offset + 0x18, SeekOrigin.Begin);  //Optional hdr
    //            bool pe32 = (rdr.ReadUInt16() == 0x010b);
    //            stream.Seek(0x3e, SeekOrigin.Current);
    //            checkSumOffset = (int)stream.Position;
    //            uint md = rdr.ReadUInt32() ^ (uint)Mutation.Key0I;
    //            if (md == (uint)Mutation.Key0I)
    //                Environment.FailFast("Broken file");

    //            stream.Seek(offset = offset + optSize, SeekOrigin.Begin);  //sect hdr
    //            uint datLoc = 0;
    //            for (int i = 0; i < sections; i++)
    //            {
    //                int h = 0;
    //                for (int j = 0; j < 8; j++)
    //                {
    //                    byte chr = rdr.ReadByte();
    //                    if (chr != 0) h += chr;
    //                }
    //                uint vSize = rdr.ReadUInt32();
    //                uint vLoc = rdr.ReadUInt32();
    //                uint rSize = rdr.ReadUInt32();
    //                uint rLoc = rdr.ReadUInt32();
    //                if (h == Mutation.Key1I)
    //                    datLoc = mapped ? vLoc : rLoc;
    //                if (!mapped && md > vLoc && md < vLoc + vSize)
    //                    md = md - vLoc + rLoc;
    //                stream.Seek(0x10, SeekOrigin.Current);
    //            }

    //            stream.Seek(md, SeekOrigin.Begin);
    //            using (MemoryStream str = new MemoryStream())
    //            {
    //                stream.Position += 12;
    //                stream.Position += rdr.ReadUInt32() + 4;
    //                stream.Position += 2;

    //                ushort streams = rdr.ReadUInt16();

    //                for (int i = 0; i < streams; i++)
    //                {
    //                    uint pos = rdr.ReadUInt32() + md;
    //                    uint size = rdr.ReadUInt32();

    //                    int c = 0;
    //                    while (rdr.ReadByte() != 0) c++;
    //                    long ori = stream.Position += (((c + 1) + 3) & ~3) - (c + 1);

    //                    stream.Position = pos;
    //                    str.Write(rdr.ReadBytes((int)size), 0, (int)size);
    //                    stream.Position = ori;
    //                }

    //                buff = str.ToArray();
    //            }

    //            stream.Seek(datLoc, SeekOrigin.Begin);
    //            checkSum = rdr.ReadUInt64() ^ (ulong)Mutation.Key0L;
    //            sn = rdr.ReadInt32();
    //            snLen = rdr.ReadInt32();
    //            iv = rdr.ReadBytes(rdr.ReadInt32() ^ Mutation.Key2I);
    //            dats = rdr.ReadBytes(rdr.ReadInt32() ^ Mutation.Key3I);
    //        }

    //        byte[] md5 = MD5.Create().ComputeHash(buff);
    //        ulong tCs = BitConverter.ToUInt64(md5, 0) ^ BitConverter.ToUInt64(md5, 8);
    //        if (tCs != checkSum)
    //            Environment.FailFast("Broken file");

    //        byte[] b = Decrypt(buff, iv, dats);
    //        Buffer.BlockCopy(new byte[buff.Length], 0, buff, 0, buff.Length);
    //        if (b[0] != 0xd6 || b[1] != 0x6f)
    //            Environment.FailFast("Broken file");
    //        byte[] tB = new byte[b.Length - 2];
    //        Buffer.BlockCopy(b, 2, tB, 0, tB.Length);
    //        using (BinaryReader rdr = new BinaryReader(new MemoryStream(tB)))
    //        {
    //            uint len = rdr.ReadUInt32();
    //            int[] codeLens = new int[len];
    //            IntPtr[] ptrs = new IntPtr[len];
    //            for (int i = 0; i < len; i++)
    //            {
    //                uint pos = rdr.ReadUInt32() ^ (uint)Mutation.Key4I;
    //                if (pos == 0) continue;
    //                uint rva = rdr.ReadUInt32() ^ (uint)Mutation.Key5I;
    //                byte[] cDat = rdr.ReadBytes(rdr.ReadInt32());
    //                uint old;
    //                IntPtr ptr = (IntPtr)((uint)modPtr + (mapped ? rva : pos));
    //                VirtualProtect(ptr, (uint)cDat.Length, 0x04, out old);
    //                Marshal.Copy(cDat, 0, ptr, cDat.Length);
    //                VirtualProtect(ptr, (uint)cDat.Length, old, out old);
    //                codeLens[i] = cDat.Length;
    //                ptrs[i] = ptr;
    //            }
    //            //for (int i = 0; i < len; i++)
    //            //{
    //            //    if (codeLens[i] == 0) continue;
    //            //    RuntimeHelpers.PrepareMethod(mod.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(0x06000000 + i + 1));
    //            //}
    //            //for (int i = 0; i < len; i++)
    //            //{
    //            //    if (codeLens[i] == 0) continue;
    //            //    uint old;
    //            //    VirtualProtect(ptrs[i], (uint)codeLens[i], 0x04, out old);
    //            //    Marshal.Copy(new byte[codeLens[i]], 0, ptrs[i], codeLens[i]);
    //            //    VirtualProtect(ptrs[i], (uint)codeLens[i], old, out old);
    //            //}
    //        }
    //    }

    //    static byte[] Decrypt(byte[] buff, byte[] iv, byte[] dat)
    //    {
    //        RijndaelManaged ri = new RijndaelManaged();
    //        byte[] ret = new byte[dat.Length];
    //        MemoryStream ms = new MemoryStream(dat);
    //        using (CryptoStream cStr = new CryptoStream(ms, ri.CreateDecryptor(SHA256.Create().ComputeHash(buff), iv), CryptoStreamMode.Read))
    //        { cStr.Read(ret, 0, dat.Length); }

    //        SHA512 sha = SHA512.Create();
    //        byte[] c = sha.ComputeHash(buff);
    //        for (int i = 0; i < ret.Length; i += 64)
    //        {
    //            int len = ret.Length <= i + 64 ? ret.Length : i + 64;
    //            for (int j = i; j < len; j++)
    //                ret[j] ^= (byte)(c[j - i] ^ Mutation.Key6I);
    //            c = sha.ComputeHash(ret, i, len - i);
    //        }
    //        return ret;
    //    }
    //}





}



================================================
File: Injections/Injections/Injections.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{2E99870D-2ADF-448B-92CE-CCE190C9134D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Injections</RootNamespace>
    <AssemblyName>Injections</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AntiDumping.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: Injections/Injections/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associÃ©es Ã  un assembly.
[assembly: AssemblyTitle("Injections")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Injections")]
[assembly: AssemblyCopyright("Copyright Â© 3DotDev 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// L'affectation de la valeur false Ã  ComVisible rend les types invisibles dans cet assembly 
// aux composants COM. Si vous devez accÃ©der Ã  un type dans cet assembly Ã  partir de 
// COM, affectez la valeur true Ã  l'attribut ComVisible sur ce type.
[assembly: ComVisible(false)]

// Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
[assembly: Guid("dc231337-2824-40af-a9b6-12b404aa5b0e")]

// Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
//
//      Version principale
//      Version secondaire 
//      NumÃ©ro de build
//      RÃ©vision
//
// Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
// en utilisant '*', comme indiquÃ© ci-dessousÂ :
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: LoginTheme/LoginTheme.vb
================================================
ï»¿Option Strict On

Imports System.Drawing.Text
Imports System.Drawing.Drawing2D
Imports System.ComponentModel
Imports System.Runtime.InteropServices
Imports System.Windows.Forms
Imports System.Drawing

''     DO NOT REMOVE CREDITS! IF YOU USE PLEASE CREDIT!     ''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''           Added by Sh@rp aka 3DotDev  :      ''''''
'''''' - RadioButton CheckedState Event manager     ''''''
'''''' - Enabled/Disabled control States            ''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Namespace XertzLoginTheme

    ''' <summary>
    ''' LogIn GDI+ Theme
    ''' Creator: Xertz (HF)
    ''' Version: 1.3
    ''' Control Count: 28
    ''' Date Created: 18/12/2013
    ''' Date Changed: 23/04/2014
    ''' UID: 1602992
    ''' For any bugs / errors, PM me.
    ''' </summary>
    ''' <remarks></remarks>

    Module DrawHelpers

#Region "Functions"

        Public Function RoundRectangle(ByVal Rectangle As Rectangle, ByVal Curve As Integer) As GraphicsPath
            Dim P As GraphicsPath = New GraphicsPath()
            Dim ArcRectangleWidth As Integer = Curve * 2
            P.AddArc(New Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90)
            P.AddArc(New Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90)
            P.AddArc(New Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0, 90)
            P.AddArc(New Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90, 90)
            P.AddLine(New Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), New Point(Rectangle.X, Curve + Rectangle.Y))
            Return P
        End Function

        Public Function RoundRect(x!, y!, w!, h!, Optional r! = 0.3, Optional TL As Boolean = True, Optional TR As Boolean = True, Optional BR As Boolean = True, Optional BL As Boolean = True) As GraphicsPath
            Dim d! = Math.Min(w, h) * r, xw = x + w, yh = y + h
            RoundRect = New GraphicsPath

            With RoundRect
                If TL Then .AddArc(x, y, d, d, 180, 90) Else .AddLine(x, y, x, y)
                If TR Then .AddArc(xw - d, y, d, d, 270, 90) Else .AddLine(xw, y, xw, y)
                If BR Then .AddArc(xw - d, yh - d, d, d, 0, 90) Else .AddLine(xw, yh, xw, yh)
                If BL Then .AddArc(x, yh - d, d, d, 90, 90) Else .AddLine(x, yh, x, yh)

                .CloseFigure()
            End With
        End Function

        Enum MouseState As Byte
            None = 0
            Over = 1
            Down = 2
            Block = 3
        End Enum

#End Region

    End Module

    Public Class LogInThemeContainer
        Inherits ContainerControl

#Region "Declarations" 
        Private ReadOnly _Font As Font

        Private State As MouseState = MouseState.None
        Private MouseXLoc As Integer
        Private MouseYLoc As Integer
        Private CaptureMovement As Boolean = False
        Private Const MoveHeight As Integer = 35
        Private MouseP As Point = New Point(0, 0)   
#End Region

#Region "Properties & Events"

        <Category("Control")>
        Public Property FontSize As Integer
        <Category("Control")>
        Public Property AllowMinimize As Boolean
        <Category("Control")>
        Public Property AllowMaximize As Boolean
        <Category("Control")>
        Public Property ShowIcon As Boolean
        <Category("Control")>
        Public Property AllowClose As Boolean
        <Category("Control")>
        Public Property ShowControlBox As Boolean
        <Category("Control")>
        Public Property ShowMinimizeButton As Boolean
        <Category("Control")>
        Public Property ShowMaximizeButton As Boolean
        <Category("Colours")>
        Public Property BorderColour As Color
        <Category("Colours")>
        Public Property HoverColour As Color
        <Category("Colours")>
        Public Property BaseColour As Color
        <Category("Colours")>
        Public Property ContainerColour As Color
        <Category("Colours")>
        Public Property FontColour As Color
        <Category("Colours")>
        Public Property MouseOverColour As Color

        Protected Overrides Sub OnMouseUp(ByVal e As System.Windows.Forms.MouseEventArgs)
            MyBase.OnMouseUp(e)
            CaptureMovement = False
            State = MouseState.Over
            Invalidate()
        End Sub

        Protected Overrides Sub OnMouseEnter(e As EventArgs)
            MyBase.OnMouseEnter(e)
            State = MouseState.Over : Invalidate()
        End Sub

        Protected Overrides Sub OnMouseLeave(e As EventArgs)
            MyBase.OnMouseLeave(e)
            State = MouseState.None : Invalidate()
        End Sub

        Protected Overrides Sub OnMouseMove(e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            MouseXLoc = e.Location.X
            MouseYLoc = e.Location.Y
            Invalidate()
            If CaptureMovement Then
                Parent.Location = MousePosition - CType(MouseP, Size)
            End If
        End Sub

        Protected Overrides Sub OnMouseDown(e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            If MouseXLoc > Width - 39 AndAlso MouseXLoc < Width - 16 AndAlso MouseYLoc < 22 Then
                If _ShowControlBox AndAlso _AllowClose Then
                    'Environment.Exit(0)
                    FindForm.Close()
                End If
            ElseIf MouseXLoc > Width - 64 AndAlso MouseXLoc < Width - 41 AndAlso MouseYLoc < 22 Then
                If _ShowControlBox AndAlso _AllowMaximize Then
                    Select Case FindForm.WindowState
                        Case FormWindowState.Maximized
                            FindForm.WindowState = FormWindowState.Normal
                        Case FormWindowState.Normal
                            FindForm.WindowState = FormWindowState.Maximized
                    End Select
                End If
            ElseIf MouseXLoc > Width - 89 AndAlso MouseXLoc < Width - 66 AndAlso MouseYLoc < 22 Then
                If _ShowControlBox AndAlso _AllowMinimize Then
                    Select Case FindForm.WindowState
                        Case FormWindowState.Normal
                            FindForm.WindowState = FormWindowState.Minimized
                        Case FormWindowState.Maximized
                            FindForm.WindowState = FormWindowState.Minimized
                    End Select
                End If
            ElseIf e.Button = Windows.Forms.MouseButtons.Left And New Rectangle(0, 0, Width - 90, MoveHeight).Contains(e.Location) Then
                CaptureMovement = True
                MouseP = e.Location
            ElseIf e.Button = Windows.Forms.MouseButtons.Left And New Rectangle(Width - 90, 22, 75, 13).Contains(e.Location) Then
                CaptureMovement = True
                MouseP = e.Location
            ElseIf e.Button = Windows.Forms.MouseButtons.Left And New Rectangle(Width - 15, 0, 15, MoveHeight).Contains(e.Location) Then
                CaptureMovement = True
                MouseP = e.Location
            Else
                Focus()
            End If
            State = MouseState.Down
            Invalidate()
        End Sub

#End Region

#Region "Draw Control"

        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                    ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer, True)
            DoubleBuffered = True
            BackColor = _BaseColour
            Dock = DockStyle.Fill
            _MouseOverColour = Color.BlueViolet
            _FontSize = 12
            _Font = New Font("Segoe UI", _FontSize)
            _AllowMinimize = True
            _AllowMaximize = True
            _AllowClose = True
            _ShowControlBox = True
            _ShowMinimizeButton = True
            _ShowMaximizeButton = True
            _ShowIcon = True
            _FontColour = Color.FromArgb(255, 255, 255)
            _BaseColour = Color.FromArgb(35, 35, 35)
            _ContainerColour = Color.FromArgb(54, 54, 54)
            _BorderColour = Color.FromArgb(60, 60, 60)
            _HoverColour = Color.FromArgb(42, 42, 42)
        End Sub

        Protected Overrides Sub OnCreateControl()
            MyBase.OnCreateControl()
            ParentForm.FormBorderStyle = FormBorderStyle.None
            ParentForm.AllowTransparency = False
            ParentForm.TransparencyKey = Color.Fuchsia
            ParentForm.FindForm.StartPosition = FormStartPosition.CenterScreen
            Dock = DockStyle.Fill
            Invalidate()
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)

            Dim G = e.Graphics
            With G
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .SmoothingMode = SmoothingMode.HighQuality
                .PixelOffsetMode = PixelOffsetMode.HighQuality
                .FillRectangle(New SolidBrush(_BaseColour), New Rectangle(0, 0, Width, Height))
                .FillRectangle(New SolidBrush(_ContainerColour), New Rectangle(2, 35, Width - 4, Height - 37))

                .DrawRectangle(New Pen(_BorderColour), New Rectangle(0, 0, Width, Height))

                If _ShowControlBox Then
                    Dim ControlBoxPoints() As Point = Nothing

                    ''Close Button
                    .DrawLine(New Pen(_FontColour), Width - 33, 6, Width - 22, 16)
                    .DrawLine(New Pen(_FontColour), Width - 33, 16, Width - 22, 6)

                    ''Minimize Button
                    If _ShowMinimizeButton Then
                        .DrawLine(New Pen(_FontColour), Width - 83, 16, Width - 72, 16)
                    End If
                    ''Maximize Button
                    If _ShowMaximizeButton Then
                        .DrawLine(New Pen(_FontColour), Width - 58, 16, Width - 47, 16)
                        .DrawLine(New Pen(_FontColour), Width - 58, 16, Width - 58, 6)
                        .DrawLine(New Pen(_FontColour), Width - 47, 16, Width - 47, 6)
                        .DrawLine(New Pen(_FontColour), Width - 58, 6, Width - 47, 6)
                        .DrawLine(New Pen(_FontColour), Width - 58, 7, Width - 47, 7)
                    End If

                    If _ShowMinimizeButton AndAlso _ShowMaximizeButton Then
                        ControlBoxPoints = {New Point(Width - 90, 0), New Point(Width - 90, 22), New Point(Width - 15, 22), New Point(Width - 15, 0)}
                        .DrawLines(New Pen(_BorderColour), ControlBoxPoints)
                        .DrawLine(New Pen(_BorderColour), Width - 65, 0, Width - 65, 22)
                    Else
                        If _ShowMinimizeButton = False AndAlso _ShowMaximizeButton = False Then
                            ControlBoxPoints = {New Point(Width - 40, 22), New Point(Width - 15, 22), New Point(Width - 15, 0)}
                            .DrawLines(New Pen(_BorderColour), ControlBoxPoints)
                        End If
                    End If

                    Select Case State
                        Case MouseState.Over
                            If MouseXLoc > Width - 39 AndAlso MouseXLoc < Width - 16 AndAlso MouseYLoc < 22 Then
                                .FillRectangle(New SolidBrush(_HoverColour), New Rectangle(Width - 39, 0, 23, 22))
                                .DrawLine(New Pen(_MouseOverColour), Width - 33, 6, Width - 22, 16)
                                .DrawLine(New Pen(_MouseOverColour), Width - 33, 16, Width - 22, 6)
                            ElseIf MouseXLoc > Width - 64 AndAlso MouseXLoc < Width - 41 AndAlso MouseYLoc < 22 Then
                                If _ShowMaximizeButton AndAlso AllowMaximize Then
                                    .FillRectangle(New SolidBrush(_HoverColour), New Rectangle(Width - 64, 0, 23, 22))
                                    .DrawLine(New Pen(_MouseOverColour), Width - 58, 16, Width - 47, 16)
                                    .DrawLine(New Pen(_MouseOverColour), Width - 58, 16, Width - 58, 6)
                                    .DrawLine(New Pen(_MouseOverColour), Width - 47, 16, Width - 47, 6)
                                    .DrawLine(New Pen(_MouseOverColour), Width - 58, 6, Width - 47, 6)
                                    .DrawLine(New Pen(_MouseOverColour), Width - 58, 7, Width - 47, 7)
                                End If
                            ElseIf MouseXLoc > Width - 89 AndAlso MouseXLoc < Width - 66 AndAlso MouseYLoc < 22 Then
                                If _ShowMinimizeButton AndAlso AllowMinimize Then
                                    .FillRectangle(New SolidBrush(_HoverColour), New Rectangle(Width - 89, 0, 23, 22))
                                    .DrawLine(New Pen(_MouseOverColour), Width - 83, 16, Width - 72, 16)
                                End If
                            End If
                        Case Else
                            If MouseXLoc > Width - 39 AndAlso MouseXLoc < Width - 16 AndAlso MouseYLoc < 22 Then
                                ''Close Button
                                .DrawLine(New Pen(_FontColour), Width - 33, 6, Width - 22, 16)
                                .DrawLine(New Pen(_FontColour), Width - 33, 16, Width - 22, 6)
                            ElseIf MouseXLoc > Width - 64 AndAlso MouseXLoc < Width - 41 AndAlso MouseYLoc < 22 Then
                                If _ShowMaximizeButton Then
                                    .DrawLine(New Pen(_FontColour), Width - 58, 16, Width - 47, 16)
                                    .DrawLine(New Pen(_FontColour), Width - 58, 16, Width - 58, 6)
                                    .DrawLine(New Pen(_FontColour), Width - 47, 16, Width - 47, 6)
                                    .DrawLine(New Pen(_FontColour), Width - 58, 6, Width - 47, 6)
                                    .DrawLine(New Pen(_FontColour), Width - 58, 7, Width - 47, 7)
                                End If
                            ElseIf MouseXLoc > Width - 89 AndAlso MouseXLoc < Width - 66 AndAlso MouseYLoc < 22 Then
                                If _ShowMinimizeButton Then
                                    .DrawLine(New Pen(_FontColour), Width - 83, 16, Width - 72, 16)
                                End If
                            End If           
                    End Select
                    .DrawLine(New Pen(_BorderColour), Width - 40, 0, Width - 40, 22)

                    ''Close Button
                    '.DrawLine(New Pen(_FontColour), Width - 33, 6, Width - 22, 16)
                    '.DrawLine(New Pen(_FontColour), Width - 33, 16, Width - 22, 6)
                  
                End If

                If _ShowIcon Then
                    .DrawIcon(FindForm.Icon, New Rectangle(6, 6, 22, 22))
                End If
                .DrawString(Text, _Font, New SolidBrush(_FontColour), New RectangleF(3, 0, Width, 35), New StringFormat With {.LineAlignment = StringAlignment.Center, .Alignment = StringAlignment.Center})

                Dim P() As Point = {New Point(0, 0), New Point(CInt(Me.Width), 0), New Point(CInt(Me.Width), Me.Height), _
                               New Point(Width, Me.Height), New Point(Width, Height), New Point(0, Height), New Point(0, 0)}
                .DrawLines(New Pen(Color.Gray), P)

                .InterpolationMode = CType(7, InterpolationMode)
            End With
        End Sub

#End Region

    End Class

    <DefaultEvent("CheckedChanged"), InitializationEvent("CheckedState")> _
    Public Class LogInCheckBox
        Inherits Control

#Region "Declarations"
        Private _Checked As Boolean
        Private State As MouseState = MouseState.None
        Private _CheckedColour As Color = Color.FromArgb(173, 173, 174)
        Private _BorderColour As Color = Color.DimGray
        Private _BaseColour As Color = Color.FromArgb(35, 35, 35)
        Private _BackColour As Color = Color.FromArgb(47, 47, 47)
        Private _TextColour As Color = Color.FromArgb(255, 255, 255)
#End Region

#Region "Colour & Other Properties"


        <Category("Colours")>
        Public Property BaseColour As Color
            Get
                Return _BackColour
            End Get
            Set(value As Color)
                _BackColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property BorderColour As Color
            Get
                Return _BorderColour
            End Get
            Set(value As Color)
                _BorderColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property CheckedColour As Color
            Get
                Return _CheckedColour
            End Get
            Set(value As Color)
                _CheckedColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property FontColour As Color
            Get
                Return _TextColour
            End Get
            Set(value As Color)
                _TextColour = value
            End Set
        End Property

        Protected Overrides Sub OnTextChanged(ByVal e As EventArgs)
            MyBase.OnTextChanged(e)
            Invalidate()
        End Sub

        Protected Overrides Sub OnClick(e As EventArgs)
            _Checked = Not _Checked
            RaiseEvent CheckedChanged(Me, EventArgs.Empty)
            MyBase.OnClick(e)
        End Sub
        Public Property Checked() As Boolean
            Get
                Return _Checked
            End Get
            Set(value As Boolean)
                _Checked = value
                RaiseEvent CheckedChanged(Me, EventArgs.Empty)
                Invalidate()
            End Set
        End Property

        Public Event CheckedChanged As EventHandler

        Protected Overrides Sub OnResize(e As EventArgs)
            MyBase.OnResize(e)
            Height = 22
        End Sub
#End Region

#Region "Mouse States"

        Protected Overrides Sub OnMouseDown(e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            State = MouseState.Down : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseUp(e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseEnter(e As EventArgs)
            MyBase.OnMouseEnter(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseLeave(e As EventArgs)
            MyBase.OnMouseLeave(e)
            State = MouseState.None : Invalidate()
        End Sub

#End Region

#Region "Draw Control"
        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                       ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer Or ControlStyles.SupportsTransparentBackColor, True)
            DoubleBuffered = True
            Cursor = Cursors.Hand
            Size = New Size(100, 22)
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)
            Dim g = e.Graphics
            Dim Base As New Rectangle(0, 0, 19, 19)
            With g
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .SmoothingMode = SmoothingMode.HighQuality
                .Clear(Color.FromArgb(54, 54, 54))
                .FillRectangle(New SolidBrush(_BackColour), Base)
                .DrawRectangle(New Pen(_BorderColour), New Rectangle(0, 0, 19, 19))
                Select Case State
                    Case MouseState.Over
                        .FillRectangle(New SolidBrush(Color.FromArgb(50, 49, 51)), Base)
                        .DrawRectangle(New Pen(_BorderColour), New Rectangle(0, 0, 19, 19))
                End Select
                If Checked Then
                    Dim P() As Point = {New Point(2, 11), New Point(6, 8), New Point(9, 12), New Point(15, 3), New Point(17, 6), New Point(9, 16)}
                    _CheckedColour = If(Me.Enabled = False, Color.Gray, Color.BlueViolet)
                    .FillPolygon(New SolidBrush(_CheckedColour), P)
                End If
                _TextColour = If(Me.Parent.Enabled = False OrElse Enabled = False, Color.Gray, Color.FromArgb(255, 255, 255))
                .DrawString(Text, Font, New SolidBrush(_TextColour), New Rectangle(24, 1, Width, Height - 2), New StringFormat With {.Alignment = StringAlignment.Near, .LineAlignment = StringAlignment.Center})
                .InterpolationMode = CType(7, InterpolationMode)
            End With
        End Sub
#End Region

    End Class

#Region "Sh@rp : RadioButton EventArgs Class Added "
    Public Class CheckedArgs
        Inherits EventArgs
        Private _Checked As Boolean
        Public Sub New(ByVal theEventChecked As Boolean)
            _Checked = theEventChecked
        End Sub
        Public Property Checked As Boolean
            Get
                Return Me._Checked
            End Get
            Set(ByVal Value As Boolean)
                _Checked = Value
            End Set
        End Property
    End Class
#End Region

    <DefaultEvent("CheckedChanged"), InitializationEvent("CheckedState")> _
    Public Class LogInRadioButton
        Inherits Control

#Region "Declarations"
        Private _Checked As Boolean
        Private State As MouseState = MouseState.None
        Private _HoverColour As Color = Color.FromArgb(50, 49, 51)
        Private _CheckedColour As Color = Color.FromArgb(173, 173, 174)
        Private _BorderColour As Color = Color.DimGray
        Private _BackColour As Color = Color.FromArgb(54, 54, 54)
        Private _TextColour As Color = Color.FromArgb(255, 255, 255)
#End Region

#Region "Colour & Other Properties"

        <Category("Colours")>
        Public Property HighlightColour As Color
            Get
                Return _HoverColour
            End Get
            Set(value As Color)
                _HoverColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property BaseColour As Color
            Get
                Return _BackColour
            End Get
            Set(value As Color)
                _BackColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property BorderColour As Color
            Get
                Return _BorderColour
            End Get
            Set(value As Color)
                _BorderColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property CheckedColour As Color
            Get
                Return _CheckedColour
            End Get
            Set(value As Color)
                _CheckedColour = value
            End Set
        End Property

        <Category("Colours")>
        Public Property FontColour As Color
            Get
                Return _TextColour
            End Get
            Set(value As Color)
                _TextColour = value
            End Set
        End Property

#Region "Sh@rp : RadioButton CheckedState Added "
        Public Delegate Sub CheckedChangedHandler(ByVal sender As Object, ByVal e As System.EventArgs)

        <Category("Configuration"), Browsable(True), Description("CheckedChanged")> _
        Public Event CheckedChanged As CheckedChangedHandler

        <Category("Configuration"), Browsable(True), Description("CheckedState")> _
        Public Event CheckedState(ByVal sender As Object)

        Protected Overridable Sub OnCheckedChanged(ByVal e As System.EventArgs)
            RaiseEvent CheckedChanged(Me, e)
        End Sub

        Private _CheckState As CheckState
        Public Property CheckState As CheckState
            Get
                Return _CheckState
            End Get
            Set(ByVal V As CheckState)
                _CheckState = V
                RaiseEvent CheckedState(Me)
                Invalidate()
            End Set
        End Property
#End Region

        Property Checked() As Boolean
            Get
                Return _Checked
            End Get
            Set(value As Boolean)
                _Checked = value
                InvalidateControls()
                RaiseEvent CheckedChanged(Me, New EventArgs)
                Invalidate()
            End Set
        End Property

        Protected Overrides Sub OnClick(e As EventArgs)
            If Not _Checked Then Checked = True
            MyBase.OnClick(e)
        End Sub

        Private Sub InvalidateControls()
            If Not IsHandleCreated OrElse Not _Checked Then Return
            For Each C As Control In Parent.Controls
                If C IsNot Me AndAlso TypeOf C Is LogInRadioButton Then
                    DirectCast(C, LogInRadioButton).Checked = False
                    Invalidate()
                End If
            Next
        End Sub
        Protected Overrides Sub OnCreateControl()
            MyBase.OnCreateControl()
            InvalidateControls()
        End Sub
        Protected Overrides Sub OnResize(e As EventArgs)
            MyBase.OnResize(e)
            Height = 18
        End Sub
#End Region

#Region "Mouse States"

        Protected Overrides Sub OnMouseDown(e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            State = MouseState.Down : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseUp(e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseEnter(e As EventArgs)
            MyBase.OnMouseEnter(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseLeave(e As EventArgs)
            MyBase.OnMouseLeave(e)
            State = MouseState.None : Invalidate()
        End Sub

#End Region

#Region "Draw Control"
        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                       ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer Or ControlStyles.SupportsTransparentBackColor, True)
            DoubleBuffered = True
            Cursor = Cursors.Hand
            Size = New Size(100, 18)
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)
            Dim G = e.Graphics
            Dim Base As New Rectangle(1, 1, Height - 2, Height - 2)
            Dim Circle As New Rectangle(6, 6, Height - 12, Height - 12)
            With G
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .SmoothingMode = SmoothingMode.HighQuality
                .PixelOffsetMode = PixelOffsetMode.HighQuality
                .Clear(_BackColour)
                .FillEllipse(New SolidBrush(Color.FromArgb(47, 47, 47)), Base)
                .DrawEllipse(New Pen(_BorderColour, 1), Base)
                If Checked Then
                    Select Case State
                        Case MouseState.Over
                            .FillEllipse(New SolidBrush(_HoverColour), New Rectangle(2, 2, Height - 4, Height - 4))
                    End Select
                    _CheckedColour = If(Me.Enabled = False, Color.Gray, Color.BlueViolet)
                    .FillEllipse(New SolidBrush(_CheckedColour), Circle)
                Else
                    Select Case State
                        Case MouseState.Over
                            .FillEllipse(New SolidBrush(_HoverColour), New Rectangle(2, 2, Height - 4, Height - 4))
                    End Select
                End If
                _TextColour = If(Me.Parent.Enabled = False, Color.Gray, Color.FromArgb(255, 255, 255))
                .DrawString(Text, Font, New SolidBrush(_TextColour), New Rectangle(24, 0, Width, Height), New StringFormat With {.Alignment = StringAlignment.Near, .LineAlignment = StringAlignment.Near})
                .InterpolationMode = CType(7, InterpolationMode)
            End With
        End Sub
#End Region

    End Class

    Public Class LogInLabel
        Inherits Label

#Region "Declaration"
        Private _FontColour As Color = Color.FromArgb(255, 255, 255)
#End Region

#Region "Property & Event"

        <Category("Colours")>
        Public Property FontColour As Color
            Get
                Return _FontColour
            End Get
            Set(value As Color)
                _FontColour = value
            End Set
        End Property

        Protected Overrides Sub OnTextChanged(e As EventArgs)
            MyBase.OnTextChanged(e) : Invalidate()
        End Sub

#End Region

#Region "Draw Control"

        Sub New()
            SetStyle(ControlStyles.SupportsTransparentBackColor, True)
            Font = New Font("Segoe UI", 9)
            ForeColor = _FontColour
            BackColor = Color.Transparent
            Text = Text
        End Sub

#End Region

    End Class

    Public Class LogInButton
        Inherits Control

#Region "Declarations"
        Private ReadOnly _Font As New Font("Segoe UI", 9)
        Private _MainColour As Color = Color.FromArgb(42, 42, 42)
        Private State As New MouseState
#End Region

#Region "Mouse States"

        Protected Overrides Sub OnMouseDown(e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            State = MouseState.Down : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseUp(e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseEnter(e As EventArgs)
            MyBase.OnMouseEnter(e)
            State = MouseState.Over : Invalidate()
        End Sub
        Protected Overrides Sub OnMouseLeave(e As EventArgs)
            MyBase.OnMouseLeave(e)
            State = MouseState.None : Invalidate()
        End Sub

#End Region

#Region "Properties"

        <Category("Colours")>
        Public Property LineColour As Color
        <Category("Colours")>
        Public Property ProgressColour As Color
        <Category("Colours")>
        Public Property BorderColour As Color
        <Category("Colours")>
        Public Property FontColour As Brush
        <Category("Colours")>
        Public Property BaseColour As Color
        <Category("Colours")>
        Public Property HoverColour As Color
        <Category("Colours")>
        Public Property PressedColour As Color

#End Region

#Region "Draw Control"
        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                  ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer Or _
                  ControlStyles.SupportsTransparentBackColor, True)
            DoubleBuffered = True
            Size = New Size(75, 30)
            BackColor = Color.Transparent

            _ProgressColour = Color.DarkViolet
            _BorderColour = Color.FromArgb(25, 25, 25)
            _FontColour = Brushes.White
            _HoverColour = Color.FromArgb(52, 52, 52)
            _PressedColour = Color.FromArgb(47, 47, 47)
            _LineColour = Color.BlueViolet
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)
            Dim G = e.Graphics
            With G
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .Clear(BackColor)
                Dim bru As Brush = Brushes.White
                bru = If(Me.Enabled = False, Brushes.Gray, Brushes.White)
                Select Case State
                    Case MouseState.None
                        .FillRectangle(New SolidBrush(_MainColour), New Rectangle(0, 0, Width, Height))
                        .DrawRectangle(New Pen(_BorderColour, 2), New Rectangle(0, 0, Width, Height))
                        .DrawString(Text, _Font, bru, New Point(CInt(Width / 2), CInt(Height / 2)), New StringFormat With {.Alignment = StringAlignment.Center, .LineAlignment = StringAlignment.Center})
                    Case MouseState.Over
                        .FillRectangle(New SolidBrush(_HoverColour), New Rectangle(0, 0, Width, Height))
                        .DrawRectangle(New Pen(_BorderColour, 1), New Rectangle(1, 1, Width - 2, Height - 2))
                        .DrawString(Text, _Font, bru, New Point(CInt(Width / 2), CInt(Height / 2)), New StringFormat With {.Alignment = StringAlignment.Center, .LineAlignment = StringAlignment.Center})
                    Case MouseState.Down
                        .FillRectangle(New SolidBrush(_PressedColour), New Rectangle(0, 0, Width, Height))
                        .DrawRectangle(New Pen(_BorderColour, 1), New Rectangle(1, 1, Width - 2, Height - 2))
                        .DrawString(Text, _Font, bru, New Point(CInt(Width / 2), CInt(Height / 2)), New StringFormat With {.Alignment = StringAlignment.Center, .LineAlignment = StringAlignment.Center})
                End Select
                .DrawLine(New Pen(_LineColour, 2), New Point(1, CInt(Height / 2)), New Point(1 + 5, CInt(Height / 2)))
                .DrawLine(New Pen(_LineColour, 2), New Point(1, 1), New Point(1, Height - 1))

                .InterpolationMode = CType(7, InterpolationMode)
            End With

        End Sub

#End Region

    End Class

    Public Class LogInGroupBox
        Inherits ContainerControl

#Region "Properties"
        <Category("Colours")>
        Public Property BorderColour As Color
        <Category("Colours")>
        Public Property TextColour As Color
        <Category("Colours")>
        Public Property HeaderColour As Color
        <Category("Colours")>
        Public Property MainColour As Color
#End Region

#Region "Draw Control"
        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                   ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer Or _
                   ControlStyles.SupportsTransparentBackColor, True)
            DoubleBuffered = True
            Size = New Size(160, 110)
            Font = New Font("Segoe UI", 9, FontStyle.Bold)
            _MainColour = Color.FromArgb(54, 54, 54)
            _HeaderColour = Color.FromArgb(42, 42, 42)
            _TextColour = Color.FromArgb(255, 255, 255)
            _BorderColour = Color.DimGray
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)
            Dim g = e.Graphics
            With g
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .SmoothingMode = SmoothingMode.HighQuality
                .PixelOffsetMode = PixelOffsetMode.HighQuality
                .Clear(Color.FromArgb(54, 54, 54))
                .FillRectangle(New SolidBrush(_MainColour), New Rectangle(0, 28, Width, Height))
                _TextColour = If(Me.Enabled = False, Color.Gray, Color.FromArgb(255, 255, 255))
                .FillRectangle(New SolidBrush(_HeaderColour), New Rectangle(New Point(0, 0), New Size(Width + 10, CInt(.MeasureString(Text, Font).Height + 10))))
                .DrawString(Text, Font, New SolidBrush(_TextColour), New Point(5, 5))

                Dim P() As Point = {New Point(0, 0), New Point(CInt(Me.Width), 0), New Point(CInt(Me.Width), Me.Height), _
                                 New Point(Width, Me.Height), New Point(Width, Height), New Point(0, Height), New Point(0, 0)}
                .DrawLines(New Pen(_BorderColour), P)
                .InterpolationMode = CType(7, InterpolationMode)
            End With
        End Sub
#End Region

    End Class

    Public Class LogInComboBox
        Inherits ComboBox

#Region "Declarations"
        Private State As MouseState = MouseState.None
#End Region

#Region "Properties & Events"

        <Category("Colours")>
        Public Property LineColour As Color
        <Category("Colours")>
        Public Property SqaureColour As Color
        <Category("Colours")>
        Public Property ArrowColour As Color
        <Category("Colours")>
        Public Property SqaureHoverColour As Color
        <Category("Colours")>
        Public Property BorderColour As Color
        <Category("Colours")>
        Public Property BaseColour As Color
        <Category("Colours")>
        Public Property FontColour As Color

        Protected Overrides Sub OnMouseEnter(e As EventArgs)
            MyBase.OnMouseEnter(e)
            State = MouseState.Over : Invalidate()
        End Sub

        Protected Overrides Sub OnMouseLeave(e As EventArgs)
            MyBase.OnMouseLeave(e)
            State = MouseState.None : Invalidate()
        End Sub

        Protected Overrides Sub OnSelectedItemChanged(e As EventArgs)
            MyBase.OnSelectedItemChanged(e)
        End Sub

        Protected Overrides Sub OnTextChanged(e As EventArgs)
            MyBase.OnTextChanged(e)
            Invalidate()
        End Sub

        Protected Overrides Sub OnMouseDown(e As MouseEventArgs)
            Invalidate()
            OnMouseClick(e)
        End Sub

        Protected Overrides Sub OnMouseUp(e As MouseEventArgs)
            Invalidate()
            MyBase.OnMouseUp(e)
        End Sub

#End Region

#Region "Draw Control"

        Sub ReplaceItem(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles Me.DrawItem
            e.DrawBackground()
            e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit
            Dim Rect As New Rectangle(e.Bounds.X, e.Bounds.Y, e.Bounds.Width + 1, e.Bounds.Height + 1)
            With e.Graphics
                If (e.State And DrawItemState.Selected) = DrawItemState.Selected Then
                    .FillRectangle(New SolidBrush(_SqaureColour), Rect)
                    .DrawString(MyBase.GetItemText(MyBase.Items(e.Index)), Font, New SolidBrush(_FontColour), 1, e.Bounds.Top + 2)
                Else
                    .FillRectangle(New SolidBrush(_BaseColour), Rect)
                    .DrawString(MyBase.GetItemText(MyBase.Items(e.Index)), Font, New SolidBrush(_FontColour), 1, e.Bounds.Top + 2)
                End If
            End With
            e.DrawFocusRectangle()
            Invalidate()
        End Sub

        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                   ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer Or _
                   ControlStyles.SupportsTransparentBackColor, True)
            DoubleBuffered = True
            BackColor = Color.Transparent
            DrawMode = Windows.Forms.DrawMode.OwnerDrawFixed
            DropDownStyle = ComboBoxStyle.DropDownList
            Width = 163
            Height = 25
            Font = New Font("Segoe UI", 9)
            _BorderColour = Color.FromArgb(35, 35, 35)
            _BaseColour = Color.FromArgb(42, 42, 42)
            _FontColour = Color.FromArgb(255, 255, 255)
            _LineColour = Color.FromArgb(23, 119, 151)
            _SqaureColour = Color.FromArgb(47, 47, 47)
            _ArrowColour = Color.FromArgb(30, 30, 30)
            _SqaureHoverColour = Color.FromArgb(52, 52, 52)
        End Sub

        Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            Dim g = e.Graphics
            With g
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .SmoothingMode = SmoothingMode.HighQuality
                .PixelOffsetMode = PixelOffsetMode.HighQuality
                .Clear(BackColor)

                Dim Square As New Rectangle(Width - 25, 0, Width, Height)
                .FillRectangle(New SolidBrush(_BaseColour), New Rectangle(0, 0, Width - 25, Height))
                Select Case State
                    Case MouseState.None
                        .FillRectangle(New SolidBrush(_SqaureColour), Square)
                    Case MouseState.Over
                        .FillRectangle(New SolidBrush(_SqaureHoverColour), Square)
                End Select
                .DrawLine(New Pen(_LineColour, 2), New Point(Width - 26, 1), New Point(Width - 26, Height - 1))
                If Me.Parent.Enabled = False Then
                    _FontColour = Color.Gray
                Else
                    _FontColour = Color.FromArgb(255, 255, 255)
                End If
                If SelectedIndex <> -1 Then
                    .DrawString(Text, Font, New SolidBrush(_FontColour), New Rectangle(3, 0, Width - 20, Height), New StringFormat With {.LineAlignment = StringAlignment.Center, .Alignment = StringAlignment.Near})
                Else
                    If Not Items Is Nothing And Items.Count > 0 Then
                        SelectedIndex = 0
                        .DrawString(Items(0).ToString, Font, New SolidBrush(_FontColour), New Rectangle(3, 0, Width - 20, Height), New StringFormat With {.LineAlignment = StringAlignment.Center, .Alignment = StringAlignment.Near})
                    End If
                End If
                .DrawRectangle(New Pen(_BorderColour, 2), New Rectangle(0, 0, Width, Height))
                Dim P() As Point = {New Point(Width - 17, 11), New Point(Width - 13, 5), New Point(Width - 9, 11)}
                .FillPolygon(New SolidBrush(_BorderColour), P)
                .DrawPolygon(New Pen(_ArrowColour), P)
                Dim P1() As Point = {New Point(Width - 17, 15), New Point(Width - 13, 21), New Point(Width - 9, 15)}
                .FillPolygon(New SolidBrush(_BorderColour), P1)
                .DrawPolygon(New Pen(_ArrowColour), P1)
                .InterpolationMode = CType(7, InterpolationMode)
            End With

        End Sub

#End Region

    End Class

    Public Class LogInTabControl
        Inherits TabControl

#Region "Declarations"

        Private CenterSF As New StringFormat With {.Alignment = StringAlignment.Center, .LineAlignment = StringAlignment.Center}

#End Region

#Region "Properties"

        <Category("Colours")> _
        Public Property BorderColour As Color
        <Category("Colours")> _
        Public Property UpLineColour As Color
        <Category("Colours")> _
        Public Property HorizLineColour As Color
        <Category("Colours")> _
        Public Property TextColour As Color
        <Category("Colours")> _
        Public Property BackTabColour As Color
        <Category("Colours")> _
        Public Property BaseColour As Color
        <Category("Colours")> _
        Public Property ActiveColour As Color

        Protected Overrides Sub CreateHandle()
            MyBase.CreateHandle()
            Alignment = TabAlignment.Top
        End Sub

#End Region

#Region "Draw Control"

        Sub New()
            SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or _
                     ControlStyles.ResizeRedraw Or ControlStyles.OptimizedDoubleBuffer, True)
            DoubleBuffered = True
            Font = New Font("Segoe UI", 9)
            SizeMode = TabSizeMode.Normal
            ItemSize = New Size(240, 32)
            _TextColour = Color.FromArgb(255, 255, 255)
            _BackTabColour = Color.FromArgb(54, 54, 54)
            _BaseColour = Color.FromArgb(35, 35, 35)
            _ActiveColour = Color.FromArgb(47, 47, 47)
            _BorderColour = Color.FromArgb(30, 30, 30)
            _UpLineColour = Color.FromArgb(0, 160, 199)
            _HorizLineColour = Color.FromArgb(23, 119, 151)
        End Sub

        Protected Overrides Sub OnPaint(e As PaintEventArgs)
            Dim g = e.Graphics
            With g
                .SmoothingMode = SmoothingMode.HighQuality
                .PixelOffsetMode = PixelOffsetMode.HighQuality
                .TextRenderingHint = TextRenderingHint.ClearTypeGridFit
                .Clear(_BaseColour)
                Try : SelectedTab.BackColor = _BackTabColour : Catch : End Try
                Try : SelectedTab.BorderStyle = BorderStyle.FixedSingle : Catch : End Try
                .DrawRectangle(New Pen(_BorderColour, 2), New Rectangle(0, 0, Width, Height))
                For i = 0 To TabCount - 1
                    Dim Base As New Rectangle(New Point(GetTabRect(i).Location.X, GetTabRect(i).Location.Y), New Size(GetTabRect(i).Width, GetTabRect(i).Height))
                    Dim BaseSize As New Rectangle(Base.Location, New Size(Base.Width, Base.Height))
                    If i = SelectedIndex Then
                        _TextColour = If(Me.Enabled = False, Color.Gray, Color.White)
                        .FillRectangle(New SolidBrush(_BaseColour), BaseSize)
                        .FillRectangle(New SolidBrush(_ActiveColour), New Rectangle(Base.X + 1, Base.Y - 3, Base.Width, Base.Height + 5))
                        .DrawString(TabPages(i).Text, Font, New SolidBrush(_TextColour), New Rectangle(Base.X + 7, Base.Y, Base.Width - 3, Base.Height), CenterSF)
                        .DrawLine(New Pen(_HorizLineColour, 2), New Point(Base.X + 3, CInt(Base.Height / 2 + 2)), New Point(Base.X + 9, CInt(Base.Height / 2 + 2)))
                        .DrawLine(New Pen(_UpLineColour, 2), New Point(Base.X + 3, Base.Y - 3), New Point(Base.X + 3, Base.Height + 5))
                    Else
                        _TextColour = If(Me.Enabled = False, Color.Gray, Color.White)
                        .DrawString(TabPages(i).Text, Font, New SolidBrush(_TextColour), BaseSize, CenterSF)
                    End If
                Next
                Dim P() As Point = {New Point(0, 0), New Point(CInt(Me.Width), 0), New Point(CInt(Me.Width), Me.Height), _
                               New Point(Width, Me.Height), New Point(Width, Height), New Point(0, Height), New Point(0, 0)}
                .DrawLines(New Pen(_BorderColour), P)
                .InterpolationMode = InterpolationMode.HighQualityBicubic
            End With
        End Sub

#End Region

    End Class

    Public Class LogInListbox
        Inherits ListBox

#Region " Fields "
        Private _selecteditemcolor As Color = Color.Gray
#End Region

#Region " Properties "
        <Category("Colours")>
        Public Property LineColour As Color
        <Category("Colours")>
        Public Property SqaureColour As Color
        <Category("Colours")>
        Public Property ArrowColour As Color
        <Category("Colours")>
        Public Property SqaureHoverColour As Color
        <Category("Colours")>
        Public Property BorderColour As Color
        <Category("Colours")>
        Public Property BaseColour As Color
        <Category("Colours")>
        Public Property FontColour As Color
#End Region

        Sub New()
            SetStyle(ControlStyles.DoubleBuffer, True)
            Font = New Font("Segoe UI", 9)
            BorderStyle = Windows.Forms.BorderStyle.None
            DrawMode = Windows.Forms.DrawMode.OwnerDrawFixed
            ItemHeight = 20
            ForeColor = Color.White
            BackColor = Color.FromArgb(42, 42, 42)
            IntegralHeight = False
            _BorderColour = Color.DimGray
            _BaseColour = Color.FromArgb(42, 42, 42)
            _FontColour = Color.FromArgb(255, 255, 255)
            _LineColour = Color.FromArgb(23, 119, 151)
            _SqaureColour = Color.FromArgb(47, 47, 47)
            _ArrowColour = Color.FromArgb(30, 30, 30)
            _SqaureHoverColour = Color.FromArgb(52, 52, 52)
        End Sub

        Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)
            Select Case m.Msg
                Case 15
                    MyBase.WndProc(m)
                    CustomPaint()
                    Exit Select
                Case Else
                    MyBase.WndProc(m)
                    Exit Select
            End Select
        End Sub

        Private Sub CustomPaint()
            CreateGraphics.DrawRectangle(New Pen(_BorderColour), New Rectangle(0, 0, Width - 1, Height - 1))
            Dim P() As Point = {New Point(0, 0), New Point(CInt(Me.Width), 0), New Point(CInt(Me.Width), Me.Height), _
                               New Point(Width, Me.Height), New Point(Width, Height), New Point(0, Height), New Point(0, 0)}
            CreateGraphics.DrawLines(New Pen(_BorderColour), P)
        End Sub

        Protected Overrides Sub OnDrawItem(ByVal e As System.Windows.Forms.DrawItemEventArgs)
            Try
                If e.Index < 0 Then Exit Sub
                e.DrawBackground()
                Dim rect As New Rectangle(New Point(e.Bounds.Left, e.Bounds.Top + 2), New Size(Bounds.Width, 16))
                Dim bsh As Brush = Brushes.White
                _selecteditemcolor = _SqaureColour
                If Enabled = False Then
                    bsh = Brushes.Gray
                    _selecteditemcolor = Color.FromArgb(200, _SqaureColour)
                End If
                If InStr(e.State.ToString, "Selected,") > 0 Then
                    e.Graphics.FillRectangle(Brushes.Black, e.Bounds)
                    Dim x2 As Rectangle = New Rectangle(e.Bounds.Location, New Size(e.Bounds.Width - 1, e.Bounds.Height))
                    Dim G1 As New LinearGradientBrush(New Point(x2.X, x2.Y), New Point(x2.X, x2.Y + x2.Height), _selecteditemcolor, Color.FromArgb(50, 50, 50))
                    e.Graphics.FillRectangle(G1, x2) : G1.Dispose()
                    e.Graphics.DrawString(" " & Items(e.Index).ToString(), Font, bsh, e.Bounds.X, e.Bounds.Y + 1)
                Else
                    e.Graphics.DrawString(" " & Items(e.Index).ToString(), Font, bsh, e.Bounds.X, e.Bounds.Y + 1)
                End If

                CustomPaint()

                MyBase.OnDrawItem(e)

            Catch ex As Exception : End Try
        End Sub

    End Class

    Public Class TreeViewEx
        Inherits TreeView

        <DllImport("uxtheme.dll", CharSet:=CharSet.Unicode)> _
        Private Shared Function SetWindowTheme(hWnd As IntPtr, pszSubAppName As String, pszSubIdList As String) As Integer
        End Function

        Protected Overrides Sub CreateHandle()
            MyBase.CreateHandle()
            SetWindowTheme(Me.Handle, "explorer", Nothing)
        End Sub
    End Class

    'PROGRESSBARWITHPERCENTAGE CONTROL SOURCE FROM : http://www.codeproject.com/Articles/33971/ProgressBar-with-Percentage

    <DesignTimeVisible(True), DefaultProperty("Value"), DefaultEvent("ValueChanged"), _
    Description("Component that extends the native .net progressbar with percentage properties and the ability to overlay the percentage")> _
    Public Class TextProgressBar
        Inherits System.Windows.Forms.ProgressBar

#Region "Events"
        ''' <summary>Occurs when the value of the progress bar is changed</summary>
        <Category("Property Changed")> _
        Public Event ValueChanged As EventHandler
        ''' <summary>Occurs when the amount of decimals to be displayed in the percentage is changed</summary>
        <Category("Property Changed")> _
        Public Event PercentageDecimalsChanged As EventHandler
        ''' <summary>Occurs when the visibility of the percentage text is changed</summary>
        <Category("Property Changed")> _
        Public Event PercentageVisibleChanged As EventHandler
        ''' <summary>Occurs when the automatic updating of the percentage is turned on or off</summary>
        <Category("Property Changed")> _
        Public Event AutoUpdatePercentageChanged As EventHandler
        ''' <summary>Occurs when the OverLayColor property is changed</summary>
        <Category("Property Changed")> _
        Public Event OverLayColorChanged As EventHandler
        ''' <summary>Occurs when the align of the percentage text is changed</summary>
        <Category("Property Changed")> _
        Public Event PercentageAlignChanged As EventHandler
        ''' <summary>Occurs when the padding of the percentage text is changed</summary>
        <Category("Property Changed")> _
        Public Shadows Event PaddingChanged As EventHandler
#End Region

#Region "Fields"
        Private Const WM_PAINT As Int32 = &HF 'hex for 15

        Private m_auto_update, m_p_visible As Boolean
        Private m_decimals As Int32
        Private m_p_align As ContentAlignment
        Private m_graphics As Graphics
        Private m_overLayFont As Color
        Private m_drawingRectangle As RectangleF
        Private m_strFormat As New StringFormat

        Private m_TextToShow As String
        Private m_ShowaText As Boolean
#End Region

#Region "Public methods"
        ''' <summary>Create a new instance of a ProgressbarWithPercentage</summary>
        Public Sub New()
            ' Initialize the base class
            MyBase.New()

            ' Set the default values of the properties
            Me.AutoUpdatePercentage = True
            Me.PercentageVisible = True
            Me.PercentageDecimals = 0
            Me.PercentageAlign = ContentAlignment.MiddleCenter
            Me.OverLayColor = Color.Black
            Me.ForeColor = Color.DimGray

            ' Calculate the initial gfx related values
            setGfx()
            setStringFormat()
            setDrawingRectangle()
        End Sub

        ''' <summary>Advances the current possition of the progressbar by the amount of the Step property</summary>
        Public Shadows Sub PerformStep()
            MyBase.PerformStep()
            If Me.PercentageVisible And Me.AutoUpdatePercentage Then Me.ShowPercentage()
        End Sub

        ''' <summary>Show the current percentage as text</summary>
        Public Sub ShowPercentage()
            If m_ShowaText Then
                Me.ShowText(m_TextToShow)
            Else
                Me.ShowText(Math.Round(Me.Percentage, Me.PercentageDecimals).ToString & "%")
            End If
        End Sub

        ''' <summary>Display a string on the progressbar</summary>
        ''' <param name="text">Required. String. The string to display</param>
        Public Sub ShowText(ByVal text As String)
            ' Determine the areas for the ForeColor and OverlayColor
            Dim r1 As RectangleF = Me.ClientRectangle
            r1.Width = CSng(r1.Width * Me.Value / Me.Maximum)
            Dim reg1 As New Region(r1)
            Dim reg2 As New Region(Me.ClientRectangle)
            reg2.Exclude(reg1)

            ' Draw the string
            Me.Graphics.Clip = reg1
            Me.Graphics.DrawString(text, Me.Font, New SolidBrush(Me.OverLayColor), Me.DrawingRectangle, m_strFormat)
            Me.Graphics.Clip = reg2
            Me.Graphics.DrawString(text, Me.Font, New SolidBrush(Me.ForeColor), Me.DrawingRectangle, m_strFormat)

            reg1.Dispose()
            reg2.Dispose()
        End Sub
#End Region

#Region "Protected methods"
        Protected Overrides Sub OnHandleCreated(ByVal e As System.EventArgs)
            MyBase.OnHandleCreated(e)
            Me.Graphics = Graphics.FromHwnd(Me.Handle)
        End Sub

        Protected Overrides Sub OnHandleDestroyed(ByVal e As System.EventArgs)
            Me.Graphics.Dispose()
            MyBase.OnHandleDestroyed(e)
        End Sub

        Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)
            MyBase.WndProc(m)
            If m.Msg = WM_PAINT And Me.PercentageVisible And Me.AutoUpdatePercentage Then ShowPercentage()
        End Sub

        Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            Me.AutoUpdatePercentage = False
            If disposing Then
                Me.Graphics.Dispose()
                m_strFormat.Dispose()
            End If
            MyBase.Dispose(disposing)
        End Sub
#End Region

#Region "Private methods"
        Private Sub ProgressbarWithPercentage_SizeChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.SizeChanged
            setDrawingRectangle()
            setGfx()
        End Sub

        Private Sub ProgressbarWithPercentage_PaddingChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Me.PaddingChanged
            setDrawingRectangle()
        End Sub

        Private Sub setGfx()
            ' Set the graphics object
            Me.Graphics = Me.CreateGraphics
        End Sub

        Private Sub setDrawingRectangle()
            ' Determine the coordinates and size of the drawing rectangle depending on the progress bar size and padding
            Me.DrawingRectangle = New RectangleF(Me.Padding.Left, _
                                       Me.Padding.Top, _
                                       Me.Width - Me.Padding.Left - Me.Padding.Right, _
                                       Me.Height - Me.Padding.Top - Me.Padding.Bottom)
        End Sub

        Private Sub setStringFormat()
            ' Determine the horizontal alignment
            Select Case Me.PercentageAlign
                Case ContentAlignment.BottomCenter, ContentAlignment.BottomLeft, ContentAlignment.BottomRight
                    m_strFormat.LineAlignment = StringAlignment.Far
                Case ContentAlignment.MiddleCenter, ContentAlignment.MiddleLeft, ContentAlignment.MiddleRight
                    m_strFormat.LineAlignment = StringAlignment.Center
                Case ContentAlignment.TopCenter, ContentAlignment.TopLeft, ContentAlignment.TopRight
                    m_strFormat.LineAlignment = StringAlignment.Near
            End Select

            ' Determine the vertical alignment
            Select Case Me.PercentageAlign
                Case ContentAlignment.BottomLeft, ContentAlignment.MiddleLeft, ContentAlignment.TopLeft
                    m_strFormat.Alignment = StringAlignment.Near
                Case ContentAlignment.BottomCenter, ContentAlignment.MiddleCenter, ContentAlignment.TopCenter
                    m_strFormat.Alignment = StringAlignment.Center
                Case ContentAlignment.BottomRight, ContentAlignment.MiddleRight, ContentAlignment.TopRight
                    m_strFormat.Alignment = StringAlignment.Far
            End Select
        End Sub
#End Region

#Region "Properties"

#Region "Appearance"
        <Browsable(True), Category("Appearance"), Description("The Text of the progressbar")> _
        Public Property TextToShow() As String
            Get
                Return m_TextToShow
            End Get
            Set(ByVal value As String)
                m_TextToShow = value
                If Me.PercentageVisible And Me.AutoUpdatePercentage Then Me.ShowPercentage()
            End Set
        End Property

        <Browsable(True), Category("Appearance"), Description("Show a Text to the progressbar")> _
        Public Property ShowAText() As Boolean
            Get
                Return m_ShowaText
            End Get
            Set(ByVal value As Boolean)
                m_ShowaText = value
            End Set
        End Property

        <Browsable(True), Category("Appearance"), Description("The value of the progressbar")> _
        Public Shadows Property Value() As Int32
            Get
                Return MyBase.Value
            End Get
            Set(ByVal value As Int32)
                If value <> Me.Value Then
                    MyBase.Value = value
                    If Me.PercentageVisible And Me.AutoUpdatePercentage Then Me.ShowPercentage()
                    RaiseEvent ValueChanged(Me, New EventArgs)
                End If
            End Set
        End Property

        <Browsable(True), Category("Appearance"), Description("The percentage of the progressbar")> _
        Public Property Percentage() As Double
            Get
                Return Me.Value / Me.Maximum * 100
            End Get
            Set(ByVal value As Double)
                If value >= 0 And value <= 100 Then
                    Me.Value = CInt(Me.Maximum * value / 100)
                    If Me.PercentageVisible And Me.AutoUpdatePercentage Then Me.ShowPercentage()
                End If
            End Set
        End Property

        <Browsable(True), Category("Appearance"), DefaultValue(0), Description("Gets or sets the amount of decimals that will be displayed in the percentage")> _
        Public Overridable Property PercentageDecimals() As Int32
            Get
                Return m_decimals
            End Get
            Set(ByVal value As Int32)
                If value > -1 And value <> Me.PercentageDecimals Then
                    m_decimals = value
                    RaiseEvent PercentageDecimalsChanged(Me, New EventArgs)
                End If
            End Set
        End Property

        <Browsable(True), Category("Appearance"), Description("Gets or sets the font of the percentage text")> _
        Public Overridable Overloads Property Font() As Font
            Get
                Return MyBase.Font
            End Get
            Set(ByVal value As Font)
                MyBase.Font = value
            End Set
        End Property

        <Browsable(True), Category("Appearance"), DefaultValue("MiddleCenter"), Description("Gets or sets if the percentage alignment")> _
        Public Overridable Property PercentageAlign() As ContentAlignment
            Get
                Return m_p_align
            End Get
            Set(ByVal value As ContentAlignment)
                If value <> Me.PercentageAlign Then
                    m_p_align = value
                    setStringFormat()
                    RaiseEvent PercentageAlignChanged(Me, New EventArgs)
                End If
            End Set
        End Property

        <Browsable(True), Category("Appearance"), Description("Gets or sets the color of the percentage text at the place of the progressbar that is indicated")> _
        Public Overridable Property OverLayColor() As Color
            Get
                Return m_overLayFont
            End Get
            Set(ByVal value As Color)
                If Me.m_overLayFont <> value Then
                    m_overLayFont = value
                    RaiseEvent OverLayColorChanged(Me, New EventArgs)
                End If
            End Set
        End Property

        <Browsable(True), Category("Appearance"), DefaultValue(True), Description("Gets or sets if the percentage should be visible")> _
        Public Overridable Property PercentageVisible() As Boolean
            Get
                Return m_p_visible
            End Get
            Set(ByVal value As Boolean)
                If value <> Me.PercentageVisible Then
                    If Not value Then Me.Graphics.Clear(Color.Transparent)
                    m_p_visible = value
                    RaiseEvent PercentageVisibleChanged(Me, New EventArgs)
                End If
            End Set
        End Property
#End Region

#Region "Behavior"
        <Browsable(True), Category("Behavior"), DefaultValue(True), Description("Gets or sets if the percentage should be auto updated")> _
        Public Overridable Property AutoUpdatePercentage() As Boolean
            Get
                Return m_auto_update
            End Get
            Set(ByVal value As Boolean)
                If value <> Me.AutoUpdatePercentage Then
                    m_auto_update = value
                    RaiseEvent AutoUpdatePercentageChanged(Me, New EventArgs)
                End If
            End Set
        End Property
#End Region

#Region "Layout"
        <Browsable(True), Category("Layout"), Description("Gets or sets if the interior spacing of the control")> _
        Public Overridable Overloads Property Padding() As Padding
            Get
                Return MyBase.Padding
            End Get
            Set(ByVal value As Padding)
                MyBase.Padding = value
            End Set
        End Property
#End Region

#Region "Misc"
        Protected Overridable Property Graphics() As Graphics
            Get
                Return m_graphics
            End Get
            Set(ByVal value As Graphics)
                If Me.Graphics IsNot Nothing Then Me.Graphics.Dispose()
                m_graphics = value
            End Set
        End Property

        Private Property DrawingRectangle() As RectangleF
            Get
                Return m_drawingRectangle
            End Get
            Set(ByVal value As RectangleF)
                m_drawingRectangle = value
            End Set
        End Property
#End Region

#End Region

#Region "Designer"
        Private Sub InitializeComponent()
            Me.SuspendLayout()
            Me.ResumeLayout(False)
        End Sub
#End Region

    End Class

End Namespace


================================================
File: LoginTheme/LoginTheme.vbproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{96903FFF-8F56-478F-BF84-CDA513476D2A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>LoginTheme</RootNamespace>
    <AssemblyName>LoginTheme</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>LoginTheme.xml</DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>LoginTheme.xml</DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <OptionExplicit>On</OptionExplicit>
  </PropertyGroup>
  <PropertyGroup>
    <OptionCompare>Binary</OptionCompare>
  </PropertyGroup>
  <PropertyGroup>
    <OptionStrict>Off</OptionStrict>
  </PropertyGroup>
  <PropertyGroup>
    <OptionInfer>On</OptionInfer>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="LoginTheme.vb">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: LoginTheme/My Project/Application.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On




================================================
File: LoginTheme/My Project/Application.myapp
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MySubMain>false</MySubMain>
  <SingleInstance>false</SingleInstance>
  <ShutdownMode>0</ShutdownMode>
  <EnableVisualStyles>true</EnableVisualStyles>
  <AuthenticationMode>0</AuthenticationMode>
  <ApplicationType>1</ApplicationType>
  <SaveMySettingsOnExit>true</SaveMySettingsOnExit>
</MyApplicationData>



================================================
File: LoginTheme/My Project/AssemblyInfo.vb
================================================
ï»¿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
' l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
' associÃ©es Ã  un assembly.

' Passez en revue les valeurs des attributs de l'assembly

<Assembly: AssemblyTitle("LoginTheme")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("")> 
<Assembly: AssemblyProduct("LoginTheme")> 
<Assembly: AssemblyCopyright("Copyright Â© 2015")> 
<Assembly: AssemblyTrademark("")> 

<Assembly: ComVisible(False)>

'Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
<Assembly: Guid("64afa10a-0631-4ff8-9cec-cc495e86ed84")> 

' Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
'
'      Version principale
'      Version secondaire 
'      NumÃ©ro de build
'      RÃ©vision
'
' Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
' en utilisant '*', comme indiquÃ© ci-dessousÂ :
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("1.1.0.0")> 
<Assembly: AssemblyFileVersion("1.1.0.0")> 



================================================
File: LoginTheme/My Project/Resources.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My.Resources
    
    'This class was auto-generated by the StronglyTypedResourceBuilder
    'class via a tool like ResGen or Visual Studio.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    '''<summary>
    '''  A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"), _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(), _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()> _
    Friend Module Resources

        Private resourceMan As Global.System.Resources.ResourceManager

        Private resourceCulture As Global.System.Globalization.CultureInfo

        '''<summary>
        '''  Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("LoginTheme.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property

        '''<summary>
        '''  Overrides the current thread's CurrentUICulture property for all
        '''  resource lookups using this strongly typed resource class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set(ByVal value As Global.System.Globalization.CultureInfo)
                resourceCulture = value
            End Set
        End Property
    End Module
End Namespace



================================================
File: LoginTheme/My Project/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: LoginTheme/My Project/Settings.Designer.vb
================================================
ï»¿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My

    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"), _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase

        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings), MySettings)

#Region "My.Settings Auto-Save Functionality"
#If _MyType = "WindowsForms" Then
        Private Shared addedHandler As Boolean

        Private Shared addedHandlerLockObject As New Object

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
        Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
            If My.Application.SaveMySettingsOnExit Then
                My.Settings.Save()
            End If
        End Sub
#End If
#End Region

        Public Shared ReadOnly Property [Default]() As MySettings
            Get

#If _MyType = "WindowsForms" Then
                   If Not addedHandler Then
                        SyncLock addedHandlerLockObject
                            If Not addedHandler Then
                                AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                                addedHandler = True
                            End If
                        End SyncLock
                    End If
#End If
                Return defaultInstance
            End Get
        End Property
    End Class
End Namespace

Namespace My
    
    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
    Friend Module MySettingsProperty
        
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
        Friend ReadOnly Property Settings() As Global.LoginTheme.My.MySettings
            Get
                Return Global.LoginTheme.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace



================================================
File: LoginTheme/My Project/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>



================================================
File: ResourceLib/Accelerator.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Standard accelerator.
    /// </summary>
    public class Accelerator
    {
        private User32.ACCEL _accel = new User32.ACCEL();

        /// <summary>
        /// Read the accelerator.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        internal IntPtr Read(IntPtr lpRes)
        {
            _accel = (User32.ACCEL) Marshal.PtrToStructure(
                lpRes, typeof(User32.ACCEL));

            return new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_accel));
        }

        /// <summary>
        /// Write accelerator to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal void Write(BinaryWriter w)
        {
            w.Write(_accel.fVirt);
            w.Write(_accel.key);
            w.Write(_accel.cmd);
            ResourceUtil.PadToWORD(w);
        }

        /// <summary>
        /// String representation of the accelerator key.
        /// </summary>
        public string Key
        {
            get
            {
                string key = Enum.GetName(typeof(User32.VirtualKeys), _accel.key);
                return string.IsNullOrEmpty(key) ? ((char) _accel.key).ToString() : key;
            }
        }

        /// <summary>
        /// An unsigned integer value that identifies the accelerator.
        /// </summary>
        public UInt32 Command
        {
            get
            {
                return _accel.cmd;
            }
            set
            {
                _accel.cmd = value;
            }
        }

        /// <summary>
        /// String representation of the accelerator.
        /// </summary>
        /// <returns>String representation of the accelerator.</returns>
        public override string ToString()
        {
            return string.Format("{0}, {1}, {2}",
                Key, Command, ResourceUtil.FlagsToString<User32.AcceleratorVirtualKey>(
                    _accel.fVirt).Replace(" |", ","));
        }
    }
}



================================================
File: ResourceLib/AcceleratorResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// An accelerator, RT_ACCELERATOR resource.
    /// An accelerator provides the user with access to an application's command set.
    /// </summary>
    public class AcceleratorResource : Resource
    {
        private List<Accelerator> _accelerators = new List<Accelerator>();

        /// <summary>
        /// Accelerator keys.
        /// </summary>
        public List<Accelerator> Accelerators
        {
            get
            {
                return _accelerators;
            }
            set
            {
                _accelerators = value;
            }
        }

        /// <summary>
        /// A new accelerator resource.
        /// </summary>
        public AcceleratorResource()
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_ACCELERATOR),
                null,
                ResourceUtil.NEUTRALLANGID,
                0)
        {

        }


        /// <summary>
        /// An existing accelerator resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public AcceleratorResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// Read the accelerators table.
        /// </summary>
        /// <param name="hModule">Handle to a module.</param>
        /// <param name="lpRes">Pointer to the beginning of the accelerator table.</param>
        /// <returns>Address of the end of the accelerator table.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            long count = _size / Marshal.SizeOf(typeof(User32.ACCEL));
            for (long i = 0; i < count; i++)
            {
                Accelerator accelerator = new Accelerator();
                lpRes = accelerator.Read(lpRes);
                _accelerators.Add(accelerator);
            }
            return lpRes;
        }

        internal override void Write(System.IO.BinaryWriter w)
        {
            foreach (Accelerator accelerator in _accelerators)
            {
                accelerator.Write(w);
            }            
        }

        /// <summary>
        /// String representation of the accelerators resource.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0} ACCELERATORS", Name));
            sb.AppendLine("BEGIN");
            foreach(Accelerator accelerator in _accelerators)
            {
                sb.AppendLine(string.Format(" {0}", accelerator));
            }
            sb.AppendLine("END");
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/BitmapFile.cs
================================================
ï»¿using System;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A bitmap file in a .bmp format.
    /// </summary>
    public class BitmapFile
    {
        private Gdi32.BITMAPFILEHEADER _header = new Gdi32.BITMAPFILEHEADER();
        private DeviceIndependentBitmap _bitmap = null;

        /// <summary>
        /// Device independent bitmap.
        /// </summary>
        public DeviceIndependentBitmap Bitmap
        {
            get
            {
                return _bitmap;
            }
        }

        /// <summary>
        /// An existing bitmap file.
        /// </summary>
        /// <param name="filename">A file in a .bmp format.</param>
        public BitmapFile(string filename)
        {
            byte[] data = File.ReadAllBytes(filename);
            
            IntPtr pFileHeaderData = Marshal.AllocHGlobal(Marshal.SizeOf(_header));
            try
            {
                Marshal.Copy(data, 0, pFileHeaderData, Marshal.SizeOf(_header));
                _header = (Gdi32.BITMAPFILEHEADER)Marshal.PtrToStructure(
                    pFileHeaderData, typeof(Gdi32.BITMAPFILEHEADER));
            }
            finally
            {
                Marshal.FreeHGlobal(pFileHeaderData);
            }

            Int32 size = data.Length - Marshal.SizeOf(_header);
            byte[] bitmapData = new byte[size];
            Buffer.BlockCopy(data, Marshal.SizeOf(_header), bitmapData, 0, size);
            _bitmap = new DeviceIndependentBitmap(bitmapData);
        }
    }
}



================================================
File: ResourceLib/BitmapResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// An embedded bitmap resource.
    /// </summary>
    public class BitmapResource : Resource
    {
        private DeviceIndependentBitmap _bitmap = null;

        /// <summary>
        /// An existing bitmap resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public BitmapResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new bitmap resource.
        /// </summary>
        public BitmapResource()
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_BITMAP),
                new ResourceId(1),
                Kernel32.LANG_NEUTRAL,
                0)
        {

        }

        /// <summary>
        /// Read the resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of a resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            byte[] data = new byte[_size];
            Marshal.Copy(lpRes, data, 0, data.Length);
            _bitmap = new DeviceIndependentBitmap(data);
            return new IntPtr(lpRes.ToInt64() + _size);
        }

        /// <summary>
        /// Write the bitmap resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_bitmap.Data);
        }

        /// <summary>
        /// A device independent bitmap.
        /// </summary>
        public DeviceIndependentBitmap Bitmap
        {
            get
            {
                return _bitmap;
            }
            set
            {
                _bitmap = value;
            }
        }
    }
}



================================================
File: ResourceLib/CursorDirectoryResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a hardware-independent cursor resource.
    /// </summary>
    public class CursorDirectoryResource : DirectoryResource<CursorResource>
    {
        /// <summary>
        /// A hardware-independent cursor resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal CursorDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new hardware-independent cursor resource.
        /// </summary>
        public CursorDirectoryResource()
            : base(Kernel32.ResourceTypes.RT_GROUP_CURSOR)
        {

        }

        /// <summary>
        /// A new collection of cursors that can be embedded into an executable file.
        /// </summary>
        public CursorDirectoryResource(IconFile iconFile)
            : base(Kernel32.ResourceTypes.RT_GROUP_CURSOR)
        {            
            for (UInt16 id = 0; id < iconFile.Icons.Count; id++)
            {
                CursorResource cursorResource = new CursorResource(
                    iconFile.Icons[id], new ResourceId(id), _language);
                // cursor structure abuses planes and bits per pixel for cursor data
                cursorResource.HotspotX = iconFile.Icons[id].Header.wPlanes;
                cursorResource.HotspotY = iconFile.Icons[id].Header.wBitsPerPixel;
                Icons.Add(cursorResource);
            }
        }
    }
}



================================================
File: ResourceLib/CursorResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a cursor resource.
    /// </summary>
    public class CursorResource : IconImageResource
    {
        private UInt16 _hotspotx = 0;
        private UInt16 _hotspoty = 0;

        /// <summary>
        /// An existing cursor resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal CursorResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new cursor resource.
        /// </summary>
        public CursorResource()
            : base(new ResourceId(Kernel32.ResourceTypes.RT_CURSOR))
        {

        }
       
        /// <summary>
        /// Convert into an icon resource that can be written into an executable.
        /// </summary>
        /// <param name="icon">Icon image.</param>
        /// <param name="id">Icon Id.</param>
        /// <param name="language">Language.</param>
        /// <returns>An icon resource.</returns>
        public CursorResource(IconFileIcon icon, ResourceId id, UInt16 language)
            : base(icon, new ResourceId(Kernel32.ResourceTypes.RT_CURSOR), id, language)
        {

        }

        /// <summary>
        /// Horizontal hotspot coordinate.
        /// The hot spot of a cursor is the point to which Windows refers in tracking the cursor's position. 
        /// </summary>
        public UInt16 HotspotX
        {
            get
            {
                return _hotspotx;
            }
            set
            {
                _hotspotx = value;
            }
        }

        /// <summary>
        /// Vertical hot spot coordinate.
        /// The hot spot of a cursor is the point to which Windows refers in tracking the cursor's position. 
        /// </summary>
        public UInt16 HotspotY
        {
            get
            {
                return _hotspoty;
            }
            set
            {
                _hotspoty = value;
            }
        }

        /// <summary>
        /// Write the cursor data to a file.
        /// </summary>
        /// <param name="filename">Target executable file.</param>
        public override void SaveIconTo(string filename)
        {
            byte[] dataWithHotspot = new byte[Image.Data.Length + 4];
            Buffer.BlockCopy(Image.Data, 0, dataWithHotspot, 4, Image.Data.Length);
            dataWithHotspot[0] = (byte)(HotspotX & 0xFF);
            dataWithHotspot[1] = (byte)(HotspotX >> 8);
            dataWithHotspot[2] = (byte)(HotspotY & 0xFF);
            dataWithHotspot[3] = (byte)(HotspotY >> 8);

            SaveTo(filename,
                _type,
                new ResourceId(_header.nID),
                _language,
                dataWithHotspot);
        }

        /// <summary>
        /// Read DIB image.
        /// </summary>
        /// <param name="dibBits">DIB bits.</param>
        /// <param name="size">DIB size.</param>
        internal override void ReadImage(IntPtr dibBits, UInt32 size)
        {
            _hotspotx = (UInt16) Marshal.ReadInt16(dibBits);
            dibBits = new IntPtr(dibBits.ToInt64() + sizeof(UInt16));
            _hotspoty = (UInt16) Marshal.ReadInt16(dibBits);
            dibBits = new IntPtr(dibBits.ToInt64() + sizeof(UInt16));

            base.ReadImage(dibBits, size - 2 * sizeof(UInt16));
        }
    }
}



================================================
File: ResourceLib/DeviceIndependentBitmap.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Drawing;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A device-independent image consists of a BITMAPINFOHEADER where
    /// bmWidth is the width of the image andbmHeight is double the height 
    /// of the image, followed by the bitmap color table, followed by the image
    /// pixels, followed by the mask pixels.
    /// </summary>
    public class DeviceIndependentBitmap
    {
        private Gdi32.BITMAPINFOHEADER _header = new Gdi32.BITMAPINFOHEADER();
        private byte[] _data = null;
        private Bitmap _mask = null;
        private Bitmap _color = null;
        private Bitmap _image = null;

        /// <summary>
        /// Raw image data.
        /// </summary>
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;

                IntPtr pData = Marshal.AllocHGlobal(Marshal.SizeOf(_header));
                try
                {
                    Marshal.Copy(_data, 0, pData, Marshal.SizeOf(_header));
                    _header = (Gdi32.BITMAPINFOHEADER)Marshal.PtrToStructure(
                        pData, typeof(Gdi32.BITMAPINFOHEADER));
                }
                finally
                {
                    Marshal.FreeHGlobal(pData);
                }
            }
        }

        /// <summary>
        /// Bitmap info header.
        /// </summary>
        public Gdi32.BITMAPINFOHEADER Header
        {
            get
            {
                return _header;
            }
        }

        /// <summary>
        /// Bitmap size in bytes.
        /// </summary>
        public int Size
        {
            get
            {
                return _data.Length;
            }
        }

        /// <summary>
        /// A new icon image.
        /// </summary>
        public DeviceIndependentBitmap()
        {

        }

        /// <summary>
        /// A device-independent bitmap.
        /// </summary>
        /// <param name="data">Bitmap data.</param>
        public DeviceIndependentBitmap(byte[] data)
        {
            Data = data;
        }

        /// <summary>
        /// Create a copy of an image.
        /// </summary>
        /// <param name="image">Source image.</param>
        public DeviceIndependentBitmap(DeviceIndependentBitmap image)
        {
            _data = new byte[image._data.Length];
            Buffer.BlockCopy(image._data, 0, _data, 0, image._data.Length);
            _header = image._header;
        }

        /// <summary>
        /// Read icon data.
        /// </summary>
        /// <param name="lpData">Pointer to the beginning of icon data.</param>
        /// <param name="size">Icon data size.</param>
        internal void Read(IntPtr lpData, uint size)
        {
            _header = (Gdi32.BITMAPINFOHEADER)Marshal.PtrToStructure(
                lpData, typeof(Gdi32.BITMAPINFOHEADER));

            _data = new byte[size];
            Marshal.Copy(lpData, _data, 0, _data.Length);
        }

        /// <summary>
        /// Size of the image mask.
        /// </summary>
        private Int32 MaskImageSize
        {
            get
            {
                return (Int32)(_header.biHeight / 2 * GetDIBRowWidth(_header.biWidth));
            }
        }

        private Int32 XorImageSize
        {
            get
            {
                return (Int32)(_header.biHeight / 2 *
                    GetDIBRowWidth(_header.biWidth * _header.biBitCount * _header.biPlanes));
            }
        }

        /// <summary>
        /// Position of the DIB bitmap bits within a DIB bitmap array.
        /// </summary>
        private Int32 XorImageIndex
        {
            get
            {
                return (Int32)(Marshal.SizeOf(_header) +
                    ColorCount * Marshal.SizeOf(new Gdi32.RGBQUAD()));
            }
        }

        /// <summary>
        /// Number of colors in the palette.
        /// </summary>
        private UInt32 ColorCount
        {
            get
            {
                if (_header.biClrUsed != 0)
                    return _header.biClrUsed;

                if (_header.biBitCount <= 8)
                    return (UInt32)(1 << _header.biBitCount);

                return 0;
            }
        }

        private Int32 MaskImageIndex
        {
            get
            {
                return XorImageIndex + XorImageSize;
            }
        }

        /// <summary>
        /// Returns the width of a row in a DIB Bitmap given the number of bits. DIB Bitmap rows always align on a DWORD boundary.
        /// </summary>
        /// <param name="width">Number of bits.</param>
        /// <returns>Width of a row in bytes.</returns>
        private Int32 GetDIBRowWidth(int width)
        {
            return (Int32)((width + 31) / 32) * 4;
        }

        /// <summary>
        /// Bitmap monochrome mask.
        /// </summary>
        public Bitmap Mask
        {
            get
            {
                if (_mask == null)
                {
                    IntPtr hdc = IntPtr.Zero;
                    IntPtr hBmp = IntPtr.Zero;
                    IntPtr hBmpOld = IntPtr.Zero;
                    IntPtr bitsInfo = IntPtr.Zero;
                    IntPtr bits = IntPtr.Zero;

                    try
                    {
                        // extract monochrome mask
                        hdc = Gdi32.CreateCompatibleDC(IntPtr.Zero);
                        if (hdc == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        hBmp = Gdi32.CreateCompatibleBitmap(hdc, _header.biWidth, _header.biHeight / 2);
                        if (hBmp == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        hBmpOld = Gdi32.SelectObject(hdc, hBmp);

                        // prepare BitmapInfoHeader for mono bitmap:
                        int monoBmHdrSize = (int)_header.biSize + Marshal.SizeOf(new Gdi32.RGBQUAD()) * 2;

                        bitsInfo = Marshal.AllocCoTaskMem(monoBmHdrSize);
                        Marshal.WriteInt32(bitsInfo, Marshal.SizeOf(_header));
                        Marshal.WriteInt32(bitsInfo, 4, _header.biWidth);
                        Marshal.WriteInt32(bitsInfo, 8, _header.biHeight / 2);
                        Marshal.WriteInt16(bitsInfo, 12, 1);
                        Marshal.WriteInt16(bitsInfo, 14, 1);
                        Marshal.WriteInt32(bitsInfo, 16, (Int32)Gdi32.BitmapCompression.BI_RGB);
                        Marshal.WriteInt32(bitsInfo, 20, 0);
                        Marshal.WriteInt32(bitsInfo, 24, 0);
                        Marshal.WriteInt32(bitsInfo, 28, 0);
                        Marshal.WriteInt32(bitsInfo, 32, 0);
                        Marshal.WriteInt32(bitsInfo, 36, 0);
                        // black and white color indices
                        Marshal.WriteInt32(bitsInfo, 40, 0);
                        Marshal.WriteByte(bitsInfo, 44, 255);
                        Marshal.WriteByte(bitsInfo, 45, 255);
                        Marshal.WriteByte(bitsInfo, 46, 255);
                        Marshal.WriteByte(bitsInfo, 47, 0);
                        // prepare mask bits
                        bits = Marshal.AllocCoTaskMem(MaskImageSize);
                        Marshal.Copy(_data, MaskImageIndex, bits, MaskImageSize);

                        if (0 == Gdi32.SetDIBitsToDevice(hdc, 0, 0, (UInt32)_header.biWidth, (UInt32)_header.biHeight / 2,
                            0, 0, 0, (UInt32)_header.biHeight / 2, bits, bitsInfo, (UInt32)Gdi32.DIBColors.DIB_RGB_COLORS))
                        {
                            throw new Win32Exception(Marshal.GetLastWin32Error());
                        }

                        _mask = Bitmap.FromHbitmap(hBmp);
                    }
                    finally
                    {
                        if (bits != IntPtr.Zero) Marshal.FreeCoTaskMem(bits);
                        if (bitsInfo != IntPtr.Zero) Marshal.FreeCoTaskMem(bitsInfo);
                        if (hdc != IntPtr.Zero) Gdi32.SelectObject(hdc, hBmpOld);
                        if (hdc != IntPtr.Zero) Gdi32.DeleteObject(hdc);
                    }
                }

                return _mask;
            }
        }

        /// <summary>
        /// Bitmap color (XOR) part of the image.
        /// </summary>
        public Bitmap Color
        {
            get
            {
                if (_color == null)
                {
                    IntPtr hdcDesktop = IntPtr.Zero;
                    IntPtr hdc = IntPtr.Zero;
                    IntPtr hBmp = IntPtr.Zero;
                    IntPtr hBmpOld = IntPtr.Zero;
                    IntPtr bitsInfo = IntPtr.Zero;
                    IntPtr bits = IntPtr.Zero;

                    try
                    {
                        hdcDesktop = User32.GetDC(IntPtr.Zero); // Gdi32.CreateDC("DISPLAY", null, null, IntPtr.Zero);
                        if (hdcDesktop == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        hdc = Gdi32.CreateCompatibleDC(hdcDesktop);
                        if (hdc == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        hBmp = Gdi32.CreateCompatibleBitmap(hdcDesktop, _header.biWidth, _header.biHeight / 2);
                        if (hBmp == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        hBmpOld = Gdi32.SelectObject(hdc, hBmp);

                        // bitmap header
                        bitsInfo = Marshal.AllocCoTaskMem(XorImageIndex);
                        if (bitsInfo == null)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        Marshal.Copy(_data, 0, bitsInfo, XorImageIndex);
                        // fix the height
                        Marshal.WriteInt32(bitsInfo, 8, _header.biHeight / 2);
                        // XOR bits
                        bits = Marshal.AllocCoTaskMem(XorImageSize);
                        Marshal.Copy(_data, XorImageIndex, bits, XorImageSize);

                        if (0 == Gdi32.SetDIBitsToDevice(hdc, 0, 0, (UInt32)_header.biWidth, (UInt32)_header.biHeight / 2,
                           0, 0, 0, (UInt32)(_header.biHeight / 2), bits, bitsInfo, (Int32)Gdi32.DIBColors.DIB_RGB_COLORS))
                        {
                            throw new Win32Exception(Marshal.GetLastWin32Error());
                        }

                        _color = Bitmap.FromHbitmap(hBmp);
                    }
                    finally
                    {
                        if (hdcDesktop != IntPtr.Zero) Gdi32.DeleteDC(hdcDesktop);
                        if (bits != IntPtr.Zero) Marshal.FreeCoTaskMem(bits);
                        if (bitsInfo != IntPtr.Zero) Marshal.FreeCoTaskMem(bitsInfo);
                        if (hdc != IntPtr.Zero) Gdi32.SelectObject(hdc, hBmpOld);
                        if (hdc != IntPtr.Zero) Gdi32.DeleteObject(hdc);
                    }
                }

                return _color;
            }
        }

        /// <summary>
        /// Complete image.
        /// </summary>
        public Bitmap Image
        {
            get
            {
                if (_image == null)
                {
                    IntPtr hDCScreen = IntPtr.Zero;
                    IntPtr bits = IntPtr.Zero;
                    IntPtr hDCScreenOUTBmp = IntPtr.Zero;
                    IntPtr hBitmapOUTBmp = IntPtr.Zero;

                    try
                    {
                        hDCScreen = User32.GetDC(IntPtr.Zero);
                        if (hDCScreen == IntPtr.Zero)
                            throw new Win32Exception(Marshal.GetLastWin32Error());

                        // Image
                        Gdi32.BITMAPINFO bitmapInfo = new Gdi32.BITMAPINFO();
                        bitmapInfo.bmiHeader = _header;
                        // bitmapInfo.bmiColors = Tools.StandarizePalette(mEncoder.Colors);
                        hDCScreenOUTBmp = Gdi32.CreateCompatibleDC(hDCScreen);
                        hBitmapOUTBmp = Gdi32.CreateDIBSection(hDCScreenOUTBmp, ref bitmapInfo, 0, out bits, IntPtr.Zero, 0);
                        Marshal.Copy(_data, XorImageIndex, bits, XorImageSize);
                        _image = Bitmap.FromHbitmap(hBitmapOUTBmp);                        
                    }
                    finally
                    {
                        if (hDCScreen != IntPtr.Zero) User32.ReleaseDC(IntPtr.Zero, hDCScreen);
                        if (hBitmapOUTBmp != IntPtr.Zero) Gdi32.DeleteObject(hBitmapOUTBmp);
                        if (hDCScreenOUTBmp != IntPtr.Zero) Gdi32.DeleteDC(hDCScreenOUTBmp);
                    }
                }

                return _image;
            }
        }
    }
}



================================================
File: ResourceLib/DialogExTemplate.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A container for the DIALOGTEMPLATEEX structure.
    /// </summary>
    public class DialogExTemplate : DialogTemplateBase
    {
        User32.DIALOGEXTEMPLATE _header = new User32.DIALOGEXTEMPLATE();
        private byte _characterSet = 0;
        private UInt16 _weight = 0;
        private bool _italic = false;

        /// <summary>
        /// Indicates the character set to use.
        /// </summary>
        public byte CharacterSet
        {
            get
            {
                return _characterSet;
            }
            set
            {
                _characterSet = value;
            }
        }

        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public override Int16 x
        {
            get
            {
                return _header.x;
            }
            set
            {
                _header.x = value;
            }
        }

        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public override Int16 y
        {
            get
            {
                return _header.y;
            }
            set
            {
                _header.y = value;
            }
        }

        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cx
        {
            get
            {
                return _header.cx;
            }
            set
            {
                _header.cx = value;
            }
        }

        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cy
        {
            get
            {
                return _header.cy;
            }
            set
            {
                _header.cy = value;
            }
        }

        /// <summary>
        /// Dialog style.
        /// </summary>
        public override UInt32 Style
        {
            get
            {
                return _header.style;
            }
            set
            {
                _header.style = value;
            }
        }

        /// <summary>
        /// Extended dialog style.
        /// </summary>
        public override UInt32 ExtendedStyle
        {
            get
            {
                return _header.exStyle;
            }
            set
            {
                _header.exStyle = value;
            }
        }

        /// <summary>
        /// Weight of the font. 
        /// </summary>
        public UInt16 Weight
        {
            get
            {
                return _weight;
            }
            set
            {
                _weight = value;
            }
        }

        /// <summary>
        /// Indicates whether the font is italic.
        /// </summary>
        public bool Italic
        {
            get
            {
                return _italic;
            }
            set
            {
                _italic = value;
            }
        }

        /// <summary>
        /// Number of dialog items.
        /// </summary>
        public override UInt16 ControlCount
        {
            get
            {
                return _header.cDlgItems;
            }
        }

        /// <summary>
        /// An extended dialog structure.
        /// </summary>
        public DialogExTemplate()
        {

        }

        /// <summary>
        /// Read the dialog resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the dialog structure.</param>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.DIALOGEXTEMPLATE)Marshal.PtrToStructure(
                lpRes, typeof(User32.DIALOGEXTEMPLATE));

            lpRes = base.Read(new IntPtr(lpRes.ToInt64() + 26)); // Marshal.SizeOf(_header)

            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                // weight
                Weight = (UInt16)Marshal.ReadInt16(lpRes);
                lpRes = new IntPtr(lpRes.ToInt64() + 2);
                // italic
                Italic = (Marshal.ReadByte(lpRes) > 0);
                lpRes = new IntPtr(lpRes.ToInt64() + 1);
                // character set
                CharacterSet = Marshal.ReadByte(lpRes);
                lpRes = new IntPtr(lpRes.ToInt64() + 1);
                // typeface
                TypeFace = Marshal.PtrToStringUni(lpRes);
                lpRes = new IntPtr(lpRes.ToInt64() + (TypeFace.Length + 1) * Marshal.SystemDefaultCharSize);
            }

            return ReadControls(lpRes);
        }

        internal override IntPtr AddControl(IntPtr lpRes)
        {
            DialogExTemplateControl control = new DialogExTemplateControl();
            Controls.Add(control);
            return control.Read(lpRes);
        }

        /// <summary>
        /// Write dialog control to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public override void Write(BinaryWriter w)
        {
            w.Write((UInt16)_header.dlgVer);
            w.Write((UInt16)_header.signature);
            w.Write((UInt32)_header.helpID);
            w.Write((UInt32)_header.exStyle);
            w.Write((UInt32)_header.style);
            w.Write((UInt16)Controls.Count);
            w.Write(_header.x);
            w.Write(_header.y);
            w.Write(_header.cx);
            w.Write(_header.cy);

            base.Write(w);

            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                w.Write((UInt16) Weight);
                w.Write((byte) (Italic ? 1 : 0));
                w.Write(CharacterSet);
                w.Write(Encoding.Unicode.GetBytes(TypeFace));
                w.Write((UInt16) 0);
            }

            WriteControls(w);
        }

        /// <summary>
        /// String representation of the dialog.
        /// </summary>
        /// <returns>String in the DIALOGEX [dialog] format.</returns>
        public override string ToString()
        {
            return string.Format("DIALOGEX {0}", base.ToString());
        }
    }
}



================================================
File: ResourceLib/DialogExTemplateControl.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A container for the DIALOGTEMPLATEEX structure.
    /// </summary>
    public class DialogExTemplateControl : DialogTemplateControlBase
    {
        private User32.DIALOGEXITEMTEMPLATE _header = new User32.DIALOGEXITEMTEMPLATE();

        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public override Int16 x
        {
            get
            {
                return _header.x;
            }
            set
            {
                _header.x = value;
            }
        }

        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public override Int16 y
        {
            get
            {
                return _header.y;
            }
            set
            {
                _header.y = value;
            }
        }

        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cx
        {
            get
            {
                return _header.cx;
            }
            set
            {
                _header.cx = value;
            }
        }

        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cy
        {
            get
            {
                return _header.cy;
            }
            set
            {
                _header.cy = value;
            }
        }

        /// <summary>
        /// Dialog style.
        /// </summary>
        public override UInt32 Style
        {
            get
            {
                return _header.style;
            }
            set
            {
                _header.style = value;
            }
        }

        /// <summary>
        /// Extended dialog style.
        /// </summary>
        public override UInt32 ExtendedStyle
        {
            get
            {
                return _header.exStyle;
            }
            set
            {
                _header.exStyle = value;
            }
        }

        /// <summary>
        /// Control identifier.
        /// </summary>
        public Int32 Id
        {
            get
            {
                return _header.id;
            }
            set
            {
                _header.id = value;
            }
        }

        /// <summary>
        /// An extended dialog control template structure.
        /// </summary>
        public DialogExTemplateControl()
        {

        }

        /// <summary>
        /// Read the dialog control.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the dialog structure.</param>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.DIALOGEXITEMTEMPLATE)Marshal.PtrToStructure(
                lpRes, typeof(User32.DIALOGEXITEMTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));
            return base.Read(lpRes);
        }

        /// <summary>
        /// Write the dialog control to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public override void Write(BinaryWriter w)
        {
            w.Write((UInt32)_header.helpID);
            w.Write((UInt32)_header.exStyle);
            w.Write((UInt32)_header.style);
            w.Write((Int16)_header.x);
            w.Write((Int16)_header.y);
            w.Write((Int16)_header.cx);
            w.Write((Int16)_header.cy);
            w.Write((Int32)_header.id);
            base.Write(w);
        }

        /// <summary>
        /// Return a string representation of the dialog control.
        /// </summary>
        /// <returns>A single line in the "CLASS name id, dimensions and styles' format.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendFormat("{0} \"{1}\" {2}, {3}, {4}, {5}, {6}, {7}, {8}",
                ControlClass, CaptionId, Id, ControlClass, x, y, cx, cy,
                DialogTemplateUtil.StyleToString<User32.WindowStyles, User32.StaticControlStyles>(Style, ExtendedStyle));

            switch (ControlClass)
            {
                case User32.DialogItemClass.Button:
                    sb.AppendFormat("| {0}", (User32.ButtonControlStyles)(Style & 0xFFFF));
                    break;
                case User32.DialogItemClass.Edit:
                    sb.AppendFormat("| {0}", DialogTemplateUtil.StyleToString<User32.EditControlStyles>(Style & 0xFFFF));
                    break;
            }

            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/DialogResource.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A dialog template resource.
    /// </summary>
    public class DialogResource : Resource
    {
        private DialogTemplateBase _dlgtemplate = null;

        /// <summary>
        /// A dialog template structure that describes the dialog.
        /// </summary>
        public DialogTemplateBase Template
        {
            get
            {
                return _dlgtemplate;
            }
            set
            {
                _dlgtemplate = value;
            }
        }

        /// <summary>
        /// A structured dialog resource embedded in an executable module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource handle.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language id.</param>
        /// <param name="size">Resource size.</param>
        public DialogResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary> 
        /// A structured dialog resource embedded in an executable module.
        /// </summary>
        public DialogResource()
            : base(IntPtr.Zero, 
                IntPtr.Zero, 
                new ResourceId(Kernel32.ResourceTypes.RT_DIALOG), 
                new ResourceId(1), 
                ResourceUtil.NEUTRALLANGID, 
                0)
        {

        }

        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            switch ((uint)Marshal.ReadInt32(lpRes) >> 16)
            {
                case 0xFFFF:
                    _dlgtemplate = new DialogExTemplate();
                    break;
                default:
                    _dlgtemplate = new DialogTemplate();
                    break;
            }

            // dialog structure itself
            return _dlgtemplate.Read(lpRes);
        }

        internal override void Write(BinaryWriter w)
        {
            _dlgtemplate.Write(w);
        }

        /// <summary>
        /// Dialog resource in standard resource editor text format.
        /// </summary>
        /// <returns>Multi-line string.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("{0} {1}", 
                Name.IsIntResource() ? Name.ToString() : "\"" + Name.ToString() + "\"",
                _dlgtemplate);
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/DialogTemplate.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A container for the DIALOGTEMPLATE structure.
    /// </summary>
    public class DialogTemplate : DialogTemplateBase
    {
        private User32.DIALOGTEMPLATE _header = new User32.DIALOGTEMPLATE();

        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public override Int16 x
        {
            get
            {
                return _header.x;
            }
            set
            {
                _header.x = value;
            }
        }

        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public override Int16 y
        {
            get
            {
                return _header.y;
            }
            set
            {
                _header.y = value;
            }
        }

        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cx
        {
            get
            {
                return _header.cx;
            }
            set
            {
                _header.cx = value;
            }
        }

        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cy
        {
            get
            {
                return _header.cy;
            }
            set
            {
                _header.cy = value;
            }
        }

        /// <summary>
        /// Dialog style.
        /// </summary>
        public override UInt32 Style
        {
            get
            {
                return _header.style;
            }
            set
            {
                _header.style = value;
            }
        }

        /// <summary>
        /// Extended dialog style.
        /// </summary>
        public override UInt32 ExtendedStyle
        {
            get
            {
                return _header.dwExtendedStyle;
            }
            set
            {
                _header.dwExtendedStyle = value;
            }
        }

        /// <summary>
        /// Number of dialog items.
        /// </summary>
        public override UInt16 ControlCount
        {
            get 
            {
                return _header.cdit;
            }
        }

        /// <summary>
        /// A standard dialog structure.
        /// </summary>
        public DialogTemplate()
        {

        }

        /// <summary>
        /// Read the dialog resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the dialog structure.</param>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.DIALOGTEMPLATE) Marshal.PtrToStructure(
                lpRes, typeof(User32.DIALOGTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() + 18); // Marshal.SizeOf(_header)
            lpRes = base.Read(lpRes);

            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                // typeface
                TypeFace = Marshal.PtrToStringUni(lpRes);
                lpRes = new IntPtr(lpRes.ToInt64() + (TypeFace.Length + 1) * Marshal.SystemDefaultCharSize);
            }

            return ReadControls(lpRes);
        }

        internal override IntPtr AddControl(IntPtr lpRes)
        {
            DialogTemplateControl control = new DialogTemplateControl();
            Controls.Add(control);
            return control.Read(lpRes);
        }

        /// <summary>
        /// Write the dialog template data to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public override void Write(BinaryWriter w)
        {
            w.Write(_header.style);
            w.Write(_header.dwExtendedStyle);
            w.Write((UInt16) Controls.Count);
            w.Write(_header.x);
            w.Write(_header.y);
            w.Write(_header.cx);
            w.Write(_header.cy);
            
            base.Write(w);
            
            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                w.Write(Encoding.Unicode.GetBytes(TypeFace));
                w.Write((UInt16) 0);
            }

            WriteControls(w);
        }

        /// <summary>
        /// Returns a string representation of the dialog.
        /// </summary>
        /// <returns>String in the DIALOG ... format.</returns>
        public override string ToString()
        {
            return string.Format("DIALOG {0}", base.ToString());
        }
    }
}



================================================
File: ResourceLib/DialogTemplateBase.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A dialog template.
    /// </summary>
    public abstract class DialogTemplateBase
    {
        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public abstract Int16 x { get; set; }
        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public abstract Int16 y { get; set; }
        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public abstract Int16 cx { get; set; }
        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public abstract Int16 cy { get; set; }
        /// <summary>
        /// Style of the dialog box.
        /// </summary>
        public abstract UInt32 Style { get; set; }
        /// <summary>
        /// Optional extended style of the dialog box.
        /// </summary>
        public abstract UInt32 ExtendedStyle { get; set; }
        /// <summary>
        /// Number of items in this structure.
        /// </summary>
        public abstract UInt16 ControlCount { get; }

        private string _caption = null;
        private ResourceId _menuId = null;
        private ResourceId _windowClassId = null;
        private UInt16 _pointSize = 0;
        private string _typeface = null;
        private List<DialogTemplateControlBase> _controls = new List<DialogTemplateControlBase>();

        /// <summary>
        /// The name of the typeface for the font.
        /// </summary>
        public String TypeFace
        {
            get
            {
                return _typeface;
            }
            set
            {
                _typeface = value;
            }
        }

        /// <summary>
        /// Point size of the font to use for the text in the dialog box and its controls.
        /// </summary>
        public UInt16 PointSize
        {
            get
            {
                return _pointSize;
            }
            set
            {
                _pointSize = value;
            }
        }

        /// <summary>
        /// Dialog caption.
        /// </summary>
        public string Caption
        {
            get
            {
                return _caption;
            }
            set
            {
                _caption = value;
            }
        }

        /// <summary>
        /// Menu resource Id.
        /// </summary>
        public ResourceId MenuId
        {
            get
            {
                return _menuId;
            }
            set
            {
                _menuId = value;
            }
        }

        /// <summary>
        /// Window class Id.
        /// </summary>
        public ResourceId WindowClassId
        {
            get
            {
                return _windowClassId;
            }
            set
            {
                _windowClassId = value;
            }
        }

        /// <summary>
        /// Controls within this dialog.
        /// </summary>
        public List<DialogTemplateControlBase> Controls
        {
            get
            {
                return _controls;
            }
            set
            {
                _controls = value;
            }
        }

        /// <summary>
        /// Dialog template representation in a standard text format.
        /// </summary>
        /// <returns>Multiline string.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}, {1}, {2}, {3}", x, y, x + cx, y + cy));

            string style = DialogTemplateUtil.StyleToString<User32.WindowStyles, User32.DialogStyles>(Style);
            if (!string.IsNullOrEmpty(style))
                sb.AppendLine("STYLE " + style);

            string exstyle = DialogTemplateUtil.StyleToString<User32.WindowStyles, User32.ExtendedDialogStyles>(ExtendedStyle);
            if (!string.IsNullOrEmpty(exstyle))
                sb.AppendLine("EXSTYLE " + exstyle);

            sb.AppendLine(string.Format("CAPTION \"{0}\"", _caption));
            sb.AppendLine(string.Format("FONT {0}, \"{1}\"", _pointSize, _typeface));

            if (_controls.Count > 0)
            {
                sb.AppendLine("{");
                foreach (DialogTemplateControlBase control in _controls)
                {
                    sb.AppendLine(" " + control.ToString());
                }
                sb.AppendLine("}");
            }

            return sb.ToString();
        }

        /// <summary>
        /// String represetnation of a control.
        /// </summary>
        /// <returns></returns>
        public virtual string ToControlString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("{0} \"{1}\" {2}, {3}, {4}, {5}",
                WindowClassId, Caption, x, y, cx, cy);
            return sb.ToString();
        }

        internal virtual IntPtr Read(IntPtr lpRes)
        {
            // menu
            lpRes = DialogTemplateUtil.ReadResourceId(lpRes, out _menuId);
            // window class
            lpRes = DialogTemplateUtil.ReadResourceId(lpRes, out _windowClassId);
            // caption
            Caption = Marshal.PtrToStringUni(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + (Caption.Length + 1) * Marshal.SystemDefaultCharSize);

            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                // point size
                PointSize = (UInt16)Marshal.ReadInt16(lpRes);
                lpRes = new IntPtr(lpRes.ToInt64() + 2);
            }

            return lpRes;
        }

        internal abstract IntPtr AddControl(IntPtr lpRes);

        internal IntPtr ReadControls(IntPtr lpRes)
        {
            for (int i = 0; i < ControlCount; i++)
            {
                lpRes = ResourceUtil.Align(lpRes);
                lpRes = AddControl(lpRes);
            }

            return lpRes;
        }

        internal void WriteControls(BinaryWriter w)
        {
            foreach(DialogTemplateControlBase control in Controls)
            {
                ResourceUtil.PadToDWORD(w);
                control.Write(w);
            }
        }

        /// <summary>
        /// Write the resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public virtual void Write(BinaryWriter w)
        {
            // menu
            DialogTemplateUtil.WriteResourceId(w, _menuId);
            // window class
            DialogTemplateUtil.WriteResourceId(w, _windowClassId);
            // caption
            w.Write(Encoding.Unicode.GetBytes(Caption));
            w.Write((UInt16)0);
            // point size
            if ((Style & (uint)User32.DialogStyles.DS_SETFONT) > 0
                || (Style & (uint)User32.DialogStyles.DS_SHELLFONT) > 0)
            {
                w.Write((UInt16)PointSize);
            }
        }
    }
}



================================================
File: ResourceLib/DialogTemplateControl.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A container for a control within a dialog template.
    /// </summary>
    public class DialogTemplateControl : DialogTemplateControlBase
    {
        private User32.DIALOGITEMTEMPLATE _header = new User32.DIALOGITEMTEMPLATE();

        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public override Int16 x
        {
            get
            {
                return _header.x;
            }
            set
            {
                _header.x = value;
            }
        }

        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public override Int16 y
        {
            get
            {
                return _header.y;
            }
            set
            {
                _header.y = value;
            }
        }

        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cx
        {
            get
            {
                return _header.cx;
            }
            set
            {
                _header.cx = value;
            }
        }

        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public override Int16 cy
        {
            get
            {
                return _header.cy;
            }
            set
            {
                _header.cy = value;
            }
        }

        /// <summary>
        /// Dialog style.
        /// </summary>
        public override UInt32 Style
        {
            get
            {
                return _header.style;
            }
            set
            {
                _header.style = value;
            }
        }

        /// <summary>
        /// Extended dialog style.
        /// </summary>
        public override UInt32 ExtendedStyle
        {
            get
            {
                return _header.dwExtendedStyle;
            }
            set
            {
                _header.dwExtendedStyle = value;
            }
        }

        /// <summary>
        /// Control identifier.
        /// </summary>
        public Int16 Id
        {
            get
            {
                return _header.id;
            }
            set
            {
                _header.id = value;
            }
        }

        /// <summary>
        /// A standard dialog control structure.
        /// </summary>
        public DialogTemplateControl()
        {

        }

        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.DIALOGITEMTEMPLATE)Marshal.PtrToStructure(
                lpRes, typeof(User32.DIALOGITEMTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() + 18); // Marshal.SizeOf(_header)
            lpRes = base.Read(lpRes);

            return lpRes;
        }

        /// <summary>
        /// Write the dialog control to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public override void Write(BinaryWriter w)
        {
            w.Write((UInt32) _header.style);
            w.Write((UInt32) _header.dwExtendedStyle);
            w.Write((Int16) _header.x);
            w.Write((Int16) _header.y);
            w.Write((Int16) _header.cx);
            w.Write((Int16) _header.cy);
            w.Write((Int16) _header.id);
            base.Write(w);
        }

        /// <summary>
        /// String represetnation of a control.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            
            sb.AppendFormat("{0} \"{1}\" {2}, {3}, {4}, {5}, {6}, {7}",
                ControlClass, CaptionId, Id, x, y, cx, cy,
                DialogTemplateUtil.StyleToString<User32.WindowStyles, User32.DialogStyles>(Style));

            switch (ControlClass)
            {
                case User32.DialogItemClass.Button:
                    sb.AppendFormat("| {0}", (User32.ButtonControlStyles) (Style & 0xFFFF));
                    break;
                case User32.DialogItemClass.Edit:
                    sb.AppendFormat("| {0}", DialogTemplateUtil.StyleToString<User32.EditControlStyles>(Style & 0xFFFF));
                    break;
            }
            
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/DialogTemplateControlBase.cs
================================================
ï»¿using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A dialog template.
    /// </summary>
    public abstract class DialogTemplateControlBase
    {
        /// <summary>
        /// X-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
        /// </summary>
        public abstract Int16 x { get; set; }
        /// <summary>
        /// Y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
        /// </summary>
        public abstract Int16 y { get; set; }
        /// <summary>
        /// Width, in dialog box units, of the dialog box.
        /// </summary>
        public abstract Int16 cx { get; set; }
        /// <summary>
        /// Height, in dialog box units, of the dialog box.
        /// </summary>
        public abstract Int16 cy { get; set; }
        /// <summary>
        /// Style of the dialog box.
        /// </summary>
        public abstract UInt32 Style { get; set; }
        /// <summary>
        /// Optional extended style of the dialog box.
        /// </summary>
        public abstract UInt32 ExtendedStyle { get; set; }

        private ResourceId _captionId = null;
        private ResourceId _controlClassId = null;
        private byte[] _creationData = null;

        /// <summary>
        /// Dialog caption.
        /// </summary>
        public ResourceId CaptionId
        {
            get
            {
                return _captionId;
            }
            set
            {
                _captionId = value;
            }
        }

        /// <summary>
        /// Window class Id.
        /// </summary>
        public ResourceId ControlClassId
        {
            get
            {
                return _controlClassId;
            }
            set
            {
                _controlClassId = value;
            }
        }

        /// <summary>
        /// Window class of the control.
        /// </summary>
        public User32.DialogItemClass ControlClass
        {
            get
            {
                return (User32.DialogItemClass) ControlClassId.Id;
            }
        }

        /// <summary>
        /// Additional creation data.
        /// </summary>
        public byte[] CreationData
        {
            get
            {
                return _creationData;
            }
            set
            {
                _creationData = value;
            }
        }

        internal virtual IntPtr Read(IntPtr lpRes)
        {
            // control class
            lpRes = DialogTemplateUtil.ReadResourceId(lpRes, out _controlClassId);
            // caption
            lpRes = DialogTemplateUtil.ReadResourceId(lpRes, out _captionId);

            // optional/additional creation data
            switch ((UInt16)Marshal.ReadInt16(lpRes))
            {
                case 0x0000: // no data
                    lpRes = new IntPtr(lpRes.ToInt64() + 2);
                    break;
                default:
                    UInt16 size = (UInt16)Marshal.ReadInt16(lpRes);
                    _creationData = new byte[size];
                    Marshal.Copy(lpRes, _creationData, 0, _creationData.Length);
                    lpRes = new IntPtr(lpRes.ToInt64() + size);
                    break;
            }

            return lpRes;
        }

        /// <summary>
        /// Write the dialog control to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public virtual void Write(BinaryWriter w)
        {
            // control class
            DialogTemplateUtil.WriteResourceId(w, _controlClassId);
            // caption
            DialogTemplateUtil.WriteResourceId(w, _captionId);

            if (_creationData == null)
            {
                w.Write((UInt16) 0);
            }
            else
            {
                ResourceUtil.PadToWORD(w);
                w.Write((UInt16) _creationData.Length);
                w.Write(_creationData);
            }
        }
    }
}



================================================
File: ResourceLib/DialogTemplateUtil.cs
================================================
ï»¿using System;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Dialog template utility functions.
    /// </summary>
    internal abstract class DialogTemplateUtil
    {
        /// <summary>
        /// Read a dialog resource id.       
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <param name="rc">Resource read.</param>
        /// <returns></returns>
        internal static IntPtr ReadResourceId(IntPtr lpRes, out ResourceId rc)
        {
            rc = null;

            switch ((UInt16) Marshal.ReadInt16(lpRes))
            {
                case 0x0000: // no predefined resource
                    lpRes = new IntPtr(lpRes.ToInt64() + 2);
                    break;
                case 0xFFFF: // one additional element that specifies the ordinal value of the resource
                    lpRes = new IntPtr(lpRes.ToInt64() + 2);
                    rc = new ResourceId((UInt16)Marshal.ReadInt16(lpRes));
                    lpRes = new IntPtr(lpRes.ToInt64() + 2);
                    break;
                default: // null-terminated Unicode string that specifies the name of the resource
                    rc = new ResourceId(Marshal.PtrToStringUni(lpRes));
                    lpRes = new IntPtr(lpRes.ToInt64() + (rc.Name.Length + 1) * Marshal.SystemDefaultCharSize);
                    break;
            }

            return lpRes;
        }

        internal static void WriteResourceId(BinaryWriter w, ResourceId rc)
        {
            if (rc == null)
            {
                w.Write((UInt16) 0);
            }
            else if (rc.IsIntResource())
            {
                w.Write((UInt16) 0xFFFF);
                w.Write((UInt16) rc.Id);
            }
            else
            {
                ResourceUtil.PadToWORD(w);
                w.Write(Encoding.Unicode.GetBytes(rc.Name));
                w.Write((UInt16)0);
            }
        }

        /// <summary>
        /// String representation of the dialog or control style of two types.
        /// </summary>
        /// <param name="style">Dialog or control style.</param>
        /// <returns>String in the "s1 | s2 | ... | s3" format.</returns>
        internal static string StyleToString<W, D>(UInt32 style)
        {
            List<string> styles = new List<string>();
            styles.AddRange(ResourceUtil.FlagsToList<W>(style));
            styles.AddRange(ResourceUtil.FlagsToList<D>(style));
            return String.Join(" | ", styles.ToArray());
        }

        /// <summary>
        /// String representation of the dialog or control styles of two types.
        /// </summary>
        /// <param name="style">Dialog or control style.</param>
        /// <param name="exstyle">Dialog or control extended style.</param>
        /// <returns>String in the "s1 | s2 | ... | s3" format.</returns>
        internal static string StyleToString<W, D>(UInt32 style, UInt32 exstyle)
        {
            List<string> styles = new List<string>();
            styles.AddRange(ResourceUtil.FlagsToList<W>(style));
            styles.AddRange(ResourceUtil.FlagsToList<D>(exstyle));
            return String.Join(" | ", styles.ToArray());
        }

        /// <summary>
        /// String representation of the dialog or control style of one type.
        /// </summary>
        /// <param name="style">Dialog or control style.</param>
        /// <returns>String in the "s1 | s2 | ... | s3" format.</returns>
        internal static string StyleToString<W>(UInt32 style)
        {
            List<string> styles = new List<string>();
            styles.AddRange(ResourceUtil.FlagsToList<W>(style));
            return String.Join(" | ", styles.ToArray());
        }
    }
}



================================================
File: ResourceLib/DirectoryResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a hardware-independent icon resource.
    /// </summary>
    public class DirectoryResource<ImageResourceType> : Resource
        where ImageResourceType : IconImageResource, new()
    {
        Kernel32.GRPICONDIR _header = new Kernel32.GRPICONDIR();
        List<ImageResourceType> _icons = new List<ImageResourceType>();

        /// <summary>
        /// Returns the type of the resource in this group.
        /// </summary>
        public Kernel32.ResourceTypes ResourceType
        {
            get
            {
                switch (_header.wType)
                {
                    case 1:
                        return Kernel32.ResourceTypes.RT_ICON;
                    //case 2:
                    //    return Kernel32.ResourceTypes.RT_CURSOR;
                    default:
                        throw new NotSupportedException();
                }
            }
        }
               
        /// <summary>
        /// Icons contained in this hardware-independent icon resource.
        /// </summary>
        public List<ImageResourceType> Icons
        {
            get
            {
                return _icons;
            }
            set
            {
                _icons = value;
            }
        }

        /// <summary>
        /// A hardware-independent icon resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal DirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new hardware-independent icon resource.
        /// </summary>
        public DirectoryResource(Kernel32.ResourceTypes resourceType)
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(resourceType),
                new ResourceId(1),
                ResourceUtil.NEUTRALLANGID,
                Marshal.SizeOf(typeof(Kernel32.GRPICONDIR)))
        {
            switch(resourceType)
            {
                //case Kernel32.ResourceTypes.RT_GROUP_CURSOR:
                //    _header.wType = 2;
                //    break;
                case Kernel32.ResourceTypes.RT_GROUP_ICON:
                    _header.wType = 1;
                    break;
                default:
                    throw new NotSupportedException();
            }            
        }

        /// <summary>
        /// Save a hardware-independent icon resource to an executable file.
        /// </summary>
        /// <param name="filename">Name of an executable file (.exe or .dll).</param>
        public override void SaveTo(string filename)
        {
            base.SaveTo(filename);

            foreach (ImageResourceType icon in _icons)
            {
                icon.SaveIconTo(filename);
            }
        }

        /// <summary>
        /// Read a hardware-independent icon resource from a loaded module.
        /// </summary>
        /// <param name="hModule">Loaded executable module.</param>
        /// <param name="lpRes">Pointer to the beginning of a hardware-independent icon resource.</param>
        /// <returns>Pointer to the end of the hardware-independent icon resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            _icons.Clear();

            _header = (Kernel32.GRPICONDIR)Marshal.PtrToStructure(
                lpRes, typeof(Kernel32.GRPICONDIR));

            IntPtr pEntry = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));

            for (UInt16 i = 0; i < _header.wImageCount; i++)
            {
                ImageResourceType iconImageResource = new ImageResourceType();
                pEntry = iconImageResource.Read(hModule, pEntry);
                _icons.Add(iconImageResource);
            }

            return pEntry;
        }

        /// <summary>
        /// Write a hardware-independent icon resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write((UInt16)_header.wReserved);
            w.Write((UInt16)_header.wType);
            w.Write((UInt16)_icons.Count);
            ResourceUtil.PadToWORD(w);
            foreach (ImageResourceType icon in _icons)
            {
                icon.Write(w);
            }
        }
    }
}



================================================
File: ResourceLib/FixedFileInfo.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Fixed file information.
    /// </summary>
    public class FixedFileInfo
    {
        Kernel32.VS_FIXEDFILEINFO _fixedfileinfo = Kernel32.VS_FIXEDFILEINFO.GetWindowsDefault();

        /// <summary>
        /// Default Windows fixed file information.
        /// </summary>
        public FixedFileInfo()
        {

        }

        /// <summary>
        /// Fixed file info structure.
        /// </summary>
        public Kernel32.VS_FIXEDFILEINFO Value
        {
            get
            {
                return _fixedfileinfo;
            }
        }

        /// <summary>
        /// Read the fixed file information structure.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        internal void Read(IntPtr lpRes)
        {
            _fixedfileinfo = (Kernel32.VS_FIXEDFILEINFO)Marshal.PtrToStructure(
                lpRes, typeof(Kernel32.VS_FIXEDFILEINFO));
        }

        /// <summary>
        /// String representation of the file version.
        /// </summary>
        public string FileVersion
        {
            get
            {
                return string.Format("{0}.{1}.{2}.{3}",
                    ResourceUtil.HiWord(_fixedfileinfo.dwFileVersionMS),
                    ResourceUtil.LoWord(_fixedfileinfo.dwFileVersionMS),
                    ResourceUtil.HiWord(_fixedfileinfo.dwFileVersionLS),
                    ResourceUtil.LoWord(_fixedfileinfo.dwFileVersionLS));
            }
            set
            {
                UInt32 major = 0, minor = 0, build = 0, release = 0;
                string[] version_s = value.Split(".".ToCharArray(), 4);
                if (version_s.Length >= 1) major = UInt32.Parse(version_s[0]);
                if (version_s.Length >= 2) minor = UInt32.Parse(version_s[1]);
                if (version_s.Length >= 3) build = UInt32.Parse(version_s[2]);
                if (version_s.Length >= 4) release = UInt32.Parse(version_s[3]);
                _fixedfileinfo.dwFileVersionMS = (major << 16) + minor;
                _fixedfileinfo.dwFileVersionLS = (build << 16) + release;
            }
        }

        /// <summary>
        /// String representation of the protect version.
        /// </summary>
        public string ProductVersion
        {
            get
            {
                return string.Format("{0}.{1}.{2}.{3}",
                    ResourceUtil.HiWord(_fixedfileinfo.dwProductVersionMS),
                    ResourceUtil.LoWord(_fixedfileinfo.dwProductVersionMS),
                    ResourceUtil.HiWord(_fixedfileinfo.dwProductVersionLS),
                    ResourceUtil.LoWord(_fixedfileinfo.dwProductVersionLS));
            }
            set
            {
                UInt32 major = 0, minor = 0, build = 0, release = 0;
                string[] version_s = value.Split(".".ToCharArray(), 4);
                if (version_s.Length >= 1) major = UInt32.Parse(version_s[0]);
                if (version_s.Length >= 2) minor = UInt32.Parse(version_s[1]);
                if (version_s.Length >= 3) build = UInt32.Parse(version_s[2]);
                if (version_s.Length >= 4) release = UInt32.Parse(version_s[3]);
                _fixedfileinfo.dwProductVersionMS = (major << 16) + minor;
                _fixedfileinfo.dwProductVersionLS = (build << 16) + release;
            }
        }

        /// <summary>
        /// Gets or sets a bitmask that specifies the Boolean attributes of the file.
        /// </summary>
        public uint FileFlags
        {
          get
          {
            return this._fixedfileinfo.dwFileFlags;
          }
          set
          {
            this._fixedfileinfo.dwFileFlags = value;
          }
        }

        /// <summary>
        /// Write fixed file information to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public void Write(BinaryWriter w)
        {
            w.Write(ResourceUtil.GetBytes<Kernel32.VS_FIXEDFILEINFO>(_fixedfileinfo));
            ResourceUtil.PadToDWORD(w);
        }

        /// <summary>
        /// Size of the VS_FIXEDFILEINFO structure.
        /// </summary>
        public UInt16 Size
        {
            get
            {
                return (UInt16) Marshal.SizeOf(_fixedfileinfo);
            }
        }

        /// <summary>
        /// String representation of the fixed file info.
        /// </summary>
        /// <returns>String representation of the fixed file info.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("FILEVERSION {0},{1},{2},{3}",
                ResourceUtil.HiWord(_fixedfileinfo.dwFileVersionMS),
                ResourceUtil.LoWord(_fixedfileinfo.dwFileVersionMS),
                ResourceUtil.HiWord(_fixedfileinfo.dwFileVersionLS),
                ResourceUtil.LoWord(_fixedfileinfo.dwFileVersionLS)));
            sb.AppendLine(string.Format("PRODUCTVERSION {0},{1},{2},{3}",
                ResourceUtil.HiWord(_fixedfileinfo.dwProductVersionMS),
                ResourceUtil.LoWord(_fixedfileinfo.dwProductVersionMS),
                ResourceUtil.HiWord(_fixedfileinfo.dwProductVersionLS),
                ResourceUtil.LoWord(_fixedfileinfo.dwProductVersionLS)));
            if (_fixedfileinfo.dwFileFlagsMask == Winver.VS_FFI_FILEFLAGSMASK)
            {
                sb.AppendLine("FILEFLAGSMASK VS_FFI_FILEFLAGSMASK");
            }
            else
            {
                sb.AppendLine(string.Format("FILEFLAGSMASK 0x{0:x}",
                    _fixedfileinfo.dwFileFlagsMask.ToString()));
            }
            sb.AppendLine(string.Format("FILEFLAGS {0}",
                _fixedfileinfo.dwFileFlags == 0 ? "0" : ResourceUtil.FlagsToString<Winver.FileFlags>(
                    _fixedfileinfo.dwFileFlags)));
            sb.AppendLine(string.Format("FILEOS {0}",
                ResourceUtil.FlagsToString<Winver.FileOs>(_fixedfileinfo.dwFileFlags)));
            sb.AppendLine(string.Format("FILETYPE {0}",
                ResourceUtil.FlagsToString<Winver.FileType>(_fixedfileinfo.dwFileType)));
            sb.AppendLine(string.Format("FILESUBTYPE {0}",
                ResourceUtil.FlagsToString<Winver.FileSubType>(_fixedfileinfo.dwFileSubtype)));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/FontDirectoryEntry.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{

    /// <summary>
    /// A font directory entry.
    /// </summary>
    public class FontDirectoryEntry
    {
        private UInt16 _fontOrdinal = 0;
        private User32.FONTDIRENTRY _font = new User32.FONTDIRENTRY();
        private string _faceName;
        private string _deviceName;

        /// <summary>
        /// Font ordinal.
        /// </summary>
        public UInt16 FontOrdinal
        {
            get
            {
                return _fontOrdinal;
            }
            set
            {
                _fontOrdinal = value;
            }
        }

        /// <summary>
        /// Typeface name of the font.
        /// </summary>
        public string FaceName
        {
            get
            {
                return _faceName;
            }
            set
            {
                _faceName = value;
            }
        }

        /// <summary>
        /// Specifies the name of the device if this font file is designated for a specific device.
        /// </summary>
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }

        /// <summary>
        /// Font information.
        /// </summary>
        public User32.FONTDIRENTRY Font
        {
            get
            {
                return _font;
            }
            set
            {
                _font = value;
            }
        }

        /// <summary>
        /// A new font directory entry.
        /// </summary>
        public FontDirectoryEntry()
        {
        }

        /// <summary>
        /// Read the font directory entry.
        /// </summary>
        /// <param name="lpRes">Pointer in memory.</param>
        /// <returns>Pointer to the end of the font directory entry.</returns>
        internal IntPtr Read(IntPtr lpRes)
        {
            IntPtr lpHead = lpRes;

            _fontOrdinal = (UInt16) Marshal.ReadInt16(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + 2);

            _font = (User32.FONTDIRENTRY)Marshal.PtrToStructure(
                lpRes, typeof(User32.FONTDIRENTRY));

            lpRes = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_font));

            _deviceName = Marshal.PtrToStringAnsi(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + _deviceName.Length + 1);

            _faceName = Marshal.PtrToStringAnsi(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + _faceName.Length + 1);

            return lpRes;
        }

        /// <summary>
        /// Write the font directory entry to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        public void Write(BinaryWriter w)
        {
            w.Write(_fontOrdinal);
            w.Write(ResourceUtil.GetBytes(_font));
            
            // device name
            if (string.IsNullOrEmpty(_deviceName))
            {
                w.Write((byte)0);
            }
            else
            {
                w.Write(Encoding.ASCII.GetBytes(_deviceName));
            }

            // face name
            if (string.IsNullOrEmpty(_faceName))
            {
                w.Write((byte)0);
            }
            else
            {
                w.Write(Encoding.ASCII.GetBytes(_faceName));
            }
        }
    }
}



================================================
File: ResourceLib/FontDirectoryResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A font directory, RT_FONTDIR resource.
    /// </summary>
    public class FontDirectoryResource : Resource
    {
        private List<FontDirectoryEntry> _fonts = new List<FontDirectoryEntry>();
        private byte[] _reserved = null;

        /// <summary>
        /// Number of fonts in this directory.
        /// </summary>
        public List<FontDirectoryEntry> Fonts
        {
            get
            {
                return _fonts;
            }
            set
            {
                _fonts = value;
            }
        }

        /// <summary>
        /// A new font resource.
        /// </summary>
        public FontDirectoryResource()
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_FONTDIR),
                null,
                ResourceUtil.NEUTRALLANGID,
                0)
        {

        }

        /// <summary>
        /// An existing font resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public FontDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// Read the font resource.
        /// </summary>
        /// <param name="hModule">Handle to a module.</param>
        /// <param name="lpRes">Pointer to the beginning of the font structure.</param>
        /// <returns>Address of the end of the font structure.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            IntPtr lpHead = lpRes;

            UInt16 count = (UInt16)Marshal.ReadInt16(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + 2);

            for (int i = 0; i < count; i++)
            {
                FontDirectoryEntry fontEntry = new FontDirectoryEntry();
                lpRes = fontEntry.Read(lpRes);
                _fonts.Add(fontEntry);
            }

            int reservedLen = _size - (lpRes.ToInt32() - lpHead.ToInt32() - 1);
            _reserved = new byte[reservedLen];
            Marshal.Copy(lpRes, _reserved, 0, reservedLen);

            return lpRes;
        }

        /// <summary>
        /// Write the font directory to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write((UInt16) _fonts.Count);
            foreach (FontDirectoryEntry fontEntry in _fonts)
            {
                fontEntry.Write(w);
            }
            w.Write(_reserved);
        }
    }
}



================================================
File: ResourceLib/FontResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A font, RT_FONT resource.
    /// </summary>
    public class FontResource : GenericResource
    {
        /// <summary>
        /// A new font resource.
        /// </summary>
        public FontResource()
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_FONT),
                null,
                ResourceUtil.NEUTRALLANGID,
                0)
        {

        }

        /// <summary>
        /// An existing font resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public FontResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// Read the font resource.
        /// </summary>
        /// <param name="hModule">Handle to a module.</param>
        /// <param name="lpRes">Pointer to the beginning of the font structure.</param>
        /// <returns>Address of the end of the font structure.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            return base.Read(hModule, lpRes);
        }

        /// <summary>
        /// Write the font resource to a binary writer.
        /// </summary>
        /// <param name="w">Binary writer.</param>
        internal override void Write(BinaryWriter w)
        {
            base.Write(w);
        }
    }
}



================================================
File: ResourceLib/Gdi32.cs
================================================
using System;
using System.Runtime.InteropServices;
using System.Drawing.Imaging;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Gdi32.dll interop functions.
    /// </summary>
    public abstract class Gdi32
    {
        /// <summary>
        /// Bitmap compression options.
        /// </summary>
        public enum BitmapCompression
        {
            /// <summary>
            /// An uncompressed format. 
            /// </summary>
            BI_RGB = 0,
            /// <summary>
            /// A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. For more information, see Bitmap Compression.
            /// </summary>
            BI_RLE8 = 1,
            /// <summary>
            /// An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two word-length color indexes. For more information, see Bitmap Compression.
            /// </summary>
            BI_RLE4 = 2,
            /// <summary>
            /// Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            /// </summary>
            BI_BITFIELDS = 3,
            /// <summary>
            /// Windows 98/Me, Windows 2000/XP: Indicates that the image is a JPEG image.
            /// </summary>
            BI_JPEG = 4,
            /// <summary>
            /// Windows 98/Me, Windows 2000/XP: Indicates that the image is a PNG image.
            /// </summary>
            BI_PNG = 5,
        }

        /// <summary>
        /// A bitmap info header.
        /// See http://msdn.microsoft.com/en-us/library/ms532290.aspx for more information.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct BITMAPINFOHEADER
        {
            /// <summary>
            /// Bitmap information size.
            /// </summary>
            public UInt32 biSize;
            /// <summary>
            /// Bitmap width.
            /// </summary>
            public Int32 biWidth;
            /// <summary>
            /// Bitmap height.
            /// </summary>
            public Int32 biHeight;
            /// <summary>
            /// Number of logical planes.
            /// </summary>
            public UInt16 biPlanes;
            /// <summary>
            /// Bitmap bitrate.
            /// </summary>
            public UInt16 biBitCount;
            /// <summary>
            /// Bitmap compression.
            /// </summary>
            public UInt32 biCompression;
            /// <summary>
            /// Image size.
            /// </summary>
            public UInt32 biSizeImage;
            /// <summary>
            /// Horizontal pixel resolution.
            /// </summary>
            public Int32 biXPelsPerMeter;
            /// <summary>
            /// Vertical pixel resolution.
            /// </summary>
            public Int32 biYPelsPerMeter;
            /// <summary>
            /// 
            /// </summary>
            public UInt32 biClrUsed;
            /// <summary>
            /// 
            /// </summary>
            public UInt32 biClrImportant;

            /// <summary>
            /// Returns the current bitmap compression.
            /// </summary>
            public BitmapCompression BitmapCompression
            {
                get
                {
                    return (BitmapCompression)biCompression;
                }
            }

            /// <summary>
            /// Bitmap pixel format.
            /// </summary>
            public PixelFormat PixelFormat
            {
                get
                {
                    switch (biBitCount)
                    {
                        case 1:
                            return PixelFormat.Format1bppIndexed;
                        case 4:
                            return PixelFormat.Format4bppIndexed;
                        case 8:
                            return PixelFormat.Format8bppIndexed;
                        case 16:
                            return PixelFormat.Format16bppRgb565;
                        case 24:
                            return PixelFormat.Format24bppRgb;
                        case 32:
                            return PixelFormat.Format32bppArgb;
                        default:
                            return PixelFormat.Undefined;
                    }
                }
            }

            /// <summary>
            /// Bitmap pixel format English standard string.
            /// </summary>
            public string PixelFormatString
            {
                get
                {
                    switch (PixelFormat)
                    {
                        case PixelFormat.Format1bppIndexed:
                            return "1-bit B/W";
                        case PixelFormat.Format24bppRgb:
                            return "24-bit True Colors";
                        case PixelFormat.Format32bppArgb:
                        case PixelFormat.Format32bppRgb:
                            return "32-bit Alpha Channel";
                        case PixelFormat.Format8bppIndexed:
                            return "8-bit 256 Colors";
                        case PixelFormat.Format4bppIndexed:
                            return "4-bit 16 Colors";
                    }
                    return "Unknown";
                }
            }
        }

        /// <summary>
        /// Defines the dimensions and color information of a Windows-based device-independent bitmap (DIB). 
        /// http://msdn.microsoft.com/en-us/library/dd183375(VS.85).aspx.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct BITMAPINFO
        {
            /// <summary>
            /// Specifies a bitmap information header structure that contains information about the dimensions of color format.
            /// </summary>
            public BITMAPINFOHEADER bmiHeader;
            /// <summary>
            /// An array of RGBQUAD. The elements of the array make up the color table.
            /// </summary>
            public RGBQUAD bmiColors;
        }

        /// <summary>
        /// Store colors in a paletised icon (2, 4 or 8 bit).
        /// http://msdn.microsoft.com/en-us/library/ms997538.aspx
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct RGBQUAD
        {
            /// <summary>
            /// Blue.
            /// </summary>
            public Byte rgbBlue;
            /// <summary>
            /// Green.
            /// </summary>
            public Byte rgbGreen;
            /// <summary>
            /// Red.
            /// </summary>
            public Byte rgbRed;
            /// <summary>
            /// Reserved.
            /// </summary>
            public Byte rgbReserved;
        }

        /// <summary>
        /// The BITMAPFILEHEADER structure contains information about the type, size, and layout of a file that contains a DIB.
        /// http://msdn.microsoft.com/en-us/library/dd183374(VS.85).aspx
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct BITMAPFILEHEADER
        {
            /// <summary>
            /// The file type; must be BM.
            /// </summary>
            public UInt16 bfType;
            /// <summary>
            /// The size, in bytes, of the bitmap file.
            /// </summary>
            public UInt32 bfSize;
            /// <summary>
            /// Reserved; must be zero.
            /// </summary>
            public UInt16 bfReserved1;
            /// <summary>
            /// Reserved; must be zero.
            /// </summary>
            public UInt16 bfReserved2;
            /// <summary>
            /// The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.
            /// </summary>
            public UInt32 bfOffBits;
        }

        /// <summary>
        /// Set the pixels in the specified rectangle on the device that is associated with the destination device 
        /// context using color data from a DIB, JPEG, or PNG image.
        /// http://msdn.microsoft.com/en-us/library/dd162974(VS.85).aspx
        /// </summary>
        /// <param name="hdc">A handle to the device context.</param>
        /// <param name="XDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
        /// <param name="YDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
        /// <param name="dwWidth">The width, in logical units, of the image.</param>
        /// <param name="dwHeight">The height, in logical units, of the image.</param>
        /// <param name="XSrc">The x-coordinate, in logical units, of the lower-left corner of the image.</param>
        /// <param name="YSrc">The y-coordinate, in logical units, of the lower-left corner of the image.</param>
        /// <param name="uStartScan">The starting scan line in the image.</param>
        /// <param name="cScanLines">The number of DIB scan lines contained in the array pointed to by the lpvBits parameter.</param>
        /// <param name="lpvBits">A pointer to the color data stored as an array of bytes.</param>
        /// <param name="lpbmi">A pointer to a BITMAPINFOHEADER structure that contains information about the DIB.</param>
        /// <param name="fuColorUse">Indicates whether the bmiColors member of the BITMAPINFOHEADER structure contains explicit red, green, blue (RGB) values or indexes into a palette.</param>
        /// <returns>
        /// If the function succeeds, the return value is the number of scan lines set.
        /// If zero scan lines are set (such as when dwHeight is 0) or the function fails, the function returns zero.
        /// If the driver cannot support the JPEG or PNG file image passed to SetDIBitsToDevice, the function will fail and return GDI_ERROR. 
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern int SetDIBitsToDevice(IntPtr hdc, Int32 XDest, Int32 YDest, UInt32 dwWidth, UInt32 dwHeight,
            Int32 XSrc, Int32 YSrc, UInt32 uStartScan, UInt32 cScanLines, byte[] lpvBits, [In] ref BITMAPINFO lpbmi, UInt32 fuColorUse);

        /// <summary>
        /// Set the pixels in the specified rectangle on the device that is associated with the destination device 
        /// context using color data from a DIB, JPEG, or PNG image.
        /// http://msdn.microsoft.com/en-us/library/dd162974(VS.85).aspx
        /// </summary>
        /// <param name="hdc">A handle to the device context.</param>
        /// <param name="XDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
        /// <param name="YDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
        /// <param name="dwWidth">The width, in logical units, of the image.</param>
        /// <param name="dwHeight">The height, in logical units, of the image.</param>
        /// <param name="XSrc">The x-coordinate, in logical units, of the lower-left corner of the image.</param>
        /// <param name="YSrc">The y-coordinate, in logical units, of the lower-left corner of the image.</param>
        /// <param name="uStartScan">The starting scan line in the image.</param>
        /// <param name="cScanLines">The number of DIB scan lines contained in the array pointed to by the lpvBits parameter.</param>
        /// <param name="lpvBits">A pointer to the color data stored as an array of bytes.</param>
        /// <param name="lpbmi">A pointer to a BITMAPINFOHEADER structure that contains information about the DIB.</param>
        /// <param name="fuColorUse">Indicates whether the bmiColors member of the BITMAPINFOHEADER structure contains explicit red, green, blue (RGB) values or indexes into a palette.</param>
        /// <returns>
        /// If the function succeeds, the return value is the number of scan lines set.
        /// If zero scan lines are set (such as when dwHeight is 0) or the function fails, the function returns zero.
        /// If the driver cannot support the JPEG or PNG file image passed to SetDIBitsToDevice, the function will fail and return GDI_ERROR. 
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern int SetDIBitsToDevice(IntPtr hdc, Int32 XDest, Int32 YDest, UInt32 dwWidth, UInt32 dwHeight,
            Int32 XSrc, Int32 YSrc, UInt32 uStartScan, UInt32 cScanLines, IntPtr lpvBits, IntPtr lpbmi, UInt32 fuColorUse);

        /// <summary>
        /// Retrieves the bits of the specified compatible bitmap and copies them into a buffer as 
        /// a DIB using the specified format
        /// </summary>
        /// <param name="hdc">A handle to the device context.</param>
        /// <param name="hbmp">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
        /// <param name="uStartScan">The first scan line to retrieve.</param>
        /// <param name="cScanLines">The number of scan lines to retrieve.</param>
        /// <param name="lpvBits">A pointer to a buffer to receive the bitmap data.</param>
        /// <param name="lpbmi">A pointer to a BITMAPINFO structure that specifies the desired format for the DIB data.</param>
        /// <param name="uUsage">The format of the bmiColors member of the BITMAPINFO structure.</param>
        /// <returns>
        /// If the lpvBits parameter is non-NULL and the function succeeds, the return value is the number of scan lines copied from the bitmap.
        /// If the lpvBits parameter is NULL and GetDIBits successfully fills the BITMAPINFO structure, the return value is non-zero.
        /// If the function fails, the return value is zero.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern int GetDIBits(IntPtr hdc, IntPtr hbmp, uint uStartScan, uint cScanLines,
            [Out] byte[] lpvBits, [In] ref BITMAPINFO lpbmi, uint uUsage);

        /// <summary>
        /// Create a DIB that applications can write to directly. The function gives you a pointer to the location 
        /// of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use 
        /// to create the bitmap, or you can let the system allocate the memory for the bitmap.
        /// </summary>
        /// <param name="hdc">Handle to a device context.</param>
        /// <param name="pbmi">A pointer to a BITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.</param>
        /// <param name="iUsage">The type of data contained in the bmiColors array member of the BITMAPINFO structure pointed to by pbmi (either logical palette indexes or literal RGB values).</param>
        /// <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
        /// <param name="hSection">A handle to a file-mapping object that the function will use to create the DIB. This parameter can be NULL.</param>
        /// <param name="dwOffset">The offset from the beginning of the file-mapping object referenced by hSection where storage for the bitmap bit values is to begin.</param>
        /// <returns>
        /// If the function succeeds, the return value is a handle to the newly created DIB, and *ppvBits points to the bitmap bit values.
        /// If the function fails, the return value is NULL, and *ppvBits is NULL.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern IntPtr CreateDIBSection(IntPtr hdc, [In] ref BITMAPINFO pbmi,
            uint iUsage, out IntPtr ppvBits, IntPtr hSection, uint dwOffset);

        /// <summary>
        /// Defines how to interpret the values in the color table of a DIB.
        /// </summary>
        internal enum DIBColors
        {
            /// <summary>
            /// The color table contains literal RGB values.
            /// </summary>
            DIB_RGB_COLORS = 0,
            /// <summary>
            /// The color table consists of an array of 16-bit indexes into the LogPalette 
            /// object that is currently defined in the playback device context.
            /// </summary>
            DIB_PAL_COLORS = 1,
            /// <summary>
            /// No color table exists. The pixels in the DIB are indices into the current logical 
            /// palette in the playback device context.
            /// </summary>
            DIB_PAL_INDICES = 2,
            /// <summary>
            /// 
            /// </summary>
            DIB_PAL_LOGINDICES = 4
        }

        /// <summary>
        /// Creates a memory device context (DC) compatible with the specified device.
        /// </summary>
        /// <param name="hdc">Handle to an existing device context.</param>
        /// <returns>
        /// The handle to a memory device context indicates success.
        /// NULL indicates failure.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern IntPtr CreateCompatibleDC(IntPtr hdc);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lpDriverName">Specifies either DISPLAY or the name of a specific display device or the name of a print provider, which is usually WINSPOOL.</param>
        /// <param name="lpDeviceName">Specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80).</param>
        /// <param name="lpOutput">This parameter is ignored and should be set to NULL. It is provided only for compatibility with 16-bit Windows.</param>
        /// <param name="lpInitData">A pointer to a DEVMODE structure containing device-specific initialization data for the device driver.</param>
        /// <returns></returns>
        [DllImport("gdi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        internal static extern IntPtr CreateDC(string lpDriverName, string lpDeviceName, string lpOutput, IntPtr lpInitData);

        /// <summary>
        /// Creates a bitmap compatible with the device that is associated with the specified device context.
        /// </summary>
        /// <param name="hdc">A handle to a device context.</param>
        /// <param name="nWidth">The bitmap width, in pixels.</param>
        /// <param name="nHeight">The bitmap height, in pixels.</param>
        /// <returns>
        /// If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
        /// If the function fails, the return value is NULL.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, Int32 nWidth, Int32 nHeight);

        /// <summary>
        /// Selects an object into a specified device context. The new object replaces the previous object of the same type. 
        /// </summary>
        /// <param name="hdc">Handle to the device context.</param>
        /// <param name="hgdiobj">Handle to the object to be selected.</param>
        /// <returns>
        /// If the selected object is not a region, the handle of the object being replaced indicates success. 
        /// If the selected object is a region, one of the following values indicates success. 
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

        /// <summary>
        /// Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. 
        /// </summary>
        /// <param name="hObject">Handle to a logical pen, brush, font, bitmap, region, or palette.</param>
        /// <returns>
        /// Nonzero indicates success. 
        /// Zero indicates that the specified handle is not valid or that the handle is currently selected into a device context.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern int DeleteObject(IntPtr hObject);

        /// <summary>
        /// Deletes the specified device context.
        /// </summary>
        /// <param name="hdc">A handle to the device context.</param>
        /// <returns>
        /// If the function succeeds, the return value is nonzero.
        /// If the function fails, the return value is zero.
        /// </returns>
        [DllImport("gdi32.dll", SetLastError = true)]
        internal static extern int DeleteDC(IntPtr hdc);
    }
}



================================================
File: ResourceLib/GenericResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A generic resource.
    /// </summary>
    public class GenericResource : Resource
    {
        /// <summary>
        /// Raw resource data.
        /// </summary>
        protected byte[] _data = null;

        /// <summary>
        /// Raw resource data.
        /// </summary>
        public byte[] Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }

        /// <summary>
        /// An unstructured generic resource embedded in an executable module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource handle.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language id.</param>
        /// <param name="size">Resource size.</param>
        public GenericResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A generic resource.
        /// </summary>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="language">Resource language.</param>
        public GenericResource(ResourceId type, ResourceId name, UInt16 language)
        {
            _type = type;
            _name = name;
            _language = language;
        }

        /// <summary>
        /// Read a generic resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of a resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            if (_size > 0)
            {
                _data = new byte[_size];
                Marshal.Copy(lpRes, _data, 0, _data.Length);
            }

            return new IntPtr(lpRes.ToInt64() + _size);
        }

        /// <summary>
        /// Write the resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_data);
        }
    }
}



================================================
File: ResourceLib/IconDirectoryResource.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a hardware-independent icon resource.
    /// </summary>
    public class IconDirectoryResource : DirectoryResource<IconResource>
    {
        /// <summary>
        /// A hardware-independent icon resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal IconDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {
            
        }

        /// <summary>
        /// A new hardware-independent icon resource.
        /// </summary>
        public IconDirectoryResource()
            : base(Kernel32.ResourceTypes.RT_GROUP_ICON)
        {

        }

        /// <summary>
        /// A new collection of icons that can be embedded into an executable file.
        /// </summary>
        public IconDirectoryResource(IconFile iconFile)
            : base(Kernel32.ResourceTypes.RT_GROUP_ICON)
        {            
            for (UInt16 id = 0; id < iconFile.Icons.Count; id++)
            {
                IconResource iconResource = new IconResource(
                    iconFile.Icons[id], new ResourceId(id), _language);
                Icons.Add(iconResource);
            }
        }
    }
}



================================================
File: ResourceLib/IconFile.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a .ico file.
    /// </summary>
    public class IconFile
    {
        /// <summary>
        /// Resource type.
        /// </summary>
        public enum GroupType
        {
            /// <summary>
            /// Icon.
            /// </summary>
            Icon = 1,
            /// <summary>
            /// Cursor.
            /// </summary>
            Cursor = 2
        }

        Kernel32.FILEGRPICONDIR _header = new Kernel32.FILEGRPICONDIR();
        List<IconFileIcon> _icons = new List<IconFileIcon>();

        /// <summary>
        /// Type of the group icon resource.
        /// </summary>
        public GroupType Type
        {
            get
            {
                return (GroupType)_header.wType;
            }
            set
            {
                _header.wType = (byte)value;
            }
        }

        /// <summary>
        /// Collection of icons in an .ico file.
        /// </summary>
        public List<IconFileIcon> Icons
        {
            get
            {
                return _icons;
            }
            set
            {
                _icons = value;
            }
        }

        /// <summary>
        /// An existing .ico file.
        /// </summary>
        /// <param name="filename">An existing icon (.ico) file.</param>
        public IconFile(string filename)
        {
            LoadFrom(filename);
        }

        /// <summary>
        /// Load from a .ico file.
        /// </summary>
        /// <param name="filename">An existing icon (.ico) file.</param>
        public void LoadFrom(string filename)
        {
            byte[] data = File.ReadAllBytes(filename);

            IntPtr lpData = Marshal.AllocHGlobal(data.Length);
            try
            {
                Marshal.Copy(data, 0, lpData, data.Length);
                Read(lpData);
            }
            finally
            {
                Marshal.FreeHGlobal(lpData);
            }
        }

        /// <summary>
        /// Read icons.
        /// </summary>
        /// <param name="lpData">Pointer to the beginning of a FILEGRPICONDIR structure.</param>
        /// <returns>Pointer to the end of a FILEGRPICONDIR structure.</returns>
        internal IntPtr Read(IntPtr lpData)
        {
            _icons.Clear();

            _header = (Kernel32.FILEGRPICONDIR)Marshal.PtrToStructure(
                lpData, typeof(Kernel32.FILEGRPICONDIR));

            IntPtr lpEntry = new IntPtr(lpData.ToInt64() + Marshal.SizeOf(_header));

            for (int i = 0; i < _header.wCount; i++)
            {
                IconFileIcon iconFileIcon = new IconFileIcon();
                lpEntry = iconFileIcon.Read(lpEntry, lpData);
                _icons.Add(iconFileIcon);
            }

            return lpEntry;
        }
    }
}



================================================
File: ResourceLib/IconFileIcon.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;
using System.Drawing.Imaging;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of icon data in a .ico file.
    /// </summary>
    public class IconFileIcon 
    {
        private Kernel32.FILEGRPICONDIRENTRY _header;
        private DeviceIndependentBitmap _image = new DeviceIndependentBitmap();

        /// <summary>
        /// Icon header.
        /// </summary>
        public Kernel32.FILEGRPICONDIRENTRY Header
        {
            get
            {
                return _header;
            }
        }

        /// <summary>
        /// Icon bitmap.
        /// </summary>
        public DeviceIndependentBitmap Image
        {
            get
            {
                return _image;
            }
            set
            {
                _image = value;
            }
        }

        /// <summary>
        /// New icon data.
        /// </summary>
        public IconFileIcon()
        {

        }

        /// <summary>
        /// Icon width.
        /// </summary>
        public Byte Width
        {
            get
            {
                return _header.bWidth;
            }
        }

        /// <summary>
        /// Icon height.
        /// </summary>
        public Byte Height
        {
            get
            {
                return _header.bHeight;
            }
        }

        /// <summary>
        /// Image size in bytes.
        /// </summary>
        public UInt32 ImageSize
        {
            get
            {
                return _header.dwImageSize;
            }
        }

        /// <summary>
        /// Read a single icon (.ico).
        /// </summary>
        /// <param name="lpData">Pointer to the beginning of this icon's data.</param>
        /// <param name="lpAllData">Pointer to the beginning of all icon data.</param>
        /// <returns>Pointer to the end of this icon's data.</returns>
        internal IntPtr Read(IntPtr lpData, IntPtr lpAllData)
        {
            _header = (Kernel32.FILEGRPICONDIRENTRY)Marshal.PtrToStructure(
                lpData, typeof(Kernel32.FILEGRPICONDIRENTRY));

            IntPtr lpImage = new IntPtr(lpAllData.ToInt64() + _header.dwFileOffset);
            _image.Read(lpImage, _header.dwImageSize);

            return new IntPtr(lpData.ToInt64() + Marshal.SizeOf(_header));
        }

        /// <summary>
        /// Icon size as a string.
        /// </summary>
        /// <returns>Icon size in the width x height format.</returns>
        public override string ToString()
        {
            return string.Format("{0}x{1}", Width, Height);
        }
    }
}



================================================
File: ResourceLib/IconImageResource.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;
using System.Drawing.Imaging;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in an icon resource.
    /// </summary>
    public class IconImageResource : Resource
    {
        /// <summary>
        /// Directory header.
        /// </summary>
        protected Kernel32.GRPICONDIRENTRY _header;

        /// <summary>
        /// Actual image.
        /// </summary>
        protected DeviceIndependentBitmap _image = new DeviceIndependentBitmap();

        /// <summary>
        /// Hardware-independent icon directory header.
        /// </summary>
        public Kernel32.GRPICONDIRENTRY Header
        {
            get
            {
                return _header;
            }
            set
            {
                _header = value;
            }
        }

        /// <summary>
        /// Embedded icon Id.
        /// </summary>
        public ushort Id
        {
            get
            {
                return _header.nID;
            }
            set
            {
                _header.nID = value;
            }
        }

        /// <summary>
        /// An icon image.
        /// </summary>
        public DeviceIndependentBitmap Image
        {
            get
            {
                return _image;
            }
            set
            {
                _image = value;
            }
        }

        /// <summary>
        /// An existing icon resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal IconImageResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new icon resource.
        /// </summary>
        public IconImageResource(ResourceId type)
            : base(IntPtr.Zero,
                IntPtr.Zero,
                type,
                new ResourceId(IntPtr.Zero),
                ResourceUtil.NEUTRALLANGID, 
                Marshal.SizeOf(typeof(Kernel32.GRPICONDIRENTRY)))
        {

        }

        /// <summary>
        /// Create a new icon image resource from a file icon.
        /// </summary>
        /// <param name="icon">File icon.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource id.</param>
        /// <param name="language">Resource language.</param>
        public IconImageResource(IconFileIcon icon, ResourceId type, ResourceId name, UInt16 language)
        {
            _name = name;
            _type = type;
            _language = language;
            _header.bColors = icon.Header.bColors;
            _header.bHeight = icon.Header.bHeight;
            _header.bReserved = icon.Header.bReserved;
            _header.bWidth = icon.Header.bWidth;
            _header.dwImageSize = icon.Header.dwImageSize;
            _header.wBitsPerPixel = icon.Header.wBitsPerPixel;
            _header.wPlanes = icon.Header.wPlanes;
            _header.nID = (UInt16) name.Id;
            _image = new DeviceIndependentBitmap(icon.Image);
        }

        /// <summary>
        /// Icon width in pixels.
        /// </summary>
        public Byte Width
        {
            get
            {
                return _header.bWidth;
            }
            set
            {
                _header.bWidth = value;
            }
        }

        /// <summary>
        /// Icon height in pixels.
        /// </summary>
        public Byte Height
        {
            get
            {
                return _header.bHeight;
            }
            set
            {
                _header.bHeight = value;
            }
        }

        /// <summary>
        /// Image size in bytes.
        /// </summary>
        public UInt32 ImageSize
        {
            get
            {
                return _header.dwImageSize;
            }
            set
            {
                _header.dwImageSize = value;
            }
        }

        /// <summary>
        /// Read an icon resource from a previously loaded module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to a directory entry in the hardware-independent icon resource.</param>
        /// <returns>Pointer to the end of the icon resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            _header = (Kernel32.GRPICONDIRENTRY)Marshal.PtrToStructure(
                lpRes, typeof(Kernel32.GRPICONDIRENTRY));

            IntPtr hIconInfo = Kernel32.FindResourceEx(
                hModule, _type.Id, (IntPtr) _header.nID, _language);

            if (hIconInfo == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr hIconRes = Kernel32.LoadResource(hModule, hIconInfo);
            if (hIconRes == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr dibBits = Kernel32.LockResource(hIconRes);
            if (dibBits == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            ReadImage(dibBits, (UInt32) Kernel32.SizeofResource(hModule, hIconInfo));

            return new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));
        }

        /// <summary>
        /// Read the bitmap image.
        /// </summary>
        /// <param name="dibBits">DIB bits.</param>
        /// <param name="size">Size of image.</param>
        internal virtual void ReadImage(IntPtr dibBits, UInt32 size)
        {
            _image.Read(dibBits, size);
        }

        /// <summary>
        /// Icon pixel format.
        /// </summary>
        public PixelFormat PixelFormat
        {
            get
            {
                switch (_header.wBitsPerPixel)
                {
                    case 1:
                        return PixelFormat.Format1bppIndexed;
                    case 4:
                        return PixelFormat.Format4bppIndexed;
                    case 8:
                        return PixelFormat.Format8bppIndexed;
                    case 16:
                        return PixelFormat.Format16bppRgb565;
                    case 24: // not actually supported in icons
                        return PixelFormat.Format24bppRgb;
                    case 32: // 0RGB 32bpp bitmap or ARGB (alpha-blended)
                        return PixelFormat.Format32bppArgb;
                    default:
                        return PixelFormat.Undefined;
                }
            }
        }

        /// <summary>
        /// Icon pixel format English standard string.
        /// </summary>
        public string PixelFormatString
        {
            get
            {
                switch (PixelFormat)
                {
                    case PixelFormat.Format1bppIndexed:
                        return "1-bit B/W";
                    case PixelFormat.Format24bppRgb:
                        return "24-bit True Colors";
                    case PixelFormat.Format32bppArgb:
                    case PixelFormat.Format32bppRgb:
                        return "32-bit Alpha Channel";
                    case PixelFormat.Format8bppIndexed:
                        return "8-bit 256 Colors";
                    case PixelFormat.Format4bppIndexed:
                        return "4-bit 16 Colors";
                }
                return "Unknown";
            }
        }

        /// <summary>
        /// String representation of the icon.
        /// </summary>
        /// <returns>A string in a format of width x height followed by the pixel format.</returns>
        public override string ToString()
        {
            return string.Format("{0}x{1} {2}",
                Width, Height, PixelFormatString);
        }

        /// <summary>
        /// Write icon resource data to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_header.bWidth);
            w.Write(_header.bHeight);
            w.Write(_header.bColors);
            w.Write(_header.bReserved);
            w.Write(_header.wPlanes);
            w.Write(_header.wBitsPerPixel);
            w.Write(_header.dwImageSize);
            w.Write(_header.nID);
            ResourceUtil.PadToWORD(w);
        }

        /// <summary>
        /// Save icon to a file.
        /// </summary>
        /// <param name="filename">Target executable file.</param>
        public virtual void SaveIconTo(string filename)
        {
            SaveTo(filename,
                _type,
                new ResourceId(_header.nID), 
                _language,
                _image.Data);
        }
    }
}



================================================
File: ResourceLib/IconResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in an icon resource.
    /// </summary>
    public class IconResource : IconImageResource
    {
        /// <summary>
        /// An existing icon resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal IconResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new icon resource.
        /// </summary>
        public IconResource()
            : base(new ResourceId(Kernel32.ResourceTypes.RT_ICON))
        {

        }

        /// <summary>
        /// Convert into an icon resource that can be written into an executable.
        /// </summary>
        /// <param name="icon">Icon image.</param>
        /// <param name="id">Icon Id.</param>
        /// <param name="language">Resource language.</param>
        /// <returns>An icon resource.</returns>
        public IconResource(IconFileIcon icon, ResourceId id, UInt16 language)
            : base(icon, new ResourceId(Kernel32.ResourceTypes.RT_ICON), id, language)
        {

        }
    }
}



================================================
File: ResourceLib/Kernel32.cs
================================================
using System;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Kernel32.dll interop functions.
    /// </summary>
    public abstract class Kernel32
    {
        /// <summary>
        /// A resource header.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct RESOURCE_HEADER
        {
            /// <summary>
            /// Header length.
            /// </summary>
            public UInt16 wLength;
            /// <summary>
            /// Data length.
            /// </summary>
            public UInt16 wValueLength;
            /// <summary>
            /// Resource type.
            /// </summary>
            public UInt16 wType;

            /// <summary>
            /// A new resource header of a given length.
            /// </summary>
            /// <param name="valueLength"></param>
            public RESOURCE_HEADER(UInt16 valueLength)
            {
                wLength = 0;
                wValueLength = valueLength;
                wType = 0;
            }
        }

        /// <summary>
        /// Resource header type.
        /// </summary>
        public enum RESOURCE_HEADER_TYPE
        {
            /// <summary>
            /// Binary data.
            /// </summary>
            BinaryData = 0,
            /// <summary>
            /// String data.
            /// </summary>
            StringData = 1
        }

        /// <summary>
        /// Language and code page combinations.
        /// The low-order word of each DWORD must contain a Microsoft language identifier, 
        /// and the high-order word must contain the IBM code page number. 
        /// Either high-order or low-order word can be zero, indicating that the file is language 
        /// or code page independent.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct VAR_HEADER
        {
            /// <summary>
            /// Microsoft language identifier.
            /// </summary>
            public UInt16 wLanguageIDMS;
            /// <summary>
            /// IBM code page number.
            /// </summary>
            public UInt16 wCodePageIBM;
        }

        /// <summary>
        /// This structure contains version information about a file. 
        /// This information is language- and code page–independent.
        /// http://msdn.microsoft.com/en-us/library/ms647001.aspx
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct VS_FIXEDFILEINFO
        {
            /// <summary>
            /// Contains the value 0xFEEF04BD. This is used with the szKey member of the VS_VERSIONINFO structure when searching a file for the VS_FIXEDFILEINFO structure. 
            /// </summary>
            public UInt32 dwSignature;
            /// <summary>
            /// Specifies the binary version number of this structure. The high-order word of this member contains the major version number, and the low-order word contains the minor version number.
            /// </summary>
            public UInt32 dwStrucVersion;
            /// <summary>
            /// Specifies the most significant 32 bits of the file's binary version number. This member is used with dwFileVersionLS to form a 64-bit value used for numeric comparisons.
            /// </summary>
            public UInt32 dwFileVersionMS;
            /// <summary>
            /// Specifies the least significant 32 bits of the file's binary version number. This member is used with dwFileVersionMS to form a 64-bit value used for numeric comparisons.
            /// </summary>
            public UInt32 dwFileVersionLS;
            /// <summary>
            /// Specifies the most significant 32 bits of the binary version number of the product with which this file was distributed. This member is used with dwProductVersionLS to form a 64-bit value used for numeric comparisons.
            /// </summary>
            public UInt32 dwProductVersionMS;
            /// <summary>
            /// Specifies the least significant 32 bits of the binary version number of the product with which this file was distributed. This member is used with dwProductVersionMS to form a 64-bit value used for numeric comparisons.
            /// </summary>
            public UInt32 dwProductVersionLS;
            /// <summary>
            /// Contains a bitmask that specifies the valid bits in dwFileFlags. A bit is valid only if it was defined when the file was created. 
            /// </summary>
            public UInt32 dwFileFlagsMask;
            /// <summary>
            /// Contains a bitmask that specifies the Boolean attributes of the file.
            /// </summary>
            public UInt32 dwFileFlags;
            /// <summary>
            /// Specifies the operating system for which this file was designed.
            /// </summary>
            public UInt32 dwFileOS;
            /// <summary>
            /// Specifies the general type of file. 
            /// </summary>
            public UInt32 dwFileType;
            /// <summary>
            /// Specifies the function of the file.
            /// </summary>
            public UInt32 dwFileSubtype;
            /// <summary>
            /// Specifies the most significant 32 bits of the file's 64-bit binary creation date and time stamp.
            /// </summary>
            public UInt32 dwFileDateMS;
            /// <summary>
            /// Specifies the least significant 32 bits of the file's 64-bit binary creation date and time stamp.
            /// </summary>
            public UInt32 dwFileDateLS;

            /// <summary>
            /// Creates a default Windows VS_FIXEDFILEINFO structure.
            /// </summary>
            /// <returns>A default Windows VS_FIXEDFILEINFO.</returns>
            public static VS_FIXEDFILEINFO GetWindowsDefault()
            {
                VS_FIXEDFILEINFO fixedFileInfo = new VS_FIXEDFILEINFO();
                fixedFileInfo.dwSignature = Winver.VS_FFI_SIGNATURE;
                fixedFileInfo.dwStrucVersion = Winver.VS_FFI_STRUCVERSION;
                fixedFileInfo.dwFileFlagsMask = Winver.VS_FFI_FILEFLAGSMASK;
                fixedFileInfo.dwFileOS = (uint) Winver.FileOs.VOS__WINDOWS32;
                fixedFileInfo.dwFileSubtype = (uint) Winver.FileSubType.VFT2_UNKNOWN;
                fixedFileInfo.dwFileType = (uint) Winver.FileType.VFT_DLL;
                return fixedFileInfo;
            }
        }

        /// <summary>
        /// A hardware-independent icon directory resource header.
        /// http://msdn.microsoft.com/en-us/library/ms997538.aspx
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct GRPICONDIR
        {
            /// <summary>
            /// Reserved, must be zero.
            /// </summary>
            public UInt16 wReserved;
            /// <summary>
            /// Resource type, 1 for icons.
            /// </summary>
            public UInt16 wType;
            /// <summary>
            /// Number of images.
            /// </summary>
            public UInt16 wImageCount;
        }

        /// <summary>
        /// Hardware-independent icon directory entry.
        /// See http://msdn.microsoft.com/en-us/library/ms997538.aspx for more information.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct GRPICONDIRENTRY
        {
            /// <summary>
            /// Width of the image. Starting with Windows 95 a value of 0 represents width of 256.
            /// </summary>
            public Byte bWidth;
            /// <summary>
            /// Height of the image. Starting with Windows 95 a value of 0 represents height of 256.
            /// </summary>
            public Byte bHeight;
            /// <summary>
            /// Number of colors in the image. 
            /// bColors = 1 &lt;&lt; (wBitsPerPixel * wPlanes)
            /// If wBitsPerPixel* wPlanes is greater orequal to 8, then bColors = 0.
            /// </summary>
            public Byte bColors;
            /// <summary>
            /// Reserved.
            /// </summary>
            public Byte bReserved;
            /// <summary>
            /// Number of bitmap planes.
            /// 1: monochrome bitmap
            /// </summary>
            public UInt16 wPlanes;
            /// <summary>
            /// Bits per pixel.
            /// 1: monochrome bitmap
            /// </summary>
            public UInt16 wBitsPerPixel;
            /// <summary>
            /// Image size in bytes.
            /// </summary>
            public UInt32 dwImageSize;
            /// <summary>
            /// Icon ID.
            /// </summary>
            public UInt16 nID;
        }

        /// <summary>
        /// Hardware-independent icon directory entry in an .ico file.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct FILEGRPICONDIRENTRY
        {
            /// <summary>
            /// Icon width.
            /// </summary>
            public Byte bWidth;
            /// <summary>
            /// Icon height.
            /// </summary>
            public Byte bHeight;
            /// <summary>
            /// Colors; 0 means 256 or more.
            /// </summary>
            public Byte bColors;
            /// <summary>
            /// Reserved.
            /// </summary>
            public Byte bReserved;
            /// <summary>
            /// Number of bitmap planes for icons.
            /// Horizontal hotspot for cursors.
            /// </summary>
            public UInt16 wPlanes;
            /// <summary>
            /// Bits per pixel for icons.
            /// Vertical hostpot for cursors.
            /// </summary>
            public UInt16 wBitsPerPixel;
            /// <summary>
            /// Image size in bytes.
            /// </summary>
            public UInt32 dwImageSize;
            /// <summary>
            /// Offset of bitmap data from the beginning of the file.
            /// </summary>
            public UInt32 dwFileOffset;
        }

        /// <summary>
        /// Hardware-independent icon structure in an .ico file.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct FILEGRPICONDIR
        {
            /// <summary>
            /// Reserved, must be zero.
            /// </summary>
            public UInt16 wReserved;
            /// <summary>
            /// Resource Type (1 for icons).
            /// </summary>
            public UInt16 wType;
            /// <summary>
            /// Number of images.
            /// </summary>
            public UInt16 wCount;
        }

        /// <summary>
        /// If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file.
        /// </summary>
        internal const uint LOAD_LIBRARY_AS_DATAFILE = 0x00000002;
        /// <summary>
        /// If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination.
        /// </summary>
        internal const uint DONT_RESOLVE_DLL_REFERENCES = 0x00000001;
        /// <summary>
        /// If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy.
        /// </summary>
        internal const uint LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008;
        /// <summary>
        /// If this value is used, the system does not perform automatic trust comparisons on the DLL or its dependents when they are loaded.
        /// </summary>
        internal const uint LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x00000010;

        /// <summary>
        /// Loads the specified module into the address space of the calling process. 
        /// The specified module may cause other modules to be loaded.
        /// </summary>
        /// <param name="lpFileName">The name of the module.</param>
        /// <param name="hFile">This parameter is reserved for future use.</param>
        /// <param name="dwFlags">The action to be taken when loading the module.</param>
        /// <returns></returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, uint dwFlags);

        /// <summary>
        /// Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
        /// </summary>
        /// <param name="hModule">A handle to the loaded library module.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern bool FreeLibrary(IntPtr hModule);

        /// <summary>
        /// Predefined resource types.
        /// </summary>
        public enum ResourceTypes
        {
            /// <summary>
            /// Hardware-dependent cursor resource.
            /// </summary>
            //RT_CURSOR = 1,
            /// <summary>
            /// Bitmap resource.
            /// </summary>
            RT_BITMAP = 2,
            /// <summary>
            /// Hardware-dependent icon resource.
            /// </summary>
            RT_ICON = 3,
            /// <summary>
            /// Menu resource.
            /// </summary>
            //RT_MENU = 4,
            /// <summary>
            /// Dialog box.
            /// </summary>
            //RT_DIALOG = 5,
            /// <summary>
            /// String-table entry.
            /// </summary>
            RT_STRING = 6,
            /// <summary>
            /// Font directory resource.
            /// </summary>
            //RT_FONTDIR = 7,
            /// <summary>
            /// Font resource.
            /// </summary>
            //RT_FONT = 8,
            /// <summary>
            /// Accelerator table.
            /// </summary>
            //RT_ACCELERATOR = 9,
            /// <summary>
            /// Application-defined resource (raw data).
            /// </summary>
            RT_RCDATA = 10,
            /// <summary>
            /// Message-table entry.
            /// </summary>
            //RT_MESSAGETABLE = 11,
            /// <summary>
            /// Hardware-independent cursor resource.
            /// </summary>
            //RT_GROUP_CURSOR = 12,
            /// <summary>
            /// Hardware-independent icon resource.
            /// </summary>
            RT_GROUP_ICON = 14,
            /// <summary>
            /// Version resource.
            /// </summary>
            RT_VERSION = 16,
            /// <summary>
            /// Allows a resource editing tool to associate a string with an .rc file.
            /// </summary>
            //RT_DLGINCLUDE = 17,
            /// <summary>
            /// Plug and Play resource.
            /// </summary>
            //RT_PLUGPLAY = 19,
            /// <summary>
            /// VXD.
            /// </summary>
            //RT_VXD = 20,
            /// <summary>
            /// Animated cursor.
            /// </summary>
            //RT_ANICURSOR = 21,
            /// <summary>
            /// Animated icon.
            /// </summary>
            //RT_ANIICON = 22,
            /// <summary>
            /// HTML.
            /// </summary>
            RT_HTML = 23,
            /// <summary>
            /// Microsoft Windows XP: Side-by-Side Assembly XML Manifest.
            /// </summary>
            RT_MANIFEST = 24,
        }

        /// <summary>
        /// Enumerates resource types within a binary module.
        /// </summary>
        /// <param name="hModule">Handle to a module to search.</param>
        /// <param name="lpEnumFunc">Pointer to the callback function to be called for each enumerated resource type.</param>
        /// <param name="lParam">Specifies an application-defined value passed to the callback function.</param>
        /// <returns>Returns TRUE if successful; otherwise, FALSE.</returns>
        [DllImport("kernel32.dll", EntryPoint = "EnumResourceTypesW", CharSet = CharSet.Unicode, SetLastError = true)]
        internal static extern bool EnumResourceTypes(IntPtr hModule, EnumResourceTypesDelegate lpEnumFunc, IntPtr lParam);

        /// <summary>
        /// An application-defined callback function used with the EnumResourceTypes and EnumResourceTypesEx functions.
        /// </summary>
        /// <param name="hModule">The handle to the module whose executable file contains the resources for which the types are to be enumerated.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type name of the resource for which the type is being enumerated.</param>
        /// <param name="lParam">Specifies the application-defined parameter passed to the EnumResourceTypes or EnumResourceTypesEx function. </param>
        /// <returns>Returns TRUE if successful; otherwise, FALSE.</returns>
        internal delegate bool EnumResourceTypesDelegate(IntPtr hModule, IntPtr lpszType, IntPtr lParam);

        /// <summary>
        /// Enumerates resources of a specified type within a binary module. 
        /// </summary>
        /// <param name="hModule">Handle to a module to search.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type of the resource for which the name is being enumerated.</param>
        /// <param name="lpEnumFunc">Pointer to the callback function to be called for each enumerated resource name or ID.</param>
        /// <param name="lParam">Specifies an application-defined value passed to the callback function.</param>
        /// <returns>Returns TRUE if the function succeeds or FALSE if the function does not find a resource of the type specified, or if the function fails for another reason.</returns>
        [DllImport("kernel32.dll", EntryPoint = "EnumResourceNamesW", CharSet = CharSet.Unicode, SetLastError = true)]
        internal static extern bool EnumResourceNames(IntPtr hModule, IntPtr lpszType, EnumResourceNamesDelegate lpEnumFunc, IntPtr lParam);

        /// <summary>
        /// An application-defined callback function used with the EnumResourceNames and EnumResourceNamesEx functions.
        /// </summary>
        /// <param name="hModule">The handle to the module whose executable file contains the resources that are being enumerated.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type of resource that is being enumerated.</param>
        /// <param name="lpszName">Specifies the name of a resource of the type being enumerated.</param>
        /// <param name="lParam">Specifies the application-defined parameter passed to the EnumResourceNames or EnumResourceNamesEx function.</param>
        /// <returns>Returns TRUE if the function succeeds or FALSE if the function does not find a resource of the type specified, or if the function fails for another reason.</returns>
        internal delegate bool EnumResourceNamesDelegate(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, IntPtr lParam);

        /// <summary>
        /// Enumerates language-specific resources, of the specified type and name, associated with a binary module.
        /// </summary>
        /// <param name="hModule">The handle to a module to search.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type of resource for which the language is being enumerated.</param>
        /// <param name="lpszName">Pointer to a null-terminated string specifying the name of the resource for which the language is being enumerated.</param>
        /// <param name="lpEnumFunc">Pointer to the callback function to be called for each enumerated resource language.</param>
        /// <param name="lParam">Specifies an application-defined value passed to the callback function.</param>
        /// <returns>Returns TRUE if successful or FALSE otherwise.</returns>
        [DllImport("kernel32.dll", EntryPoint = "EnumResourceLanguagesW", CharSet = CharSet.Unicode, SetLastError = true)]
        internal static extern bool EnumResourceLanguages(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, EnumResourceLanguagesDelegate lpEnumFunc, IntPtr lParam);

        /// <summary>
        /// An application-defined callback function used with the EnumResourceLanguages and EnumResourceLanguagesEx functions.
        /// </summary>
        /// <param name="hModule">The handle to the module whose executable file contains the resources for which the languages are being enumerated.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type name of the resource for which the language is being enumerated.</param>
        /// <param name="lpszName">Pointer to a null-terminated string specifying the name of the resource for which the language is being enumerated.</param>
        /// <param name="wIDLanguage">Specifies the language identifier for the resource for which the language is being enumerated.</param>
        /// <param name="lParam">Specifies the application-defined parameter passed to the EnumResourceLanguages or EnumResourceLanguagesEx function.</param>
        /// <returns>Returns TRUE if successful or FALSE otherwise.</returns>
        internal delegate bool EnumResourceLanguagesDelegate(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, UInt16 wIDLanguage, IntPtr lParam);

        /// <summary>
        /// Determines the location of the resource with the specified type, name, and language in the specified module.
        /// </summary>
        /// <param name="hModule">Handle to the module whose executable file contains the resource.</param>
        /// <param name="lpszType">Pointer to a null-terminated string specifying the type name of the resource.</param>
        /// <param name="lpszName">Pointer to a null-terminated string specifying the name of the resource.</param>
        /// <param name="wLanguage">Specifies the language of the resource.</param>
        /// <returns>If the function succeeds, the return value is a handle to the specified resource's information block.</returns>
        [DllImport("kernel32.dll", EntryPoint = "FindResourceExW", CharSet = CharSet.Unicode, SetLastError = true)]
        internal static extern IntPtr FindResourceEx(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, UInt16 wLanguage);

        /// <summary>
        /// Locks the specified resource in memory.
        /// </summary>
        /// <param name="hResData">Handle to the resource to be locked.</param>
        /// <returns>If the loaded resource is locked, the return value is a pointer to the first byte of the resource; otherwise, it is NULL.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr LockResource(IntPtr hResData);

        /// <summary>
        /// Loads the specified resource into global memory.
        /// </summary>
        /// <param name="hModule">Handle to the module whose executable file contains the resource.</param>
        /// <param name="hResData">Handle to the resource to be loaded.</param>
        /// <returns>If the function succeeds, the return value is a handle to the data associated with the resource.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResData);

        /// <summary>
        /// Returns the size, in bytes, of the specified resource. 
        /// </summary>
        /// <param name="hInstance">Handle to the module whose executable file contains the resource.</param>
        /// <param name="hResInfo">Handle to the resource. This handle must be created by using the FindResource or FindResourceEx function.</param>
        /// <returns>If the function succeeds, the return value is the number of bytes in the resource.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern int SizeofResource(IntPtr hInstance, IntPtr hResInfo);

        /// <summary>
        /// Closes an open object handle.
        /// </summary>
        /// <param name="hHandle">A valid handle to an open object.</param>
        /// <returns>If the function succeeds, the return value is nonzero.</returns>
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern bool CloseHandle(IntPtr hHandle);

        /// <summary>
        /// Returns a handle to either a language-neutral portable executable file (LN file) or a 
        /// language-specific resource file (.mui file) that can be used by the UpdateResource function 
        /// to add, delete, or replace resources in a binary module.
        /// </summary>
        /// <param name="pFileName">Pointer to a null-terminated string that specifies the binary file in which to update resources.</param>
        /// <param name="bDeleteExistingResources">Specifies whether to delete the pFileName parameter's existing resources.</param>
        /// <returns>If the function succeeds, the return value is a handle that can be used by the UpdateResource and EndUpdateResource functions.</returns>
        [DllImport("kernel32.dll", EntryPoint = "BeginUpdateResourceW", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern IntPtr BeginUpdateResource(string pFileName, bool bDeleteExistingResources);

        /// <summary>
        /// Adds, deletes, or replaces a resource in a portable executable (PE) file. 
        /// There are some restrictions on resource updates in files that contain Resource Configuration (RC Config) data: 
        /// language-neutral (LN) files and language-specific resource (.mui) files.
        /// </summary>
        /// <param name="hUpdate">A module handle returned by the BeginUpdateResource function, referencing the file to be updated.</param>
        /// <param name="lpType">Pointer to a null-terminated string specifying the resource type to be updated.</param>
        /// <param name="lpName">Pointer to a null-terminated string specifying the name of the resource to be updated.</param>
        /// <param name="wLanguage">Specifies the language identifier of the resource to be updated.</param>
        /// <param name="lpData">Pointer to the resource data to be inserted into the file indicated by hUpdate.</param>
        /// <param name="cbData">Specifies the size, in bytes, of the resource data at lpData.</param>
        /// <returns>Returns TRUE if successful or FALSE otherwise.</returns>
        [DllImport("kernel32.dll", EntryPoint = "UpdateResourceW", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool UpdateResource(IntPtr hUpdate, IntPtr lpType, IntPtr lpName, UInt16 wLanguage, byte[] lpData, UInt32 cbData);

        /// <summary>
        /// Commits or discards changes made prior to a call to UpdateResource.
        /// </summary>
        /// <param name="hUpdate">A module handle returned by the BeginUpdateResource function, and used by UpdateResource, referencing the file to be updated.</param>
        /// <param name="fDiscard">Specifies whether to write the resource updates to the file. If this parameter is TRUE, no changes are made. If it is FALSE, the changes are made: the resource updates will take effect.</param>
        /// <returns>Returns TRUE if the function succeeds; FALSE otherwise.</returns>
        [DllImport("kernel32.dll", EntryPoint = "EndUpdateResourceW", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        internal static extern bool EndUpdateResource(IntPtr hUpdate, bool fDiscard);

        /// <summary>
        /// Neutral primary language ID.
        /// </summary>
        public const UInt16 LANG_NEUTRAL = 0;
        /// <summary>
        /// US-English primary language ID.
        /// </summary>
        public const UInt16 LANG_ENGLISH = 9;

        /// <summary>
        /// Neutral sublanguage ID.
        /// </summary>
        public const UInt16 SUBLANG_NEUTRAL = 0;
        /// <summary>
        /// US-English sublanguage ID.
        /// </summary>
        public const UInt16 SUBLANG_ENGLISH_US = 1;

        /// <summary>
        /// CREATEPROCESS_MANIFEST_RESOURCE_ID is used primarily for EXEs. If an executable has a resource of type RT_MANIFEST, 
        /// ID CREATEPROCESS_MANIFEST_RESOURCE_ID, Windows will create a process default activation context for the process. 
        /// The process default activation context will be used by all components running in the process. 
        /// CREATEPROCESS_MANIFEST_RESOURCE_ID can also used by DLLs. When Windows probe for dependencies, if the dll has 
        /// a resource of type RT_MANIFEST, ID CREATEPROCESS_MANIFEST_RESOURCE_ID, Windows will use that manifest as the 
        /// dependency. 
        /// </summary>
        public const UInt16 CREATEPROCESS_MANIFEST_RESOURCE_ID  = 1;
        /// <summary>
        /// ISOLATIONAWARE_MANIFEST_RESOURCE_ID is used primarily for DLLs. It should be used if the dll wants private 
        /// dependencies other than the process default. For example, if an dll depends on comctl32.dll version 6.0.0.0. 
        /// It should have a resource of type RT_MANIFEST, ID ISOLATIONAWARE_MANIFEST_RESOURCE_ID to depend on comctl32.dll 
        /// version 6.0.0.0, so that even if the process executable wants comctl32.dll version 5.1, the dll itself will still 
        /// use the right version of comctl32.dll. 
        /// </summary>
        public const UInt16 ISOLATIONAWARE_MANIFEST_RESOURCE_ID = 2;
        /// <summary>
        /// When ISOLATION_AWARE_ENABLED is defined, Windows re-defines certain APIs. For example LoadLibraryExW 
        /// is redefined to IsolationAwareLoadLibraryExW. 
        /// </summary>
        public const UInt16 ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = 3;
        /// <summary>
        /// Resource manifest type.
        /// </summary>
        public enum ManifestType
        {
            /// <summary>
            /// CREATEPROCESS_MANIFEST_RESOURCE_ID
            /// </summary>
            CreateProcess = CREATEPROCESS_MANIFEST_RESOURCE_ID,
            /// <summary>
            /// ISOLATIONAWARE_MANIFEST_RESOURCE_ID
            /// </summary>
            IsolationAware = ISOLATIONAWARE_MANIFEST_RESOURCE_ID,
            /// <summary>
            /// ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID
            /// </summary>
            IsolationAwareNonstaticImport = ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID
        }
    }
}



================================================
File: ResourceLib/Key.snk
================================================
[Non-text file]


================================================
File: ResourceLib/License.txt
================================================
MIT License

Copyright (c) Daniel Doubrovkine, 2008-2012, Vestris Inc.

https://github.com/dblock/resourcelib/

You may freely use and distribute this software under the terms of the following license agreement.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and 
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of 
the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



================================================
File: ResourceLib/LoadException.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A resource load exception.
    /// </summary>
    public class LoadException : Exception
    {
        private Exception _outerException = null;

        /// <summary>
        /// The Win32 exception from a resource enumeration function.
        /// </summary>
        public Exception OuterException
        {
            get
            {
                return _outerException;
            }
        }

        /// <summary>
        /// A new resource load exception.
        /// </summary>
        /// <param name="message">Error message.</param>
        /// <param name="innerException">The inner exception thrown within a single resource.</param>
        /// <param name="outerException">The outer exception from the Win32 API.</param>
        public LoadException(string message, Exception innerException, Exception outerException)
            : base(message, innerException)
        {
            _outerException = outerException;
        }

        /// <summary>
        /// A combined message of the inner and outer exception.
        /// </summary>
        public override string Message
        {
            get
            {
                return _outerException != null ? string.Format("{0} {1}.",
                    base.Message, _outerException.Message) : base.Message;
            }
        }
    }
}



================================================
File: ResourceLib/ManifestResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// An embedded SxS manifest.
    /// </summary>
    public class ManifestResource : Resource
    {
        private static byte[] utf8_bom = { 0xef, 0xbb, 0xbf };

        private byte[] _data = null;
        private XmlDocument _manifest = null;

        /// <summary>
        /// Embedded XML manifest.
        /// </summary>
        public XmlDocument Manifest
        {
            get
            {
                if (_manifest == null && _data != null)
                {
                    bool unicodeBOM = (_data.Length >= 3 
                        && _data[0] == utf8_bom[0] 
                        && _data[1] == utf8_bom[1] 
                        && _data[2] == utf8_bom[2]);

                    string manifestXml = Encoding.UTF8.GetString(
                        _data, 
                        unicodeBOM ? 3 : 0, 
                        unicodeBOM ? _data.Length - 3 : _data.Length);

                    _manifest = new XmlDocument();
                    _manifest.LoadXml(manifestXml);
                }

                return _manifest;
            }
            set
            {
                _manifest = value;
                _data = null;
                _size = Encoding.UTF8.GetBytes(_manifest.OuterXml).Length;
            }
        }

        /// <summary>
        /// Manifest type.
        /// </summary>
        public Kernel32.ManifestType ManifestType
        {
            get
            {
                return (Kernel32.ManifestType) _name.Id;
            }
            set
            {
                _name = new ResourceId((IntPtr) value);
            }
        }

        /// <summary>
        /// An existing embedded manifest resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public ManifestResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new executable CreateProcess manifest.
        /// </summary>
        public ManifestResource()
            : this(Kernel32.ManifestType.CreateProcess)
        {

        }

        /// <summary>
        /// A new executable manifest.
        /// </summary>
        /// <param name="manifestType">Manifest type.</param>
        public ManifestResource(Kernel32.ManifestType manifestType)
            : base(IntPtr.Zero, 
                IntPtr.Zero, 
                new ResourceId(Kernel32.ResourceTypes.RT_MANIFEST), 
                new ResourceId((uint) manifestType), 
                Kernel32.LANG_NEUTRAL, 
                0)
        {
            _manifest = new XmlDocument();
            _manifest.LoadXml(
                "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +
                "<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\" />");
            _size = Encoding.UTF8.GetBytes(_manifest.OuterXml).Length;
        }

        /// <summary>
        /// Read the resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of a resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            if (_size > 0)
            {
                _manifest = null;
                _data = new byte[_size];
                Marshal.Copy(lpRes, _data, 0, _data.Length);
            }

            return new IntPtr(lpRes.ToInt64() + _size);
        }

        /// <summary>
        /// Write the resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            if (_manifest != null)
            {
                w.Write(Encoding.UTF8.GetBytes(_manifest.OuterXml));
            }
            else if (_data != null)
            {
                w.Write(_data);
            }
        }

        /// <summary>
        /// Load a manifest resource from an executable file.
        /// </summary>
        /// <param name="filename">Name of an executable file (.exe or .dll).</param>
        /// <param name="manifestType">Manifest resource type.</param>
        public void LoadFrom(string filename, Kernel32.ManifestType manifestType)
        {
            base.LoadFrom(filename, 
                new ResourceId(Kernel32.ResourceTypes.RT_MANIFEST),
                new ResourceId((uint)manifestType),
                Kernel32.LANG_NEUTRAL);
        }
    }
}



================================================
File: ResourceLib/MenuExTemplate.cs
================================================
ï»¿using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Extended menu template.
    /// </summary>
    public class MenuExTemplate : MenuTemplateBase
    {
        private User32.MENUEXTEMPLATE _header = new User32.MENUEXTEMPLATE();
        private MenuExTemplateItemCollection _menuItems = new MenuExTemplateItemCollection();

        /// <summary>
        /// Menu items.
        /// </summary>
        public MenuExTemplateItemCollection MenuItems
        {
            get
            {
                return _menuItems;
            }
            set
            {
                _menuItems = value;
            }
        }

        /// <summary>
        /// Read the menu template.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.MENUEXTEMPLATE) Marshal.PtrToStructure(
                lpRes, typeof(User32.MENUEXTEMPLATE));

            IntPtr lpMenuItem = ResourceUtil.Align(lpRes.ToInt64() 
                + Marshal.SizeOf(_header) 
                + _header.wOffset);

            return _menuItems.Read(lpMenuItem);
        }

        /// <summary>
        /// Write the menu template.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(System.IO.BinaryWriter w)
        {
            long head = w.BaseStream.Position;
            // write header
            w.Write(_header.wVersion);
            w.Write(_header.wOffset);
            // w.Write(_header.dwHelpId);
            // pad to match the offset value
            ResourceUtil.Pad(w, (UInt16) (_header.wOffset - 4));
            // seek to the beginning of the menu item per offset value
            // this may be behind, ie. the help id structure is part of the first popup menu
            w.BaseStream.Seek(head + _header.wOffset + 4, System.IO.SeekOrigin.Begin);
            // write menu items
            _menuItems.Write(w);
        }

        /// <summary>
        /// String representation of the menu in the MENUEX format.
        /// </summary>
        /// <returns>String representation of the menu.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("MENUEX");
            sb.Append(_menuItems.ToString());
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuExTemplateItem.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A base menu template item.
    /// </summary>
    public abstract class MenuExTemplateItem
    {
        /// <summary>
        /// Menu item header.
        /// </summary>
        protected User32.MENUEXITEMTEMPLATE _header = new User32.MENUEXITEMTEMPLATE();
        /// <summary>
        /// Menu string.
        /// </summary>
        protected string _menuString = null;

        /// <summary>
        /// Menu text.
        /// </summary>
        public string MenuString
        {
            get
            {
                return _menuString;
            }
            set
            {
                _menuString = value;
            }
        }

        /// <summary>
        /// Read the menu item.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal virtual IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.MENUEXITEMTEMPLATE) Marshal.PtrToStructure(
                lpRes, typeof(User32.MENUEXITEMTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() 
                + Marshal.SizeOf(_header));

            switch ((UInt32) Marshal.ReadInt32(lpRes))
            {
                case 0:
                    break;
                default:
                    _menuString = Marshal.PtrToStringUni(lpRes);
                    lpRes = new IntPtr(lpRes.ToInt64() +
                        (_menuString.Length + 1) * Marshal.SystemDefaultCharSize);
                    break;
            }

            return lpRes;
        }

        /// <summary>
        /// Write the menu item to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal virtual void Write(BinaryWriter w)
        {
            // header
            w.Write(_header.dwType);
            w.Write(_header.dwState);
            w.Write(_header.dwMenuId);
            w.Write(_header.bResInfo);
            // menu string
            if (_menuString != null)
            {
                w.Write(Encoding.Unicode.GetBytes(_menuString));
                w.Write((UInt16) 0);
                ResourceUtil.PadToDWORD(w);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public abstract string ToString(int indent);

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(0);
        }
    }
}



================================================
File: ResourceLib/MenuExTemplateItemCollection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A collection of menu items.
    /// </summary>
    public class MenuExTemplateItemCollection : List<MenuExTemplateItem>
    {
        /// <summary>
        /// A collection of extended menu items.
        /// </summary>
        public MenuExTemplateItemCollection()
        {

        }

        /// <summary>
        /// Read the menu item collection.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal IntPtr Read(IntPtr lpRes)
        {
            while(true)
            {
                lpRes = ResourceUtil.Align(lpRes.ToInt64());

                User32.MENUEXITEMTEMPLATE childItem = (User32.MENUEXITEMTEMPLATE)Marshal.PtrToStructure(
                    lpRes, typeof(User32.MENUEXITEMTEMPLATE));

                MenuExTemplateItem childMenu = null;
                if ((childItem.bResInfo & (uint) User32.MenuResourceType.Sub) > 0)
                    childMenu = new MenuExTemplateItemPopup();
                else
                    childMenu = new MenuExTemplateItemCommand();

                lpRes = childMenu.Read(lpRes);
                Add(childMenu);

                if ((childItem.bResInfo & (uint) User32.MenuResourceType.Last) > 0)
                    break;
            }

            return lpRes;
        }

        /// <summary>
        /// Write the menu collection to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal void Write(BinaryWriter w)
        {
            foreach (MenuExTemplateItem menuItem in this)
            {
                ResourceUtil.PadToDWORD(w);
                menuItem.Write(w);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(0);
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            if (Count > 0)
            {
                sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
                foreach (MenuExTemplateItem child in this)
                {
                    sb.Append(child.ToString(indent + 1));
                }
                sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            }
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuExTemplateItemCommand.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A command menu item.
    /// </summary>
    public class MenuExTemplateItemCommand : MenuExTemplateItem
    {
        /// <summary>
        /// A command menu item.
        /// </summary>
        public MenuExTemplateItemCommand()
        {

        }

        /// <summary>
        /// Returns true if the item is a separator.
        /// </summary>
        public bool IsSeparator
        {
            get
            {
                return _header.dwType == (uint)User32.MenuFlags.MFT_SEPARATOR
                    || ((_header.bResInfo == 0xFFFF || _header.bResInfo == 0) 
                        && _header.dwMenuId == 0 && _menuString == null);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            if (IsSeparator)
            {
                sb.AppendLine(string.Format("{0}MENUITEM SEPARATOR",
                    new String(' ', indent)));
            }
            else
            {
                sb.AppendLine(string.Format("{0}MENUITEM \"{1}\", {2}",
                    new String(' ', indent), _menuString == null 
                        ? string.Empty : _menuString.Replace("\t", @"\t"), _header.dwMenuId));
            }
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuExTemplateItemPopup.cs
================================================
ï»¿using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// An extended popup menu item.
    /// </summary>
    public class MenuExTemplateItemPopup : MenuExTemplateItem
    {
        private UInt32 _dwHelpId = 0;
        MenuExTemplateItemCollection _subMenuItems = new MenuExTemplateItemCollection();

        /// <summary>
        /// Sub menu items.
        /// </summary>
        public MenuExTemplateItemCollection SubMenuItems
        {
            get
            {
                return _subMenuItems;
            }
            set
            {
                _subMenuItems = value;
            }
        }

        /// <summary>
        /// An extended popup menu item.
        /// </summary>
        public MenuExTemplateItemPopup()
        {

        }

        /// <summary>
        /// Read an extended popup menu item.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            lpRes = base.Read(lpRes);
            
            lpRes = ResourceUtil.Align(lpRes);
            _dwHelpId = (UInt32) Marshal.ReadInt32(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + 4);

            return _subMenuItems.Read(lpRes);
        }

        /// <summary>
        /// Write the menu item to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            base.Write(w);
            ResourceUtil.PadToDWORD(w);
            w.Write(_dwHelpId);
            _subMenuItems.Write(w);
        }

        /// <summary>
        /// String representation in the MENUEX format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}POPUP \"{1}\"",
                new String(' ', indent),
                _menuString == null ? string.Empty : _menuString.Replace("\t", @"\t")));
            sb.Append(_subMenuItems.ToString(indent));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A generic resource.
    /// </summary>
    public class MenuResource : Resource
    {
        private MenuTemplateBase _menu = null;

        /// <summary>
        /// Menu template.
        /// </summary>
        public MenuTemplateBase Menu
        {
            get
            {
                return _menu;
            }
            set
            {
                _menu = value;
            }
        }

        /// <summary>
        /// A structured menu resource.
        /// </summary>
        public MenuResource()
            : base(IntPtr.Zero, 
                IntPtr.Zero, 
                new ResourceId(Kernel32.ResourceTypes.RT_MENU), 
                null, 
                ResourceUtil.NEUTRALLANGID, 
                0)
        {

        }

        /// <summary>
        /// A structured menu resource embedded in an executable module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource handle.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language id.</param>
        /// <param name="size">Resource size.</param>
        public MenuResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// Read a menu resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of a resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            UInt16 version = (UInt16) Marshal.ReadInt16(lpRes);
            switch (version)
            {
                case 0:
                    _menu = new MenuTemplate();
                    break;
                case 1:
                    _menu = new MenuExTemplate();
                    break;
                default:
                    throw new NotSupportedException(string.Format(
                        "Unexpected menu header version {0}", version));
            }
            
            return _menu.Read(lpRes);
        }

        /// <summary>
        /// Write the menu resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            _menu.Write(w);   
        }

        /// <summary>
        /// String representation of the menu resource in the MENU format.
        /// </summary>
        /// <returns>String representation of the menu resource.</returns>
        public override string ToString()
        {
            return string.Format("{0} {1}", Name, Menu.ToString());
        }
    }
}



================================================
File: ResourceLib/MenuTemplate.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Standard menu template.
    /// </summary>
    public class MenuTemplate : MenuTemplateBase
    {
        private User32.MENUTEMPLATE _header = new User32.MENUTEMPLATE();
        private MenuTemplateItemCollection _menuItems = new MenuTemplateItemCollection();

        /// <summary>
        /// Menu items.
        /// </summary>
        public MenuTemplateItemCollection MenuItems
        {
            get
            {
                return _menuItems;
            }
            set
            {
                _menuItems = value;
            }
        }

        /// <summary>
        /// Read the menu template.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.MENUTEMPLATE) Marshal.PtrToStructure(
                lpRes, typeof(User32.MENUTEMPLATE));
            
            IntPtr lpMenuItem = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header) + _header.wOffset);
            return _menuItems.Read(lpMenuItem);
        }

        /// <summary>
        /// Write menu template to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_header.wVersion);
            w.Write(_header.wOffset);
            ResourceUtil.Pad(w, _header.wOffset);
            _menuItems.Write(w);
        }

        /// <summary>
        /// String representation of the menu in the MENU format.
        /// </summary>
        /// <returns>String representation of the menu.</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("MENU");
            sb.Append(_menuItems.ToString());
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuTemplateBase.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A menu template header.
    /// </summary>
    public abstract class MenuTemplateBase
    {
        /// <summary>
        /// Read the menu template header.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        internal abstract IntPtr Read(IntPtr lpRes);

        /// <summary>
        /// Write the menu to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal abstract void Write(BinaryWriter w);
    }
}



================================================
File: ResourceLib/MenuTemplateItem.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A base menu template item.
    /// </summary>
    public abstract class MenuTemplateItem
    {
        /// <summary>
        /// Menu item header.
        /// </summary>
        protected User32.MENUITEMTEMPLATE _header = new User32.MENUITEMTEMPLATE();

        /// <summary>
        /// Menu string.
        /// </summary>
        protected string _menuString = null;

        /// <summary>
        /// Menu text.
        /// </summary>
        public string MenuString
        {
            get
            {
                return _menuString;
            }
            set
            {
                _menuString = value;
            }
        }

        /// <summary>
        /// Read the menu item.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal virtual IntPtr Read(IntPtr lpRes)
        {
            switch ((UInt16) Marshal.ReadInt16(lpRes))
            {
                case 0:
                    lpRes = new IntPtr(lpRes.ToInt64() + 2);
                    break;
                default:
                    _menuString = Marshal.PtrToStringUni(lpRes);
                    lpRes = new IntPtr(lpRes.ToInt64() +
                        (_menuString.Length + 1) * Marshal.SystemDefaultCharSize);
                    break;
            }

            return lpRes;
        }

        internal virtual void Write(BinaryWriter w)
        {
            // menu string
            if (_menuString == null)
            {
                w.Write((UInt16) 0);
            }
            else
            {
                w.Write(Encoding.Unicode.GetBytes(_menuString));
                w.Write((UInt16) 0);
                ResourceUtil.PadToWORD(w);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public abstract string ToString(int indent);

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(0);
        }
    }
}



================================================
File: ResourceLib/MenuTemplateItemCollection.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A collection of menu items.
    /// </summary>
    public class MenuTemplateItemCollection : List<MenuTemplateItem>
    {
        /// <summary>
        /// A collection of menu items.
        /// </summary>
        public MenuTemplateItemCollection()
        {

        }

        /// <summary>
        /// Read the menu item collection.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal IntPtr Read(IntPtr lpRes)
        {
            while(true)
            {
                User32.MENUITEMTEMPLATE childItem = (User32.MENUITEMTEMPLATE)Marshal.PtrToStructure(
                    lpRes, typeof(User32.MENUITEMTEMPLATE));

                MenuTemplateItem childMenu = null;
                if ((childItem.mtOption & (uint)User32.MenuFlags.MF_POPUP) > 0)
                    childMenu = new MenuTemplateItemPopup();
                else 
                    childMenu = new MenuTemplateItemCommand();

                lpRes = childMenu.Read(lpRes);
                Add(childMenu);

                if ((childItem.mtOption & (uint)User32.MenuFlags.MF_END) != 0)
                    break;
            }

            return lpRes;
        }

        /// <summary>
        /// Write the menu collection to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal void Write(BinaryWriter w)
        {
            foreach (MenuTemplateItem menuItem in this)
            {
                menuItem.Write(w);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(0);
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            if (Count > 0)
            {
                sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
                foreach (MenuTemplateItem child in this)
                {
                    sb.Append(child.ToString(indent + 1));
                }
                sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            }
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuTemplateItemCommand.cs
================================================
ï»¿using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A command menu item.
    /// </summary>
    public class MenuTemplateItemCommand : MenuTemplateItem
    {
        private UInt16 _menuId = 0;

        /// <summary>
        /// Command menu id.
        /// </summary>
        public UInt16 MenuId
        {
            get
            {
                return _menuId;
            }
            set
            {
                _menuId = value;
            }
        }

        /// <summary>
        /// A command menu item.
        /// </summary>
        public MenuTemplateItemCommand()
        {

        }

        /// <summary>
        /// Read a command menu item.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.MENUITEMTEMPLATE)Marshal.PtrToStructure(
                lpRes, typeof(User32.MENUITEMTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));

            _menuId = (UInt16) Marshal.ReadInt16(lpRes);
            lpRes = new IntPtr(lpRes.ToInt64() + 2);
            
            lpRes = base.Read(lpRes);

            return lpRes;
        }

        /// <summary>
        /// Write menu item to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_header.mtOption);
            w.Write(_menuId);
            base.Write(w);
        }

        /// <summary>
        /// Returns true if the item is a separator.
        /// </summary>
        public bool IsSeparator
        {
            get
            {
                return ((_header.mtOption & (uint)User32.MenuFlags.MF_SEPARATOR) > 0) ||
                    (_header.mtOption == 0 && _menuString == null && _menuId == 0);
            }
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            if (IsSeparator)
            {
                sb.AppendLine(string.Format("{0}MENUITEM SEPARATOR", 
                    new String(' ', indent)));
            }
            else
            {
                sb.AppendLine(string.Format("{0}MENUITEM \"{1}\", {2}",
                    new String(' ', indent),
                    _menuString == null ? string.Empty : _menuString.Replace("\t", @"\t"), _menuId));
            }
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/MenuTemplateItemPopup.cs
================================================
ï»¿using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A popup menu item.
    /// </summary>
    public class MenuTemplateItemPopup : MenuTemplateItem
    {
        MenuTemplateItemCollection _subMenuItems = new MenuTemplateItemCollection();

        /// <summary>
        /// Sub menu items.
        /// </summary>
        public MenuTemplateItemCollection SubMenuItems
        {
            get
            {
                return _subMenuItems;
            }
            set
            {
                _subMenuItems = value;
            }
        }

        /// <summary>
        /// A popup menu item.
        /// </summary>
        public MenuTemplateItemPopup()
        {

        }

        /// <summary>
        /// Read a popup menu item.
        /// </summary>
        /// <param name="lpRes">Address in memory.</param>
        /// <returns>End of the menu item structure.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _header = (User32.MENUITEMTEMPLATE) Marshal.PtrToStructure(
                lpRes, typeof(User32.MENUITEMTEMPLATE));

            lpRes = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));
            lpRes = base.Read(lpRes);

            return _subMenuItems.Read(lpRes);
        }

        /// <summary>
        /// Write menu item to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            w.Write(_header.mtOption);
            base.Write(w);
            _subMenuItems.Write(w);
        }

        /// <summary>
        /// String representation in the MENU format.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}POPUP \"{1}\"",
                new String(' ', indent), 
                _menuString == null ? string.Empty : _menuString.Replace("\t", @"\t")));
            sb.Append(_subMenuItems.ToString(indent));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/Resource.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A version resource.
    /// </summary>
    public abstract class Resource
    {
        /// <summary>
        /// Resource type.
        /// </summary>
        protected ResourceId _type;
        /// <summary>
        /// Resource name.
        /// </summary>
        protected ResourceId _name;
        /// <summary>
        /// Resource language.
        /// </summary>
        protected UInt16 _language;
        /// <summary>
        /// Loaded binary nodule.
        /// </summary>
        protected IntPtr _hModule = IntPtr.Zero;
        /// <summary>
        /// Pointer to the resource.
        /// </summary>
        protected IntPtr _hResource = IntPtr.Zero;
        /// <summary>
        /// Resource size.
        /// </summary>
        protected int _size = 0;

        /// <summary>
        /// Version resource size in bytes.
        /// </summary>
        public int Size
        {
            get
            {
                return _size;
            }
        }

        /// <summary>
        /// Language ID.
        /// </summary>
        public UInt16 Language
        {
            get
            {
                return _language;
            }
            set
            {
                _language = value;
            }
        }

        /// <summary>
        /// Resource type.
        /// </summary>
        public ResourceId Type
        {
            get
            {
                return _type;
            }
        }

        /// <summary>
        /// String representation of the resource type.
        /// </summary>
        public string TypeName
        {
            get
            {
                return _type.TypeName;
            }
        }

        /// <summary>
        /// Resource name.
        /// </summary>
        public ResourceId Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        /// <summary>
        /// A new resource.
        /// </summary>
        internal Resource()
        {

        }

        /// <summary>
        /// A structured resource embedded in an executable module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource handle.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        internal Resource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
        {
            _hModule = hModule;
            _type = type;
            _name = name;
            _language = language;
            _hResource = hResource;
            _size = size;

            LockAndReadResource(hModule, hResource);
        }

        /// <summary>
        /// Lock and read the resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource handle.</param>
        internal void LockAndReadResource(IntPtr hModule, IntPtr hResource)
        {
            if (hResource == IntPtr.Zero)
                return;

            IntPtr lpRes = Kernel32.LockResource(hResource);

            if (lpRes == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            Read(hModule, lpRes);
        }

        /// <summary>
        /// Load a resource from an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">An executable (.exe or .dll) file.</param>
        public virtual void LoadFrom(string filename)
        {
            LoadFrom(filename, _type, _name, _language);
        }

        /// <summary>
        /// Load a resource from an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">An executable (.exe or .dll) file.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="lang">Resource language.</param>
        internal void LoadFrom(string filename, ResourceId type, ResourceId name, UInt16 lang)
        {
            IntPtr hModule = IntPtr.Zero;

            try
            {
                hModule = Kernel32.LoadLibraryEx(filename, IntPtr.Zero,
                    Kernel32.DONT_RESOLVE_DLL_REFERENCES | Kernel32.LOAD_LIBRARY_AS_DATAFILE);

                LoadFrom(hModule, type, name, lang);
            }
            finally
            {
                if (hModule != IntPtr.Zero)
                    Kernel32.FreeLibrary(hModule);
            }
        }

        /// <summary>
        /// Load a resource from an executable (.exe or .dll) module.
        /// </summary>
        /// <param name="hModule">An executable (.exe or .dll) module.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="lang">Resource language.</param>
        internal void LoadFrom(IntPtr hModule, ResourceId type, ResourceId name, UInt16 lang)
        {
            if (IntPtr.Zero == hModule)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr hRes = Kernel32.FindResourceEx(hModule, type.Id, name.Id, lang);
            if (IntPtr.Zero == hRes)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr hGlobal = Kernel32.LoadResource(hModule, hRes);
            if (IntPtr.Zero == hGlobal)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr lpRes = Kernel32.LockResource(hGlobal);

            if (lpRes == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            _size = Kernel32.SizeofResource(hModule, hRes);
            if (_size <= 0)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            _type = type;
            _name = name;
            _language = lang;

            Read(hModule, lpRes);
        }

        /// <summary>
        /// Read a resource from a previously loaded module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of the resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal abstract IntPtr Read(IntPtr hModule, IntPtr lpRes);

        /// <summary>
        /// Write the resource to a memory stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal abstract void Write(BinaryWriter w);

        /// <summary>
        /// Return resource data.
        /// </summary>
        /// <returns>Resource data.</returns>
        public byte[] WriteAndGetBytes()
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter w = new BinaryWriter(ms, Encoding.Default);
            Write(w);
            w.Close();
            return ms.ToArray();
        }

        /// <summary>
        /// Save a resource.
        /// </summary>
        /// <param name="filename">Name of an executable file (.exe or .dll).</param>
        public virtual void SaveTo(string filename)
        {
            SaveTo(filename, _type, _name, _language);
        }

        /// <summary>
        /// Save a resource to an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">Path to an executable file.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="langid">Language id.</param>
        internal void SaveTo(string filename, ResourceId type, ResourceId name, UInt16 langid)
        {
            byte[] data = WriteAndGetBytes();
            SaveTo(filename, type, name, langid, data);
        }

        /// <summary>
        /// Delete a resource from an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">Path to an executable file.</param>
        public virtual void DeleteFrom(string filename)
        {
            Delete(filename, _type, _name, _language);
        }

        /// <summary>
        /// Delete a resource from an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">Path to an executable file.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="lang">Resource language.</param>
        internal static void Delete(string filename, ResourceId type, ResourceId name, UInt16 lang)
        {
            SaveTo(filename, type, name, lang, null);
        }

        /// <summary>
        /// Save a resource to an executable (.exe or .dll) file.
        /// </summary>
        /// <param name="filename">Path to an executable file.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="lang">Resource language.</param>
        /// <param name="data">Resource data.</param>
        internal static void SaveTo(string filename, ResourceId type, ResourceId name, UInt16 lang, byte[] data)
        {
            IntPtr h = Kernel32.BeginUpdateResource(filename, false);

            if (h == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            if (!Kernel32.UpdateResource(h, type.Id, name.Id,
                lang, data, (data == null ? 0 : (uint)data.Length)))
            {
                throw new Win32Exception(Marshal.GetLastWin32Error());
            }

            if (!Kernel32.EndUpdateResource(h, false))
                throw new Win32Exception(Marshal.GetLastWin32Error());
        }
    }
}



================================================
File: ResourceLib/ResourceId.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A resource Id.
    /// There're two types of resource Ids, reserved integer numbers (eg. RT_ICON) and custom string names (eg. "CUSTOM").
    /// </summary>
    public class ResourceId
    {
        private IntPtr _name = IntPtr.Zero;

        /// <summary>
        /// A resource identifier.
        /// </summary>
        /// <param name="value">A integer or string resource id.</param>
        public ResourceId(IntPtr value)
        {
            Id = value;
        }

        /// <summary>
        /// A resource identifier.
        /// </summary>
        /// <param name="value">A integer resource id.</param>
        public ResourceId(uint value)
        {
            Id = new IntPtr(value);
        }

        /// <summary>
        /// A well-known resource-type identifier.
        /// </summary>
        /// <param name="value">A well known resource type.</param>
        public ResourceId(Kernel32.ResourceTypes value)
        {
            Id = (IntPtr) value;
        }

        /// <summary>
        /// A custom resource identifier.
        /// </summary>
        /// <param name="value"></param>
        public ResourceId(string value)
        {
            Name = value;
        }

        /// <summary>
        /// Resource Id.
        /// </summary>
        /// <remarks>
        /// If the resource Id is a string, it will be copied.
        /// </remarks>
        public IntPtr Id
        {
            get
            {
                return _name;
            }
            set
            {
                _name = IsIntResource(value)
                    ? value
                    : Marshal.StringToHGlobalUni(Marshal.PtrToStringUni(value));
            }
        }

        /// <summary>
        /// String representation of a resource type name.
        /// </summary>
        public string TypeName
        {
            get
            {
                return IsIntResource() ? ResourceType.ToString() : Name;
            }
        }

        /// <summary>
        /// An enumerated resource type for built-in resource types only.
        /// </summary>
        public Kernel32.ResourceTypes ResourceType
        {
            get
            {
                if (IsIntResource())
                    return (Kernel32.ResourceTypes) _name;

                throw new InvalidCastException(string.Format(
                    "Resource {0} is not of built-in type.", Name));
            }
            set
            {
                _name = (IntPtr) value;
            }
        }

        /// <summary>
        /// Returns true if the resource is an integer resource.
        /// </summary>
        public bool IsIntResource()
        {
            return IsIntResource(_name);
        }

        /// <summary>
        /// Returns true if the resource is an integer resource.
        /// </summary>
        /// <param name="value">Resource pointer.</param>
        internal static bool IsIntResource(IntPtr value)
        {
            return (uint) value <= UInt16.MaxValue;
        }

        /// <summary>
        /// Resource Id in a string format.
        /// </summary>
        public string Name
        {
            get
            {
                return IsIntResource()
                    ? _name.ToString()
                    : Marshal.PtrToStringUni(_name);
            }
            set
            {
                _name = Marshal.StringToHGlobalUni(value);
            }
        }

        /// <summary>
        /// String representation of the resource Id.
        /// </summary>
        /// <returns>Resource name.</returns>
        public override string ToString()
        {
            return Name;
        }

        /// <summary>
        /// Resource Id hash code. 
        /// Resource Ids of the same type have the same hash code.
        /// </summary>
        /// <returns>Resource Id.</returns>
        public override int GetHashCode()
        {
            return IsIntResource() 
                ? Id.ToInt32() 
                : Name.GetHashCode();
        }

        /// <summary>
        /// Compares two resource Ids by value.
        /// </summary>
        /// <param name="obj">Resource Id.</param>
        /// <returns>True if both resource Ids represent the same resource.</returns>
        public override bool Equals(object obj)
        {
            if (obj is ResourceId && obj == this)
                return true;

            if (obj is ResourceId && (obj as ResourceId).GetHashCode() == GetHashCode())
                return true;

            return false;
        }
    }
}



================================================
File: ResourceLib/ResourceInfo.cs
================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Resource info manager.
    /// </summary>
    public class ResourceInfo : IEnumerable<Resource>, IDisposable
    {
        private Exception _innerException = null;
        private IntPtr _hModule = IntPtr.Zero;
        private Dictionary<ResourceId, List<Resource>> _resources;
        private List<ResourceId> _resourceTypes = null;

        /// <summary>
        /// A dictionary of resources, the key is the resource type, eg. "REGISTRY" or "16" (version).
        /// </summary>
        public Dictionary<ResourceId, List<Resource>> Resources
        {
            get
            {
                return _resources;
            }
        }

        /// <summary>
        /// A shortcut for available resource types.
        /// </summary>
        public List<ResourceId> ResourceTypes
        {
            get
            {
                return _resourceTypes;
            }
        }

        /// <summary>
        /// A new resource info.
        /// </summary>
        public ResourceInfo()
        {

        }

        /// <summary>
        /// Unload the previously loaded module.
        /// </summary>
        public void Unload()
        {
            if (_hModule != IntPtr.Zero)
            {
                Kernel32.FreeLibrary(_hModule);
                _hModule = IntPtr.Zero;
            }

            _innerException = null;
        }

        /// <summary>
        /// Load an executable or a DLL and read its resources.
        /// </summary>
        /// <param name="filename">Source filename.</param>
        public void Load(string filename)
        {
            Unload();

            _resourceTypes = new List<ResourceId>();
            _resources = new Dictionary<ResourceId, List<Resource>>();

            // load DLL
            _hModule = Kernel32.LoadLibraryEx(filename, IntPtr.Zero,
                Kernel32.DONT_RESOLVE_DLL_REFERENCES | Kernel32.LOAD_LIBRARY_AS_DATAFILE);

            if (IntPtr.Zero == _hModule)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            try
            {
                // enumerate resource types
                // for each type, enumerate resource names
                // for each name, enumerate resource languages
                // for each resource language, enumerate actual resources
                if (!Kernel32.EnumResourceTypes(_hModule, EnumResourceTypesImpl, IntPtr.Zero))
                    throw new Win32Exception(Marshal.GetLastWin32Error());
            }
            catch (Exception ex)
            {
                throw new LoadException(string.Format("Error loading '{0}'.", filename),
                    _innerException, ex);
            }
        }

        /// <summary>
        /// Enumerate resource types.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpszType">Resource type.</param>
        /// <param name="lParam">Additional parameter.</param>
        /// <returns>TRUE if successful.</returns>
        private bool EnumResourceTypesImpl(IntPtr hModule, IntPtr lpszType, IntPtr lParam)
        {
            ResourceId type = new ResourceId(lpszType);
            _resourceTypes.Add(type);

            // enumerate resource names
            if (!Kernel32.EnumResourceNames(hModule, lpszType, new Kernel32.EnumResourceNamesDelegate(EnumResourceNamesImpl), IntPtr.Zero))
                throw new Win32Exception(Marshal.GetLastWin32Error());

            return true;
        }

        /// <summary>
        /// Enumerate resource names within a resource by type
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpszType">Resource type.</param>
        /// <param name="lpszName">Resource name.</param>
        /// <param name="lParam">Additional parameter.</param>
        /// <returns>TRUE if successful.</returns>
        private bool EnumResourceNamesImpl(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, IntPtr lParam)
        {
            if (!Kernel32.EnumResourceLanguages(hModule, lpszType, lpszName, new Kernel32.EnumResourceLanguagesDelegate(EnumResourceLanguages), IntPtr.Zero))
                throw new Win32Exception(Marshal.GetLastWin32Error());

            return true;
        }

        /// <summary>
        /// Create a resource of a given type.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResourceGlobal">Pointer to the resource in memory.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="wIDLanguage">Language ID.</param>
        /// <param name="size">Size of resource.</param>
        /// <returns>A specialized or a generic resource.</returns>
        protected Resource CreateResource(
            IntPtr hModule, 
            IntPtr hResourceGlobal, 
            ResourceId type, 
            ResourceId name, 
            UInt16 wIDLanguage, 
            int size)
        {
            if (type.IsIntResource())
            {
                switch (type.ResourceType)
                {
                    case Kernel32.ResourceTypes.RT_VERSION:
                        return new VersionResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_GROUP_CURSOR:
                    //    return new CursorDirectoryResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    case Kernel32.ResourceTypes.RT_GROUP_ICON:
                        return new IconDirectoryResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    case Kernel32.ResourceTypes.RT_MANIFEST:
                        return new ManifestResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    case Kernel32.ResourceTypes.RT_BITMAP:
                        return new BitmapResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_MENU:
                    //    return new MenuResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_DIALOG:
                    //    return new DialogResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    case Kernel32.ResourceTypes.RT_STRING:
                        return new StringResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_FONTDIR:
                    //    return new FontDirectoryResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_FONT:
                    //    return new FontResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                    //case Kernel32.ResourceTypes.RT_ACCELERATOR:
                    //    return new AcceleratorResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
                }
            }

            return new GenericResource(hModule, hResourceGlobal, type, name, wIDLanguage, size);
        }

        /// <summary>
        /// Enumerate resource languages within a resource by name
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpszType">Resource type.</param>
        /// <param name="lpszName">Resource name.</param>
        /// <param name="wIDLanguage">Language ID.</param>
        /// <param name="lParam">Additional parameter.</param>
        /// <returns>TRUE if successful.</returns>
        private bool EnumResourceLanguages(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, UInt16 wIDLanguage, IntPtr lParam)
        {
            List<Resource> resources = null;
            ResourceId type = new ResourceId(lpszType);
            if (!_resources.TryGetValue(type, out resources))
            {
                resources = new List<Resource>();
                _resources[type] = resources;
            }

            ResourceId name = new ResourceId(lpszName);
            IntPtr hResource = Kernel32.FindResourceEx(hModule, lpszType, lpszName, wIDLanguage);
            IntPtr hResourceGlobal = Kernel32.LoadResource(hModule, hResource);
            int size = Kernel32.SizeofResource(hModule, hResource);

            try
            {
                resources.Add(CreateResource(hModule, hResourceGlobal, type, name, wIDLanguage, size));
            }
            catch (Exception ex)
            {
                _innerException = new Exception(string.Format("Error loading resource '{0}' {1} ({2}).",
                    name, type.TypeName, wIDLanguage), ex);
                throw ex;
            }
            
            return true;
        }

        /// <summary>
        /// Save resource to a file.
        /// </summary>
        /// <param name="filename">Target filename.</param>
        public void Save(string filename)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Dispose resource info object.
        /// </summary>
        public void Dispose()
        {
            Unload();
        }

        /// <summary>
        /// A collection of resources.
        /// </summary>
        /// <param name="type">Resource type.</param>
        /// <returns>A collection of resources of a given type.</returns>
        public List<Resource> this[Kernel32.ResourceTypes type]
        {
            get
            {
                return _resources[new ResourceId(type)];
            }
            set
            {
                _resources[new ResourceId(type)] = value;
            }
        }

        /// <summary>
        /// A collection of resources.
        /// </summary>
        /// <param name="type">Resource type.</param>
        /// <returns>A collection of resources of a given type.</returns>
        public List<Resource> this[string type]
        {
            get
            {
                return _resources[new ResourceId(type)];
            }
            set
            {
                _resources[new ResourceId(type)] = value;
            }
        }

        #region IEnumerable<Resource> Members

        /// <summary>
        /// Enumerates all resources within this resource info collection.
        /// </summary>
        /// <returns>Resources enumerator.</returns>
        public IEnumerator<Resource> GetEnumerator()
        {
            Dictionary<ResourceId, List<Resource>>.Enumerator resourceTypesEnumerator = _resources.GetEnumerator();
            while(resourceTypesEnumerator.MoveNext())
            {
                List<Resource>.Enumerator resourceEnumerator = resourceTypesEnumerator.Current.Value.GetEnumerator();
                while (resourceEnumerator.MoveNext())
                {
                    yield return resourceEnumerator.Current;
                }                
            }
        }

        #endregion

        #region IEnumerable Members

        /// <summary>
        /// Enumerates all resources within this resource info collection.
        /// </summary>
        /// <returns>Resources enumerator.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        #endregion
    }
}



================================================
File: ResourceLib/ResourceLib.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>9.0.30729</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AC9AF16F-7BF8-4400-95DE-6BC6CA53181E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Vestris.ResourceLib</RootNamespace>
    <AssemblyName>Vestris.ResourceLib</AssemblyName>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>3.5</OldToolsVersion>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <MSBuildCommunityTasksPath>$(SolutionDir)\Build</MSBuildCommunityTasksPath>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\Vestris.ResourceLib.XML</DocumentationFile>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>
    </DocumentationFile>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Key.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="BitmapFile.cs" />
    <Compile Include="BitmapResource.cs" />
    <Compile Include="FixedFileInfo.cs" />
    <Compile Include="Gdi32.cs" />
    <Compile Include="IconDirectoryResource.cs" />
    <Compile Include="DirectoryResource.cs" />
    <Compile Include="IconFile.cs" />
    <Compile Include="IconFileIcon.cs" />
    <Compile Include="DeviceIndependentBitmap.cs" />
    <Compile Include="IconImageResource.cs" />
    <Compile Include="IconResource.cs" />
    <Compile Include="Kernel32.cs" />
    <Compile Include="LoadException.cs" />
    <Compile Include="ManifestResource.cs" />
    <Compile Include="ResourceInfo.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Resource.cs" />
    <Compile Include="ResourceId.cs" />
    <Compile Include="ResourceTableHeader.cs" />
    <Compile Include="ResourceUtil.cs" />
    <Compile Include="StringFileInfo.cs" />
    <Compile Include="StringResource.cs" />
    <Compile Include="StringTableEntry.cs" />
    <Compile Include="StringTable.cs" />
    <Compile Include="GenericResource.cs" />
    <Compile Include="User32.cs" />
    <Compile Include="VarFileInfo.cs" />
    <Compile Include="VarTable.cs" />
    <Compile Include="VersionResource.cs" />
    <Compile Include="Winver.cs" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="License.txt" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.2.0">
      <Visible>False</Visible>
      <ProductName>.NET Framework 2.0 %28x86%29</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.0">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.0 %28x86%29</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <ItemGroup>
    <None Include="Key.snk" />
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- <Import Project="$(SolutionDir)\Build\MSBuild.Community.Tasks.targets" />
  <Import Project="$(SolutionDir)\.nuget\nuget.targets" />
  To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: ResourceLib/ResourceTableHeader.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A resource table header.
    /// </summary>
    public class ResourceTableHeader
    {
        /// <summary>
        /// Resource table header.
        /// </summary>
        protected Kernel32.RESOURCE_HEADER _header;

        /// <summary>
        /// Resource table key.
        /// </summary>
        protected string _key;

        /// <summary>
        /// Resource table key.
        /// </summary>
        public string Key
        {
            get
            {
                return _key;
            }
        }

        /// <summary>
        /// Resource header.
        /// </summary>
        public Kernel32.RESOURCE_HEADER Header
        {
            get
            {
                return _header;
            }
            set
            {
                _header = value;
            }
        }

        /// <summary>
        /// A new resource table header.
        /// </summary>
        public ResourceTableHeader()
        {

        }

        /// <summary>
        /// An resource table header with a specific key.
        /// </summary>
        /// <param name="key">resource key</param>
        public ResourceTableHeader(string key)
        {
            _key = key;
        }

        /// <summary>
        /// An existing resource table.
        /// </summary>
        /// <param name="lpRes">Pointer to resource table data.</param>
        internal ResourceTableHeader(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read the resource header, return a pointer to the end of it.
        /// </summary>
        /// <param name="lpRes">Top of header.</param>
        /// <returns>End of header, after the key, aligned at a 32 bit boundary.</returns>
        internal virtual IntPtr Read(IntPtr lpRes)
        {
            _header = (Kernel32.RESOURCE_HEADER) Marshal.PtrToStructure(
                lpRes, typeof(Kernel32.RESOURCE_HEADER));

            IntPtr pBlockKey = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));
            _key = Marshal.PtrToStringUni(pBlockKey);

            return ResourceUtil.Align(pBlockKey.ToInt64() + (_key.Length + 1) * Marshal.SystemDefaultCharSize);
        }

        /// <summary>
        /// Write the resource table.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal virtual void Write(BinaryWriter w)
        {
            // wLength
            w.Write((UInt16) _header.wLength);
            // wValueLength
            w.Write((UInt16) _header.wValueLength);
            // wType
            w.Write((UInt16) _header.wType);
            // write key
            w.Write(Encoding.Unicode.GetBytes(_key));
            // null-terminator
            w.Write((UInt16) 0);
            // pad fixed info
            ResourceUtil.PadToDWORD(w);
        }

        /// <summary>
        /// String representation.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(0);
        }

        /// <summary>
        /// String representation.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation.</returns>
        public virtual string ToString(int indent)
        {
            return base.ToString();
        }
    }
}



================================================
File: ResourceLib/ResourceUtil.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// Resource utilities.
    /// </summary>
    public abstract class ResourceUtil
    {
        /// <summary>
        /// Align an address to a 4-byte boundary.
        /// </summary>
        /// <param name="p">Address in memory.</param>
        /// <returns>4-byte aligned pointer.</returns>
        internal static IntPtr Align(Int64 p)
        {
            return new IntPtr((p + 3) & ~3);
        }

        /// <summary>
        /// Align a pointer to a 4-byte boundary.
        /// </summary>
        /// <param name="p">Pointer to an address in memory.</param>
        /// <returns>4-byte aligned pointer.</returns>
        internal static IntPtr Align(IntPtr p)
        {
            return Align(p.ToInt64());
        }

        /// <summary>
        /// Pad data to a WORD.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <returns>New position within the binary stream.</returns>
        internal static long PadToWORD(BinaryWriter w)
        {
            long pos = w.BaseStream.Position;

            if (pos % 2 != 0)
            {
                long count = 2 - pos % 2;
                Pad(w, (UInt16)count);
                pos += count;
            }

            return pos;
        }

        /// <summary>
        /// Pad data to a DWORD.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <returns>New position within the binary stream.</returns>
        internal static long PadToDWORD(BinaryWriter w)
        {
            long pos = w.BaseStream.Position;

            if (pos % 4 != 0)
            {
                long count = 4 - pos % 4;
                Pad(w, (UInt16) count);
                pos += count;
            }

            return pos;
        }

        /// <summary>
        /// Returns the high WORD from a DWORD value.
        /// </summary>
        /// <param name="value">WORD value.</param>
        /// <returns>High WORD.</returns>
        internal static UInt16 HiWord(UInt32 value)
        {
            return (UInt16) ((value & 0xFFFF0000) >> 16);
        }

        /// <summary>
        /// Returns the high WORD from a DWORD value.
        /// </summary>
        /// <param name="value">WORD value.</param>
        /// <returns>High WORD.</returns>
        internal static UInt16 LoWord(UInt32 value)
        {
            return (UInt16) (value & 0x0000FFFF);
        }

        /// <summary>
        /// Write a value at a given position.
        /// Used to write a size of data in an earlier located header.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <param name="value">Value to write.</param>
        /// <param name="address">Address to write the value at.</param>
        internal static void WriteAt(BinaryWriter w, long value, long address)
        {
            long cur = w.BaseStream.Position;
            w.Seek((int) address, SeekOrigin.Begin);
            w.Write((UInt16) value);
            w.Seek((int) cur, SeekOrigin.Begin);
        }

        /// <summary>
        /// Pad bytes.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <param name="len">Number of bytes to write.</param>
        /// <returns>New position within the stream.</returns>
        internal static long Pad(BinaryWriter w, UInt16 len)
        {
            while (len-- > 0)
                w.Write((byte) 0);
            return w.BaseStream.Position;
        }

        /// <summary>
        /// Neutral language ID.
        /// </summary>
        public static UInt16 NEUTRALLANGID
        {
            get
            {
                return MAKELANGID(Kernel32.LANG_NEUTRAL, Kernel32.SUBLANG_NEUTRAL);
            }
        }

        /// <summary>
        /// US-English language ID.
        /// </summary>
        public static UInt16 USENGLISHLANGID
        {
            get
            {
                return ResourceUtil.MAKELANGID(Kernel32.LANG_ENGLISH, Kernel32.SUBLANG_ENGLISH_US);
            }
        }

        /// <summary>
        /// Make a language ID from a primary language ID (low-order 10 bits) and a sublanguage (high-order 6 bits).
        /// </summary>
        /// <param name="primary">Primary language ID.</param>
        /// <param name="sub">Sublanguage ID.</param>
        /// <returns>Microsoft language ID.</returns>
        public static UInt16 MAKELANGID(int primary, int sub)
        {
            return (UInt16) ((((UInt16)sub) << 10) | ((UInt16)primary));
        }

        /// <summary>
        /// Return the primary language ID from a Microsoft language ID.
        /// </summary>
        /// <param name="lcid">Microsoft language ID</param>
        /// <returns>primary language ID (low-order 10 bits)</returns>
        public static UInt16 PRIMARYLANGID(UInt16 lcid)
        {
            return (UInt16) (((UInt16)lcid) & 0x3ff);
        }

        /// <summary>
        /// Return the sublanguage ID from a Microsoft language ID.
        /// </summary>
        /// <param name="lcid">Microsoft language ID.</param>
        /// <returns>Sublanguage ID (high-order 6 bits).</returns>
        public static UInt16 SUBLANGID(UInt16 lcid)
        {
            return (UInt16) (((UInt16)lcid) >> 10);
        }

        /// <summary>
        /// Returns the memory representation of an object.
        /// </summary>
        /// <typeparam name="T">Object type.</typeparam>
        /// <param name="anything">Data.</param>
        /// <returns>Object's representation in memory.</returns>
        internal static byte[] GetBytes<T>(T anything)
        {
            int rawsize = Marshal.SizeOf(anything);
            IntPtr buffer = Marshal.AllocHGlobal(rawsize);
            Marshal.StructureToPtr(anything, buffer, false);
            byte[] rawdatas = new byte[rawsize];
            Marshal.Copy(buffer, rawdatas, 0, rawsize);
            Marshal.FreeHGlobal(buffer);
            return rawdatas;
        }

        /// <summary>
        /// Get a collection of flags from a flag value.
        /// </summary>
        /// <typeparam name="T">Flag collection type.</typeparam>
        /// <param name="flagValue">Flag value.</param>
        /// <returns>Collection of flags.</returns>
        internal static List<string> FlagsToList<T>(UInt32 flagValue)
        {
            List<string> flags = new List<string>();

            foreach (T f in Enum.GetValues(typeof(T)))
            {
                UInt32 f_ui = Convert.ToUInt32(f);
                if ((flagValue & f_ui) > 0 || flagValue == f_ui)
                {
                    flags.Add(f.ToString());
                }
            }

            return flags;
        }

        /// <summary>
        /// Get a string representation of flags.
        /// </summary>
        /// <typeparam name="T">Flag collection type.</typeparam>
        /// <param name="flagValue">Flag vlaue</param>
        /// <returns>String representation of flags in the f1 | ... | fn format.</returns>
        internal static string FlagsToString<T>(UInt32 flagValue)
        {
            List<string> flags = new List<string>();
            flags.AddRange(FlagsToList<T>(flagValue));
            return String.Join(" | ", flags.ToArray());
        }
    }
}



================================================
File: ResourceLib/StringFileInfo.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a file-version resource. 
    /// It contains version information that can be displayed for a particular language and code page.
    /// http://msdn.microsoft.com/en-us/library/aa908808.aspx
    /// </summary>
    public class StringFileInfo : ResourceTableHeader
    {
        Dictionary<string, StringTable> _strings = new Dictionary<string, StringTable>();

        /// <summary>
        /// Resource strings.
        /// </summary>
        public Dictionary<string, StringTable> Strings
        {
            get
            {
                return _strings;
            }
        }

        /// <summary>
        /// A new string file-version resource.
        /// </summary>
        public StringFileInfo()
            : base("StringFileInfo")
        {
            _header.wType = (UInt16) Kernel32.RESOURCE_HEADER_TYPE.StringData;
        }

        /// <summary>
        /// An existing string file-version resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of a string file-version resource.</param>
        internal StringFileInfo(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read an existing string file-version resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of a string file-version resource.</param>
        /// <returns>Pointer to the end of the string file-version resource.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _strings.Clear();
            IntPtr pChild = base.Read(lpRes);

            while (pChild.ToInt64() < (lpRes.ToInt64() + _header.wLength))
            {
                StringTable res = new StringTable(pChild);
                _strings.Add(res.Key, res);
                pChild = ResourceUtil.Align(pChild.ToInt64() + res.Header.wLength);
            }

            return new IntPtr(lpRes.ToInt64() + _header.wLength);
        }

        /// <summary>
        /// Write the string file-version resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            long headerPos = w.BaseStream.Position;
            base.Write(w);

            Dictionary<string, StringTable>.Enumerator stringsEnum = _strings.GetEnumerator();
            while (stringsEnum.MoveNext())
            {
                stringsEnum.Current.Value.Write(w);
            }

            ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
            ResourceUtil.PadToDWORD(w);
        }

        /// <summary>
        /// Default (first) string table.
        /// </summary>
        public StringTable Default
        {
            get
            {
                Dictionary<string, StringTable>.Enumerator iter = _strings.GetEnumerator();
                if (iter.MoveNext()) return iter.Current.Value;
                return null;
            }
        }

        /// <summary>
        /// Indexed string table.
        /// </summary>
        /// <param name="key">Key.</param>
        /// <returns>A string table at a given index.</returns>
        public string this[string key]
        {
            get
            {
                return Default[key];
            }
            set
            {
                Default[key] = value;
            }
        }

        /// <summary>
        /// String representation of StringFileInfo.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String in the StringFileInfo format.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
            sb.AppendLine(string.Format("{0}BLOCK \"{1}\"", new String(' ', indent + 1), _key));
            foreach(StringTable stringTable in _strings.Values)
            {
                sb.Append(stringTable.ToString(indent + 1));
            }
            sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/StringResource.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// A string, RT_STRING resource.
    /// Each string resource block has 16 strings, each represented as an ordered pair 
    /// (length, text). Length is a WORD that specifies the size, in terms of the number of characters, 
    /// in the text that follows. Text follows length and contains the string in Unicode without the 
    /// NULL terminating character. There may be no characters in text, in which case length is zero.
    /// </summary>
    public class StringResource : Resource
    {
        private Dictionary<UInt16, string> _strings = new Dictionary<UInt16, string>();

        /// <summary>
        /// String collection in this resource.
        /// </summary>
        public Dictionary<UInt16, string> Strings
        {
            get
            {
                return _strings;
            }
            set
            {
                _strings = value;
            }
        }

        /// <summary>
        /// Returns a string of a given Id.
        /// </summary>
        /// <param name="id">String Id.</param>
        /// <returns>A string of a given Id.</returns>
        public string this[UInt16 id]
        {
            get
            {
                return _strings[id];
            }
            set
            {
                _strings[id] = value;
            }
        }

        /// <summary>
        /// A new string resource.
        /// </summary>
        public StringResource()
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_STRING),
                null,
                ResourceUtil.NEUTRALLANGID,
                0)
        {

        }

        /// <summary>
        /// A new string resource of a given block id.
        /// </summary>
        /// <param name="blockId">Block id.</param>
        public StringResource(ResourceId blockId)
            : base(IntPtr.Zero,
                IntPtr.Zero,
                new ResourceId(Kernel32.ResourceTypes.RT_STRING),
                blockId,
                ResourceUtil.NEUTRALLANGID,
                0)
        {

        }

        /// <summary>
        /// A new string resource of a given block id.
        /// </summary>
        /// <param name="blockId">Block id.</param>
        public StringResource(UInt16 blockId)
            : this(new ResourceId(blockId))
        {

        }

        /// <summary>
        /// An existing string resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public StringResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A string with ID, stringId, is located in the block with ID given by the following formula.
        /// http://support.microsoft.com/kb/q196774/
        /// </summary>
        public static UInt16 GetBlockId(int stringId)
        {
            return (UInt16)((stringId / 16) + 1);
        }

        /// <summary>
        /// String table block id.
        /// </summary>
        public UInt16 BlockId
        {
            get
            {
                return (UInt16) Name.Id.ToInt64();
            }
            set
            {
                Name = new ResourceId(value);
            }
        }

        /// <summary>
        /// Read the strings.
        /// </summary>
        /// <param name="hModule">Handle to a module.</param>
        /// <param name="lpRes">Pointer to the beginning of the string table.</param>
        /// <returns>Address of the end of the string table.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            for (int i = 0; i < 16; i++)
            {
                UInt16 len = (UInt16)Marshal.ReadInt16(lpRes);
                if (len != 0)
                {
                    UInt16 id = (UInt16) ((BlockId - 1) * 16 + i);
                    IntPtr lpString = new IntPtr(lpRes.ToInt64() + 2);
                    string s = Marshal.PtrToStringUni(lpString, len);
                    _strings.Add(id, s);
                }
                lpRes = new IntPtr(lpRes.ToInt64() + 2 + (len * Marshal.SystemDefaultCharSize));
            }

            return lpRes;
        }

        internal override void Write(System.IO.BinaryWriter w)
        {
            for (int i = 0; i < 16; i++)
            {
                UInt16 id = (UInt16)((BlockId - 1) * 16 + i);
                string s = null;
                if (_strings.TryGetValue(id, out s))
                {
                    w.Write((UInt16) s.Length);
                    w.Write(Encoding.Unicode.GetBytes(s));
                }
                else
                {
                    w.Write((UInt16) 0);
                }
            }
        }

        /// <summary>
        /// String representation of the strings resource.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("STRINGTABLE");
            sb.AppendLine("BEGIN");
            Dictionary<UInt16, string>.Enumerator stringEnumerator = _strings.GetEnumerator();
            while (stringEnumerator.MoveNext())
            {
                sb.AppendLine(string.Format(" {0} {1}",
                    stringEnumerator.Current.Key, stringEnumerator.Current.Value));
            }
            sb.AppendLine("END");
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/StringTable.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a file-version resource. It contains language 
    /// and code page formatting information for the strings. A code page is an ordered character set.
    /// See http://msdn.microsoft.com/en-us/library/aa909192.aspx for more information.
    /// </summary>
    public class StringTable : ResourceTableHeader
    {
        Dictionary<string, StringTableEntry> _strings = new Dictionary<string,StringTableEntry>();

        /// <summary>
        /// Resource strings.
        /// </summary>
        public Dictionary<string, StringTableEntry> Strings
        {
            get
            {
                return _strings;
            }
        }

        /// <summary>
        /// A new string table.
        /// </summary>
        public StringTable()
        {
        
        }

        /// <summary>
        /// A new string table.
        /// </summary>
        /// <param name="key">String table key.</param>
        public StringTable(string key)
            : base(key)
        {
            _header.wType = (UInt16)Kernel32.RESOURCE_HEADER_TYPE.StringData;
        }

        /// <summary>
        /// An existing string table.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the table.</param>
        internal StringTable(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read a string table.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the string table.</param>
        /// <returns>Pointer to the end of the string table.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _strings.Clear();
            IntPtr pChild = base.Read(lpRes);

            while (pChild.ToInt64() < (lpRes.ToInt64() + _header.wLength))
            {
                StringTableEntry res = new StringTableEntry(pChild);
                _strings.Add(res.Key, res);
                pChild = ResourceUtil.Align(pChild.ToInt64() + res.Header.wLength);
            }

            return new IntPtr(lpRes.ToInt64() + _header.wLength);
        }

        /// <summary>
        /// Write the string table to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <returns>Last unpadded position.</returns>
        internal override void Write(BinaryWriter w)
        {
            long headerPos = w.BaseStream.Position;
            base.Write(w);

            int total = _strings.Count;
            Dictionary<string, StringTableEntry>.Enumerator stringsEnum = _strings.GetEnumerator();
            while (stringsEnum.MoveNext())
            {
                stringsEnum.Current.Value.Write(w);
                ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
                // total parent structure size must not include padding
                if (-- total != 0) ResourceUtil.PadToDWORD(w);
            }
        }
        
        /// <summary>
        /// The four most significant digits of the key represent the language identifier.
        /// Each Microsoft Standard Language identifier contains two parts: the low-order 10 bits 
        /// specify the major language, and the high-order 6 bits specify the sublanguage.
        /// </summary>
        public UInt16 LanguageID
        {
            get
            {
                if (string.IsNullOrEmpty(_key)) 
                    return 0;

                return Convert.ToUInt16(_key.Substring(0, 4), 16);
            }
            set
            {
                _key = string.Format("{0:x4}{1:x4}", value, CodePage);
            }
        }

        /// <summary>
        /// The four least significant digits of the key represent the code page for which the data is formatted.
        /// </summary>
        public UInt16 CodePage
        {
            get
            {
                if (string.IsNullOrEmpty(_key))
                    return 0;

                return Convert.ToUInt16(_key.Substring(4, 4), 16);
            }
            set
            {
                _key = string.Format("{0:x4}{1:x4}", LanguageID, value);
            }
        }

        /// <summary>
        /// Returns an entry within the string table.
        /// </summary>
        /// <param name="key">Key.</param>
        /// <returns>An entry within the string table.</returns>
        public string this[string key]
        {
            get
            {
                return _strings[key].Value;
            }
            set
            {
                StringTableEntry sr = null;
                if (!_strings.TryGetValue(key, out sr))
                {
                    sr = new StringTableEntry(key);
                    _strings.Add(key, sr);
                }

                sr.Value = value;
            }
        }

        /// <summary>
        /// String representation of the string table.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation of the strings table.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
            sb.AppendLine(string.Format("{0}BLOCK \"{1}\"", new String(' ', indent + 1), _key));
            sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent + 1)));
            foreach (StringTableEntry stringResource in _strings.Values)
            {
                sb.AppendLine(string.Format("{0}VALUE \"{1}\", \"{2}\"",
                    new String(' ', indent + 2),
                    stringResource.Key, stringResource.StringValue));
            }
            sb.AppendLine(string.Format("{0}END", new String(' ', indent + 1)));
            sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/StringTableEntry.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a file-version resource. It contains a string 
    /// that describes a specific aspect of a file, such as a file's version, its copyright notices, 
    /// or its trademarks.
    /// http://msdn.microsoft.com/en-us/library/aa909025.aspx
    /// </summary>
    public class StringTableEntry
    {
        private Kernel32.RESOURCE_HEADER _header;
        private string _key;

        /// <summary>
        /// The value is always stored double-null-terminated.
        /// </summary>
        private string _value;

        /// <summary>
        /// String resource header.
        /// </summary>
        public Kernel32.RESOURCE_HEADER Header
        {
            get
            {
                return _header;
            }
        }

        /// <summary>
        /// Key.
        /// </summary>
        public string Key
        {
            get
            {
                return _key;
            }
        }

        /// <summary>
        /// String value (removing the double-null-terminator).
        /// </summary>
        public string StringValue
        {
            get
            {
                if (_value == null)
                    return _value;

                return _value.Substring(0, _value.Length - 1);
            }
        }

        /// <summary>
        /// Value.
        /// </summary>
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (value == null)
                {
                    _value = null;
                    _header.wValueLength = 0;
                }
                else
                {
                    if (value.Length == 0 || value[value.Length - 1] != '\0')
                        _value = value + '\0';
                    else
                        _value = value;

                    _header.wValueLength = (UInt16) _value.Length;
                }
            }
        }

        /// <summary>
        /// A new string resource.
        /// </summary>
        /// <param name="key">Key.</param>
        public StringTableEntry(string key)
        {
            _key = key;
            _header.wType = 1;
            _header.wLength = 0;
            _header.wValueLength = 0;
        }

        /// <summary>
        /// An existing string resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of a string resource.</param>
        internal StringTableEntry(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read a string resource.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of a string resource.</param>
        internal void Read(IntPtr lpRes)
        {
            _header = (Kernel32.RESOURCE_HEADER)Marshal.PtrToStructure(
                lpRes, typeof(Kernel32.RESOURCE_HEADER));

            IntPtr pKey = new IntPtr(lpRes.ToInt64() + Marshal.SizeOf(_header));
            _key = Marshal.PtrToStringUni(pKey);

            IntPtr pValue = ResourceUtil.Align(pKey.ToInt64() + (_key.Length + 1) * Marshal.SystemDefaultCharSize);
            _value = ((_header.wValueLength > 0)
                ? Marshal.PtrToStringUni(pValue, _header.wValueLength)
                : null);
        }

        /// <summary>
        /// Write a string resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal void Write(BinaryWriter w)
        {
            // write the block info
            long headerPos = w.BaseStream.Position;
            // wLength
            w.Write((UInt16) _header.wLength);
            // wValueLength
            w.Write((UInt16) _header.wValueLength);
            // wType
            w.Write((UInt16) _header.wType);
            // szKey
            w.Write(Encoding.Unicode.GetBytes(_key));
            // null terminator
            w.Write((UInt16) 0);
            // pad fixed info
            ResourceUtil.PadToDWORD(w);
            long valuePos = w.BaseStream.Position;
            if (_value != null)
            {
                // value (always double-null-terminated)
                w.Write(Encoding.Unicode.GetBytes(_value));
            }
            // wValueLength
            ResourceUtil.WriteAt(w, (w.BaseStream.Position - valuePos) / Marshal.SystemDefaultCharSize, headerPos + 2);
            // wLength
            ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
        }
    }
}



================================================
File: ResourceLib/User32.cs
================================================
ï»¿using System;
using System.Runtime.InteropServices;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// User32.dll functions.
    /// </summary>
    public abstract class User32
    {
        /// <summary>
        /// Contains information about an icon or a cursor. 
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        internal struct ICONINFO
        {
            /// <summary>
            /// Specifies whether this structure defines an icon or a cursor. 
            /// A value of TRUE specifies an icon; FALSE specifies a cursor. 
            /// </summary>
            public bool IsIcon;
            /// <summary>
            /// Specifies the x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is 
            /// always in the center of the icon, and this member is ignored.
            /// </summary>
            public int xHotspot;
            /// <summary>
            /// Specifies the y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot 
            /// is always in the center of the icon, and this member is ignored.
            /// </summary>
            public int yHotspot;
            /// <summary>
            /// Specifies the icon bitmask bitmap. 
            /// </summary>
            public IntPtr MaskBitmap;
            /// <summary>
            /// Handle to the icon color bitmap.
            /// </summary>
            public IntPtr ColorBitmap;
        }

        /// <summary>
        /// Retrieve a handle to a device context (DC) for the client area of a specified window or for the entire screen. 
        /// </summary>
        /// <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
        /// <returns>
        /// If the function succeeds, the return value is a handle to the DC for the specified window's client area. 
        /// If the function fails, the return value is NULL.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern IntPtr GetDC(IntPtr hWnd);

        /// <summary>
        /// Releases a device context (DC), freeing it for use by other applications.
        /// </summary>
        /// <param name="hWnd">A handle to the window whose DC is to be released.</param>
        /// <param name="hDC">A handle to the DC to be released.</param>
        /// <returns>
        /// The return value indicates whether the DC was released. If the DC was released, the return value is 1.
        /// If the DC was not released, the return value is zero.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);

        /// <summary>
        /// Destroys an icon and frees any memory the icon occupied.
        /// </summary>
        /// <param name="hIcon">Handle to the icon to be destroyed.</param>
        /// <returns>
        /// If the function succeeds, the return value is nonzero.
        /// If the function fails, the return value is zero.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern int DestroyIcon(IntPtr hIcon);

        /// <summary>
        /// Creates an icon or cursor from an ICONINFO structure.
        /// </summary>
        /// <param name="piconInfo">Pointer to an ICONINFO structure the function uses to create the icon or cursor.</param>
        /// <returns>
        /// If the function succeeds, the return value is a handle to the icon or cursor that is created.
        /// If the function fails, the return value is NULL.
        /// </returns>
        [DllImport("user32,dll", SetLastError = true)]
        internal static extern IntPtr CreateIconIndirect(ref ICONINFO piconInfo);

        /// <summary>
        /// The DIALOGTEMPLATE structure defines the dimensions and style of a dialog box. 
        /// This structure, always the first in a standard template for a dialog box, 
        /// also specifies the number of controls in the dialog box and therefore specifies 
        /// the number of subsequent DIALOGITEMTEMPLATE structures in the template.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct DIALOGTEMPLATE
        {
            /// <summary>
            /// Specifies the style of the dialog box.
            /// </summary>
            public UInt32 style;
            /// <summary>
            /// Extended styles for a window.
            /// </summary>
            public UInt32 dwExtendedStyle;
            /// <summary>
            /// Specifies the number of items in the dialog box. 
            /// </summary>
            public UInt16 cdit;
            /// <summary>
            /// Specifies the x-coordinate, in dialog box units, of the upper-left corner of the dialog box. 
            /// </summary>
            public Int16 x;
            /// <summary>
            /// Specifies the y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
            /// </summary>
            public Int16 y;
            /// <summary>
            /// Specifies the width, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cx;
            /// <summary>
            /// Specifies the height, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cy;
        }

        /// <summary>
        /// The DIALOGITEMTEMPLATE structure defines the dimensions and style of a control in a dialog box.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct DIALOGITEMTEMPLATE
        {
            /// <summary>
            /// Specifies the style of the control.
            /// </summary>
            public UInt32 style;
            /// <summary>
            /// Extended styles for a window.
            /// </summary>
            public UInt32 dwExtendedStyle;
            /// <summary>
            /// Specifies the x-coordinate, in dialog box units, of the upper-left corner of the control. 
            /// </summary>
            public Int16 x;
            /// <summary>
            /// Specifies the y-coordinate, in dialog box units, of the upper-left corner of the control.
            /// </summary>
            public Int16 y;
            /// <summary>
            /// Specifies the width, in dialog box units, of the control.
            /// </summary>
            public Int16 cx;
            /// <summary>
            /// Specifies the height, in dialog box units, of the control.
            /// </summary>
            public Int16 cy;
            /// <summary>
            /// Specifies the control identifier.
            /// </summary>
            public Int16 id;
        }

        /// <summary>
        /// An extended dialog box template begins with a DIALOGEXTEMPLATE header that describes
        /// the dialog box and specifies the number of controls in the dialog box. For each 
        /// control in a dialog box, an extended dialog box template has a block of data that
        /// uses the DIALOGEXITEMTEMPLATE format to describe the control. 
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct DIALOGEXTEMPLATE
        {
            /// <summary>
            /// Specifies the version number of the extended dialog box template. This member must be 1.
            /// </summary>
            public UInt16 dlgVer;
            /// <summary>
            /// Indicates whether a template is an extended dialog box template. 
            /// </summary>
            public UInt16 signature;
            /// <summary>
            /// Specifies the help context identifier for the dialog box window. When the system
            /// sends a WM_HELP message, it passes this value in the wContextId member of the 
            /// HELPINFO structure. 
            /// </summary>
            public UInt32 helpID;
            /// <summary>
            /// Specifies extended windows styles.
            /// </summary>
            public UInt32 exStyle;
            /// <summary>
            /// Specifies the style of the dialog box.
            /// </summary>
            public UInt32 style;
            /// <summary>
            /// Specifies the number of controls in the dialog box.
            /// </summary>
            public UInt16 cDlgItems;
            /// <summary>
            /// Specifies the x-coordinate, in dialog box units, of the upper-left corner of the dialog box.
            /// </summary>
            public Int16 x;
            /// <summary>
            /// Specifies the y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
            /// </summary>
            public Int16 y;
            /// <summary>
            /// Specifies the width, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cx;
            /// <summary>
            /// Specifies the height, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cy;
        }

        /// <summary>
        /// A control entry in an extended dialog template.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        public struct DIALOGEXITEMTEMPLATE
        {
            /// <summary>
            /// Specifies the help context identifier for the dialog box window. When the system
            /// sends a WM_HELP message, it passes this value in the wContextId member of the 
            /// HELPINFO structure. 
            /// </summary>
            public UInt32 helpID;
            /// <summary>
            /// Specifies extended windows styles.
            /// </summary>
            public UInt32 exStyle;
            /// <summary>
            /// Specifies the style of the dialog box.
            /// </summary>
            public UInt32 style;
            /// <summary>
            /// Specifies the x-coordinate, in dialog box units, of the upper-left corner of the dialog box.
            /// </summary>
            public Int16 x;
            /// <summary>
            /// Specifies the y-coordinate, in dialog box units, of the upper-left corner of the dialog box.
            /// </summary>
            public Int16 y;
            /// <summary>
            /// Specifies the width, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cx;
            /// <summary>
            /// Specifies the height, in dialog box units, of the dialog box.
            /// </summary>
            public Int16 cy;
            /// <summary>
            /// Specifies the control identifier.
            /// </summary>
            public Int32 id;
        }

        /// <summary>
        /// Window styles.
        /// http://msdn.microsoft.com/en-us/library/ms632600(VS.85).aspx
        /// </summary>
        public enum WindowStyles : uint
        {
            /// <summary>
            /// Creates an overlapped window. An overlapped window has a title bar and 
            /// a border. Same as the WS_TILED style.
            /// </summary>
            WS_OVERLAPPED = 0x00000000,
            /// <summary>
            /// Creates a pop-up window. This style cannot be used with the WS_CHILD style.
            /// </summary>
            WS_POPUP = 0x80000000,
            /// <summary>
            /// Creates a child window. A window with this style cannot have
            /// a menu bar. This style cannot be used with the WS_POPUP style.
            /// </summary>
            WS_CHILD = 0x40000000,
            /// <summary>
            /// Creates a window that is initially minimized. Same as the WS_ICONIC style.
            /// </summary>
            WS_MINIMIZE = 0x20000000,
            /// <summary>
            /// Creates a window that is initially visible.
            /// </summary>
            WS_VISIBLE = 0x10000000,
            /// <summary>
            /// Creates a window that is initially disabled. A disabled window cannot receive 
            /// input from the user.
            /// </summary>
            WS_DISABLED = 0x08000000,
            /// <summary>
            /// Clips child windows relative to each other; that is, when a particular
            /// child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips
            /// all other overlapping child windows out of the region of the child window 
            /// to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap,
            /// it is possible, when drawing within the client area of a child window, to draw
            /// within the client area of a neighboring child window.
            /// </summary>
            WS_CLIPSIBLINGS = 0x04000000,
            /// <summary>
            /// Excludes the area occupied by child windows when drawing occurs 
            /// within the parent window. This style is used when creating the parent window.
            /// </summary>
            WS_CLIPCHILDREN = 0x02000000,
            /// <summary>
            /// Creates a window that is initially maximized.
            /// </summary>
            WS_MAXIMIZE = 0x01000000,
            /// <summary>
            /// Creates a window that has a title bar (includes the WS_BORDER style).
            /// </summary>
            WS_CAPTION = 0x00C00000, /* WS_BORDER | WS_DLGFRAME */
            /// <summary>
            /// Creates a window that has a thin-line border.
            /// </summary>
            WS_BORDER = 0x00800000,
            /// <summary>
            /// Creates a window that has a border of a style typically used with dialog 
            /// boxes. A window with this style cannot have a title bar.
            /// </summary>
            WS_DLGFRAME = 0x00400000,
            /// <summary>
            /// Creates a window that has a vertical scroll bar.
            /// </summary>
            WS_VSCROLL = 0x00200000,
            /// <summary>
            /// Creates a window that has a horizontal scroll bar.
            /// </summary>
            WS_HSCROLL = 0x00100000,
            /// <summary>
            /// Creates a window that has a window menu on its title bar. The WS_CAPTION 
            /// style must also be specified.
            /// </summary>
            WS_SYSMENU = 0x00080000,
            /// <summary>
            /// Creates a window that has a sizing border. Same as the WS_SIZEBOX style.
            /// </summary>
            WS_THICKFRAME = 0x00040000,
            /// <summary>
            /// Specifies the first control of a group of controls. The group consists of this
            /// first control and all controls defined after it, up to the next control with 
            /// the WS_GROUP style. The first control in each group usually has the WS_TABSTOP
            /// style so that the user can move from group to group. The user can subsequently
            /// change the keyboard focus from one control in the group to the next control in 
            /// the group by using the direction keys. 
            /// </summary>
            WS_GROUP = 0x00020000,
            /// <summary>
            /// Specifies a control that can receive the keyboard focus when the user presses 
            /// the TAB key. Pressing the TAB key changes the keyboard focus to the next 
            /// control with the WS_TABSTOP style. 
            /// </summary>
            WS_TABSTOP = 0x00010000,
            /*
            /// <summary>
            /// Creates a window that has a minimize button. Cannot be combined with the
            /// WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            /// </summary>
            // WS_MINIMIZEBOX = 0x00020000,
            /// <summary>
            /// Creates a window that has a maximize button. Cannot be combined with the 
            /// WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            /// </summary>
            // WS_MAXIMIZEBOX = 0x00010000,
            // WS_TILED = WS_OVERLAPPED,
            // WS_ICONIC = WS_MINIMIZE,
            // WS_SIZEBOX = WS_THICKFRAME,
            // WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW,
            */
        }

        /// <summary>
        /// Dialog styles.
        /// http://msdn.microsoft.com/en-us/library/ms644994(VS.85).aspx
        /// </summary>
        public enum DialogStyles : uint
        {
            /// <summary>
            /// Specifying this style in the dialog template tells Windows that the dtX and dtY values
            /// of the DIALOGTEMPLATE struct are relative to the screen origin, not the owner of the 
            /// dialog box. 
            /// </summary>
            DS_ABSALIGN = 0x01,
            /// <summary>
            /// Create a dialog box with the WS_EX_TOPMOST flag. This flag cannot be combined with the 
            /// DS_CONTROL style. This flag is obsolete and is included for compatibility with 16-bit 
            /// versions of Windows. 
            /// </summary>
            DS_SYSMODAL = 0x02,
            /// <summary>
            /// Applies to 16-bit applications only. This style directs edit controls in the dialog
            /// box to allocate memory from the application data segment. Otherwise, edit controls
            /// allocate storage from a global memory object.
            /// </summary>
            DS_LOCALEDIT = 0x20,
            /// <summary>
            /// Indicates that the header of the dialog box template contains additional data specifying
            /// the font to use for text in the client area and controls of the dialog box.
            /// </summary>
            DS_SETFONT = 0x40,
            /// <summary>
            /// Creates a dialog box with a modal dialog-box frame that can be combined with a title
            /// bar and window menu by specifying the WS_CAPTION and WS_SYSMENU styles.
            /// </summary>
            DS_MODALFRAME = 0x80,
            /// <summary>
            /// Suppresses WM_ENTERIDLE messages that the system would otherwise send to the owner of the
            /// dialog box while the dialog box is displayed.
            /// </summary>
            DS_NOIDLEMSG = 0x100,
            /// <summary>
            /// Causes the system to use the SetForegroundWindow function to bring the dialog 
            /// box to the foreground. 
            /// </summary>
            DS_SETFOREGROUND = 0x200,
            /// <summary>
            /// Gives the dialog box a nonbold font and draws three-dimensional borders around
            /// control windows in the dialog box. 
            /// </summary>
            DS_3DLOOK = 0x0004,
            /// <summary>
            /// Causes the dialog box to use the SYSTEM_FIXED_FONT instead of the default SYSTEM_FONT. 
            /// This is a monospace font compatible with the System font in 16-bit versions of Windows
            /// earlier than 3.0.
            /// </summary>
            DS_FIXEDSYS = 0x0008,
            /// <summary>
            /// Creates the dialog box even if errors occur â€” for example, if a child window cannot be 
            /// created or if the system cannot create a special data segment for an edit control.
            /// </summary>
            DS_NOFAILCREATE = 0x0010,
            /// <summary>
            /// Creates a dialog box that works well as a child window of another dialog box,
            /// much like a page in a property sheet. This style allows the user to tab among
            /// the control windows of a child dialog box, use its accelerator keys, and so on.
            /// </summary>
            DS_CONTROL = 0x0400,
            /// <summary>
            /// Centers the dialog box in the working area; that is, the area not obscured by the tray.
            /// </summary>
            DS_CENTER = 0x0800,
            /// <summary>
            /// Centers the dialog box on the mouse cursor.
            /// </summary>
            DS_CENTERMOUSE = 0x1000,
            /// <summary>
            /// Includes a question mark in the title bar of the dialog box. When the user clicks the 
            /// question mark, the cursor changes to a question mark with a pointer. If the user then 
            /// clicks a control in the dialog box, the control receives a WM_HELP message. The control
            /// should pass the message to the dialog box procedure, which should call the function 
            /// using the HELP_WM_HELP command. The help application displays a pop-up window that 
            /// typically contains help for the control. 
            /// </summary>
            DS_CONTEXTHELP = 0x2000,
            /// <summary>
            /// Indicates that the dialog box should use the system font.
            /// </summary>
            DS_SHELLFONT = DS_SETFONT | DS_FIXEDSYS,
            /// <summary>
            /// 
            /// </summary>
            DS_USEPIXELS = 0x8000
        }

        /// <summary>
        /// Extended dialog styles.
        /// </summary>
        public enum ExtendedDialogStyles : uint
        {
            /// <summary>
            /// Creates a window that has a double border; the window can, optionally, be created 
            /// with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            /// </summary>
            WS_EX_DLGMODALFRAME = 0x00000001,
            /// <summary>
            /// Specifies that a child window created with this style does not send the WM_PARENTNOTIFY 
            /// message to its parent window when it is created or destroyed.
            /// </summary>
            WS_EX_NOPARENTNOTIFY = 0x00000004,
            /// <summary>
            /// Specifies that a window created with this style should be placed above all non-topmost 
            /// windows and should stay above them, even when the window is deactivated. To add or remove
            /// this style, use the SetWindowPos function.
            /// </summary>
            WS_EX_TOPMOST = 0x00000008,
            /// <summary>
            /// Specifies that a window created with this style accepts drag-drop files.
            /// </summary>
            WS_EX_ACCEPTFILES = 0x00000010,
            /// <summary>
            /// Specifies that a window created with this style should not be painted until siblings beneath
            /// the window (that were created by the same thread) have been painted. The window appears 
            /// transparent because the bits of underlying sibling windows have already been painted.
            /// </summary>
            WS_EX_TRANSPARENT = 0x00000020,
            /// <summary>
            /// Creates a multiple-document interface (MDI) child window.
            /// </summary>
            WS_EX_MDICHILD = 0x00000040,
            /// <summary>
            /// Creates a tool window; that is, a window intended to be used as a floating toolbar. 
            /// A tool window has a title bar that is shorter than a normal title bar, and the
            /// window title is drawn using a smaller font. A tool window does not appear in 
            /// the taskbar or in the dialog that appears when the user presses ALT+TAB. If a 
            /// tool window has a system menu, its icon is not displayed on the title bar. However, 
            /// you can display the system menu by right-clicking or by typing ALT+SPACE. 
            /// </summary>
            WS_EX_TOOLWINDOW = 0x00000080,
            /// <summary>
            /// Specifies that a window has a border with a raised edge.
            /// </summary>
            WS_EX_WINDOWEDGE = 0x00000100,
            /// <summary>
            /// Specifies that a window has a border with a sunken edge.
            /// </summary>
            WS_EX_CLIENTEDGE = 0x00000200,
            /// <summary>
            /// Includes a question mark in the title bar of the window. When the user clicks the question mark,
            /// the cursor changes to a question mark with a pointer. If the user then clicks a child window,
            /// the child receives a WM_HELP message. The child window should pass the message to the parent
            /// window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The 
            /// Help application displays a pop-up window that typically contains help for the child window.
            /// </summary>
            WS_EX_CONTEXTHELP = 0x00000400,
            /// <summary>
            /// The window has generic "right-aligned" properties. This depends on the window class. This style has 
            /// an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order
            /// alignment; otherwise, the style is ignored. Using the WS_EX_RIGHT style for static or edit controls 
            /// has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with 
            /// button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles. 
            /// </summary>
            WS_EX_RIGHT = 0x00001000,
            /// <summary>
            /// Creates a window that has generic left-aligned properties. This is the default.
            /// </summary>
            WS_EX_LEFT = 0x00000000,
            /// <summary>
            /// If the shell language is Hebrew, Arabic, or another language that supports reading-order 
            /// alignment, the window text is displayed using right-to-left reading-order properties. 
            /// For other languages, the style is ignored.
            /// </summary>
            WS_EX_RTLREADING = 0x00002000,
            /// <summary>
            /// The window text is displayed using left-to-right reading-order properties. This is the default.
            /// </summary>
            WS_EX_LTRREADING = 0x00000000,
            /// <summary>
            /// If the shell language is Hebrew, Arabic, or another language that supports reading order 
            /// alignment, the vertical scroll bar (if present) is to the left of the client area. For other
            /// languages, the style is ignored.
            /// </summary>
            WS_EX_LEFTSCROLLBAR = 0x00004000,
            /// <summary>
            /// Vertical scroll bar (if present) is to the right of the client area. This is the default.
            /// </summary>
            WS_EX_RIGHTSCROLLBAR = 0x00000000,
            /// <summary>
            /// The window itself contains child windows that should take part in dialog box navigation. 
            /// If this style is specified, the dialog manager recurses into children of this window when
            /// performing navigation operations such as handling the TAB key, an arrow key, or a 
            /// keyboard mnemonic.
            /// </summary>
            WS_EX_CONTROLPARENT = 0x00010000,
            /// <summary>
            /// Creates a window with a three-dimensional border style intended to be used for items that 
            /// do not accept user input.
            /// </summary>
            WS_EX_STATICEDGE = 0x00020000,
            /// <summary>
            /// Forces a top-level window onto the taskbar when the window is visible.
            /// </summary>
            WS_EX_APPWINDOW = 0x00040000,
            /// <summary>
            /// Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            /// </summary>
            WS_EX_OVERLAPPEDWINDOW = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE),
            /// <summary>
            /// Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            /// </summary>
            WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST),
            /// <summary>
            /// Windows 2000/XP: Creates a layered window. Note that this cannot be used for child 
            /// windows. Also, this cannot be used if the window has a class style of either CS_OWNDC
            /// or CS_CLASSDC. 
            /// </summary>
            WS_EX_LAYERED = 0x00080000,
            /// <summary>
            /// Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            /// </summary>
            WS_EX_NOINHERITLAYOUT = 0x00100000,
            /// <summary>
            /// Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose
            /// horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            /// </summary>
            WS_EX_LAYOUTRTL = 0x00400000,
            /// <summary>
            /// Windows XP: Paints all descendants of a window in bottom-to-top painting order 
            /// using double-buffering. For more information, see Remarks. This cannot be used
            /// if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            /// </summary>
            WS_EX_COMPOSITED = 0x02000000,
            /// <summary>
            /// Windows 2000/XP: A top-level window created with this style does not become the foreground
            /// window when the user clicks it. The system does not bring this window to the foreground 
            /// when the user minimizes or closes the foreground window.
            /// </summary>
            WS_EX_NOACTIVATE = 0x08000000,
        }

        /// <summary>
        /// Possible DIALOGEXITEMTEMPLATE WindowClass ordinals.
        /// </summary>
        public enum DialogItemClass : uint
        {
            /// <summary>
            /// A button.
            /// </summary>
            Button = 0x0080,
            /// <summary>
            /// An edit box.
            /// </summary>
            Edit = 0x0081,
            /// <summary>
            /// A static control.
            /// </summary>
            Static = 0x0082,
            /// <summary>
            /// A list box.
            /// </summary>
            ListBox = 0x0083,
            /// <summary>
            /// A scroll bar.
            /// </summary>
            ScrollBar = 0x0084,
            /// <summary>
            /// A combo box.
            /// </summary>
            ComboBox = 0x0085
        }

        /// <summary>
        /// Static control styles.
        /// A static control specifies the STATIC class, appropriate window style constants, 
        /// and a combination of the following static control styles.
        /// http://msdn.microsoft.com/en-us/library/bb760773(VS.85).aspx
        /// </summary>
        public enum StaticControlStyles : uint
        {
            /// <summary>
            /// Specifies a simple rectangle and left-aligns the text in the rectangle. 
            /// The text is formatted before it is displayed. Words that extend past the 
            /// end of a line are automatically wrapped to the beginning of the next left-aligned
            /// line. Words that are longer than the width of the control are truncated.
            /// </summary>
            SS_LEFT = 0x00000000,
            /// <summary>
            /// Specifies a simple rectangle and centers the text in the rectangle. 
            /// The text is formatted before it is displayed. Words that extend past the 
            /// end of a line are automatically wrapped to the beginning of the next centered 
            /// line. Words that are longer than the width of the control are truncated.
            /// </summary>
            SS_CENTER = 0x00000001,
            /// <summary>
            /// Specifies a simple rectangle and right-aligns the text in the rectangle. 
            /// The text is formatted before it is displayed. Words that extend past the 
            /// end of a line are automatically wrapped to the beginning of the next 
            /// right-aligned line. Words that are longer than the width of the control 
            /// are truncated.
            /// </summary>
            SS_RIGHT = 0x00000002,
            /// <summary>
            /// Specifies an icon to be displayed in the dialog box. If the control is created 
            /// as part of a dialog box, the text is the name of an icon (not a filename) defined 
            /// elsewhere in the resource file. If the control is created via CreateWindow or a 
            /// related function, the text is the name of an icon (not a filename) defined in the
            /// resource file associated with the module specified by the hInstance parameter to 
            /// CreateWindow. The icon can be an animated cursor.
            /// </summary>
            SS_ICON = 0x00000003,
            /// <summary>
            /// Specifies a rectangle filled with the current window frame color.
            /// This color is black in the default color scheme.
            /// </summary>
            SS_BLACKRECT = 0x00000004,
            /// <summary>
            /// Specifies a rectangle filled with the current screen background color. 
            /// This color is gray in the default color scheme.
            /// </summary>
            SS_GRAYRECT = 0x00000005,
            /// <summary>
            /// Specifies a rectangle filled with the current window background color. This color is white 
            /// in the default color scheme.
            /// </summary>
            SS_WHITERECT = 0x00000006,
            /// <summary>
            /// Specifies a box with a frame drawn in the same color as the window frames. 
            /// This color is black in the default color scheme.
            /// </summary>
            SS_BLACKFRAME = 0x00000007,
            /// <summary>
            /// Specifies a box with a frame drawn with the same color as the screen background (desktop).
            /// This color is gray in the default color scheme.
            /// </summary>
            SS_GRAYFRAME = 0x00000008,
            /// <summary>
            /// Specifies a box with a frame drawn with the same color as the window background. This color is 
            /// white in the default color scheme.
            /// </summary>
            SS_WHITEFRAME = 0x00000009,
            /// <summary>
            /// 
            /// </summary>
            SS_USERITEM = 0x0000000A,
            /// <summary>
            /// Specifies a simple rectangle and displays a single line of left-aligned text in the rectangle.
            /// The text line cannot be shortened or altered in any way. Also, if the control is disabled,
            /// the control does not gray its text.
            /// </summary>
            SS_SIMPLE = 0x0000000B,
            /// <summary>
            /// Specifies a simple rectangle and left-aligns the text in the rectangle. 
            /// Tabs are expanded, but words are not wrapped. Text that extends past the 
            /// end of a line is clipped.
            /// </summary>
            SS_LEFTNOWORDWRAP = 0x0000000C,
            /// <summary>
            /// Specifies that the owner of the static control is responsible for drawing 
            /// the control. The owner window receives a WM_DRAWITEM message whenever the
            /// control needs to be drawn.
            /// </summary>
            SS_OWNERDRAW = 0x0000000D,
            /// <summary>
            /// Specifies that a bitmap is to be displayed in the static control. 
            /// The text is the name of a bitmap (not a filename) defined elsewhere in the 
            /// resource file. The style ignores the nWidth and nHeight parameters; the control 
            /// automatically sizes itself to accommodate the bitmap.
            /// </summary>
            SS_BITMAP = 0x0000000E,
            /// <summary>
            /// Specifies that an enhanced metafile is to be displayed in the static control.
            /// The text is the name of a metafile. An enhanced metafile static control has a 
            /// fixed size; the metafile is scaled to fit the static control's client area.
            /// </summary>
            SS_ENHMETAFILE = 0x0000000F,
            /// <summary>
            /// Draws the top and bottom edges of the static control using the EDGE_ETCHED edge style.
            /// </summary>
            SS_ETCHEDHORZ = 0x00000010,
            /// <summary>
            /// Draws the left and right edges of the static control using the EDGE_ETCHED edge style.
            /// </summary>
            SS_ETCHEDVERT = 0x00000011,
            /// <summary>
            /// Draws the frame of the static control using the EDGE_ETCHED edge style. 
            /// </summary>
            SS_ETCHEDFRAME = 0x00000012,
            /// <summary>
            /// Windows 2000: A composite style bit that results from using the OR operator on 
            /// SS_* style bits. Can be used to mask out valid SS_* bits from a given bitmask.
            /// Note that this is out of date and does not correctly include all valid styles.
            /// Thus, you should not use this style.
            /// </summary>
            SS_TYPEMASK = 0x0000001F,
            /// <summary>
            /// Windows XP or later: Adjusts the bitmap to fit the size of the static control.
            /// For example, changing the locale can change the system font, and thus controls
            /// might be resized. If a static control had a bitmap, the bitmap would no longer
            /// fit the control. This style bit dictates automatic redimensioning of bitmaps 
            /// to fit their controls. 
            /// </summary>
            SS_REALSIZECONTROL = 0x00000040,
            /// <summary>
            /// Prevents interpretation of any ampersand characters in the control's text as
            /// accelerator prefix characters. These are displayed with the ampersand removed and 
            /// the next character in the string underlined. This static control style may be 
            /// included with any of the defined static controls. You can combine SS_NOPREFIX 
            /// with other styles. This can be useful when filenames or other strings that may 
            /// contain an ampersand must be displayed in a static control in a dialog box.
            /// </summary>
            SS_NOPREFIX = 0x00000080,
            /// <summary>
            /// Sends the parent window STN_CLICKED, STN_DBLCLK, STN_DISABLE, and STN_ENABLE 
            /// notification messages when the user clicks or double-clicks the control.
            /// </summary>
            SS_NOTIFY = 0x00000100,
            /// <summary>
            /// Specifies that a bitmap is centered in the static control that contains it. 
            /// The control is not resized, so that a bitmap too large for the control will 
            /// be clipped. If the static control contains a single line of text, the text 
            /// is centered vertically in the client area of the control. 
            /// </summary>
            SS_CENTERIMAGE = 0x00000200,
            /// <summary>
            /// Specifies that the lower right corner of a static control with the SS_BITMAP
            /// or SS_ICON style is to remain fixed when the control is resized. Only the top
            /// and left sides are adjusted to accommodate a new bitmap or icon.
            /// </summary>
            SS_RIGHTJUST = 0x00000400,
            /// <summary>
            /// Specifies that the actual resource width is used and the icon is loaded using
            /// LoadImage. SS_REALSIZEIMAGE is always used in conjunction with SS_ICON. 
            /// </summary>
            SS_REALSIZEIMAGE = 0x00000800,
            /// <summary>
            /// Draws a half-sunken border around a static control.
            /// </summary>
            SS_SUNKEN = 0x00001000,
            /// <summary>
            /// Microsoft Windows 2000: Specifies that the static control duplicates the 
            /// text-displaying characteristics of a multiline edit control. Specifically, the 
            /// average character width is calculated in the same manner as with an edit control, 
            /// and the function does not display a partially visible last line.
            /// </summary>
            SS_EDITCONTROL = 0x00002000,
            /// <summary>
            /// Microsoft Windows NT or later: If the end of a string does not fit in the rectangle,
            /// it is truncated and ellipses are added. If a word that is not at the end of the string 
            /// goes beyond the limits of the rectangle, it is truncated without ellipses. Using this 
            /// style will force the controlÂ’s text to be on one line with no word wrap. Compare with 
            /// SS_PATHELLIPSIS and SS_WORDELLIPSIS.
            /// </summary>
            SS_ENDELLIPSIS = 0x00004000,
            /// <summary>
            /// Windows NT or later: Replaces characters in the middle of the string with ellipses so 
            /// that the result fits in the specified rectangle. If the string contains backslash (\) 
            /// characters, SS_PATHELLIPSIS preserves as much as possible of the text after the last 
            /// backslash. Using this style will force the controlÂ’s text to be on one line with no 
            /// word wrap. Compare with SS_ENDELLIPSIS and SS_WORDELLIPSIS.
            /// </summary>
            SS_PATHELLIPSIS = 0x00008000,
            /// <summary>
            /// Windows NT or later: Truncates any word that does not fit in the rectangle and adds ellipses. 
            /// Using this style will force the controlÂ’s text to be on one line with no word wrap. 
            /// </summary>
            SS_WORDELLIPSIS = 0x0000C000,
            /// <summary>
            /// 
            /// </summary>
            SS_ELLIPSISMASK = 0x0000C000,
        }

        /// <summary>
        /// Push button styles.
        /// http://msdn.microsoft.com/en-us/library/bb775951(VS.85).aspx
        /// </summary>
        public enum ButtonControlStyles : uint
        {
            /// <summary>
            /// Creates a push button that posts a WM_COMMAND message to the owner window when the
            /// user selects the button.
            /// </summary>
            BS_PUSHBUTTON = 0x00000000,
            /// <summary>
            /// Creates a push button that behaves like a BS_PUSHBUTTON style button, but has a distinct
            /// appearance. If the button is in a dialog box, the user can select the button by pressing
            /// the ENTER key, even when the button does not have the input focus. This style is useful 
            /// for enabling the user to quickly select the most likely (default) option.
            /// </summary>
            BS_DEFPUSHBUTTON = 0x00000001,
            /// <summary>
            /// Creates a small, empty check box with text. By default, the text is displayed to
            /// the right of the check box. To display the text to the left of the check box, 
            /// combine this flag with the BS_LEFTTEXT style (or with the equivalent BS_RIGHTBUTTON style).
            /// </summary>
            BS_CHECKBOX = 0x00000002,
            /// <summary>
            /// Creates a button that is the same as a check box, except that the check state 
            /// automatically toggles between checked and cleared each time the user selects the
            /// check box.
            /// </summary>
            BS_AUTOCHECKBOX = 0x00000003,
            /// <summary>
            /// Creates a small circle with text. By default, the text is displayed to the right of the
            /// circle. To display the text to the left of the circle, combine this flag with the 
            /// BS_LEFTTEXT style (or with the equivalent BS_RIGHTBUTTON style). Use radio buttons for 
            /// groups of related, but mutually exclusive choices.
            /// </summary>
            BS_RADIOBUTTON = 0x00000004,
            /// <summary>
            /// Creates a button that is the same as a check box, except that the box can be grayed
            /// as well as checked or cleared. Use the grayed state to show that the state of the 
            /// check box is not determined.
            /// </summary>
            BS_3STATE = 0x00000005,
            /// <summary>
            /// Creates a button that is the same as a three-state check box, except that the box 
            /// changes its state when the user selects it. The state cycles through checked, 
            /// indeterminate, and cleared.
            /// </summary>
            BS_AUTO3STATE = 0x00000006,
            /// <summary>
            /// Creates a rectangle in which other controls can be grouped. Any text associated with
            /// this style is displayed in the rectangle's upper left corner.
            /// </summary>
            BS_GROUPBOX = 0x00000007,
            /// <summary>
            /// Obsolete, but provided for compatibility with 16-bit versions of Windows. Applications 
            /// should use BS_OWNERDRAW instead.
            /// </summary>
            BS_USERBUTTON = 0x00000008,
            /// <summary>
            /// Creates a button that is the same as a radio button, except that when the user selects it,
            /// the system automatically sets the button's check state to checked and automatically sets 
            /// the check state for all other buttons in the same group to cleared.
            /// </summary>
            BS_AUTORADIOBUTTON = 0x00000009,
            /// <summary>
            /// 
            /// </summary>
            BS_PUSHBOX = 0x0000000A,
            /// <summary>
            /// Creates an owner-drawn button. The owner window receives a WM_DRAWITEM message when a visual 
            /// aspect of the button has changed. Do not combine the BS_OWNERDRAW style with any other
            /// button styles.
            /// </summary>
            BS_OWNERDRAW = 0x0000000B,
            /// <summary>
            /// Microsoft Windows 2000: A composite style bit that results from using the OR operator on
            /// BS_* style bits. It can be used to mask out valid BS_* bits from a given bitmask.
            /// </summary>
            BS_TYPEMASK = 0x0000000F,
            /// <summary>
            /// Places text on the left side of the radio button or check box when combined with a radio button
            /// or check box style. Same as the BS_RIGHTBUTTON style.
            /// </summary>
            BS_LEFTTEXT = 0x00000020,
            /// <summary>
            /// Specifies that the button displays text.
            /// </summary>
            BS_TEXT = 0x00000000,
            /// <summary>
            /// Specifies that the button displays an icon.
            /// </summary>
            BS_ICON = 0x00000040,
            /// <summary>
            /// Specifies that the button displays a bitmap. See the Remarks section for its interaction
            /// with BS_ICON.
            /// </summary>
            BS_BITMAP = 0x00000080,
            /// <summary>
            /// Left-justifies the text in the button rectangle. However, if the button is a check box or radio
            /// button that does not have the BS_RIGHTBUTTON style, the text is left justified on the right side
            /// of the check box or radio button.
            /// </summary>
            BS_LEFT = 0x00000100,
            /// <summary>
            /// Right-justifies text in the button rectangle. However, if the button is a check box or radio
            /// button that does not have the BS_RIGHTBUTTON style, the text is right justified on the right
            /// side of the check box or radio button.
            /// </summary>
            BS_RIGHT = 0x00000200,
            /// <summary>
            /// Centers text horizontally in the button rectangle.
            /// </summary>
            BS_CENTER = 0x00000300,
            /// <summary>
            /// Places text at the top of the button rectangle.
            /// </summary>
            BS_TOP = 0x00000400,
            /// <summary>
            /// Places text at the bottom of the button rectangle.
            /// </summary>
            BS_BOTTOM = 0x00000800,
            /// <summary>
            /// Places text in the middle (vertically) of the button rectangle.
            /// </summary>
            BS_VCENTER = 0x00000C00,
            /// <summary>
            /// Makes a button (such as a check box, three-state check box, or radio button) look and 
            /// act like a push button. The button looks raised when it isn't pushed or checked, and 
            /// sunken when it is pushed or checked.
            /// </summary>
            BS_PUSHLIKE = 0x00001000,
            /// <summary>
            /// Wraps the button text to multiple lines if the text string is too long to fit on a 
            /// single line in the button rectangle.
            /// </summary>
            BS_MULTILINE = 0x00002000,
            /// <summary>
            /// Enables a button to send BN_KILLFOCUS and BN_SETFOCUS notification messages to its 
            /// parent window. 
            /// </summary>
            BS_NOTIFY = 0x00004000,
            /// <summary>
            /// Specifies that the button is two-dimensional; it does not use the default 
            /// shading to create a 3-D image. 
            /// </summary>
            BS_FLAT = 0x00008000,
            /// <summary>
            /// Microsoft Windows Vista and Version 6.00. Creates a split button that behaves like a 
            /// BS_PUSHBUTTON style button, but also has a distinctive appearance. If the split button 
            /// is in a dialog box, the user can select the split button by pressing the ENTER key, even 
            /// when the split button does not have the input focus. This style is useful for enabling
            /// the user to quickly select the most likely (default) option.
            /// </summary>
            BS_DEFSPLITBUTTON = 0x0000000D,
            /// <summary>
            /// Microsoft Windows Vista and Version 6.00. Creates a command link button that behaves like a
            /// BS_PUSHBUTTON style button, but the command link button has a green arrow on the left pointing
            /// to the button text. A caption for the button text can be set by sending the BCM_SETNOTE
            /// message to the button.
            /// </summary>
            BS_COMMANDLINK = 0x0000000E,
            /// <summary>
            /// Microsoft Windows Vista and Version 6.00. Creates a command link button that behaves like
            /// a BS_PUSHBUTTON style button. If the button is in a dialog box, the user can select the 
            /// command link button by pressing the ENTER key, even when the command link button does
            /// not have the input focus. This style is useful for enabling the user to quickly select
            /// the most likely (default) option.
            /// </summary>
            BS_DEFCOMMANDLINK = 0x0000000F,
        }

        /// <summary>
        /// Edit control styles.
        /// http://msdn.microsoft.com/en-us/library/bb775464(VS.85).aspx
        /// </summary>
        public enum EditControlStyles : uint
        {
            /// <summary>
            /// Aligns text with the left margin.
            /// </summary>
            ES_LEFT = 0x0000,
            /// <summary>
            /// Windows 98/Me, Windows 2000/XP: Centers text in a single-line or multiline edit control.
            /// Windows 95, Windows NT 4.0 and earlier: Centers text in a multiline edit control.
            /// </summary>
            ES_CENTER = 0x0001,
            /// <summary>
            /// Windows 98/Me, Windows 2000/XP: Right-aligns text in a single-line or multiline edit control.
            /// Windows 95, Windows NT 4.0 and earlier: Right aligns text in a multiline edit control.
            /// </summary>
            ES_RIGHT = 0x0002,
            /// <summary>
            /// Designates a multiline edit control. The default is single-line edit control. 
            /// </summary>
            ES_MULTILINE = 0x0004,
            /// <summary>
            /// Converts all characters to uppercase as they are typed into the edit control. 
            /// </summary>
            ES_UPPERCASE = 0x0008,
            /// <summary>
            /// Converts all characters to lowercase as they are typed into the edit control.
            /// </summary>
            ES_LOWERCASE = 0x0010,
            /// <summary>
            /// Displays an asterisk (*) for each character typed into the edit control. 
            /// This style is valid only for single-line edit controls. 
            /// </summary>
            ES_PASSWORD = 0x0020,
            /// <summary>
            /// Automatically scrolls text up one page when the user presses the ENTER key on 
            /// the last line.
            /// </summary>
            ES_AUTOVSCROLL = 0x0040,
            /// <summary>
            /// Automatically scrolls text to the right by 10 characters when the user types
            /// a character at the end of the line. When the user presses the ENTER key, 
            /// the control scrolls all text back to position zero.
            /// </summary>
            ES_AUTOHSCROLL = 0x0080,
            /// <summary>
            /// Negates the default behavior for an edit control. 
            /// </summary>
            ES_NOHIDESEL = 0x0100,
            /// <summary>
            /// Converts text entered in the edit control.
            /// </summary>
            ES_OEMCONVERT = 0x0400,
            /// <summary>
            /// Prevents the user from typing or editing text in the edit control.
            /// </summary>
            ES_READONLY = 0x0800,
            /// <summary>
            /// Specifies that a carriage return be inserted when the user presses the 
            /// ENTER key while entering text into a multiline edit control in a dialog box. 
            /// If you do not specify this style, pressing the ENTER key has the same effect
            /// as pressing the dialog box's default push button. This style has no effect 
            /// on a single-line edit control. 
            /// </summary>
            ES_WANTRETURN = 0x1000,
            /// <summary>
            /// Allows only digits to be entered into the edit control. 
            /// </summary>
            ES_NUMBER = 0x2000,
        }

        /// <summary>
        /// Defines the header for a menu template. 
        /// A complete menu template consists of a header and one or more menu item lists. 
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        internal struct MENUTEMPLATE
        {
            /// <summary>
            /// Specifies the version number. This member must be zero. 
            /// </summary>
            public UInt16 wVersion;
            /// <summary>
            /// Specifies the offset, in bytes, from the end of the header. 
            /// The menu item list begins at this offset. Usually, this member is zero, and the menu 
            /// item list follows immediately after the header. 
            /// </summary>
            public UInt16 wOffset;
        }

        /// <summary>
        /// Defines a menu item in a menu template.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct MENUITEMTEMPLATE
        {
            /// <summary>
            /// Specifies one or more of the following predefined menu options that control the appearance of the menu item.
            ///  TODO
            /// </summary>
            public UInt16 mtOption;
        }

        /// <summary>
        /// Defines the header for an extended menu template.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct MENUEXTEMPLATE
        {
            /// <summary>
            /// Template version number. This member must be 1 for extended menu templates.
            /// </summary>
            public UInt16 wVersion;
            /// <summary>
            /// Offset of the first MENUEXITEMTEMPLATE structure, relative to the end of 
            /// this structure member. If the first item definition immediately follows the 
            /// dwHelpId member, this member should be 4. 
            /// </summary>
            public UInt16 wOffset;
        }

        /// <summary>
        /// Drop-down menu or submenu item.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct MENUEXITEMTEMPLATE
        {
            /// <summary>
            /// Menu item type. This member can be a combination of the type (beginning with MFT) values 
            /// listed with the MENUITEMINFO structure. 
            /// </summary>
            public UInt32 dwType;
            /// <summary>
            /// Menu item state. This member can be a combination of the state (beginning with MFS) values 
            /// listed with the MENUITEMINFO structure. 
            /// </summary>
            public UInt32 dwState;
            /// <summary>
            /// Menu item identifier. This is an application-defined value that identifies the menu item. 
            /// </summary>
            public UInt32 dwMenuId;
            /// <summary>
            /// Value specifying whether the menu item is the last item in the menu bar, drop-down menu, 
            /// submenu, or shortcut menu and whether it is an item that opens a drop-down menu or submenu.
            /// </summary>
            public UInt16 bResInfo;
        }

        /// <summary>
        /// Specifies one or more of the following predefined menu options that control the 
        /// appearance of the menu item.
        /// </summary>
        public enum MenuFlags : uint
        {
            /// <summary>
            /// 
            /// </summary>
            MF_INSERT = 0x00000000,
            /// <summary>
            /// 
            /// </summary>
            MF_CHANGE = 0x00000080,
            /// <summary>
            /// 
            /// </summary>
            MF_APPEND = 0x00000100,
            /// <summary>
            /// 
            /// </summary>
            MF_DELETE = 0x00000200,
            /// <summary>
            /// 
            /// </summary>
            MF_REMOVE = 0x00001000,
            /// <summary>
            /// 
            /// </summary>
            MF_BYCOMMAND = 0x00000000,
            /// <summary>
            /// 
            /// </summary>
            MF_BYPOSITION = 0x00000400,
            /// <summary>
            /// 
            /// </summary>
            MF_SEPARATOR = 0x00000800,
            /// <summary>
            /// 
            /// </summary>
            MF_ENABLED = 0x00000000,
            /// <summary>
            /// Indicates that the menu item is initially inactive and drawn with a gray effect.
            /// </summary>
            MF_GRAYED = 0x00000001,
            /// <summary>
            /// 
            /// </summary>
            MF_DISABLED = 0x00000002,
            /// <summary>
            /// 
            /// </summary>
            MF_UNCHECKED = 0x00000000,
            /// <summary>
            /// Indicates that the menu item has a check mark next to it.
            /// </summary>
            MF_CHECKED = 0x00000008,
            /// <summary>
            /// 
            /// </summary>
            MF_USECHECKBITMAPS = 0x00000200,
            /// <summary>
            /// 
            /// </summary>
            MF_STRING = 0x00000000,
            /// <summary>
            /// 
            /// </summary>
            MF_BITMAP = 0x00000004,
            /// <summary>
            /// Indicates that the owner window of the menu is responsible for drawing all visual 
            /// aspects of the menu item, including highlighted, selected, and inactive states. 
            /// This option is not valid for an item in a menu bar.
            /// </summary>
            MF_OWNERDRAW = 0x00000100,
            /// <summary>
            /// Indicates that the item is one that opens a drop-down menu or submenu.
            /// </summary>
            MF_POPUP = 0x00000010,
            /// <summary>
            /// Indicates that the menu item is placed in a new column. The old and new columns 
            /// are separated by a bar.
            /// </summary>
            MF_MENUBARBREAK = 0x00000020,
            /// <summary>
            /// Indicates that the menu item is placed in a new column.
            /// </summary>
            MF_MENUBREAK = 0x00000040,
            /// <summary>
            /// 
            /// </summary>
            MF_UNHILITE = 0x00000000,
            /// <summary>
            /// 
            /// </summary>
            MF_HILITE = 0x00000080,
            /// <summary>
            /// 
            /// </summary>
            MF_DEFAULT = 0x00001000,
            /// <summary>
            /// 
            /// </summary>
            MF_SYSMENU = 0x00002000,
            /// <summary>
            /// Indicates that the menu item has a vertical separator to its left.
            /// </summary>
            MF_HELP = 0x00004000,
            /// <summary>
            /// 
            /// </summary>
            MF_RIGHTJUSTIFY = 0x00004000,
            /// <summary>
            /// 
            /// </summary>
            MF_MOUSESELECT = 0x00008000,
            /// <summary>
            /// 
            /// </summary>
            MF_END = 0x00000080,
            /// <summary>
            /// 
            /// </summary>
            MFT_STRING = MF_STRING,
            /// <summary>
            /// 
            /// </summary>
            MFT_BITMAP = MF_BITMAP,
            /// <summary>
            /// 
            /// </summary>
            MFT_MENUBARBREAK = MF_MENUBARBREAK,
            /// <summary>
            /// 
            /// </summary>
            MFT_MENUBREAK = MF_MENUBREAK,
            /// <summary>
            /// 
            /// </summary>
            MFT_OWNERDRAW = MF_OWNERDRAW,
            /// <summary>
            /// 
            /// </summary>
            MFT_RADIOCHECK = 0x00000200,
            /// <summary>
            /// 
            /// </summary>
            MFT_SEPARATOR = MF_SEPARATOR,
            /// <summary>
            /// 
            /// </summary>
            MFT_RIGHTORDER = 0x00002000,
            /// <summary>
            /// 
            /// </summary>
            MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY,
            /// <summary>
            /// 
            /// </summary>
            MFS_GRAYED = 0x00000003,
            /// <summary>
            /// 
            /// </summary>
            MFS_DISABLED = MFS_GRAYED,
            /// <summary>
            /// 
            /// </summary>
            MFS_CHECKED = MF_CHECKED,
            /// <summary>
            /// 
            /// </summary>
            MFS_HILITE = MF_HILITE,
            /// <summary>
            /// 
            /// </summary>
            MFS_ENABLED = MF_ENABLED,
            /// <summary>
            /// 
            /// </summary>
            MFS_UNCHECKED = MF_UNCHECKED,
            /// <summary>
            /// 
            /// </summary>
            MFS_UNHILITE = MF_UNHILITE,
            /// <summary>
            /// 
            /// </summary>
            MFS_DEFAULT = MF_DEFAULT
        }


        /// <summary>
        /// Specifies whether the menu item is the last item in the menu bar, drop-down menu, submenu, or shortcut 
        /// menu and whether it is an item that opens a drop-down menu or submenu. This member can be zero or more 
        /// of these values.
        /// </summary>
        public enum MenuResourceType
        {
            /// <summary>
            /// Defines the last menu item in the menu bar, drop-down menu, submenu, or shortcut menu.
            /// </summary>
            Last = 0x80,
            /// <summary>
            /// Defines a item that opens a drop-down menu or submenu. Subsequent structures define menu 
            /// items in the corresponding drop-down menu or submenu.
            /// </summary>
            Sub = 0x01
        }

        /// <summary>
        /// Defines an accelerator key used in an accelerator table.
        /// http://msdn.microsoft.com/en-us/library/ms646340(VS.85).aspx
        /// </summary>
        [StructLayout(LayoutKind.Sequential, Pack = 2)]
        public struct ACCEL
        {
            /// <summary>
            /// Accelerator flags.
            /// </summary>
            public UInt16 fVirt;
            /// <summary>
            /// Accelerator key. This member can be either a virtual-key code or an ASCII character code. 
            /// </summary>
            public UInt16 key;
            /// <summary>
            /// Accelerator identifier.
            /// </summary>
            public UInt32 cmd;
        }

        /// <summary>
        /// Flags, fVirt field of the Accelerator table structure.
        /// </summary>
        public enum AcceleratorVirtualKey : uint
        {
            /// <summary>
            /// Virtual key.
            /// </summary>
            VIRTKEY = 0x01,
            /// <summary>
            /// Specifies that no top-level menu item is highlighted when the accelerator is used. 
            /// This is useful when defining accelerators for actions such as scrolling that do not 
            /// correspond to a menu item. If NOINVERT is omitted, a top-level menu item will be 
            /// highlighted (if possible) when the accelerator is used.
            /// </summary>
            NOINVERT = 0x02,
            /// <summary>
            /// Causes the accelerator to be activated only if the SHIFT key is down. 
            /// Applies only to virtual keys.
            /// </summary>
            SHIFT = 0x04,
            /// <summary>
            /// Causes the accelerator to be activated only if the CONTROL key is down. 
            /// Applies only to virtual keys.
            /// </summary>
            CONTROL = 0x08,
            /// <summary>
            /// Causes the accelerator to be activated only if the ALT key is down. 
            /// Applies only to virtual keys.
            /// </summary>
            ALT = 0x10
        }

        /// <summary>
        /// Virtual key definitions.
        /// </summary>
        public enum VirtualKeys : uint
        {
            /// <summary>
            /// Standard virtual left mouse button.
            /// </summary>
            VK_LBUTTON = 0x01,
            /// <summary>
            /// Standard virtual right mouse button.
            /// </summary>
            VK_RBUTTON = 0x02,
            /// <summary>
            /// Ctrl-Break / Ctrl-C.
            /// </summary>
            VK_CANCEL = 0x03,
            /// <summary>
            /// Standard virtual middle mouse button.
            /// </summary>
            VK_MBUTTON = 0x04,
            /// <summary>
            /// 
            /// </summary>
            VK_XBUTTON1 = 0x05,
            /// <summary>
            /// 
            /// </summary>
            VK_XBUTTON2 = 0x06,
            /// <summary>
            /// Backspace.
            /// </summary>
            VK_BACK = 0x08,
            /// <summary>
            /// Tab.
            /// </summary>
            VK_TAB = 0x09,
            /// <summary>
            /// Delete.
            /// </summary>
            VK_CLEAR = 0x0C,
            /// <summary>
            /// Return.
            /// </summary>
            VK_RETURN = 0x0D,
            /// <summary>
            /// Shift.
            /// </summary>
            VK_SHIFT = 0x10,
            /// <summary>
            /// Control.
            /// </summary>
            VK_CONTROL = 0x11,
            /// <summary>
            /// Menu.
            /// </summary>
            VK_MENU = 0x12,
            /// <summary>
            /// Pause.
            /// </summary>
            VK_PAUSE = 0x13,
            /// <summary>
            /// Caps lock.
            /// </summary>
            VK_CAPITAL = 0x14,
            /// <summary>
            /// 
            /// </summary>
            VK_KANA = 0x15,
            /// <summary>
            ///
            /// </summary>
            VK_JUNJA = 0x17,
            /// <summary>
            /// 
            /// </summary>
            VK_FINAL = 0x18,
            /// <summary>
            /// 
            /// </summary>
            VK_KANJI = 0x19,
            /// <summary>
            /// Escape.
            /// </summary>
            VK_ESCAPE = 0x1B,
            /// <summary>
            /// 
            /// </summary>
            VK_CONVERT = 0x1C,
            /// <summary>
            ///
            /// </summary>
            VK_NONCONVERT = 0x1D,
            /// <summary>
            ///
            /// </summary>
            VK_ACCEPT = 0x1E,
            /// <summary>
            ///
            /// </summary>
            VK_MODECHANGE = 0x1F,
            /// <summary>
            /// Space.
            /// </summary>
            VK_SPACE = 0x20,
            /// <summary>
            ///
            /// </summary>
            VK_PRIOR = 0x21,
            /// <summary>
            ///
            /// </summary>
            VK_NEXT = 0x22,
            /// <summary>
            /// End.
            /// </summary>
            VK_END = 0x23,
            /// <summary>
            /// Home.
            /// </summary>
            VK_HOME = 0x24,
            /// <summary>
            /// Left arrow.
            /// </summary>
            VK_LEFT = 0x25,
            /// <summary>
            /// Up arrow.
            /// </summary>
            VK_UP = 0x26,
            /// <summary>
            /// Right arrow.
            /// </summary>
            VK_RIGHT = 0x27,
            /// <summary>
            /// Down arrow.
            /// </summary>
            VK_DOWN = 0x28,
            /// <summary>
            ///
            /// </summary>
            VK_SELECT = 0x29,
            /// <summary>
            /// Print Screen.
            /// </summary>
            VK_PRINT = 0x2A,
            /// <summary>
            ///
            /// </summary>
            VK_EXECUTE = 0x2B,
            /// <summary>
            ///
            /// </summary>
            VK_SNAPSHOT = 0x2C,
            /// <summary>
            /// Insert.
            /// </summary>
            VK_INSERT = 0x2D,
            /// <summary>
            /// Delete.
            /// </summary>
            VK_DELETE = 0x2E,
            /// <summary>
            ///
            /// </summary>
            VK_HELP = 0x2F,
            /// <summary>
            ///
            /// </summary>
            VK_LWIN = 0x5B,
            /// <summary>
            ///
            /// </summary>
            VK_RWIN = 0x5C,
            /// <summary>
            ///
            /// </summary>
            VK_APPS = 0x5D,
            /// <summary>
            ///
            /// </summary>
            VK_SLEEP = 0x5F,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD0 = 0x60,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD1 = 0x61,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD2 = 0x62,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD3 = 0x63,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD4 = 0x64,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD5 = 0x65,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD6 = 0x66,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD7 = 0x67,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD8 = 0x68,
            /// <summary>
            ///
            /// </summary>
            VK_NUMPAD9 = 0x69,
            /// <summary>
            ///
            /// </summary>
            VK_MULTIPLY = 0x6A,
            /// <summary>
            ///
            /// </summary>
            VK_ADD = 0x6B,
            /// <summary>
            ///
            /// </summary>
            VK_SEPARATOR = 0x6C,
            /// <summary>
            ///
            /// </summary>
            VK_SUBTRACT = 0x6D,
            /// <summary>
            ///
            /// </summary>
            VK_DECIMAL = 0x6E,
            /// <summary>
            ///
            /// </summary>
            VK_DIVIDE = 0x6F,
            /// <summary>
            ///
            /// </summary>
            VK_F1 = 0x70,
            /// <summary>
            ///
            /// </summary>
            VK_F2 = 0x71,
            /// <summary>
            ///
            /// </summary>
            VK_F3 = 0x72,
            /// <summary>
            ///
            /// </summary>
            VK_F4 = 0x73,
            /// <summary>
            ///
            /// </summary>
            VK_F5 = 0x74,
            /// <summary>
            ///
            /// </summary>
            VK_F6 = 0x75,
            /// <summary>
            ///
            /// </summary>
            VK_F7 = 0x76,
            /// <summary>
            ///
            /// </summary>
            VK_F8 = 0x77,
            /// <summary>
            ///
            /// </summary>
            VK_F9 = 0x78,
            /// <summary>
            ///
            /// </summary>
            VK_F10 = 0x79,
            /// <summary>
            ///
            /// </summary>
            VK_F11 = 0x7A,
            /// <summary>
            ///
            /// </summary>
            VK_F12 = 0x7B,
            /// <summary>
            ///
            /// </summary>
            VK_F13 = 0x7C,
            /// <summary>
            ///
            /// </summary>
            VK_F14 = 0x7D,
            /// <summary>
            ///
            /// </summary>
            VK_F15 = 0x7E,
            /// <summary>
            ///
            /// </summary>
            VK_F16 = 0x7F,
            /// <summary>
            ///
            /// </summary>
            VK_F17 = 0x80,
            /// <summary>
            ///
            /// </summary>
            VK_F18 = 0x81,
            /// <summary>
            ///
            /// </summary>
            VK_F19 = 0x82,
            /// <summary>
            ///
            /// </summary>
            VK_F20 = 0x83,
            /// <summary>
            ///
            /// </summary>
            VK_F21 = 0x84,
            /// <summary>
            ///
            /// </summary>
            VK_F22 = 0x85,
            /// <summary>
            ///
            /// </summary>
            VK_F23 = 0x86,
            /// <summary>
            ///
            /// </summary>
            VK_F24 = 0x87,
            /// <summary>
            ///
            /// </summary>
            VK_NUMLOCK = 0x90,
            /// <summary>
            ///
            /// </summary>
            VK_SCROLL = 0x91,
            /// <summary>
            /// NEC PC-9800 keyboard '=' key on numpad.
            /// </summary>
            VK_OEM_NEC_EQUAL = 0x92,
            /// <summary>
            /// Fujitsu/OASYS keyboard 'Dictionary' key.
            /// </summary>
            VK_OEM_FJ_JISHO = 0x92,
            /// <summary>
            /// Fujitsu/OASYS keyboard 'Unregister word' key.
            /// </summary>
            VK_OEM_FJ_MASSHOU = 0x93,
            /// <summary>
            /// Fujitsu/OASYS keyboard 'Register word' key.
            /// </summary>
            VK_OEM_FJ_TOUROKU = 0x94,
            /// <summary>
            /// Fujitsu/OASYS keyboard 'Left OYAYUBI' key.
            /// </summary>
            VK_OEM_FJ_LOYA = 0x95,
            /// <summary>
            /// Fujitsu/OASYS keyboard 'Right OYAYUBI' key.
            /// </summary>
            VK_OEM_FJ_ROYA = 0x96,
            /// <summary>
            ///
            /// </summary>
            VK_LSHIFT = 0xA0,
            /// <summary>
            ///
            /// </summary>
            VK_RSHIFT = 0xA1,
            /// <summary>
            ///
            /// </summary>
            VK_LCONTROL = 0xA2,
            /// <summary>
            ///
            /// </summary>
            VK_RCONTROL = 0xA3,
            /// <summary>
            ///
            /// </summary>
            VK_LMENU = 0xA4,
            /// <summary>
            ///
            /// </summary>
            VK_RMENU = 0xA5,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_BACK = 0xA6,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_FORWARD = 0xA7,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_REFRESH = 0xA8,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_STOP = 0xA9,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_SEARCH = 0xAA,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_FAVORITES = 0xAB,
            /// <summary>
            ///
            /// </summary>
            VK_BROWSER_HOME = 0xAC,
            /// <summary>
            ///
            /// </summary>
            VK_VOLUME_MUTE = 0xAD,
            /// <summary>
            ///
            /// </summary>
            VK_VOLUME_DOWN = 0xAE,
            /// <summary>
            ///
            /// </summary>
            VK_VOLUME_UP = 0xAF,
            /// <summary>
            ///
            /// </summary>
            VK_MEDIA_NEXT_TRACK = 0xB0,
            /// <summary>
            ///
            /// </summary>
            VK_MEDIA_PREV_TRACK = 0xB1,
            /// <summary>
            ///
            /// </summary>
            VK_MEDIA_STOP = 0xB2,
            /// <summary>
            ///
            /// </summary>
            VK_MEDIA_PLAY_PAUSE = 0xB3,
            /// <summary>
            ///
            /// </summary>
            VK_LAUNCH_MAIL = 0xB4,
            /// <summary>
            ///
            /// </summary>
            VK_LAUNCH_MEDIA_SELECT = 0xB5,
            /// <summary>
            ///
            /// </summary>
            VK_LAUNCH_APP1 = 0xB6,
            /// <summary>
            ///
            /// </summary>
            VK_LAUNCH_APP2 = 0xB7,
            /// <summary>
            /// ';:' for US
            /// </summary>
            VK_OEM_1 = 0xBA,
            /// <summary>
            /// '+' any country
            /// </summary>
            VK_OEM_PLUS = 0xBB,
            /// <summary>
            /// ',' any country
            /// </summary>
            VK_OEM_COMMA = 0xBC,
            /// <summary>
            /// '-' any country
            /// </summary>
            VK_OEM_MINUS = 0xBD,
            /// <summary>
            /// '.' any country
            /// </summary>
            VK_OEM_PERIOD = 0xBE,
            /// <summary>
            /// '/?' for US
            /// </summary>
            VK_OEM_2 = 0xBF,
            /// <summary>
            /// '`~' for US
            /// </summary>
            VK_OEM_3 = 0xC0,
            /// <summary>
            /// '[{' for US
            /// </summary>
            VK_OEM_4 = 0xDB,
            /// <summary>
            /// '\|' for US
            /// </summary>
            VK_OEM_5 = 0xDC,
            /// <summary>
            /// ']}' for US
            /// </summary>
            VK_OEM_6 = 0xDD,
            /// <summary>
            /// ''"' for US
            /// </summary>
            VK_OEM_7 = 0xDE,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_8 = 0xDF,
            /// <summary>
            /// 'AX' key on Japanese AX kbd
            /// </summary>
            VK_OEM_AX = 0xE1,
            /// <summary>
            /// "&lt;&gt;" or "\|" on RT 102-key kbd.
            /// </summary>
            VK_OEM_102 = 0xE2,
            /// <summary>
            /// Help key on ICO
            /// </summary>
            VK_ICO_HELP = 0xE3,
            /// <summary>
            /// 00 key on ICO
            /// </summary>
            VK_ICO_00 = 0xE4,
            /// <summary>
            ///
            /// </summary>
            VK_PROCESSKEY = 0xE5,
            /// <summary>
            ///
            /// </summary>
            VK_ICO_CLEAR = 0xE6,
            /// <summary>
            ///
            /// </summary>
            VK_PACKET = 0xE7,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_RESET = 0xE9,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_JUMP = 0xEA,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_PA1 = 0xEB,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_PA2 = 0xEC,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_PA3 = 0xED,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_WSCTRL = 0xEE,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_CUSEL = 0xEF,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_ATTN = 0xF0,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_FINISH = 0xF1,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_COPY = 0xF2,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_AUTO = 0xF3,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_ENLW = 0xF4,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_BACKTAB = 0xF5,
            /// <summary>
            ///
            /// </summary>
            VK_ATTN = 0xF6,
            /// <summary>
            ///
            /// </summary>
            VK_CRSEL = 0xF7,
            /// <summary>
            ///
            /// </summary>
            VK_EXSEL = 0xF8,
            /// <summary>
            ///
            /// </summary>
            VK_EREOF = 0xF9,
            /// <summary>
            ///
            /// </summary>
            VK_PLAY = 0xFA,
            /// <summary>
            ///
            /// </summary>
            VK_ZOOM = 0xFB,
            /// <summary>
            ///
            /// </summary>
            VK_NONAME = 0xFC,
            /// <summary>
            ///
            /// </summary>
            VK_PA1 = 0xFD,
            /// <summary>
            ///
            /// </summary>
            VK_OEM_CLEAR = 0xFE
        }

        /// <summary>
        /// Contains information about an individual font in a font resource group. 
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]
        public struct FONTDIRENTRY
        {
            /// <summary>
            /// Specifies a user-defined version number for the resource data that tools can 
            /// use to read and write resource files. 
            /// </summary>
            public UInt16 dfVersion;
            /// <summary>
            /// Specifies the size of the file, in bytes. 
            /// </summary>
            public UInt32 dfSize;
            /// <summary>
            /// Contains a 60-character string with the font supplier's copyright information.
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 60)]
            public string dfCopyright;
            /// <summary>
            /// Specifies the type of font file.
            /// </summary>
            public UInt16 dfType;
            /// <summary>
            /// Specifies the point size at which this character set looks best. 
            /// </summary>
            public UInt16 dfPoints;
            /// <summary>
            /// Specifies the vertical resolution, in dots per inch, at which this character set was digitized.
            /// </summary>
            public UInt16 dfVertRes;
            /// <summary>
            /// Specifies the horizontal resolution, in dots per inch, at which this character set was digitized.
            /// </summary>
            public UInt16 dfHorizRes;
            /// <summary>
            /// Specifies the distance from the top of a character definition cell to the baseline of the 
            /// typographical font. 
            /// </summary>
            public UInt16 dfAscent;
            /// <summary>
            /// Specifies the amount of leading inside the bounds set by the dfPixHeight member. Accent marks and 
            /// other diacritical characters can occur in this area. 
            /// </summary>
            public UInt16 dfInternalLeading;
            /// <summary>
            /// Specifies the amount of extra leading that the application adds between rows. 
            /// </summary>
            public UInt16 dfExternalLeading;
            /// <summary>
            /// Specifies an italic font if not equal to zero.
            /// </summary>
            public byte dfItalic;
            /// <summary>
            /// Specifies an underlined font if not equal to zero.
            /// </summary>
            public byte dfUnderline;
            /// <summary>
            /// Specifies a strikeout font if not equal to zero.
            /// </summary>
            public byte dfStrikeOut;
            /// <summary>
            /// Specifies the weight of the font in the range 0 through 1000. For example, 400 is roman and 
            /// 700 is bold. If this value is zero, a default weight is used.
            /// </summary>
            public UInt16 dfWeight;
            /// <summary>
            /// Specifies the character set of the font.
            /// </summary>
            public byte dfCharSet;
            /// <summary>
            /// Specifies the width of the grid on which a vector font was digitized. For raster fonts, 
            /// if the member is not equal to zero, it represents the width for all the characters in the 
            /// bitmap. If the member is equal to zero, the font has variable-width characters. 
            /// </summary>
            public UInt16 dfPixWidth;
            /// <summary>
            /// Specifies the height of the character bitmap for raster fonts or the height of the grid 
            /// on which a vector font was digitized. 
            /// </summary>
            public UInt16 dfPixHeight;
            /// <summary>
            /// Specifies the pitch and the family of the font.
            /// </summary>
            public byte dfPitchAndFamily;
            /// <summary>
            /// Specifies the average width of characters in the font (generally defined as the width of 
            /// the letter x). This value does not include the overhang required for bold or italic characters. 
            /// </summary>
            public UInt16 dfAvgWidth;
            /// <summary>
            /// Specifies the width of the widest character in the font.
            /// </summary>
            public UInt16 dfMaxWidth;
            /// <summary>
            /// Specifies the first character code defined in the font.
            /// </summary>
            public byte dfFirstChar;
            /// <summary>
            /// Specifies the last character code defined in the font.
            /// </summary>
            public byte dfLastChar;
            /// <summary>
            /// Specifies the character to substitute for characters not in the font.
            /// </summary>
            public byte dfDefaultChar;
            /// <summary>
            /// Specifies the character that will be used to define word breaks for text justification.
            /// </summary>
            public byte dfBreakChar;
            /// <summary>
            /// Specifies the number of bytes in each row of the bitmap. This value is always even so 
            /// that the rows start on word boundaries. For vector fonts, this member has no meaning. 
            /// </summary>
            public UInt16 dfWidthBytes;
            /// <summary>
            /// Specifies the offset in the file to a null-terminated string that specifies a device name. 
            /// For a generic font, this value is zero. 
            /// </summary>
            public UInt32 dfDevice;
            /// <summary>
            /// Specifies the offset in the file to a null-terminated string that names the typeface. 
            /// </summary>
            public UInt32 dfFace;
            /// <summary>
            /// This member is reserved.
            /// </summary>
            public UInt32 dfReserved;
        };
    }
}



================================================
File: ResourceLib/VarFileInfo.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a file-version resource. 
    /// It contains version information not dependent on a particular language and code page combination.
    /// http://msdn.microsoft.com/en-us/library/aa909193.aspx
    /// </summary>
    public class VarFileInfo : ResourceTableHeader
    {
        Dictionary<string, VarTable> _vars = new Dictionary<string, VarTable>();

        /// <summary>
        /// A hardware independent dictionary of language and code page identifier tables.
        /// </summary>
        public Dictionary<string, VarTable> Vars
        {
            get
            {
                return _vars;
            }
        }

        /// <summary>
        /// A new hardware independent dictionary of language and code page identifier tables.
        /// </summary>
        public VarFileInfo()
            : base("VarFileInfo")
        {
            _header.wType = (UInt16)Kernel32.RESOURCE_HEADER_TYPE.StringData;
        }

        /// <summary>
        /// An existing hardware independent dictionary of language and code page identifier tables.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of data.</param>
        internal VarFileInfo(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read a hardware independent dictionary of language and code page identifier tables.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of data.</param>
        /// <returns>Pointer to the end of data.</returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _vars.Clear();
            IntPtr pChild = base.Read(lpRes);

            while (pChild.ToInt64() < (lpRes.ToInt64() + _header.wLength))
            {
                VarTable res = new VarTable(pChild);
                _vars.Add(res.Key, res);
                pChild = ResourceUtil.Align(pChild.ToInt64() + res.Header.wLength);
            }

            return new IntPtr(lpRes.ToInt64() + _header.wLength);
        }

        /// <summary>
        /// Write the hardware independent dictionary of language and code page identifier tables to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            long headerPos = w.BaseStream.Position;
            base.Write(w);

            Dictionary<string, VarTable>.Enumerator varsEnum = _vars.GetEnumerator();
            while (varsEnum.MoveNext())
            {
                varsEnum.Current.Value.Write(w);
            }

            ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
        }

        /// <summary>
        /// The default language and code page identifier table.
        /// </summary>
        public VarTable Default
        {
            get
            {
                Dictionary<string, VarTable>.Enumerator varsEnum = _vars.GetEnumerator();
                if (varsEnum.MoveNext()) return varsEnum.Current.Value;
                return null;
            }
        }

        /// <summary>
        /// Returns a language and code page identifier table.
        /// </summary>
        /// <param name="language">Language ID.</param>
        /// <returns>A language and code page identifier table.</returns>
        public UInt16 this[UInt16 language]
        {
            get
            {
                return Default[language];
            }
            set
            {
                Default[language] = value;
            }
        }

        /// <summary>
        /// String representation of VarFileInfo.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String in the VarFileInfo format.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
            foreach(VarTable var in _vars.Values)
            {
                sb.Append(var.ToString(indent + 1));
            }
            sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/VarTable.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// This structure depicts the organization of data in a file-version resource. It typically contains a 
    /// list of language and code page identifier pairs that the version of the application or DLL supports.
    /// http://msdn.microsoft.com/en-us/library/bb202818.aspx
    /// </summary>
    public class VarTable : ResourceTableHeader
    {
        private Dictionary<UInt16, UInt16> _languages = new Dictionary<UInt16, UInt16>();

        /// <summary>
        /// A dictionary of language and code page identifier pairs.
        /// </summary>
        public Dictionary<UInt16, UInt16> Languages
        {
            get
            {
                return _languages;
            }
        }

        /// <summary>
        /// A new table of language and code page identifier pairs.
        /// </summary>
        public VarTable()
        {

        }

        /// <summary>
        /// A new table of language and code page identifier pairs.
        /// </summary>
        /// <param name="key">Table key.</param>
        public VarTable(string key)
            : base(key)
        {

        }

        /// <summary>
        /// An existing table of language and code page identifier pairs.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the data.</param>
        internal VarTable(IntPtr lpRes)
        {
            Read(lpRes);
        }

        /// <summary>
        /// Read a table of language and code page identifier pairs.
        /// </summary>
        /// <param name="lpRes">Pointer to the beginning of the data.</param>
        /// <returns></returns>
        internal override IntPtr Read(IntPtr lpRes)
        {
            _languages.Clear();
            IntPtr pVar = base.Read(lpRes);

            while (pVar.ToInt64() < (lpRes.ToInt64() + _header.wLength))
            {
                Kernel32.VAR_HEADER var = (Kernel32.VAR_HEADER) Marshal.PtrToStructure(
                    pVar, typeof(Kernel32.VAR_HEADER));
                _languages.Add(var.wLanguageIDMS, var.wCodePageIBM);
                pVar = new IntPtr(pVar.ToInt64() + Marshal.SizeOf(var));
            }

            return new IntPtr(lpRes.ToInt64() + _header.wLength);
        }

        /// <summary>
        /// Write the table of language and code page identifier pairs to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        /// <returns>Last unpadded position.</returns>
        internal override void Write(BinaryWriter w)
        {
            long headerPos = w.BaseStream.Position;
            base.Write(w);

            Dictionary<UInt16, UInt16>.Enumerator languagesEnum = _languages.GetEnumerator();
            long valuePos = w.BaseStream.Position;
            while (languagesEnum.MoveNext())
            {
                // id
                w.Write((UInt16) languagesEnum.Current.Key);
                // code page
                w.Write((UInt16) languagesEnum.Current.Value);
            }

            ResourceUtil.WriteAt(w, w.BaseStream.Position - valuePos, headerPos + 2);
            ResourceUtil.PadToDWORD(w);
            ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
        }

        /// <summary>
        /// Returns a code page identifier for a given language.
        /// </summary>
        /// <param name="key">Language ID.</param>
        /// <returns>Code page identifier.</returns>
        public UInt16 this[UInt16 key]
        {
            get
            {
                return _languages[key];
            }
            set
            {
                _languages[key] = value;
            }
        }

        /// <summary>
        /// String representation of the var table.
        /// </summary>
        /// <param name="indent">Indent.</param>
        /// <returns>String representation of the var table.</returns>
        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("{0}BEGIN", new String(' ', indent)));
            Dictionary<UInt16, UInt16>.Enumerator languagesEnumerator = _languages.GetEnumerator();
            while (languagesEnumerator.MoveNext())
            {
                sb.AppendLine(string.Format("{0}VALUE \"Translation\", 0x{1:x}, 0x{2:x}", 
                    new String(' ', indent + 1), languagesEnumerator.Current.Key, languagesEnumerator.Current.Value));
            }
            sb.AppendLine(string.Format("{0}END", new String(' ', indent)));
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/VersionResource.cs
================================================
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.IO;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// VS_VERSIONINFO
    /// This structure depicts the organization of data in a file-version resource. It is the root structure 
    /// that contains all other file-version information structures.
    /// http://msdn.microsoft.com/en-us/library/aa914916.aspx
    /// </summary>
    public class VersionResource : Resource
    {
        ResourceTableHeader _header = new ResourceTableHeader("VS_VERSION_INFO");
        FixedFileInfo _fixedfileinfo = new FixedFileInfo();
        private Dictionary<string, ResourceTableHeader> _resources = new Dictionary<string, ResourceTableHeader>();

        /// <summary>
        /// The resource header.
        /// </summary>
        public ResourceTableHeader Header
        {
            get
            {
                return _header;
            }
        }

        /// <summary>
        /// A dictionary of resource tables.
        /// </summary>
        public Dictionary<string, ResourceTableHeader> Resources
        {
            get
            {
                return _resources;
            }
        }

        /// <summary>
        /// An existing version resource.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="hResource">Resource ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="language">Language ID.</param>
        /// <param name="size">Resource size.</param>
        public VersionResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, UInt16 language, int size)
            : base(hModule, hResource, type, name, language, size)
        {

        }

        /// <summary>
        /// A new language-netural version resource.
        /// </summary>
        public VersionResource()
            : base(IntPtr.Zero, 
                IntPtr.Zero, 
                new ResourceId(Kernel32.ResourceTypes.RT_VERSION), 
                new ResourceId(1), 
                ResourceUtil.USENGLISHLANGID, 
                0)
        {
            _header.Header = new Kernel32.RESOURCE_HEADER(_fixedfileinfo.Size);
        }

        /// <summary>
        /// Read a version resource from a previously loaded module.
        /// </summary>
        /// <param name="hModule">Module handle.</param>
        /// <param name="lpRes">Pointer to the beginning of the resource.</param>
        /// <returns>Pointer to the end of the resource.</returns>
        internal override IntPtr Read(IntPtr hModule, IntPtr lpRes)
        {
            _resources.Clear();

            IntPtr pFixedFileInfo = _header.Read(lpRes);

            if (_header.Header.wValueLength != 0)
            {
                _fixedfileinfo = new FixedFileInfo();
                _fixedfileinfo.Read(pFixedFileInfo);
            }

            IntPtr pChild = ResourceUtil.Align(pFixedFileInfo.ToInt64() + _header.Header.wValueLength);

            while (pChild.ToInt64() < (lpRes.ToInt64() + _header.Header.wLength))
            {
                ResourceTableHeader rc = new ResourceTableHeader(pChild);
                switch (rc.Key)
                {
                    case "StringFileInfo":
                        StringFileInfo sr = new StringFileInfo(pChild);
                        rc = sr;
                        break;
                    default:
                        rc = new VarFileInfo(pChild);
                        break;
                }

                _resources.Add(rc.Key, rc);
                pChild = ResourceUtil.Align(pChild.ToInt64() + rc.Header.wLength);
            }

            return new IntPtr(lpRes.ToInt64() + _header.Header.wLength);
        }

        /// <summary>
        /// String representation of the file version.
        /// </summary>
        public string FileVersion
        {
            get
            {
                return _fixedfileinfo.FileVersion;
            }
            set
            {
                _fixedfileinfo.FileVersion = value;
            }
        }

        /// <summary>
        /// Gets or sets a bitmask that specifies the Boolean attributes of the file.
        /// </summary>
        public uint FileFlags
        {
          get
          {
            return this._fixedfileinfo.FileFlags;
          }
          set
          {
            this._fixedfileinfo.FileFlags = value;
          }
        }

        /// <summary>
        /// String representation of the protect version.
        /// </summary>
        public string ProductVersion
        {
            get
            {
                return _fixedfileinfo.ProductVersion;
            }
            set
            {
                _fixedfileinfo.ProductVersion = value;
            }
        }

        /// <summary>
        /// Write this version resource to a binary stream.
        /// </summary>
        /// <param name="w">Binary stream.</param>
        internal override void Write(BinaryWriter w)
        {
            long headerPos = w.BaseStream.Position;
            _header.Write(w);
            
            if (_fixedfileinfo != null)
            {
                _fixedfileinfo.Write(w);
            }

            Dictionary<string, ResourceTableHeader>.Enumerator resourceEnum = _resources.GetEnumerator();
            while (resourceEnum.MoveNext())
            {
                resourceEnum.Current.Value.Write(w);
            }

            ResourceUtil.WriteAt(w, w.BaseStream.Position - headerPos, headerPos);
        }

        /// <summary>
        /// Returns an entry within this resource table.
        /// </summary>
        /// <param name="key">Entry key.</param>
        /// <returns>A resource table.</returns>
        public ResourceTableHeader this[string key]
        {
            get
            {
                return Resources[key];
            }
            set
            {
                Resources[key] = value;
            }
        }

        /// <summary>
        /// Return string representation of the version resource.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            if (_fixedfileinfo != null)
            {
                sb.Append(_fixedfileinfo.ToString());
            }
            sb.AppendLine("BEGIN");
            Dictionary<string, ResourceTableHeader>.Enumerator resourceEnum = _resources.GetEnumerator();
            while (resourceEnum.MoveNext())
            {
                sb.Append(resourceEnum.Current.Value.ToString(1));
            }
            sb.AppendLine("END");
            return sb.ToString();
        }
    }
}



================================================
File: ResourceLib/Winver.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Text;

namespace Vestris.ResourceLib
{
    /// <summary>
    /// winver.h, version management functions, types and definitions
    /// </summary>
    public abstract class Winver
    {
        /// <summary>
        /// VS_VERSION signature.
        /// </summary>
        public const UInt32 VS_FFI_SIGNATURE = 0xFEEF04BD;
        /// <summary>
        /// VS_VERSION structure version.
        /// </summary>
        public const UInt32 VS_FFI_STRUCVERSION = 0x00010000;
        /// <summary>
        /// VS_VERSION file flags mask.
        /// </summary>
        public const UInt32 VS_FFI_FILEFLAGSMASK = 0x0000003F;

        /// <summary>
        /// VS_VERSION file flags.
        /// </summary>
        public enum FileFlags : uint
        {
            /// <summary>
            /// The file contains debugging information.
            /// </summary>
            VS_FF_DEBUG = 0x00000001,
            /// <summary>
            /// The file is a prerelease development version, not a final commercial release.
            /// </summary>
            VS_FF_PRERELEASE = 0x00000002,
            /// <summary>
            /// PThe file has been modified somehow and is not identical to the original file
            /// that shipped with the product. 
            /// </summary>
            VS_FF_PATCHED = 0x00000004,
            /// <summary>
            /// The file was not built using standard release procedures. There should be data 
            /// in the file's "PrivateBuild" version information string. 
            /// </summary>
            VS_FF_PRIVATEBUILD = 0x00000008,
            /// <summary>
            /// The version information in this structure was not found inside the file, 
            /// but instead was created when needed based on the best information available. 
            /// Therefore, this structure's information may differ slightly from what the "real"
            /// values are.
            /// </summary>
            VS_FF_INFOINFERRED = 0x00000010,
            /// <summary>
            /// The file was built using standard release procedures, but is somehow different 
            /// from the normal file having the same version number. There should be data in the 
            /// file's "SpecialBuild" version information string.
            /// </summary>
            VS_FF_SPECIALBUILD = 0x00000020,
        }

        /// <summary>
        /// VS_VERSION file OSs.
        /// </summary>
        public enum FileOs : uint
        {
            /// <summary>
            /// The operating system under which the file was designed to run could not be determined.
            /// </summary>
            VOS_UNKNOWN = 0x00000000,
            /// <summary>
            /// The file was designed to run under MS-DOS. 
            /// </summary>
            VOS_DOS = 0x00010000,
            /// <summary>
            /// The file was designed to run under a 16-bit version of OS/2. 
            /// </summary>
            VOS_OS216 = 0x00020000,
            /// <summary>
            /// The file was designed to run under a 32-bit version of OS/2.
            /// </summary>
            VOS_OS232 = 0x00030000,
            /// <summary>
            /// The file was designed to run under Windows NT/2000.
            /// </summary>
            VOS_NT = 0x00040000,
            /// <summary>
            /// 
            /// </summary>
            VOS_WINCE = 0x00050000,
            /// <summary>
            /// The file was designed to run under the 16-bit Windows API. 
            /// </summary>
            VOS__WINDOWS16 = 0x00000001,
            /// <summary>
            /// The file was designed to be run under a 16-bit version of Presentation Manager. 
            /// </summary>
            VOS__PM16 = 0x00000002,
            /// <summary>
            /// The file was designed to be run under a 32-bit version of Presentation Manager.
            /// </summary>
            VOS__PM32 = 0x00000003,
            /// <summary>
            /// The file was designed to run under the 32-bit Windows API. 
            /// </summary>
            VOS__WINDOWS32 = 0x00000004,
            /// <summary>
            /// 
            /// </summary>
            VOS_DOS_WINDOWS16 = 0x00010001,
            /// <summary>
            /// 
            /// </summary>
            VOS_DOS_WINDOWS32 = 0x00010004,
            /// <summary>
            /// 
            /// </summary>
            VOS_OS216_PM16 = 0x00020002,
            /// <summary>
            /// 
            /// </summary>
            VOS_OS232_PM32 = 0x00030003,
            /// <summary>
            /// 
            /// </summary>
            VOS_NT_WINDOWS32 = 0x00040004
        }

        /// <summary>
        /// VS_VERSION file types.
        /// </summary>
        public enum FileType : uint
        {
            /// <summary>
            /// The type of file could not be determined.
            /// </summary>
            VFT_UNKNOWN = 0x00000000,
            /// <summary>
            /// The file is an application.
            /// </summary>
            VFT_APP = 0x00000001,
            /// <summary>
            /// The file is a Dynamic Link Library (DLL). 
            /// </summary>
            VFT_DLL = 0x00000002,
            /// <summary>
            /// The file is a device driver. dwFileSubtype contains more information. 
            /// </summary>
            VFT_DRV = 0x00000003,
            /// <summary>
            /// The file is a font. dwFileSubtype contains more information. 
            /// </summary>
            VFT_FONT = 0x00000004,
            /// <summary>
            /// The file is a virtual device.
            /// </summary>
            VFT_VXD = 0x00000005,
            /// <summary>
            /// The file is a static link library.
            /// </summary>
            VFT_STATIC_LIB = 0x00000007
        }

        /// <summary>
        /// File sub-type.
        /// </summary>
        public enum FileSubType : uint
        {
            /// <summary>
            /// The type of driver could not be determined. 
            /// </summary>
            VFT2_UNKNOWN = 0x00000000,
            /// <summary>
            /// The file is a printer driver.
            /// </summary>
            VFT2_DRV_PRINTER = 0x00000001,
            /// <summary>
            /// The file is a keyboard driver. 
            /// </summary>
            VFT2_DRV_KEYBOARD = 0x00000002,
            /// <summary>
            /// The file is a language driver. 
            /// </summary>
            VFT2_DRV_LANGUAGE = 0x00000003,
            /// <summary>
            /// The file is a display driver. 
            /// </summary>
            VFT2_DRV_DISPLAY = 0x00000004,
            /// <summary>
            /// The file is a mouse driver. 
            /// </summary>
            VFT2_DRV_MOUSE = 0x00000005,
            /// <summary>
            /// The file is a network driver. 
            /// </summary>
            VFT2_DRV_NETWORK = 0x00000006,
            /// <summary>
            /// The file is a system driver. 
            /// </summary>
            VFT2_DRV_SYSTEM = 0x00000007,
            /// <summary>
            /// The file is an installable driver. 
            /// </summary>
            VFT2_DRV_INSTALLABLE = 0x00000008,
            /// <summary>
            /// The file is a sound driver. 
            /// </summary>
            VFT2_DRV_SOUND = 0x00000009,
            /// <summary>
            /// The file is a communications driver. 
            /// </summary>
            VFT2_DRV_COMM = 0x0000000A,
            /// <summary>
            /// The file is an input method driver.
            /// </summary>
            VFT2_DRV_INPUTMETHOD = 0x0000000B,
            /// <summary>
            /// The file is a versioned printer driver.
            /// </summary>
            VFT2_DRV_VERSIONED_PRINTER = 0x0000000C,
            /// <summary>
            /// The file is a raster font.
            /// </summary>
            VFT2_FONT_RASTER = 0x00000001,
            /// <summary>
            /// The file is a vector font. 
            /// </summary>
            VFT2_FONT_VECTOR = 0x00000002,
            /// <summary>
            /// The file is a TrueType font. 
            /// </summary>
            VFT2_FONT_TRUETYPE = 0x00000003,
        }
    }
}



================================================
File: ResourceLib/packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="MSBuildTasks" version="1.4.0.45" targetFramework="net20" />
</packages>


================================================
File: ResourceLib/.gitignore
================================================
/*.user



================================================
File: ResourceLib/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("ResourceLib")]
[assembly: Guid("7126e1f4-8620-484c-806e-7f4e51524709")]



================================================
File: Sevenzip/Sevenzip.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Sevenzip", "Sevenzip\Sevenzip.csproj", "{233FA980-EF10-4BA7-8C4A-63F5D6D09925}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{233FA980-EF10-4BA7-8C4A-63F5D6D09925}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: Sevenzip/Sevenzip/CRC.cs
================================================
// Common/CRC.cs

namespace SevenZipLib
{
public	class CRC
	{
		public static readonly uint[] Table;

		static CRC()
		{
			Table = new uint[256];
			const uint kPoly = 0xEDB88320;
			for (uint i = 0; i < 256; i++)
			{
				uint r = i;
				for (int j = 0; j < 8; j++)
					if ((r & 1) != 0)
						r = (r >> 1) ^ kPoly;
					else
						r >>= 1;
				Table[i] = r;
			}
		}

		uint _value = 0xFFFFFFFF;

		public void Init() { _value = 0xFFFFFFFF; }

		public void UpdateByte(byte b)
		{
			_value = Table[(((byte)(_value)) ^ b)] ^ (_value >> 8);
		}

		public void Update(byte[] data, uint offset, uint size)
		{
			for (uint i = 0; i < size; i++)
				_value = Table[(((byte)(_value)) ^ data[offset + i])] ^ (_value >> 8);
		}

		public uint GetDigest() { return _value ^ 0xFFFFFFFF; }

		static uint CalculateDigest(byte[] data, uint offset, uint size)
		{
			CRC crc = new CRC();
			// crc.Init();
			crc.Update(data, offset, size);
			return crc.GetDigest();
		}

		static bool VerifyDigest(uint digest, byte[] data, uint offset, uint size)
		{
			return (CalculateDigest(data, offset, size) == digest);
		}
	}
}



================================================
File: Sevenzip/Sevenzip/ICoder.cs
================================================
// ICoder.h

using System;

namespace SevenZipLib
{
	/// <summary>
	/// The exception that is thrown when an error in input stream occurs during decoding.
	/// </summary>
	public class DataErrorException : ApplicationException
	{
		public DataErrorException(): base("Data Error") { }
	}

	/// <summary>
	/// The exception that is thrown when the value of an argument is outside the allowable range.
	/// </summary>
	public class InvalidParamException : ApplicationException
	{
		public InvalidParamException(): base("Invalid Parameter") { }
	}

	public interface ICodeProgress
	{
		/// <summary>
		/// Callback progress.
		/// </summary>
		/// <param name="inSize">
		/// input size. -1 if unknown.
		/// </param>
		/// <param name="outSize">
		/// output size. -1 if unknown.
		/// </param>
		void SetProgress(Int64 inSize, Int64 outSize);
	};

	public interface ICoder
	{
		/// <summary>
		/// Codes streams.
		/// </summary>
		/// <param name="inStream">
		/// input Stream.
		/// </param>
		/// <param name="outStream">
		/// output Stream.
		/// </param>
		/// <param name="inSize">
		/// input Size. -1 if unknown.
		/// </param>
		/// <param name="outSize">
		/// output Size. -1 if unknown.
		/// </param>
		/// <param name="progress">
		/// callback progress reference.
		/// </param>
		/// <exception cref="SevenZipLib.DataErrorException">
		/// if input stream is not valid
		/// </exception>
		void Code(System.IO.Stream inStream, System.IO.Stream outStream,
			Int64 inSize, Int64 outSize, ICodeProgress progress);
	};

	/*
	public interface ICoder2
	{
		 void Code(ISequentialInStream []inStreams,
				const UInt64 []inSizes, 
				ISequentialOutStream []outStreams, 
				UInt64 []outSizes,
				ICodeProgress progress);
	};
  */

	/// <summary>
	/// Provides the fields that represent properties idenitifiers for compressing.
	/// </summary>
	public enum CoderPropID
	{
		/// <summary>
		/// Specifies size of dictionary.
		/// </summary>
		DictionarySize = 0x400,
		/// <summary>
		/// Specifies size of memory for PPM*.
		/// </summary>
		UsedMemorySize,
		/// <summary>
		/// Specifies order for PPM methods.
		/// </summary>
		Order,
		/// <summary>
		/// Specifies number of postion state bits for LZMA (0 <= x <= 4).
		/// </summary>
		PosStateBits = 0x440,
		/// <summary>
		/// Specifies number of literal context bits for LZMA (0 <= x <= 8).
		/// </summary>
		LitContextBits,
		/// <summary>
		/// Specifies number of literal position bits for LZMA (0 <= x <= 4).
		/// </summary>
		LitPosBits,
		/// <summary>
		/// Specifies number of fast bytes for LZ*.
		/// </summary>
		NumFastBytes = 0x450,
		/// <summary>
		/// Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
		/// </summary>
		MatchFinder,
		/// <summary>
		/// Specifies number of passes.
		/// </summary>
		NumPasses = 0x460,
		/// <summary>
		/// Specifies number of algorithm.
		/// </summary>
		Algorithm = 0x470,
		/// <summary>
		/// Specifies multithread mode.
		/// </summary>
		MultiThread = 0x480,
		/// <summary>
		/// Specifies mode with end marker.
		/// </summary>
		EndMarker = 0x490
	};


	public interface ISetCoderProperties
	{
		void SetCoderProperties(CoderPropID[] propIDs, object[] properties);
	};

	public interface IWriteCoderProperties
	{
		void WriteCoderProperties(System.IO.Stream outStream);
	}

	public interface ISetDecoderProperties
	{
		void SetDecoderProperties(byte[] properties);
	}
}



================================================
File: Sevenzip/Sevenzip/IMatchFinder.cs
================================================
// IMatchFinder.cs

using System;

namespace SevenZipLib
{
	interface IInWindowStream
	{
		void SetStream(System.IO.Stream inStream);
		void Init();
		void ReleaseStream();
		Byte GetIndexByte(Int32 index);
		UInt32 GetMatchLen(Int32 index, UInt32 distance, UInt32 limit);
		UInt32 GetNumAvailableBytes();
	}

	interface IMatchFinder : IInWindowStream
	{
		void Create(UInt32 historySize, UInt32 keepAddBufferBefore,
				UInt32 matchMaxLen, UInt32 keepAddBufferAfter);
		UInt32 GetMatches(UInt32[] distances);
		void Skip(UInt32 num);
	}
}



================================================
File: Sevenzip/Sevenzip/LzBinTree.cs
================================================
// LzBinTree.cs

using System;

namespace SevenZipLib
{
	public class LZBinTree : LZInWindow,IMatchFinder
	{
		UInt32 _cyclicBufferPos;
		UInt32 _cyclicBufferSize = 0;
		UInt32 _matchMaxLen;

		UInt32[] _son;
		UInt32[] _hash;

		UInt32 _cutValue = 0xFF;
		UInt32 _hashMask;
		UInt32 _hashSizeSum = 0;

		bool HASH_ARRAY = true;

		const UInt32 kHash2Size = 1 << 10;
		const UInt32 kHash3Size = 1 << 16;
		const UInt32 kBT2HashSize = 1 << 16;
		const UInt32 kStartMaxLen = 1;
		const UInt32 kHash3Offset = kHash2Size;
		const UInt32 kEmptyHashValue = 0;
		const UInt32 kMaxValForNormalize = ((UInt32)1 << 31) - 1;
	
		UInt32 kNumHashDirectBytes = 0;
		UInt32 kMinMatchCheck = 4;
		UInt32 kFixHashSize = kHash2Size + kHash3Size;
		
		public void SetType(int numHashBytes)
		{
			HASH_ARRAY = (numHashBytes > 2);
			if (HASH_ARRAY)
			{
				kNumHashDirectBytes = 0;
				kMinMatchCheck = 4;
				kFixHashSize = kHash2Size + kHash3Size;
			}
			else
			{
				kNumHashDirectBytes = 2;
				kMinMatchCheck = 2 + 1;
				kFixHashSize = 0;
			}
		}

		public new void SetStream(System.IO.Stream stream) { base.SetStream(stream); }
		public new void ReleaseStream() { base.ReleaseStream(); }
		
		public new void Init()
		{
			base.Init();
			for (UInt32 i = 0; i < _hashSizeSum; i++)
				_hash[i] = kEmptyHashValue;
			_cyclicBufferPos = 0;
			ReduceOffsets(-1);
		}

		public new void MovePos()
		{
			if (++_cyclicBufferPos >= _cyclicBufferSize)
				_cyclicBufferPos = 0;
			base.MovePos();
			if (_pos == kMaxValForNormalize)
				Normalize();
		}

		public new Byte GetIndexByte(Int32 index) { return base.GetIndexByte(index); }

		public new UInt32 GetMatchLen(Int32 index, UInt32 distance, UInt32 limit)
		{ return base.GetMatchLen(index, distance, limit); }

		public new UInt32 GetNumAvailableBytes() { return base.GetNumAvailableBytes(); }

		public void Create(UInt32 historySize, UInt32 keepAddBufferBefore,
				UInt32 matchMaxLen, UInt32 keepAddBufferAfter)
		{
			if (historySize > kMaxValForNormalize - 256)
				throw new Exception();
			_cutValue = 16 + (matchMaxLen >> 1);
				
			UInt32 windowReservSize = (historySize + keepAddBufferBefore +
					matchMaxLen + keepAddBufferAfter) / 2 + 256;

			base.Create(historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);

			_matchMaxLen = matchMaxLen;

			UInt32 cyclicBufferSize = historySize + 1;
			if (_cyclicBufferSize != cyclicBufferSize)
				_son = new UInt32[(_cyclicBufferSize = cyclicBufferSize) * 2];

			UInt32 hs = kBT2HashSize;

			if (HASH_ARRAY)
			{
				hs = historySize - 1;
				hs |= (hs >> 1);
				hs |= (hs >> 2);
				hs |= (hs >> 4);
				hs |= (hs >> 8);
				hs >>= 1;
				hs |= 0xFFFF;
				if (hs > (1 << 24))
					hs >>= 1;
				_hashMask = hs;
				hs++;
				hs += kFixHashSize;
			}
			if (hs != _hashSizeSum)
				_hash = new UInt32[_hashSizeSum = hs];
		}

		public UInt32 GetMatches(UInt32[] distances)
		{
			UInt32 lenLimit;
			if (_pos + _matchMaxLen <= _streamPos)
				lenLimit = _matchMaxLen;
			else
			{
				lenLimit = _streamPos - _pos;
				if (lenLimit < kMinMatchCheck)
				{
					MovePos();
					return 0;
				}
			}

			UInt32 offset = 0;
			UInt32 matchMinPos = (_pos > _cyclicBufferSize) ? (_pos - _cyclicBufferSize) : 0;
			UInt32 cur = _bufferOffset + _pos;
			UInt32 maxLen = kStartMaxLen; // to avoid items for len < hashSize;
			UInt32 hashValue, hash2Value = 0, hash3Value = 0;

			if (HASH_ARRAY)
			{
				UInt32 temp = CRC.Table[_bufferBase[cur]] ^ _bufferBase[cur + 1];
				hash2Value = temp & (kHash2Size - 1);
				temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
				hash3Value = temp & (kHash3Size - 1);
				hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
			}
			else
				hashValue = _bufferBase[cur] ^ ((UInt32)(_bufferBase[cur + 1]) << 8);

			UInt32 curMatch = _hash[kFixHashSize + hashValue];
			if (HASH_ARRAY)
			{
				UInt32 curMatch2 = _hash[hash2Value];
				UInt32 curMatch3 = _hash[kHash3Offset + hash3Value];
				_hash[hash2Value] = _pos;
				_hash[kHash3Offset + hash3Value] = _pos;
				if (curMatch2 > matchMinPos)
					if (_bufferBase[_bufferOffset + curMatch2] == _bufferBase[cur])
					{
						distances[offset++] = maxLen = 2;
						distances[offset++] = _pos - curMatch2 - 1;
					}
				if (curMatch3 > matchMinPos)
					if (_bufferBase[_bufferOffset + curMatch3] == _bufferBase[cur])
					{
						if (curMatch3 == curMatch2)
							offset -= 2;
						distances[offset++] = maxLen = 3;
						distances[offset++] = _pos - curMatch3 - 1;
						curMatch2 = curMatch3;
					}
				if (offset != 0 && curMatch2 == curMatch)
				{
					offset -= 2;
					maxLen = kStartMaxLen;
				}
			}

			_hash[kFixHashSize + hashValue] = _pos;

			UInt32 ptr0 = (_cyclicBufferPos << 1) + 1;
			UInt32 ptr1 = (_cyclicBufferPos << 1);

			UInt32 len0, len1;
			len0 = len1 = kNumHashDirectBytes;
			
			if (kNumHashDirectBytes != 0)
			{
				if (curMatch > matchMinPos)
				{
					if (_bufferBase[_bufferOffset + curMatch + kNumHashDirectBytes] !=
							_bufferBase[cur + kNumHashDirectBytes])
					{
						distances[offset++] = maxLen = kNumHashDirectBytes;
						distances[offset++] = _pos - curMatch - 1;
					}
				}
			}
			
			UInt32 count = _cutValue;
			
			while(true)
			{
				if(curMatch <= matchMinPos || count-- == 0)
				{
					_son[ptr0] = _son[ptr1] = kEmptyHashValue;
					break;
				}
				UInt32 delta = _pos - curMatch;
				UInt32 cyclicPos = ((delta <= _cyclicBufferPos) ?
							(_cyclicBufferPos - delta) :
							(_cyclicBufferPos - delta + _cyclicBufferSize)) << 1;

				UInt32 pby1 = _bufferOffset + curMatch;
				UInt32 len = Math.Min(len0, len1);
				if (_bufferBase[pby1 + len] == _bufferBase[cur + len])
				{
					while(++len != lenLimit)
						if (_bufferBase[pby1 + len] != _bufferBase[cur + len])
							break;
					if (maxLen < len)
					{
						distances[offset++] = maxLen = len;
						distances[offset++] = delta - 1;
						if (len == lenLimit)
						{
							_son[ptr1] = _son[cyclicPos];
							_son[ptr0] = _son[cyclicPos + 1];
							break;
						}
					}
				}
				if (_bufferBase[pby1 + len] < _bufferBase[cur + len])
				{
					_son[ptr1] = curMatch;
					ptr1 = cyclicPos + 1;
					curMatch = _son[ptr1];
					len1 = len;
				}
				else
				{
					_son[ptr0] = curMatch;
					ptr0 = cyclicPos;
					curMatch = _son[ptr0];
					len0 = len;
				}
			}
			MovePos();
			return offset;
		}

		public void Skip(UInt32 num)
		{
			do
			{
				UInt32 lenLimit;
				if (_pos + _matchMaxLen <= _streamPos)
					lenLimit = _matchMaxLen;
				else
				{
					lenLimit = _streamPos - _pos;
					if (lenLimit < kMinMatchCheck)
					{
						MovePos();
						continue;
					}
				}

				UInt32 matchMinPos = (_pos > _cyclicBufferSize) ? (_pos - _cyclicBufferSize) : 0;
				UInt32 cur = _bufferOffset + _pos;

				UInt32 hashValue;

				if (HASH_ARRAY)
				{
					UInt32 temp = CRC.Table[_bufferBase[cur]] ^ _bufferBase[cur + 1];
					UInt32 hash2Value = temp & (kHash2Size - 1);
					_hash[hash2Value] = _pos;
					temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
					UInt32 hash3Value = temp & (kHash3Size - 1);
					_hash[kHash3Offset + hash3Value] = _pos;
					hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
				}
				else
					hashValue = _bufferBase[cur] ^ ((UInt32)(_bufferBase[cur + 1]) << 8);

				UInt32 curMatch = _hash[kFixHashSize + hashValue];
				_hash[kFixHashSize + hashValue] = _pos;

				UInt32 ptr0 = (_cyclicBufferPos << 1) + 1;
				UInt32 ptr1 = (_cyclicBufferPos << 1);

				UInt32 len0, len1;
				len0 = len1 = kNumHashDirectBytes;

				UInt32 count = _cutValue;
				while (true)
				{
					if (curMatch <= matchMinPos || count-- == 0)
					{
						_son[ptr0] = _son[ptr1] = kEmptyHashValue;
						break;
					}

					UInt32 delta = _pos - curMatch;
					UInt32 cyclicPos = ((delta <= _cyclicBufferPos) ?
								(_cyclicBufferPos - delta) :
								(_cyclicBufferPos - delta + _cyclicBufferSize)) << 1;

					UInt32 pby1 = _bufferOffset + curMatch;
					UInt32 len = Math.Min(len0, len1);
					if (_bufferBase[pby1 + len] == _bufferBase[cur + len])
					{
						while (++len != lenLimit)
							if (_bufferBase[pby1 + len] != _bufferBase[cur + len])
								break;
						if (len == lenLimit)
						{
							_son[ptr1] = _son[cyclicPos];
							_son[ptr0] = _son[cyclicPos + 1];
							break;
						}
					}
					if (_bufferBase[pby1 + len] < _bufferBase[cur + len])
					{
						_son[ptr1] = curMatch;
						ptr1 = cyclicPos + 1;
						curMatch = _son[ptr1];
						len1 = len;
					}
					else
					{
						_son[ptr0] = curMatch;
						ptr0 = cyclicPos;
						curMatch = _son[ptr0];
						len0 = len;
					}
				}
				MovePos();
			}
			while (--num != 0);
		}

		void NormalizeLinks(UInt32[] items, UInt32 numItems, UInt32 subValue)
		{
			for (UInt32 i = 0; i < numItems; i++)
			{
				UInt32 value = items[i];
				if (value <= subValue)
					value = kEmptyHashValue;
				else
					value -= subValue;
				items[i] = value;
			}
		}

		void Normalize()
		{
			UInt32 subValue = _pos - _cyclicBufferSize;
			NormalizeLinks(_son, _cyclicBufferSize * 2, subValue);
			NormalizeLinks(_hash, _hashSizeSum, subValue);
			ReduceOffsets((Int32)subValue);
		}

		public void SetCutValue(UInt32 cutValue) { _cutValue = cutValue; }
	}
}



================================================
File: Sevenzip/Sevenzip/LzInWindow.cs
================================================
// LzInWindow.cs

using System;

namespace SevenZipLib
{
	public class LZInWindow
	{
		public Byte[] _bufferBase = null; // pointer to buffer with data
		System.IO.Stream _stream;
		UInt32 _posLimit; // offset (from _buffer) of first byte when new block reading must be done
		bool _streamEndWasReached; // if (true) then _streamPos shows real end of stream

		UInt32 _pointerToLastSafePosition;

		public UInt32 _bufferOffset;

		public UInt32 _blockSize; // Size of Allocated memory block
		public UInt32 _pos; // offset (from _buffer) of curent byte
		UInt32 _keepSizeBefore; // how many BYTEs must be kept in buffer before _pos
		UInt32 _keepSizeAfter; // how many BYTEs must be kept buffer after _pos
		public UInt32 _streamPos; // offset (from _buffer) of first not read byte from Stream

		public void MoveBlock()
		{
			UInt32 offset = (UInt32)(_bufferOffset) + _pos - _keepSizeBefore;
			// we need one additional byte, since MovePos moves on 1 byte.
			if (offset > 0)
				offset--;
			
			UInt32 numBytes = (UInt32)(_bufferOffset) + _streamPos - offset;

			// check negative offset ????
			for (UInt32 i = 0; i < numBytes; i++)
				_bufferBase[i] = _bufferBase[offset + i];
			_bufferOffset -= offset;
		}

		public virtual void ReadBlock()
		{
			if (_streamEndWasReached)
				return;
			while (true)
			{
				int size = (int)((0 - _bufferOffset) + _blockSize - _streamPos);
				if (size == 0)
					return;
				int numReadBytes = _stream.Read(_bufferBase, (int)(_bufferOffset + _streamPos), size);
				if (numReadBytes == 0)
				{
					_posLimit = _streamPos;
					UInt32 pointerToPostion = _bufferOffset + _posLimit;
					if (pointerToPostion > _pointerToLastSafePosition)
						_posLimit = (UInt32)(_pointerToLastSafePosition - _bufferOffset);

					_streamEndWasReached = true;
					return;
				}
				_streamPos += (UInt32)numReadBytes;
				if (_streamPos >= _pos + _keepSizeAfter)
					_posLimit = _streamPos - _keepSizeAfter;
			}
		}

		void Free() { _bufferBase = null; }

		public void Create(UInt32 keepSizeBefore, UInt32 keepSizeAfter, UInt32 keepSizeReserv)
		{
			_keepSizeBefore = keepSizeBefore;
			_keepSizeAfter = keepSizeAfter;
			UInt32 blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;
			if (_bufferBase == null || _blockSize != blockSize)
			{
				Free();
				_blockSize = blockSize;
				_bufferBase = new Byte[_blockSize];
			}
			_pointerToLastSafePosition = _blockSize - keepSizeAfter;
		}

		public void SetStream(System.IO.Stream stream) { _stream = stream; }
		public void ReleaseStream() { _stream = null; }

		public void Init()
		{
			_bufferOffset = 0;
			_pos = 0;
			_streamPos = 0;
			_streamEndWasReached = false;
			ReadBlock();
		}

		public void MovePos()
		{
			_pos++;
			if (_pos > _posLimit)
			{
				UInt32 pointerToPostion = _bufferOffset + _pos;
				if (pointerToPostion > _pointerToLastSafePosition)
					MoveBlock();
				ReadBlock();
			}
		}

		public Byte GetIndexByte(Int32 index) { return _bufferBase[_bufferOffset + _pos + index]; }

		// index + limit have not to exceed _keepSizeAfter;
		public UInt32 GetMatchLen(Int32 index, UInt32 distance, UInt32 limit)
		{
			if (_streamEndWasReached)
				if ((_pos + index) + limit > _streamPos)
					limit = _streamPos - (UInt32)(_pos + index);
			distance++;
			// Byte *pby = _buffer + (size_t)_pos + index;
			UInt32 pby = _bufferOffset + _pos + (UInt32)index;

			UInt32 i;
			for (i = 0; i < limit && _bufferBase[pby + i] == _bufferBase[pby + i - distance]; i++);
			return i;
		}

		public UInt32 GetNumAvailableBytes() { return _streamPos - _pos; }

		public void ReduceOffsets(Int32 subValue)
		{
			_bufferOffset += (UInt32)subValue;
			_posLimit -= (UInt32)subValue;
			_pos -= (UInt32)subValue;
			_streamPos -= (UInt32)subValue;
		}
	}
}



================================================
File: Sevenzip/Sevenzip/LzOutWindow.cs
================================================
// LzOutWindow.cs

namespace SevenZipLib
{
	public class LZOutWindow
	{
		byte[] _buffer = null;
		uint _pos;
		uint _windowSize = 0;
		uint _streamPos;
		System.IO.Stream _stream;

		public void Create(uint windowSize)
		{
			if (_windowSize != windowSize)
			{
				// System.GC.Collect();
				_buffer = new byte[windowSize];
			}
			_windowSize = windowSize;
			_pos = 0;
			_streamPos = 0;
		}

		public void Init(System.IO.Stream stream, bool solid)
		{
			ReleaseStream();
			_stream = stream;
			if (!solid)
			{
				_streamPos = 0;
				_pos = 0;
			}
		}

		public void Init(System.IO.Stream stream) { Init(stream, false); }

		public void ReleaseStream()
		{
			Flush();
			_stream = null;
		}

		public void Flush()
		{
			uint size = _pos - _streamPos;
			if (size == 0)
				return;
			_stream.Write(_buffer, (int)_streamPos, (int)size);
			if (_pos >= _windowSize)
				_pos = 0;
			_streamPos = _pos;
		}

		public void CopyBlock(uint distance, uint len)
		{
			uint pos = _pos - distance - 1;
			if (pos >= _windowSize)
				pos += _windowSize;
			for (; len > 0; len--)
			{
				if (pos >= _windowSize)
					pos = 0;
				_buffer[_pos++] = _buffer[pos++];
				if (_pos >= _windowSize)
					Flush();
			}
		}

		public void PutByte(byte b)
		{
			_buffer[_pos++] = b;
			if (_pos >= _windowSize)
				Flush();
		}

		public byte GetByte(uint distance)
		{
			uint pos = _pos - distance - 1;
			if (pos >= _windowSize)
				pos += _windowSize;
			return _buffer[pos];
		}
	}
}



================================================
File: Sevenzip/Sevenzip/LzmaBase.cs
================================================
// LzmaBase.cs

namespace SevenZipLib
{
	public class LZMABase
	{
		public const uint kNumRepDistances = 4;
		public const uint kNumStates = 12;

		// static byte []kLiteralNextStates  = {0, 0, 0, 0, 1, 2, 3, 4,  5,  6,   4, 5};
		// static byte []kMatchNextStates    = {7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10};
		// static byte []kRepNextStates      = {8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11};
		// static byte []kShortRepNextStates = {9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11};

		public struct State
		{
			public uint Index;
			public void Init() { Index = 0; }
			public void UpdateChar()
			{
				if (Index < 4) Index = 0;
				else if (Index < 10) Index -= 3;
				else Index -= 6;
			}
			public void UpdateMatch() { Index = (uint)(Index < 7 ? 7 : 10); }
			public void UpdateRep() { Index = (uint)(Index < 7 ? 8 : 11); }
			public void UpdateShortRep() { Index = (uint)(Index < 7 ? 9 : 11); }
			public bool IsCharState() { return Index < 7; }
		}

		public const int kNumPosSlotBits = 6;
		public const int kDicLogSizeMin = 0;
		// public const int kDicLogSizeMax = 30;
		// public const uint kDistTableSizeMax = kDicLogSizeMax * 2;

		public const int kNumLenToPosStatesBits = 2; // it's for speed optimization
		public const uint kNumLenToPosStates = 1 << kNumLenToPosStatesBits;

		public const uint kMatchMinLen = 2;

		public static uint GetLenToPosState(uint len)
		{
			len -= kMatchMinLen;
			if (len < kNumLenToPosStates)
				return len;
			return (uint)(kNumLenToPosStates - 1);
		}

		public const int kNumAlignBits = 4;
		public const uint kAlignTableSize = 1 << kNumAlignBits;
		public const uint kAlignMask = (kAlignTableSize - 1);

		public const uint kStartPosModelIndex = 4;
		public const uint kEndPosModelIndex = 14;
		public const uint kNumPosModels = kEndPosModelIndex - kStartPosModelIndex;

		public const uint kNumFullDistances = 1 << ((int)kEndPosModelIndex / 2);

		public const uint kNumLitPosStatesBitsEncodingMax = 4;
		public const uint kNumLitContextBitsMax = 8;

		public const int kNumPosStatesBitsMax = 4;
		public const uint kNumPosStatesMax = (1 << kNumPosStatesBitsMax);
		public const int kNumPosStatesBitsEncodingMax = 4;
		public const uint kNumPosStatesEncodingMax = (1 << kNumPosStatesBitsEncodingMax);

		public const int kNumLowLenBits = 3;
		public const int kNumMidLenBits = 3;
		public const int kNumHighLenBits = 8;
		public const uint kNumLowLenSymbols = 1 << kNumLowLenBits;
		public const uint kNumMidLenSymbols = 1 << kNumMidLenBits;
		public const uint kNumLenSymbols = kNumLowLenSymbols + kNumMidLenSymbols +
				(1 << kNumHighLenBits);
		public const uint kMatchMaxLen = kMatchMinLen + kNumLenSymbols - 1;
	}
}



================================================
File: Sevenzip/Sevenzip/LzmaDecoder.cs
================================================
// LzmaDecoder.cs

using System;

namespace SevenZip
{
    //using RangeCoder;

	public class LZMADecoder : ICoder, ISetDecoderProperties // ,System.IO.Stream
	{
		class LenDecoder
		{
			RangeCoderBitDecoder m_Choice = new RangeCoderBitDecoder();
			RangeCoderBitDecoder m_Choice2 = new RangeCoderBitDecoder();
			RangeCoderBitTreeDecoder[] m_LowCoder = new RangeCoderBitTreeDecoder[LZMABase.kNumPosStatesMax];
			RangeCoderBitTreeDecoder[] m_MidCoder = new RangeCoderBitTreeDecoder[LZMABase.kNumPosStatesMax];
			RangeCoderBitTreeDecoder m_HighCoder = new RangeCoderBitTreeDecoder(LZMABase.kNumHighLenBits);
			uint m_NumPosStates = 0;

			public void Create(uint numPosStates)
			{
				for (uint posState = m_NumPosStates; posState < numPosStates; posState++)
				{
					m_LowCoder[posState] = new RangeCoderBitTreeDecoder(LZMABase.kNumLowLenBits);
					m_MidCoder[posState] = new RangeCoderBitTreeDecoder(LZMABase.kNumMidLenBits);
				}
				m_NumPosStates = numPosStates;
			}

			public void Init()
			{
				m_Choice.Init();
				for (uint posState = 0; posState < m_NumPosStates; posState++)
				{
					m_LowCoder[posState].Init();
					m_MidCoder[posState].Init();
				}
				m_Choice2.Init();
				m_HighCoder.Init();
			}

			public uint Decode(RangeCoderDecoder rangeDecoder, uint posState)
			{
				if (m_Choice.Decode(rangeDecoder) == 0)
					return m_LowCoder[posState].Decode(rangeDecoder);
				else
				{
					uint symbol = LZMABase.kNumLowLenSymbols;
					if (m_Choice2.Decode(rangeDecoder) == 0)
						symbol += m_MidCoder[posState].Decode(rangeDecoder);
					else
					{
						symbol += LZMABase.kNumMidLenSymbols;
						symbol += m_HighCoder.Decode(rangeDecoder);
					}
					return symbol;
				}
			}
		}

		class LiteralDecoder
		{
			struct Decoder2
			{
				RangeCoderBitDecoder[] m_Decoders;
				public void Create() { m_Decoders = new RangeCoderBitDecoder[0x300]; }
				public void Init() { for (int i = 0; i < 0x300; i++) m_Decoders[i].Init(); }

				public byte DecodeNormal(RangeCoderDecoder rangeDecoder)
				{
					uint symbol = 1;
					do
						symbol = (symbol << 1) | m_Decoders[symbol].Decode(rangeDecoder);
					while (symbol < 0x100);
					return (byte)symbol;
				}

				public byte DecodeWithMatchByte(RangeCoderDecoder rangeDecoder, byte matchByte)
				{
					uint symbol = 1;
					do
					{
						uint matchBit = (uint)(matchByte >> 7) & 1;
						matchByte <<= 1;
						uint bit = m_Decoders[((1 + matchBit) << 8) + symbol].Decode(rangeDecoder);
						symbol = (symbol << 1) | bit;
						if (matchBit != bit)
						{
							while (symbol < 0x100)
								symbol = (symbol << 1) | m_Decoders[symbol].Decode(rangeDecoder);
							break;
						}
					}
					while (symbol < 0x100);
					return (byte)symbol;
				}
			}

			Decoder2[] m_Coders;
			int m_NumPrevBits;
			int m_NumPosBits;
			uint m_PosMask;

			public void Create(int numPosBits, int numPrevBits)
			{
				if (m_Coders != null && m_NumPrevBits == numPrevBits &&
					m_NumPosBits == numPosBits)
					return;
				m_NumPosBits = numPosBits;
				m_PosMask = ((uint)1 << numPosBits) - 1;
				m_NumPrevBits = numPrevBits;
				uint numStates = (uint)1 << (m_NumPrevBits + m_NumPosBits);
				m_Coders = new Decoder2[numStates];
				for (uint i = 0; i < numStates; i++)
					m_Coders[i].Create();
			}

			public void Init()
			{
				uint numStates = (uint)1 << (m_NumPrevBits + m_NumPosBits);
               
                for (uint i = 0; i < numStates; i++)
                {
                  
                    m_Coders[i].Init();

                }
			}

			uint GetState(uint pos, byte prevByte)
			{ return ((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits)); }

			public byte DecodeNormal(RangeCoderDecoder rangeDecoder, uint pos, byte prevByte)
			{ return m_Coders[GetState(pos, prevByte)].DecodeNormal(rangeDecoder); }

			public byte DecodeWithMatchByte(RangeCoderDecoder rangeDecoder, uint pos, byte prevByte, byte matchByte)
			{ return m_Coders[GetState(pos, prevByte)].DecodeWithMatchByte(rangeDecoder, matchByte); }
		};

		LZOutWindow m_OutWindow = new LZOutWindow();
		RangeCoderDecoder m_RangeDecoder = new RangeCoderDecoder();

		RangeCoderBitDecoder[] m_IsMatchDecoders = new RangeCoderBitDecoder[LZMABase.kNumStates << LZMABase.kNumPosStatesBitsMax];
		RangeCoderBitDecoder[] m_IsRepDecoders = new RangeCoderBitDecoder[LZMABase.kNumStates];
		RangeCoderBitDecoder[] m_IsRepG0Decoders = new RangeCoderBitDecoder[LZMABase.kNumStates];
		RangeCoderBitDecoder[] m_IsRepG1Decoders = new RangeCoderBitDecoder[LZMABase.kNumStates];
		RangeCoderBitDecoder[] m_IsRepG2Decoders = new RangeCoderBitDecoder[LZMABase.kNumStates];
		RangeCoderBitDecoder[] m_IsRep0LongDecoders = new RangeCoderBitDecoder[LZMABase.kNumStates << LZMABase.kNumPosStatesBitsMax];

		RangeCoderBitTreeDecoder[] m_PosSlotDecoder = new RangeCoderBitTreeDecoder[LZMABase.kNumLenToPosStates];
		RangeCoderBitDecoder[] m_PosDecoders = new RangeCoderBitDecoder[LZMABase.kNumFullDistances - LZMABase.kEndPosModelIndex];

		RangeCoderBitTreeDecoder m_PosAlignDecoder = new RangeCoderBitTreeDecoder(LZMABase.kNumAlignBits);

		LenDecoder m_LenDecoder = new LenDecoder();
		LenDecoder m_RepLenDecoder = new LenDecoder();

		LiteralDecoder m_LiteralDecoder = new LiteralDecoder();

		uint m_DictionarySize;
		uint m_DictionarySizeCheck;

		uint m_PosStateMask;

		public LZMADecoder()
		{
			m_DictionarySize = 0xFFFFFFFF;
			for (int i = 0; i < LZMABase.kNumLenToPosStates; i++)
				m_PosSlotDecoder[i] = new RangeCoderBitTreeDecoder(LZMABase.kNumPosSlotBits);
		}

		void SetDictionarySize(uint dictionarySize)
		{
			if (m_DictionarySize != dictionarySize)
			{
				m_DictionarySize = dictionarySize;
				m_DictionarySizeCheck = Math.Max(m_DictionarySize, 1);
				uint blockSize = Math.Max(m_DictionarySizeCheck, (1 << 12));
				m_OutWindow.Create(blockSize);
			}
		}

		void SetLiteralProperties(int lp, int lc)
		{
			if (lp > 8)
				throw new InvalidParamException();
			if (lc > 8)
				throw new InvalidParamException();
			m_LiteralDecoder.Create(lp, lc);
		}

		void SetPosBitsProperties(int pb)
		{
			if (pb > LZMABase.kNumPosStatesBitsMax)
				throw new InvalidParamException();
			uint numPosStates = (uint)1 << pb;
			m_LenDecoder.Create(numPosStates);
			m_RepLenDecoder.Create(numPosStates);
			m_PosStateMask = numPosStates - 1;
		}

		void Init(System.IO.Stream inStream, System.IO.Stream outStream)
		{
			m_RangeDecoder.Init(inStream);
			m_OutWindow.Init(outStream);

			uint i;
			for (i = 0; i < LZMABase.kNumStates; i++)
			{
				for (uint j = 0; j <= m_PosStateMask; j++)
				{
					uint index = (i << LZMABase.kNumPosStatesBitsMax) + j;
					m_IsMatchDecoders[index].Init();
					m_IsRep0LongDecoders[index].Init();
				}
				m_IsRepDecoders[i].Init();
				m_IsRepG0Decoders[i].Init();
				m_IsRepG1Decoders[i].Init();
				m_IsRepG2Decoders[i].Init();
			}

			m_LiteralDecoder.Init();
			for (i = 0; i < LZMABase.kNumLenToPosStates; i++)
				m_PosSlotDecoder[i].Init();
			// m_PosSpecDecoder.Init();
			for (i = 0; i < LZMABase.kNumFullDistances - LZMABase.kEndPosModelIndex; i++)
				m_PosDecoders[i].Init();

			m_LenDecoder.Init();
			m_RepLenDecoder.Init();
			m_PosAlignDecoder.Init();
		}

		public void Code(System.IO.Stream inStream, System.IO.Stream outStream,
			Int64 inSize, Int64 outSize, ICodeProgress progress)
		{
			Init(inStream, outStream);

			LZMABase.State state = new LZMABase.State();
			state.Init();
			uint rep0 = 0, rep1 = 0, rep2 = 0, rep3 = 0;

			UInt64 nowPos64 = 0;
			UInt64 outSize64 = (UInt64)outSize;
			if (nowPos64 < outSize64)
			{
				if (m_IsMatchDecoders[state.Index << LZMABase.kNumPosStatesBitsMax].Decode(m_RangeDecoder) != 0)
					throw new DataErrorException();
				state.UpdateChar();
				byte b = m_LiteralDecoder.DecodeNormal(m_RangeDecoder, 0, 0);
				m_OutWindow.PutByte(b);
				nowPos64++;
			}
			while (nowPos64 < outSize64)
			{
				// UInt64 next = Math.Min(nowPos64 + (1 << 18), outSize64);
					// while(nowPos64 < next)
				{
					uint posState = (uint)nowPos64 & m_PosStateMask;
					if (m_IsMatchDecoders[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].Decode(m_RangeDecoder) == 0)
					{
						byte b;
						byte prevByte = m_OutWindow.GetByte(0);
						if (!state.IsCharState())
							b = m_LiteralDecoder.DecodeWithMatchByte(m_RangeDecoder,
								(uint)nowPos64, prevByte, m_OutWindow.GetByte(rep0));
						else
							b = m_LiteralDecoder.DecodeNormal(m_RangeDecoder, (uint)nowPos64, prevByte);
						m_OutWindow.PutByte(b);
						state.UpdateChar();
						nowPos64++;
					}
					else
					{
						uint len;
						if (m_IsRepDecoders[state.Index].Decode(m_RangeDecoder) == 1)
						{
							if (m_IsRepG0Decoders[state.Index].Decode(m_RangeDecoder) == 0)
							{
								if (m_IsRep0LongDecoders[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].Decode(m_RangeDecoder) == 0)
								{
									state.UpdateShortRep();
									m_OutWindow.PutByte(m_OutWindow.GetByte(rep0));
									nowPos64++;
									continue;
								}
							}
							else
							{
								UInt32 distance;
								if (m_IsRepG1Decoders[state.Index].Decode(m_RangeDecoder) == 0)
								{
									distance = rep1;
								}
								else
								{
									if (m_IsRepG2Decoders[state.Index].Decode(m_RangeDecoder) == 0)
										distance = rep2;
									else
									{
										distance = rep3;
										rep3 = rep2;
									}
									rep2 = rep1;
								}
								rep1 = rep0;
								rep0 = distance;
							}
							len = m_RepLenDecoder.Decode(m_RangeDecoder, posState) + LZMABase.kMatchMinLen;
							state.UpdateRep();
						}
						else
						{
							rep3 = rep2;
							rep2 = rep1;
							rep1 = rep0;
							len = LZMABase.kMatchMinLen + m_LenDecoder.Decode(m_RangeDecoder, posState);
							state.UpdateMatch();
							uint posSlot = m_PosSlotDecoder[LZMABase.GetLenToPosState(len)].Decode(m_RangeDecoder);
							if (posSlot >= LZMABase.kStartPosModelIndex)
							{
								int numDirectBits = (int)((posSlot >> 1) - 1);
								rep0 = ((2 | (posSlot & 1)) << numDirectBits);
								if (posSlot < LZMABase.kEndPosModelIndex)
									rep0 += RangeCoderBitTreeDecoder.ReverseDecode(m_PosDecoders,
											rep0 - posSlot - 1, m_RangeDecoder, numDirectBits);
								else
								{
									rep0 += (m_RangeDecoder.DecodeDirectBits(
										numDirectBits - LZMABase.kNumAlignBits) << LZMABase.kNumAlignBits);
									rep0 += m_PosAlignDecoder.ReverseDecode(m_RangeDecoder);
								}
							}
							else
								rep0 = posSlot;
						}
						if (rep0 >= nowPos64 || rep0 >= m_DictionarySizeCheck)
						{
							if (rep0 == 0xFFFFFFFF)
								break;
							throw new DataErrorException();
						}
						m_OutWindow.CopyBlock(rep0, len);
						nowPos64 += len;
					}
				}
			}
			m_OutWindow.Flush();
			m_OutWindow.ReleaseStream();
			m_RangeDecoder.ReleaseStream();
		}

		public void SetDecoderProperties(byte[] properties)
		{
			if (properties.Length < 5)
				throw new InvalidParamException();
			int lc = properties[0] % 9;
			int remainder = properties[0] / 9;
			int lp = remainder % 5;
			int pb = remainder / 5;
			if (pb > LZMABase.kNumPosStatesBitsMax)
				throw new InvalidParamException();
			UInt32 dictionarySize = 0;
			for (int i = 0; i < 4; i++)
				dictionarySize += ((UInt32)(properties[1 + i])) << (i * 8);
			SetDictionarySize(dictionarySize);
			SetLiteralProperties(lp, lc);
			SetPosBitsProperties(pb);
		}

		/*
		public override bool CanRead { get { return true; }}
		public override bool CanWrite { get { return true; }}
		public override bool CanSeek { get { return true; }}
		public override long Length { get { return 0; }}
		public override long Position
		{
			get { return 0;	}
			set { }
		}
		public override void Flush() { }
		public override int Read(byte[] buffer, int offset, int count) 
		{
			return 0;
		}
		public override void Write(byte[] buffer, int offset, int count)
		{
		}
		public override long Seek(long offset, System.IO.SeekOrigin origin)
		{
			return 0;
		}
		public override void SetLength(long value) {}
		*/
	}
}



================================================
File: Sevenzip/Sevenzip/LzmaEncoder.cs
================================================
// LzmaEncoder.cs

using System;

namespace SevenZipLib
{
    //using RangeCoder;

	public class LZMAEncoder : ICoder, ISetCoderProperties, IWriteCoderProperties
	{
		enum EMatchFinderType
		{
			BT2,
			BT4,
		};

		const UInt32 kIfinityPrice = 0xFFFFFFF;

		static Byte[] g_FastPos = new Byte[1 << 11];

		static LZMAEncoder()
		{
			const Byte kFastSlots = 22;
			int c = 2;
			g_FastPos[0] = 0;
			g_FastPos[1] = 1;
			for (Byte slotFast = 2; slotFast < kFastSlots; slotFast++)
			{
				UInt32 k = ((UInt32)1 << ((slotFast >> 1) - 1));
				for (UInt32 j = 0; j < k; j++, c++)
					g_FastPos[c] = slotFast;
			}
		}

		static UInt32 GetPosSlot(UInt32 pos)
		{
			if (pos < (1 << 11))
				return g_FastPos[pos];
			if (pos < (1 << 21))
				return (UInt32)(g_FastPos[pos >> 10] + 20);
			return (UInt32)(g_FastPos[pos >> 20] + 40);
		}

		static UInt32 GetPosSlot2(UInt32 pos)
		{
			if (pos < (1 << 17))
				return (UInt32)(g_FastPos[pos >> 6] + 12);
			if (pos < (1 << 27))
				return (UInt32)(g_FastPos[pos >> 16] + 32);
			return (UInt32)(g_FastPos[pos >> 26] + 52);
		}

		LZMABase.State _state = new LZMABase.State();
		Byte _previousByte;
		UInt32[] _repDistances = new UInt32[LZMABase.kNumRepDistances];

		void BaseInit()
		{
			_state.Init();
			_previousByte = 0;
			for (UInt32 i = 0; i < LZMABase.kNumRepDistances; i++)
				_repDistances[i] = 0;
		}

		const int kDefaultDictionaryLogSize = 22;
		const UInt32 kNumFastBytesDefault = 0x20;

		class LiteralEncoder
		{
			public struct Encoder2
			{
				RangeCoderBitEncoder[] m_Encoders;

				public void Create() { m_Encoders = new RangeCoderBitEncoder[0x300]; }

				public void Init() { for (int i = 0; i < 0x300; i++) m_Encoders[i].Init(); }

				public void Encode(RangeCoderEncoder rangeEncoder, byte symbol)
				{
					uint context = 1;
					for (int i = 7; i >= 0; i--)
					{
						uint bit = (uint)((symbol >> i) & 1);
						m_Encoders[context].Encode(rangeEncoder, bit);
						context = (context << 1) | bit;
					}
				}

				public void EncodeMatched(RangeCoderEncoder rangeEncoder, byte matchByte, byte symbol)
				{
					uint context = 1;
					bool same = true;
					for (int i = 7; i >= 0; i--)
					{
						uint bit = (uint)((symbol >> i) & 1);
						uint state = context;
						if (same)
						{
							uint matchBit = (uint)((matchByte >> i) & 1);
							state += ((1 + matchBit) << 8);
							same = (matchBit == bit);
						}
						m_Encoders[state].Encode(rangeEncoder, bit);
						context = (context << 1) | bit;
					}
				}

				public uint GetPrice(bool matchMode, byte matchByte, byte symbol)
				{
					uint price = 0;
					uint context = 1;
					int i = 7;
					if (matchMode)
					{
						for (; i >= 0; i--)
						{
							uint matchBit = (uint)(matchByte >> i) & 1;
							uint bit = (uint)(symbol >> i) & 1;
							price += m_Encoders[((1 + matchBit) << 8) + context].GetPrice(bit);
							context = (context << 1) | bit;
							if (matchBit != bit)
							{
								i--;
								break;
							}
						}
					}
					for (; i >= 0; i--)
					{
						uint bit = (uint)(symbol >> i) & 1;
						price += m_Encoders[context].GetPrice(bit);
						context = (context << 1) | bit;
					}
					return price;
				}
			}

			Encoder2[] m_Coders;
			int m_NumPrevBits;
			int m_NumPosBits;
			uint m_PosMask;

			public void Create(int numPosBits, int numPrevBits)
			{
				if (m_Coders != null && m_NumPrevBits == numPrevBits && m_NumPosBits == numPosBits)
					return;
				m_NumPosBits = numPosBits;
				m_PosMask = ((uint)1 << numPosBits) - 1;
				m_NumPrevBits = numPrevBits;
				uint numStates = (uint)1 << (m_NumPrevBits + m_NumPosBits);
				m_Coders = new Encoder2[numStates];
				for (uint i = 0; i < numStates; i++)
					m_Coders[i].Create();
			}

			public void Init()
			{
				uint numStates = (uint)1 << (m_NumPrevBits + m_NumPosBits);
				for (uint i = 0; i < numStates; i++)
					m_Coders[i].Init();
			}

			public Encoder2 GetSubCoder(UInt32 pos, Byte prevByte)
			{ return m_Coders[((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits))]; }
		}

		public class LenEncoder
		{
			RangeCoderBitEncoder _choice = new RangeCoderBitEncoder();
			RangeCoderBitEncoder _choice2 = new RangeCoderBitEncoder();
			RangeCoderBitTreeEncoder[] _lowCoder = new RangeCoderBitTreeEncoder[LZMABase.kNumPosStatesEncodingMax];
			RangeCoderBitTreeEncoder[] _midCoder = new RangeCoderBitTreeEncoder[LZMABase.kNumPosStatesEncodingMax];
			RangeCoderBitTreeEncoder _highCoder = new RangeCoderBitTreeEncoder(LZMABase.kNumHighLenBits);

			public LenEncoder()
			{
				for (UInt32 posState = 0; posState < LZMABase.kNumPosStatesEncodingMax; posState++)
				{
					_lowCoder[posState] = new RangeCoderBitTreeEncoder(LZMABase.kNumLowLenBits);
					_midCoder[posState] = new RangeCoderBitTreeEncoder(LZMABase.kNumMidLenBits);
				}
			}

			public void Init(UInt32 numPosStates)
			{
				_choice.Init();
				_choice2.Init();
				for (UInt32 posState = 0; posState < numPosStates; posState++)
				{
					_lowCoder[posState].Init();
					_midCoder[posState].Init();
				}
				_highCoder.Init();
			}

			public void Encode(RangeCoderEncoder rangeEncoder, UInt32 symbol, UInt32 posState)
			{
				if (symbol < LZMABase.kNumLowLenSymbols)
				{
					_choice.Encode(rangeEncoder, 0);
					_lowCoder[posState].Encode(rangeEncoder, symbol);
				}
				else
				{
					symbol -= LZMABase.kNumLowLenSymbols;
					_choice.Encode(rangeEncoder, 1);
					if (symbol < LZMABase.kNumMidLenSymbols)
					{
						_choice2.Encode(rangeEncoder, 0);
						_midCoder[posState].Encode(rangeEncoder, symbol);
					}
					else
					{
						_choice2.Encode(rangeEncoder, 1);
						_highCoder.Encode(rangeEncoder, symbol - LZMABase.kNumMidLenSymbols);
					}
				}
			}

			public void SetPrices(UInt32 posState, UInt32 numSymbols, UInt32[] prices, UInt32 st)
			{
				UInt32 a0 = _choice.GetPrice0();
				UInt32 a1 = _choice.GetPrice1();
				UInt32 b0 = a1 + _choice2.GetPrice0();
				UInt32 b1 = a1 + _choice2.GetPrice1();
				UInt32 i = 0;
				for (i = 0; i < LZMABase.kNumLowLenSymbols; i++)
				{
					if (i >= numSymbols)
						return;
					prices[st + i] = a0 + _lowCoder[posState].GetPrice(i);
				}
				for (; i < LZMABase.kNumLowLenSymbols + LZMABase.kNumMidLenSymbols; i++)
				{
					if (i >= numSymbols)
						return;
					prices[st + i] = b0 + _midCoder[posState].GetPrice(i - LZMABase.kNumLowLenSymbols);
				}
				for (; i < numSymbols; i++)
					prices[st + i] = b1 + _highCoder.GetPrice(i - LZMABase.kNumLowLenSymbols - LZMABase.kNumMidLenSymbols);
			}
		};

		const UInt32 kNumLenSpecSymbols = LZMABase.kNumLowLenSymbols + LZMABase.kNumMidLenSymbols;

		class LenPriceTableEncoder : LenEncoder
		{
			UInt32[] _prices = new UInt32[LZMABase.kNumLenSymbols << LZMABase.kNumPosStatesBitsEncodingMax];
			UInt32 _tableSize;
			UInt32[] _counters = new UInt32[LZMABase.kNumPosStatesEncodingMax];

			public void SetTableSize(UInt32 tableSize) { _tableSize = tableSize; }

			public UInt32 GetPrice(UInt32 symbol, UInt32 posState)
			{
				return _prices[posState * LZMABase.kNumLenSymbols + symbol];
			}

			void UpdateTable(UInt32 posState)
			{
				SetPrices(posState, _tableSize, _prices, posState * LZMABase.kNumLenSymbols);
				_counters[posState] = _tableSize;
			}

			public void UpdateTables(UInt32 numPosStates)
			{
				for (UInt32 posState = 0; posState < numPosStates; posState++)
					UpdateTable(posState);
			}

			public new void Encode(RangeCoderEncoder rangeEncoder, UInt32 symbol, UInt32 posState)
			{
				base.Encode(rangeEncoder, symbol, posState);
				if (--_counters[posState] == 0)
					UpdateTable(posState);
			}
		}

		const UInt32 kNumOpts = 1 << 12;
		class Optimal
		{
			public LZMABase.State State;

			public bool Prev1IsChar;
			public bool Prev2;

			public UInt32 PosPrev2;
			public UInt32 BackPrev2;

			public UInt32 Price;
			public UInt32 PosPrev;
			public UInt32 BackPrev;

			public UInt32 Backs0;
			public UInt32 Backs1;
			public UInt32 Backs2;
			public UInt32 Backs3;

			public void MakeAsChar() { BackPrev = 0xFFFFFFFF; Prev1IsChar = false; }
			public void MakeAsShortRep() { BackPrev = 0; ; Prev1IsChar = false; }
			public bool IsShortRep() { return (BackPrev == 0); }
		};
		Optimal[] _optimum = new Optimal[kNumOpts];
		IMatchFinder _matchFinder = null;
		RangeCoderEncoder _rangeEncoder = new RangeCoderEncoder();

		RangeCoderBitEncoder[] _isMatch = new RangeCoderBitEncoder[LZMABase.kNumStates << LZMABase.kNumPosStatesBitsMax];
		RangeCoderBitEncoder[] _isRep = new RangeCoderBitEncoder[LZMABase.kNumStates];
		RangeCoderBitEncoder[] _isRepG0 = new RangeCoderBitEncoder[LZMABase.kNumStates];
		RangeCoderBitEncoder[] _isRepG1 = new RangeCoderBitEncoder[LZMABase.kNumStates];
		RangeCoderBitEncoder[] _isRepG2 = new RangeCoderBitEncoder[LZMABase.kNumStates];
		RangeCoderBitEncoder[] _isRep0Long = new RangeCoderBitEncoder[LZMABase.kNumStates << LZMABase.kNumPosStatesBitsMax];

		RangeCoderBitTreeEncoder[] _posSlotEncoder = new RangeCoderBitTreeEncoder[LZMABase.kNumLenToPosStates];
		
		RangeCoderBitEncoder[] _posEncoders = new RangeCoderBitEncoder[LZMABase.kNumFullDistances - LZMABase.kEndPosModelIndex];
		RangeCoderBitTreeEncoder _posAlignEncoder = new RangeCoderBitTreeEncoder(LZMABase.kNumAlignBits);

		LenPriceTableEncoder _lenEncoder = new LenPriceTableEncoder();
		LenPriceTableEncoder _repMatchLenEncoder = new LenPriceTableEncoder();

		LiteralEncoder _literalEncoder = new LiteralEncoder();

		UInt32[] _matchDistances = new UInt32[LZMABase.kMatchMaxLen * 2 + 2];
		
		UInt32 _numFastBytes = kNumFastBytesDefault;
		UInt32 _longestMatchLength;
		UInt32 _numDistancePairs;

		UInt32 _additionalOffset;

		UInt32 _optimumEndIndex;
		UInt32 _optimumCurrentIndex;

		bool _longestMatchWasFound;

		UInt32[] _posSlotPrices = new UInt32[1 << (LZMABase.kNumPosSlotBits + LZMABase.kNumLenToPosStatesBits)];
		UInt32[] _distancesPrices = new UInt32[LZMABase.kNumFullDistances << LZMABase.kNumLenToPosStatesBits];
		UInt32[] _alignPrices = new UInt32[LZMABase.kAlignTableSize];
		UInt32 _alignPriceCount;

		UInt32 _distTableSize = (kDefaultDictionaryLogSize * 2);

		int _posStateBits = 2;
		UInt32 _posStateMask = (4 - 1);
		int _numLiteralPosStateBits = 0;
		int _numLiteralContextBits = 3;

		UInt32 _dictionarySize = (1 << kDefaultDictionaryLogSize);
		UInt32 _dictionarySizePrev = 0xFFFFFFFF;
		UInt32 _numFastBytesPrev = 0xFFFFFFFF;

		Int64 nowPos64;
		bool _finished;
		System.IO.Stream _inStream;

		EMatchFinderType _matchFinderType = EMatchFinderType.BT4;
		bool _writeEndMark = false;
		
		bool _needReleaseMFStream;

		void Create()
		{
			if (_matchFinder == null)
			{
				LZBinTree bt = new LZBinTree();
				int numHashBytes = 4;
				if (_matchFinderType == EMatchFinderType.BT2)
					numHashBytes = 2;
				bt.SetType(numHashBytes);
				_matchFinder = bt;
			}
			_literalEncoder.Create(_numLiteralPosStateBits, _numLiteralContextBits);

			if (_dictionarySize == _dictionarySizePrev && _numFastBytesPrev == _numFastBytes)
				return;
			_matchFinder.Create(_dictionarySize, kNumOpts, _numFastBytes, LZMABase.kMatchMaxLen + 1);
			_dictionarySizePrev = _dictionarySize;
			_numFastBytesPrev = _numFastBytes;
		}

		public LZMAEncoder()
		{
			for (int i = 0; i < kNumOpts; i++)
				_optimum[i] = new Optimal();
			for (int i = 0; i < LZMABase.kNumLenToPosStates; i++)
				_posSlotEncoder[i] = new RangeCoderBitTreeEncoder(LZMABase.kNumPosSlotBits);
		}

		void SetWriteEndMarkerMode(bool writeEndMarker)
		{
			_writeEndMark = writeEndMarker;
		}

		void Init()
		{
			BaseInit();
			_rangeEncoder.Init();

			uint i;
			for (i = 0; i < LZMABase.kNumStates; i++)
			{
				for (uint j = 0; j <= _posStateMask; j++)
				{
					uint complexState = (i << LZMABase.kNumPosStatesBitsMax) + j;
					_isMatch[complexState].Init();
					_isRep0Long[complexState].Init();
				}
				_isRep[i].Init();
				_isRepG0[i].Init();
				_isRepG1[i].Init();
				_isRepG2[i].Init();
			}
			_literalEncoder.Init();
			for (i = 0; i < LZMABase.kNumLenToPosStates; i++)
				_posSlotEncoder[i].Init();
			for (i = 0; i < LZMABase.kNumFullDistances - LZMABase.kEndPosModelIndex; i++)
				_posEncoders[i].Init();

			_lenEncoder.Init((UInt32)1 << _posStateBits);
			_repMatchLenEncoder.Init((UInt32)1 << _posStateBits);

			_posAlignEncoder.Init();

			_longestMatchWasFound = false;
			_optimumEndIndex = 0;
			_optimumCurrentIndex = 0;
			_additionalOffset = 0;
		}

		void ReadMatchDistances(out UInt32 lenRes, out UInt32 numDistancePairs)
		{
			lenRes = 0;
			numDistancePairs = _matchFinder.GetMatches(_matchDistances);
			if (numDistancePairs > 0)
			{
				lenRes = _matchDistances[numDistancePairs - 2];
				if (lenRes == _numFastBytes)
					lenRes += _matchFinder.GetMatchLen((int)lenRes - 1, _matchDistances[numDistancePairs - 1],
						LZMABase.kMatchMaxLen - lenRes);
			}
			_additionalOffset++;
		}


		void MovePos(UInt32 num)
		{
			if (num > 0)
			{
				_matchFinder.Skip(num);
				_additionalOffset += num;
			}
		}

		UInt32 GetRepLen1Price(LZMABase.State state, UInt32 posState)
		{
			return _isRepG0[state.Index].GetPrice0() +
					_isRep0Long[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice0();
		}

		UInt32 GetPureRepPrice(UInt32 repIndex, LZMABase.State state, UInt32 posState)
		{
			UInt32 price;
			if (repIndex == 0)
			{
				price = _isRepG0[state.Index].GetPrice0();
				price += _isRep0Long[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice1();
			}
			else
			{
				price = _isRepG0[state.Index].GetPrice1();
				if (repIndex == 1)
					price += _isRepG1[state.Index].GetPrice0();
				else
				{
					price += _isRepG1[state.Index].GetPrice1();
					price += _isRepG2[state.Index].GetPrice(repIndex - 2);
				}
			}
			return price;
		}

		UInt32 GetRepPrice(UInt32 repIndex, UInt32 len, LZMABase.State state, UInt32 posState)
		{
			UInt32 price = _repMatchLenEncoder.GetPrice(len - LZMABase.kMatchMinLen, posState);
			return price + GetPureRepPrice(repIndex, state, posState);
		}
	
		UInt32 GetPosLenPrice(UInt32 pos, UInt32 len, UInt32 posState)
		{
			UInt32 price;
			UInt32 lenToPosState = LZMABase.GetLenToPosState(len);
			if (pos < LZMABase.kNumFullDistances)
				price = _distancesPrices[(lenToPosState * LZMABase.kNumFullDistances) + pos];
			else
				price = _posSlotPrices[(lenToPosState << LZMABase.kNumPosSlotBits) + GetPosSlot2(pos)] +
					_alignPrices[pos & LZMABase.kAlignMask];
			return price + _lenEncoder.GetPrice(len - LZMABase.kMatchMinLen, posState);
		}

		UInt32 Backward(out UInt32 backRes, UInt32 cur)
		{
			_optimumEndIndex = cur;
			UInt32 posMem = _optimum[cur].PosPrev;
			UInt32 backMem = _optimum[cur].BackPrev;
			do
			{
				if (_optimum[cur].Prev1IsChar)
				{
					_optimum[posMem].MakeAsChar();
					_optimum[posMem].PosPrev = posMem - 1;
					if (_optimum[cur].Prev2)
					{
						_optimum[posMem - 1].Prev1IsChar = false;
						_optimum[posMem - 1].PosPrev = _optimum[cur].PosPrev2;
						_optimum[posMem - 1].BackPrev = _optimum[cur].BackPrev2;
					}
				}
				UInt32 posPrev = posMem;
				UInt32 backCur = backMem;

				backMem = _optimum[posPrev].BackPrev;
				posMem = _optimum[posPrev].PosPrev;

				_optimum[posPrev].BackPrev = backCur;
				_optimum[posPrev].PosPrev = cur;
				cur = posPrev;
			}
			while (cur > 0);
			backRes = _optimum[0].BackPrev;
			_optimumCurrentIndex = _optimum[0].PosPrev;
			return _optimumCurrentIndex;
		}

		UInt32[] reps = new UInt32[LZMABase.kNumRepDistances];
		UInt32[] repLens = new UInt32[LZMABase.kNumRepDistances];


		UInt32 GetOptimum(UInt32 position, out UInt32 backRes)
		{
			if (_optimumEndIndex != _optimumCurrentIndex)
			{
				UInt32 lenRes = _optimum[_optimumCurrentIndex].PosPrev - _optimumCurrentIndex;
				backRes = _optimum[_optimumCurrentIndex].BackPrev;
				_optimumCurrentIndex = _optimum[_optimumCurrentIndex].PosPrev;
				return lenRes;
			}
			_optimumCurrentIndex = _optimumEndIndex = 0;

			UInt32 lenMain, numDistancePairs;
			if (!_longestMatchWasFound)
			{
				ReadMatchDistances(out lenMain, out numDistancePairs);
			}
			else
			{
				lenMain = _longestMatchLength;
				numDistancePairs = _numDistancePairs;
				_longestMatchWasFound = false;
			}

			UInt32 numAvailableBytes = _matchFinder.GetNumAvailableBytes() + 1;
			if (numAvailableBytes < 2)
			{
				backRes = 0xFFFFFFFF;
				return 1;
			}
			if (numAvailableBytes > LZMABase.kMatchMaxLen)
				numAvailableBytes = LZMABase.kMatchMaxLen;

			UInt32 repMaxIndex = 0;
			UInt32 i;			
			for (i = 0; i < LZMABase.kNumRepDistances; i++)
			{
				reps[i] = _repDistances[i];
				repLens[i] = _matchFinder.GetMatchLen(0 - 1, reps[i], LZMABase.kMatchMaxLen);
				if (repLens[i] > repLens[repMaxIndex])
					repMaxIndex = i;
			}
			if (repLens[repMaxIndex] >= _numFastBytes)
			{
				backRes = repMaxIndex;
				UInt32 lenRes = repLens[repMaxIndex];
				MovePos(lenRes - 1);
				return lenRes;
			}

			if (lenMain >= _numFastBytes)
			{
				backRes = _matchDistances[numDistancePairs - 1] + LZMABase.kNumRepDistances;
				MovePos(lenMain - 1);
				return lenMain;
			}
			
			Byte currentByte = _matchFinder.GetIndexByte(0 - 1);
			Byte matchByte = _matchFinder.GetIndexByte((Int32)(0 - _repDistances[0] - 1 - 1));

			if (lenMain < 2 && currentByte != matchByte && repLens[repMaxIndex] < 2)
			{
				backRes = (UInt32)0xFFFFFFFF;
				return 1;
			}

			_optimum[0].State = _state;

			UInt32 posState = (position & _posStateMask);

			_optimum[1].Price = _isMatch[(_state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice0() +
					_literalEncoder.GetSubCoder(position, _previousByte).GetPrice(!_state.IsCharState(), matchByte, currentByte);
			_optimum[1].MakeAsChar();

			UInt32 matchPrice = _isMatch[(_state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice1();
			UInt32 repMatchPrice = matchPrice + _isRep[_state.Index].GetPrice1();

			if (matchByte == currentByte)
			{
				UInt32 shortRepPrice = repMatchPrice + GetRepLen1Price(_state, posState);
				if (shortRepPrice < _optimum[1].Price)
				{
					_optimum[1].Price = shortRepPrice;
					_optimum[1].MakeAsShortRep();
				}
			}

			UInt32 lenEnd = ((lenMain >= repLens[repMaxIndex]) ? lenMain : repLens[repMaxIndex]);

			if(lenEnd < 2)
			{
				backRes = _optimum[1].BackPrev;
				return 1;
			}
			
			_optimum[1].PosPrev = 0;

			_optimum[0].Backs0 = reps[0];
			_optimum[0].Backs1 = reps[1];
			_optimum[0].Backs2 = reps[2];
			_optimum[0].Backs3 = reps[3];

			UInt32 len = lenEnd;
			do
				_optimum[len--].Price = kIfinityPrice;
			while (len >= 2);

			for (i = 0; i < LZMABase.kNumRepDistances; i++)
			{
				UInt32 repLen = repLens[i];
				if (repLen < 2)
					continue;
				UInt32 price = repMatchPrice + GetPureRepPrice(i, _state, posState);
				do
				{
					UInt32 curAndLenPrice = price + _repMatchLenEncoder.GetPrice(repLen - 2, posState);
					Optimal optimum = _optimum[repLen];
					if (curAndLenPrice < optimum.Price)
					{
						optimum.Price = curAndLenPrice;
						optimum.PosPrev = 0;
						optimum.BackPrev = i;
						optimum.Prev1IsChar = false;
					}
				}
				while (--repLen >= 2);
			}

			UInt32 normalMatchPrice = matchPrice + _isRep[_state.Index].GetPrice0();
			
			len = ((repLens[0] >= 2) ? repLens[0] + 1 : 2);
			if (len <= lenMain)
			{
				UInt32 offs = 0;
				while (len > _matchDistances[offs])
					offs += 2;
				for (; ; len++)
				{
					UInt32 distance = _matchDistances[offs + 1];
					UInt32 curAndLenPrice = normalMatchPrice + GetPosLenPrice(distance, len, posState);
					Optimal optimum = _optimum[len];
					if (curAndLenPrice < optimum.Price)
					{
						optimum.Price = curAndLenPrice;
						optimum.PosPrev = 0;
						optimum.BackPrev = distance + LZMABase.kNumRepDistances;
						optimum.Prev1IsChar = false;
					}
					if (len == _matchDistances[offs])
					{
						offs += 2;
						if (offs == numDistancePairs)
							break;
					}
				}
			}

			UInt32 cur = 0;

			while (true)
			{
				cur++;
				if (cur == lenEnd)
					return Backward(out backRes, cur);
				UInt32 newLen;
				ReadMatchDistances(out newLen, out numDistancePairs);
				if (newLen >= _numFastBytes)
				{
					_numDistancePairs = numDistancePairs;
					_longestMatchLength = newLen;
					_longestMatchWasFound = true;
					return Backward(out backRes, cur);
				}
				position++;
				UInt32 posPrev = _optimum[cur].PosPrev;
				LZMABase.State state;
				if (_optimum[cur].Prev1IsChar)
				{
					posPrev--;
					if (_optimum[cur].Prev2)
					{
						state = _optimum[_optimum[cur].PosPrev2].State;
						if (_optimum[cur].BackPrev2 < LZMABase.kNumRepDistances)
							state.UpdateRep();
						else
							state.UpdateMatch();
					}
					else
						state = _optimum[posPrev].State;
					state.UpdateChar();
				}
				else
					state = _optimum[posPrev].State;
				if (posPrev == cur - 1)
				{
					if (_optimum[cur].IsShortRep())
						state.UpdateShortRep();
					else
						state.UpdateChar();
				}
				else
				{
					UInt32 pos;
					if (_optimum[cur].Prev1IsChar && _optimum[cur].Prev2)
					{
						posPrev = _optimum[cur].PosPrev2;
						pos = _optimum[cur].BackPrev2;
						state.UpdateRep();
					}
					else
					{
						pos = _optimum[cur].BackPrev;
						if (pos < LZMABase.kNumRepDistances)
							state.UpdateRep();
						else
							state.UpdateMatch();
					}
					Optimal opt = _optimum[posPrev];
					if (pos < LZMABase.kNumRepDistances)
					{
						if (pos == 0)
						{
							reps[0] = opt.Backs0;
							reps[1] = opt.Backs1;
							reps[2] = opt.Backs2;
							reps[3] = opt.Backs3;
						}
						else if (pos == 1)
						{
							reps[0] = opt.Backs1;
							reps[1] = opt.Backs0;
							reps[2] = opt.Backs2;
							reps[3] = opt.Backs3;
						}
						else if (pos == 2)
						{
							reps[0] = opt.Backs2;
							reps[1] = opt.Backs0;
							reps[2] = opt.Backs1;
							reps[3] = opt.Backs3;
						}
						else
						{
							reps[0] = opt.Backs3;
							reps[1] = opt.Backs0;
							reps[2] = opt.Backs1;
							reps[3] = opt.Backs2;
						}
					}
					else
					{
						reps[0] = (pos - LZMABase.kNumRepDistances);
						reps[1] = opt.Backs0;
						reps[2] = opt.Backs1;
						reps[3] = opt.Backs2;
					}
				}
				_optimum[cur].State = state;
				_optimum[cur].Backs0 = reps[0];
				_optimum[cur].Backs1 = reps[1];
				_optimum[cur].Backs2 = reps[2];
				_optimum[cur].Backs3 = reps[3];
				UInt32 curPrice = _optimum[cur].Price;

				currentByte = _matchFinder.GetIndexByte(0 - 1);
				matchByte = _matchFinder.GetIndexByte((Int32)(0 - reps[0] - 1 - 1));

				posState = (position & _posStateMask);

				UInt32 curAnd1Price = curPrice +
					_isMatch[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice0() +
					_literalEncoder.GetSubCoder(position, _matchFinder.GetIndexByte(0 - 2)).
					GetPrice(!state.IsCharState(), matchByte, currentByte);

				Optimal nextOptimum = _optimum[cur + 1];

				bool nextIsChar = false;
				if (curAnd1Price < nextOptimum.Price)
				{
					nextOptimum.Price = curAnd1Price;
					nextOptimum.PosPrev = cur;
					nextOptimum.MakeAsChar();
					nextIsChar = true;
				}

				matchPrice = curPrice + _isMatch[(state.Index << LZMABase.kNumPosStatesBitsMax) + posState].GetPrice1();
				repMatchPrice = matchPrice + _isRep[state.Index].GetPrice1();

				if (matchByte == currentByte &&
					!(nextOptimum.PosPrev < cur && nextOptimum.BackPrev == 0))
				{
					UInt32 shortRepPrice = repMatchPrice + GetRepLen1Price(state, posState);
					if (shortRepPrice <= nextOptimum.Price)
					{
						nextOptimum.Price = shortRepPrice;
						nextOptimum.PosPrev = cur;
						nextOptimum.MakeAsShortRep();
						nextIsChar = true;
					}
				}

				UInt32 numAvailableBytesFull = _matchFinder.GetNumAvailableBytes() + 1;
				numAvailableBytesFull = Math.Min(kNumOpts - 1 - cur, numAvailableBytesFull);
				numAvailableBytes = numAvailableBytesFull;

				if (numAvailableBytes < 2)
					continue;
				if (numAvailableBytes > _numFastBytes)
					numAvailableBytes = _numFastBytes;
				if (!nextIsChar && matchByte != currentByte)
				{
					// try Literal + rep0
					UInt32 t = Math.Min(numAvailableBytesFull - 1, _numFastBytes);
					UInt32 lenTest2 = _matchFinder.GetMatchLen(0, reps[0], t);
					if (lenTest2 >= 2)
					{
						LZMABase.State state2 = state;
						state2.UpdateChar();
						UInt32 posStateNext = (position + 1) & _posStateMask;
						UInt32 nextRepMatchPrice = curAnd1Price +
							_isMatch[(state2.Index << LZMABase.kNumPosStatesBitsMax) + posStateNext].GetPrice1() +
							_isRep[state2.Index].GetPrice1();
						{
							UInt32 offset = cur + 1 + lenTest2;
							while (lenEnd < offset)
								_optimum[++lenEnd].Price = kIfinityPrice;
							UInt32 curAndLenPrice = nextRepMatchPrice + GetRepPrice(
								0, lenTest2, state2, posStateNext);
							Optimal optimum = _optimum[offset];
							if (curAndLenPrice < optimum.Price)
							{
								optimum.Price = curAndLenPrice;
								optimum.PosPrev = cur + 1;
								optimum.BackPrev = 0;
								optimum.Prev1IsChar = true;
								optimum.Prev2 = false;
							}
						}
					}
				}

				UInt32 startLen = 2; // speed optimization 

				for (UInt32 repIndex = 0; repIndex < LZMABase.kNumRepDistances; repIndex++)
				{
					UInt32 lenTest = _matchFinder.GetMatchLen(0 - 1, reps[repIndex], numAvailableBytes);
					if (lenTest < 2)
						continue;
					UInt32 lenTestTemp = lenTest;
					do
					{
						while (lenEnd < cur + lenTest)
							_optimum[++lenEnd].Price = kIfinityPrice;
						UInt32 curAndLenPrice = repMatchPrice + GetRepPrice(repIndex, lenTest, state, posState);
						Optimal optimum = _optimum[cur + lenTest];
						if (curAndLenPrice < optimum.Price)
						{
							optimum.Price = curAndLenPrice;
							optimum.PosPrev = cur;
							optimum.BackPrev = repIndex;
							optimum.Prev1IsChar = false;
						}
					}
					while(--lenTest >= 2);
					lenTest = lenTestTemp;

					if (repIndex == 0)
						startLen = lenTest + 1;

					// if (_maxMode)
					if (lenTest < numAvailableBytesFull)
					{
						UInt32 t = Math.Min(numAvailableBytesFull - 1 - lenTest, _numFastBytes);
						UInt32 lenTest2 = _matchFinder.GetMatchLen((Int32)lenTest, reps[repIndex], t);
						if (lenTest2 >= 2)
						{
							LZMABase.State state2 = state;
							state2.UpdateRep();
							UInt32 posStateNext = (position + lenTest) & _posStateMask;
							UInt32 curAndLenCharPrice = 
									repMatchPrice + GetRepPrice(repIndex, lenTest, state, posState) + 
									_isMatch[(state2.Index << LZMABase.kNumPosStatesBitsMax) + posStateNext].GetPrice0() +
									_literalEncoder.GetSubCoder(position + lenTest, 
									_matchFinder.GetIndexByte((Int32)lenTest - 1 - 1)).GetPrice(true,
									_matchFinder.GetIndexByte((Int32)((Int32)lenTest - 1 - (Int32)(reps[repIndex] + 1))), 
									_matchFinder.GetIndexByte((Int32)lenTest - 1));
							state2.UpdateChar();
							posStateNext = (position + lenTest + 1) & _posStateMask;
							UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << LZMABase.kNumPosStatesBitsMax) + posStateNext].GetPrice1();
							UInt32 nextRepMatchPrice = nextMatchPrice + _isRep[state2.Index].GetPrice1();
							
							// for(; lenTest2 >= 2; lenTest2--)
							{
								UInt32 offset = lenTest + 1 + lenTest2;
								while(lenEnd < cur + offset)
									_optimum[++lenEnd].Price = kIfinityPrice;
								UInt32 curAndLenPrice = nextRepMatchPrice + GetRepPrice(0, lenTest2, state2, posStateNext);
								Optimal optimum = _optimum[cur + offset];
								if (curAndLenPrice < optimum.Price) 
								{
									optimum.Price = curAndLenPrice;
									optimum.PosPrev = cur + lenTest + 1;
									optimum.BackPrev = 0;
									optimum.Prev1IsChar = true;
									optimum.Prev2 = true;
									optimum.PosPrev2 = cur;
									optimum.BackPrev2 = repIndex;
								}
							}
						}
					}
				}

				if (newLen > numAvailableBytes)
				{
					newLen = numAvailableBytes;
					for (numDistancePairs = 0; newLen > _matchDistances[numDistancePairs]; numDistancePairs += 2) ;
					_matchDistances[numDistancePairs] = newLen;
					numDistancePairs += 2;
				}
				if (newLen >= startLen)
				{
					normalMatchPrice = matchPrice + _isRep[state.Index].GetPrice0();
					while (lenEnd < cur + newLen)
						_optimum[++lenEnd].Price = kIfinityPrice;

					UInt32 offs = 0;
					while (startLen > _matchDistances[offs])
						offs += 2;

					for (UInt32 lenTest = startLen; ; lenTest++)
					{
						UInt32 curBack = _matchDistances[offs + 1];
						UInt32 curAndLenPrice = normalMatchPrice + GetPosLenPrice(curBack, lenTest, posState);
						Optimal optimum = _optimum[cur + lenTest];
						if (curAndLenPrice < optimum.Price)
						{
							optimum.Price = curAndLenPrice;
							optimum.PosPrev = cur;
							optimum.BackPrev = curBack + LZMABase.kNumRepDistances;
							optimum.Prev1IsChar = false;
						}

						if (lenTest == _matchDistances[offs])
						{
							if (lenTest < numAvailableBytesFull)
							{
								UInt32 t = Math.Min(numAvailableBytesFull - 1 - lenTest, _numFastBytes);
								UInt32 lenTest2 = _matchFinder.GetMatchLen((Int32)lenTest, curBack, t);
								if (lenTest2 >= 2)
								{
									LZMABase.State state2 = state;
									state2.UpdateMatch();
									UInt32 posStateNext = (position + lenTest) & _posStateMask;
									UInt32 curAndLenCharPrice = curAndLenPrice +
										_isMatch[(state2.Index << LZMABase.kNumPosStatesBitsMax) + posStateNext].GetPrice0() +
										_literalEncoder.GetSubCoder(position + lenTest,
										_matchFinder.GetIndexByte((Int32)lenTest - 1 - 1)).
										GetPrice(true,
										_matchFinder.GetIndexByte((Int32)lenTest - (Int32)(curBack + 1) - 1),
										_matchFinder.GetIndexByte((Int32)lenTest - 1));
									state2.UpdateChar();
									posStateNext = (position + lenTest + 1) & _posStateMask;
									UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << LZMABase.kNumPosStatesBitsMax) + posStateNext].GetPrice1();
									UInt32 nextRepMatchPrice = nextMatchPrice + _isRep[state2.Index].GetPrice1();

									UInt32 offset = lenTest + 1 + lenTest2;
									while (lenEnd < cur + offset)
										_optimum[++lenEnd].Price = kIfinityPrice;
									curAndLenPrice = nextRepMatchPrice + GetRepPrice(0, lenTest2, state2, posStateNext);
									optimum = _optimum[cur + offset];
									if (curAndLenPrice < optimum.Price)
									{
										optimum.Price = curAndLenPrice;
										optimum.PosPrev = cur + lenTest + 1;
										optimum.BackPrev = 0;
										optimum.Prev1IsChar = true;
										optimum.Prev2 = true;
										optimum.PosPrev2 = cur;
										optimum.BackPrev2 = curBack + LZMABase.kNumRepDistances;
									}
								}
							}
							offs += 2;
							if (offs == numDistancePairs)
								break;
						}
					}
				}
			}
		}

		bool ChangePair(UInt32 smallDist, UInt32 bigDist)
		{
			const int kDif = 7;
			return (smallDist < ((UInt32)(1) << (32 - kDif)) && bigDist >= (smallDist << kDif));
		}

		void WriteEndMarker(UInt32 posState)
		{
			if (!_writeEndMark)
				return;

			_isMatch[(_state.Index << LZMABase.kNumPosStatesBitsMax) + posState].Encode(_rangeEncoder, 1);
			_isRep[_state.Index].Encode(_rangeEncoder, 0);
			_state.UpdateMatch();
			UInt32 len = LZMABase.kMatchMinLen;
			_lenEncoder.Encode(_rangeEncoder, len - LZMABase.kMatchMinLen, posState);
			UInt32 posSlot = (1 << LZMABase.kNumPosSlotBits) - 1;
			UInt32 lenToPosState = LZMABase.GetLenToPosState(len);
			_posSlotEncoder[lenToPosState].Encode(_rangeEncoder, posSlot);
			int footerBits = 30;
			UInt32 posReduced = (((UInt32)1) << footerBits) - 1;
			_rangeEncoder.EncodeDirectBits(posReduced >> LZMABase.kNumAlignBits, footerBits - LZMABase.kNumAlignBits);
			_posAlignEncoder.ReverseEncode(_rangeEncoder, posReduced & LZMABase.kAlignMask);
		}

		void Flush(UInt32 nowPos)
		{
			ReleaseMFStream();
			WriteEndMarker(nowPos & _posStateMask);
			_rangeEncoder.FlushData();
			_rangeEncoder.FlushStream();
		}

		public void CodeOneBlock(out Int64 inSize, out Int64 outSize, out bool finished)
		{
			inSize = 0;
			outSize = 0;
			finished = true;

			if (_inStream != null)
			{
				_matchFinder.SetStream(_inStream);
				_matchFinder.Init();
				_needReleaseMFStream = true;
				_inStream = null;
			}

			if (_finished)
				return;
			_finished = true;


			Int64 progressPosValuePrev = nowPos64;
			if (nowPos64 == 0)
			{
				if (_matchFinder.GetNumAvailableBytes() == 0)
				{
					Flush((UInt32)nowPos64);
					return;
				}
				UInt32 len, numDistancePairs; // it's not used
				ReadMatchDistances(out len, out numDistancePairs);
				UInt32 posState = (UInt32)(nowPos64) & _posStateMask;
				_isMatch[(_state.Index << LZMABase.kNumPosStatesBitsMax) + posState].Encode(_rangeEncoder, 0);
				_state.UpdateChar();
				Byte curByte = _matchFinder.GetIndexByte((Int32)(0 - _additionalOffset));
				_literalEncoder.GetSubCoder((UInt32)(nowPos64), _previousByte).Encode(_rangeEncoder, curByte);
				_previousByte = curByte;
				_additionalOffset--;
				nowPos64++;
			}
			if (_matchFinder.GetNumAvailableBytes() == 0)
			{
				Flush((UInt32)nowPos64);
				return;
			}
			while (true)
			{
				UInt32 pos;
				UInt32 len = GetOptimum((UInt32)nowPos64, out pos);
				
				UInt32 posState = ((UInt32)nowPos64) & _posStateMask;
				UInt32 complexState = (_state.Index << LZMABase.kNumPosStatesBitsMax) + posState;
				if (len == 1 && pos == 0xFFFFFFFF)
				{
					_isMatch[complexState].Encode(_rangeEncoder, 0);
					Byte curByte = _matchFinder.GetIndexByte((Int32)(0 - _additionalOffset));
					LiteralEncoder.Encoder2 subCoder = _literalEncoder.GetSubCoder((UInt32)nowPos64, _previousByte);
					if (!_state.IsCharState())
					{
						Byte matchByte = _matchFinder.GetIndexByte((Int32)(0 - _repDistances[0] - 1 - _additionalOffset));
						subCoder.EncodeMatched(_rangeEncoder, matchByte, curByte);
					}
					else
						subCoder.Encode(_rangeEncoder, curByte);
					_previousByte = curByte;
					_state.UpdateChar();
				}
				else
				{
					_isMatch[complexState].Encode(_rangeEncoder, 1);
					if (pos < LZMABase.kNumRepDistances)
					{
						_isRep[_state.Index].Encode(_rangeEncoder, 1);
						if (pos == 0)
						{
							_isRepG0[_state.Index].Encode(_rangeEncoder, 0);
							if (len == 1)
								_isRep0Long[complexState].Encode(_rangeEncoder, 0);
							else
								_isRep0Long[complexState].Encode(_rangeEncoder, 1);
						}
						else
						{
							_isRepG0[_state.Index].Encode(_rangeEncoder, 1);
							if (pos == 1)
								_isRepG1[_state.Index].Encode(_rangeEncoder, 0);
							else
							{
								_isRepG1[_state.Index].Encode(_rangeEncoder, 1);
								_isRepG2[_state.Index].Encode(_rangeEncoder, pos - 2);
							}
						}
						if (len == 1)
							_state.UpdateShortRep();
						else
						{
							_repMatchLenEncoder.Encode(_rangeEncoder, len - LZMABase.kMatchMinLen, posState);
							_state.UpdateRep();
						}
						UInt32 distance = _repDistances[pos];
						if (pos != 0)
						{
							for (UInt32 i = pos; i >= 1; i--)
								_repDistances[i] = _repDistances[i - 1];
							_repDistances[0] = distance;
						}
					}
					else
					{
						_isRep[_state.Index].Encode(_rangeEncoder, 0);
						_state.UpdateMatch();
						_lenEncoder.Encode(_rangeEncoder, len - LZMABase.kMatchMinLen, posState);
						pos -= LZMABase.kNumRepDistances;
						UInt32 posSlot = GetPosSlot(pos);
						UInt32 lenToPosState = LZMABase.GetLenToPosState(len);
						_posSlotEncoder[lenToPosState].Encode(_rangeEncoder, posSlot);

						if (posSlot >= LZMABase.kStartPosModelIndex)
						{
							int footerBits = (int)((posSlot >> 1) - 1);
							UInt32 baseVal = ((2 | (posSlot & 1)) << footerBits);
							UInt32 posReduced = pos - baseVal;

							if (posSlot < LZMABase.kEndPosModelIndex)
								RangeCoderBitTreeEncoder.ReverseEncode(_posEncoders,
										baseVal - posSlot - 1, _rangeEncoder, footerBits, posReduced);
							else
							{
								_rangeEncoder.EncodeDirectBits(posReduced >> LZMABase.kNumAlignBits, footerBits - LZMABase.kNumAlignBits);
								_posAlignEncoder.ReverseEncode(_rangeEncoder, posReduced & LZMABase.kAlignMask);
								_alignPriceCount++;
							}
						}
						UInt32 distance = pos;
						for (UInt32 i = LZMABase.kNumRepDistances - 1; i >= 1; i--)
							_repDistances[i] = _repDistances[i - 1];
						_repDistances[0] = distance;
						_matchPriceCount++;
					}
					_previousByte = _matchFinder.GetIndexByte((Int32)(len - 1 - _additionalOffset));
				}
				_additionalOffset -= len;
				nowPos64 += len;
				if (_additionalOffset == 0)
				{
					// if (!_fastMode)
					if (_matchPriceCount >= (1 << 7))
						FillDistancesPrices();
					if (_alignPriceCount >= LZMABase.kAlignTableSize)
						FillAlignPrices();
					inSize = nowPos64;
					outSize = _rangeEncoder.GetProcessedSizeAdd();
					if (_matchFinder.GetNumAvailableBytes() == 0)
					{
						Flush((UInt32)nowPos64);
						return;
					}

					if (nowPos64 - progressPosValuePrev >= (1 << 12))
					{
						_finished = false;
						finished = false;
						return;
					}
				}
			}
		}

		void ReleaseMFStream()
		{
			if (_matchFinder != null && _needReleaseMFStream)
			{
				_matchFinder.ReleaseStream();
				_needReleaseMFStream = false;
			}
		}

		void SetOutStream(System.IO.Stream outStream) { _rangeEncoder.SetStream(outStream); }
		void ReleaseOutStream() { _rangeEncoder.ReleaseStream(); }

		void ReleaseStreams()
		{
			ReleaseMFStream();
			ReleaseOutStream();
		}

		void SetStreams(System.IO.Stream inStream, System.IO.Stream outStream,
				Int64 inSize, Int64 outSize)
		{
			_inStream = inStream;
			_finished = false;
			Create();
			SetOutStream(outStream);
			Init();

			// if (!_fastMode)
			{
				FillDistancesPrices();
				FillAlignPrices();
			}

			_lenEncoder.SetTableSize(_numFastBytes + 1 - LZMABase.kMatchMinLen);
			_lenEncoder.UpdateTables((UInt32)1 << _posStateBits);
			_repMatchLenEncoder.SetTableSize(_numFastBytes + 1 - LZMABase.kMatchMinLen);
			_repMatchLenEncoder.UpdateTables((UInt32)1 << _posStateBits);

			nowPos64 = 0;
		}


		public void Code(System.IO.Stream inStream, System.IO.Stream outStream,
			Int64 inSize, Int64 outSize, ICodeProgress progress)
		{
			_needReleaseMFStream = false;
			try
			{
				SetStreams(inStream, outStream, inSize, outSize);
				while (true)
				{
					Int64 processedInSize;
					Int64 processedOutSize;
					bool finished;
					CodeOneBlock(out processedInSize, out processedOutSize, out finished);
					if (finished)
						return;
					if (progress != null)
					{
						progress.SetProgress(processedInSize, processedOutSize);
					}
				}
			}
			finally
			{
				ReleaseStreams();
			}
		}

		const int kPropSize = 5;
		Byte[] properties = new Byte[kPropSize];

		public void WriteCoderProperties(System.IO.Stream outStream)
		{
			properties[0] = (Byte)((_posStateBits * 5 + _numLiteralPosStateBits) * 9 + _numLiteralContextBits);
			for (int i = 0; i < 4; i++)
				properties[1 + i] = (Byte)(_dictionarySize >> (8 * i));
			outStream.Write(properties, 0, kPropSize);
		}
		
		UInt32[] tempPrices = new UInt32[LZMABase.kNumFullDistances];
		UInt32 _matchPriceCount;

		void FillDistancesPrices()
		{
			for (UInt32 i = LZMABase.kStartPosModelIndex; i < LZMABase.kNumFullDistances; i++)
			{ 
				UInt32 posSlot = GetPosSlot(i);
				int footerBits = (int)((posSlot >> 1) - 1);
				UInt32 baseVal = ((2 | (posSlot & 1)) << footerBits);
				tempPrices[i] = RangeCoderBitTreeEncoder.ReverseGetPrice(_posEncoders, 
					baseVal - posSlot - 1, footerBits, i - baseVal);
			}

			for (UInt32 lenToPosState = 0; lenToPosState < LZMABase.kNumLenToPosStates; lenToPosState++)
			{
				UInt32 posSlot;
				RangeCoderBitTreeEncoder encoder = _posSlotEncoder[lenToPosState];
			
				UInt32 st = (lenToPosState << LZMABase.kNumPosSlotBits);
				for (posSlot = 0; posSlot < _distTableSize; posSlot++)
					_posSlotPrices[st + posSlot] = encoder.GetPrice(posSlot);
				for (posSlot = LZMABase.kEndPosModelIndex; posSlot < _distTableSize; posSlot++)
					_posSlotPrices[st + posSlot] += ((((posSlot >> 1) - 1) - LZMABase.kNumAlignBits) << RangeCoderBitEncoder.kNumBitPriceShiftBits);

				UInt32 st2 = lenToPosState * LZMABase.kNumFullDistances;
				UInt32 i;
				for (i = 0; i < LZMABase.kStartPosModelIndex; i++)
					_distancesPrices[st2 + i] = _posSlotPrices[st + i];
				for (; i < LZMABase.kNumFullDistances; i++)
					_distancesPrices[st2 + i] = _posSlotPrices[st + GetPosSlot(i)] + tempPrices[i];
			}
			_matchPriceCount = 0;
		}

		void FillAlignPrices()
		{
			for (UInt32 i = 0; i < LZMABase.kAlignTableSize; i++)
				_alignPrices[i] = _posAlignEncoder.ReverseGetPrice(i);
			_alignPriceCount = 0;
		}


		static string[] kMatchFinderIDs = 
		{
			"BT2",
			"BT4",
		};

		static int FindMatchFinder(string s)
		{
			for (int m = 0; m < kMatchFinderIDs.Length; m++)
				if (s == kMatchFinderIDs[m])
					return m;
			return -1;
		}
	
		public void SetCoderProperties(CoderPropID[] propIDs, object[] properties)
		{
			for (UInt32 i = 0; i < properties.Length; i++)
			{
				object prop = properties[i];
				switch (propIDs[i])
				{
					case CoderPropID.NumFastBytes:
					{
						if (!(prop is Int32))
							throw new InvalidParamException();
						Int32 numFastBytes = (Int32)prop;
						if (numFastBytes < 5 || numFastBytes > LZMABase.kMatchMaxLen)
							throw new InvalidParamException();
						_numFastBytes = (UInt32)numFastBytes;
						break;
					}
					case CoderPropID.Algorithm:
					{
						/*
						if (!(prop is Int32))
							throw new InvalidParamException();
						Int32 maximize = (Int32)prop;
						_fastMode = (maximize == 0);
						_maxMode = (maximize >= 2);
						*/
						break;
					}
					case CoderPropID.MatchFinder:
					{
						if (!(prop is String))
							throw new InvalidParamException();
						EMatchFinderType matchFinderIndexPrev = _matchFinderType;
						int m = FindMatchFinder(((string)prop).ToUpper());
						if (m < 0)
							throw new InvalidParamException();
						_matchFinderType = (EMatchFinderType)m;
						if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)
							{
							_dictionarySizePrev = 0xFFFFFFFF;
							_matchFinder = null;
							}
						break;
					}
					case CoderPropID.DictionarySize:
					{
						const int kDicLogSizeMaxCompress = 30;
						if (!(prop is Int32))
							throw new InvalidParamException(); ;
						Int32 dictionarySize = (Int32)prop;
						if (dictionarySize < (UInt32)(1 << LZMABase.kDicLogSizeMin) ||
							dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))
							throw new InvalidParamException();
						_dictionarySize = (UInt32)dictionarySize;
						int dicLogSize;
						for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)
							if (dictionarySize <= ((UInt32)(1) << dicLogSize))
								break;
						_distTableSize = (UInt32)dicLogSize * 2;
						break;
					}
					case CoderPropID.PosStateBits:
					{
						if (!(prop is Int32))
							throw new InvalidParamException();
						Int32 v = (Int32)prop;
						if (v < 0 || v > (UInt32)LZMABase.kNumPosStatesBitsEncodingMax)
							throw new InvalidParamException();
						_posStateBits = (int)v;
						_posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;
						break;
					}
					case CoderPropID.LitPosBits:
					{
						if (!(prop is Int32))
							throw new InvalidParamException();
						Int32 v = (Int32)prop;
						if (v < 0 || v > (UInt32)LZMABase.kNumLitPosStatesBitsEncodingMax)
							throw new InvalidParamException();
						_numLiteralPosStateBits = (int)v;
						break;
					}
					case CoderPropID.LitContextBits:
					{
						if (!(prop is Int32))
							throw new InvalidParamException();
						Int32 v = (Int32)prop;
						if (v < 0 || v > (UInt32)LZMABase.kNumLitContextBitsMax)
							throw new InvalidParamException(); ;
						_numLiteralContextBits = (int)v;
						break;
					}
					case CoderPropID.EndMarker:
					{
						if (!(prop is Boolean))
							throw new InvalidParamException();
						SetWriteEndMarkerMode((Boolean)prop);
						break;
					}
					default:
						throw new InvalidParamException();
				}
			}
		}
	}
}



================================================
File: Sevenzip/Sevenzip/RangeCoder.cs
================================================
using System;

namespace SevenZipLib
{
	public class RangeCoderEncoder
	{
		public const uint kTopValue = (1 << 24);

		System.IO.Stream Stream;

		public UInt64 Low;
		public uint Range;
		uint _cacheSize;
		byte _cache;

		long StartPosition;

		public void SetStream(System.IO.Stream stream)
		{
			Stream = stream;
		}

		public void ReleaseStream()
		{
			Stream = null;
		}

		public void Init()
		{
			StartPosition = Stream.Position;

			Low = 0;
			Range = 0xFFFFFFFF;
			_cacheSize = 1;
			_cache = 0;
		}

		public void FlushData()
		{
			for (int i = 0; i < 5; i++)
				ShiftLow();
		}

		public void FlushStream()
		{
			Stream.Flush();
		}

		public void CloseStream()
		{
			Stream.Close();
		}

		public void Encode(uint start, uint size, uint total)
		{
			Low += start * (Range /= total);
			Range *= size;
			while (Range < kTopValue)
			{
				Range <<= 8;
				ShiftLow();
			}
		}

		public void ShiftLow()
		{
			if ((uint)Low < (uint)0xFF000000 || (uint)(Low >> 32) == 1)
			{
				byte temp = _cache;
				do
				{
					Stream.WriteByte((byte)(temp + (Low >> 32)));
					temp = 0xFF;
				}
				while (--_cacheSize != 0);
				_cache = (byte)(((uint)Low) >> 24);
			}
			_cacheSize++;
			Low = ((uint)Low) << 8;
		}

		public void EncodeDirectBits(uint v, int numTotalBits)
		{
			for (int i = numTotalBits - 1; i >= 0; i--)
			{
				Range >>= 1;
				if (((v >> i) & 1) == 1)
					Low += Range;
				if (Range < kTopValue)
				{
					Range <<= 8;
					ShiftLow();
				}
			}
		}

		public void EncodeBit(uint size0, int numTotalBits, uint symbol)
		{
			uint newBound = (Range >> numTotalBits) * size0;
			if (symbol == 0)
				Range = newBound;
			else
			{
				Low += newBound;
				Range -= newBound;
			}
			while (Range < kTopValue)
			{
				Range <<= 8;
				ShiftLow();
			}
		}

		public long GetProcessedSizeAdd()
		{
			return _cacheSize +
				Stream.Position - StartPosition + 4;
			// (long)Stream.GetProcessedSize();
		}
	}

    //public class RangeCoderDecoder
    //{
    //    public const uint kTopValue = (1 << 24);
    //    public uint Range;
    //    public uint Code;
    //    // public Buffer.InBuffer Stream = new Buffer.InBuffer(1 << 16);
    //    public System.IO.Stream Stream;

    //    public void Init(System.IO.Stream stream)
    //    {
    //        // Stream.Init(stream);
    //        Stream = stream;

    //        Code = 0;
    //        Range = 0xFFFFFFFF;
    //        for (int i = 0; i < 5; i++)
    //            Code = (Code << 8) | (byte)Stream.ReadByte();
    //    }

    //    public void ReleaseStream()
    //    {
    //        // Stream.ReleaseStream();
    //        Stream = null;
    //    }

    //    public void CloseStream()
    //    {
    //        Stream.Close();
    //    }

    //    public void Normalize()
    //    {
    //        while (Range < kTopValue)
    //        {
    //            Code = (Code << 8) | (byte)Stream.ReadByte();
    //            Range <<= 8;
    //        }
    //    }

    //    public void Normalize2()
    //    {
    //        if (Range < kTopValue)
    //        {
    //            Code = (Code << 8) | (byte)Stream.ReadByte();
    //            Range <<= 8;
    //        }
    //    }

    //    public uint GetThreshold(uint total)
    //    {
    //        return Code / (Range /= total);
    //    }

    //    public void Decode(uint start, uint size, uint total)
    //    {
    //        Code -= start * Range;
    //        Range *= size;
    //        Normalize();
    //    }

    //    public uint DecodeDirectBits(int numTotalBits)
    //    {
    //        uint range = Range;
    //        uint code = Code;
    //        uint result = 0;
    //        for (int i = numTotalBits; i > 0; i--)
    //        {
    //            range >>= 1;
    //            /*
    //            result <<= 1;
    //            if (code >= range)
    //            {
    //                code -= range;
    //                result |= 1;
    //            }
    //            */
    //            uint t = (code - range) >> 31;
    //            code -= range & (t - 1);
    //            result = (result << 1) | (1 - t);

    //            if (range < kTopValue)
    //            {
    //                code = (code << 8) | (byte)Stream.ReadByte();
    //                range <<= 8;
    //            }
    //        }
    //        Range = range;
    //        Code = code;
    //        return result;
    //    }

    //    public uint DecodeBit(uint size0, int numTotalBits)
    //    {
    //        uint newBound = (Range >> numTotalBits) * size0;
    //        uint symbol;
    //        if (Code < newBound)
    //        {
    //            symbol = 0;
    //            Range = newBound;
    //        }
    //        else
    //        {
    //            symbol = 1;
    //            Code -= newBound;
    //            Range -= newBound;
    //        }
    //        Normalize();
    //        return symbol;
    //    }

    //    // ulong GetProcessedSize() {return Stream.GetProcessedSize(); }
    //}
}



================================================
File: Sevenzip/Sevenzip/RangeCoderBit.cs
================================================
using System;

namespace SevenZipLib
{
	 struct RangeCoderBitEncoder
	{
		public const int kNumBitModelTotalBits = 11;
		public const uint kBitModelTotal = (1 << kNumBitModelTotalBits);
		const int kNumMoveBits = 5;
		const int kNumMoveReducingBits = 2;
		public const int kNumBitPriceShiftBits = 6;

		uint Prob;

		public void Init() { Prob = kBitModelTotal >> 1; }

		public void UpdateModel(uint symbol)
		{
			if (symbol == 0)
				Prob += (kBitModelTotal - Prob) >> kNumMoveBits;
			else
				Prob -= (Prob) >> kNumMoveBits;
		}

		public void Encode(RangeCoderEncoder encoder, uint symbol)
		{
			// encoder.EncodeBit(Prob, kNumBitModelTotalBits, symbol);
			// UpdateModel(symbol);
			uint newBound = (encoder.Range >> kNumBitModelTotalBits) * Prob;
			if (symbol == 0)
			{
				encoder.Range = newBound;
				Prob += (kBitModelTotal - Prob) >> kNumMoveBits;
			}
			else
			{
				encoder.Low += newBound;
				encoder.Range -= newBound;
				Prob -= (Prob) >> kNumMoveBits;
			}
			if (encoder.Range < RangeCoderEncoder.kTopValue)
			{
				encoder.Range <<= 8;
				encoder.ShiftLow();
			}
		}

		private static UInt32[] ProbPrices = new UInt32[kBitModelTotal >> kNumMoveReducingBits];

		static RangeCoderBitEncoder()
		{
			const int kNumBits = (kNumBitModelTotalBits - kNumMoveReducingBits);
			for (int i = kNumBits - 1; i >= 0; i--)
			{
				UInt32 start = (UInt32)1 << (kNumBits - i - 1);
				UInt32 end = (UInt32)1 << (kNumBits - i);
				for (UInt32 j = start; j < end; j++)
					ProbPrices[j] = ((UInt32)i << kNumBitPriceShiftBits) +
						(((end - j) << kNumBitPriceShiftBits) >> (kNumBits - i - 1));
			}
		}

		public uint GetPrice(uint symbol)
		{
			return ProbPrices[(((Prob - symbol) ^ ((-(int)symbol))) & (kBitModelTotal - 1)) >> kNumMoveReducingBits];
		}
	  public uint GetPrice0() { return ProbPrices[Prob >> kNumMoveReducingBits]; }
		public uint GetPrice1() { return ProbPrices[(kBitModelTotal - Prob) >> kNumMoveReducingBits]; }
	}

     //public struct RangeCoderBitDecoder
     //{
     //    public const int kNumBitModelTotalBits = 11;
     //    public const uint kBitModelTotal = (1 << kNumBitModelTotalBits);
     //    const int kNumMoveBits = 5;

     //    uint Prob;

     //    public void UpdateModel(int numMoveBits, uint symbol)
     //    {
     //        if (symbol == 0)
     //            Prob += (kBitModelTotal - Prob) >> numMoveBits;
     //        else
     //            Prob -= (Prob) >> numMoveBits;
     //    }

     //    public void Init() { Prob = kBitModelTotal >> 1; }

     //    public uint Decode(RangeCoderDecoder rangeDecoder)
     //    {
     //        uint newBound = (uint)(rangeDecoder.Range >> kNumBitModelTotalBits) * (uint)Prob;
     //        if (rangeDecoder.Code < newBound)
     //        {
     //            rangeDecoder.Range = newBound;
     //            Prob += (kBitModelTotal - Prob) >> kNumMoveBits;
     //            if (rangeDecoder.Range < RangeCoderDecoder.kTopValue)
     //            {
     //                rangeDecoder.Code = (rangeDecoder.Code << 8) | (byte)rangeDecoder.Stream.ReadByte();
     //                rangeDecoder.Range <<= 8;
     //            }
     //            return 0;
     //        }
     //        else
     //        {
     //            rangeDecoder.Range -= newBound;
     //            rangeDecoder.Code -= newBound;
     //            Prob -= (Prob) >> kNumMoveBits;
     //            if (rangeDecoder.Range < RangeCoderDecoder.kTopValue)
     //            {
     //                rangeDecoder.Code = (rangeDecoder.Code << 8) | (byte)rangeDecoder.Stream.ReadByte();
     //                rangeDecoder.Range <<= 8;
     //            }
     //            return 1;
     //        }
     //    }
     //}
}



================================================
File: Sevenzip/Sevenzip/RangeCoderBitTree.cs
================================================
using System;

namespace SevenZipLib
{
	 struct RangeCoderBitTreeEncoder
	{
		RangeCoderBitEncoder[] Models;
		int NumBitLevels;

		public RangeCoderBitTreeEncoder(int numBitLevels)
		{
			NumBitLevels = numBitLevels;
			Models = new RangeCoderBitEncoder[1 << numBitLevels];
		}

		public void Init()
		{
			for (uint i = 1; i < (1 << NumBitLevels); i++)
				Models[i].Init();
		}

		public void Encode(RangeCoderEncoder rangeEncoder, UInt32 symbol)
		{
			UInt32 m = 1;
			for (int bitIndex = NumBitLevels; bitIndex > 0; )
			{
				bitIndex--;
				UInt32 bit = (symbol >> bitIndex) & 1;
				Models[m].Encode(rangeEncoder, bit);
				m = (m << 1) | bit;
			}
		}

		public void ReverseEncode(RangeCoderEncoder rangeEncoder, UInt32 symbol)
		{
			UInt32 m = 1;
			for (UInt32 i = 0; i < NumBitLevels; i++)
			{
				UInt32 bit = symbol & 1;
				Models[m].Encode(rangeEncoder, bit);
				m = (m << 1) | bit;
				symbol >>= 1;
			}
		}

		public UInt32 GetPrice(UInt32 symbol)
		{
			UInt32 price = 0;
			UInt32 m = 1;
			for (int bitIndex = NumBitLevels; bitIndex > 0; )
			{
				bitIndex--;
				UInt32 bit = (symbol >> bitIndex) & 1;
				price += Models[m].GetPrice(bit);
				m = (m << 1) + bit;
			}
			return price;
		}

		public UInt32 ReverseGetPrice(UInt32 symbol)
		{
			UInt32 price = 0;
			UInt32 m = 1;
			for (int i = NumBitLevels; i > 0; i--)
			{
				UInt32 bit = symbol & 1;
				symbol >>= 1;
				price += Models[m].GetPrice(bit);
				m = (m << 1) | bit;
			}
			return price;
		}

		public static UInt32 ReverseGetPrice(RangeCoderBitEncoder[] Models, UInt32 startIndex,
			int NumBitLevels, UInt32 symbol)
		{
			UInt32 price = 0;
			UInt32 m = 1;
			for (int i = NumBitLevels; i > 0; i--)
			{
				UInt32 bit = symbol & 1;
				symbol >>= 1;
				price += Models[startIndex + m].GetPrice(bit);
				m = (m << 1) | bit;
			}
			return price;
		}

		public static void ReverseEncode(RangeCoderBitEncoder[] Models, UInt32 startIndex,
			RangeCoderEncoder rangeEncoder, int NumBitLevels, UInt32 symbol)
		{
			UInt32 m = 1;
			for (int i = 0; i < NumBitLevels; i++)
			{
				UInt32 bit = symbol & 1;
				Models[startIndex + m].Encode(rangeEncoder, bit);
				m = (m << 1) | bit;
				symbol >>= 1;
			}
		}
	}

     //public struct RangeCoderBitTreeDecoder
     //{
     //    RangeCoderBitDecoder[] Models;
     //    int NumBitLevels;

     //    public RangeCoderBitTreeDecoder(int numBitLevels)
     //    {
     //        NumBitLevels = numBitLevels;
     //        Models = new RangeCoderBitDecoder[1 << numBitLevels];
     //    }

     //    public void Init()
     //    {
     //        for (uint i = 1; i < (1 << NumBitLevels); i++)
     //            Models[i].Init();
     //    }

     //    public uint Decode(RangeCoderDecoder rangeDecoder)
     //    {
     //        uint m = 1;
     //        for (int bitIndex = NumBitLevels; bitIndex > 0; bitIndex--)
     //            m = (m << 1) + Models[m].Decode(rangeDecoder);
     //        return m - ((uint)1 << NumBitLevels);
     //    }

     //    public uint ReverseDecode(RangeCoderDecoder rangeDecoder)
     //    {
     //        uint m = 1;
     //        uint symbol = 0;
     //        for (int bitIndex = 0; bitIndex < NumBitLevels; bitIndex++)
     //        {
     //            uint bit = Models[m].Decode(rangeDecoder);
     //            m <<= 1;
     //            m += bit;
     //            symbol |= (bit << bitIndex);
     //        }
     //        return symbol;
     //    }

     //    public static uint ReverseDecode(RangeCoderBitDecoder[] Models, UInt32 startIndex,
     //        RangeCoderDecoder rangeDecoder, int NumBitLevels)
     //    {
     //        uint m = 1;
     //        uint symbol = 0;
     //        for (int bitIndex = 0; bitIndex < NumBitLevels; bitIndex++)
     //        {
     //            uint bit = Models[startIndex + m].Decode(rangeDecoder);
     //            m <<= 1;
     //            m += bit;
     //            symbol |= (bit << bitIndex);
     //        }
     //        return symbol;
     //    }
     //}
}



================================================
File: Sevenzip/Sevenzip/SevenZipHelper.cs
================================================
using System;
using System.IO;


namespace SevenZipLib
{
    public static class SevenZipHelper
    {

       static int dictionary = 1 << 23;

      // static Int32 posStateBits = 2;
     // static  Int32 litContextBits = 3; // for normal files
        // UInt32 litContextBits = 0; // for 32-bit data
     // static  Int32 litPosBits = 0;
        // UInt32 litPosBits = 2; // for 32-bit data
    // static   Int32 algorithm = 2;
    // static    Int32 numFastBytes = 128;

     static   bool eos = false;





     static   CoderPropID[] propIDs = 
				{
					CoderPropID.DictionarySize,
					CoderPropID.PosStateBits,
					CoderPropID.LitContextBits,
					CoderPropID.LitPosBits,
					CoderPropID.Algorithm,
					CoderPropID.NumFastBytes,
					CoderPropID.MatchFinder,
					CoderPropID.EndMarker
				};

        // these are the default properties, keeping it simple for now:
     static   object[] properties = 
				{
					(Int32)(dictionary),
					(Int32)(2),
					(Int32)(3),
					(Int32)(0),
					(Int32)(2),
					(Int32)(128),
					"bt4",
					eos
				};


        public static byte[] Compress(byte[] inputBytes)
        {

            MemoryStream inStream = new MemoryStream(inputBytes);
            MemoryStream outStream = new MemoryStream();
            LZMAEncoder encoder = new LZMAEncoder();
            encoder.SetCoderProperties(propIDs, properties);
            encoder.WriteCoderProperties(outStream);
            long fileSize = inStream.Length;
            for (int i = 0; i < 8; i++)
                outStream.WriteByte((Byte)(fileSize >> (8 * i)));
            encoder.Code(inStream, outStream, -1, -1, null);
            return outStream.ToArray();
        }

        //public static byte[] Decompress(byte[] inputBytes)
        //{
        //    MemoryStream newInStream = new MemoryStream(inputBytes);

        //    LZMADecoder decoder = new LZMADecoder();

        //    newInStream.Seek(0, 0);
        //    MemoryStream newOutStream = new MemoryStream();

        //    byte[] properties2 = new byte[5];
        //    if (newInStream.Read(properties2, 0, 5) != 5)
        //        throw (new Exception("input .lzma is too short"));
        //    long outSize = 0;
        //    for (int i = 0; i < 8; i++)
        //    {
        //        int v = newInStream.ReadByte();
        //        if (v < 0)
        //            throw (new Exception("Can't Read 1"));
        //        outSize |= ((long)(byte)v) << (8 * i);
        //    }
        //    decoder.SetDecoderProperties(properties2);

        //    long compressedSize = newInStream.Length - newInStream.Position;
        //    decoder.Code(newInStream, newOutStream, compressedSize, outSize, null);

        //    byte[] b = newOutStream.ToArray();

        //    return b;



        //}


    }
}



================================================
File: Sevenzip/Sevenzip/Sevenzip.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{233FA980-EF10-4BA7-8C4A-63F5D6D09925}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SevenzipLib</RootNamespace>
    <AssemblyName>SevenzipLib</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="CRC.cs" />
    <Compile Include="ICoder.cs" />
    <Compile Include="IMatchFinder.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="LzBinTree.cs" />
    <Compile Include="LzInWindow.cs" />
    <Compile Include="LzmaBase.cs" />
    <Compile Include="LzmaEncoder.cs" />
    <Compile Include="LzOutWindow.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="RangeCoder.cs" />
    <Compile Include="RangeCoderBit.cs" />
    <Compile Include="RangeCoderBitTree.cs" />
    <Compile Include="SevenZipHelper.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: Sevenzip/Sevenzip/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// Les informations gÃ©nÃ©rales relatives Ã  un assembly dÃ©pendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associÃ©es Ã  un assembly.
[assembly: AssemblyTitle("Sevenzip")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Sevenzip")]
[assembly: AssemblyCopyright("Copyright Â©  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// L'affectation de la valeur false Ã  ComVisible rend les types invisibles dans cet assembly 
// aux composants COM. Si vous devez accÃ©der Ã  un type dans cet assembly Ã  partir de 
// COM, affectez la valeur true Ã  l'attribut ComVisible sur ce type.
[assembly: ComVisible(false)]

// Le GUID suivant est pour l'ID de la typelib si ce projet est exposÃ© Ã  COM
[assembly: Guid("4016e3e9-f9a7-4c8a-adbc-7d934ebe1d0e")]

// Les informations de version pour un assembly se composent des quatre valeurs suivantesÂ :
//
//      Version principale
//      Version secondaire 
//      NumÃ©ro de build
//      RÃ©vision
//
// Vous pouvez spÃ©cifier toutes les valeurs ou indiquer les numÃ©ros de build et de rÃ©vision par dÃ©faut 
// en utilisant '*', comme indiquÃ© ci-dessousÂ :
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


