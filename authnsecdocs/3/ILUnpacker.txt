Directory structure:
└── michidu-ilunpacker/
    ├── ILUnpacker.sln
    ├── LICENSE
    └── ILUnpacker/
        ├── AssemblyWriter.cs
        ├── ILReader.cs
        ├── ILUnpacker.csproj
        ├── Memory.cs
        ├── Program.cs
        ├── StringDecrypter.cs
        └── Properties/
            └── AssemblyInfo.cs

================================================
File: ILUnpacker.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 15
VisualStudioVersion = 15.0.27004.2002
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ILUnpacker", "ILUnpacker\ILUnpacker.csproj", "{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {14DF1014-90EC-4EA6-8B44-D5FCA981469C}
	EndGlobalSection
EndGlobal



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2017 Michidu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: ILUnpacker/AssemblyWriter.cs
================================================
ï»¿using System;
using System.IO;
using dnlib.DotNet;
using dnlib.DotNet.Writer;

namespace ILUnpacker
{
    internal class AssemblyWriter
    {
        private readonly string _assemblyPath;

        internal ModuleDefMD ModuleDef;

        internal AssemblyWriter(string assemblyPath)
        {
            _assemblyPath = assemblyPath;

            AssemblyResolver asmResolver = new AssemblyResolver();
            ModuleContext modCtx = new ModuleContext(asmResolver);

            asmResolver.EnableTypeDefCache = true;
            asmResolver.DefaultModuleContext = modCtx;

            ModuleDef = ModuleDefMD.Load(assemblyPath, modCtx);

            ModuleDef.Context = modCtx;
            ModuleDef.Context.AssemblyResolver.AddToCache(ModuleDef);
        }

        internal void WriteMethod(MethodDef methodDef)
        {
            MethodDef method = Program._executingMethod;
            if (method == null)
            {
                Console.WriteLine("Failed to write " + methodDef);
                return;
            }

            Program._executingMethod = null;

            method.FreeMethodBody();
            method.Body = methodDef.Body;
        }

        internal void Save()
        {
            string file = Path.GetFileNameWithoutExtension(_assemblyPath);
            string newPath = _assemblyPath.Replace(file, file + "_unpacked");

            var wOpts = new ModuleWriterOptions(ModuleDef);
            ModuleDef.Write(newPath, wOpts);
        }
    }
}


================================================
File: ILUnpacker/ILReader.cs
================================================
ï»¿using System;
using dnlib.DotNet.Emit;

namespace ILUnpacker
{
    internal class IlReader
    {
        private readonly AssemblyWriter _assemblyWriter;

        internal IlReader(AssemblyWriter assemblyWriter)
        {
            _assemblyWriter = assemblyWriter;
        }

        internal void ReadMethod(object method)
        {
            try
            {
                var methodBodyReader = new DynamicMethodBodyReader(_assemblyWriter.ModuleDef, method);
                methodBodyReader.Read();

                var methodDef = methodBodyReader.GetMethod();

                _assemblyWriter.WriteMethod(methodDef);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error in ReadMethod(): " + e.Message);
                throw;
            }
        }
    }
}


================================================
File: ILUnpacker/ILUnpacker.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{4EDA515D-55B6-4DE5-88BD-46C5E4D31A69}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ILUnpacker</RootNamespace>
    <AssemblyName>ILUnpacker</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject>ILUnpacker.Program</StartupObject>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="dnlib, Version=1.6.0.0, Culture=neutral, PublicKeyToken=50e96378b6e77999, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>bin\Release\dnlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ILReader.cs" />
    <Compile Include="AssemblyWriter.cs" />
    <Compile Include="Memory.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="StringDecrypter.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: ILUnpacker/Memory.cs
================================================
ï»¿using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ILUnpacker
{
    internal static class Memory
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern bool VirtualProtect(
            IntPtr lpAddress,
            IntPtr dwSize,
            uint flNewProtect,
            out uint lpflOldProtect
        );

        internal static unsafe void Hook(MethodBase from, MethodBase to)
        {
            IntPtr intPtr = GetAddress(from);
            IntPtr intPtr2 = GetAddress(to);

            VirtualProtect(intPtr, (IntPtr) 5, 0x40, out var lpflOldProtect);

            if (IntPtr.Size == 8)
            {
                byte* ptr = (byte*) intPtr.ToPointer();
                *ptr = 0x49;
                ptr[1] = 0xbb;
                *(long*) (ptr + 0x2) = intPtr2.ToInt64();
                ptr[10] = 0x41;
                ptr[11] = 0xff;
                ptr[12] = 0xe3;
            }
            else if (IntPtr.Size == 4)
            {
                byte* ptr = (byte*) intPtr.ToPointer();
                *ptr = 0xe9;
                *(long*) (ptr + 0x1) = intPtr2.ToInt32() - intPtr.ToInt32() - 5;
                ptr[5] = 0xc3;
            }

            VirtualProtect(intPtr, (IntPtr) 5, lpflOldProtect, out var _);
        }

        private static IntPtr GetAddress(MethodBase methodBase)
        {
            RuntimeHelpers.PrepareMethod(methodBase.MethodHandle);
            return methodBase.MethodHandle.GetFunctionPointer();
        }
    }
}


================================================
File: ILUnpacker/Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace ILUnpacker
{
    internal class Program
    {
        private static AssemblyWriter _assemblyWriter;

        private static Assembly _assembly;

        internal static MethodDef _executingMethod;

        public static void Main(string[] args)
        {
            if (args.Length < 1)
                return;

            string path = args[0];

            _assemblyWriter = new AssemblyWriter(path);

            _assembly = Assembly.LoadFrom(path);

            Console.WriteLine("Unpacking..");

            var stringDecrypter = new StringDecrypter(_assembly);

            Memory.Hook(typeof(StackFrame).GetMethod("GetMethod", BindingFlags.Instance | BindingFlags.Public),
                typeof(Program).GetMethod("HookGetMethod", BindingFlags.Instance | BindingFlags.Public));

            int invokeToken = 0;

            var types = _assemblyWriter.ModuleDef.GetTypes();
            var typeDefs = types as IList<TypeDef> ?? types.ToList();

            foreach (TypeDef typeDef in typeDefs)
            {
                if (typeDef.Name == "<Module>")
                {
                    foreach (FieldDef fieldDef in typeDef.Fields)
                    {
                        if (fieldDef.FullName.Contains("<Module>::Invoke"))
                        {
                            invokeToken = fieldDef.MDToken.ToInt32();

                            goto exitLoop;
                        }
                    }
                }
            }

            exitLoop:

            if (invokeToken == 0)
                throw new Exception("Couldn't find Invoke");

            FieldInfo field = _assembly.Modules.FirstOrDefault().ResolveField(invokeToken);
            var invokeField = field.GetValue(null);
            MethodInfo invokeMethod = invokeField.GetType().GetMethod("Invoke");
            if (invokeMethod == null)
                throw new NullReferenceException("Couldn't find InvokeMethod");

            InvokeDelegates(typeDefs, invokeMethod, invokeField);

            stringDecrypter.ReplaceStrings(typeDefs);

            CleanCctor(typeDefs);

            _assemblyWriter.Save();

            Console.WriteLine("Unpacked file!");

            Console.Read();
        }

        private static void InvokeDelegates(IList<TypeDef> typeDefs, MethodInfo invokeMethod, object invokeField)
        {
            string moduleName = _assembly.Modules.FirstOrDefault().Name;

            IlReader ilReader = new IlReader(_assemblyWriter);

            foreach (TypeDef typeDef in typeDefs)
            {
                foreach (MethodDef methodDef in typeDef.Methods)
                {
                    if (methodDef.Module.Name != moduleName)
                        continue;

                    if (methodDef.HasBody &&
                        methodDef.Body.Instructions.Count > 2 &&
                        methodDef.Body.Instructions[0].OpCode == OpCodes.Ldsfld &&
                        methodDef.Body.Instructions[0].Operand.ToString().Contains("Invoke") &&
                        methodDef.Body.Instructions[1].IsLdcI4())
                    {
                        int methodIdx = (int) methodDef.Body.Instructions[1].Operand;

                        _executingMethod = methodDef;

                        var methodDelegate = invokeMethod.Invoke(invokeField, new object[] {methodIdx});

                        ilReader.ReadMethod(methodDelegate);
                    }
                }
            }
        }

        public MethodBase HookGetMethod()
        {
            var method = (MethodBase) GetType().GetField("method", BindingFlags.Instance | BindingFlags.NonPublic)
                .GetValue(this);

            if (method.DeclaringType?.Namespace == "ILUnpacker" && _executingMethod != null)
            {
                method = _assembly.Modules.FirstOrDefault().ResolveMethod(_executingMethod.MDToken.ToInt32());
            }

            return method;
        }

        private static void CleanCctor(IList<TypeDef> typeDefs)
        {
            foreach (TypeDef typeDef in typeDefs)
            {
                if (typeDef.Name == "<Module>")
                {
                    MethodDef cctor = typeDef.FindStaticConstructor();

                    if (cctor.HasBody)
                    {
                        cctor.Body.Instructions.Clear();
                        cctor.Body.ExceptionHandlers.Clear();

                        cctor.Body.Instructions.Add(new Instruction(OpCodes.Ret));
                    }

                    break;
                }
            }
        }
    }
}


================================================
File: ILUnpacker/StringDecrypter.cs
================================================
ï»¿using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace ILUnpacker
{
    internal class StringDecrypter
    {
        private readonly Assembly _assembly;

        private object _decryptField;
        private MethodInfo _decryptMethod;

        internal StringDecrypter(Assembly assembly)
        {
            _assembly = assembly;
        }

        internal void ReplaceStrings(IList<TypeDef> typeDefs)
        {
            foreach (TypeDef typeDef in typeDefs)
            {
                foreach (MethodDef methodDef in typeDef.Methods)
                {
                    if (!methodDef.HasBody)
                        continue;

                    var instructions = methodDef.Body.Instructions;
                    for (var i = 0; i < instructions.Count; i++)
                    {
                        Instruction instruction = instructions[i];

                        if (instruction.OpCode == OpCodes.Ldsfld &&
                            instruction.Operand.ToString().Contains("<Module>::String") &&
                            instructions[i + 1].IsLdcI4() &&
                            instructions[i + 2].OpCode == OpCodes.Callvirt &&
                            instructions[i + 2].Operand.ToString().Contains("Invoke"))
                        {
                            if (_decryptField == null)
                            {
                                FieldDef fieldDef = (FieldDef) instruction.Operand;
                                InitDecryptor(fieldDef);
                            }

                            int stringIdx = (int) instructions[i + 1].Operand;

                            instructions[i].OpCode = OpCodes.Ldstr;
                            instructions[i].Operand = GetString(stringIdx);

                            instructions[i + 1].OpCode = OpCodes.Nop;
                            instructions[i + 2].OpCode = OpCodes.Nop;
                        }
                    }
                }
            }
        }

        private void InitDecryptor(FieldDef fieldDef)
        {
            FieldInfo field = _assembly.Modules.FirstOrDefault()
                .ResolveField(fieldDef.MDToken.ToInt32());
            _decryptField = field.GetValue(null);

            _decryptMethod = _decryptField.GetType().GetMethod("Invoke");
        }

        private string GetString(int idx)
        {
            string res = (string) _decryptMethod.Invoke(_decryptField, new object[] {idx});
            return res;
        }
    }
}


================================================
File: ILUnpacker/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


