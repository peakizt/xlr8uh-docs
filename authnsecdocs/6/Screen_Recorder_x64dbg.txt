Directory structure:
└── techbliss-screen_recorder_x64dbg/
    ├── README.md
    ├── LICENSE
    ├── LICENSE.md
    ├── pluginmain.cpp
    ├── pluginmain.h
    ├── py.cpp
    ├── py.h
    ├── resource.h
    ├── stringutils.cpp
    ├── stringutils.h
    ├── x64dbg-plugin-template.sln
    ├── x64dbg-python-template.aps
    ├── x64dbg-python-template.rc
    ├── x64dbg-python.vcxproj
    ├── plugins/
    │   ├── put folder with main.py here .txt
    │   └── recorder/
    │       ├── rec_main.py
    │       ├── record_rc.py
    │       ├── register_run_as_admin.bat
    │       ├── splashscreen.py
    │       ├── unregister_run_as_admin.bat
    │       └── bin/
    │           └── add ffmpeg folder to os PATH.txt
    ├── pluginsdk/
    │   ├── _dbgfunctions.h
    │   ├── _plugin_types.h
    │   ├── _plugins.h
    │   ├── _scriptapi.h
    │   ├── _scriptapi_assembler.h
    │   ├── _scriptapi_debug.h
    │   ├── _scriptapi_gui.h
    │   ├── _scriptapi_memory.h
    │   ├── _scriptapi_misc.h
    │   ├── _scriptapi_module.h
    │   ├── _scriptapi_pattern.h
    │   ├── _scriptapi_register.h
    │   ├── _scriptapi_stack.h
    │   ├── bridgemain.h
    │   ├── DeviceNameResolver/
    │   │   └── DeviceNameResolver.h
    │   ├── TitanEngine/
    │   │   └── TitanEngine.h
    │   ├── XEDParse/
    │   │   └── XEDParse.h
    │   ├── capstone/
    │   │   ├── arm.h
    │   │   ├── arm64.h
    │   │   ├── capstone.h
    │   │   ├── mips.h
    │   │   ├── platform.h
    │   │   ├── ppc.h
    │   │   ├── sparc.h
    │   │   ├── systemz.h
    │   │   ├── x86.h
    │   │   └── xcore.h
    │   ├── dbghelp/
    │   │   └── dbghelp.h
    │   ├── jansson/
    │   │   ├── jansson.h
    │   │   ├── jansson_config.h
    │   │   └── jansson_x64dbg.h
    │   ├── lz4/
    │   │   ├── lz4.h
    │   │   ├── lz4file.h
    │   │   └── lz4hc.h
    │   └── yara/
    │       ├── yara.h
    │       └── yara/
    │           ├── ahocorasick.h
    │           ├── arena.h
    │           ├── atoms.h
    │           ├── compiler.h
    │           ├── elf.h
    │           ├── error.h
    │           ├── exec.h
    │           ├── exefiles.h
    │           ├── filemap.h
    │           ├── globals.h
    │           ├── hash.h
    │           ├── hex_lexer.h
    │           ├── lexer.h
    │           ├── libyara.h
    │           ├── limits.h
    │           ├── mem.h
    │           ├── modules.h
    │           ├── object.h
    │           ├── parser.h
    │           ├── pe.h
    │           ├── proc.h
    │           ├── re.h
    │           ├── re_lexer.h
    │           ├── rules.h
    │           ├── scan.h
    │           ├── sizedstr.h
    │           ├── strutils.h
    │           ├── types.h
    │           └── utils.h
    └── res/
        └── Thumbs.db

================================================
File: README.md
================================================
# x64dbgpy-screen-recorder

PyQt5 plugin for recording your screen while you use x64debugger.

using modded version of [https://github.com/rdp/screen-capture-recorder-to-video-windows-free]()
Record full hd to mp4 using ffmpeg


**Howto**

build and put the *.dp32 / *.dp64 together with plugins folder to the equal in x64dbg plugin folders 

*.dp32 / *.dp64

Add ffmpeg in  plugins/recorder/bin to Os PATH

Register filter with batch file located in plugins/recorder folder.

Qt-screen-capture.dll

Qt-screen-capture-x64.dll

Remember to unregister filter and re register register filter if you move filters to another folder some day.




**Needed**

[https://github.com/x64dbg/PyQt5]()

[https://github.com/x64dbg/x64dbgpy]()

Use vs2013 same as x64dbg to avoid runtime error.

python 2.7.x x86/x64(depend on your needs)

you should download the The Combined Community Codec Pack, its really minimal and have x64player and mp4 / mkv codecs.

http://www.cccp-project.net/




**Tip**
can run outside x64dbg also :)

[https://github.com/techbliss/Screen_Recorder_x64dbg/tree/master/plugins/recorder]()




**Test quality**
https://www.youtube.com/watch?v=REt0VGSCDpw&feature=youtu.be



**Prebuild Plugin**

[https://github.com/techbliss/Screen_Recorder_x64dbg/releases/tag/1]()

**Thx**

Roger for making capture filters

mr.exodia for making x64dbg together with others

Tomer Zait for starting x64dbgpy

ffmpeg






================================================
File: LICENSE
================================================
The MIT License (MIT)

Copyright (c) 2015 RealGame (Tomer Zait)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.




================================================
File: LICENSE.md
================================================
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>



================================================
File: pluginmain.cpp
================================================
//modded plugin script
// original made by Tomer Zait
//modded by storm shadow

#include "pluginmain.h"
#include "py.h"

int pluginHandle;
HWND hwndDlg;
int hMenu;
int hMenuDisasm;
int hMenuDump;
int hMenuStack;

DLL_EXPORT bool pluginit(PLUG_INITSTRUCT* initStruct)
{
    initStruct->pluginVersion = plugin_version;
    initStruct->sdkVersion = PLUG_SDKVERSION;
    strcpy(initStruct->pluginName, plugin_name);
    pluginHandle = initStruct->pluginHandle;
    pyInit(initStruct);
    return true;
}

DLL_EXPORT bool plugstop()
{
    pyStop();
    return true;
}

DLL_EXPORT void plugsetup(PLUG_SETUPSTRUCT* setupStruct)
{
    hwndDlg = setupStruct->hwndDlg;
    hMenu = setupStruct->hMenu;
    hMenuDisasm = setupStruct->hMenuDisasm;
    hMenuDump = setupStruct->hMenuDump;
    hMenuStack = setupStruct->hMenuStack;
    pySetup();
}

extern "C" DLL_EXPORT BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    if(fdwReason == DLL_PROCESS_ATTACH)
    {
        hInst = hinstDLL;
    }
    return TRUE;
}



================================================
File: pluginmain.h
================================================
#ifndef _PLUGINMAIN_H
#define _PLUGINMAIN_H

#include <windows.h>
#include "pluginsdk\_plugins.h"

#ifndef DLL_EXPORT
#define DLL_EXPORT __declspec(dllexport)
#endif //DLL_EXPORT

//superglobal variables
extern int pluginHandle;
extern HWND hwndDlg;
extern int hMenu;
extern int hMenuDisasm;
extern int hMenuDump;
extern int hMenuStack;

#define plugin_name "X64Dbg_screen_record" /// set plugin name
#define plugin_version 1

#ifdef __cplusplus
extern "C"
{
#endif

DLL_EXPORT bool pluginit(PLUG_INITSTRUCT* initStruct);
DLL_EXPORT bool plugstop();
DLL_EXPORT void plugsetup(PLUG_SETUPSTRUCT* setupStruct);

#ifdef __cplusplus
}
#endif

#endif //_PLUGINMAIN_H



================================================
File: py.cpp
================================================
#include "py.h"
#include "stringutils.h"
#include "resource.h"
#include <windows.h>
#include <stdio.h>
#include <psapi.h>
#include <python.h>
#include <shlwapi.h>

#pragma comment(lib, "shlwapi.lib")

#define module_name "X64Dbg_screen_record" //plugin name
#define event_object_name "Event"

// lParam: ScanCode=0x41(ALT), cRepeat=1, fExtended=False, fAltDown=True, fRepeat=False, fUp=False
// #define ALT_F7_SYSKEYDOWN 0x20410001 //hotkey if needed

PyObject* pModule, *pEventObject;
HINSTANCE hInst;

static void Recorder(); //edit this

extern "C" __declspec(dllexport) void CBMENUENTRY(CBTYPE cbType, PLUG_CB_MENUENTRY* info)
{
    switch(info->hEntry)
    {
	case MENU_RECORD: // edit this
		Recorder();
		break;
    }
}





static bool ExecutePythonScript(wchar_t* szFileName)
{
    int status_code;
    String szFileNameA = Utf16ToUtf8(szFileName);
    PyObject* PyFileObject = PyFile_FromString((char*)szFileNameA.c_str(), "r");
    if(PyFileObject == NULL)
    {
        _plugin_logprintf("[PYTHON] Could not open file....");
        PyErr_PrintEx(0);
        return false;
    }

    status_code = PyRun_SimpleFile(PyFile_AsFile(PyFileObject), (char*)szFileNameA.c_str());
    Py_DECREF(PyFileObject);
    if(status_code != EXIT_SUCCESS)
    {
        _plugin_logprintf("[PYTHON] Execution failed (status code: %d)....\n", status_code);
        PyErr_PrintEx(0);
        return false;
    }

    _plugin_logputs("[PYTHON] Execution is done!");
    return true;
}



// X64Dbg_screen_record
static void Recorder() // function to call main python app file
{
    wchar_t szFileName[MAX_PATH] = {0};
	char szDir[256]; GetCurrentDirectoryA(256,szDir); _plugin_logputs(szDir);
    ExecutePythonScript(L"plugins\\recorder\\rec_main.py"); // execution of main file location
}








static void cbUnloadDllCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pKwargs, *pValue;

    LPUNLOAD_DLL_DEBUG_INFO UnloadDll = ((PLUG_CB_UNLOADDLL*)info)->UnloadDll;

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "unload_dll");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pKwargs = Py_BuildValue(
                      "{s:N}",
                      "lpBaseOfDll", PyInt_FromSize_t((size_t)UnloadDll->lpBaseOfDll)
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use unload_dll function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}

static void cbLoadDllCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pLoadDll, *pPdbSig70, *pModInfo, *pKwargs, *pValue;

    PLUG_CB_LOADDLL* callbackInfo = (PLUG_CB_LOADDLL*)info;
    LOAD_DLL_DEBUG_INFO* LoadDll = callbackInfo->LoadDll;
    IMAGEHLP_MODULE64* modInfo = callbackInfo->modInfo;
    GUID PdbSig70 = modInfo->PdbSig70;

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "load_dll");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pLoadDll = Py_BuildValue(
                       "{s:N, s:N, s:k, s:k, s:N, s:H}",
                       "hFile", PyInt_FromSize_t((size_t)LoadDll->hFile),
                       "lpBaseOfDll", PyInt_FromSize_t((size_t)LoadDll->lpBaseOfDll),
                       "dwDebugInfoFileOffset", LoadDll->dwDebugInfoFileOffset,
                       "nDebugInfoSize", LoadDll->nDebugInfoSize,
                       "lpImageName", PyInt_FromSize_t((size_t)LoadDll->lpImageName),
                       "fUnicode", LoadDll->fUnicode
                   );
        pPdbSig70 = Py_BuildValue(
                        "{s:k, s:H, s:H, s:N}",
                        "Data1", PdbSig70.Data1,
                        "Data2", PdbSig70.Data2,
                        "Data3", PdbSig70.Data3,
                        "Data4", PyByteArray_FromStringAndSize(
                            (char*)PdbSig70.Data4, ARRAYSIZE(PdbSig70.Data4)
                        )
                    );
        pModInfo = Py_BuildValue(
                       "{s:k, s:K, s:k, s:k, s:k, s:k, s:i, s:s, s:s, s:s, s:s, "
                       " s:k, s:s, s:k, s:N, s:k, s:N, s:N, s:N, s:N, s:N, s:N, s:N}",
                       "SizeOfStruct", modInfo->SizeOfStruct,
                       "BaseOfImage", modInfo->BaseOfImage,
                       "ImageSize", modInfo->TimeDateStamp,
                       "TimeDateStamp", modInfo->TimeDateStamp,
                       "CheckSum", modInfo->CheckSum,
                       "NumSyms", modInfo->NumSyms,
                       "SymType", modInfo->SymType,
                       "ModuleName", modInfo->ModuleName,
                       "ImageName", modInfo->ImageName,
                       "LoadedImageName", modInfo->LoadedImageName,
                       "LoadedPdbName", modInfo->LoadedPdbName,
                       "CVSig", modInfo->CVSig,
                       "CVData", modInfo->CVData,
                       "PdbSig", modInfo->PdbSig,
                       "PdbSig70", pPdbSig70,
                       "PdbAge", modInfo->PdbAge,
                       "PdbUnmatched", PyBool_FromLong(modInfo->PdbUnmatched),
                       "DbgUnmatched", PyBool_FromLong(modInfo->DbgUnmatched),
                       "LineNumbers", PyBool_FromLong(modInfo->LineNumbers),
                       "GlobalSymbols", PyBool_FromLong(modInfo->GlobalSymbols),
                       "TypeInfo", PyBool_FromLong(modInfo->TypeInfo),
                       "SourceIndexed", PyBool_FromLong(modInfo->SourceIndexed),
                       "Publics", PyBool_FromLong(modInfo->Publics)
                   );
        pKwargs = Py_BuildValue(
                      "{s:N, s:N, s:s}",
                      "LoadDll", pLoadDll,
                      "modInfo", pModInfo,
                      "modname", callbackInfo->modname
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pLoadDll);
        Py_DECREF(pPdbSig70);
        Py_DECREF(pModInfo);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use load_dll function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}



static void cbExitThreadCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pKwargs, *pValue;

    PLUG_CB_EXITTHREAD* callbackInfo = ((PLUG_CB_EXITTHREAD*)info);

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "exit_thread");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pKwargs = Py_BuildValue(
                      "{s:k, s:k}",
                      "dwThreadId", callbackInfo->dwThreadId,
                      "dwExitCode", callbackInfo->ExitThread->dwExitCode
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use exit_thread function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}

static void cbCreateThreadCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pCreateThread, *pKwargs, *pValue;

    PLUG_CB_CREATETHREAD* callbackInfo = (PLUG_CB_CREATETHREAD*)info;
    CREATE_THREAD_DEBUG_INFO* CreateThread = callbackInfo->CreateThread;

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "create_thread");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pCreateThread = Py_BuildValue(
                            "{s:k, s:N, s:N}",
                            "hThread", CreateThread->hThread,
                            "lpThreadLocalBase", PyInt_FromSize_t((size_t)CreateThread->lpThreadLocalBase),
                            "lpStartAddress", PyInt_FromSize_t((size_t)CreateThread->lpThreadLocalBase)
                        );
        pKwargs = Py_BuildValue(
                      "{s:k, s:N}",
                      "dwThreadId", callbackInfo->dwThreadId,
                      "CreateThread", pCreateThread
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pCreateThread);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use exit_process function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}

static void cbExitProcessCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pKwargs, *pValue;

    EXIT_PROCESS_DEBUG_INFO* ExitProcess = ((PLUG_CB_EXITPROCESS*)info)->ExitProcess;

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "exit_process");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pKwargs = Py_BuildValue(
                      "{s:k}",
                      "dwExitCode", ExitProcess->dwExitCode
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use exit_process function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}

static void cbCreateProcessCallback(CBTYPE cbType, void* info)
{
    PyObject* pFunc;
    PyObject* pCreateProcessInfo, *pPdbSig70, *pModInfo, *pFdProcessInfo, *pKwargs, *pValue;

    PLUG_CB_CREATEPROCESS* callbackInfo = (PLUG_CB_CREATEPROCESS*)info;
    CREATE_PROCESS_DEBUG_INFO* CreateProcessInfo = callbackInfo->CreateProcessInfo;
    IMAGEHLP_MODULE64* modInfo = callbackInfo->modInfo;
    PROCESS_INFORMATION* fdProcessInfo = callbackInfo->fdProcessInfo;
    GUID PdbSig70 = modInfo->PdbSig70;

    // Check if event object exist.
    if(pEventObject == NULL)
        return;

    pFunc = PyObject_GetAttrString(pEventObject, "create_process");
    if(pFunc && PyCallable_Check(pFunc))
    {
        pCreateProcessInfo = Py_BuildValue(
                                 "{s:N, s:N, s:N, s:N, s:k, s:k, s:N, s:N, s:N, s:H}",
                                 "hFile", PyInt_FromSize_t((size_t)CreateProcessInfo->hFile),
                                 "hProcess", PyInt_FromSize_t((size_t)CreateProcessInfo->hProcess),
                                 "hThread", PyInt_FromSize_t((size_t)CreateProcessInfo->hThread),
                                 "lpBaseOfImage", PyInt_FromSize_t((size_t)CreateProcessInfo->lpBaseOfImage),
                                 "dwDebugInfoFileOffset", CreateProcessInfo->dwDebugInfoFileOffset,
                                 "nDebugInfoSize", CreateProcessInfo->nDebugInfoSize,
                                 "lpThreadLocalBase", PyInt_FromSize_t((size_t)CreateProcessInfo->lpThreadLocalBase),
                                 "lpStartAddress", PyInt_FromSize_t((size_t)CreateProcessInfo->lpStartAddress),
                                 "lpImageName", PyInt_FromSize_t((size_t)CreateProcessInfo->lpImageName),
                                 "fUnicode", CreateProcessInfo->fUnicode
                             );
        pPdbSig70 = Py_BuildValue(
                        "{s:k, s:H, s:H, s:N}",
                        "Data1", PdbSig70.Data1,
                        "Data2", PdbSig70.Data2,
                        "Data3", PdbSig70.Data3,
                        "Data4", PyByteArray_FromStringAndSize(
                            (char*)PdbSig70.Data4, ARRAYSIZE(PdbSig70.Data4)
                        )
                    );
        pModInfo = Py_BuildValue(
                       "{s:k, s:K, s:k, s:k, s:k, s:k, s:i, s:s, s:s, s:s, s:s, "
                       " s:k, s:s, s:k, s:N, s:k, s:N, s:N, s:N, s:N, s:N, s:N, s:N}",
                       "SizeOfStruct", modInfo->SizeOfStruct,
                       "BaseOfImage", modInfo->BaseOfImage,
                       "ImageSize", modInfo->TimeDateStamp,
                       "TimeDateStamp", modInfo->TimeDateStamp,
                       "CheckSum", modInfo->CheckSum,
                       "NumSyms", modInfo->NumSyms,
                       "SymType", modInfo->SymType,
                       "ModuleName", modInfo->ModuleName,
                       "ImageName", modInfo->ImageName,
                       "LoadedImageName", modInfo->LoadedImageName,
                       "LoadedPdbName", modInfo->LoadedPdbName,
                       "CVSig", modInfo->CVSig,
                       "CVData", modInfo->CVData,
                       "PdbSig", modInfo->PdbSig,
                       "PdbSig70", pPdbSig70,
                       "PdbAge", modInfo->PdbAge,
                       "PdbUnmatched", PyBool_FromLong(modInfo->PdbUnmatched),
                       "DbgUnmatched", PyBool_FromLong(modInfo->DbgUnmatched),
                       "LineNumbers", PyBool_FromLong(modInfo->LineNumbers),
                       "GlobalSymbols", PyBool_FromLong(modInfo->GlobalSymbols),
                       "TypeInfo", PyBool_FromLong(modInfo->TypeInfo),
                       "SourceIndexed", PyBool_FromLong(modInfo->SourceIndexed),
                       "Publics", PyBool_FromLong(modInfo->Publics)
                   );
        pFdProcessInfo = Py_BuildValue(
                             "{s:N, s:N, s:k, s:k}",
                             "hProcess", PyInt_FromSize_t((size_t)fdProcessInfo->hProcess),
                             "hThread", PyInt_FromSize_t((size_t)fdProcessInfo->hThread),
                             "dwProcessId", fdProcessInfo->dwProcessId,
                             "dwThreadId", fdProcessInfo->dwThreadId
                         );
        pKwargs = Py_BuildValue(
                      "{s:N, s:N, s:s, s:N}",
                      "CreateProcessInfo", pCreateProcessInfo,
                      "modInfo", pModInfo,
                      "DebugFileName", callbackInfo->DebugFileName,
                      "fdProcessInfo", pFdProcessInfo
                  );
        pValue = PyObject_Call(pFunc, PyTuple_New(0), pKwargs);
        Py_DECREF(pCreateProcessInfo);
        Py_DECREF(pPdbSig70);
        Py_DECREF(pModInfo);
        Py_DECREF(pFdProcessInfo);
        Py_DECREF(pKwargs);
        Py_DECREF(pFunc);
        if(pValue == NULL)
        {
            _plugin_logputs("[PYTHON] Could not use create_process function.");
            PyErr_PrintEx(0);
            return;
        }

        Py_DECREF(pValue);
    }
}





void pyInit(PLUG_INITSTRUCT* initStruct)
{
  //  _plugin_logprintf("[PYTHON] pluginHandle: %d\n", pluginHandle);
  //  if(!_plugin_registercommand(pluginHandle, "Python", cbPythonCommand, false))
   //     _plugin_logputs("[PYTHON] error registering the \"Python\" command!");
//    if(!_plugin_registercommand(pluginHandle, "OpenScript", cbOpenScriptCommand, false))
   //     _plugin_logputs("[PYTHON] error registering the \"OpenScript\" command!");

    // Initialize the python environment
    Py_Initialize();
    PyEval_InitThreads();

    // Import x64dbg_python
    pModule = PyImport_Import(PyString_FromString(module_name));
    if(pModule != NULL)
    {
        // Get Event Object
        pEventObject = PyObject_GetAttrString(pModule, event_object_name);
        if(pEventObject == NULL)
        {
            _plugin_logputs("[PYTHON] Could not find Event object.");
            PyErr_PrintEx(0);
        }
    }
    else
    {
       // _plugin_logputs("[PYTHON] Could not import " module_name ".");
        PyErr_PrintEx(0);
    }

    PyRun_SimpleString("from " module_name " import *\n");
}

void pyStop()
{
  //  _plugin_unregistercommand(pluginHandle, "Python");
   // _plugin_unregistercommand(pluginHandle, "OpenScript");
    _plugin_unregistercommand(pluginHandle, "Recorder");

    _plugin_menuclear(hMenu);
    _plugin_menuclear(hMenuDisasm);
    _plugin_menuclear(hMenuDump);
    _plugin_menuclear(hMenuStack);

    _plugin_unregistercallback(pluginHandle, CB_WINEVENT);
    _plugin_unregistercallback(pluginHandle, CB_INITDEBUG);
    _plugin_unregistercallback(pluginHandle, CB_BREAKPOINT);
    _plugin_unregistercallback(pluginHandle, CB_STOPDEBUG);
    _plugin_unregistercallback(pluginHandle, CB_CREATEPROCESS);
    _plugin_unregistercallback(pluginHandle, CB_EXITPROCESS);
    _plugin_unregistercallback(pluginHandle, CB_CREATETHREAD);
    _plugin_unregistercallback(pluginHandle, CB_EXITTHREAD);
    _plugin_unregistercallback(pluginHandle, CB_SYSTEMBREAKPOINT);
    _plugin_unregistercallback(pluginHandle, CB_LOADDLL);
    _plugin_unregistercallback(pluginHandle, CB_UNLOADDLL);

    // Properly ends the python environment
    Py_Finalize();
}



void pySetup()
{
    // Set Menu Icon
    ICONDATA pyIcon;
    HRSRC hRes = FindResourceW(hInst, MAKEINTRESOURCEW(IDB_PNG1), L"PNG");
    DWORD size = SizeofResource(hInst, hRes);
    HGLOBAL hMem = LoadResource(hInst, hRes);

    pyIcon.data = LockResource(hMem);
    pyIcon.size = size;
    _plugin_menuseticon(hMenu, &pyIcon);

    FreeResource(hMem);
    _plugin_menuaddentry(hMenu, MENU_RECORD, "Recorder"); // edit this (name in subwindow)
    _plugin_registercallback(pluginHandle, CB_CREATEPROCESS, cbCreateProcessCallback);
    _plugin_registercallback(pluginHandle, CB_EXITPROCESS, cbExitProcessCallback);
    _plugin_registercallback(pluginHandle, CB_CREATETHREAD, cbCreateThreadCallback);
    _plugin_registercallback(pluginHandle, CB_EXITTHREAD, cbExitThreadCallback);
    _plugin_registercallback(pluginHandle, CB_LOADDLL, cbLoadDllCallback);
    _plugin_registercallback(pluginHandle, CB_UNLOADDLL, cbUnloadDllCallback);
}


================================================
File: py.h
================================================
#ifndef _PY_H
#define _PY_H

#include "pluginmain.h"

extern HINSTANCE hInst;

//menu identifiers
#define MENU_RECORD 0 //edit this

//functions
void pyInit(PLUG_INITSTRUCT* initStruct);
void pyStop();
void pySetup();

#endif // _PY_H



================================================
File: resource.h
================================================
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by x64dbg-python.rc
//
#define IDB_PNG1                        101

// Next default values for new objects
//
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        102
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif



================================================
File: stringutils.cpp
================================================
#include "stringutils.h"
#include <windows.h>
#include <iostream>
#include <sstream>

// Functions from x64dbg project: https://github.com/x64dbg/x64dbg
//Conversion functions taken from: http://www.nubaria.com/en/blog/?p=289
String Utf16ToUtf8(const WString & wstr)
{
    String convertedString;
    int requiredSize = WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), -1, 0, 0, 0, 0);
    if(requiredSize > 0)
    {
        std::vector<char> buffer(requiredSize);
        WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), -1, &buffer[0], requiredSize, 0, 0);
        convertedString.assign(buffer.begin(), buffer.end() - 1);
    }
    return convertedString;
}

String Utf16ToUtf8(const wchar_t* wstr)
{
    return Utf16ToUtf8(wstr ? WString(wstr) : WString());
}

WString Utf8ToUtf16(const String & str)
{
    WString convertedString;
    int requiredSize = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, 0, 0);
    if(requiredSize > 0)
    {
        std::vector<wchar_t> buffer(requiredSize);
        MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, &buffer[0], requiredSize);
        convertedString.assign(buffer.begin(), buffer.end() - 1);
    }
    return convertedString;
}

WString Utf8ToUtf16(const char* str)
{
    return Utf8ToUtf16(str ? String(str) : String());
}


================================================
File: stringutils.h
================================================
#ifndef _STRINGUTILS_H
#define _STRINGUTILS_H

#include <string>
#include <vector>

typedef std::string String;
typedef std::wstring WString;


String Utf16ToUtf8(const WString & wstr);
String Utf16ToUtf8(const wchar_t* wstr);
WString Utf8ToUtf16(const String & str);
WString Utf8ToUtf16(const char* str);

#endif //_STRINGUTILS_H


================================================
File: x64dbg-plugin-template.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2010
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "x64dbg-python", "x64dbg-python.vcxproj", "{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Release|Win32 = Release|Win32
		Release|x64 = Release|x64
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}.Release|Win32.ActiveCfg = Release|Win32
		{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}.Release|Win32.Build.0 = Release|Win32
		{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}.Release|x64.ActiveCfg = Release|x64
		{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}.Release|x64.Build.0 = Release|x64
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: x64dbg-python-template.aps
================================================
[Non-text file]


================================================
File: x64dbg-python-template.rc
================================================
[Non-text file]


================================================
File: x64dbg-python.vcxproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="pluginmain.cpp" />
    <ClCompile Include="py.cpp" />
    <ClCompile Include="stringutils.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="pluginmain.h" />
    <ClInclude Include="pluginsdk\bridgemain.h" />
    <ClInclude Include="pluginsdk\capstone\arm.h" />
    <ClInclude Include="pluginsdk\capstone\arm64.h" />
    <ClInclude Include="pluginsdk\capstone\capstone.h" />
    <ClInclude Include="pluginsdk\capstone\mips.h" />
    <ClInclude Include="pluginsdk\capstone\platform.h" />
    <ClInclude Include="pluginsdk\capstone\ppc.h" />
    <ClInclude Include="pluginsdk\capstone\sparc.h" />
    <ClInclude Include="pluginsdk\capstone\systemz.h" />
    <ClInclude Include="pluginsdk\capstone\x86.h" />
    <ClInclude Include="pluginsdk\capstone\xcore.h" />
    <ClInclude Include="pluginsdk\dbghelp\dbghelp.h" />
    <ClInclude Include="pluginsdk\DeviceNameResolver\DeviceNameResolver.h" />
    <ClInclude Include="pluginsdk\jansson\jansson.h" />
    <ClInclude Include="pluginsdk\jansson\jansson_config.h" />
    <ClInclude Include="pluginsdk\jansson\jansson_x64dbg.h" />
    <ClInclude Include="pluginsdk\lz4\lz4.h" />
    <ClInclude Include="pluginsdk\lz4\lz4file.h" />
    <ClInclude Include="pluginsdk\lz4\lz4hc.h" />
    <ClInclude Include="pluginsdk\TitanEngine\TitanEngine.h" />
    <ClInclude Include="pluginsdk\XEDParse\XEDParse.h" />
    <ClInclude Include="pluginsdk\yara\yara.h" />
    <ClInclude Include="pluginsdk\yara\yara\ahocorasick.h" />
    <ClInclude Include="pluginsdk\yara\yara\arena.h" />
    <ClInclude Include="pluginsdk\yara\yara\atoms.h" />
    <ClInclude Include="pluginsdk\yara\yara\compiler.h" />
    <ClInclude Include="pluginsdk\yara\yara\elf.h" />
    <ClInclude Include="pluginsdk\yara\yara\error.h" />
    <ClInclude Include="pluginsdk\yara\yara\exec.h" />
    <ClInclude Include="pluginsdk\yara\yara\exefiles.h" />
    <ClInclude Include="pluginsdk\yara\yara\filemap.h" />
    <ClInclude Include="pluginsdk\yara\yara\globals.h" />
    <ClInclude Include="pluginsdk\yara\yara\hash.h" />
    <ClInclude Include="pluginsdk\yara\yara\hex_lexer.h" />
    <ClInclude Include="pluginsdk\yara\yara\lexer.h" />
    <ClInclude Include="pluginsdk\yara\yara\libyara.h" />
    <ClInclude Include="pluginsdk\yara\yara\limits.h" />
    <ClInclude Include="pluginsdk\yara\yara\mem.h" />
    <ClInclude Include="pluginsdk\yara\yara\modules.h" />
    <ClInclude Include="pluginsdk\yara\yara\object.h" />
    <ClInclude Include="pluginsdk\yara\yara\parser.h" />
    <ClInclude Include="pluginsdk\yara\yara\pe.h" />
    <ClInclude Include="pluginsdk\yara\yara\proc.h" />
    <ClInclude Include="pluginsdk\yara\yara\re.h" />
    <ClInclude Include="pluginsdk\yara\yara\re_lexer.h" />
    <ClInclude Include="pluginsdk\yara\yara\rules.h" />
    <ClInclude Include="pluginsdk\yara\yara\scan.h" />
    <ClInclude Include="pluginsdk\yara\yara\sizedstr.h" />
    <ClInclude Include="pluginsdk\yara\yara\strutils.h" />
    <ClInclude Include="pluginsdk\yara\yara\types.h" />
    <ClInclude Include="pluginsdk\yara\yara\utils.h" />
    <ClInclude Include="pluginsdk\_dbgfunctions.h" />
    <ClInclude Include="pluginsdk\_plugins.h" />
    <ClInclude Include="pluginsdk\_plugin_types.h" />
    <ClInclude Include="pluginsdk\_scriptapi.h" />
    <ClInclude Include="pluginsdk\_scriptapi_debug.h" />
    <ClInclude Include="pluginsdk\_scriptapi_gui.h" />
    <ClInclude Include="pluginsdk\_scriptapi_memory.h" />
    <ClInclude Include="pluginsdk\_scriptapi_module.h" />
    <ClInclude Include="pluginsdk\_scriptapi_pattern.h" />
    <ClInclude Include="pluginsdk\_scriptapi_register.h" />
    <ClInclude Include="py.h" />
    <ClInclude Include="resource.h" />
    <ClInclude Include="stringutils.h" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="x64dbg-python-template.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="res\python.png" />
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <Keyword>Win32Proj</Keyword>
    <ProjectName>x64dbg-python-recorder</ProjectName>
    <ProjectGuid>{E7BA66E1-677E-D937-AC50-73AB6ADA89E0}</ProjectGuid>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)plugins\</OutDir>
    <IntDir>$(Platform)\$(Configuration)\</IntDir>
    <TargetName>x64dbg-python-recorder</TargetName>
    <TargetExt>.dp32</TargetExt>
    <IncludePath>$(Python27x86)\include;$(IncludePath)</IncludePath>
    <LibraryPath>$(Python27x86)\libs;$(LibraryPath)</LibraryPath>
    <PostBuildEventUseInBuild>false</PostBuildEventUseInBuild>
    <PreBuildEventUseInBuild>false</PreBuildEventUseInBuild>
    <PreLinkEventUseInBuild>false</PreLinkEventUseInBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)plugins\</OutDir>
    <TargetName>x64dbg-python-recorder</TargetName>
    <TargetExt>.dp64</TargetExt>
    <IncludePath>$(Python27x64)\include;$(IncludePath)</IncludePath>
    <LibraryPath>$(Python27x64)\libs;$(LibraryPath)</LibraryPath>
    <PostBuildEventUseInBuild>false</PostBuildEventUseInBuild>
    <PreLinkEventUseInBuild>false</PreLinkEventUseInBuild>
    <PreBuildEventUseInBuild>false</PreBuildEventUseInBuild>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;WIN32;NDEBUG;_WINDOWS;_USRDLL;X64_DBG_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <AdditionalIncludeDirectories>C:\Python27\include</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>
      <TargetMachine>MachineX86</TargetMachine>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <AdditionalDependencies>psapi.lib;pluginsdk\x32dbg.lib;pluginsdk\x32bridge.lib;pluginsdk\TitanEngine\TitanEngine_x86.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:\Python27\Libs</AdditionalLibraryDirectories>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>
      </Message>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>
      </Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>
      </Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;WIN32;NDEBUG;_WINDOWS;_USRDLL;X64_DBG_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <AdditionalIncludeDirectories>C:\x64dbg\x64\plugins\pyx64\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <AdditionalDependencies>psapi.lib;pluginsdk\x64dbg.lib;pluginsdk\x64bridge.lib;pluginsdk\TitanEngine\TitanEngine_x64.lib;C:\x64dbg\x64\plugins\pyx64\libs\python27.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
      <Message>
      </Message>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>


================================================
File: plugins/put folder with main.py here .txt
================================================



================================================
File: plugins/recorder/rec_main.py
================================================
#Author Storm Shadow www.techbliss.org

import os
import sys

dn = os.getcwd()
sys.path.insert(0, os.getcwd() + r'\\plugins\\recorder')
print dn
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtWidgets import QSplashScreen, QWidget
import time
import datetime
from datetime import datetime
import subprocess
from subprocess import Popen, PIPE


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setGeometry(100, 100, 100, 100)
        MainWindow.resize(308, 156)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/ico/1469147602_Python_logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("QToolTip\n"
                                 "{\n"
                                 "     border: 1px solid black;\n"
                                 "     background-color: rgb(226, 53, 46);\n"
                                 "     padding: 1px;\n"
                                 "     border-radius: 3px;\n"
                                 "     opacity: 1000;\n"
                                 "}\n"
                                 "\n"
                                 "QWidget\n"
                                 "{\n"
                                 "  background-color: rgb(80,80,80);\n"
                                 "  color: rgb(220,220,220);\n"
                                 "  font-size: 11px;\n"
                                 "  outline: none;\n"
                                 "}\n"
                                 "\n"
                                 "QWidget:item:hover\n"
                                 "{\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #ca0619);\n"
                                 "    color: #000000;\n"
                                 "}\n"
                                 "\n"
                                 "QWidget:item:selected\n"
                                 "{\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "}\n"
                                 "\n"
                                 "QMenuBar::item\n"
                                 "{\n"
                                 "    background: transparent;\n"
                                 "}\n"
                                 "\n"
                                 "QMenuBar::item:selected\n"
                                 "{\n"
                                 "    background: transparent;\n"
                                 "    border: 1px solid #e2352e;\n"
                                 "}\n"
                                 "\n"
                                 "QMenuBar::item:pressed\n"
                                 "{\n"
                                 "    background: #444;\n"
                                 "    border: 1px solid #000;\n"
                                 "    background-color: QLinearGradient(\n"
                                 "        x1:0, y1:0,\n"
                                 "        x2:0, y2:1,\n"
                                 "        stop:1 #212121,\n"
                                 "        stop:0.4 #343434/*,\n"
                                 "        stop:0.2 #343434,\n"
                                 "        stop:0.1 #ffaa00*/\n"
                                 "    );\n"
                                 "    margin-bottom:-1px;\n"
                                 "    padding-bottom:1px;\n"
                                 "}\n"
                                 "\n"
                                 "QMenu\n"
                                 "{\n"
                                 "    border: 1px solid #000;\n"
                                 "}\n"
                                 "\n"
                                 "QMenu::item\n"
                                 "{\n"
                                 "    padding: 2px 20px 2px 20px;\n"
                                 "}\n"
                                 "\n"
                                 "QMenu::item:selected\n"
                                 "{\n"
                                 "    color: #000000;\n"
                                 "}\n"
                                 "\n"
                                 "QWidget:disabled\n"
                                 "{\n"
                                 "    color: #404040;\n"
                                 "    background-color: #323232;\n"
                                 "}\n"
                                 "\n"
                                 "QAbstractItemView\n"
                                 "{\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4d4d4d, stop: 0.1 #646464, stop: 1 #5d5d5d);\n"
                                 "}\n"
                                 "\n"
                                 "QWidget:focus\n"
                                 "{\n"
                                 "    /*border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);*/\n"
                                 "}\n"
                                 "\n"
                                 "QLineEdit\n"
                                 "{\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4d4d4d, stop: 0 #646464, stop: 1 #5d5d5d);\n"
                                 "    padding: 1px;\n"
                                 "    border-style: solid;\n"
                                 "    border: 1px solid #1e1e1e;\n"
                                 "    border-radius: 5;\n"
                                 "}\n"
                                 "\n"
                                 "QPushButton {\n"
                                 "    border: 1px solid #e2352e;\n"
                                 "    text-align: center;\n"
                                 "    min-height: 20px;\n"
                                 "    min-width: 50px;\n"
                                 "    \n"
                                 "    padding: 0 6px 0 6px;\n"
                                 "}\n"
                                 "QPushButton:pressed\n"
                                 "{\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox\n"
                                 "{\n"
                                 "    selection-background-color: #e2352e;\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);\n"
                                 "    border-style: solid;\n"
                                 "    border: 1px solid #1e1e1e;\n"
                                 "    border-radius: 5;\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "QComboBox:hover,QPushButton:hover\n"
                                 "{\n"
                                 "    border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "QComboBox:on\n"
                                 "{\n"
                                 "    padding-top: 3px;\n"
                                 "    padding-left: 4px;\n"
                                 "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);\n"
                                 "    selection-background-color: #e2352e;\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox QAbstractItemView\n"
                                 "{\n"
                                 "    border: 2px solid darkgray;\n"
                                 "    selection-background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox::drop-down\n"
                                 "{\n"
                                 "     subcontrol-origin: padding;\n"
                                 "     subcontrol-position: top right;\n"
                                 "     width: 15px;\n"
                                 "\n"
                                 "     border-left-width: 0px;\n"
                                 "     border-left-color: darkgray;\n"
                                 "     border-left-style: solid; /* just a single line */\n"
                                 "     border-top-right-radius: 3px; /* same radius as the QComboBox */\n"
                                 "     border-bottom-right-radius: 3px;\n"
                                 " }\n"
                                 "\n"
                                 "QComboBox::down-arrow\n"
                                 "{\n"
                                 "     image: url(:/down_arrow.png);\n"
                                 "}\n"
                                 "\n"
                                 "QGroupBox:focus\n"
                                 "{\n"
                                 "border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "}\n"
                                 "\n"
                                 "QTextEdit:focus\n"
                                 "{\n"
                                 "    border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar:horizontal {\n"
                                 "     border: 1px solid #222222;\n"
                                 "     background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0.0 #121212, stop: 0.2 #282828, stop: 1 #484848);\n"
                                 "     height: 15px;\n"
                                 "     margin: 0px 16px 0 16px;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::handle:horizontal\n"
                                 "{\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #e2352e, stop: 0.5 #e20046, stop: 1 #e2352e);\n"
                                 "      min-height: 15px;\n"
                                 "      border-radius: 2px;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::add-line:horizontal {\n"
                                 "      border: 1px solid #1b1b19;\n"
                                 "      border-radius: 2px;\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "      width: 15px;\n"
                                 "      subcontrol-position: right;\n"
                                 "      subcontrol-origin: margin;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::sub-line:horizontal {\n"
                                 "      border: 1px solid #1b1b19;\n"
                                 "      border-radius: 2px;\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "      width: 15px;\n"
                                 "     subcontrol-position: left;\n"
                                 "     subcontrol-origin: margin;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::right-arrow:horizontal, QScrollBar::left-arrow:horizontal\n"
                                 "{\n"
                                 "      border: 1px solid black;\n"
                                 "      width: 1px;\n"
                                 "      height: 1px;\n"
                                 "      background: white;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
                                 "{\n"
                                 "      background: none;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar:vertical\n"
                                 "{\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0.0 #121212, stop: 0.2 #282828, stop: 1 #484848);\n"
                                 "      width: 15px;\n"
                                 "      margin: 16px 0 16px 0;\n"
                                 "      border: 1px solid #222222;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::handle:vertical\n"
                                 "{\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 0.5 #e20046, stop: 1 #e2352e);\n"
                                 "      min-height: 20px;\n"
                                 "      border-radius: 2px;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::add-line:vertical\n"
                                 "{\n"
                                 "      border: 1px solid #1b1b19;\n"
                                 "      border-radius: 2px;\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "      height: 14px;\n"
                                 "      subcontrol-position: bottom;\n"
                                 "      subcontrol-origin: margin;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::sub-line:vertical\n"
                                 "{\n"
                                 "      border: 1px solid #1b1b19;\n"
                                 "      border-radius: 2px;\n"
                                 "      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e2352e, stop: 1 #e20046);\n"
                                 "      height: 14px;\n"
                                 "      subcontrol-position: top;\n"
                                 "      subcontrol-origin: margin;\n"
                                 "}\n"
                                 "\n"
                                 "QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical\n"
                                 "{\n"
                                 "      border: 1px solid black;\n"
                                 "      width: 1px;\n"
                                 "      height: 1px;\n"
                                 "      background: white;\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical\n"
                                 "{\n"
                                 "      background: none;\n"
                                 "}\n"
                                 "\n"
                                 "QTextEdit\n"
                                 "{\n"
                                 "    background-color: #242424;\n"
                                 "}\n"
                                 "\n"
                                 "QPlainTextEdit\n"
                                 "{\n"
                                 "    background-color: #242424;\n"
                                 "}\n"
                                 "\n"
                                 "QHeaderView::section\n"
                                 "{\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #616161, stop: 0.5 #505050, stop: 0.6 #434343, stop:1 #656565);\n"
                                 "    color: white;\n"
                                 "    padding-left: 4px;\n"
                                 "    border: 1px solid #6c6c6c;\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox:disabled\n"
                                 "{\n"
                                 "color: #414141;\n"
                                 "}\n"
                                 "\n"
                                 "QDockWidget::title\n"
                                 "{\n"
                                 "    text-align: center;\n"
                                 "    spacing: 3px; /* spacing between items in the tool bar */\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #323232, stop: 0.5 #242424, stop:1 #323232);\n"
                                 "}\n"
                                 "\n"
                                 "QDockWidget::close-button, QDockWidget::float-button\n"
                                 "{\n"
                                 "    text-align: center;\n"
                                 "    spacing: 1px; /* spacing between items in the tool bar */\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #323232, stop: 0.5 #242424, stop:1 #323232);\n"
                                 "}\n"
                                 "\n"
                                 "QDockWidget::close-button:hover, QDockWidget::float-button:hover\n"
                                 "{\n"
                                 "    background: #242424;\n"
                                 "}\n"
                                 "\n"
                                 "QDockWidget::close-button:pressed, QDockWidget::float-button:pressed\n"
                                 "{\n"
                                 "    padding: 1px -1px -1px 1px;\n"
                                 "}\n"
                                 "\n"
                                 "QMainWindow::separator\n"
                                 "{\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #161616, stop: 0.5 #151515, stop: 0.6 #212121, stop:1 #343434);\n"
                                 "    color: white;\n"
                                 "    padding-left: 4px;\n"
                                 "    border: 1px solid #4c4c4c;\n"
                                 "    spacing: 3px; /* spacing between items in the tool bar */\n"
                                 "}\n"
                                 "\n"
                                 "QMainWindow::separator:hover\n"
                                 "{\n"
                                 "\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e2352e, stop:0.5 #e20046\n"
                                 "    stop:1 #e2352e);\n"
                                 "    color: white;\n"
                                 "    padding-left: 4px;\n"
                                 "    border: 1px solid #6c6c6c;\n"
                                 "    spacing: 3px; /* spacing between items in the tool bar */\n"
                                 "}\n"
                                 "\n"
                                 "QToolBar::handle\n"
                                 "{\n"
                                 "     spacing: 3px; /* spacing between items in the tool bar */\n"
                                 "     background: url(./icons/handle.png);\n"
                                 "}\n"
                                 "\n"
                                 "QMenu::separator\n"
                                 "{\n"
                                 "    height: 2px;\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #161616, stop: 0.5 #151515, stop: 0.6 #212121, stop:1 #343434);\n"
                                 "    color: white;\n"
                                 "    padding-left: 4px;\n"
                                 "    margin-left: 10px;\n"
                                 "    margin-right: 5px;\n"
                                 "}\n"
                                 "\n"
                                 "QProgressBar\n"
                                 "{\n"
                                 "    border: 2px solid grey;\n"
                                 "    border-radius: 5px;\n"
                                 "    text-align: center;\n"
                                 "}\n"
                                 "\n"
                                 "QProgressBar::chunk\n"
                                 "{\n"
                                 "    background-color: #e2352e;\n"
                                 "    width: 2.15px;\n"
                                 "    margin: 0.5px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab {\n"
                                 "    color: #b1b1b1;\n"
                                 "    border: 1px solid #444;\n"
                                 "    border-bottom-style: none;\n"
                                 "    background-color: #323232;\n"
                                 "    border-top-right-radius: 12px;\n"
                                 "    padding-left: 10px;\n"
                                 "    padding-right: 10px;\n"
                                 "    padding-top: 3px;\n"
                                 "    padding-bottom: 2px;\n"
                                 "    margin-right: 2px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabWidget::pane {\n"
                                 "    border: 1px solid #444;\n"
                                 "    top: 1px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab:last\n"
                                 "{\n"
                                 "    margin-right: 0; /* the last selected tab has nothing to overlap with on the right */\n"
                                 "    border-top-right-radius: 3px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab:first:!selected\n"
                                 "{\n"
                                 " margin-left: 0px; /* the last selected tab has nothing to overlap with on the right */\n"
                                 "\n"
                                 "\n"
                                 "    border-top-left-radius: 3px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab:!selected\n"
                                 "{\n"
                                 "    color: #b1b1b1;\n"
                                 "    border-bottom-style: solid;\n"
                                 "    margin-top: 3px;\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:1 #212121, stop:.4 #343434);\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab:selected\n"
                                 "{\n"
                                 "    border-top-left-radius: 3px;\n"
                                 "    border-top-right-radius: 3px;\n"
                                 "    margin-bottom: 0px;\n"
                                 "}\n"
                                 "\n"
                                 "QTabBar::tab:!selected:hover\n"
                                 "{\n"
                                 "    /*border-top: 2px solid #ffaa00;\n"
                                 "    padding-bottom: 3px;*/\n"
                                 "    border-top-left-radius: 3px;\n"
                                 "    border-top-right-radius: 3px;\n"
                                 "    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:1 #212121, stop:0.4 #343434, stop:0.2 #343434, stop:0.1 #e2352e);\n"
                                 "}\n"
                                 "\n"
                                 "QRadioButton::indicator:checked, QRadioButton::indicator:unchecked{\n"
                                 "    color: #b1b1b1;\n"
                                 "    background-color: #323232;\n"
                                 "    border: 1px solid #b1b1b1;\n"
                                 "    border-radius: 6px;\n"
                                 "}\n"
                                 "\n"
                                 "QRadioButton::indicator:checked\n"
                                 "{\n"
                                 "    background-color: qradialgradient(\n"
                                 "        cx: 0.5, cy: 0.5,\n"
                                 "        fx: 0.5, fy: 0.5,\n"
                                 "        radius: 1.0,\n"
                                 "        stop: 0.25 #e2352e,\n"
                                 "        stop: 0.3 #323232\n"
                                 "    );\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox::indicator{\n"
                                 "    color: #b1b1b1;\n"
                                 "    background-color: #323232;\n"
                                 "    border: 1px solid #b1b1b1;\n"
                                 "    width: 9px;\n"
                                 "    height: 9px;\n"
                                 "}\n"
                                 "QComboBox {\n"
                                 "    border: 1px solid gray;\n"
                                 "    border-radius: 3px;\n"
                                 "    padding: 1px 18px 1px 3px;\n"
                                 "    min-width: 6em;\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox:editable {\n"
                                 "    background: white;\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox:!editable, QComboBox::drop-down:editable {\n"
                                 "     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                 "                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n"
                                 "                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n"
                                 "}\n"
                                 "\n"
                                 "/* QComboBox gets the \"on\" state when the popup is open */\n"
                                 "QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
                                 "    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                 "                                stop: 0 #D3D3D3, stop: 0.4 #D8D8D8,\n"
                                 "                                stop: 0.5 #DDDDDD, stop: 1.0 #E1E1E1);\n"
                                 "}\n"
                                 "\n"
                                 "QComboBox:on { /* shift the text when the popup opens */\n"
                                 "    padding-top: 3px;\n"
                                 "    padding-left: 4px;\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox {\n"
                                 "    spacing: 5px;\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox::indicator {\n"
                                 "    width: 13px;\n"
                                 "    height: 13px;\n"
                                 "    border: 1px solid #e2352e;\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox::indicator:unchecked,\n"
                                 "QCheckBox::indicator:unchecked:hover,\n"
                                 "QGroupBox::indicator:unchecked,\n"
                                 "QGroupBox::indicator:unchecked:hover\n"
                                 "{\n"
                                 "    image: url(./icons/checkbox_unchecked.png);\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "QCheckBox::indicator:checked,\n"
                                 "QCheckBox::indicator:checked:hover,\n"
                                 "QGroupBox::indicator:checked,\n"
                                 "QGroupBox::indicator:checked:hover\n"
                                 "{\n"
                                 "    image: url(./icons/checkbox_checked.png);\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
                                 "    top: 1px;\n"
                                 "    left: 1px;\n"
                                 "}\n"
                                 "\n"
                                 "QRadioButton::indicator\n"
                                 "{\n"
                                 "    border-radius: 6px;\n"
                                 "}\n"
                                 "\n"
                                 "QRadioButton::indicator:hover, QCheckBox::indicator:hover\n"
                                 "{\n"
                                 "    border: 1px solid #e2352e;\n"
                                 "}\n"
                                 "\n"
                                 "QCheckBox::indicator:checked\n"
                                 "{\n"
                                 "    image:url(./icons/checkbox_checked.png);\n"
                                 "}\n"
                                 "\n"
                                 "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.captureButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.captureButton_2.setGeometry(QtCore.QRect(20, 40, 121, 71))
        self.captureButton_2.setObjectName("captureButton_2")
        self.stopbutton = QtWidgets.QPushButton(self.centralwidget)
        self.stopbutton.setGeometry(QtCore.QRect(170, 40, 121, 71))
        self.stopbutton.setObjectName("stopbutton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Screen Recorder"))
        self.captureButton_2.setToolTip(_translate("MainWindow",
                                                   "<html><head/><body><p><span style=\" color:#000000;\">Start Recording</span></p></body></html>"))
        self.captureButton_2.setText(_translate("MainWindow", "Record"))
        self.stopbutton.setToolTip(_translate("MainWindow",
                                              "<html><head/><body><p><span style=\" color:#000000;\">Stop Recording and Stop recording thread</span></p></body></html>"))
        self.stopbutton.setText(_translate("MainWindow", "Stop"))
        self.stopbutton.setEnabled(False)
        self.captureButton_2.clicked.connect(self.startrecord)
        self.stopbutton.clicked.connect(self.closeIt)

    def startrecord(self):


        import subprocess
        from subprocess import Popen, PIPE

        #execfile('splashscreen.py')
        
        from subprocess import Popen, PIPE
        self.bob = subprocess.Popen(
            "CMD /k " + 'ffmpeg -rtbufsize 1500M -f dshow -i video="Qt-screen-capture" -y Captured.mp4 -s dp -r 60 -vcodec libx264 -threads 0 -crf 0 -preset ultrafast ',
            stdin=PIPE, shell=True)
        self.stopbutton.setEnabled(True)

    def closeIt(self):
        try:
            self.bob.stdin.write("q")
            time.sleep(1)
            self.stopbutton.setEnabled(False)
            os.system("explorer " + os.getcwd())

        except AttributeError:
            time.sleep(1)
            self.stopbutton.setEnabled(False)



            # time.sleep(3)
            # os.system("taskkill /im ffmpeg.exe")
            # time.sleep(1)
            # self.close()

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self,
                                                "Confirm Exit...",
                                                "Are you sure you want to exit ?",
                                                QtWidgets.QMessageBox.Yes | QtGui.QMessageBox.No)
        event.ignore()

        if result == QtWidgets.QMessageBox.Yes:
            event.accept()


import record_rc

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication.instance()  # enable for usage outside x64dbg
    if not app:  # enable for usage outside x64dbg
        app = QtWidgets.QApplication([])  # enable for usage outside x64dbg
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    app.exec_()




================================================
File: plugins/recorder/record_rc.py
================================================
# -*- coding: utf-8 -*-

# Resource object code
#
# Created by: The Resource Compiler for PyQt5 (Qt v5.6.1)
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore

qt_resource_data = b"\
\x00\x00\x28\xdf\
\x00\
\x01\x97\x31\x78\x9c\xed\x5d\x09\x3c\x54\xdf\x17\xbf\x43\x28\x12\
\x52\x51\x8a\x29\x49\x3b\x52\x4a\x0a\x6d\xb2\xb5\x2f\xda\x48\x0b\
\x22\x7e\x28\x95\xf6\x29\x45\x9b\x28\x14\x51\xa9\xb4\x4b\x8b\x16\
\x95\x8a\x4a\xa9\x48\xa1\x7d\x53\xca\xd2\xaa\xb4\x50\xfd\xf3\x7f\
\xa7\x37\x93\xe7\x99\x19\x33\xcc\xf2\x30\xdf\x4f\xdf\xcf\xeb\x8c\
\x77\xef\x3d\xf7\x9e\xb7\xdc\x77\xef\xb9\xe7\x22\x44\x43\xb2\x48\
\x59\x19\x61\x47\x3a\x9a\xd5\x00\x21\x67\x84\x03\xe4\x2b\x2a\x08\
\xdd\xc6\x7e\xd3\xd7\xc7\xe5\x03\x3a\x08\x6d\x6a\x81\x10\x9d\xce\
\x94\xb1\x74\xc6\xfd\x10\x62\x30\x70\xb9\x63\x43\x1a\x7a\x69\x8b\
\x90\xb9\x39\x53\x1e\x88\x50\xa3\x71\x34\xd4\x11\xcb\x0f\x3b\x15\
\xfb\x05\xff\xfd\x2f\xb0\x7c\x55\x15\x70\x56\x81\x49\x18\x4f\x60\
\x7c\xca\x64\x3c\xc6\x29\x7f\xb3\xaa\x1a\x98\x66\xa8\x8c\xc4\x0b\
\x18\x43\x31\xae\xe6\x21\xfd\x15\x36\xe9\x63\x30\x7a\x63\xbc\xce\
\x43\xfa\xab\xa4\xb4\x49\x04\x6e\xe1\x90\xc6\x17\x63\x32\xc6\x10\
\x36\xe9\xaf\xb2\xe1\x65\x8c\x2b\x98\x69\x47\x92\xca\x22\xa7\xe7\
\xc6\xe1\x18\x77\x12\xe4\x07\x18\xf7\xf3\x91\x1e\xce\xbd\x41\xfa\
\x6d\x3e\xc6\x53\xcc\xbc\x1e\x12\xf8\x89\x4d\xfa\xbb\x18\xd3\xd9\
\xfc\x9e\x86\xf1\x18\x81\x47\x31\x06\x61\x0c\x23\x9d\x77\x07\xe3\
\x01\x3e\xf4\x8d\xc4\x98\x4b\x90\x0f\x63\x9c\xcc\x47\xfa\xeb\xcc\
\x36\x66\xc9\x4e\x08\xbf\x26\xc1\x16\xcf\x31\x16\xb0\x21\x31\x7d\
\x2a\xc6\x38\x8c\xf9\x18\x0f\x61\x94\x45\x95\xb1\x00\x63\x14\x81\
\xe4\xf4\x55\x01\xae\x5f\xb8\xd6\x13\x39\xe8\x5f\x15\xa0\xad\xe7\
\x22\xfc\x9a\x27\xa7\xdf\xce\x43\xfa\xb6\x18\xf7\x60\x7c\x8c\xf1\
\x33\xc6\x22\xe6\xff\x23\x30\x2a\x91\x4f\x2e\xc1\x7e\x29\x22\x90\
\x51\xc5\x1d\x5e\x44\x3a\x7f\xed\xc8\xe1\x43\x15\xe5\x5b\xc9\x63\
\x7f\x52\xb4\xb2\x1c\x3c\x1a\x37\x07\x0d\x35\xc4\x9e\x35\xe8\xfb\
\x62\xc7\x0f\xd8\x41\x6a\xba\xcd\xd0\xc1\xa8\x2c\x20\x28\xed\x12\
\x26\x35\xf2\xb2\x9c\x88\x55\x4f\x41\x15\x48\x43\xdb\xa2\xd4\x11\
\x52\x91\xb1\x1a\x3c\x60\xac\xef\xe3\x0f\xdb\x17\x87\x36\x4b\xb9\
\x70\xdd\xec\xbc\xc2\xf9\xa4\x73\xb7\x4e\xa4\x76\xd1\x68\x10\xda\
\xbb\xb3\x94\xca\xa8\x66\x3a\xb2\x83\xa5\x0d\x82\x22\x0f\x58\x6d\
\x68\xaa\x3a\x70\xec\xf4\xb4\x0b\xbe\xf7\xc2\xe3\x35\xf7\x6c\x9e\
\x31\xbd\x9f\xbf\x5f\xab\x10\xcb\x38\xcb\x95\xc6\xd7\x66\x2f\x89\
\x96\x1d\x1f\x67\xde\x4e\x5e\xa1\xad\x69\xf0\xfe\xc4\xa9\x1f\xdb\
\x49\xdd\xfa\x78\xe2\xe8\xaf\xeb\xfa\x69\x3e\x19\xb6\x0b\xbe\xbd\
\xb7\x2d\x3b\xb4\xff\xdd\x98\xfc\xf7\xc3\xc7\xfd\xc8\xfe\x7d\xe8\
\xad\xc9\xb3\xac\x6f\x25\xe3\x34\x5f\xee\x61\xb4\x93\xef\x14\x23\
\xbd\xf0\xb5\xb4\xc7\xc9\x3b\xb6\xaa\x81\x3d\xef\x74\xf0\x88\x7a\
\xf1\xda\x4a\x23\x58\x47\xfe\x60\x8e\xe1\xd7\x7d\xba\x17\xfa\x6c\
\xcf\x2a\xb4\x68\xb9\x37\x74\xa4\xad\x41\x9b\x36\xcf\x1f\x98\xb7\
\xb9\xde\xe7\xe6\xfe\xd6\x79\xca\xa7\xb2\x8b\x0c\xe4\x1e\x66\x38\
\x7c\xbf\xdb\xd5\xfe\x80\x7b\xb0\x89\x54\xc1\xed\x91\xb2\x86\xc1\
\x86\x2d\xcd\x97\x2f\x72\x4e\x9c\x79\xa4\xb5\xa3\xae\x49\xc9\x1a\
\x0f\xf7\x69\x86\xe7\xe7\xe6\xba\xa9\xb8\xd3\x5e\x1b\xae\x32\xd8\
\x30\xad\xbd\x76\x41\x61\xb1\x8b\x96\x8b\xf6\xa7\x51\xe9\x6e\xf7\
\x47\xe9\xd9\xab\x14\xaa\xda\xd2\x7c\x9c\xfb\x6d\x35\x58\x31\x2a\
\xaa\x83\x87\xfc\x9d\x54\x6b\x87\x37\x3a\x46\x56\x1a\x4d\x65\x65\
\x7b\x44\xbe\xe9\x99\xb9\x6f\xda\x84\xf4\xae\xe7\x6c\xec\x46\x7e\
\x1c\x9d\xdc\x3f\xb1\xcb\xf3\xd4\xff\x5e\xf6\x09\x32\xb4\x3c\x77\
\x68\x4e\x50\x97\x85\x9b\x9c\x3f\x5f\x1b\xa7\xd8\xad\x6b\xf4\x4e\
\x9f\xb0\x37\x4d\xa6\x4e\x0f\xf4\x0d\x59\xa4\xa4\xd8\x6f\xf0\x71\
\x9f\x7b\x32\x3b\xe7\xfa\xda\x24\x76\xca\x52\x7a\x92\x30\xe5\x9c\
\x94\x9f\xed\x50\xcd\x18\xab\x44\x95\x27\x1a\x9a\xf3\xde\xcf\xef\
\x11\x13\xa3\x76\x2b\x45\x43\xcf\xf0\xe5\xce\x25\xe3\xcf\xf5\xf0\
\xbb\xae\x3c\x7f\x6d\xef\x29\x79\x97\x1d\x6e\x87\xc5\xdd\x71\xf4\
\xee\x70\x3e\x45\xa3\x5b\xfc\x4b\xfd\xad\x96\x76\x6e\x5e\x1d\x67\
\x1c\xf6\xf5\x73\x32\xcd\xf6\xde\xe5\x93\x22\xbb\x3a\x3f\x45\xa3\
\x8b\xc9\x4b\x65\x17\x1b\x3b\x0f\xe5\x84\x51\x89\xbb\x4e\xa8\xcd\
\x7f\xfb\x70\x54\xec\x03\xc7\x91\x06\x91\x85\xda\x1e\x83\x5b\x2c\
\xdc\x7e\x78\x56\x98\xd1\x65\xeb\x15\x27\x69\x2d\x9c\xe7\x9e\x3a\
\xd9\x68\xa2\x13\x3d\x30\x36\xd4\xe8\xf2\xba\xe1\x76\x8c\x26\xee\
\xfb\x07\x16\xa6\x75\x78\xbe\x7b\xdb\x85\x9e\xa3\x6e\x7b\x75\xcf\
\xf5\x71\xcd\x0a\x73\xcd\x99\x62\x64\xa3\xb1\xab\xcb\xd4\xf1\xe7\
\x42\x96\xa5\xb5\x39\xbd\xd8\x95\x96\x25\x95\xed\x34\x45\xc7\x3e\
\xfd\xe7\x09\xf3\x5d\x3f\xff\xd8\x9e\x89\xf9\x94\x3e\x43\xf6\x7a\
\x8a\x86\x5d\x37\xdb\x4d\x71\xb3\xfa\xdf\xd8\x7f\xed\xd4\xdb\xce\
\x6d\xe6\xf6\xd9\x39\x09\xab\x7e\x23\x4f\x1b\xbb\x53\x3b\x36\xcc\
\x39\x92\x10\x60\x5f\x9c\x10\x2c\xfb\x39\x6f\x5c\xa3\xa9\xc1\x71\
\xee\x6d\x22\x5e\xfe\xbc\x50\x18\x1d\x7c\xeb\xc3\xab\xc0\xc3\x4d\
\x5b\x58\xd9\x9d\xde\xd8\xef\xe5\x68\xd7\x9d\x63\x6e\xee\x65\xfc\
\x48\x89\x7c\xd0\xbf\xe7\xc8\xee\xf6\xcf\x46\x7d\xd9\xab\xd8\x27\
\xc5\xf1\xfa\x9e\x71\xb1\xa3\x6e\xee\x5d\x1d\x10\xa3\xb0\xdb\x5c\
\x25\x2b\x66\xd8\x9a\xdd\x41\xe8\xa7\x89\xa6\x7d\x74\x54\xc6\xdc\
\x9e\x96\x6a\x43\x56\xdc\xc8\x94\x2d\xb0\xd0\xd4\x6d\xad\xb7\xcd\
\xa1\xc3\xb8\xae\xaa\x97\xae\x9e\x0f\x90\xce\x6c\xae\x39\x64\x6b\
\x17\x73\xbb\xeb\x07\xc7\x0c\x7d\xf8\xa1\xed\xd1\x1f\x7b\x15\xf6\
\x98\x8f\xf8\x69\x1d\xa9\x3c\x40\x8d\x16\x6a\xac\x79\xe4\x73\xe8\
\x83\x01\x85\x97\x3b\x1a\x8c\x7d\xcc\x68\x78\xae\x61\xf4\xe1\xdc\
\x51\x9e\xda\x2d\xfa\x06\x7a\xc6\x38\x87\x9f\xa4\xa9\xf8\xa8\x98\
\x6f\xc2\x7e\xf1\xeb\xbf\x4c\x4f\x75\x98\xd2\xb0\xd8\xec\x21\xe8\
\x76\xc8\x7e\x9b\x29\x3b\x54\x62\xa3\xb4\xed\xd5\x75\xac\x63\x14\
\xd7\x44\xaf\x47\x4f\xf3\x74\x0e\x2c\xd8\xb1\x65\xce\x0a\x9f\x69\
\xcd\x3e\x64\x4b\xd9\x37\xc8\x71\xbe\xae\x78\xd3\xd8\xde\x66\x97\
\xcf\xb4\xd0\x3b\x33\x93\xd7\x74\x97\xf2\xca\x9d\x9e\xb2\xf6\xde\
\xea\xb4\x2d\x46\xbd\x26\x34\x18\x82\x8a\xc2\x6f\x29\xa5\x34\x5c\
\x60\x30\xf2\xf1\x1d\x47\x95\xd6\xb4\xa8\xf4\xdc\xb8\x7c\xdb\x3c\
\x97\x4c\x67\xd9\xc0\x9c\x86\x68\x9f\x61\xc6\xdd\xe7\x5d\x7c\x1d\
\xe2\xad\xe2\x68\x74\x4b\x29\x46\xe4\xc4\x6d\xaf\x56\x1c\x0b\x5e\
\xbc\x30\x25\x36\xf5\xc7\xf0\x63\x0d\x90\xea\xa3\x24\x4f\xf5\x69\
\x56\xef\xae\xa5\xbb\x47\x67\x2e\xf9\x95\x35\xc0\x69\x4b\xa0\x83\
\xcf\xf4\x16\xf1\x0f\x6f\x4f\x9a\x9f\x65\xbb\xc0\xdf\xf0\x71\xcf\
\xa5\x3f\x1b\x8c\x40\x2a\x3f\x17\xbf\xd5\xe8\x19\xd3\x7e\xd6\x19\
\x34\xc8\xdf\x40\xaa\xa1\xb1\x05\x6a\x7b\xbd\x21\xfd\xb5\x3a\x6d\
\x55\x6b\x6d\x46\xf0\x8c\x06\xca\x73\x36\xa0\x81\x1b\x55\xcc\x53\
\x49\x7f\xb4\xb7\x90\x0e\x8a\x1f\x55\x10\x92\x11\x1d\xef\xf3\x52\
\x71\x73\x6c\xb3\x49\x5a\xbf\x37\xf8\x24\x6b\x87\x4f\xae\x74\x2a\
\x96\x4f\x48\xe1\x32\xc6\x8e\xaf\x7b\xf5\x9c\x7c\xf6\xad\xef\xfe\
\x6e\xaa\xfd\x1d\xa7\x11\x47\x0b\xbf\x8e\x36\x3d\x13\xa8\xda\x3a\
\x57\xfd\xd7\xa3\xab\x3b\xbe\x2f\x75\x77\x6e\x70\x27\xc0\x2a\x2a\
\x63\x96\xc5\xb6\x53\xc6\xae\x73\x35\xb4\xb3\x16\xbd\x30\xb8\x3f\
\x3a\xa5\xe9\xf8\xbb\x1d\xa6\x7d\x6f\xa8\x39\xf3\x42\x42\xd6\x29\
\xba\xec\xe2\xa1\x77\x2e\x3d\x8e\x78\x31\xbf\xf3\xff\x2e\x6c\x9b\
\xe7\xdc\xe1\x70\xca\x61\x83\x84\xb6\x59\x52\xb3\xf6\x04\x5a\xe4\
\x2d\x4a\xd8\x84\x0a\xff\x34\xec\xfa\xe6\xbf\xd3\xc5\x09\xbb\xcb\
\x1c\xfc\xa6\x36\x9b\xd3\x65\xf2\xd9\x7b\xeb\x77\xf6\xfc\x24\x95\
\x9a\x2f\xe7\xfe\x86\x66\x9f\x38\xa5\xa5\x7b\x33\xc3\xad\x9d\x4d\
\xf7\x2c\x3a\x67\x47\xdb\xe0\xac\x38\xa2\xc1\xac\xa0\x1d\x5e\x3d\
\x36\x2d\x50\xdf\x3b\xff\x90\x1a\xed\xf5\x5c\xdd\xc3\x63\x0d\x8d\
\xd6\x8c\x4e\x96\x3f\x95\xfe\xee\x9e\xcc\x9d\xed\x3a\x69\x8d\x52\
\xe3\x2f\xd0\xd6\x2d\x1c\x95\x72\x7c\xcb\x21\xe4\x7f\x6c\x5d\x86\
\xcd\xd6\x1b\x39\x6b\xbb\x27\xbe\xba\xe8\x79\x76\x1b\xba\xf6\x79\
\xcb\xe7\x8b\xcd\xcd\xad\x4b\xa6\x9e\xb9\x60\x35\xb6\x81\x17\xed\
\xe8\xfe\x87\xb1\xe9\xd1\x26\x2e\x27\xee\x94\x36\x58\x40\xdb\x90\
\x37\xcf\xfe\xe9\xb6\x56\x99\x8e\xf2\x86\xdb\x9b\x9c\x6f\x14\xad\
\xa4\x77\x36\x61\x4e\xef\x82\xdb\x7a\x2d\x83\x7f\x46\xc7\xa3\xbe\
\x9f\x57\x2e\xda\xba\x72\xc0\x98\xe1\xb9\x9b\xb2\xe5\xb6\xcb\x14\
\x75\x9c\xb1\xf7\x48\xef\x99\x8c\xc3\x63\xcc\x92\x8d\x1b\xe5\x74\
\x76\xb6\x9c\xfc\x5f\xaa\xf2\x25\xeb\x79\xf4\x53\xe8\x66\xe9\x85\
\x93\xf7\xfc\x37\x18\x74\xbe\x37\x7c\xf5\x41\x99\x22\xfa\xd2\x98\
\x23\x46\x33\x83\x17\x6f\xd6\xdd\xdf\x34\xc9\x78\xc9\x88\xc7\xd3\
\x07\x59\xb4\x8c\x4c\x9c\xd1\x27\x0c\x2d\xf3\x78\x7a\x34\xaf\xf5\
\x99\xf6\x36\xb6\xdd\x19\x36\x69\xb2\xf9\xc6\xa9\x76\x21\xcf\xb2\
\x43\x14\x72\x2e\xed\xf5\xe8\x35\x73\xc5\xc6\x25\x5d\x0c\x0c\x22\
\x90\x85\x57\xd8\xc9\x23\xfe\xb1\x45\x1f\xae\xc6\xcc\x94\x4a\x30\
\xa6\x2f\xf6\x6c\x95\xd8\x63\x73\xfc\x07\xab\xb5\x52\x1d\x5f\x4f\
\x72\x35\x51\x9c\x98\x3b\xfb\xfb\xaa\xc1\x34\xdb\x79\x1a\x03\x8c\
\x1a\x84\xeb\x3d\x51\x6d\x2a\x53\x34\xcc\x55\x63\xd0\xc0\xf5\xdd\
\x3e\x66\x74\x4e\x2f\x2e\xc8\xff\x7d\xbc\x4d\x44\xd7\xf1\x3a\x2f\
\x5f\x85\x77\xfb\xf8\x20\x6a\x7d\xa7\xfb\x07\xec\x91\x5a\xe1\x89\
\x83\xde\xb7\xe7\x66\xb7\xf8\x61\x83\x42\x62\x47\x9d\x47\xfb\x3a\
\xba\xcc\x9c\xa5\x15\xe0\xe1\x7d\xe9\xa2\xaf\xea\x11\x8f\xff\xd4\
\x18\x99\x53\xe6\x0c\x92\x7d\xe8\xb6\x36\xac\x34\xef\xd8\xd1\xa7\
\xe7\x4e\x5c\xe9\xcc\x98\x1e\xff\xfe\x4a\xef\xd8\x65\x2a\x01\x3f\
\x4b\x6e\xa8\xbe\xd2\x1e\x4f\x9b\x12\x1d\x98\x9b\x3a\x65\x7f\x44\
\xfa\x96\x12\x7d\x2d\xb3\x27\x03\x90\xda\xfa\x71\x96\x0f\x0f\xec\
\x7b\xde\xf4\x47\xb1\xbc\xd7\xa8\x25\xed\xcd\xbe\xb5\x1d\xd4\xa2\
\xd4\x6c\xf2\xd3\x8c\xb3\x5b\xfb\xb7\x6c\xb6\xfe\xaa\x02\x3d\xc3\
\x96\xf6\x2d\x50\x67\xcb\x04\xb5\xee\x5f\xbf\x65\xe5\x9a\x76\x73\
\x40\x7e\x69\x3f\xb5\x76\x3e\xf4\x3c\x2f\x35\x65\xe0\xa6\xa3\x3b\
\xcd\xba\x7f\xef\xe1\x80\xf2\x7e\x7d\x52\x5b\xef\xde\x26\x39\x24\
\x33\x4d\xd7\xfe\xd5\xa4\xbe\x0e\x28\x1f\xb2\x0e\xf7\x5c\xfb\x66\
\x6e\x60\xc6\xce\xe5\xff\xbd\x5f\xa7\xaa\x87\xb2\xe4\x72\x94\xd6\
\x97\x9e\xd1\x59\x76\xf6\xd3\x45\x79\x93\x6b\x5b\x02\xaf\x2b\x24\
\xcd\xeb\x76\xb6\xad\x76\xda\xf1\x14\xcf\x66\xc7\x5e\x66\x6f\xed\
\xdf\x81\x41\x73\x56\x39\xa0\x97\x98\x66\x6d\x93\xd8\x7b\x6a\xf3\
\x63\xaf\x12\x0b\xd6\x87\xa3\xb4\x1f\x2f\x94\x5a\x9d\x4d\xdf\xf2\
\x65\xaa\x4f\xd3\x63\xb9\xa1\x76\x99\xe1\xe8\xf7\xfb\x0d\x8d\xf5\
\xe6\x3e\x74\x5e\xfb\xc3\xcb\xe1\xc2\xce\x5e\xc3\xd3\x15\x7b\x4a\
\x15\x85\x84\x3d\xf5\xb4\x39\x3b\x28\xf5\xfc\x1c\xd7\xaf\x01\x2e\
\xb6\x68\xd9\x77\x8b\x80\x90\x11\x25\x5b\x3e\x94\x2e\xf7\xbd\xac\
\x98\x6c\xe6\x3f\xf4\x4f\x4a\x03\xfd\x8e\xe9\x1b\x1a\xbb\xf5\xfc\
\xd2\x7c\xfe\xe3\x4c\x4d\x55\x9f\xf3\xbd\xdb\x7f\xd1\xeb\xcc\xe8\
\x91\xa5\x18\x35\xee\x71\xc2\x8a\xde\x1e\xae\xbd\xe7\x1c\x8c\x1e\
\xe2\xa7\x5d\xb6\x5b\x4a\x3d\x78\xbe\x85\xec\x82\x49\x09\x6b\x5d\
\x3c\x5c\xfd\x4a\x03\x0f\x0c\x73\x19\xf2\x67\x88\x2e\x43\x9d\x36\
\x33\xc8\x22\xee\x8d\xcc\xe4\x49\xba\x7f\xda\xf5\xfb\xdf\xf7\x99\
\xeb\x87\xca\x8c\x6c\xeb\x66\xdb\x3d\x3e\xc4\xb3\x68\xfe\xc0\xb7\
\x4f\x7b\xfe\x90\xbb\xd1\xda\x65\xf0\x9f\x21\x9e\xb4\x0b\xab\xd3\
\x6f\x8c\x6b\x61\xd8\xd7\xaa\xb8\x6c\xac\xf4\x0f\x0d\xfb\x82\x26\
\x06\x34\xf5\x05\xfa\x11\xf9\xf4\x07\xc5\x43\xdc\x54\x33\x3d\xad\
\x0b\x14\x83\x77\x49\x4d\x97\x2a\x68\xeb\x31\x6c\xa3\x77\xd4\x50\
\xf5\x6d\x3e\x7e\x05\xb3\x4b\x8e\x9c\xf4\xd6\x2d\x94\x3e\xfe\x02\
\xe5\xb5\xd5\x9f\x9b\xfd\x45\x4e\x33\xcf\x31\x73\x46\x6f\x43\xbb\
\xc8\x0b\xad\x16\x0f\xb0\x45\xce\xed\xf5\x55\x5b\x4f\xeb\x94\x51\
\xd4\x63\x58\xa7\x8d\x76\x73\x8e\x9e\x5c\xeb\xfd\x15\x69\x33\xbe\
\x67\xdd\xdc\xef\xfe\x72\xd0\xf3\xfc\x61\xe3\x75\x63\x4b\x03\xef\
\x86\xed\x1f\x2c\xbb\x6c\x4c\x96\x22\x96\x7d\x3b\x8f\x40\xdd\x26\
\x45\x9a\x1a\x0f\x93\x9a\x6c\xf4\x5a\xb5\x27\x4a\xf9\xc4\x9e\xd5\
\x7b\xb2\x77\x9d\x98\x96\xbb\xb0\x9f\xda\x87\x45\x77\xfd\x7b\xac\
\x69\x44\x57\x9f\x9c\x9c\xfd\x59\xd6\x66\xe2\x65\x59\xd7\x41\xfd\
\x46\xa5\x6e\x7f\xfa\xa1\x38\x71\x6a\x73\xeb\xb6\x1d\x18\x03\x5d\
\x67\x4f\x99\x78\x63\xc9\x9f\xcd\xc7\x0e\x39\x2c\xef\xfe\xa6\xd1\
\xb0\xa1\x93\xba\x49\xdf\x1d\xf6\xca\xc4\x75\x5f\x93\xf4\xdf\x41\
\xfb\xc6\x15\x5c\x53\x77\x68\x76\xf4\x42\xf6\x34\xef\xc4\x83\x81\
\xaf\xf2\xda\x2b\x75\xeb\xb7\xf7\xd9\x85\x31\x81\xeb\x17\x5a\x25\
\x7e\x8f\xba\x32\x7a\xcd\x33\xa9\x6d\xa7\x12\x1b\x8d\x35\x0c\xe9\
\x95\x69\xe1\xbb\x6f\xe5\x27\xfd\xfe\xa8\xb8\x4b\xdf\xa8\x9f\xd2\
\x4d\x82\xf4\x46\xb7\xce\xef\x9e\xe7\x3a\xcb\xce\xed\x9c\x97\x4a\
\x48\x78\x5a\x2a\xbd\x74\xe2\x06\xf9\x68\x07\xc3\x17\xe6\x1a\x25\
\x4a\xa6\x5e\xfd\x0f\x87\x9a\x86\x8e\x6c\xf7\x5d\xc1\x64\xe7\x68\
\xeb\x4e\x7b\x7b\x5f\x51\xb7\x30\xf3\xf8\x59\x92\x3d\x6b\x75\x38\
\xda\xe8\x76\xaa\xe5\xd7\x81\xcb\xcc\xed\x6f\xee\x19\xb2\x21\x5f\
\x61\x83\x53\xf8\xa3\x8c\x03\xf6\x51\x0c\x5f\x5a\xc1\x20\x9d\x1f\
\x7b\xfb\x6c\xce\x68\x7f\xf1\x56\x36\x63\xde\xe4\x42\x6b\xed\xab\
\x0d\x8a\x0e\x9e\xec\xa5\xeb\xfa\x66\xbc\xe6\x88\x45\x31\x6b\x3e\
\x19\x9a\xf4\x0d\x4c\x0e\xa6\xbd\xa5\x77\x60\xb4\x72\x9d\x8d\x66\
\xbd\x59\xf4\x27\xb4\x7d\xff\xa0\x4f\xa3\x5c\x9d\xbb\x39\x85\xef\
\x51\x56\x4d\x4a\x9e\x3f\x33\xd4\x78\x59\xe8\xc9\xd2\xa1\x45\x31\
\xde\x0e\x21\x32\x4d\x06\xb9\x0f\x4c\xa5\xb9\xce\x66\xfc\x0a\xdf\
\xda\x7e\x5e\x8b\xd9\xc3\x8a\x5d\x56\x0f\x52\x3e\x2f\xf5\x3e\xe4\
\xb4\xff\x90\xb1\x1d\x62\x9a\x17\xcb\xbd\xd8\xae\xbb\x2a\x40\x1a\
\x4b\x7b\x1b\x4b\xdb\xc8\x48\xe7\x51\xcc\x89\x28\xbb\xc0\x27\xdb\
\xba\x9e\x50\x9a\x2e\xf5\xb0\xbb\x9b\x75\xff\xa9\x23\x7c\x95\x3f\
\x5c\x69\x6a\xb1\x66\x52\xd8\xbb\xf7\xfe\x0f\x3d\x19\x6d\x76\xef\
\x1b\xfb\x38\x6a\x9f\x79\x84\xeb\x9f\xd8\x78\xe9\x35\xef\x4e\x3d\
\xef\x62\xd4\xeb\xb7\xbd\x45\x96\xbb\x55\xa7\x57\x9f\xc6\x07\xec\
\xf3\xdf\x30\x46\x35\x42\x55\xfd\xdd\x85\xe7\xe1\xf3\xc7\x7f\xd8\
\x13\x18\x71\x3a\x2f\xe0\xba\x6d\xb1\xcb\xf6\x90\x8b\xeb\x66\x48\
\x95\x8c\x4c\x0d\x76\x29\xdd\xdf\xed\x4d\xe4\x12\xbb\xd4\x2d\xfa\
\xde\x5f\x14\xf4\x96\xca\xcc\xca\xcd\x3f\x1d\x6a\xe8\x3b\xf0\x80\
\xf5\xe5\x94\xc5\x9b\x96\x1b\xd0\x12\xf5\xa6\x5f\x9b\xaa\x2a\xbb\
\x54\xeb\x9e\xbb\x63\x5f\x3b\xe3\xd2\x78\x93\xef\xda\xc7\xf6\x5b\
\x7a\xe6\xa8\xdf\x9f\xf4\xca\x6e\x92\xcb\xa1\x96\x27\x2c\x82\x52\
\x4b\x46\xfc\x7e\x1a\xb6\xf4\xe2\x51\x95\x3f\x5b\xd3\x4d\x5c\x35\
\xdf\x19\x0f\x4d\x98\x7e\x39\xb9\xc9\xcf\xa1\x0e\x57\x33\xa6\x4d\
\xfc\x74\xbe\xe5\xf2\x93\x29\xfb\xb7\xe5\xfd\x58\x3b\xee\xae\xda\
\x67\xa9\x09\x91\x16\x16\x1f\x76\xad\x5d\x7d\x3a\xd4\x24\xa5\x73\
\x7b\xf7\xa8\x45\x5f\xd6\xa9\x25\xb9\xed\x0c\xf4\xbd\x65\xa4\x30\
\x2d\xa1\xe5\xb7\xe2\xc0\xe6\x70\x9a\xef\x75\x17\xed\x2d\x8f\x5f\
\xbd\x50\x39\xbc\xf1\x98\x77\xc7\xf9\xe7\x83\xd4\x92\x34\xbf\xff\
\x74\xbb\xd6\x74\xf2\xef\xbe\xc9\x9d\x1b\xa9\x79\x0e\x76\x6e\xe0\
\xb7\x34\xeb\xc0\x99\xfe\x2e\x61\xa6\xdf\x4e\x4f\xbe\xad\x6c\xf8\
\x22\xa3\xb7\x43\xd0\x85\x93\xf2\x39\x5a\xa6\xad\x8e\xdf\x3d\x5d\
\x90\x5b\xbc\xb2\x79\x53\x23\x87\xf5\x17\x42\x55\x19\x4b\xd7\x9e\
\x79\x14\x7f\x47\xef\xfe\x10\x67\xa9\xc1\xc7\xe4\x1d\x8f\x78\x98\
\x5c\x71\x9f\xae\xc6\xf8\x3c\xfe\xa3\x9a\xde\xd5\xa1\xb1\x52\x7d\
\x5e\xe6\x86\x24\x69\xda\x74\xd5\x7b\x7b\xfe\x7e\xf0\xbc\x1d\x41\
\x41\x0f\xed\xe2\xbb\x15\xa7\x37\x7e\xd7\xec\x98\xc3\xc0\x65\xc5\
\x57\xae\xcb\xdd\xf5\x4e\x6a\x38\x9f\x36\xb6\xd4\x39\x55\xc5\x26\
\xad\xcf\xc1\x2f\x0a\x91\x59\x6e\xe7\xd1\xf8\xd2\xd3\xd6\x77\xde\
\xbe\x4f\x69\x4c\xfb\x95\xd2\x6e\x76\x76\x77\x86\xf3\x9f\x8f\x21\
\x6d\xef\x07\x98\xc7\x3f\xcd\xd2\xba\x7f\xec\xc6\xb6\xe0\x84\xdd\
\xff\x3b\xda\xce\x5f\x66\xb6\xd3\x52\xaf\x89\x8e\x23\x2c\x63\x4b\
\xb6\x6a\xdf\xf2\x57\x34\xb6\x54\x5d\x7e\x5a\x57\x47\x3e\xa7\xe3\
\x51\xcb\x27\xae\xa9\x4d\xd7\x97\x3e\xdc\x11\xfa\x3e\xd3\x64\x6a\
\xdb\x2e\x83\x94\x17\xf6\x30\xe8\x14\x81\x1c\xbe\x2d\x1c\x7b\x27\
\x47\xe9\xfc\xab\xeb\x68\x77\x7b\x55\x73\x9b\x1e\x7b\xd5\xa5\x32\
\x42\x8e\x0f\xc8\x51\xbf\xb1\x7c\x69\x46\xb1\xb7\x6d\x52\x8e\x92\
\xe2\x8d\x07\x93\xdb\xab\x99\x0f\xbb\xec\x33\x6c\xd0\x9d\x89\xc1\
\x4f\x15\x47\x1e\xca\xff\x34\x35\x3c\x20\x39\x6a\x77\x58\x40\x88\
\x96\xa5\x0e\x63\xbb\xd5\xb3\x53\xea\x2b\x6f\xee\x1e\x6b\x53\x36\
\xfa\x47\x52\x7f\x65\xef\x76\x33\x53\x69\x93\x54\xc7\x3b\xee\x68\
\x77\x0a\x35\xf1\x0e\x38\xf9\xcc\xbf\xb1\x81\xd9\xb7\xc7\x9e\xfb\
\x4d\x4b\x5e\xc4\x4f\x79\x8c\xbd\x12\xfa\xdc\x1c\x31\x46\xcb\xa7\
\xa9\xb9\x46\x6f\xd7\x37\x03\xef\x07\x6b\xfe\x30\xee\xf6\x6b\x9e\
\xe6\xea\x27\x97\x7f\x60\x2f\xc5\x93\x21\x0b\x7c\xaf\x16\x1e\x7b\
\xa2\xff\x3e\x3e\x2d\xac\xfb\x8a\x5d\x6d\x7a\xea\x3f\x5b\x98\x21\
\xf3\xc3\xbb\xe4\x49\x69\xa4\x4f\xa7\xc6\xae\x73\xd7\x3f\x89\x53\
\xf8\x28\x35\xeb\x65\xdf\xf1\xd6\x5b\xaf\x04\xb7\xb8\x94\xdb\xe9\
\xcc\x98\xb1\xce\xaf\xb2\x0d\x75\xa6\xb5\xd9\x39\x60\xb9\x43\x5e\
\x8b\x1f\x21\xd9\xfb\xa6\xdf\x33\xb8\x67\x1a\x99\x1d\x6d\x3c\x6e\
\x49\xff\x37\x9a\xd7\xbc\x0f\xdc\x4e\x31\x49\x3e\xf5\x7b\xb0\xce\
\x20\xbf\x16\x5d\x5f\x77\x6e\x35\x76\xf8\xd7\x1e\x2d\x8b\x55\x3a\
\x34\x2c\x6d\x6a\xe8\xbb\x2b\x62\x71\xc9\xe9\xb7\xcb\x6e\x3e\x77\
\xce\x8d\x9b\xde\x6c\x81\x8c\xd7\xaf\xfb\xfa\x9f\x69\xb9\xbe\xe6\
\xff\xf3\x39\x9a\x75\x3c\xb2\x44\xe6\x7f\x67\xa7\x46\xf6\xf7\x6f\
\xfc\xf9\xfd\xb4\x0e\xda\x07\xbf\x7f\xd9\xe2\x93\x97\xfb\xe0\x8b\
\xa1\xe9\x2d\xc5\xae\x56\x46\x29\xa9\xf4\x81\x1a\x9e\x5e\xfd\xa5\
\x4b\x3d\x56\xbe\x70\x52\xeb\xeb\x6b\xf2\xbf\x66\xd7\x7d\xb7\xed\
\xef\xe4\x22\xb5\xb5\xc7\x96\x01\x2a\x19\x59\xb2\x2f\x0e\xce\x50\
\xb8\x97\x98\x7c\xc2\x47\xf7\x8b\xb3\x5b\x48\x56\xdc\xd7\xbd\xab\
\xb2\x0a\x62\x97\x0c\x5b\x18\x32\xe2\xd5\xf4\xad\xa5\x09\xdd\x1f\
\xdd\x7c\xd6\x68\x87\xfc\xd7\xfd\x81\x16\x1b\x47\x5d\x5f\xf1\x3d\
\xe3\xc5\xf0\x1f\xf2\x8e\xf9\x59\x49\x7f\x3a\x4f\x50\xf9\xb8\x6c\
\x78\x7c\x07\x3d\xb6\x9d\xb5\x09\x03\x22\x2d\x7d\x2d\xce\xe5\xa8\
\xb0\xef\xbe\x71\xeb\xdb\x45\xd9\xa6\xcb\x37\xd1\xfd\x96\x68\xd5\
\xeb\xbc\xeb\x6e\x8d\x2b\xe1\xa9\xc8\xd5\x2f\x71\x46\x83\xe0\xee\
\x8b\xc3\xaf\x64\x19\xe9\x4e\xca\x3d\x1b\x72\x30\xd3\x5f\x26\xe4\
\xd6\xaa\x7d\x4e\x31\x1a\x3b\x5e\x9f\x6c\xa6\x13\x61\x11\x18\xa1\
\xbc\xf9\xdd\x6f\x5d\xc3\xd1\x71\x9b\x96\xad\xf5\x7e\x1f\x6c\x34\
\xb2\x8d\x36\xfa\xf4\x34\xe3\x68\x9b\x20\xcf\x69\x73\xbc\x9e\xbe\
\x6f\x45\xf3\x75\x92\x09\x8b\xcb\x77\x7f\x15\x90\xe9\x7c\x68\x7a\
\x83\x9c\x40\xa3\xff\x46\x4d\x6a\x76\x69\x4d\xf3\xcc\x7d\x87\xa6\
\x61\xe2\x03\x5f\xbb\xcf\x69\x01\x31\xc3\xc6\x0d\x52\xa3\x35\x70\
\x5a\xbc\x6e\xf5\x4d\x97\x8b\xd7\x76\xd1\x43\x27\x60\x62\x4a\xa7\
\x53\xe7\xd4\xfc\x9c\xb7\x3a\xe5\x0f\x6d\x56\x7c\xa3\x87\x05\x72\
\xe8\xf3\xea\x46\x5b\xbf\xf8\xdc\x46\xda\x48\xe1\xd7\x76\xfb\x56\
\xb3\x2f\xeb\xee\xb8\x1d\x37\xaf\xd3\xf1\x16\x05\xed\x18\x16\xa7\
\x2d\x23\xa3\xcd\x57\xec\x8f\xdf\x7e\xfe\x51\xaf\xcf\x09\x07\xd6\
\xa3\x9c\xfe\xae\xd2\xcd\x0a\x5e\x1e\xbc\xb8\xc8\x44\xb3\x97\xd4\
\x31\x95\x55\x1f\x5c\xd7\xa9\xbf\x7d\xf9\x7e\x53\x93\xeb\xa6\x73\
\xce\x0e\x28\xf1\x37\x95\x6a\x78\x6d\xc7\x1b\xbb\x8e\x3b\x1f\x85\
\x79\x37\x19\xaa\x66\xa3\xd6\x7e\x9d\xa9\xd4\xc3\x56\x0d\x17\x78\
\x64\x85\x65\x24\x6e\x6c\x17\xb0\x27\x39\xf8\x7c\xc6\xd3\xee\xa6\
\xa9\x87\x9b\x5e\xdc\x3d\x76\x4b\x3b\xd3\x39\xa9\x33\xb4\xda\xec\
\xed\x32\x79\xe8\xcd\x03\xaa\x9e\x0e\x3f\x8e\xf9\xc5\xc9\x3b\x2d\
\x4c\x32\x08\xfa\x15\x73\x78\x92\x9d\x66\x0b\x4f\x87\xb0\xa2\x75\
\xef\x72\x73\x7a\x4e\x6a\xfd\xfc\x85\xf9\x6a\x9f\x21\xef\xac\x8d\
\x77\xae\xe9\x7d\xd4\xda\x77\xe3\xf0\x26\x7b\x13\xb6\x2d\xba\xbe\
\x40\x6e\x66\xb8\xa5\xff\x93\xab\xd8\x37\x51\xac\xcd\xe7\xe0\x07\
\x11\x01\xb3\xe6\x2d\xc9\x1f\xb0\x77\xb2\xe5\xac\x1b\x2e\x11\xbe\
\xb9\x87\x56\x3b\xb7\xd0\x7f\xfe\xca\xfd\xbc\x9a\xd9\xb4\xad\xef\
\x7e\xc5\x6d\x8a\x9b\xde\x25\xe2\x4b\x8b\x1d\xc6\xb7\x1d\xfb\x3b\
\x65\x5a\x74\x1c\x73\xab\xef\x7c\xef\x95\x73\xfc\x0d\xa7\xec\x32\
\xda\x99\x27\xeb\x1a\xf2\x2d\x7f\xce\xb6\xab\x97\x5e\x3c\x6a\x54\
\xb6\x6f\xf0\xb9\x39\x1f\x7c\x35\x9e\x17\x05\x04\xf5\x49\xea\xe9\
\xaa\x7d\x22\xc9\xa1\xc3\x68\x6d\x8f\x55\x6d\xda\xc8\xa0\x7b\xad\
\x3f\xdf\x29\x6c\xd5\xd8\x2d\x3c\xcd\xd9\x55\x7b\xe5\xd5\xae\x5b\
\xa7\x66\x25\xcb\x2f\x6e\xd9\xdd\x7e\x57\x72\xee\xec\x15\x05\x2d\
\xc7\x36\xd2\xf2\xda\xe2\xe3\x24\x1b\x72\xd7\x5d\xcd\x33\xf1\x7b\
\x80\xda\xd7\x5f\x85\x6a\xad\x6f\xfa\x8e\x4f\xa4\x3d\x51\x7d\x5b\
\x7a\xdc\x3f\xe8\x31\x2d\x77\x91\x69\x0b\xcf\xd4\xaf\x97\x4d\x1a\
\x87\xc4\x25\x3e\x8d\x36\x29\x96\xfe\x11\x72\xcc\xbf\x65\xab\xf4\
\xd3\xa9\x34\xd3\xa1\x61\xbe\x7b\x0e\xf9\x2f\x5a\x36\xe4\xac\xcf\
\xea\x37\xed\x42\x26\x76\x7f\x9e\x80\x7d\xf0\x16\xa7\x79\x79\x1a\
\xb5\xcc\x78\xd1\x7a\xe8\x13\x9d\x2b\xb4\x8f\xbd\x22\x0b\x7e\x0e\
\x30\xcb\x3b\x36\x35\xf1\x6c\xee\xa0\x2e\x36\xa5\xb2\xab\x33\x9b\
\xab\x76\x90\x4f\xd8\x6c\xe6\x6d\x9b\x58\xf8\x64\xc2\x2d\xf7\x9f\
\xd6\x76\x43\x27\x14\x5e\xdd\x1a\x9e\x31\x60\x93\xbf\x59\x72\x8f\
\x65\xad\x07\x67\x38\x7e\x7e\x6d\xa1\x3b\xc4\x74\x46\xc2\x4a\xab\
\x0d\xc5\x85\xed\x12\x37\x75\xde\x32\xb2\x79\xb0\xce\x91\x8d\xaf\
\xfd\xd1\x6e\x9f\xbc\x76\x1d\xbc\x0c\x66\x8c\xf9\x59\xe4\xa6\xd4\
\x2d\xf1\x96\xd9\x84\xe4\x39\xdf\xad\xd4\x7a\xce\x7d\xbd\x05\xed\
\x6e\xa6\xbf\xb2\xb8\x65\xfa\xc2\xa8\x61\xae\x26\xc5\x6e\x39\x83\
\xee\xc7\x6f\x71\xbb\xef\x3d\xe5\x9c\x63\x84\x6e\x6f\x19\xe5\x11\
\x53\xfd\xf5\xc3\xe3\x0b\x46\x98\x75\x2e\x28\x7c\x6c\xf2\xc0\xba\
\xdb\xe2\x87\x29\x4d\x4e\x1f\x8f\x08\x74\x57\xb8\x7a\xf9\xdb\xc9\
\x1b\x4b\x69\x13\x3a\x45\x47\x65\x75\xda\xb3\x6a\x7a\xdf\x31\x96\
\x34\x8f\x93\x77\x06\xf7\x9f\xd7\xfa\x8d\xfe\xa9\xd6\xbb\x27\x3e\
\xb6\xf4\x4b\xee\xfd\x47\x2b\xdd\x54\xb6\xc5\x60\x73\x95\x46\x08\
\x21\x1d\x9f\x21\x13\x7c\x66\x4e\xf3\x71\xea\x3b\x63\x8e\x13\x76\
\x40\x3d\xf4\x0d\x7a\x75\xd3\xef\xd9\xcd\xa0\xd7\x58\x7d\xa3\xbe\
\xbd\xb0\x7f\x98\xd8\xab\xaf\xbe\xbe\x54\xe8\xca\x0d\x15\x12\x78\
\x78\xce\x74\x75\x5e\x48\x4e\xd0\xb3\xaf\xa1\x31\x9e\x60\x7e\xf1\
\xda\x3f\x30\x94\x63\x35\x64\xf8\xe0\xb8\x81\x8e\x2b\x61\xa8\x58\
\x1f\xa3\x23\x22\x0c\x15\xb7\xe7\x79\xa8\xb8\xba\x80\x82\x26\x60\
\xf4\x43\xf8\x10\x68\x1c\x93\xd1\xcc\xdf\x26\x62\x6c\x27\xb4\xd2\
\xab\x07\xd0\x67\x2d\xc2\x87\xc4\x79\x1d\xb2\xcc\xc1\xb8\x11\x63\
\x27\xd1\xab\xfb\x0f\x30\x3c\xb7\x19\xe3\x2f\xc4\xbb\xde\x64\xc2\
\x35\xb3\x0b\xa3\x8a\x88\x75\x57\x44\x95\x87\xb8\x6b\x42\x18\x0a\
\x55\x17\xa1\xfe\xc4\xe1\x7d\x7e\xf9\x1e\xa3\x15\xc6\xa6\x08\x9f\
\x25\xfa\xcd\xfc\xfd\x94\x88\x74\x6f\x4e\x28\xb3\x3a\x74\x27\xe5\
\x47\x6c\x8b\xf6\xc2\x57\x1f\x0d\xae\x81\xee\xc0\x51\xa4\xfc\x56\
\x12\xfe\x36\x46\xf8\xea\x23\xdb\x1a\xe8\x0e\x3c\x83\xfe\x4e\xfa\
\xfd\x05\xdc\xb7\xcf\x08\x7f\x9b\x52\x0b\xf4\x07\xc2\x34\xd6\x5e\
\x8c\x79\xa4\xdf\x6b\x8b\xfe\x9c\x28\xd1\x5f\xf0\xfa\x5b\x60\x34\
\xe7\x91\x6a\x02\xd2\xb1\x21\xc6\x3e\x18\xad\x99\xfa\xb2\xd8\xbc\
\x1a\xfa\x8f\x22\xe5\x51\x1d\x0e\xc2\xd8\x92\x07\xbd\x65\x10\x3e\
\x6d\xfa\x85\x83\x2e\x96\xd5\xd0\x5f\x50\x84\xbe\xc6\x11\x84\xbf\
\xf7\xd8\x41\x1a\xe1\xee\x09\xdc\xf2\x10\xa7\xfe\x2c\xc2\x34\x3a\
\xbb\x29\xe6\xf9\x3c\xa4\xa5\x82\xfe\xc0\x45\x24\xdd\x1b\x23\x7c\
\x4a\xb9\xb6\xe8\x0f\x33\xd0\x8d\x08\xfa\x3b\xf0\x98\x0e\xf4\xb7\
\xa1\x80\xfe\x40\x7b\x82\xfe\xfb\x78\x4c\x33\x1a\x63\x3f\x0a\xe8\
\x0e\x3c\x4d\xd0\xff\x25\x8f\x69\x96\x62\x84\xaf\xcf\xef\x14\xd0\
\xbf\x04\xe1\xdf\x50\xcd\xf8\x48\x93\xc5\xac\xef\x66\x0a\xe8\x0f\
\x34\x65\x92\x9f\x34\xf0\x0d\x0e\xdf\x5f\x77\x29\xa0\xbf\x2b\xc2\
\xef\x03\x7e\xd2\x80\xcb\x53\x17\x84\xbf\x47\x62\xc5\xac\xff\x2a\
\x8c\x1e\xd5\x48\x07\xdf\x80\xf0\x2c\x02\xc0\x18\xc2\x6c\x8c\xcb\
\x11\xee\x66\xc7\x2b\x37\x61\x4c\x41\xf8\x7b\xb5\xba\xfa\x07\x63\
\xf4\xaa\x41\xfa\x04\x84\x5f\x4f\xf0\xdd\xd7\x8c\x0f\xaa\x22\xbc\
\xaf\x02\xe8\x80\xf1\x64\x35\xcb\x0f\x44\xb8\xbb\x98\x38\x6c\x0f\
\xe3\x2e\xe0\x32\x68\xcb\xac\xc7\xca\x6a\xe4\xb1\x04\x51\xe3\x7d\
\x1a\xc8\xac\xc3\x2e\x3e\xd3\x39\x62\xec\x48\x01\xfd\x81\x33\x10\
\xfe\x4c\xe0\xa5\x1f\xc3\xa2\x31\xc2\xfb\x9d\xdf\x28\xa0\x7f\x1e\
\x53\x97\xad\x3c\x9e\x0f\x63\x38\xac\x91\xdc\x24\x0a\xe8\x0f\xec\
\x8d\x71\x3c\x8f\xe7\x66\xa0\x72\x2c\xa4\x80\xee\x40\x18\xbb\x36\
\xe1\xf1\xdc\x8d\x04\xfd\xb5\x30\xfe\xa4\x80\xfe\xf0\xfd\xde\x87\
\xc7\x73\xfb\xa1\x8a\x08\xaa\x45\xfa\x13\xaf\x1d\x16\xe4\x10\xee\
\xee\x4d\x75\xfd\xe1\xbe\xed\xcf\x46\x7f\x00\x7c\xd3\x80\x3b\xf6\
\xff\x28\xaa\x3f\xf4\x99\xa7\x72\xd0\x9d\x08\x70\x57\x9e\x87\xf0\
\x31\x3e\xf8\x4e\x48\xa8\x01\xf9\x69\x0b\xd0\xbf\x23\x9b\x3c\x8e\
\x23\xbc\xaf\xa6\xcd\x83\xee\x82\x46\x09\x17\x7d\xd9\xe9\x2f\x6c\
\x98\xa3\x8a\x4b\x08\xaa\x22\x3f\xfd\x4b\x2a\x8e\x1f\xf2\x7b\xfd\
\x4b\xf4\xe7\x5d\x7f\xb8\x36\x3c\x11\xde\xa7\x1f\x80\xf1\x4d\x2d\
\xd0\xdf\x9a\x50\x5e\x2c\xe9\x6f\xfc\x7e\x8b\x92\x39\x51\xf8\xea\
\xff\xbd\x7f\x59\xe5\x85\x90\xfe\x36\xa8\x9a\x7a\xb3\x68\x26\x74\
\xed\x11\xd2\x20\x94\x07\x4b\x76\x58\xe3\xda\x52\x08\xf7\x15\xa8\
\xae\xee\x6f\x11\xfb\x71\x59\x61\x80\xb8\x1c\x0c\xc6\x22\x61\xc9\
\xd3\xbd\x1a\xe8\x0e\x74\x46\xa2\x03\x8c\x39\xe4\xd7\x50\x5f\x22\
\xd7\x89\x50\x77\x16\x60\x2e\x06\xbe\x5b\x0b\xab\xa1\x2f\x8b\xd9\
\x08\x5f\xae\x27\x4e\xc0\x37\x9f\x1e\xc2\xc7\x31\xe0\x9b\x02\x9e\
\x49\x30\xae\x00\xcb\xf0\x60\x9e\xf4\x3e\xc2\xfb\xbb\x49\x08\xbf\
\xce\xa0\xce\x2e\x08\x77\xef\xa9\x31\xca\xca\x72\xe4\xca\xca\xe0\
\xc8\x24\xd6\x3b\x35\x83\x23\xd6\x6b\xd1\x22\x1e\x8b\x90\x9c\x52\
\xc5\xa3\x14\xf3\x88\xb8\x1d\xa1\xf3\x03\x5f\x47\x39\x70\x94\xc3\
\x2b\x01\x35\x66\x1d\x19\x70\xa4\x71\x38\x02\x1a\x72\x50\x9c\x56\
\xf9\x7f\xe6\xcc\x23\x9d\xcd\xe9\x9c\xca\x21\xeb\xc3\xd2\xf3\xaf\
\xde\x4a\xd0\x26\x65\x5c\xeb\x57\x7e\xcc\x21\x1d\xcd\xf1\x23\xa1\
\x1d\xcd\x98\xed\xbb\x1c\x6f\x6b\x1a\xb4\x77\x47\xa6\xbe\xe6\x88\
\xe0\xa7\xa5\x5c\x63\x3f\x2d\xf8\x16\x82\xf1\x45\x58\x9a\x0b\x4b\
\x3d\xaf\x21\x7c\xac\x10\xfe\xef\x8f\xf0\x39\x90\x46\x1c\x53\x57\
\x1f\x70\x2d\xc3\x52\x4b\x18\xdf\xac\xea\xde\x83\x71\x1a\x3f\xa6\
\xae\x82\x00\x5c\x07\xc7\x78\x28\x97\xf5\xde\x81\x7b\x0c\xfa\x2f\
\x49\xa8\xdc\x9f\xa2\x26\x20\x2e\x19\xe6\xc6\xaf\x18\x5b\x30\xd3\
\xac\x62\xfe\x66\x4f\xce\xac\x1a\x60\xe5\x55\x15\x61\xf9\xac\x14\
\x33\xcd\x4c\xe6\x6f\xc1\x02\x28\x7f\x0d\x8f\xe5\x03\x61\x39\x2c\
\x2c\xcf\x7e\xcb\x94\x43\x45\x5c\x3e\x99\xa2\x28\x1f\xc6\x87\x19\
\x1c\x68\xcd\x67\x59\xe6\x18\x97\x31\xcb\x04\x5a\xf0\x50\xfe\x5a\
\xc2\xf9\x55\x11\xae\xa5\x71\x08\xbf\x9f\x89\x80\x7b\x2c\x9a\x4d\
\xde\xab\x78\x28\xbf\x3a\x3c\x4d\xd2\xc1\x85\xc3\x79\xc2\x2a\xbf\
\x8c\x59\x26\x0b\x8f\xb9\x94\x1f\x20\xa4\xf2\x1f\x32\xcb\x6e\xcf\
\xe5\x1c\xb8\x7f\xe7\x09\xa9\x7c\x60\x0f\x84\x7f\x9b\x71\xfa\x3b\
\xf4\x55\x74\x50\xcd\x7c\x51\xb9\x11\xea\xb6\xba\x8a\x73\xec\x10\
\xee\x9b\x58\x93\xf9\x30\x4e\x8c\x46\xf8\x32\x7d\x6e\xe7\xc0\x1c\
\x02\x7c\x1b\xc3\x18\x38\x3c\x4f\xa0\xaf\x16\xcb\x85\x97\x10\xef\
\xf3\xe0\xf1\x88\xfd\x7d\xc7\x8e\xe7\x31\xce\x41\xf8\xdc\x0c\x27\
\x4e\x45\xf8\x33\x07\xbe\xbd\x22\x79\xc8\x13\xde\xab\x1b\x85\xd0\
\xae\xf0\x1e\x86\xb1\xd0\xe0\x2a\xce\x83\x30\x07\x6e\x42\x28\x1f\
\x08\xf3\xc9\x6d\x50\xe5\xb0\x12\x44\x42\xe8\x86\x5e\x42\x2a\x1f\
\x08\x73\xb0\xdb\xb8\xfc\xdd\x1c\xe1\xcf\x41\x5e\xfa\x55\xd5\x21\
\xf8\x33\x2c\xe5\xf0\x37\xe8\xaf\xb0\x7a\xe1\x9c\xce\xa9\x29\xe1\
\x7e\x59\xc2\xe1\x6f\x3b\x50\x39\x60\xce\xf8\xa8\x08\xcb\x87\x6f\
\x4b\x0d\x54\x11\xf0\x0e\xb4\x63\xea\x71\x1b\xe1\xcf\x3e\x5e\x58\
\x55\xf9\x33\x09\xe7\x42\xf8\x96\x9d\x08\x1f\x47\xe7\x15\x70\x0d\
\xf7\xe1\x42\x6e\x3e\xdf\x75\xad\xff\x05\xe1\x5a\xc8\xbe\xc5\xc2\
\x2e\x9f\xf5\xfe\x5f\xc3\x94\xf9\x99\x8b\xde\x2c\x80\xf2\x17\x33\
\xf3\x9a\xcd\x94\xe1\x3a\x25\x86\xe5\xe1\xc6\x79\x02\x28\x9f\xe5\
\x87\x04\xcf\x28\xf0\x2f\xe4\xd5\x37\x07\xda\x48\x50\x6b\x37\xa0\
\x1f\xc6\xcf\xda\x86\xb7\x4c\xbd\x05\x09\x2d\x84\xf7\x43\x76\x23\
\x7c\x9c\x10\xfa\x8c\xb9\x4c\x3e\x42\xf8\xb5\x09\xa1\x7c\xe0\x7d\
\x56\x29\x74\x0f\x27\xfc\x1d\xa6\x61\xd0\x98\xc3\x34\x0d\x99\x2c\
\x1f\xb6\xc9\xc1\xde\x0f\x0c\xcc\xe6\x2c\xf2\x92\x27\xeb\xdc\x24\
\x2c\x2d\x31\xaf\x32\x65\x26\xe1\xff\x50\x66\x92\x74\x59\x47\x54\
\x3e\x66\xf2\x6f\x9c\x02\xfb\x9f\x90\xd7\x93\xd5\x06\x34\x41\xb8\
\xcd\x3b\x23\x7c\x4c\x0e\xc6\xf2\x60\x7c\x55\x13\xf1\x61\x5f\x09\
\x28\x0d\xf0\x8f\x86\x7e\x2a\xf8\xfa\x85\x63\xbc\x88\xf0\x75\x37\
\xbc\xcc\xed\xc2\x39\x2f\x10\x3e\xce\x04\x7d\x6d\x08\x79\x37\x10\
\xe1\x91\xfc\x24\xa0\x26\xc0\x3f\x16\xe6\x05\xc0\xc7\x12\xc6\xde\
\x6b\xb2\x5e\x8e\x13\xe1\x3b\x15\xbe\xed\xe1\x9a\x80\xd0\x8c\x82\
\x5a\xbb\x22\x41\xf5\x00\xfd\x35\x18\xeb\x81\xef\x67\x71\xf8\x72\
\xc1\xf5\x70\x0b\xe1\x7d\x27\x71\xf8\xa9\xd4\x57\xf4\x45\x78\xc8\
\xcd\x52\x24\x7a\x9b\x73\x23\xcc\x4f\x80\x3f\x81\x20\xe6\x26\x24\
\xa8\x0c\xf0\xf3\x14\xb7\xbf\x20\x2f\x7c\x85\x70\xdf\x00\xc9\x75\
\x20\x18\xc0\xdc\x1b\xaf\xeb\xad\xa8\x44\xf0\x55\x20\xfb\xec\x4a\
\xc0\x1f\x60\x4e\xbc\x26\xfe\x22\xe2\x26\xf8\xc2\xc2\xfc\x3d\x79\
\x5e\x4e\x82\xaa\x01\x7e\x8a\xe2\xf2\xab\x16\x34\x61\x5e\x54\x18\
\xfe\x1b\x75\x15\x3e\x48\xfc\x36\x13\x34\x21\xfc\xbe\xa8\xfc\x1d\
\x6b\x33\x20\xa6\x8b\x30\xe6\x84\x85\x41\x18\x67\x80\x31\x81\x4c\
\xc4\xdb\xdc\x30\x2f\xa1\xe3\xeb\x33\x60\xee\x8e\xdd\x16\x09\x54\
\x23\xcc\xb1\x42\xfc\x08\x62\x1c\x2e\xf0\x8b\x83\x6d\x14\x5e\x57\
\x91\x96\x1c\xcf\x48\x82\x72\xc0\x1c\x8c\xb8\x6d\x5b\x15\xc1\x7f\
\x5c\x8f\x4b\x1d\xc0\xcf\x39\x93\x4b\x7a\xd8\x22\x43\xf2\x1e\xa8\
\x0c\x3a\xaa\x1d\xfd\x3d\x5e\xee\x5f\xf0\xad\xe2\x36\xd7\x20\x8a\
\x75\x27\xb5\x0d\xe0\x1f\x29\x6e\xdb\x56\xc5\x3b\x7c\xd4\x67\x07\
\x97\x7c\x4e\xf2\x91\x4f\x7d\x01\xf8\xbc\x8b\xdb\xbe\x55\x91\xe5\
\x2b\xc2\x0b\xb8\xad\xab\x87\xbe\xa2\x64\x4c\xa0\x1c\xe0\xff\x00\
\x7d\x2a\x71\xdb\xb7\x2a\xfe\xc7\x47\x9d\xaa\x8a\x4b\xa0\xcb\x47\
\x5e\x75\x1d\x10\x5f\x46\xdc\xb6\xe5\x85\xac\xed\xe6\x78\xc1\xf0\
\x2a\xf2\x1a\xc0\x47\x5e\x75\x1d\xe0\x7b\x23\x6e\xdb\xf2\xc2\xcb\
\x7c\xd4\xa9\xaa\xf8\x1c\xe2\x5e\xc7\x48\x25\xd0\x91\xf8\x6d\xcb\
\x2b\xfb\xf2\x50\x1f\x98\xb3\xaa\xca\x97\x74\x24\x3f\x0d\x54\xc7\
\x41\x47\xe2\xb7\x2b\xaf\x7c\x81\x2a\xfb\x98\x13\x01\xe3\xfc\x17\
\x79\xc8\x47\x62\xff\x72\xd0\x91\xf8\xed\xca\x0f\xc1\x57\x1d\xfa\
\xf7\xe4\x3e\x3c\xcc\xf7\x66\xf0\x98\x87\xc4\xfe\xe5\xa0\x23\xf1\
\xdb\xb4\x3a\x7c\x87\xf1\x1c\xc2\xe7\xf7\x5e\xf0\x99\x56\x62\xff\
\x72\xd0\x91\xf8\x6d\x29\x6a\x4a\xec\x5f\x0e\x3a\x12\xbf\x3d\x24\
\xf6\x17\x1f\xe8\x48\xfc\xf6\x90\xd8\x5f\x7c\xa0\x23\xf1\xdb\x43\
\x62\x7f\xf1\x81\x8e\xc4\x6f\x0f\x89\xfd\xc5\x07\x3a\x12\xbf\x3d\
\x24\xf6\x17\x1f\xe8\x48\xfc\xf6\x90\xd8\x5f\x7c\xa0\x23\xf1\xd9\
\xa1\xb5\xf0\xab\x27\x41\x15\xa0\x23\x89\xfd\xeb\x33\xe8\x48\x62\
\xff\xda\x0c\x18\x07\x87\x98\x20\x10\xf3\xac\x23\x8f\x24\xae\x8f\
\xa3\x23\xf1\xd9\xdf\x8c\x0f\x9d\xa9\x42\xd8\x83\x07\xe6\xa0\xc4\
\xe5\x47\x0a\xf6\x86\x18\x86\xb0\xf7\x09\xc4\x51\xae\xce\xfa\x6b\
\xe2\x7d\x47\xaf\x46\x7a\x09\xf1\xf5\x07\x10\xaf\x26\x0a\xe3\x10\
\x54\x1e\x27\x54\x58\x00\x3f\x2d\x47\x54\x71\x0f\xdb\xea\x52\x62\
\x7f\xc1\x13\xfc\xce\x07\x56\xb2\x9a\x60\x00\xf1\xca\xae\x08\x50\
\x57\x89\xfd\x85\x43\x58\x3b\x05\x6b\x4e\x79\x8a\x29\xc5\x23\x0c\
\x51\x79\xec\x5f\x89\xfd\x6b\x07\xe1\x9d\x20\x88\x6b\x00\xd6\xba\
\x7c\x16\x82\x7e\x12\xfb\x0b\x9f\x4b\x51\xcd\x00\x6b\x99\xaa\x5a\
\xcf\x26\xb1\x3f\x75\x09\xeb\xa9\x6a\x12\x83\xe2\xb4\x10\x75\x93\
\xd8\x5f\x34\x84\xf5\xc9\xac\xbd\x5b\xf9\xc1\x24\x21\xeb\x25\xb1\
\xbf\xe8\xc8\xcf\xba\x15\x00\xac\x65\xe6\x75\x8f\x70\x89\xfd\xa9\
\x4f\x88\xdb\xce\x4f\xfc\x11\x57\x11\xe8\x24\xb1\xbf\x68\x49\xdc\
\x17\xa3\x2a\x70\xda\x37\x43\x62\xff\xda\xcb\x7b\x88\x37\xb0\xe2\
\x82\x4b\xec\x5f\xf7\xc8\x69\x1f\x63\x22\x22\x44\xa4\x8b\xc4\xfe\
\xa2\x27\x71\x6f\x0e\x76\x80\xf1\x22\x41\xee\x33\xc9\xab\xfd\xdb\
\x50\xa0\x6d\xea\x03\xbf\x20\xee\xfd\x40\x3d\x11\xea\x42\x5c\xff\
\xae\x4c\x81\xb6\xa9\x2f\x1c\x8b\x38\xc3\x53\x84\x7a\xf4\x26\x95\
\xfd\x85\x02\x6d\x53\x1f\x78\x10\x71\xc6\x61\x11\xea\x41\xde\x3b\
\x3c\x85\x02\x6d\x53\x1f\x08\xf7\x19\x27\xbf\x91\x9a\xee\x07\xcf\
\x0f\xd7\x93\xca\xf6\xa3\x40\xdb\xd4\x17\xb2\xf3\x11\x68\x2d\x62\
\x1d\x6e\x93\xca\xef\x4e\x81\x76\xa9\x2f\x0c\x40\x95\xc1\xeb\x7e\
\xc8\x82\x22\xf8\x29\x68\x91\x74\xa8\x0d\x31\xc0\xea\x02\xaf\xa2\
\xca\x60\x88\x41\x0f\x06\x49\x07\x4b\x0a\xb4\x4d\x7d\xe0\x0f\x54\
\x79\x7f\x8a\x38\x31\xe8\x01\xb1\xfd\xe5\x49\x7a\x9c\xa0\x40\xfb\
\xd4\x07\x76\x23\xb5\xfb\x03\x31\xe9\x31\x9f\xa4\x07\xec\xab\xc5\
\x6d\x6f\x5f\x09\x05\xc3\x09\x84\x36\x07\xbf\x61\x71\xed\xa7\x54\
\x8c\xf0\xf1\x3f\x22\x60\xff\xdb\x6f\x14\x68\xa3\xba\xcc\x25\x84\
\xf6\x16\xf7\xf8\x2b\xec\x8d\x40\xf6\x5d\x87\xf8\x88\xc5\x14\x68\
\xa7\xba\xca\x48\x42\x5b\xf7\xa5\x80\x3e\xec\xbe\x49\xe0\x9b\xf0\
\x09\x05\x74\xab\x8b\x24\xc6\xa0\x1e\x4d\x01\x7d\x80\xec\xfc\x94\
\x60\xb7\xe2\x0d\x88\x7a\xfb\xfd\xd5\x76\x5e\x27\xb4\xf1\x4c\x0a\
\xe8\xc3\x22\xb9\x3f\xc8\x02\xbc\xa3\x60\xcc\x50\xd2\x37\x14\x0c\
\xb3\x09\x6d\x3b\x87\x02\xfa\x10\x09\xfb\xe4\x70\x9a\xa7\x84\x7e\
\x02\xac\x47\x01\x1f\xb5\x8d\x08\x9f\xd3\x8e\x11\x13\x0f\x60\x3c\
\x83\xf1\x2e\xc2\xbf\xa9\xc5\xdd\x6e\xfc\xf0\x09\xa1\x4d\x17\x51\
\x40\x1f\x32\xef\x23\xde\xfc\x55\xa8\x02\xb8\x2e\x7b\x62\x5c\x8c\
\x70\x5f\x2b\x71\xb7\x5f\x55\x7c\x41\xd0\x7d\x29\x05\xf4\x61\x47\
\x18\x23\x8e\xc5\xa8\xcf\x93\x05\xa8\x05\x58\x77\x01\xb1\x41\xc5\
\xdd\x86\x9c\x48\xf5\xfb\x9f\x4c\xe8\xaf\xb8\xa1\xda\xb7\xd7\xb6\
\x15\xc2\xf7\x7c\x12\x77\xfb\x91\x99\x49\xd0\xb1\xb6\xed\xb7\x08\
\xf1\x97\x13\x31\xee\xc4\xb8\x19\xe1\xdf\x07\xe2\x20\x7c\xb3\x2e\
\x44\xf8\x7e\x4e\x9d\x10\x67\x34\x46\xf8\x9e\xe5\xe2\x6e\x37\x22\
\x53\x08\xfa\x39\x53\x40\x9f\xba\x40\xf0\x9f\x08\x44\xf8\xfe\x5f\
\xec\xb0\x98\x02\x3a\xb2\x18\x4f\xd0\x6b\x1c\x05\xf4\xa9\x4b\x84\
\xb8\x1c\xf0\x5d\xd2\x1c\x55\xc6\x7f\x14\xd0\x0f\x18\x45\xd0\x49\
\x54\x3e\xff\xf5\x8d\x10\x1f\xde\x12\x55\x46\x00\x05\x74\x23\xee\
\x65\xd4\x8e\x02\xfa\xd4\x55\xc2\x1a\xec\x59\xa8\x22\xe0\x5b\x31\
\x51\xcc\x7a\x4d\x27\xe8\x03\xbe\x00\xbf\x29\xd0\x56\x75\x99\x8e\
\xa8\x22\x5a\x22\xe1\xc4\xd5\xe0\x95\x66\x24\x7d\x24\xf3\x2c\xc2\
\x25\xc4\x48\x33\x22\xb5\xb9\x38\xfb\x02\xea\x24\x5d\x24\x7e\x37\
\xc2\x27\xdc\x63\x72\x84\x36\x87\xb8\x0c\xc2\x5e\x67\xcf\x8e\x1f\
\x50\x65\xac\xa6\x40\xfb\xd4\x07\xfa\x92\xda\x5d\x1c\xcf\x80\x8b\
\xa8\x32\x24\xdf\x80\xa2\x21\x7c\x13\x10\x7d\x1e\x9b\x22\xd1\xcf\
\x6d\x6f\x40\x95\xd1\x96\x02\x6d\x53\x5f\x38\x99\xd4\xf6\xc2\x8c\
\xb3\xc4\x8e\x76\x88\x3d\x04\x1d\xe3\x4f\x42\xf6\x3c\x4a\x6a\x77\
\x51\xcf\xbf\xd3\x11\x7b\x1c\xa7\x40\xdb\xd4\x07\x7e\x42\x15\x63\
\x33\x56\xb5\x57\xb8\x20\xf9\x06\x71\x46\x6d\x9b\x07\xaa\xcd\xd4\
\x24\xb4\x7b\x53\x11\x96\x7b\x00\x71\x46\x0f\x0a\xb4\x4b\x7d\xa1\
\x29\xa9\xed\xab\x13\x43\xbd\x3a\x74\x46\x9c\x01\xcf\x24\x89\x7f\
\x9d\x68\x68\x43\x6a\xfb\xf7\x22\x2a\x97\x8e\xb8\x63\x33\x05\xda\
\xa6\x3e\x90\xbc\xff\x93\x28\xee\x3b\xa2\xcf\x07\x27\xe8\x53\xa0\
\x6d\xea\x03\xc5\x61\xff\x65\x88\x37\x5c\xa0\x40\xfb\xd4\x75\x8a\
\xda\xfe\xe0\x4b\xd9\x0e\xf1\x06\x51\x7e\x8f\xd4\x57\x8a\xda\xfe\
\x09\x88\x3f\xec\xa5\x40\x1b\xd5\x65\x8a\xda\xfe\x83\x11\x7f\x50\
\x45\xb8\x9f\xa5\xb8\xdb\xa9\xae\x52\x94\xf6\xbf\x8c\xaa\x07\x78\
\x0f\x48\xd6\xdd\xd5\x6e\xfb\x83\x5f\x8f\x21\xaa\x3e\xec\x90\xc4\
\x37\xa8\x36\xdb\xdf\x1f\xd5\x1c\x10\x33\xb2\xb6\xad\x6f\xa3\x3a\
\x45\x61\xff\x4b\xa8\x72\x9c\x9f\xea\xa2\x17\x12\xcc\xbe\x7f\x12\
\x8a\xc6\xfe\xb7\x30\x2a\x21\xc1\x42\x11\xe3\x26\x8c\xbf\x04\xac\
\x6b\x7d\xa4\x30\xed\x0f\xf3\xcb\x8d\x91\xf0\x00\x6b\xf0\xc2\x91\
\x24\x3e\x0b\xd5\xec\x9f\x8b\xd1\xa1\xb2\xb9\x84\x06\x88\xcd\x31\
\x1e\xe1\xeb\xf0\x20\x7e\xd8\xff\x04\x50\x87\xfa\x42\x41\xd9\x1f\
\x7c\x39\x21\x76\x1f\xac\x41\x94\x43\xe2\x05\xc4\x15\x06\x3f\x32\
\xf8\xde\x80\x98\x42\xfd\x6a\x01\xc5\xe5\xf3\x44\xb6\xbf\x11\x1f\
\x3a\x43\xdb\xc2\x3c\x8d\x1a\x57\x6b\x48\xc0\x0b\x84\xb5\xbf\x25\
\xbf\xf6\x97\x40\x3c\x90\xd8\xbf\x7e\x43\x62\x7f\xf1\x03\x62\x7b\
\xbd\x17\x13\xc5\xd5\x67\x95\xd8\xbf\x1c\x74\x24\x1e\x1b\x88\x93\
\x12\xfb\x97\x83\x8e\xc4\x6f\x0f\x89\xfd\xc5\x07\x3a\x12\xbf\x3d\
\x24\xf6\x17\x1f\xe8\x48\xfc\xf6\x90\xd8\x5f\x7c\xa0\x23\xf1\xdb\
\x43\x62\x7f\xf1\x81\x8e\xc4\x6f\x0f\x89\xfd\xc5\x07\x3a\xe2\xaf\
\xed\x4a\x30\x66\x20\x7c\x8e\xb3\xb6\xee\x1b\x29\xb1\x7f\x39\xe8\
\x88\xb7\x36\x83\x75\x93\x10\x03\x54\x81\x90\x16\xfc\x1b\x20\x76\
\x41\x0e\x8f\x79\x50\x85\x12\xfb\x97\x83\x8e\xaa\x6e\x2f\x98\x1f\
\xeb\xc0\x25\x0f\x58\x43\x99\xc1\x43\x3e\x54\xa1\xc4\xfe\xe5\xa0\
\xa3\xaa\xdb\x6b\x28\x0f\xf9\x80\x5f\x42\x6d\xf1\x53\x93\xd8\xbf\
\x1c\x5a\x88\x7b\x5b\xdd\xe4\x23\xaf\xed\x55\xe4\x45\x15\x0e\xe7\
\xa3\x4e\x75\x1d\x55\xed\x3d\xbb\x9a\x8f\xbc\xec\xaa\xc8\x8b\x2a\
\x1c\xc4\x47\x9d\xea\x3a\x9a\x21\xee\x6d\xc5\x6e\x5f\x20\x4e\x30\
\xab\x22\x2f\xaa\xb0\x33\x1f\x75\xaa\xeb\x80\x3e\x3c\xac\x4f\xe4\
\xd4\x56\x7e\x7c\xe4\x55\x1b\xe2\x98\xc1\x9a\x1a\x4e\x7b\xb0\xd7\
\x57\x70\xf3\x7f\x4b\xe1\x92\x8e\x8c\x70\x2e\xf9\x50\x85\xec\xe2\
\xef\xd5\x77\x24\x21\xee\x6d\x66\xc6\x43\x1e\xd0\x8f\xa8\x0d\xfb\
\x86\xba\xf1\xd7\x34\xf5\x02\x6b\x10\xf7\x36\x7b\x85\x2a\xc6\x4c\
\x22\x03\xfc\xdd\x6b\xc3\xfe\xf1\x10\xf3\x59\xb9\x5a\x2d\x54\xb7\
\xc1\xcb\x1e\x04\xf0\x8e\x00\x3f\x67\x69\x52\x5a\xe8\x4b\xdf\xe7\
\x21\x3d\x15\xb8\xbc\x86\xed\x54\x57\x01\xb1\xa7\x1e\x22\xde\xda\
\x10\xfc\xb6\xe0\x1d\x0a\xfb\x6b\xe5\xf2\x98\x86\x0a\x7c\x8c\xb1\
\xa1\xa0\x1a\xac\x0e\x02\xd6\x92\x88\xdb\x46\xc2\x22\xcc\x59\xf5\
\x10\x5c\x53\xd5\x59\x40\x7c\x42\x71\xdb\x4a\xd0\x84\xf5\xf3\x63\
\x04\xd9\x48\x75\x18\xb0\xef\x6b\x5d\x8a\x3f\x05\xdf\xfa\xe3\x05\
\xda\x42\x75\x1f\x30\x36\x12\x86\xb8\x8f\x09\xd5\x06\xc2\xda\x82\
\xbe\x02\x6e\x9b\xfa\x04\xf8\x26\x80\x7d\x3f\xc5\x6d\x47\x7e\x09\
\xd7\x2d\xcc\x43\xa9\x08\xbe\x49\xea\x25\xcc\x30\xee\x43\xd4\x1f\
\xdb\x81\xb5\x24\xb0\xf6\xde\x40\x38\xcd\x50\xef\x01\x7d\x03\x98\
\x37\x0d\x41\x78\x2c\x53\x2a\xac\x37\x87\x7b\x3d\x0d\xe1\x7b\x68\
\xd3\x85\x56\x73\x09\xd8\x01\xfc\xc0\x20\x46\x19\x8c\xa7\x86\x22\
\x7c\x3c\xe0\x29\x12\x4e\xcc\xb2\x52\x66\xde\xb0\x6f\x1f\xcc\x31\
\x78\x23\x3c\xa6\x9e\x64\x2c\x8f\x7a\x80\xb1\x24\x58\x1b\xaf\x87\
\x71\x08\xc2\xc7\x0c\xe1\x1a\x99\x8f\xf0\x7d\x2f\x61\xac\x79\x23\
\xc6\x60\x26\x37\x32\x7f\x63\x60\x9c\x87\xf0\xfd\x1a\xc1\x8f\x60\
\x30\x33\x0f\x35\x54\x71\xbf\x86\x3a\x83\x32\x1c\x45\x4a\x65\x44\
\x94\x20\xa4\x45\x94\x19\x58\xed\x09\x22\x7c\xcd\x22\xb3\x72\xb9\
\x08\x64\xb9\x72\x39\x09\x64\x42\x82\x0a\x45\x95\x95\xfd\xc1\xe5\
\x7f\x19\xfc\xc6\xe5\x7f\x25\x96\xe0\xf2\x3f\x95\x8a\x48\x72\xce\
\x5f\x31\x49\xae\x82\x2c\x5d\x24\x5d\xa1\x78\xb9\x92\x8a\xb2\xd2\
\x6f\xb2\xfc\x4f\x41\x46\x75\x64\xb9\x92\x8a\xb2\x74\x51\x45\x19\
\xe5\x90\x64\x24\x56\x79\x79\x59\x39\xb8\xcb\x0c\x1a\x83\x78\x75\
\x94\x20\x82\xac\x04\x8d\x4d\x90\xe5\xa0\x31\x09\x32\x0d\x32\x23\
\xc8\x08\x6c\x5f\x41\xfe\x53\x51\x5e\x4e\x92\xcd\x7e\x93\xe4\x92\
\x8a\xb2\x56\x55\x72\x51\x45\x59\x89\x2c\xe7\x54\x94\xe5\xd8\xc9\
\x49\x9c\x65\x69\xb2\x9c\x54\x59\xfe\xeb\x88\xcc\x41\xfe\x7b\xae\
\x17\x17\x19\x74\xe9\x43\x92\x5b\x93\x64\x4d\x92\xac\x44\x92\xe5\
\x92\x2a\xca\xb4\xa2\x8a\x32\x2a\xbf\x0b\x70\xd9\x0c\xe4\xdf\xe5\
\x32\x7e\x67\x95\xcb\x7f\xa1\xc5\xa8\x28\x43\x53\x54\x68\xbb\x22\
\x92\xec\x4b\x92\xfb\x90\x64\xa8\x16\xb1\xed\x9a\x90\x64\x18\x03\
\x90\x26\xc8\x72\x24\x59\x9a\x2c\x33\x98\x4a\x71\x90\xa1\x6c\x39\
\x6e\x72\x12\x1b\xb9\xa8\xa2\xac\x44\x96\x4b\xb8\xcb\x5a\xbf\xb9\
\xcb\x66\x7f\x48\x72\x59\x45\x79\x39\xeb\x66\xfe\x27\x27\x55\x90\
\x59\x0f\x43\xa6\x4c\xfb\xf7\xf0\xc4\x65\xb9\x7f\x0f\x5b\x5c\x86\
\x47\x68\x0e\x41\x2e\x7f\x06\xa0\x8a\x4f\x78\xae\x32\x53\x25\xf1\
\xc9\xd2\x24\x59\x29\xa9\xa2\xac\x95\x53\x51\x36\x2b\xaa\x91\x9c\
\x84\xcb\xe5\xef\x0f\x3c\xff\x72\x19\x2f\xbf\x5c\x96\xfe\xab\xf1\
\xbf\xf7\x13\xd3\x64\x15\xdf\x57\x95\xdf\x6f\x5a\x24\xd9\x8c\x25\
\x33\x4d\xba\x9c\x25\x33\x4d\x5a\xf6\x0f\x8c\x0a\xc5\x33\x0b\x20\
\xbc\xd1\xff\x54\x48\x5e\x46\x7c\xbf\x77\xc4\xfe\x62\x8e\xf0\x8e\
\x0f\x8d\xf5\xf9\x82\xfd\xa0\xaa\x80\x53\x0c\x80\xbd\xb1\x75\x31\
\x8e\xc6\x38\x17\xe3\x5a\x84\xf7\xed\x43\x99\xff\x87\x3d\xaa\xc0\
\xc7\x0b\xfc\xe7\xc8\xf3\xc0\xb5\x15\x10\xff\x02\x7c\x1c\x4f\x21\
\xfe\xf6\x84\xfe\x8a\xf0\x6f\x1e\xe8\xb3\xea\x88\x5c\xeb\x9a\xa3\
\x3f\xc2\xf7\x3e\x14\xd4\x38\x2f\xf8\x89\x8d\x12\x69\x0d\xaa\x07\
\x18\x17\x14\xe6\x3c\x17\xc4\xfb\x6e\x2b\xb2\xda\xf0\x07\x78\xef\
\xc3\x3c\xb8\xb0\xc7\x65\x20\x2e\x1e\xd5\xe6\x5b\xa1\x4f\x73\x07\
\x09\xb6\x9e\x30\x06\xb6\x1b\xa3\x07\xc6\x08\x54\x71\x1f\x31\x88\
\xdf\xaf\x2a\x92\x9a\xf1\x06\x4f\x24\x78\x3b\x93\xf7\x52\xb5\x40\
\x15\x9f\x27\x1b\x85\x59\x21\x3e\x71\x17\x09\xb6\xee\xd9\x1c\xca\
\xb9\x48\x38\xe7\xad\x70\xaa\xc2\x37\x60\xaf\x73\x41\x8f\xd7\x9e\
\xe5\x50\xd6\x6e\xd2\x79\x2d\x85\x51\x21\x3e\x01\x9f\x69\x82\xbe\
\xf6\x3f\xa2\xca\x71\x7e\xa1\x9d\x73\x48\xe7\xe9\x0a\xad\x56\xbc\
\x03\xc6\x49\x05\x5d\x7f\x20\xf4\x1f\x9a\x33\xcb\x80\x36\x66\xb7\
\x6f\x4d\x47\x61\x57\x8e\x07\x08\xab\xfe\x40\x78\xe6\x3f\x41\x9c\
\xd7\x3e\xd6\xf5\xfa\x57\x45\x49\xfd\xc5\x0f\x49\xfd\x6b\x56\x07\
\x61\xc6\x73\x17\x14\xe0\xf9\xdb\x8c\x0d\x01\x35\xad\xbf\x16\x87\
\xbc\x6b\x4a\xe8\x1f\xd7\x24\x6e\x36\xac\xe3\x3e\x83\xf0\x6f\x71\
\x6e\xb6\x13\xe7\xf5\x5f\x15\xa1\xbf\x0c\x73\x9b\xb0\xce\x96\xd7\
\x3d\x23\x60\x2f\x88\x78\x1e\xf3\xa7\x7a\xfd\x89\xcc\x41\xdc\xe3\
\x4c\x00\xa0\x8f\x95\xcc\x47\x9e\xb5\xa9\xfe\x40\xd8\xe7\x45\x91\
\x4b\xfd\x57\xf3\x99\x5f\x6d\xab\x3f\x30\x98\x43\xdd\x61\xfc\xa2\
\xa4\x1e\xd4\x1f\xfc\x1d\x5a\xb1\xa9\x7f\x40\x35\xf2\xaa\x8d\xf5\
\x07\xae\x64\x53\xff\x97\xd5\xac\xbf\x30\xbe\xff\x84\x4d\x58\x73\
\x47\xf4\x7b\xe8\x54\xcd\x7c\xe0\xfb\x0c\xd6\x78\xd7\xc6\x7d\xe4\
\x4c\x09\xf5\x77\xae\x66\x1e\xbd\x99\xe9\x33\x29\x50\x1f\x7e\x19\
\x48\xa8\x7f\x75\x63\xab\xf8\x32\xd3\x2f\xa3\x40\x7d\xf8\xe5\x5d\
\x42\xfd\xd3\xab\x99\x07\xac\x6b\x83\xfb\x08\xfa\x9a\x1f\x28\x50\
\x27\x7e\x08\x63\x76\x0a\x4c\xfd\x6b\xe2\x7f\xcb\xda\x97\x68\x04\
\xa2\x86\xdf\x26\x3f\x84\xfd\x6c\xd4\x6b\x98\x07\xd8\x9d\xce\x6c\
\x83\x49\xa8\xf6\xc4\xa9\x02\xc2\x5c\xac\xbe\x00\xf2\x79\x84\x51\
\x83\xd9\x06\xf0\x4d\x7e\x18\xd5\x8e\xbd\xe4\x66\x22\xde\xd6\x27\
\xf3\xc2\x37\xa8\x62\xec\x1f\xe8\x17\x98\x33\xdb\x78\x6c\x35\x39\
\x8e\xa9\x23\xcc\x75\x08\x63\x1d\xb4\x3b\x53\x47\x41\xe6\x79\x12\
\xa3\x15\x12\xce\x9e\x55\xa0\x6b\x9a\x00\x75\x75\xc5\x68\x2c\xe0\
\xfa\xb3\x08\xdf\x12\x30\x8f\x03\x73\xd7\x57\xab\x49\x98\xef\x3d\
\x8e\x70\x37\x0e\x56\x5c\x21\xe8\x6f\x05\x0a\x48\xc7\x29\x08\x9f\
\x43\x10\x46\xfd\x05\x4d\x18\xcb\x88\x41\xe5\x7e\xd9\xcb\x05\x90\
\x27\xf8\x10\x2b\x50\xa0\x6e\xfc\x10\xf6\xe3\x63\xed\x0f\xc6\xeb\
\x38\x0d\x27\xb2\xc6\x43\x6a\xdb\x7e\xf0\x30\x46\x03\xfd\x16\x70\
\x99\xac\xee\x9a\x00\x98\x5b\x91\x61\xd6\xff\x2c\x05\xea\xc4\x2f\
\x27\x31\x75\x8f\xae\x66\x7a\x62\xff\x97\xdf\x71\x1f\x2a\xf0\x32\
\x53\x77\x9b\x6a\xa6\x8f\x22\xd4\xdf\x96\x02\xf5\xe1\x97\xd0\xbf\
\x82\x77\x6c\x55\x31\xf6\x38\x71\x06\xa1\xfe\x4d\x50\xed\xe8\xaf\
\x91\xc9\xf2\x85\xfa\x59\x83\xb4\x2c\xd4\xf4\x59\x2a\x0e\xb2\xe6\
\xbf\xb8\xcd\x51\xb0\x63\x16\xaa\x8c\x01\x14\xa8\x8f\xa8\xea\x3f\
\x8f\x4d\xfd\x01\x87\x29\x50\x27\x61\xd7\x1f\xdc\x90\x39\xad\x5f\
\x86\xdf\x6b\x4b\xbc\xa5\xea\xd6\xdf\x9d\x43\xdd\x59\x80\xbe\x55\
\x0a\x05\xea\x26\x8c\xfa\xef\xad\xa2\xee\x2c\xc0\x37\x06\xf8\x2d\
\xbf\xa1\x40\x1d\x05\x51\x7f\xe8\x23\x42\x1f\x87\x5f\xbf\x72\x38\
\xdf\x0c\xe3\x42\x8c\x5b\x11\xbe\x1f\x76\xb4\x80\x59\x93\xf7\x2e\
\xab\xfe\xe1\x6c\xf2\x05\x5d\xc1\xb7\x1e\xbe\x71\xa9\xe0\x27\xc7\
\x09\xfc\x3e\xbb\xd9\xd5\x5f\x9c\x80\x3e\x98\x4f\x0d\x58\x93\x35\
\xcd\x54\xa8\xbf\xc4\xff\x47\x52\x7f\x49\xfd\x2b\x12\x9e\xe9\x30\
\xa7\x06\xcf\x5e\x88\x77\xc4\xaf\x5f\x41\x6d\xaf\xff\x58\xd2\x39\
\x30\x2e\x2e\x8c\x98\x4f\x54\xa8\x3f\xf8\xd3\x10\x75\xba\xcb\xe1\
\xbc\x24\x24\xf8\xfa\xb7\x17\x42\x7d\xf8\x05\xf4\x15\x89\x3a\x71\
\xf2\xdd\xdf\x8f\x04\x5b\x77\xb8\x9e\xa8\xe2\x3b\x99\x8f\xca\xf5\
\x82\xbd\xac\xc8\x3e\x56\xd0\x47\x10\xf4\x7e\xe4\xfc\xec\x9d\x22\
\x6c\xc4\xa1\x8a\xba\x91\x7d\xf7\x0f\x22\xc1\xd6\x1d\xe8\x28\xf4\
\x5a\xf1\x0e\x4b\x54\x59\xbf\xaa\x7c\xf7\x6b\x42\x18\xfb\x94\x12\
\x49\xcd\x78\x07\xbc\xe7\x04\x5d\x4f\x76\x84\x39\x35\xd6\xb5\x45\
\x35\x40\xec\x20\x18\x5f\x11\x56\xdd\x21\x56\x1a\xaf\x7e\xbc\xe2\
\x02\xf4\x07\x9c\x30\x26\x20\xfe\xd6\x3c\x73\x62\x31\xc2\xd7\xd4\
\x1a\x8b\xb2\x12\x02\x02\xdc\xa3\x30\x6f\x0b\xf3\xf8\x0b\x10\x1e\
\xdf\x0c\xea\x02\x6d\x73\x05\x63\x2a\x93\x70\x3f\x83\xaf\x39\xbc\
\x23\x37\x23\x3c\x9e\x11\xc4\x16\x85\x18\x45\x32\x95\x72\x15\x20\
\xfe\x86\x35\x60\x05\x13\x58\x4e\x8c\x21\x90\xc3\x8c\x6c\x90\xc4\
\x0c\x41\xc0\x60\x46\x4e\x60\x20\x5a\x32\x7e\x94\x7e\x09\x47\x08\
\xc6\x81\x1f\x69\x49\xf8\x11\x31\x98\x47\xc4\xfd\xf8\xb7\xb8\x15\
\xb8\x1a\xac\x58\x41\xac\x98\x40\x39\xf8\x51\x8e\x75\x4c\xc2\x8f\
\xd2\xa4\x23\x2b\xee\x08\x76\x64\x90\x8e\x2c\x98\x33\x8f\x74\xe6\
\x91\x35\x7d\xcc\xea\x3a\xd0\xca\x43\x67\xb0\xfe\xd4\x80\x79\x94\
\xc2\x27\xde\x01\x78\xae\xcc\x7c\x69\xc4\x72\xff\xfe\x95\x19\xdf\
\x84\x21\xcd\x3a\xe6\x54\x3c\x32\xe3\x8d\x30\x98\x71\x44\x18\x4a\
\x78\xac\x07\x86\x19\xde\x12\xbc\xb5\x17\x7e\x84\x20\x14\x70\x84\
\x26\x21\x1e\xfd\x18\xb8\x7d\x56\xfc\xb3\x13\x7e\x4c\x62\xda\x2f\
\x87\x69\xcf\x22\xa6\x7d\x71\x7b\xff\x1f\x03\x87\xad\x4e\
\x00\x00\x63\x88\
\x89\
\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\
\x00\x03\x20\x00\x00\x03\x20\x08\x06\x00\x00\x00\xdb\x70\x06\x68\
\x00\x00\x20\x00\x49\x44\x41\x54\x78\x9c\xec\xdd\xfb\x97\x5d\xe5\
\x7d\xe7\xf9\x77\x4a\xa5\x52\xe9\x82\x90\x84\x10\x42\x08\x2c\x04\
\x08\x19\x30\x96\xd5\x34\x91\x15\xda\x61\x30\xbe\xb4\x1b\x3b\x6e\
\x27\x9d\x38\x4e\xd2\xc9\xcc\xea\x99\x35\x6b\xfe\xa2\x59\xb3\x7a\
\xf5\x38\x17\x3b\x8e\xdb\xed\x71\x1c\x37\xa1\x6d\xc2\x10\x9b\xc1\
\xd8\xc6\x18\x64\x90\xb1\x90\x85\xb8\x0a\x84\x40\xe8\x7e\x29\x55\
\x65\x7e\x78\xea\xa0\x92\x74\xaa\xea\x5c\xf6\x7e\xbe\xcf\x3e\xfb\
\xfd\x5a\xeb\x2c\x09\xb9\x74\xf6\xc7\x50\x97\xfd\xd9\xcf\xed\xb7\
\x90\x24\x8d\x8a\x09\x60\x72\x81\xd7\x04\x30\x3e\xfb\xea\xfc\x7e\
\x12\x18\x9b\xf3\xcf\x13\x73\xde\x6f\x72\x9e\x6b\x2c\xb9\xec\xcf\
\xa6\x80\x0b\x97\xfd\xd9\x85\x39\x7f\x36\x03\x9c\x9d\xf3\x67\x67\
\xbb\xfc\xd9\xf9\xd9\x7f\x9e\xfb\x3a\x3d\xe7\xf7\x97\xbf\xbf\x24\
\xa9\xa1\x7e\x2b\x3a\x80\x24\x69\x5e\x13\xc0\xaa\xd9\xd7\x0a\x60\
\xf5\xec\xaf\x73\xff\x6c\x15\x17\x0b\xc6\xe5\xc5\x60\x94\x4c\x71\
\xb1\x8c\x9c\x04\x8e\x93\x0a\xca\xc9\xcb\x5e\x9d\x3f\x9b\x89\x89\
\x29\x49\x5a\x8c\x05\x44\x92\x62\x4c\x00\x6b\x48\xa5\x62\xf5\x9c\
\xdf\xcf\xfd\xb3\xa5\x61\xe9\x9a\xef\x04\xa9\xa4\x1c\x07\xde\xef\
\xf2\x7b\x4b\x8a\x24\x05\xb1\x80\x48\x52\x3d\xc6\x48\x25\x62\xdd\
\x9c\xd7\x7a\x52\xc1\x58\x03\x2c\x8b\x8b\x26\x60\x9a\x8b\x85\xe4\
\xbd\x2e\xaf\xf3\x71\xd1\x24\x69\xb4\x59\x40\x24\x69\x38\xab\x80\
\x0d\xa4\x72\xb1\x9e\x54\x34\xd6\xcc\xfe\x3a\xca\x53\xa2\x46\xdd\
\x09\x52\x39\x39\x42\x2a\x24\x47\x80\xc3\xb3\xbf\x77\xe4\x44\x92\
\x86\x60\x01\x91\xa4\xde\xac\x26\x15\x8c\x0d\x73\x7e\xdd\x00\x2c\
\x8f\x0c\xa5\xec\xa6\x49\x25\xe4\x30\x17\x4b\xc9\x91\xd9\x97\x0b\
\xe5\x25\xa9\x07\x16\x10\x49\xba\xd4\x18\xa9\x58\x6c\x02\x36\xce\
\xbe\x2c\x1a\x5a\x4c\xa7\x98\xbc\x75\xd9\xeb\x64\x64\x28\x49\x2a\
\x91\x05\x44\x52\x9b\x4d\x70\x69\xd9\xd8\x34\xfb\xcf\x4e\x9d\x52\
\x55\x4e\x71\xb1\x8c\xbc\x09\x3c\x1f\x1b\x47\x92\xe2\x59\x40\x24\
\xb5\x45\x67\x64\x63\xf3\x9c\xd7\xb5\xa1\x89\xd4\x36\x6f\x00\xff\
\x57\x74\x08\x49\x8a\x36\x1e\x1d\x40\x92\x6a\xb2\x8a\x4b\xcb\xc6\
\x26\xdc\x79\x4a\xb1\xde\x8a\x0e\x20\x49\x25\xb0\x80\x48\x1a\x15\
\xeb\x81\x2d\xc0\x4d\xb3\xbf\x5e\x1d\x19\x46\xea\xc2\x02\x22\x49\
\x58\x40\x24\x35\xd7\x06\x60\x2b\x17\x0b\xc7\xca\xd0\x34\xd2\xe2\
\x2c\x20\x92\x84\x05\x44\x52\x73\x6c\x24\x15\x8e\x2d\xa4\xd2\xe1\
\xae\x54\x6a\x1a\x0b\x88\x24\x61\x01\x91\x54\xae\x55\xc0\xad\xa4\
\xd2\xb1\x15\xb8\x2a\x36\x8e\x34\x94\x77\xf1\x74\x75\x49\x02\x2c\
\x20\x92\xca\x31\x4e\x1a\xdd\xe8\x94\x8e\xeb\x42\xd3\x48\xd5\x8a\
\x1c\xfd\xd8\x40\x3a\x8f\xe4\x74\x60\x06\x49\xfa\x80\x05\x44\x52\
\xa4\x75\xc0\x36\x60\x3b\x69\x5a\x95\xe7\x6f\x68\x54\x45\x16\x90\
\x2f\x02\x37\x90\xb6\x01\xde\x0f\xec\x23\x9d\x49\x32\x13\x98\x49\
\x52\x8b\x59\x40\x24\xe5\x34\x46\x2a\x1a\xdb\x66\x5f\x9e\xc3\xa1\
\xb6\x88\x2a\x20\x93\xa4\xf5\x53\x90\x4a\xc8\x0d\xc0\xef\x02\x67\
\x48\x45\x64\xff\xec\xcb\xd1\x11\x49\xd9\x58\x40\x24\xd5\x6d\x92\
\x34\xad\x6a\xfb\xec\xaf\x2e\x1e\x57\x1b\x45\x15\x90\x2d\x74\x1f\
\x59\x5c\x0e\x7c\x74\xf6\x05\x69\x74\xe4\x45\x52\x29\x71\xb1\xbc\
\xa4\x5a\x59\x40\x24\xd5\x61\x05\x70\xc7\xec\x6b\x0b\x4e\xad\x52\
\xbb\x9d\x01\x8e\x07\x5d\xfb\xd6\x1e\x3f\xae\x33\x3a\xf2\x49\xe0\
\x28\x17\xcb\xc8\x41\x9c\xaa\x25\xa9\x62\x16\x10\x49\x55\x59\x4d\
\x1a\xe5\xb8\x03\xd7\x73\x48\x73\x45\x8e\x28\x6c\x1d\xe0\xef\xac\
\x05\x3e\x3e\xfb\x3a\x43\x9a\xa2\xd5\x29\x24\xee\xe4\x25\x69\x68\
\x16\x10\x49\xc3\x58\xc3\xc5\x91\x8e\x1b\x83\xb3\x48\xa5\x8a\x2a\
\x20\x6b\x80\x6b\x86\x7c\x8f\xe5\xc0\x47\x66\x5f\xd3\xc0\x01\xe0\
\x79\x52\x21\x39\x3b\xe4\x7b\x4b\x6a\x29\x0b\x88\xa4\x7e\xad\x02\
\xee\x02\xee\x26\x4d\xd9\x90\xb4\xb0\xa8\x02\xd2\xeb\xf4\xab\x5e\
\x2d\x01\x6e\x9b\x7d\x4d\x93\x46\x46\xf6\x62\x19\x91\xd4\x27\x0b\
\x88\xa4\x5e\x4c\x90\x46\x39\xee\xc6\x35\x1d\x52\xbf\x22\x17\xa0\
\xd7\x65\x09\x70\xfb\xec\x6b\x8a\x34\x32\x62\x19\x91\xd4\x13\x0b\
\x88\xa4\xf9\x8c\x93\x9e\xa0\xde\x4d\xda\x32\x77\x69\x6c\x1c\xa9\
\x91\xa6\x81\xc3\x41\xd7\x1e\x64\xfd\xc7\x20\x96\x72\x69\x19\xd9\
\x0f\x3c\x3b\xfb\xeb\x85\x4c\x19\x24\x35\x88\x05\x44\xd2\xe5\x36\
\x03\x3b\x48\xd3\xac\xdc\x32\x57\x1a\xce\x61\x62\x76\x91\xda\x04\
\xac\x0c\xb8\xee\x52\xe0\xc3\xb3\xaf\x33\xc0\x9e\xd9\xd7\xeb\x01\
\x59\x24\x15\xca\x02\x22\x09\xd2\xba\x8e\x1d\xb3\x2f\x0f\x07\x94\
\xaa\x13\x35\xfd\x2a\xd7\xe8\xc7\x42\x96\x03\xbf\x3d\xfb\x7a\x87\
\x54\x44\x9e\x25\x6e\x4b\x62\x49\x85\xb0\x80\x48\xed\x35\x46\x9a\
\x5a\xb5\x63\xf6\x57\xd7\x75\x48\xd5\x6b\x73\x01\x99\xeb\x5a\xd2\
\x19\x23\x9f\x04\x5e\x06\xfe\x06\xa7\x67\x49\xad\x65\x01\x91\xda\
\x67\x03\xb0\x93\xb4\xb6\x23\x62\x8a\x86\xd4\x26\x11\x05\x64\x9c\
\x74\x16\x4f\xa9\xc6\xb0\x7c\x48\xad\x66\x01\x91\xda\x61\x9c\x74\
\x48\xe0\xbd\xc0\x87\x82\xb3\x48\x6d\x12\x51\x40\x6e\xa2\xec\x4d\
\x23\x9e\x8d\x0e\x20\x29\x96\x05\x44\x1a\x6d\x6b\x80\x7b\x48\x23\
\x1e\x8e\x76\x48\x79\x1d\x23\x66\x4b\xda\xaa\xcf\xff\xa8\xd2\x39\
\xd2\x41\x86\x92\x5a\xcc\x02\x22\x8d\xa6\x6d\xa4\xe2\x71\x7b\x74\
\x10\xa9\xc5\x5c\xff\x71\xa5\x17\x81\xf3\xd1\x21\x24\xc5\xb2\x80\
\x48\xa3\x63\x05\x69\xa4\xe3\x1e\x60\x6d\x70\x16\x49\x31\x05\x64\
\x05\x70\x7d\xc0\x75\x7b\xf5\x4c\x74\x00\x49\xf1\x2c\x20\x52\xf3\
\xad\x07\x76\x91\x76\xb3\x2a\x79\xde\xb7\xd4\x36\x11\x05\xa4\xe4\
\xd1\x8f\xa3\xc0\xc1\xe8\x10\x92\xe2\x59\x40\xa4\xe6\xba\x15\xd8\
\x0d\xdc\x12\x1d\x44\x52\x57\x16\x90\x4b\xed\x89\x0e\x20\xa9\x0c\
\x16\x10\xa9\x59\x26\x48\xdb\xe7\xee\xc2\x03\x03\xa5\x92\x9d\x03\
\xde\x0b\xb8\x6e\xc9\x0b\xd0\xdd\xfd\x4a\x12\x60\x01\x91\x9a\x62\
\x15\xa9\x74\xdc\x43\x3a\x5d\x58\x52\xd9\x22\x46\x3f\xd6\x03\x57\
\x07\x5c\xb7\x17\xaf\x10\x53\xc8\x24\x15\xc8\x02\x22\x95\x6d\x1d\
\x69\x9a\x95\xeb\x3b\xa4\x66\x71\xfa\xd5\xa5\x1c\xfd\x90\xf4\x01\
\x0b\x88\x54\xa6\x8d\xc0\x7d\xc0\x1d\xc0\x92\xe0\x2c\x92\xfa\x17\
\x51\x40\x4a\x9d\x7e\x35\x85\x67\x7f\x48\x9a\xc3\x02\x22\x95\x65\
\x0b\xa9\x78\xdc\x16\x9c\x43\xd2\x70\x72\x17\x90\x31\xd2\x09\xe8\
\x25\xda\x4b\xec\xd9\x1f\xab\x80\xed\xa4\x51\x98\x0b\x81\x39\x24\
\xcd\xb2\x80\x48\x65\xd8\x06\x7c\x02\xb8\x31\x3a\x88\xa4\xa1\x4d\
\x03\x87\x33\x5f\x73\x13\xe5\xae\x0f\x8b\x9e\x7e\xb5\x1b\xf8\x1d\
\xd2\xf7\xd8\x27\x48\x67\x91\x58\x44\xa4\x40\x16\x10\x29\xd6\x76\
\xe0\x7e\xca\x3e\x38\x4c\x52\x7f\xde\x23\xff\x0d\x6e\xa9\xd3\xaf\
\x8e\x01\x07\x02\xaf\x3f\x49\xda\xbc\x03\xd2\x02\xfd\x7f\x47\x2a\
\x22\x4f\x02\x4f\xe3\xa9\xec\x52\x08\x0b\x88\x14\xc3\xe2\x21\x8d\
\x2e\x17\xa0\x5f\x14\x3d\xfa\x71\x2f\xb0\xec\xb2\x3f\xbb\x0a\xf8\
\x0c\x69\xba\xeb\x93\xc0\x4f\xb1\x88\x48\x59\x59\x40\xa4\xbc\x2c\
\x1e\xd2\xe8\xcb\x5d\x40\x26\x80\xcd\x99\xaf\xd9\xab\xc8\x02\x32\
\x4e\xda\xbe\x7c\x3e\x2b\x81\x4f\x71\xb1\x88\x3c\x85\x45\x44\xca\
\xc2\x02\x22\xe5\x71\x07\xa9\x78\x5c\x17\x9c\x43\x52\xfd\xde\xcc\
\x7c\xbd\x2d\x94\xb9\x5b\x5e\xf4\xd9\x1f\x3b\x49\x25\x63\x31\xcb\
\x81\x4f\x92\xca\xca\x13\xa4\x11\x11\xd7\x88\x48\x35\xb2\x80\x48\
\xf5\xba\x15\x78\x10\x47\x3c\xa4\x36\xc9\xbd\x00\xdd\xe9\x57\x57\
\x1a\x23\x2d\x3e\xef\xc7\x4a\xd2\xd4\xac\x5d\xc0\x0f\x49\x8b\xd5\
\x67\x2a\xce\x25\x09\x0b\x88\x54\x97\xcd\xa4\xe2\x71\x73\x74\x10\
\x49\x59\x9d\x00\x4e\x66\xbe\x66\x89\x0b\xd0\xa3\xcf\xfe\xb8\x0b\
\x58\x3b\xe0\xdf\xbd\x1a\xf8\x3c\x69\x6a\xd6\x63\xc0\x9e\xaa\x42\
\x49\x4a\x2c\x20\x52\xb5\x36\x00\x0f\x00\x1f\x8e\x0e\x22\x29\x44\
\xee\xf5\x1f\xab\x81\x6b\x33\x5f\xb3\x17\xd1\x67\x7f\xdc\x57\xc1\
\x7b\xac\x05\x7e\x7f\xf6\xbd\x1e\x27\xfd\x7f\x92\x54\x01\x0b\x88\
\x54\x8d\x35\xa4\x35\x1e\x1f\x0b\xce\x21\x29\x56\xee\x02\xe2\xf4\
\xab\x2b\x6d\xa3\xda\xf5\x76\xd7\x01\x7f\x04\xbc\x06\x3c\x0a\x1c\
\xac\xf0\xbd\xa5\x56\xb2\x80\x48\xc3\x59\x41\x2a\x1e\xf7\x50\xe6\
\x22\x50\x49\x79\x59\x40\xe2\xcf\xfe\xa8\x62\xf4\xa3\x9b\x1b\x81\
\xff\x19\xf8\x15\xa9\x88\x1c\xa9\xe9\x3a\xd2\xc8\xb3\x80\x48\x83\
\x19\x23\x2d\x54\xfc\x04\xe5\x9e\x3e\x2c\x29\x3f\x0b\x48\xec\xe8\
\xc7\x4d\xc0\x87\x6a\xbe\xc6\x87\x49\xa3\x2c\x4f\x93\xa6\x66\x9d\
\xae\xf9\x7a\xd2\xc8\xb1\x80\x48\xfd\xdb\x0e\x7c\x1a\xb8\x26\x3a\
\x88\xa4\xa2\x4c\x91\x77\xdb\xd9\x0d\xa4\x43\xf5\x4a\x13\xb9\x68\
\xbb\xae\xd1\x8f\xcb\x2d\x01\x7e\x1b\xd8\x41\xda\xba\xf7\x49\xdc\
\xba\x57\xea\x99\x05\x44\xea\xdd\x66\xe0\xb3\xa4\x61\x78\x49\xba\
\xdc\x61\xf2\x6e\xdb\x5a\xe2\xe8\xc7\x6b\xc4\x4d\x4d\xda\x00\xdc\
\x9e\xf9\x9a\xcb\x48\x67\x88\xdc\x43\x1a\x0d\x79\x26\xf3\xf5\xa5\
\x46\xb2\x80\x48\x8b\x5b\x4d\x1a\xf1\xf8\x48\x74\x10\x49\x45\xcb\
\x7d\x00\x61\x89\xdb\xef\x46\x4e\xbf\xca\x35\xfa\xd1\xcd\xd5\xc0\
\xef\x91\x0e\x3f\x7c\x04\x78\x3d\x30\x8b\x54\x3c\x0b\x88\x34\xbf\
\x71\xd2\x1a\x8f\xdd\xc0\xd2\xe0\x2c\x92\xca\x97\xf3\x00\xc2\x71\
\xd2\x7a\x87\x92\x44\x9e\xfd\xb1\x86\x74\xf6\x47\xb4\x1b\x81\xff\
\x15\xf8\x39\xe9\x0c\x91\xdc\x67\xc2\x48\x8d\x60\x01\x91\xba\xdb\
\x0e\x7c\x8e\xf4\x54\x4b\x92\x7a\x91\x73\x04\x64\x33\x69\xfa\x4f\
\x49\x5e\x04\xce\x06\x5d\x7b\x37\x65\xed\x44\xf8\xaf\x48\x85\xe8\
\x71\xe0\x29\x3c\x51\x5d\xba\x84\x05\x44\xba\xd4\x7a\x52\xf1\xb8\
\x25\x3a\x88\xa4\xc6\xc9\x39\x02\x52\xe2\xfa\x8f\xa8\xe9\x57\x2b\
\x48\x53\x9f\x4a\xb3\x0c\xf8\x0c\x69\x7d\xc8\xc3\xc0\xfe\xd8\x38\
\x52\x39\x2c\x20\x52\x32\x41\x3a\xcf\x63\x17\x65\x3d\x45\x93\xd4\
\x0c\xef\x92\xf7\xe4\xef\xd2\xd6\x7f\x1c\x23\xee\x06\x7b\x17\x65\
\x4f\x93\xbd\x06\xf8\x33\xe0\x17\xc0\x77\x82\xb3\x48\x45\xb0\x80\
\x48\x70\x37\x69\x91\x79\x89\xdb\x59\x4a\x6a\x86\x9c\xe7\x7f\x4c\
\x02\x1b\x33\x5e\xaf\x17\x51\x5b\xef\x4e\x00\xf7\x06\x5d\xbb\x5f\
\x07\xa3\x03\x48\xa5\xb0\x80\xa8\xcd\xd6\x03\x5f\xa0\xfe\x43\xab\
\x24\x8d\xbe\x9c\x05\x64\x2b\xe5\x8d\xd4\x46\x4d\xbf\xba\x87\x66\
\x1c\x06\xfb\x1a\xb1\x3b\x84\x49\x45\xb1\x80\xa8\x8d\xc6\x49\xdb\
\x35\x7e\x82\xf2\x7e\x88\x4b\x6a\xa6\xdc\x05\xa4\x24\x51\x67\x7f\
\x8c\x91\x16\x9f\x97\x6e\x1a\xf8\x5e\x74\x08\xa9\x24\x16\x10\xb5\
\xcd\x56\xe0\x21\x3c\xc5\x5c\x52\xb5\xda\x5c\x40\xa2\x9e\xec\xef\
\xa0\x19\x53\x67\x9f\x21\xef\xe7\x87\x54\x3c\x0b\x88\xda\x62\x05\
\x69\x9d\xc7\xc7\xa2\x83\x48\x1a\x39\xa7\x80\xe3\x99\xae\xb5\x86\
\xb2\x1e\xa0\x44\x9e\xfd\x11\x79\xf0\x60\xaf\x4e\x91\xce\x03\x91\
\x34\x87\x05\x44\x6d\xb0\x83\x54\x3e\x56\x46\x07\x91\x34\x92\x72\
\x6e\xbf\x5b\xda\xee\x57\x51\x67\x7f\xdc\x41\x59\x45\x6c\x3e\x8f\
\x01\xa7\xa3\x43\x48\xa5\xb1\x80\x68\x94\xad\x01\xbe\x08\xdc\x1c\
\x1d\x44\xd2\x48\xcb\x79\x00\xe1\x96\x8c\xd7\xea\x45\xd4\xf4\xab\
\x26\x8c\x7e\x1c\x22\x4d\xbf\x92\x74\x19\x0b\x88\x46\xd5\x2e\xe0\
\x01\xca\x3b\x29\x58\xd2\xe8\x69\xeb\x01\x84\xc7\x80\x03\x01\xd7\
\xdd\x0a\xdc\x10\x70\xdd\x7e\x7d\x0f\x4f\x40\x97\xba\xb2\x80\x68\
\xd4\xac\x23\x8d\x7a\xb8\xb5\xae\xa4\x5c\x72\x2d\x30\xde\x44\x59\
\x53\x49\xf7\x10\x73\x83\xdd\x84\xd1\x8f\x5f\x00\xaf\x47\x87\x90\
\x4a\x65\x01\xd1\xa8\x18\xe3\xe2\xa8\x47\xc9\x27\xe2\x4a\x1a\x2d\
\x53\xe4\x1b\x01\x29\x69\xf4\x03\x62\xa6\x5f\x6d\x02\x6e\x09\xb8\
\x6e\x3f\xce\x01\x8f\x46\x87\x90\x4a\x66\x01\xd1\x28\x58\x4f\x1a\
\xf5\xb8\x31\x3a\x88\xa4\xd6\x39\x42\xbe\x51\x80\x92\x0a\x48\xd4\
\xd9\x1f\x4d\x18\xfd\x78\x1c\x38\x19\x1d\x42\x2a\x99\x05\x44\x4d\
\xd6\x39\x84\xea\x7e\x1c\xf5\x90\x14\x23\xd7\xf4\xab\x71\xe0\xa6\
\x4c\xd7\xea\x45\xc4\xe8\xc7\x7a\xe0\xce\x80\xeb\xf6\xe3\x1d\xe0\
\xa9\xe8\x10\x52\xe9\x2c\x20\x6a\xaa\x35\xc0\x97\x70\xad\x87\xa4\
\x58\xb9\x0a\xc8\x16\xca\x79\xd0\x12\x75\xf6\x47\x13\x4e\x3d\x77\
\xe1\xb9\xd4\x03\x0b\x88\x9a\x68\x27\xf0\x59\xdc\xe1\x4a\x52\xbc\
\x5c\x05\xa4\xa4\xe9\x57\x11\x67\x7f\xac\x26\x9d\xe9\x54\xb2\x17\
\x80\x83\xd1\x21\xa4\x26\xb0\x80\xa8\x49\x56\x01\x5f\x00\x6e\x8f\
\x0e\x22\x49\xb3\xda\x58\x40\x22\xa6\x5f\xed\x02\x96\x04\x5c\xb7\
\x57\x53\xc0\x23\xd1\x21\xa4\xa6\xb0\x80\xa8\x29\xb6\x93\xca\x47\
\x49\x5b\x50\x4a\x6a\xb7\xa3\xe4\x19\x09\x58\x01\x5c\x9f\xe1\x3a\
\xbd\x38\x41\xfe\xb3\x3f\x26\x81\x7b\x32\x5f\xb3\x5f\x3f\x04\x8e\
\x47\x87\x90\x9a\xc2\x02\xa2\xd2\x4d\x00\x9f\x03\x3e\x16\x1d\x44\
\x92\x2e\xd3\xc6\xed\x77\x23\xce\xfe\xb8\x97\xb2\xa7\xdc\xbe\x0b\
\x3c\x19\x1d\x62\xd6\x16\xd2\x03\xbb\x47\x81\x0b\xb1\x51\xa4\xf9\
\x59\x40\x54\xb2\x4d\xc0\x1f\x02\x6b\xa3\x83\x48\x52\x17\x6f\x66\
\xba\x4e\x49\x05\x24\xf7\xf4\xab\x71\xd2\xf4\xab\x92\x3d\x42\x19\
\x37\xfb\x93\xa4\x2d\xe9\xd7\x92\x8a\xc8\xb7\x88\xd9\x2a\x59\x5a\
\xd4\x58\x74\x00\x69\x1e\xf7\x01\xff\x09\xcb\x87\xa4\x72\xe5\x5a\
\xff\x71\x6b\xa6\xeb\x2c\xe6\x0d\xf2\x8d\xfa\x74\xec\xa4\xec\xa9\
\xb7\xbf\x06\xf6\x45\x87\x98\xf5\x39\x2e\xfe\xcc\xbc\x1e\xf8\xdf\
\x28\x7f\xe1\xbe\x5a\xca\x11\x10\x95\x66\x15\x69\x7b\xdd\xd2\x4f\
\xba\x95\xa4\x1c\x05\x64\x3d\x70\x75\x86\xeb\xf4\x22\xf7\xe8\xc7\
\x18\x65\x1f\x3c\x58\xd2\xc2\xf3\xbb\x80\x8f\x5e\xf6\x67\xcb\x80\
\x7f\x4f\x2a\xb0\xdf\x05\xce\xe7\x0e\x25\xcd\xc7\x02\xa2\x92\x6c\
\x25\x95\x8f\xab\xa2\x83\x48\xd2\x22\xce\x01\xef\x67\xb8\x4e\x29\
\xd3\xaf\xa6\x48\xeb\x3f\x72\xba\x8b\x72\xca\x57\x37\x4f\x01\xef\
\x45\x87\x20\x6d\x51\xfc\xd0\x02\xff\xfb\x47\x80\xcd\xc0\x37\xc9\
\x37\x6d\x50\x5a\x90\x53\xb0\x54\x82\x31\xe0\x41\xe0\xcf\xb1\x7c\
\x48\x6a\x86\xb6\x4d\xbf\xda\x47\xfe\xb3\x3f\x4a\x1e\xfd\x38\x06\
\x3c\x1e\x1d\x62\xd6\x97\x80\xe5\x8b\x7c\xcc\x5a\xd2\xb4\xe6\x92\
\xff\x9d\xaa\x45\x1c\x01\x51\xb4\x35\xa4\x85\xe6\x37\x44\x07\x91\
\xa4\x3e\xe4\x28\x20\x63\xc0\x4d\x19\xae\xd3\x8b\xdc\xd3\xaf\xb6\
\x01\xd7\x65\xbe\x66\x3f\x4a\x59\x78\xbe\x1b\xb8\xb9\xc7\x8f\x5d\
\x02\x7c\x8a\xf4\x39\xf5\x6d\xf2\x17\x4a\xe9\x03\x8e\x80\x28\xd2\
\x36\xe0\x7f\xc7\xf2\x21\xa9\x79\x72\x14\x90\x4d\x2c\xfe\x64\x3b\
\x87\x13\xc0\xfe\xcc\xd7\xfc\x44\xe6\xeb\xf5\xe3\x65\x60\x6f\x74\
\x08\x60\x03\xf0\xc0\x00\x7f\xef\x76\xd2\xcf\xde\x8d\xd5\xc6\x91\
\x7a\x67\x01\x51\x84\xce\x94\xab\x3f\xa1\x8c\x1f\xae\x92\xd4\xaf\
\x1c\x05\xa4\x94\xe9\x57\xb9\xcf\xfe\xb8\x09\xb8\x31\xe3\xf5\xfa\
\x31\x0d\x3c\x1c\x1d\x82\x34\x83\xe5\x0f\x80\xa5\x03\xfe\xfd\xce\
\x94\xac\x9d\x95\x25\x92\xfa\xe0\x14\x2c\xe5\xb6\x8a\xf4\x4d\xb3\
\xd7\x21\x63\x49\x2a\xcd\x34\x79\xb6\xa3\x2d\x65\x01\x7a\xee\xe9\
\x57\x25\x8f\x7e\xfc\x94\xfc\x5b\x11\x77\xf3\x00\xc3\x4f\x51\x5b\
\x0a\xfc\x1e\xa9\xf0\x7d\x8f\x32\xa6\x94\xa9\x25\x2c\x20\xca\xe9\
\x26\xd2\x7a\x0f\x17\x9a\x4b\x6a\xb2\x23\xd4\x7f\xb3\x36\x41\xda\
\xb9\x28\x5a\xee\xb3\x3f\x36\x02\xb7\x65\xbc\x5e\x3f\x4e\x00\x8f\
\x45\x87\x20\x1d\x32\xf8\x3b\x15\xbe\xdf\xc7\x48\xff\xde\xbf\x49\
\x19\xbb\x7a\xa9\x05\x9c\x82\xa5\x5c\x76\x03\x7f\x81\xe5\x43\x52\
\xf3\xe5\x98\x7e\xb5\x85\xb4\x68\x38\x5a\xee\xd1\x8f\xdd\x99\xaf\
\xd7\x8f\x47\x89\x3f\x4b\x63\x92\xb4\xeb\x55\xd5\x3a\x07\x17\x6e\
\xab\xe1\xbd\xa5\x2b\x58\x40\x54\xb7\x09\xe0\xcb\xc0\x67\x28\xe3\
\x87\xa9\x24\x0d\x2b\x47\x01\x29\x61\xfa\xd5\x34\xf0\x7c\xc6\xeb\
\xad\x21\x9d\xfd\x51\xa2\xd7\xc8\x5f\xc6\xba\xf9\x1c\xf5\x9d\x8d\
\xb2\x9c\xb4\x36\xb3\xe4\x29\x70\x1a\x11\x4e\xc1\x52\x9d\xd6\x01\
\x5f\x01\xae\x8d\x0e\x22\x49\x15\x6a\xcb\x02\xf4\x17\x81\xd3\x19\
\xaf\x77\x1f\xe5\x3e\xa8\x2a\x61\xe1\x79\xb7\xd3\xce\xeb\xf0\x49\
\xd2\x94\xac\xef\x10\x3f\xe2\xa3\x11\x65\x01\x51\x5d\x6e\x25\x2d\
\x36\x77\x97\x2b\x49\xa3\xa6\xee\x02\xb2\x9a\x32\x1e\xdc\xe4\x7c\
\xe2\xbf\x0a\xd8\x91\xf1\x7a\xfd\xf8\x19\xf1\x27\x88\x2f\x76\xda\
\x79\xd5\xee\x04\xd6\x03\x5f\x07\xde\xcf\x78\x5d\xb5\x84\x53\xb0\
\x54\x87\xfb\x48\x23\x1f\x96\x0f\x49\xa3\xe6\x04\xf5\x8f\x0a\x94\
\x30\xfd\xea\x14\x79\xcf\xfe\xd8\xc5\xe0\x5b\xca\xd6\xe9\x14\x65\
\x2c\x3c\xef\xe5\xb4\xf3\xaa\x5d\x47\x5a\x17\x52\xc2\xe7\xa3\x46\
\x8c\x05\x44\x55\x9a\x20\x8d\x7a\x7c\x8a\x72\x87\xd1\x25\x69\x18\
\x6d\x59\xff\xf1\x2c\xf9\xce\xfe\x98\x00\xee\xc9\x74\xad\x7e\x3d\
\x46\xde\x69\x68\xdd\xf4\x73\xda\x79\xd5\x56\x02\x7f\x4a\x2a\x88\
\x52\x65\x9c\x82\xa5\xaa\xac\x21\x2d\x36\xbf\x3e\x3a\x88\x24\xd5\
\xa8\x4d\x05\x24\x97\x7b\x29\x73\xc4\xfc\x10\xf0\x4c\x70\x86\x41\
\x4f\x3b\xaf\xd2\x12\xe0\xdf\x92\xd6\x85\x78\x5e\x88\x2a\x61\x01\
\x51\x15\xb6\x90\xce\xf7\x58\x19\x9c\x43\x92\xea\x56\x77\x01\xd9\
\x40\xfc\x76\xe5\x87\xc8\x77\xf6\xc7\x38\xe5\x3e\x5d\x7f\x98\xbc\
\x27\xc0\x5f\x6e\xd8\xd3\xce\xab\xf6\x31\xd2\xe6\x32\xdf\x20\x7e\
\x54\x48\x0d\xe7\x14\x2c\x0d\x6b\x27\xf0\x1f\xb1\x7c\x48\x6a\x87\
\xba\x0b\x48\x09\xbb\x5f\xe5\x7c\xea\xbf\x83\xf8\xc2\xd5\xcd\x2f\
\x80\x57\x83\x33\x54\x71\xda\x79\xd5\x3e\x04\xfc\x27\xd2\x02\x75\
\x69\x60\x8e\x80\x68\x18\x9f\xa6\xda\xd3\x58\x25\x95\xe1\x0c\xe9\
\xc9\xef\xe5\x5b\x70\x5e\xe8\xf2\x67\x1d\xe3\xa4\xb9\xfc\x73\x4d\
\x90\x1e\x74\x95\x38\xbd\x66\x10\xe7\xa8\xff\xa4\xe8\xe8\xe9\x57\
\x39\xcf\xfe\x18\xa3\xcc\x83\x07\xcf\x91\x0e\x1d\x8c\xb4\x85\x72\
\x7f\xbe\x5e\x43\x2a\x21\xdf\x04\x0e\x04\x67\x51\x43\x59\x40\x34\
\x88\x09\xd2\x8e\x1c\x1f\x8e\x0e\x22\xe9\x0a\xa7\x48\xd3\x23\x4e\
\x03\x27\x81\xb3\x5d\x5e\xa7\x49\x45\xe2\xec\xec\xaf\x17\xb8\x58\
\x2e\xea\x9c\x72\x32\x49\xba\xe9\x9c\x98\x7d\x4d\xce\xfe\xba\x62\
\xce\x3f\x77\x5e\x2b\x48\x5b\xb3\xae\x98\x7d\x95\x30\xca\x7a\x98\
\x7a\xff\xfd\x8c\x93\x6e\x3c\x23\xed\x23\xdf\xf4\x9a\x3b\x48\x37\
\xb3\xa5\x79\x9c\xf4\xb5\x13\xa5\xae\xd3\xce\xab\xb4\x9c\xb4\x38\
\xfd\x61\xe0\xe9\xe0\x2c\x6a\x20\x0b\x88\xfa\xb5\x9a\xb4\xc5\xae\
\x8b\xcd\xa5\xbc\xce\x00\xc7\x49\x7b\xf2\x1f\x27\xdd\x20\xbd\x3f\
\xfb\xeb\x49\x2e\x16\x8e\xc8\x39\xeb\x8b\x39\x3b\xfb\xeb\x20\x37\
\xb8\x63\x5c\x2c\x23\xab\x48\xdf\x8b\xd6\x74\xf9\x7d\x9d\x45\xa5\
\xee\xe9\x57\x9b\x89\x9f\xef\x9f\x73\xf1\xf9\x7d\x19\xaf\xd5\xab\
\x77\x80\xa7\x82\x33\x3c\x44\x7d\xa7\x9d\x57\x69\x09\xf0\x79\xd2\
\xba\xa5\x47\x28\xfb\x7b\x8f\x0a\x63\x01\x51\x3f\x36\x91\xca\x47\
\x89\xf3\x75\xa5\xa6\x9b\x26\x4d\xef\xb9\xfc\xd5\x29\x1c\x6d\x3f\
\x91\x78\x86\x8b\x65\x6b\xa1\x05\xd2\xe3\xa4\x32\xb2\x6e\xf6\x75\
\xf9\xef\x87\xb9\xc1\xaf\xbb\x80\x44\x4f\xbf\x3a\x45\x1a\x01\xc9\
\xe1\x56\xca\x7c\x90\xf5\x3d\x62\x6f\xa4\xef\x06\x3e\x12\x78\xfd\
\x41\xfc\x36\xe9\xdf\xd9\x23\xd1\x41\xd4\x1c\x16\x10\xf5\x6a\x3b\
\x69\x48\x78\x59\x74\x10\xa9\xe1\x4e\x91\x6e\xa0\x8f\xcc\xf9\xf5\
\x3d\x52\xc9\xf0\x09\xe2\xf0\x2e\x90\xfe\x9d\x1e\x99\xe7\x7f\x5f\
\x4d\x5a\x40\xbb\x61\xf6\xd7\xce\xef\x7b\x19\x39\x19\xf5\x05\xe8\
\x7b\xc8\xf7\x39\x58\xe2\xe8\xc7\x0b\xc0\xc1\xc0\xeb\xaf\x06\x3e\
\x17\x78\xfd\x41\x1d\x03\x9e\x8c\x0e\xa1\x66\xb1\x80\xa8\x17\xf7\
\x02\x9f\xc5\xc3\x05\xa5\x7e\x9c\x23\x15\x8c\x37\xb9\xb4\x70\xb8\
\x7d\x65\xac\xe3\xb3\xaf\xcb\x17\xcf\x4e\x92\x8a\xc8\x06\xd2\x79\
\x07\x9d\xd7\xdc\x11\x93\x3a\xb7\xa6\x9d\x9c\xbd\x5e\xa4\x5c\xd3\
\xaf\x36\x13\x77\xb0\xde\x7c\xa6\x88\x7f\x82\x1f\x71\xda\xf9\xb0\
\xa6\x48\x8b\xd1\x8f\x47\x07\x51\xb3\x58\x40\xb4\x18\x77\xba\x92\
\x16\x77\x8a\xf4\x74\xfc\xcd\xd9\x5f\xdf\x62\xfe\x27\xf0\x2a\xd3\
\x59\xd2\xb6\xab\x73\xb7\x5e\x1d\x23\x4d\xdb\xda\x34\xfb\x6b\x9d\
\xd3\xe0\xb6\x12\xfb\x90\xe7\x10\x79\x0e\x59\x84\x32\x47\x3f\x7e\
\x48\xec\x4d\x74\xe4\x69\xe7\xc3\xf8\x26\xf0\x7a\x74\x08\x35\x8f\
\x05\x44\xf3\x19\x03\xbe\x08\x7c\x34\x3a\x88\x54\x98\x29\xd2\x8d\
\xda\xeb\x73\x5e\xef\x87\x26\x52\x5d\x66\xb8\xb8\x16\xa7\x6e\xd1\
\xeb\x3f\x72\x8d\x7e\xac\xa7\xbc\x1d\x14\x8f\x12\x3b\x85\xa8\x84\
\xd3\xce\x07\xf1\x03\xf2\xad\x19\xd2\x88\xb1\x80\xa8\x9b\x09\xd2\
\x62\xf3\x26\x3e\x8d\x91\xaa\x76\x8c\x34\x2f\xbc\x53\x36\xde\xc2\
\xb5\x1a\xaa\x5e\x64\x01\x99\x26\xad\xff\xc8\xa1\xc4\xd1\x8f\x87\
\x49\x6b\x87\x22\x94\x76\xda\x79\xaf\x7e\x06\x3c\x11\x1d\x42\xcd\
\x65\x01\xd1\xe5\x56\x93\xf6\xf6\x2e\xed\xf4\x55\x29\x97\x77\x49\
\xd3\x70\x0e\xce\xfe\x9a\xe3\xe9\xb7\xda\x6d\x0d\xb1\xe7\x61\xe4\
\x3a\xfb\x63\x35\x69\x97\xa7\x92\xfc\x9a\xd8\xa7\xf8\x25\x9e\x76\
\xbe\x98\x97\x49\xa5\x4d\x1a\x98\x05\x44\x73\x6d\x20\x95\x8f\x26\
\xec\x3f\x2e\x55\xe5\x18\xb0\x9f\x54\x38\x0e\xe2\x62\x4a\xe5\x17\
\xbd\xfb\x55\xae\xe9\x57\xbb\x29\x6b\x33\x93\xe8\x85\xe7\x5b\x69\
\xde\x1a\xcb\x77\x80\x6f\xe0\x28\xb0\x86\x64\x01\x51\xc7\x66\x52\
\xf9\x68\xda\x0e\x1c\x52\xbf\xce\x91\x76\x40\xea\xbc\x5c\x2c\xae\
\x68\x91\xd3\xaf\x72\x9d\xfd\xb1\x02\xd8\x99\xe1\x3a\xfd\x78\x8a\
\xb8\x11\xce\x49\xd2\x3a\xcb\x26\x39\x05\x7c\x9d\x8b\x07\x8a\x4a\
\x03\xb3\x80\x08\xd2\x0f\xbf\x2f\xe3\x19\x1f\x1a\x5d\x87\x48\x37\
\x59\xfb\x49\xeb\x38\x7c\x7a\xa7\x92\x3c\x4e\xda\x41\x6d\x1b\xe9\
\x61\x50\xce\x51\x82\x5c\x67\x7f\xdc\x4b\x59\x3f\x63\x8e\x91\x76\
\xbe\x8a\xd2\x94\xd3\xce\x3b\xa6\x49\xe5\xc3\x29\xa9\xaa\x84\x05\
\x44\x77\x90\x16\xc0\x95\x34\x2c\x2e\x0d\x6b\x8a\x34\xba\xb1\x6f\
\xf6\xe5\xb4\x2a\x95\xec\xf0\xec\xeb\x09\xd2\x93\xf1\x5b\xe7\xbc\
\xae\xaa\xf9\xda\x39\xa6\x5f\x4d\x90\x0a\x48\x49\x1e\xa1\xde\x6d\
\x95\x17\xd2\xc4\xd3\xce\xbf\x83\xdb\xed\xaa\x42\x16\x90\x76\xdb\
\x49\x7a\x0a\x63\xf9\xd0\x28\x38\x05\xec\x25\x15\x8e\x03\xc4\xed\
\x6a\x23\x0d\xe3\x2c\xf0\xfc\xec\x0b\xd2\xe1\x84\xdb\x67\x5f\xd7\
\x57\x7c\xad\x5c\x67\x7f\xec\xa4\xb7\x93\xe6\x73\x79\x99\xf4\xbd\
\x22\xc2\x1a\x9a\x77\xda\xf9\x3f\x91\x6f\x97\x34\xb5\x84\x05\xa4\
\xbd\x76\x03\x9f\x89\x0e\x21\x0d\xe9\x18\xf0\x22\xe9\x66\xe2\x55\
\x9c\x5a\xa5\xd1\xd3\x39\xd8\xf2\x71\xd2\xcd\xeb\x36\x52\x19\xd9\
\xc2\xf0\x0f\x8f\x72\x8c\x7e\x8c\x91\x7e\xde\x94\x62\x9a\xd8\x1d\
\x9c\xbe\x48\xb3\xd6\x5a\x3e\x47\xec\x54\x35\x8d\x28\x0b\x48\x3b\
\x3d\x00\xfc\x6e\x74\x08\x69\x40\x47\x49\x85\x63\x2f\x4e\x09\x50\
\xbb\xbc\x0f\xfc\x74\xf6\x35\x49\x2a\x23\x77\x90\xa6\x6a\xf5\x7b\
\x8e\x44\xae\xb3\x3f\xee\xa6\xac\xb5\x0e\x3f\x25\x4d\x77\x8b\xd0\
\xb4\xd3\xce\x5f\x21\x4d\xbd\x92\x2a\x67\x01\x69\x9f\x87\x80\x7f\
\x1d\x1d\x42\xea\xd3\x09\x2e\x4e\x4b\xb1\x74\x48\x69\xaa\xd6\x9e\
\xd9\xd7\x04\x69\x54\xa4\x9f\x32\xb2\x9f\x3c\x67\x7f\x94\x74\xf0\
\xe0\x09\xe0\xb1\xa0\x6b\x6f\x00\x1e\x0c\xba\xf6\x20\xde\xc5\xed\
\x76\x55\x23\x0b\x48\x7b\x8c\x01\x5f\x00\x3e\x16\x1d\x44\xea\xd1\
\x19\xd2\xf4\xaa\x3d\xa4\xf3\x39\xfc\x41\x28\x75\x77\x9e\x2b\xcb\
\xc8\x5d\xa4\x32\x32\xdf\x34\xad\x67\x32\xe4\xda\x0e\x5c\x9b\xe1\
\x3a\xbd\x7a\x94\x98\x85\xe7\x9d\xd3\xce\x9b\xb2\xde\xf2\x0c\xf0\
\x37\xe4\x29\xa8\x6a\x29\x0b\x48\x3b\x8c\x91\xe6\x9d\x7e\x34\x3a\
\x88\xb4\x88\x69\xd2\x02\xf2\x67\x48\x8b\xc9\x5d\x48\x2e\xf5\x67\
\x6e\x19\x59\x41\x9a\x02\x75\x37\x70\xc3\x9c\x8f\xc9\x75\xf6\x47\
\x49\xa3\x1f\xaf\x91\xef\xc0\xc5\xcb\x3d\x48\x73\x4e\x3b\x9f\x26\
\x8d\x7c\xb8\xdd\xae\x6a\x65\x01\x19\x7d\x63\xc0\x97\x68\xde\x96\
\x7f\x6a\x97\x77\x48\x37\x07\xcf\x02\x27\x83\xb3\x48\xa3\xe2\x34\
\xe9\xb0\xbd\xa7\x48\x53\x80\xee\x06\x76\x90\xd6\x4f\xd5\x3d\xa2\
\xb8\x05\xb8\xb1\xe6\x6b\xf4\x23\x6a\xe1\xf9\x56\xe0\xe3\x41\xd7\
\x1e\xc4\x77\x49\x23\xce\x52\xad\x2c\x20\xa3\x6d\x8c\x34\xec\x7b\
\x67\x74\x10\xa9\x8b\x33\xa4\x35\x1d\xcf\xe2\xba\x0e\xa9\x6e\x87\
\x49\x53\x90\x1e\x23\xcf\xcf\xfe\x92\x46\x3f\x7e\x46\x3a\xe8\x31\
\xb7\xa6\x9d\x76\xfe\x23\xe2\x46\x89\xd4\x32\x16\x90\xd1\x35\x46\
\x3a\xdd\xfc\xf6\xe8\x20\xd2\x65\xde\x00\x9e\x26\x4d\x11\x71\x8a\
\x95\x94\xd7\x0c\xf5\xaf\x83\xd8\x08\xdc\x56\xf3\x35\x7a\x75\x8a\
\xb8\x85\xe7\x4d\x3a\xed\xfc\x05\x52\x41\x95\xb2\xb0\x80\x8c\xa6\
\x71\x52\xf9\x28\xe5\x07\x80\x74\x8e\x34\xda\xf1\x34\x31\x4f\x22\
\x25\xe5\x53\xd2\xe8\xc7\x63\xc4\x2c\xa6\x6e\xd2\x69\xe7\xaf\x01\
\xdf\x8e\x0e\xa1\x76\xb1\x80\x8c\x9e\x71\xe0\x2b\xc0\x2d\xd1\x41\
\x24\xd2\xda\x8e\xa7\x49\xc3\xfa\x67\x83\xb3\x48\xaa\xdf\x3a\xd2\
\x76\xc0\x25\x38\x44\x9e\xdd\xbe\x2e\xd7\xa4\xd3\xce\x8f\x01\x5f\
\xa7\xec\xd1\xe8\x9b\x48\x07\xcd\x6a\x84\x58\x40\x46\x4b\x67\xda\
\x95\xe5\x43\xd1\x5e\x02\x9e\x24\xed\x68\x25\xa9\x3d\x76\x53\xce\
\x76\xb3\x0f\x13\xb3\x7d\x77\x53\x4e\x3b\x6f\xc2\x76\xbb\x0f\x02\
\xff\x06\xf8\xef\xa4\x43\x24\x35\x22\x2c\x20\xa3\xa3\x53\x3e\x9c\
\x76\xa5\x28\xe7\x48\x23\x1d\x4f\xe1\x16\x8e\x52\x1b\xad\x22\xed\
\xb2\x55\x82\x5f\x10\xf3\xd4\xbc\x29\xa7\x9d\x4f\x03\xdf\x22\xee\
\x54\xf8\x5e\x74\xca\x07\xc0\xbf\x23\x8d\xd2\x44\x8c\x68\xa9\x06\
\x16\x90\xd1\xd0\xd9\xed\xca\x05\xe7\x8a\x70\x94\xf4\x64\xea\x19\
\x9c\x66\x25\xb5\xd9\x2e\x7a\x3b\x85\xbd\x6e\xe7\x88\x59\x50\xbd\
\x91\xe6\x9c\x76\xfe\x30\xb0\x3f\x3a\xc4\x02\xe6\x96\x8f\x8e\xdf\
\x23\x8d\x68\xb9\x53\xd7\x08\xb0\x80\x34\x5f\xe7\x9c\x0f\xb7\xda\
\x55\x6e\x6f\x03\x4f\x90\x16\x97\x7b\x4a\xb9\xd4\x6e\x93\xc0\x3d\
\xd1\x21\x66\x3d\x4e\xfe\xf3\x84\xc6\x49\x3f\x8b\x4b\x99\x7e\xb6\
\x90\x9f\x90\xd6\xe6\x95\xaa\x5b\xf9\xe8\xf8\x02\x69\x24\xe4\xf9\
\x7c\x71\x54\x07\x0b\x48\xb3\x75\x4e\x38\x6f\xca\x4e\x1b\x1a\x0d\
\xaf\x00\x3f\xa4\xec\xa7\x67\x92\xf2\xba\x87\x32\xd6\x3d\xbc\x43\
\x9a\x06\x9a\x5b\x53\x4e\x3b\xff\x35\xf0\x48\x74\x88\x05\x2c\x54\
\x3e\x20\x15\xbc\x2f\x91\x1e\x7a\xed\xcd\x92\x48\xb5\x68\x42\x53\
\xd7\xfc\x7e\x8f\x72\xe6\xdb\x6a\xf4\xfd\x0a\xf8\x0e\xf0\xcf\xb8\
\xc6\x43\xd2\xa5\x4e\x93\x46\x41\xae\x25\x3d\x1c\x8b\xf2\x2d\xf2\
\x7f\x7f\xda\x4a\x3a\xf3\xa3\x74\x6f\x93\x16\x9d\x97\xba\xe3\xd5\
\x62\xe5\xa3\x63\x0c\xf8\x30\xe9\xff\xcf\x91\x5a\x13\xa9\x36\x16\
\x90\xe6\x7a\x08\xf8\x57\xd1\x21\xd4\x0a\x2f\x00\xff\x95\x34\x6c\
\x7f\x3c\x38\x8b\xa4\x32\x9d\x26\x3d\xa4\xf8\x25\xb0\x0c\xd8\x40\
\xfe\x22\xf2\x02\x69\x5a\x68\x4e\x93\xc0\x9f\xcd\xfe\x5a\xb2\x63\
\xc0\x57\x29\x77\xc7\xab\x5e\xcb\x47\xc7\x18\x69\xbb\xe7\x37\xf0\
\x81\x58\x23\x59\x40\x9a\xe9\x41\xe0\xe3\xd1\x21\x34\xf2\x7e\x49\
\x7a\x9a\xf8\x53\xd2\x69\xc2\x92\xb4\x98\x33\xc0\x8b\xc0\x73\xc0\
\x04\x69\x5a\x52\x8e\x22\x32\x05\x7c\x8d\xb4\x00\x3d\xa7\x2f\x92\
\xce\xa9\x28\xd9\x14\xf0\xd7\x94\x3b\x5a\xd0\x6f\xf9\xe8\xe8\x94\
\x90\x83\xa4\x82\xa5\x06\xb1\x80\x34\xcf\x6e\xe0\x81\xe8\x10\x1a\
\x69\xcf\x91\x46\x3c\x9e\xc6\xe2\x21\x69\x30\x67\x49\xeb\x0d\x9e\
\x23\x8d\x0e\xd4\x3d\x22\xf2\x38\xb0\xaf\xc6\xf7\xef\xe6\x6e\xe0\
\xfe\xcc\xd7\xec\xd7\x34\xf0\x77\xa4\x9b\xf4\x12\x0d\x5a\x3e\x3a\
\x96\x90\xa6\x63\xed\xc3\x9f\x57\x8d\x62\x01\x69\x96\x9d\xa4\xbd\
\xb0\xa5\x3a\xbc\x40\xfa\x41\xf5\x73\xca\x1d\xa6\x97\xd4\x2c\x67\
\x49\x23\x22\x2f\x00\xab\x49\x6b\x44\xaa\x76\x14\xf8\x6f\xe4\xdd\
\x8d\x6f\x0d\xf0\x27\x94\xbf\x99\xcf\x3f\x91\xce\x44\x29\xd1\xb0\
\xe5\xa3\x63\x29\x69\x27\xd0\x5f\x91\x46\xe0\xd4\x00\x16\x90\xe6\
\xb8\x83\x34\xd4\x1b\xb9\xb8\x4f\xa3\xe9\x37\xa4\x11\x8f\xa7\xb0\
\x78\x48\xaa\xc7\x69\xd2\xd6\xa9\xfb\x80\xb5\xc0\xba\x0a\xdf\xfb\
\xdb\xa4\xdd\xaf\x72\x19\x03\xfe\x08\x58\x9f\xf1\x9a\x83\xf8\x19\
\x31\xe7\xa1\xf4\xa2\xaa\xf2\xd1\x31\x41\x1a\x09\x79\x81\xfc\xd3\
\xf0\x34\x00\x0b\x48\x33\x6c\x25\x9d\x72\xee\x7f\x2f\x55\xe9\x35\
\xd2\x0f\xee\x7f\x06\x4e\x04\x67\x91\xd4\x0e\x27\x48\xd3\xb2\x5e\
\x25\xad\x0f\xb9\x6a\xc8\xf7\xfb\x35\x69\xfa\x55\x4e\xbf\x43\xf9\
\x9b\xc0\xbc\x4c\x5a\xc3\xf7\x2f\xd1\x41\xba\xa8\xba\x7c\x74\x4c\
\x02\xb7\x91\x8a\xee\x54\x0d\xef\xaf\x0a\x79\x43\x5b\xbe\xcd\xa4\
\x1d\x36\x4a\x1f\xe6\x55\x73\xbc\x43\xda\x4e\xf7\x07\xc0\xfb\xc1\
\x59\x24\xb5\xd3\x51\xd2\x3a\xb3\x23\xa4\x9f\x73\x83\xec\x22\x35\
\x05\xfc\x2d\x79\xa7\xdd\x6c\x04\xfe\x80\xb2\x67\x23\xbc\x4d\x5a\
\x74\x5e\xe2\x4d\x78\x5d\xe5\xa3\x63\x25\x70\x33\x69\x24\xa4\xd4\
\xed\x86\x85\x05\xa4\x74\x1b\x80\x3f\x27\x6d\x69\x28\x0d\xeb\x04\
\xe9\x00\xaa\x7f\xa0\xdc\xdd\x50\x24\xb5\xcb\x61\xd2\x54\xa1\x0b\
\xc0\x0d\xf4\xf7\xb0\xed\x49\xd2\x8d\x66\x2e\xe3\xc0\x7f\x04\x56\
\x65\xbc\x66\xbf\x4e\x01\x7f\x45\x99\xa3\xda\x75\x97\x8f\x8e\xd5\
\xa4\x52\xbb\x87\x32\x47\x80\x84\x05\xa4\x64\xab\x81\xbf\xa0\xec\
\x6f\x74\x6a\x86\x29\xd2\xde\xf8\xff\x15\x78\x1d\xbf\x21\x4b\x2a\
\xcb\x0c\xf0\x0a\x69\xb1\xf4\x24\xb0\xa9\x87\xbf\x73\x8c\xf4\x3d\
\x6d\xba\xc6\x5c\x97\xfb\x34\x70\x7b\xc6\xeb\xf5\xab\xb3\xdd\xee\
\xdb\xd1\x41\xba\xc8\x55\x3e\x3a\xd6\xce\xbe\x7e\x95\xf1\x9a\xea\
\x83\x05\xa4\x4c\x93\xa4\x91\x8f\x6b\xa2\x83\xa8\xf1\x7e\x4e\xda\
\xd9\xea\x45\xf2\xfe\xa0\x96\xa4\x7e\x9d\x27\xad\xe9\x78\x91\xb4\
\xc0\x7b\xed\x02\x1f\xfb\xf7\xc0\x5b\x39\x42\xcd\x6a\xc2\x69\xe7\
\xdf\x01\x5e\x8a\x0e\xd1\x45\xee\xf2\xd1\xb1\x91\x34\x6a\x75\x20\
\xe0\xda\x5a\x84\x05\xa4\x3c\x63\xa4\xad\xfd\x36\x47\x07\x51\xa3\
\xbd\x42\x9a\x1b\xfd\x73\xdc\x11\x44\x52\xb3\x9c\x04\x9e\x65\xfe\
\xf5\x21\x2f\x93\xd6\xb0\xe5\xd2\x84\xd3\xce\x7f\x40\x9a\xca\x56\
\x9a\xa8\xf2\xd1\xf1\x21\xd2\xf4\xbe\x57\x03\x33\xa8\x0b\x0b\x48\
\x79\xfe\x3d\xb0\x3d\x3a\x84\x1a\xeb\x04\xf0\x3d\xd2\x5a\x8f\x93\
\xc1\x59\x24\x69\x18\x9d\xf5\x21\x90\xd6\x87\x2c\x21\x8d\xe4\xfe\
\x2d\x79\x0f\x9d\xfb\x12\x70\x63\xc6\xeb\xf5\xeb\x39\xe0\x7f\x44\
\x87\xe8\x22\xba\x7c\x74\xdc\x02\xbc\x47\x99\x53\xd3\x5a\xcb\x02\
\x52\x96\x07\x81\x7b\xa3\x43\xa8\x91\xa6\x81\x1f\x93\xa6\x5b\xbd\
\x19\x9c\x45\x92\xaa\x32\x43\x1a\xf1\xd8\x43\x3a\xfc\xef\x37\xa4\
\x1b\xee\x5c\xee\x06\x7e\x37\xe3\xf5\xfa\xf5\x32\xe9\xfb\x7e\x69\
\x6b\xfb\x4a\x29\x1f\x1d\xb7\x93\x66\x06\xb8\xf3\x63\x21\x7e\x2b\
\x3a\x80\x3e\x70\x0f\xf0\xf9\xe8\x10\x6a\xa4\x97\x48\x23\x1e\xee\
\x6c\x25\x69\xd4\x8d\x91\xef\xc4\xf3\x35\xc0\xff\x41\xb9\x3b\x51\
\xbe\x0b\xfc\x67\xca\x3b\x40\xb6\xb4\xf2\xd1\x71\x06\xf8\x2f\xa4\
\x91\x35\x05\x73\x04\xa4\x0c\xdb\x48\x53\xaf\x4a\xde\x57\x5c\xe5\
\x39\x41\x5a\x74\xf8\x4f\x94\xf7\x03\x48\x92\xea\x90\xeb\x49\xff\
\x18\xf0\xc7\x94\xbb\x19\xcc\x19\xe0\xff\x06\x8e\x47\x07\xb9\x4c\
\xa9\xe5\x03\x60\x29\x69\x24\xc4\xd3\xd2\x0b\x60\x01\x89\xb7\x09\
\xf8\x53\x3c\x68\x50\xfd\xf9\x09\x69\xd8\xfd\x50\x74\x10\x49\x1a\
\x41\xbf\x03\xec\x8c\x0e\x31\x8f\x69\xe0\x6b\x94\xf7\xfd\xbf\xe4\
\xf2\xd1\x31\x49\x3a\xa8\xf0\x59\xf2\x8d\xa4\xa9\x0b\x0b\x48\xac\
\xd5\xa4\x43\x8d\x56\x44\x07\x51\x63\x1c\x02\xbe\x0e\x3c\x83\xa7\
\xbc\x4a\x52\x1d\x4a\x3f\xed\xfc\xef\x49\x5b\x15\x97\xa4\x09\xe5\
\xa3\xe3\x2a\xd2\x7f\xe3\x17\x28\x6f\xed\x4c\x6b\x58\x40\xe2\x8c\
\x93\xce\xfa\x58\x1f\x1d\x44\x8d\x70\x8e\x34\xd5\xea\xef\x29\x6f\
\xc8\x5d\x92\x46\x45\xe9\xa7\x9d\xff\x88\x74\x02\x7c\x49\x9a\x54\
\x3e\x3a\xd6\x93\xee\x81\x3d\x23\x24\x88\xd3\x7e\x62\x8c\x01\x7f\
\x08\x5c\x1f\x1d\x44\x8d\xf0\x1b\xe0\xbb\xb8\x7b\x87\x24\xd5\xed\
\x41\xe0\xda\xe8\x10\xf3\xf8\x25\xf0\x68\x74\x88\xcb\x34\xb1\x7c\
\x74\xfc\x1b\xd2\xf6\xbc\xcf\x44\x07\x69\x23\x0b\x48\x8c\x07\x48\
\x0b\xa1\xa4\x85\x9c\x23\xed\x6e\xe5\x37\x47\x49\xaa\xdf\x56\xe0\
\xe3\xd1\x21\xe6\xf1\x1a\x69\xd3\x91\x92\x34\xb9\x7c\x74\x3c\x44\
\x2a\x21\x07\x83\x73\xb4\x8e\x53\xb0\xf2\xdb\x09\x7c\x3a\x3a\x84\
\x8a\xf7\x12\xf0\xd7\xf8\x4d\x51\x92\x72\x98\x24\x4d\x8b\x2e\x71\
\xcb\xdd\xa3\xc0\x57\x29\x6b\xe7\xa6\x51\x28\x1f\x90\x66\xa4\x6c\
\x07\xf6\x92\x76\x16\x53\x26\x16\x90\xbc\xb6\x00\xff\x81\x72\x17\
\xb6\x29\xde\x19\xd2\x49\xe6\xdf\xa7\xac\x1f\x36\x92\x34\xca\xbe\
\x04\x6c\x8e\x0e\xd1\xc5\x19\xe0\xaf\x28\x6b\x0a\xee\xa8\x94\x8f\
\x8e\xa5\xc0\x6d\xa4\x29\x6e\x53\xc1\x59\x5a\xc3\x02\x92\xcf\x1a\
\xd2\xc2\xb6\x12\x9f\xae\xa8\x0c\x2f\x01\x7f\x43\x3a\xad\x55\x92\
\x94\xc7\x0e\xe0\x13\xd1\x21\xba\x98\x06\xfe\x16\x78\x3d\x3a\xc8\
\x1c\xa3\x56\x3e\x3a\x56\x90\xd6\xe5\xfe\x12\x77\xc6\xca\xc2\x02\
\x92\xc7\x38\xf0\x17\xc0\xda\xe0\x1c\x2a\xd3\x14\x69\xad\xc7\x3f\
\xe2\xa8\x87\x24\xe5\xb4\x06\xf8\x0a\x65\xae\x89\xfd\xef\xa4\xad\
\x62\x4b\x31\xaa\xe5\xa3\x63\x1d\xe9\x21\xf1\xfe\xe8\x20\x6d\x50\
\xe2\x17\xdc\x28\xfa\x12\x70\x5d\x74\x08\x15\xe9\x35\xe0\xdb\xa4\
\x45\x70\x92\xa4\x7c\xc6\x48\x3f\x9f\x4b\x9c\x99\xf0\x63\xe0\xe9\
\xe8\x10\x73\x8c\x7a\xf9\xe8\xf8\x38\xf0\x16\xe9\xa0\x42\xd5\xc8\
\x02\x52\xbf\xfb\x80\x3b\xa3\x43\xa8\x38\xd3\xc0\xe3\xc0\x13\x78\
\x1a\xab\x24\x45\xd8\x4c\x99\xeb\x3e\x7e\x4d\x5a\x07\x58\x8a\xb6\
\x94\x8f\x8e\x87\x80\xc3\xc0\x9b\xd1\x41\x46\x99\x53\xb0\xea\x75\
\x2b\xf0\x05\x5c\x74\xae\x4b\xbd\x4b\x5a\xeb\xf1\x3c\xce\x35\x95\
\xa4\x28\xc7\x80\x97\x81\x5b\x48\xbb\x60\x95\xe0\x10\x69\x07\xc4\
\xe9\xe8\x20\xb3\xda\x56\x3e\x20\xdd\x1b\xdf\x06\x3c\x87\x8b\xd2\
\x6b\x63\x01\xa9\xcf\x3a\xe0\xcf\x80\x89\xe8\x20\x2a\xca\x73\xc0\
\xd7\x29\x6b\x47\x13\x49\x6a\xab\x63\xc0\x2f\x48\x3f\xb3\x37\x14\
\x90\xe5\x2f\x29\x67\x3b\xd8\x36\x96\x8f\x8e\x49\xe0\x46\xd2\xcf\
\x6c\x1f\x14\xd6\xc0\x02\x52\x8f\xce\x7e\xe2\x57\x47\x07\x51\x31\
\xce\x01\xff\x00\xfc\xbf\x94\xf3\x64\x4b\x92\x04\x17\x48\x8b\xbd\
\x4f\x92\x0e\x23\x8c\xb8\x37\x9a\x22\x95\x8f\x77\x03\xae\xdd\x4d\
\x9b\xcb\x47\xc7\x1a\x60\x25\xb0\x2f\x3a\xc8\x28\xb2\x80\xd4\xe3\
\x0f\x80\x0f\x45\x87\x50\x31\xde\x20\xed\xe3\xfe\x72\x74\x10\x49\
\xd2\xbc\xde\x24\x1d\x48\xb7\x05\x58\x95\xf1\xba\xd3\xc0\xdf\x51\
\xce\x16\xec\x96\x8f\x8b\x6e\x00\x8e\x93\xa6\xc6\xa9\x42\x16\x90\
\xea\xed\x06\x76\x45\x87\x50\x31\x7e\x0c\xfc\x37\xe0\x54\x74\x10\
\x49\xd2\xa2\x4e\x93\xa6\x64\xad\x26\x9d\x0b\x91\xc3\x0f\x28\x67\
\xd7\x25\xcb\xc7\x95\x6e\x21\x8d\x82\x9c\x8c\x0e\x32\x4a\x2c\x20\
\xd5\xba\x89\xb4\xa5\x9f\x8b\xce\x75\x8e\x54\x3c\x7e\x8c\xbb\x5c\
\x49\x52\x93\xcc\x00\x2f\x92\x9e\x7c\xdf\x42\xbd\xf7\x4a\x3f\x03\
\xfe\xa9\xc6\xf7\xef\x87\xe5\xa3\xbb\x25\xa4\x4d\x85\x9e\x25\x4d\
\xd7\x53\x05\x2c\x20\xd5\x59\x45\x5a\xf7\x51\xca\x4e\x1a\x8a\x73\
\x88\x34\x97\xf7\xd5\xe8\x20\x92\xa4\x81\x1d\x22\x3d\xf9\xde\x4a\
\x3a\x29\xbb\x6a\xbf\x21\x3d\xa8\x2a\x61\x91\xb3\xe5\x63\x61\xcb\
\x49\x9b\x14\xfc\x32\x3a\xc8\xa8\xb0\x80\x54\x63\x0c\xf8\x63\x3c\
\x6c\x50\x69\xe8\xfe\x1b\x38\xe5\x4a\x92\x46\xc1\x49\xd2\x4e\x48\
\xeb\x81\x6b\x2b\x7c\xdf\xb7\x49\xdb\xb1\x97\xb0\xcd\xab\xe5\xa3\
\x37\xeb\x49\x23\x20\x3e\x5c\xac\x80\x05\xa4\x1a\x9f\x04\x3e\x1a\
\x1d\x42\xa1\xa6\x80\xef\x92\x0e\x17\x74\xca\x95\x24\x8d\x8e\x0b\
\xa4\x73\x9b\x2e\x90\x16\xa8\x0f\x3b\xcd\xfa\x14\xf0\x55\xca\x58\
\x53\x60\xf9\xe8\xcf\x16\xd2\x66\x01\x6e\xa5\x3f\x24\x0b\xc8\xf0\
\xb6\x91\x4e\xcd\x54\x7b\x1d\x25\xed\x72\xb5\x3f\x3a\x88\x24\xa9\
\x36\xaf\x92\x76\x35\xdc\x06\x2c\x1d\xf0\x3d\xa6\x48\x07\x0d\x1e\
\xae\x2a\xd4\x10\x2c\x1f\xfd\x1b\x23\xad\x07\xd9\x03\x9c\x0f\xce\
\xd2\x68\x16\x90\xe1\xac\x21\x1d\x36\x38\xe8\x37\x22\x35\xdf\xcb\
\xa4\xf2\x71\x34\x3a\x88\x24\xa9\x76\xef\x91\xb6\xea\xbd\x99\xc1\
\xb6\xea\xfd\x36\x65\x3c\xac\xb2\x7c\x0c\x6e\x19\xb0\x19\x0f\x29\
\x1c\x8a\x05\x64\x70\x63\xa4\xf2\xb1\x2e\x3a\x88\xc2\xfc\x84\xb4\
\x80\xd0\xa7\x20\x92\xd4\x1e\x67\x48\x37\x9f\xd7\xd0\xdf\xe9\xe9\
\x3f\x00\x9e\xae\x25\x51\x7f\x2c\x1f\xc3\x5b\x43\xba\x87\x3e\x10\
\x1d\xa4\xa9\x2c\x20\x83\xfb\x14\x70\x67\x74\x08\x85\xe8\xac\xf7\
\xf8\x11\x3e\xfd\x90\xa4\x36\x9a\x26\x9d\x9e\x3e\x43\xda\x25\x6b\
\x31\xcf\x01\xff\xa3\xd6\x44\xbd\xb1\x7c\x54\xe7\x43\xa4\x69\x79\
\xce\x80\x18\x80\x05\x64\x30\xb7\xe2\xba\x8f\xb6\x3a\x41\xda\xb9\
\x64\x5f\x74\x10\x49\x52\xb8\x57\x80\xb7\x48\xeb\x42\xc6\xe7\xf9\
\x98\x97\x49\x27\x9d\x47\x3f\xb0\xb2\x7c\x54\xef\x16\xd2\xf9\x20\
\x25\xec\x66\xd6\x28\x16\x90\xfe\xad\x02\xfe\x94\x34\x07\x50\xed\
\x72\x88\xb4\x73\xc9\x3b\xc1\x39\x24\x49\xe5\x38\x02\xbc\x44\x2a\
\x21\x97\x9f\x05\xf6\x2e\x69\xd1\x79\xf4\x54\x5d\xcb\x47\x3d\x96\
\x91\x8e\x60\xd8\x13\x1d\xa4\x69\x2c\x20\xfd\xfb\x32\xb0\x31\x3a\
\x84\xb2\xfb\x35\xf0\x35\xe0\x74\x74\x10\x49\x52\x71\x4e\x92\x0e\
\xa9\xdb\x02\xac\x9e\xfd\xb3\xce\x76\xbb\xc7\x63\x22\x7d\xc0\xf2\
\x51\xaf\x6b\x48\x05\xf3\xb5\xe8\x20\x4d\x62\x01\xe9\xcf\x7d\xc0\
\x3d\xd1\x21\x94\xdd\xff\x47\x5a\xf3\x71\x21\x3a\x88\x24\xa9\x58\
\xe7\xb9\x78\x68\xe1\x35\xc0\xd7\x49\x23\xe7\x91\x2c\x1f\x79\xdc\
\x4c\x1a\x05\x3b\x11\x1d\xa4\x29\x7e\x2b\x3a\x40\x83\x6c\x06\xfe\
\x17\x2c\x6d\x6d\x32\x0d\x7c\x0f\x78\x26\x3a\x88\x24\xa9\x51\x36\
\x92\xd6\x86\x44\xb2\x7c\xe4\xf5\x2e\xf0\x7f\x12\x3f\xdd\xae\x11\
\xbc\x99\xee\xcd\x04\xf0\xe7\xc0\x8a\xe8\x20\xca\xe6\x0c\xf0\xb7\
\xa4\xfd\xde\x25\x49\xea\x47\xf4\x29\xe7\x96\x8f\xfc\x56\x00\x57\
\x03\xbf\x8a\x0e\xd2\x04\x16\x90\x57\xce\x2c\x15\x00\x00\x20\x00\
\x49\x44\x41\x54\xde\x7c\x9e\x34\xbc\xa6\x76\x38\x06\xfc\x25\xf0\
\x7a\x74\x10\x49\x92\xfa\x64\xf9\x88\xb3\x91\xb4\x29\x41\x09\x27\
\xdd\x17\x6d\x2c\x3a\x40\x03\xdc\x01\x7c\x2c\x3a\x84\xb2\x79\x1b\
\xf8\xcf\xf8\xcd\x43\x92\xd4\x3c\x96\x8f\x78\x0f\x71\x71\x23\x02\
\xcd\xc3\x02\xb2\xb0\x55\x78\xde\x47\x9b\xbc\x02\xfc\x17\xe2\x77\
\x2c\x91\x24\xa9\x5f\x96\x8f\x32\x2c\x07\xbe\x18\x1d\xa2\x74\x4e\
\xc1\x5a\xd8\x1f\x00\xd7\x47\x87\x50\x16\x2f\x00\xdf\xc0\xc5\x63\
\x92\xa4\xe6\xb1\x7c\x94\x65\x1d\x70\x16\xa7\x72\xcf\xcb\x11\x90\
\xf9\xdd\x03\xdc\x1e\x1d\x42\x59\xfc\x04\xf8\x26\x6e\xb3\x2b\x49\
\x6a\x1e\xcb\x47\x99\x1e\x24\x6d\xc9\xac\x2e\x2c\x20\xdd\xad\x03\
\x3e\x1d\x1d\x42\x59\xfc\x33\xf0\x70\x74\x08\x49\x92\x06\x60\xf9\
\x28\xd7\x52\xd2\x4c\x1a\xef\xb5\xbb\x70\x0a\xd6\x95\xc6\x80\xaf\
\x90\x4a\x88\x46\xdb\x3f\x02\x3f\x8a\x0e\x21\x49\xd2\x00\x2c\x1f\
\xe5\xbb\x8a\x74\xe6\xde\xcb\xd1\x41\x4a\x63\x2b\xbb\xd2\x6e\xe0\
\xc6\xe8\x10\xaa\xd5\x34\xf0\xff\x00\x4f\x45\x07\x91\x24\x69\x00\
\x96\x8f\xe6\xb8\x8f\x74\x98\xb5\xe6\xb0\x80\x5c\x6a\x03\x70\x7f\
\x74\x08\xd5\x6a\x8a\xb4\xde\xe3\xd9\xe8\x20\x92\x24\x0d\xc0\xf2\
\xd1\x2c\x4b\x80\x2f\x01\xe3\xd1\x41\x4a\xe2\x14\xac\x8b\x3a\x53\
\xaf\xd6\x44\x07\x51\x6d\xa6\x80\xaf\x03\x2f\x45\x07\x91\x24\x69\
\x00\x96\x8f\x66\x5a\x41\xba\xcf\x3c\x10\x1d\xa4\x14\x8e\x80\x5c\
\xb4\x1b\xb8\x21\x3a\x84\x6a\x73\x0e\xf8\x1b\xfc\xe2\x97\x24\x35\
\x93\xe5\xa3\xd9\x76\x03\x9b\xa2\x43\x94\xc2\x02\x92\xac\xc7\xa9\
\x57\xa3\xac\x53\x3e\x0e\x06\xe7\x90\x24\x69\x10\x96\x8f\xe6\x5b\
\x42\x3a\xa0\xd0\xa9\x58\x38\x05\x0b\x52\x09\xfb\x63\x60\x6d\x74\
\x10\xd5\xe2\x0c\xf0\xd7\xc0\x6b\xd1\x41\x24\x49\x1a\x80\xe5\x63\
\x74\xac\x9a\xfd\xb5\xf5\xbb\x62\x39\x02\x02\xf7\xe2\xae\x57\xa3\
\xea\x0c\xf0\x57\x78\x12\xa9\x24\xa9\x99\x2c\x1f\xa3\xe7\x3e\x9c\
\x8a\xd5\xfa\x02\xb2\x0e\x78\x20\x3a\x84\x6a\x71\x06\xf8\x2a\xf0\
\x66\x70\x0e\x49\x92\x06\x71\x13\x96\x8f\x51\xd4\x99\x8a\xd5\xea\
\x7b\xf0\xb6\x4f\xc1\xfa\x23\xd2\xfa\x0f\x8d\x96\xce\xc8\xc7\xa1\
\xe8\x20\x92\x24\x0d\xe8\x18\x70\x1e\xb8\x35\x3a\x88\x2a\xb7\x0a\
\xf8\x17\x5a\xbc\x36\xb5\xcd\x05\x64\x27\xb0\x2b\x3a\x84\x2a\x77\
\x8e\xb4\xe6\xe3\x8d\xe8\x20\x92\x24\x0d\xe9\x35\xe0\x02\x70\x4b\
\x74\x10\x55\x6e\x33\xb0\x17\x38\x1d\x1d\x24\x42\x5b\x0b\xc8\x0a\
\xd2\x99\x1f\x4b\xa3\x83\xa8\x52\x9d\xdd\xae\x5c\x70\x2e\x49\x1a\
\x15\xaf\xce\xfe\x7a\x73\x68\x0a\x55\x6d\x09\xb0\x11\xf8\x45\x74\
\x90\x08\x6d\x2d\x20\x9f\x27\x35\x4f\x8d\x8e\x29\xe0\x6b\xc0\x2b\
\xd1\x41\x24\x49\xaa\xd8\x41\xd2\x9a\x81\x2d\xb1\x31\x54\xb1\x35\
\xc0\x71\x5a\x38\x65\xbc\x8d\x05\x64\x2b\xf0\x99\xe8\x10\xaa\xd4\
\x34\xa9\x7c\xb4\x7e\x5b\x3b\x49\xd2\xc8\x7a\x19\x98\x20\x2d\x4e\
\xd7\xe8\xf8\x10\xf0\x0c\xe9\x41\x6a\x6b\xb4\xad\x80\x8c\x03\x7f\
\x42\x9a\x82\xa5\xd1\x30\x0d\x7c\x03\xd8\x1f\x1d\x44\x92\xa4\x9a\
\xfd\x86\xb4\x80\xf9\x86\xe8\x20\xaa\xcc\x52\xe0\x2a\xe0\x57\xd1\
\x41\x72\x6a\x5b\x01\xb9\x1f\xf8\x70\x74\x08\x55\xea\xef\x81\x17\
\xa2\x43\x48\x92\x94\xc9\x7e\xe0\x1a\xe0\xba\xe8\x20\xaa\xcc\x46\
\xd2\x5a\x9f\xa3\xd1\x41\x72\x69\x53\x01\x59\x0f\xfc\x3e\x2d\xdf\
\x77\x79\xc4\xfc\x23\xf0\x74\x74\x08\x49\x92\x32\xfa\x17\xe0\x45\
\xd2\x28\xc8\x35\xc1\x59\x54\x9d\x1b\x81\x9f\x03\x33\xd1\x41\x72\
\x68\x53\x01\xf9\x32\xb0\x36\x3a\x84\x2a\xf3\xcf\xc0\x8f\xa2\x43\
\x48\x92\x14\xe0\x5f\x48\x5b\xb8\x6e\x05\xae\x0e\xce\xa2\x6a\x74\
\x96\x07\xb4\x62\x3d\x6b\x5b\x46\x03\x76\x90\x16\xf9\x68\x34\xfc\
\x04\x78\x2c\x3a\x84\x24\x49\x81\x2e\x90\xb6\x9e\x7f\x3b\x3a\x88\
\x2a\x73\x1f\x2d\x39\x20\xbb\x0d\x23\x20\x13\xc0\x1f\x03\xcb\xa2\
\x83\xa8\x12\xcf\x01\xdf\x8d\x0e\x21\x49\x52\x01\x2e\x00\xbf\x06\
\x6e\xc7\x0d\x76\x46\xc1\x18\xa9\x80\x3c\x17\x1d\xa4\x6e\x6d\x28\
\x20\x9f\xc2\x13\x44\x47\xc5\xcb\xc0\xdf\x91\x86\x9e\x25\x49\x52\
\x3a\x84\xf7\x25\xe0\x23\xa4\x87\xae\x6a\xb6\x75\xc0\x5b\xc0\x91\
\xe8\x20\x75\x1a\xf5\x29\x58\x1b\x80\x7b\xa3\x43\xa8\x12\x6f\x93\
\xb6\xdb\x6d\xc5\xe2\x2c\x49\x92\xfa\xf0\x1e\xf0\x75\x5a\x76\x96\
\xc4\x08\xfb\x2c\xe9\xe8\x88\x91\x35\xea\x23\x20\xff\x81\xd4\x24\
\xd5\x6c\xc7\x80\xaf\x02\xa7\x82\x73\x48\x92\x54\xaa\xe3\xa4\x27\
\xe7\x77\x32\xfa\x0f\x98\x47\xdd\xf2\xd9\x5f\x47\x76\x41\xfa\x28\
\x17\x90\x3b\x48\x8b\x79\xd4\x6c\x67\x80\xbf\x24\x3d\xdd\x91\x24\
\x49\xf3\x7b\x97\xf4\xb0\xee\xf6\xe8\x20\x1a\xda\x0d\xc0\x1e\xe0\
\x6c\x74\x90\x3a\x8c\x6a\x01\x99\x00\xbe\x02\x4c\x46\x07\xd1\x50\
\xa6\x81\xaf\x01\x6f\x44\x07\x91\x24\xa9\x21\xde\x24\x4d\xdf\x71\
\xf7\xcf\x66\x5b\x02\xac\x01\x9e\x8f\x0e\x52\x87\x51\x2d\x20\xff\
\x13\xb0\x2d\x3a\x84\x86\xf6\x0f\xc0\xaf\xa2\x43\x48\x92\xd4\x30\
\x07\x48\xa7\x6b\x5f\x1b\x1d\x44\x43\xb9\x96\x11\x3d\x21\x7d\x14\
\xe7\x08\xae\x01\x76\x45\x87\xd0\xd0\x7e\x04\x3c\x13\x1d\x42\x92\
\xa4\x86\xfa\x16\xce\x20\x18\x05\x9f\x63\x04\xef\xd7\x47\x71\x04\
\xe4\x21\xe0\xfa\xe8\x10\x1a\xca\xaf\x49\xa3\x1f\x6e\xb7\x2b\x49\
\xd2\x60\x66\x48\xdb\xf3\xde\x89\x53\xd2\x9b\x6c\x25\x69\x5d\xcf\
\x48\x95\xc9\x51\x6b\x54\x9b\x49\xfb\x60\xab\xb9\xde\x06\xbe\x89\
\xdb\xed\x4a\x92\x34\xac\xe3\xb8\x3d\xef\x28\xb8\x9f\x11\x2b\x91\
\xa3\x36\x02\xf2\x87\xc0\xd5\xd1\x21\x34\xb0\xce\x76\xbb\x67\x82\
\x73\x48\x92\x34\x2a\x4e\xe2\xf6\xbc\x4d\x37\x41\xfa\x6f\xf7\x9b\
\xe8\x20\x55\x19\xa5\x4f\xc4\xbb\x80\x1b\xa3\x43\x68\x60\xd3\xa4\
\x91\x8f\xe3\xd1\x41\x24\x49\x1a\x31\xfb\x80\xc7\xa2\x43\x68\x28\
\xf7\x32\x42\x67\xdb\x8d\xca\x08\xc8\x38\xf0\x65\x2e\x1e\xdc\xa2\
\xe6\xf9\x7b\xd2\x37\x48\x49\x92\x54\xbd\x57\x81\xf5\xc0\x75\xd1\
\x41\x34\x90\x25\xc0\x55\xc0\x0b\xd1\x41\xaa\x30\x2a\x23\x20\xbb\
\x80\xb5\xd1\x21\x34\xb0\x1f\x03\xcf\x46\x87\x90\x24\x69\xc4\x7d\
\x07\x38\x14\x1d\x42\x03\xbb\x13\xb8\x29\x3a\x44\x15\x46\xa1\x80\
\xac\x00\x3e\x11\x1d\x42\x03\x7b\x19\xf8\x7e\x74\x08\x49\x92\x5a\
\xe0\x02\xf0\x0d\xd2\xae\x4a\x6a\xa6\xcf\x46\x07\xa8\xc2\x28\x14\
\x90\xfb\x81\x65\xd1\x21\x34\x90\xa3\xb8\xe3\x95\x24\x49\x39\xbd\
\x4f\xfa\xd9\x3b\x1d\x1d\x44\x03\xb9\x01\xb8\x3b\x3a\xc4\xb0\x9a\
\x5e\x40\xd6\x01\xf7\x44\x87\xd0\x40\xa6\x48\x4f\x61\x4e\x47\x07\
\x91\x24\xa9\x65\x0e\xe2\xec\x83\x26\x7b\x80\x86\xdf\xc3\x37\x7d\
\x11\xfa\xbf\xc5\x43\x07\x9b\xea\xbb\xc0\xfe\xe8\x10\x92\x24\xb5\
\xd4\xeb\xb8\x28\xbd\xa9\x96\xd3\xf0\xc3\x09\x9b\xdc\x9e\x36\x02\
\x1f\x8d\x0e\xa1\x81\xfc\x1c\x17\x9d\x4b\x92\x14\xed\xbb\xc0\x3b\
\xd1\x21\x34\x90\x4f\x90\xce\x07\x69\xa4\x26\x17\x90\x07\xa2\x03\
\x68\x20\x87\x80\x87\xa3\x43\x48\x92\x24\xce\x93\xa6\x43\x9f\x8b\
\x0e\xa2\xbe\x5d\x45\xda\x05\xb6\x91\x9a\x5a\x40\x6e\x02\x6e\x8f\
\x0e\xa1\xbe\x9d\x21\x2d\x7c\xbb\x10\x1d\x44\x92\x24\x01\x70\x04\
\xf8\x5e\x74\x08\x0d\x64\x37\x30\x19\x1d\x62\x10\x4d\x5d\x03\xf2\
\xfb\xc0\x9a\xe8\x10\xea\xdb\xb7\x80\xd7\xa2\x43\x48\x92\xa4\x4b\
\xbc\x0d\xac\x22\xed\xb0\xa4\xe6\x58\x4a\x1a\x4c\xf8\x4d\x74\x90\
\x7e\x35\x71\x04\x64\x1b\xf0\xa1\xe8\x10\xea\xdb\x8f\x81\x17\xa3\
\x43\x48\x92\xa4\xae\x1e\xa6\xc1\x8b\x9a\x5b\xec\x5e\x60\x75\x74\
\x88\x7e\x35\xb1\x80\xb8\xf6\xa3\x79\xde\xc0\xed\xfe\x24\x49\x2a\
\xd9\x0c\x69\xa6\x82\xeb\x41\x9a\x65\x29\x0d\x3c\x90\xbb\x69\x05\
\xe4\x2e\xdc\x76\xb7\x69\xce\x91\xbe\xa1\x79\xd8\xa0\x24\x49\x65\
\x7b\x0f\xd7\x83\x34\xd1\x4e\xd2\xd9\x78\x8d\xd1\xb4\x02\xd2\xb8\
\x86\x27\xbe\x47\xfa\x86\x26\x49\x92\xca\xb7\x07\xf8\x45\x74\x08\
\xf5\x65\x09\x0d\xbb\x47\x6e\x52\x01\xb9\x0b\x0f\xcb\x69\x9a\xe7\
\x48\xdf\xc8\x24\x49\x52\x73\x3c\x8c\xe7\x83\x34\xcd\xdd\x34\x68\
\x14\xa4\x49\x05\xa4\x51\xcd\x4e\xbc\x8b\xc3\xb8\x92\x24\x35\xd1\
\x79\xd2\xf4\xe9\xa9\xe8\x20\xea\x59\xa3\x46\x41\x9a\x52\x40\xee\
\xc0\xd1\x8f\x26\x99\x26\x7d\xe3\x3a\x1f\x1d\x44\x92\x24\x0d\xe4\
\x2d\xe0\xd1\xe8\x10\xea\x4b\x63\x46\x41\x9a\x52\x40\xee\x8f\x0e\
\xa0\xbe\x3c\x0e\xbc\x19\x1d\x42\x92\x24\x0d\xe5\x29\x1a\x78\xc6\
\x44\x8b\x35\x66\x14\xa4\x09\x05\xc4\xd1\x8f\x66\x79\x0d\x78\x22\
\x3a\x84\x24\x49\xaa\xc4\x77\x80\x33\xd1\x21\xd4\xb3\xbb\x69\xc0\
\x61\xdd\x4d\x28\x20\xf7\x47\x07\x50\xcf\xce\x01\xdf\xc6\x2d\x77\
\x25\x49\x1a\x15\xc7\x71\x4d\x67\x93\x2c\xa1\x01\xf7\xce\xa5\x17\
\x90\xed\x38\xfa\xd1\x24\xdf\xc7\x2d\x77\x25\x49\x1a\x35\xcf\x03\
\xbf\x8c\x0e\xa1\x9e\x15\x3f\x0a\x52\x7a\x01\x69\xc4\x3c\x36\x01\
\xf0\x12\xf0\x74\x74\x08\x49\x92\x54\x8b\xef\x01\xc7\xa2\x43\xa8\
\x27\x4b\x80\xfb\xa2\x43\x2c\xa4\xe4\x02\xb2\x15\xb8\x21\x3a\x84\
\x7a\x72\x86\x34\x47\x54\x92\x24\x8d\xa6\xb3\xf8\xb3\xbe\x49\x76\
\x00\xab\xa2\x43\xcc\xa7\xe4\x02\x52\x74\x73\xd3\x25\x1e\x06\x4e\
\x46\x87\x90\x24\x49\xb5\x3a\x00\xfc\x2c\x3a\x84\x7a\xb2\x14\xd8\
\x1d\x1d\x62\x3e\xa5\x16\x90\x4d\xc0\x2d\xd1\x21\xd4\x93\x97\xf0\
\xb4\x73\x49\x92\xda\xe2\xfb\x38\x15\xab\x29\xee\x01\x26\xa3\x43\
\x74\x53\x6a\x01\x71\xf4\xa3\x19\xce\x00\xdf\x8d\x0e\x21\x49\x92\
\xb2\x39\x8f\x3f\xfb\x9b\x62\x19\x70\x6f\x74\x88\x6e\x4a\x2c\x20\
\xeb\x80\x3b\xa3\x43\xa8\x27\xdf\x27\x6d\xcf\x27\x49\x92\xda\x63\
\x3f\xf0\x8b\xe8\x10\xea\xc9\x2e\x60\x3c\x3a\xc4\xe5\x4a\x2c\x20\
\x8e\x7e\x34\xc3\x6f\x80\x67\xa2\x43\x48\x92\xa4\x10\x8f\x00\x27\
\xa2\x43\x68\x51\x2b\x81\x9d\xd1\x21\x2e\x57\x5a\x01\x59\x45\x5a\
\xb5\xaf\xb2\x9d\xc3\xe1\x57\x49\x92\xda\xec\x2c\x1e\x50\xd8\x14\
\xbb\x29\xec\x9e\xbf\xa8\x30\xa4\x7f\x41\x4b\xa2\x43\x68\x51\x8f\
\x01\xef\x47\x87\x90\x24\x49\xa1\x5e\x04\x5e\x88\x0e\xa1\x45\xad\
\x05\xee\x8a\x0e\x31\x57\x49\x05\x64\x82\x02\x87\x88\x74\x85\x43\
\xc0\x4f\xa3\x43\x48\x92\xa4\x22\x3c\x42\x9a\x19\xa1\xb2\x15\xb5\
\x25\x6f\x49\x05\x64\x07\xb0\x3c\x3a\x84\x16\x34\x4d\x9a\x7a\x35\
\x13\x1d\x44\x92\x24\x15\xe1\x38\xf0\x68\x74\x08\x2d\xea\x7a\x60\
\x4b\x74\x88\x8e\x92\x0a\xc8\xae\xe8\x00\x5a\xd4\xd3\xc0\x9b\xd1\
\x21\x24\x49\x52\x51\x9e\x06\xde\x88\x0e\xa1\x45\x15\x73\xaf\x5d\
\x4a\x01\xd9\x0e\x5c\x13\x1d\x42\x0b\x3a\x86\x4f\x38\x24\x49\xd2\
\x95\x66\x48\x33\x24\xa6\xa3\x83\x68\x41\x1f\x26\x1d\x77\x11\xae\
\x94\x02\x52\x4c\x23\xd3\xbc\x1e\x21\x1d\x3e\x24\x49\x92\x74\xb9\
\xb7\x80\xa7\xa2\x43\x68\x51\x45\xdc\x73\x97\x50\x40\x36\x00\x37\
\x47\x87\xd0\x82\x5e\x02\xf6\x46\x87\x90\x24\x49\x45\x7b\x9c\x34\
\x63\x42\xe5\xda\x01\x4c\x46\x87\x28\xa1\x80\x14\xd1\xc4\x34\xaf\
\x29\xe0\xe1\xe8\x10\x92\x24\xa9\x78\xe7\x71\xba\x76\xe9\x96\x51\
\xc0\xae\xb3\xd1\x05\x64\x05\x70\x77\x70\x06\x2d\xec\x29\xe0\xbd\
\xe8\x10\x92\x24\xa9\x11\xf6\x00\x2f\x47\x87\xd0\x82\xee\x89\x0e\
\x10\x5d\x40\xee\x01\x96\x06\x67\xd0\xfc\x8e\x01\x3f\x8c\x0e\x21\
\x49\x92\x1a\xe5\x61\x5c\x90\x5e\xb2\x6b\x48\x1b\x40\x85\x89\x2c\
\x20\x63\x14\xd0\xc0\xb4\xa0\x47\x71\xe1\xb9\x24\x49\xea\xcf\x61\
\x3c\xb4\xb8\x74\xf7\x46\x5e\x3c\xb2\x80\x6c\x03\xae\x0e\xbc\xbe\
\x16\xf6\x0a\x69\x18\x55\x92\x24\xa9\x5f\x8f\x03\xa7\xa2\x43\x68\
\x5e\xb7\x10\xb8\x25\x6f\x64\x01\x71\xf4\xa3\x6c\x2e\x3c\x97\x24\
\x49\x83\x3a\x8b\x0b\xd2\x4b\x17\x36\x0a\x12\x55\x40\xd6\x01\xb7\
\x05\x5d\x5b\x8b\xfb\x05\x69\x3f\x6f\x49\x92\xa4\x41\x3d\x0b\xbc\
\x1d\x1d\x42\xf3\xda\x01\x8c\x47\x5c\x38\xaa\x80\x38\xfa\x51\xae\
\x29\x7c\x62\x21\x49\x92\x86\x37\x43\x3a\xc8\x58\x65\x5a\x0e\xdc\
\x15\x71\xe1\x88\x02\x32\x4e\x6a\x5c\x2a\xd3\x13\xc0\xc9\xe8\x10\
\x92\x24\x69\x24\x1c\x20\x1d\x68\xac\x32\x85\x0c\x0a\x44\x14\x90\
\x3b\x80\x95\x01\xd7\xd5\xe2\x4e\x00\x4f\x46\x87\x90\x24\x49\x23\
\xe5\xfb\xb8\x2d\x6f\xa9\x6e\x04\x36\xe6\xbe\x68\x44\x01\x09\xdd\
\xf6\x4b\x0b\x7a\x0c\xb7\xdd\x95\x24\x49\xd5\x3a\x0c\x3c\x13\x1d\
\x42\xf3\xca\x7e\x6f\x9e\xbb\x80\x6c\x24\x35\x2d\x95\xe7\x6d\xd2\
\x62\x31\x49\x92\xa4\xaa\x3d\x06\x9c\x8b\x0e\xa1\xae\xee\x02\x26\
\x72\x5e\x30\x77\x01\xd9\x99\xf9\x7a\xea\xdd\xa3\xa4\xc5\x62\x92\
\x24\x49\x55\x3b\x8d\xd3\xbc\x4b\xb5\x0c\xb8\x3b\xe7\x05\x73\x16\
\x90\x31\x82\x56\xda\x6b\x51\xaf\x00\xfb\xa2\x43\x48\x92\xa4\x91\
\xf6\x24\x1e\x4e\x58\xaa\xac\x1b\x44\xe5\x2c\x20\xdb\x71\xf1\x79\
\xa9\xdc\x76\x57\x92\x24\xd5\xed\x3c\xf0\xc3\xe8\x10\xea\xea\x46\
\x60\x43\xae\x8b\xe5\x2c\x20\x4e\xbf\x2a\xd3\x4b\xc0\xab\xd1\x21\
\x24\x49\x52\x2b\x3c\x0d\x1c\x8d\x0e\xa1\xae\xb2\x8d\x82\xe4\x2a\
\x20\xab\x81\xad\x99\xae\xa5\xfe\x38\xfa\x21\x49\x92\x72\xb9\x80\
\xa3\x20\xa5\xda\x41\xa6\x6e\x90\xab\x80\xec\x00\x96\x64\xba\x96\
\x7a\xf7\x4b\xe0\xad\xe8\x10\x92\x24\xa9\x55\x9e\x05\xde\x89\x0e\
\xa1\x2b\xac\x04\xb6\xe5\xb8\x50\xce\x02\xa2\xb2\x4c\x93\xb6\xc4\
\x93\x24\x49\xca\x69\x06\xef\x41\x4a\x95\x65\xc9\x44\x8e\x02\x72\
\x13\x70\x4d\x86\xeb\xa8\x3f\xcf\x03\xef\x45\x87\x90\x24\x49\xad\
\xb4\x97\x74\x06\x99\xca\x72\x2b\xb0\xaa\xee\x8b\xe4\x28\x20\x2e\
\x3e\x2f\x93\xf3\x2f\x25\x49\x52\xa4\xc7\xa3\x03\xe8\x0a\x4b\xc8\
\x30\x73\xa9\xee\x02\x32\x0e\xdc\x51\xf3\x35\xd4\xbf\xe7\x80\x23\
\xd1\x21\x24\x49\x52\xab\x39\x0a\x52\xa6\xda\x0f\x25\xac\xbb\x80\
\x6c\x23\x9d\xae\xa8\xb2\x38\xfa\x21\x49\x92\x4a\xe0\x3d\x49\x79\
\xae\xa3\xe6\x33\x41\xea\x2e\x20\x59\x8f\x75\x57\x4f\x7e\x89\xa3\
\x1f\x92\x24\xa9\x0c\xcf\xe3\x28\x48\x89\x6a\xbd\x87\xaf\xb3\x80\
\x4c\x92\x16\xb2\xa8\x2c\x3e\x69\x90\x24\x49\x25\xf1\xde\xa4\x3c\
\x77\xd5\xf9\xe6\x75\x16\x90\x3b\x80\xa5\x35\xbe\xbf\xfa\xf7\x2b\
\xe0\x70\x74\x08\x49\x92\xa4\x39\x9e\x07\xde\x8d\x0e\xa1\x4b\xac\
\x25\xed\x64\x5b\x8b\x3a\x0b\x88\xd3\xaf\xca\xf3\x44\x74\x00\x49\
\x92\xa4\x2e\xbc\x47\x29\x4f\x6d\xf7\xf2\x75\x15\x90\xd5\xc0\xcd\
\x35\xbd\xb7\x06\xf3\x32\xf0\x7a\x74\x08\x49\x92\xa4\x2e\x9e\x05\
\x4e\x44\x87\xd0\x25\xee\xa2\xa6\xae\x50\x57\x01\xa9\x75\xde\x98\
\x06\xe2\x93\x05\x49\x92\x54\xaa\x19\xe0\xc9\xe8\x10\xba\xc4\x72\
\x6a\x5a\xcf\x5d\x57\x01\x71\xfa\x55\x59\x0e\x01\xfb\xa3\x43\x48\
\x92\x24\x2d\xe0\x69\xe0\x4c\x74\x08\x5d\xa2\x96\x7b\xfa\x3a\x0a\
\xc8\x3a\xe0\xfa\x1a\xde\x57\x83\x73\xf4\x43\x92\x24\x95\xee\x3c\
\xf0\xd3\xe8\x10\xba\xc4\x36\xd2\xc1\xe2\x95\xaa\xa3\x80\x78\xf2\
\x79\x59\x8e\x92\x4e\x1a\x95\x24\x49\x2a\xdd\x53\xc0\x54\x74\x08\
\x7d\x60\x19\xa9\x84\x54\xca\x02\x32\xfa\x9e\x24\xcd\xab\x94\x24\
\x49\x2a\xdd\x69\x60\x4f\x74\x08\x5d\xa2\xf2\x7b\xfb\xaa\x0b\xc8\
\x1a\xe0\x86\x8a\xdf\x53\x83\x3b\x87\x5f\xc4\x92\x24\xa9\x59\x5c\
\x8c\x5e\x96\xca\xa7\x61\x55\x5d\x40\x1c\xfd\x28\xcb\xb3\xc0\xd9\
\xe8\x10\x92\x24\x49\x7d\x38\x02\xbc\x14\x1d\x42\x1f\x58\x06\x6c\
\xad\xf2\x0d\x2d\x20\xa3\xed\xa9\xe8\x00\x92\x24\x49\x03\xf0\x1e\
\xa6\x2c\x95\xde\xe3\x57\x59\x40\x56\x03\x37\x56\xf8\x7e\x1a\xce\
\xaf\x80\xf7\xa2\x43\x48\x92\x24\x0d\x60\x3f\xf0\x6e\x74\x08\x7d\
\x60\x3b\x15\xf6\x86\x2a\x0b\xc8\xf6\x0a\xdf\x4b\xc3\x73\x1b\x3b\
\x49\x92\xd4\x64\x8e\x82\x94\x63\x39\x15\x4e\xc3\xaa\xb2\x80\x38\
\xfd\xaa\x1c\xef\x00\x07\xa2\x43\x48\x92\x24\x0d\xe1\x59\x3c\x98\
\xb0\x24\x95\xdd\xeb\x57\x55\x40\x56\x00\x37\x55\xf4\x5e\x1a\x9e\
\xa3\x1f\x92\x24\xa9\xe9\xce\x93\x4a\x88\xca\x50\xd9\x34\xac\xaa\
\x0a\xc8\x36\x60\x49\x45\xef\xa5\xe1\x9c\xc3\x2f\x56\x49\x92\x34\
\x1a\x9e\x8e\x0e\xa0\x0f\xac\x04\x36\x57\xf1\x46\x55\x16\x10\x95\
\x61\x0f\xe9\x89\x81\x24\x49\x52\xd3\x1d\x01\x5e\x8e\x0e\xa1\x0f\
\x54\x72\xcf\x5f\x45\x01\x19\xa3\xe2\xbd\x81\x35\x14\x9f\x14\x48\
\x92\xa4\x51\xe2\xbd\x4d\x39\x2a\xd9\x74\xaa\x8a\x02\xb2\x85\xb4\
\x32\x5e\xf1\x5e\x03\xde\x8a\x0e\x21\x49\x92\x54\xa1\xbd\xc0\x89\
\xe8\x10\x02\xe0\x5a\x60\xdd\xb0\x6f\x52\x45\x01\x71\xfa\x55\x39\
\x7c\x42\x20\x49\x92\x46\xcd\x0c\xae\x6f\x2d\xc9\xd0\xf7\xfe\x16\
\x90\xd1\x71\x06\x78\x3e\x3a\x84\x24\x49\x52\x0d\x7c\xc8\x5a\x8e\
\xf0\x02\xb2\x1e\xb8\x66\xd8\x10\xaa\xc4\x1e\xe0\x42\x74\x08\x49\
\x92\xa4\x1a\xbc\x0f\xfc\x26\x3a\x84\x80\x74\xf4\xc6\xe4\x30\x6f\
\x30\x6c\x01\xf1\xf4\xf3\x72\x38\x34\x29\x49\x92\x46\x99\xf7\x3a\
\x65\x58\xca\x90\x1b\x50\x0d\x5b\x40\x9c\x7e\x55\x86\xb7\x81\x37\
\xa3\x43\x48\x92\x24\xd5\x68\x2f\x9e\x8c\x5e\x8a\xa1\x3a\xc0\x30\
\x05\x64\x82\x8a\x0e\x23\xd1\xd0\x7c\x22\x20\x49\x92\x46\xdd\x05\
\x5c\xef\x5a\x8a\x5b\x87\xf9\xcb\xc3\x14\x90\x2d\x78\xfa\x79\x09\
\xa6\xb1\x80\x48\x92\xa4\x76\x78\x26\x3a\x80\x00\xb8\x0a\xd8\x30\
\xe8\x5f\x1e\xa6\x80\x0c\xd5\x7c\x54\x99\x7d\xc0\xe9\xe8\x10\x92\
\x24\x49\x19\xbc\x49\x9a\x7a\xae\x78\x03\x77\x01\x0b\x48\xf3\x39\
\xfa\x21\x49\x92\xda\xc4\x7b\x9f\x32\x0c\xbc\x10\x7d\xd0\x02\xb2\
\x06\xb7\xdf\x2d\xc1\x19\xd2\x08\x88\x24\x49\x52\x5b\xec\x89\x0e\
\x20\x20\x2d\xc7\x18\x1f\xe4\x2f\x0e\x5a\x40\x86\xda\x7a\x4b\x95\
\xd9\x4b\x3a\x1d\x54\x92\x24\xa9\x2d\x4e\x02\x2f\x47\x87\x10\x4b\
\x49\x67\x82\xf4\xcd\x02\xd2\x6c\x3e\x01\x90\x24\x49\x6d\xe4\x3d\
\x50\x19\x06\x5a\x92\x31\x68\x01\x71\xfd\x47\xbc\x13\xc0\xc1\xe8\
\x10\x92\x24\x49\x01\xf6\x92\x76\x02\x55\xac\x81\x06\x25\x06\x29\
\x20\x9b\x80\xe5\x83\x5c\x4c\x95\xb2\xf9\x4b\x92\xa4\xb6\x3a\x0b\
\xec\x8f\x0e\x21\xae\x07\x56\xf5\xfb\x97\x06\x29\x20\x4e\xbf\x2a\
\x83\x07\xf1\x48\x92\xa4\x36\xf3\x61\x6c\x19\xfa\xee\x06\x83\x14\
\x90\x2d\x03\xfc\x1d\x55\xeb\x5d\xd2\x3e\xd8\x92\x24\x49\x6d\xf5\
\x22\x70\x2e\x3a\x84\xfa\x5f\x88\xde\x6f\x01\x19\x1b\xe4\x22\xaa\
\xdc\xde\xe8\x00\x92\x24\x49\xc1\x2e\xe0\x71\x04\x25\xd8\xd2\xef\
\x5f\xe8\xb7\x80\x6c\x04\x96\xf5\x7b\x11\x55\xce\x02\x22\x49\x92\
\xe4\x3d\x51\x09\xae\xa5\xcf\x75\x20\xfd\x16\x90\x2d\x7d\x7e\xbc\
\xaa\x77\x14\xa7\x5f\x49\x92\x24\x41\x5a\x88\x3e\x15\x1d\x42\xfd\
\x75\x04\x0b\x48\xf3\xbc\x18\x1d\x40\x92\x24\xa9\x10\xe7\x71\x37\
\xac\x12\xf4\xb5\x44\xa3\xdf\x02\xe2\xfa\x8f\x78\x0e\x35\x4a\x92\
\x24\x5d\xe4\xbd\x51\xbc\x2d\xfd\x7c\x70\x3f\x05\x64\x23\x9e\xff\
\x11\xed\x04\xf0\x6a\x74\x08\x49\x92\xa4\x82\xec\xc3\x69\x58\xd1\
\xae\x03\x56\xf4\xfa\xc1\xfd\x14\x10\x47\x3f\xe2\xd9\xf0\x25\x49\
\x92\x2e\x75\x16\x38\x10\x1d\x42\xbd\x77\x85\x7e\x0a\xc8\x96\xfe\
\x73\xa8\x62\xae\xff\x90\x24\x49\xba\x92\xf7\x48\xf1\xb6\xf4\xfa\
\x81\x8e\x80\x34\xc7\x39\x9c\x7e\x25\x49\x92\xd4\x8d\xe7\x81\xc4\
\xab\x7c\x04\x64\x0d\x70\xd5\x60\x59\x54\x91\x03\xa4\x03\x77\x24\
\x49\x92\x74\xa9\x93\xc0\xa1\xe8\x10\x2d\xb7\x11\x18\xef\xe5\x03\
\x7b\x2d\x20\x9b\x07\xcf\xa2\x8a\xd8\xec\x25\x49\x92\xe6\xe7\xbd\
\x52\xac\x25\xa4\x12\xb2\xa8\x5e\x0b\xc8\xa6\xc1\xb3\xa8\x22\x7e\
\x51\x49\x92\x24\xcd\xcf\x7b\xa5\x78\x3d\x4d\xc3\xea\xb5\x80\xb8\
\xfe\x23\xd6\x21\xd2\xd0\xa2\x24\x49\x92\xba\x7b\x9d\x74\x64\x81\
\xe2\xf4\x34\x6b\xaa\x97\x02\x32\x46\x8f\xc3\x29\xaa\x8d\x3b\x3b\
\x48\x92\x24\x2d\xce\x51\x90\x58\x95\x15\x90\x8d\xc0\xd2\xe1\xb2\
\x68\x48\xfb\xa3\x03\x48\x92\x24\x35\x80\xf7\x4c\xb1\xae\x06\x56\
\x2f\xf6\x41\xbd\x14\x10\xa7\x5f\xc5\x3a\x03\xbc\x19\x1d\x42\x92\
\x24\xa9\x01\x0e\x00\xd3\xd1\x21\x5a\x6e\xd1\x51\x90\x5e\x0a\x88\
\x3b\x60\xc5\x3a\x08\xcc\x44\x87\x90\x24\x49\x6a\x80\xb3\xc0\x5b\
\xd1\x21\x5a\xce\x02\x32\x02\x1c\x4a\x94\x24\x49\xea\x9d\xf7\x4e\
\xb1\x86\x2e\x20\x93\xc0\xda\x6a\xb2\x68\x40\x07\xa2\x03\x48\x92\
\x24\x35\x88\xf7\x4e\xb1\x16\xdd\xbc\x6a\xb1\x02\xe2\xee\x57\xb1\
\x8e\x02\xef\x45\x87\x90\x24\x49\x6a\x90\x57\x81\x73\xd1\x21\x5a\
\x6c\x19\xb0\x7e\xa1\x0f\x58\xac\x80\x78\x00\x61\x2c\x87\x10\x25\
\x49\x92\xfa\x33\x43\x5a\x43\xab\x38\x0b\x0e\x62\x38\x02\x52\xb6\
\x83\xd1\x01\x24\x49\x92\x1a\xc8\x69\x58\xb1\x16\x1c\xc4\x70\x04\
\xa4\x6c\x07\xa3\x03\x48\x92\x24\x35\xd0\xc1\xe8\x00\x2d\x37\xf0\
\x08\xc8\x38\xb0\xae\xda\x2c\xea\xc3\xbb\xc0\xc9\xe8\x10\x92\x24\
\x49\x0d\x74\x98\x74\x96\x9a\x62\x0c\x5c\x40\x36\x02\x4b\xaa\xcd\
\xa2\x3e\x1c\x8c\x0e\x20\x49\x92\xd4\x50\x33\xa4\xc5\xe8\x8a\xb1\
\x12\x58\x33\xdf\xff\xb8\x58\x01\x51\x9c\x83\xd1\x01\x24\x49\x92\
\x1a\xcc\x02\x12\x6b\xde\x2e\xb1\x50\x01\x71\xfd\x47\xac\x83\xd1\
\x01\x24\x49\x92\x1a\xec\x60\x74\x80\x96\x1b\xa8\x80\x38\x02\x12\
\xe7\x28\x70\x3c\x3a\x84\x24\x49\x52\x83\xbd\x89\xe7\x81\x44\x9a\
\x77\x30\x63\xa1\x02\xb2\xe0\x01\x22\xaa\xd5\xc1\xe8\x00\x92\x24\
\x49\x0d\x37\x03\xbc\x1e\x1d\xa2\xc5\xe6\xed\x12\xf3\x15\x90\x35\
\xa4\x53\x0c\x15\xc3\x2f\x16\x49\x92\xa4\xe1\xb9\x0e\x24\xce\x35\
\xa4\x5d\x75\xaf\x30\x5f\x01\xd9\x50\x5f\x16\xf5\xe0\xcd\xe8\x00\
\x92\x24\x49\x23\xc0\x87\xba\xb1\xba\x8e\x82\xcc\x57\x40\x9c\x7e\
\x15\x67\x0a\x78\x2b\x3a\x84\x24\x49\xd2\x08\xb0\x80\xc4\xea\x3a\
\xa8\xe1\x08\x48\x79\xde\x24\xcd\x59\x94\x24\x49\xd2\x70\xce\x92\
\x0e\x77\x56\x0c\x0b\x48\x43\xd8\xd4\x25\x49\x92\xaa\xe3\xbd\x55\
\x9c\xbe\x0a\x88\x53\xb0\xe2\xf8\x45\x22\x49\x92\x54\x1d\xef\xad\
\xe2\xf4\x5c\x40\xdc\x01\x2b\x96\x5f\x24\x92\x24\x49\xd5\xf1\xde\
\x2a\xce\x5a\xba\xec\x84\xd5\xad\x80\x38\xfd\x2a\xce\x09\x3c\x80\
\x50\x92\x24\xa9\x4a\x6f\x91\x36\xf9\x51\x8c\x2b\xba\x45\xb7\x02\
\xe2\xf4\xab\x38\xee\x7e\x25\x49\x92\x54\xad\x19\xe0\x70\x74\x88\
\x16\xbb\xa2\x5b\x74\x2b\x20\xeb\x32\x04\x51\x77\x9e\xff\x21\x49\
\x92\x54\x3d\x1f\xf2\xc6\xb9\xa2\x5b\x58\x40\xca\xe2\x17\x87\x24\
\x49\x52\xf5\xbc\xc7\x8a\x63\x01\x29\x9c\x5f\x1c\x92\x24\x49\xd5\
\x73\x96\x49\x9c\x45\x0b\xc8\x18\xb0\x3a\x4f\x16\x5d\xe6\x1c\xf0\
\x5e\x74\x08\x49\x92\xa4\x11\x74\x18\x98\x8e\x0e\xd1\x52\x8b\x16\
\x90\x75\xc0\x92\x3c\x59\x74\x19\x47\x3f\x24\x49\x92\xea\x71\x1e\
\x1f\xf4\x46\x59\x09\x4c\xce\xfd\x83\x6e\x05\x44\x31\x1c\x1a\x94\
\x24\x49\xaa\x8f\x0f\x7b\xe3\x5c\xd2\x31\x2c\x20\xe5\x70\x7b\x38\
\x49\x92\xa4\xfa\x78\xaf\x15\xc7\x02\x52\xa8\x23\xd1\x01\x24\x49\
\x92\x46\x98\x05\x24\x8e\x05\xa4\x50\x7e\x51\x48\x92\x24\xd5\xc7\
\x7b\xad\x38\x16\x90\x02\x9d\x00\xce\x46\x87\x90\x24\x49\x1a\x61\
\xef\x03\x53\xd1\x21\x5a\x6a\xc1\x02\xe2\x16\xbc\x31\x6c\xe4\x92\
\x24\x49\xf5\x9a\xc1\x9d\xb0\xa2\x5c\xd2\x31\xe6\x16\x90\x15\xc0\
\xd2\xbc\x59\x34\xcb\xf5\x1f\x92\x24\x49\xf5\xf3\xa1\x6f\x8c\x79\
\x0b\x88\xa3\x1f\x71\xfc\x62\x90\x24\x49\xaa\x9f\xf7\x5c\x31\x96\
\x30\xa7\x6b\xcc\x2d\x20\x6b\xf2\x67\xd1\x2c\x47\x40\x24\x49\x92\
\xea\xe7\x3d\x57\x9c\xae\x05\xc4\x11\x90\x38\xce\x47\x94\x24\x49\
\xaa\x9f\xf7\x5c\x71\x1c\x01\x29\xc8\x14\x70\x3c\x3a\x84\x24\x49\
\x52\x0b\x58\x40\xe2\x7c\xd0\x35\x1c\x01\x89\xe7\x17\x82\x24\x49\
\x52\x1e\xe7\x49\xc7\x1f\x28\x3f\xa7\x60\x15\xe4\xfd\xe8\x00\x92\
\x24\x49\x2d\xe2\xc3\xdf\x18\x5d\x47\x40\x9c\x82\x15\xc3\xc5\x50\
\x92\x24\x49\xf9\x58\x40\x62\x74\x1d\x01\x59\x15\x10\x44\x7e\x11\
\x48\x92\x24\xe5\xe4\xbd\x57\x8c\x2b\x0a\xc8\x0a\xd2\xfe\xbc\xca\
\xcf\x2f\x02\x49\x92\xa4\x7c\xbc\xf7\x8a\xb1\xa2\xf3\x9b\xb1\xcb\
\xff\x40\xd9\xb9\x06\x44\x92\x24\x29\x1f\xef\xbd\x62\x2c\x61\xb6\
\x73\x74\x0a\x88\xd3\xaf\xe2\xb8\x05\xaf\x24\x49\x52\x3e\xde\x7b\
\xc5\x59\x05\x16\x90\x68\xa7\x80\x0b\xd1\x21\x24\x49\x92\x5a\xe4\
\x24\x30\x1d\x1d\xa2\xa5\x2c\x20\x05\xb0\x81\x4b\x92\x24\xe5\x35\
\x43\x2a\x21\xca\xcf\x02\x52\x00\x0b\x88\x24\x49\x52\x7e\xae\x03\
\x89\x71\xc9\x1a\x10\x17\xa1\xc7\xf0\x93\x5f\x92\x24\x29\x3f\x1f\
\x02\xc7\xb8\x64\x04\xc4\x53\xd0\x63\xf8\xc9\x2f\x49\x92\x94\x9f\
\x0f\x81\x63\x5c\x52\x40\x1c\x01\x89\x61\x01\x91\x24\x49\xca\xcf\
\x7b\xb0\x18\x16\x90\x02\xb8\x00\x4a\x92\x24\x29\x3f\xef\xc1\x62\
\xb8\x06\xa4\x00\x7e\xf2\x4b\x92\x24\xe5\x77\x3a\x3a\x40\x4b\x4d\
\xc2\xc5\x02\xb2\x2c\x30\x48\x9b\x59\x40\x24\x49\x92\xf2\xf3\x1e\
\x2c\xc6\x07\x05\x64\x32\x38\x48\x5b\x4d\x63\xfb\x96\x24\x49\x8a\
\x60\x01\x89\x61\x01\x09\x66\xf9\x90\x24\x49\x8a\x71\x16\x4f\x43\
\x8f\xb0\x04\x98\x18\xc3\xf5\x1f\x51\x2c\x20\x92\x24\x49\x71\x1c\
\x05\x89\x31\xe9\x08\x48\x1c\x3f\xe9\x25\x49\x92\xe2\x78\x2f\x16\
\xc3\x02\x12\xc8\x11\x10\x49\x92\xa4\x38\xde\x8b\xc5\x58\x61\x01\
\x89\xe3\x27\xbd\x24\x49\x52\x9c\xb3\xd1\x01\x5a\xca\x11\x90\x40\
\x7e\xd2\x4b\x92\x24\xc5\xf1\x5e\x2c\x86\x05\x24\x90\x9f\xf4\x92\
\x24\x49\x71\xbc\x17\x8b\x31\x39\x06\x8c\x47\xa7\x68\x29\x3f\xe9\
\x25\x49\x92\xe2\x78\x2f\x16\x63\x7c\x0c\x98\x88\x4e\xd1\x52\xe7\
\xa3\x03\x48\x92\x24\xb5\x98\xeb\x71\x63\x4c\x38\x02\x12\xc7\x4f\
\x7a\x49\x92\xa4\x38\x8e\x80\xc4\x18\xb7\x80\xc4\xf1\x93\x5e\x92\
\x24\x29\x8e\xf7\x62\x31\x26\x9c\x82\x15\xc7\x29\x58\x92\x24\x49\
\x71\xbc\x17\x8b\xe1\x1a\x90\x40\x7e\xd2\x4b\x92\x24\xc5\xf1\x5e\
\x2c\xc6\xf8\x18\x30\x16\x9d\xa2\xa5\x2e\x44\x07\x90\x24\x49\x6a\
\x31\xef\xc5\x62\x4c\x78\x0e\x48\x1c\x3f\xe9\x25\x49\x92\xe2\x78\
\x2f\x16\xc3\x5d\xb0\x02\x39\xec\x27\x49\x92\x14\xc7\x7b\xb1\x18\
\x63\x16\x90\x18\x53\xd1\x01\x24\x49\x92\x5a\xce\x02\x12\x63\xd2\
\x35\x20\x31\x1c\xf2\x93\x24\x49\x8a\x35\x13\x1d\xa0\xad\x1c\x01\
\x89\x61\xe3\x96\x24\x49\x8a\x77\x26\x3a\x40\x1b\x39\xfa\x21\x49\
\x92\x24\x29\x97\x49\x0b\x48\x0c\xa7\x60\x49\x92\x24\xc5\xf3\x9e\
\x2c\x80\x05\x24\x86\x9f\xec\x92\x24\x49\xf1\x5c\x07\x12\xc0\x35\
\x20\x92\x24\x49\x92\xb2\x19\x03\x96\x46\x87\x90\x24\x49\x92\xd4\
\x0a\xe3\x4e\xc1\x92\x24\x49\x52\x5b\x39\x05\x2b\xbf\x31\x0b\x48\
\x0c\xb7\xe1\x95\x24\x49\x8a\xe7\x3d\x59\x00\x0b\x48\x0c\xdb\xb6\
\x24\x49\x92\x5a\xc9\x02\x22\x49\x92\x24\x29\x1b\x0b\x48\x0c\xff\
\xbd\x4b\x92\x24\xa9\x95\xbc\x11\x8e\x31\x11\x1d\x40\x92\x24\x49\
\xde\x93\x45\xb0\x80\x48\x92\x24\xa9\xad\xbc\x17\xce\x6f\x66\x0c\
\x98\x8a\x4e\x21\x49\x92\x24\xa9\x15\x2e\x8c\x01\x17\xa2\x53\x48\
\x92\x24\x49\x6a\x07\x87\x9d\x62\x8c\x47\x07\x90\x24\x49\x92\xf7\
\xc2\x11\xfc\x97\x1e\xc3\x02\x22\x49\x92\x14\xcf\x7b\xb2\x00\x16\
\x10\x49\x92\x24\x49\xb9\x9c\x1d\xc3\x23\xe8\x23\xb8\xe5\x9b\x24\
\x49\x52\xbc\xe5\xd1\x01\xda\xc8\x11\x90\x18\x0e\xf7\x49\x92\x24\
\xc5\xf2\x7e\x2c\x88\xbb\x60\xc5\x58\x1a\x1d\x40\x92\x24\xa9\xe5\
\x2c\x20\x31\xce\x5a\x40\xe2\x38\x0d\x4b\x92\x24\x29\x8e\xf7\x62\
\x31\x66\xc6\x80\xb3\xd1\x29\x5a\xca\xd6\x2d\x49\x92\x14\xc7\x7b\
\xb1\x18\xe7\xc7\x80\x99\xe8\x14\x2d\xe5\x27\xbd\x24\x49\x52\x1c\
\xef\xc5\x62\x9c\x77\x17\xac\x38\x0e\xfb\x49\x92\x24\xc5\xf1\x5e\
\x2c\xc6\x05\x0b\x48\x1c\x3f\xe9\x25\x49\x92\xe2\x78\x2f\x16\xe3\
\x82\x8b\xd0\xe3\x4c\x46\x07\x90\x24\x49\x6a\x31\xef\xc5\x62\x9c\
\xb7\x80\xc4\x59\x11\x1d\x40\x92\x24\xa9\xc5\x2c\x20\x31\x9c\x82\
\x15\xc8\x4f\x7a\x49\x92\xa4\x38\x3e\x0c\x8e\xe1\x08\x48\x20\x0b\
\x88\x24\x49\x52\x1c\xef\xc5\x62\x5c\xf0\x1c\x90\x38\x7e\xd2\x4b\
\x92\x24\xc5\xf1\x5e\x2c\xc6\x59\x0b\x48\x1c\x77\x5e\x90\x24\x49\
\x8a\x63\x01\x89\x71\x76\x0c\x38\x1d\x9d\xa2\xa5\x9c\x77\x28\x49\
\x92\x14\xc7\x02\x12\xc3\x11\x90\x40\x16\x10\x49\x92\xa4\x38\xde\
\x8b\xc5\xb0\x80\x04\x5a\x15\x1d\x40\x92\x24\xa9\xc5\xbc\x17\x8b\
\x71\xda\x02\x12\xc7\x4f\x7a\x49\x92\xa4\x38\xde\x8b\xc5\x70\x04\
\x24\xd0\x4a\x60\x2c\x3a\x84\x24\x49\x52\x0b\x4d\x02\x4b\xa2\x43\
\xb4\xd0\x34\xb3\xe7\x80\x58\x40\xe2\x38\xf7\x50\x92\x24\x29\x3f\
\xef\xc1\x62\x9c\x85\x8b\x4f\xe0\xcf\x05\x06\x69\x33\x3f\xf9\x25\
\x49\x92\xf2\x73\xfa\x55\x8c\x4b\x0a\x88\x5b\xf1\xc6\xf0\x93\x5f\
\x92\x24\x29\x3f\xef\xc1\x62\x58\x40\x0a\xe0\x27\xbf\x24\x49\x52\
\x7e\xde\x83\xc5\x38\x0d\x17\x0b\xc8\xc9\xc0\x20\x6d\xb6\x3a\x3a\
\x80\x24\x49\x52\x0b\x79\x0f\x16\xe3\x24\x58\x40\xa2\xf9\xc9\x2f\
\x49\x92\x94\x9f\xf7\x60\x31\x2e\x29\x20\x4e\xc1\x8a\xb1\x26\x3a\
\x80\x24\x49\x52\x0b\x79\x0f\x16\xc3\x11\x90\x02\xd8\xbe\x25\x49\
\x92\xf2\xf3\x1e\x2c\x86\x6b\x40\x0a\xe0\x27\xbf\x24\x49\x52\x7e\
\xde\x83\xc5\x70\x04\xa4\x00\x2b\x81\xf1\xe8\x10\x92\x24\x49\x2d\
\xb2\x0a\x4f\x41\x8f\x62\x01\x29\x84\x0d\x5c\x92\x24\x29\x1f\xd7\
\x7f\xc4\xb9\x64\x0a\x96\x8b\xd0\xe3\xac\x8b\x0e\x20\x49\x92\xd4\
\x22\x16\x90\x38\x57\x14\x90\xe9\xb8\x2c\xad\x66\x01\x91\x24\x49\
\xca\xc7\x7b\xaf\x18\x27\x80\x19\xb8\x58\x40\x00\x8e\xc7\x64\x69\
\x3d\x5b\xb8\x24\x49\x52\x3e\x16\x90\x18\x1f\x2c\xf9\xb0\x80\xc4\
\x5b\x1f\x1d\x40\x92\x24\xa9\x45\x2c\x20\x31\xde\xef\xfc\xc6\x02\
\x12\xcf\x11\x10\x49\x92\xa4\x7c\x2c\x20\x31\x3e\xe8\x1a\x73\x0b\
\xc8\xfb\x5d\x3e\x50\xf5\xf3\x8b\x40\x92\x24\x29\x8f\x09\xe0\xaa\
\xe8\x10\x2d\xe5\x08\x48\x41\x96\xe2\x56\xbc\x92\x24\x49\x39\x38\
\xf3\x24\x8e\x23\x20\x85\x71\x14\x44\x92\x24\xa9\x7e\xde\x73\xc5\
\x71\x04\xa4\x30\x2e\x44\x97\x24\x49\xaa\xdf\x86\xe8\x00\x2d\xd6\
\x75\x04\xc4\x02\x12\xc7\x2f\x06\x49\x92\xa4\xfa\xf9\xd0\x37\xc6\
\x34\xf3\x6c\xc3\x7b\x1a\x98\xca\x1e\x47\x60\x01\x91\x24\x49\xca\
\xc1\x7b\xae\x18\xc7\x99\x3d\x84\x10\x2e\x2d\x20\xe0\x3a\x90\x28\
\xb6\x71\x49\x92\xa4\xfa\x79\xcf\x15\xe3\x92\x99\x56\x16\x90\x32\
\x5c\x05\x4c\x46\x87\x90\x24\x49\x1a\x61\xeb\x48\xbb\x8f\x2a\xbf\
\x4b\x3a\xc6\xe5\x05\xe4\xbd\x8c\x41\x74\x29\x87\x04\x25\x49\x92\
\xea\xe3\xe8\x47\x9c\x23\x73\xff\xc1\x02\x52\x0e\x0b\x88\x24\x49\
\x52\x7d\xbc\xd7\x8a\x73\x49\xc7\xb8\xbc\x80\x1c\x41\x51\x6c\xe5\
\x92\x24\x49\xf5\xb1\x80\xc4\x59\xb0\x80\xb8\x06\x24\xce\xa6\xe8\
\x00\x92\x24\x49\x23\x6c\x63\x74\x80\x16\x5b\xb0\x80\xbc\x47\xda\
\xa7\x57\xf9\xf9\x45\x21\x49\x92\x54\x8f\x71\x9c\x6d\x12\xe5\x0c\
\x70\x76\xee\x1f\x5c\x5e\x40\x66\xf0\x40\xc2\x28\xcb\x48\xbb\x33\
\x48\x92\x24\xa9\x5a\x1b\x80\x25\xd1\x21\x5a\xea\x8a\x35\xe6\x97\
\x17\x90\xae\x1f\xa4\x6c\x9c\x86\x25\x49\x92\x54\x3d\xef\xb1\xe2\
\x58\x40\x0a\xe7\x34\x2c\x49\x92\xa4\xea\x79\x8f\x15\xc7\x02\x52\
\x38\xbf\x38\x24\x49\x92\xaa\xe7\x3d\x56\x9c\x2b\x76\xd9\xed\x56\
\x40\x0e\x67\x08\xa2\xee\x1c\x1e\x94\x24\x49\xaa\xd6\x18\x16\x90\
\x48\x16\x90\xc2\xad\x04\xd6\x44\x87\x90\x24\x49\x1a\x21\x1b\x80\
\xa5\xd1\x21\x5a\xac\xa7\x02\x72\x1c\x38\x57\x7f\x16\xcd\xc3\x51\
\x10\x49\x92\xa4\xea\x6c\x8e\x0e\xd0\x62\x47\x81\xf3\x97\xff\x61\
\xb7\x02\x02\x9e\x88\x1e\xc9\x2f\x12\x49\x92\xa4\xea\xf8\x70\x37\
\x4e\xd7\x99\x55\xf3\x15\x10\xa7\x61\xc5\xb9\x29\x3a\x80\x24\x49\
\xd2\x08\xf1\xe1\x6e\x9c\xae\x83\x1a\x16\x90\xf2\x6c\x64\xfe\xff\
\x2e\x92\x24\x49\xea\xdd\x24\x70\x5d\x74\x88\x16\x73\x04\xa4\x21\
\x96\xe2\x4e\x0d\x92\x24\x49\x55\x70\xfa\x55\x2c\x0b\x48\x83\x38\
\x54\x28\x49\x92\x34\x3c\xa7\xb6\xc7\xea\x6b\x0a\x96\x3b\x61\xc5\
\xb2\x80\x48\x92\x24\x0d\xcf\x7b\xaa\x38\x5d\x77\xc0\x82\x85\xd7\
\x1a\xb8\x13\x56\x9c\x2d\xd1\x01\x24\x49\x92\x1a\x6e\x0c\x0b\x48\
\xa4\x79\x67\x54\x2d\x54\x40\xde\xac\x21\x88\x7a\x73\x35\x1e\x48\
\x28\x49\x92\x34\x8c\x0d\xc0\xf2\xe8\x10\x2d\xf6\xd6\x7c\xff\xc3\
\x42\x05\x64\xde\xbf\xa4\x2c\xb6\x44\x07\x90\x24\x49\x6a\xb0\x2d\
\xd1\x01\x5a\x6e\xa0\x02\xe2\x08\x48\x2c\x17\x4d\x49\x92\x24\x0d\
\x6e\x4b\x74\x80\x96\x9b\xb7\x4b\x2c\x54\x40\x0e\x03\xd3\xd5\x67\
\x51\x8f\xb6\x44\x07\x90\x24\x49\x6a\x30\x1f\xe6\xc6\x39\x03\xbc\
\x3f\xdf\xff\xb8\x50\x01\xb9\x80\x0b\xd1\x23\x5d\x03\xac\x8a\x0e\
\x21\x49\x92\xd4\x40\x1b\x80\x95\xd1\x21\x5a\x6c\xc1\xa5\x1c\x8b\
\x9d\xb8\xed\x34\xac\x58\x5b\xa2\x03\x48\x92\x24\x35\xd0\x96\xe8\
\x00\x2d\x37\x54\x01\x71\x21\x7a\xac\xad\xd1\x01\x24\x49\x92\x1a\
\xc8\x7b\xa8\x58\x16\x90\x06\xf3\x8b\x47\x92\x24\xa9\x3f\x63\x38\
\x02\x12\x6d\xc1\x59\x54\x16\x90\xb2\xad\x05\xd6\x45\x87\x90\x24\
\x49\x6a\x90\x4d\x78\xfe\x47\xa4\x29\x16\x59\x47\xbe\x58\x01\x39\
\x0b\xbc\x5b\x59\x1c\x0d\xe2\xd6\xe8\x00\x92\x24\x49\x0d\xe2\x0c\
\x92\x58\x87\x81\x99\x85\x3e\x60\xb1\x02\x02\xf0\x7a\x35\x59\x34\
\x20\xbf\x88\x24\x49\x92\x7a\xe7\xc3\xdb\x58\xaf\x2e\xf6\x01\x16\
\x90\xf2\x6d\xa1\xb7\xff\x4e\x92\x24\x49\x6d\x37\x01\x6c\x8e\x0e\
\xd1\x72\x8b\x76\x07\x0b\x48\xf9\x96\x93\xe6\x32\x4a\x92\x24\x69\
\x61\x5b\x80\x25\xd1\x21\x5a\xae\x92\x02\xf2\x16\x69\x31\x89\xe2\
\x6c\x8b\x0e\x20\x49\x92\xd4\x00\xde\x33\xc5\x3a\xc1\x02\x27\xa0\
\x77\xf4\x52\x40\x66\x70\x37\xac\x68\x7e\x31\x49\x92\x24\x2d\xce\
\x7b\xa6\x58\x3d\xcd\x9c\xea\x75\x6d\xc1\xa2\x8b\x49\x54\xab\xeb\
\x81\x55\xd1\x21\x24\x49\x92\x0a\xb6\x01\xb8\x3a\x3a\x44\xcb\x2d\
\x78\xfe\x47\x47\xaf\x05\xc4\x75\x20\xf1\x6c\xf4\x92\x24\x49\xf3\
\xf3\x5e\x29\x5e\x4f\x83\x16\x16\x90\xe6\xd8\x1e\x1d\x40\x92\x24\
\xa9\x60\x16\x90\x58\xd3\x54\x3c\x02\x72\x1c\x38\x36\x70\x1c\x55\
\x61\x2b\x30\x1e\x1d\x42\x92\x24\xa9\x40\x93\xb8\xfd\x6e\xb4\xc3\
\xc0\xf9\x5e\x3e\xb0\x9f\xf3\x25\x5c\x07\x12\x6b\x29\x1e\x4a\x28\
\x49\x92\xd4\xcd\x36\xdc\x7e\x37\x5a\xcf\x5d\xc1\x02\xd2\x2c\x0e\
\x2d\x4a\x92\x24\x5d\xc9\x7b\xa4\x78\xb5\x14\x90\x83\xfd\xe7\x50\
\xc5\x5c\x07\x22\x49\x92\x74\xa9\x71\x2c\x20\x25\x38\xd8\xeb\x07\
\xf6\x53\x40\x0e\x03\xa7\xfa\x8e\xa2\x2a\x5d\x05\xdc\x14\x1d\x42\
\x92\x24\xa9\x20\xb7\x02\xcb\xa2\x43\xb4\xdc\x3b\xc0\xc9\x5e\x3f\
\xb8\x9f\x02\x02\x4e\xc3\x2a\xc1\x1d\xd1\x01\x24\x49\x92\x0a\xe2\
\xbd\x51\xbc\xbe\x3a\x42\xbf\x05\xe4\x60\x9f\x1f\xaf\xea\xf9\x45\
\x26\x49\x92\x94\x8c\xe1\xf4\xab\x12\x1c\xec\xe7\x83\x2d\x20\xcd\
\x73\x35\xb0\x29\x3a\x84\x24\x49\x52\x01\xb6\x02\xcb\xa3\x43\xa8\
\xde\x02\x72\x18\x38\xd3\xe7\xdf\x51\xf5\xee\x8a\x0e\x20\x49\x92\
\x54\x00\x67\x86\xc4\x3b\x4a\x3a\x33\xb0\x67\xfd\x16\x90\x19\x5c\
\x07\x52\x02\xbf\xd8\x24\x49\x52\xdb\x8d\xe1\x0e\xa1\x25\x38\xd8\
\xef\x5f\xe8\xb7\x80\x80\x05\xa4\x04\x6b\x71\x1a\x96\x24\x49\x6a\
\xb7\xad\xc0\xca\xe8\x10\xca\x53\x40\xf6\x0f\xf0\x77\x54\xbd\xbb\
\xa3\x03\x48\x92\x24\x05\xf2\x5e\xa8\x0c\x07\xfa\xfd\x0b\x83\x14\
\x90\xb7\xf0\x3c\x90\x12\xdc\xc5\x60\xff\xfd\x24\x49\x92\x9a\x6e\
\x1c\xa7\x5f\x95\xe0\x1d\xfa\x5c\xff\x01\x83\xdf\xc0\xf6\xdd\x74\
\x54\xb9\xab\x80\x2d\xd1\x21\x24\x49\x92\x02\x6c\xc7\xc3\x07\x4b\
\x30\x50\x27\xb0\x80\x34\x9b\x43\x8f\x92\x24\xa9\x8d\xdc\x11\xb4\
\x0c\x03\x2d\xcd\x18\xb4\x80\xb8\x0e\xa4\x0c\xdb\x49\x43\x90\x92\
\x24\x49\x6d\x31\x09\xdc\x1a\x1d\x42\x4c\x33\xe0\x19\x81\x83\x16\
\x90\xe3\xa4\x39\x5f\x8a\xb5\x1c\xbf\x00\x25\x49\x52\xbb\xdc\x01\
\x2c\x8d\x0e\x21\x5e\x07\xce\x0f\xf2\x17\x87\x59\xc4\xec\x34\xac\
\x32\xec\x8c\x0e\x20\x49\x92\x94\x91\xf7\x3e\x65\x18\x78\x46\xd4\
\x30\x05\xc4\x69\x58\x65\xb8\x15\x58\x15\x1d\x42\x92\x24\x29\x83\
\xf5\xc0\x8d\xd1\x21\x04\x04\x15\x90\x83\xa4\xb9\x5f\x8a\xb5\x04\
\xd8\x11\x1d\x42\x92\x24\x29\x03\xef\x79\xca\x70\x86\x74\x34\xc7\
\x40\x86\x29\x20\xe7\xf1\x54\xf4\x52\xf8\xc5\x28\x49\x92\x46\xdd\
\x18\xee\x00\x5a\x8a\x03\xc0\xcc\xa0\x7f\x79\xd8\x83\xec\xf6\x0d\
\xf9\xf7\x55\x8d\x6b\x81\xcd\xd1\x21\x24\x49\x92\x6a\xb4\x15\xb8\
\x3a\x3a\x84\x80\x21\x3b\x80\x05\x64\x74\x38\x0a\x22\x49\x92\x46\
\x99\xf7\x3a\x65\x98\x06\x5e\x1c\xe6\x0d\x86\x2d\x20\x47\x80\x77\
\x87\x7c\x0f\x55\xe3\x2e\x3c\x13\x44\x92\x24\x8d\xa6\x15\xa4\xf3\
\xcf\x14\xef\x75\xe0\xec\x30\x6f\x30\x6c\x01\x81\x21\x1b\x90\x2a\
\xb3\x1c\xe7\x45\x4a\x92\xa4\xd1\xb4\x03\xcf\xfe\x28\xc5\xd0\x33\
\xa0\xaa\x28\x20\x4e\xc3\x2a\xc7\x3d\xd1\x01\x24\x49\x92\x6a\xe0\
\x3d\x4e\x39\x8a\x28\x20\xaf\x92\xb6\xe2\x52\xbc\x1b\x80\x4d\xd1\
\x21\x24\x49\x92\x2a\xb4\x15\xb8\x26\x3a\x84\x00\x38\x0a\x1c\x1e\
\xf6\x4d\xaa\x28\x20\x33\x78\x2a\x7a\x49\x7c\x42\x20\x49\x92\x46\
\x89\xf7\x36\xe5\xa8\x64\xe9\x45\x15\x05\x04\x5c\x07\x52\x92\xbb\
\x80\xc9\xe8\x10\x92\x24\x49\x15\x58\x85\x8b\xcf\x4b\x52\xc9\xd2\
\x8b\xaa\x0a\xc8\x3e\x3c\x15\xbd\x14\xcb\x70\x31\xba\x24\x49\x1a\
\x0d\x3b\x81\x25\xd1\x21\x04\xc0\x39\x2a\x3a\x84\xbc\xaa\x02\x72\
\x16\x38\x58\xd1\x7b\x69\x78\xf7\x46\x07\x90\x24\x49\x1a\xd2\x18\
\x4e\xbf\x2a\xc9\x3e\xe0\x42\x15\x6f\x54\x55\x01\x01\xa7\x61\x95\
\xe4\x5a\xe0\xd6\xe8\x10\x92\x24\x49\x43\xb8\x03\x4f\x3e\x2f\xc9\
\xde\xaa\xde\xa8\xca\x02\x52\x59\x28\x55\x62\x57\x74\x00\x49\x92\
\xa4\x21\x78\x2f\x53\x8e\x29\x60\x7f\x55\x6f\x56\x65\x01\x39\x09\
\xbc\x52\xe1\xfb\x69\x38\xb7\x01\xeb\xa2\x43\x48\x92\x24\x0d\x60\
\x33\x70\x63\x74\x08\x7d\x60\x3f\x70\xbe\xaa\x37\xab\xb2\x80\x80\
\xa3\x20\xa5\xf1\xc9\x81\x24\x49\x6a\x22\xd7\xb3\x96\xe5\xf9\x2a\
\xdf\xcc\x02\x32\xda\x76\xe0\x96\xbc\x92\x24\xa9\x59\x56\x91\x8e\
\x15\x50\x19\xa6\xa8\x68\xfb\xdd\x8e\xaa\x0b\xc8\x71\xe0\x8d\x8a\
\xdf\x53\x83\x5b\x46\xda\xbe\x4e\x92\x24\xa9\x29\xee\xc5\xad\x77\
\x4b\x72\x80\x0a\xa7\x5f\x41\xf5\x05\x04\x2a\x1e\xa2\xd1\xd0\x76\
\x51\xcf\x7f\x67\x36\x9c\x64\xa7\x00\x00\x20\x00\x49\x44\x41\x54\
\x49\x92\xa4\xaa\x4d\xe0\xd6\xbb\xa5\xa9\x7c\x86\x53\x1d\x37\xa6\
\x4e\xc3\x2a\xcb\xd5\x38\x8c\x29\x49\x92\x9a\x61\x27\xb0\x32\x3a\
\x84\x3e\x30\x4d\x0d\x47\x6d\xd4\x51\x40\xde\xc7\x69\x58\xa5\xb9\
\x2f\x3a\x80\x24\x49\xd2\x22\xc6\x80\xdd\xd1\x21\x74\x89\xfd\xa4\
\x03\xc7\x2b\x55\xd7\xd4\x1c\xa7\x61\x95\xe5\x3a\x60\x5b\x74\x08\
\x49\x92\xa4\x05\xdc\x8d\x07\x0f\x96\xa6\x96\x7b\xfa\xba\x0a\xc8\
\x1e\xd2\x90\x8d\xca\xe1\x28\x88\x24\x49\x2a\x99\xa3\x1f\x65\x39\
\x47\x0d\xd3\xaf\xa0\xbe\x02\x72\x12\x38\x58\xd3\x7b\x6b\x30\x1f\
\x22\x1d\xea\x23\x49\x92\x54\x9a\x6d\xa4\x19\x1b\x2a\xc7\x8b\x54\
\xbc\xfb\x55\x47\x9d\xbb\x23\xed\xa9\xf1\xbd\x35\x98\x4f\x44\x07\
\x90\x24\x49\xea\xc2\x99\x1a\xe5\xa9\x6d\x49\x45\x9d\x05\x64\x2f\
\xe9\xe0\x12\x95\xe3\x76\x60\x43\x74\x08\x49\x92\xa4\x39\xb6\x90\
\x66\x6a\xa8\x1c\xa7\x48\x0b\xd0\x6b\x51\x67\x01\x39\x4f\xc5\xa7\
\x26\xaa\x12\xf7\x47\x07\x90\x24\x49\x9a\xe3\xfe\xe8\x00\xba\xc2\
\x5e\x60\xa6\xae\x37\xaf\xfb\x80\x3a\xa7\x61\x95\xe7\x4e\x1c\x05\
\x91\x24\x49\x65\xb8\x09\xb8\x39\x3a\x84\xae\x50\xeb\x3d\x7c\xdd\
\x05\x64\x3f\x70\xa6\xe6\x6b\xa8\x7f\xf7\x47\x07\x90\x24\x49\xc2\
\x7b\x92\x12\x1d\x05\x5e\xad\xf3\x02\x75\x17\x90\x0b\x78\x32\x7a\
\x89\x1c\x05\x91\x24\x49\xd1\x6e\x02\x6e\x89\x0e\xa1\x2b\xd4\x3e\
\x83\xa9\xee\x02\x02\xf0\x4c\x86\x6b\xa8\x7f\xee\x88\x25\x49\x92\
\x22\xdd\x1f\x1d\x40\x5d\x3d\x5b\xf7\x05\x72\x14\x90\xd7\x81\x77\
\x32\x5c\x47\xfd\xf9\x08\x8e\x82\x48\x92\xa4\x18\x9b\x71\xf4\xa3\
\x44\xaf\x00\xef\xd5\x7d\x91\x1c\x05\x04\x32\x34\x29\x0d\xe4\x81\
\xe8\x00\x92\x24\xa9\x95\x1e\x8c\x0e\xa0\xae\xb2\xcc\x5c\xca\x59\
\x40\xa6\x33\x5d\x4b\xbd\xfb\x30\xb0\x29\x3a\x84\x24\x49\x6a\x95\
\xad\xb8\xf3\x55\x89\xce\x91\x69\xed\x76\xae\x02\x72\x92\x1a\x0f\
\x33\xd1\x50\x7c\x02\x21\x49\x92\x72\xf2\xde\xa3\x4c\xcf\x93\xce\
\xf1\xab\x5d\xae\x02\x02\x2e\x46\x2f\xd5\x2d\xa4\x13\x48\x25\x49\
\x92\xea\x76\x07\x70\x43\x74\x08\x75\x95\x6d\xc9\x44\xce\x02\xb2\
\x8f\x74\xac\xbb\xca\xe3\x93\x08\x49\x92\x54\xb7\x31\x5c\x7f\x5a\
\xaa\x77\xa8\xf9\xec\x8f\xb9\x72\x16\x90\x19\x3c\x19\xbd\x54\x37\
\x02\xdb\xa2\x43\x48\x92\xa4\x91\x76\x37\x70\x6d\x74\x08\x75\x95\
\x75\xc3\xa8\x9c\x05\x04\x9c\x86\x55\xb2\x4f\x93\xff\xf3\x41\x92\
\x24\xb5\xc3\x38\x8e\x7e\x94\x6a\x9a\x11\x2f\x20\x87\x49\xfb\x0b\
\xab\x3c\xd7\x02\x3b\xa3\x43\x48\x92\xa4\x91\xb4\x0b\xb8\x3a\x3a\
\x84\xba\xda\x47\xda\x30\x2a\x9b\x88\x27\xde\x4f\x07\x5c\x53\xbd\
\xb9\x1f\x98\x88\x0e\x21\x49\x92\x46\xca\x0a\xe0\x13\xd1\x21\x34\
\xaf\x9f\xe6\xbe\x60\x44\x01\x79\x1e\x17\xa3\x97\xea\x2a\xe0\xbe\
\xe8\x10\x92\x24\x69\xa4\x3c\x00\x2c\x8b\x0e\xa1\xae\xde\x05\x0e\
\xe4\xbe\x68\x44\x01\x99\xc1\xb5\x20\x25\xdb\x0d\xac\x8e\x0e\x21\
\x49\x92\x46\xc2\x7a\x9c\xe2\x5d\xb2\x90\x99\x49\x51\x8b\x8e\x9d\
\x86\x55\xae\xa5\xb8\x2d\xaf\x24\x49\xaa\xc6\x67\x81\x25\xd1\x21\
\xd4\xd5\x14\x99\x17\x9f\x77\x44\x15\x90\xf7\x81\x97\x82\xae\xad\
\xc5\x7d\x14\xd8\x14\x1d\x42\x92\x24\x35\xda\x56\xe0\xb6\xe8\x10\
\x9a\xd7\x5e\xe0\x74\xc4\x85\x23\xb7\x5d\xcd\xbe\xe0\x45\x7d\xf9\
\x5c\x74\x00\x49\x92\xd4\x58\x63\x78\x2f\x51\xba\xb0\x7b\xf1\xc8\
\x02\xb2\x0f\x38\x16\x78\x7d\x2d\xec\x46\x60\x47\x74\x08\x49\x92\
\xd4\x48\xbb\xf0\xd0\xc1\x92\x1d\x02\x5e\x8f\xba\x78\xf4\xc1\x73\
\xae\x05\x29\xdb\x83\xb8\x2d\xaf\x24\x49\xea\xcf\x2a\xd2\xd6\xfe\
\x2a\x57\xe8\x4c\xa4\x12\x0a\xc8\x54\x70\x06\xcd\xef\x2a\xfc\x06\
\x22\x49\x92\xfa\xf3\x20\x6e\xbb\x5b\xb2\x53\xc0\x9e\xc8\x00\xd1\
\x05\xe4\x34\xc1\xff\x02\xb4\xa8\x5d\xa4\x2d\xf4\x24\x49\x92\x16\
\xb3\x19\xf8\x58\x74\x08\x2d\xe8\x69\xe0\x42\x64\x80\xe8\x02\x02\
\xf0\x64\x74\x00\x2d\x68\x09\x2e\x22\x93\x24\x49\xbd\xf1\x9e\xa1\
\x6c\xd3\x14\xb0\x11\x54\x09\x05\xe4\x08\x6e\xc9\x5b\xba\x5b\x80\
\xbb\xa2\x43\x48\x92\xa4\xa2\xdd\x0b\xdc\x10\x1d\x42\x0b\x7a\x1e\
\x38\x19\x1d\xa2\x84\x02\x02\xf0\x54\x74\x00\x2d\xea\xb3\xc0\x64\
\x74\x08\x49\x92\x54\xa4\x55\xc0\x03\xd1\x21\xb4\xa8\xf0\xd1\x0f\
\x28\xa7\x80\xec\x07\xde\x89\x0e\xa1\x05\x5d\x85\x27\xa4\x4b\x92\
\xa4\xee\x3e\x0b\x2c\x8f\x0e\xa1\x05\xbd\x46\xe0\xd6\xbb\x73\x95\
\x52\x40\xa0\x90\x46\xa6\x05\xfd\x6b\xd2\xe2\x32\x49\x92\xa4\x8e\
\x5b\x81\x8f\x44\x87\xd0\xa2\x8a\x99\x71\x54\x52\x01\x79\x16\x38\
\x13\x1d\x42\x8b\xfa\x02\x65\x7d\xde\x48\x92\xa4\x38\xe3\xc0\x43\
\xd1\x21\xb4\xa8\x63\xc0\xde\xe8\x10\x1d\x25\xdd\x48\x9e\xc7\x83\
\x09\x9b\xe0\x3a\x60\x77\x74\x08\x49\x92\x54\x84\xfb\x81\xb5\xd1\
\x21\xb4\xa8\x27\x81\x99\xe8\x10\x1d\x25\x15\x10\x48\x43\x43\x1e\
\x4c\x58\xbe\x4f\x00\xeb\xa2\x43\x48\x92\xa4\x50\x1b\xf1\xa1\x64\
\x13\x9c\x01\x9e\x89\x0e\x31\x57\x69\x05\xe4\x24\x69\x2a\x96\xca\
\xb6\x8c\x34\x15\x4b\x92\x24\xb5\xd3\x18\xe9\x5e\x60\x49\x74\x10\
\x2d\xea\xa7\xa4\x99\x46\xc5\x28\xad\x80\x40\x1a\x22\x9a\x8e\x0e\
\xa1\x45\xdd\x0c\xdc\x13\x1d\x42\x92\x24\x85\xb8\x0f\xcf\xfc\x68\
\x82\x29\x0a\x5a\x7c\xde\x51\x62\x01\x79\x8f\x82\x16\xc9\x68\x41\
\x9f\x06\x56\x47\x87\x90\x24\x49\x59\xad\x27\x4d\xc7\x56\xf9\x9e\
\x01\x4e\x47\x87\xb8\x5c\x89\x05\x04\xe0\x89\xe8\x00\xea\xc9\x32\
\xe0\x8b\xd1\x21\x24\x49\x52\x36\x63\xa4\x9f\xfd\x4b\xa3\x83\x68\
\x51\xd3\x14\x7a\x4f\x5d\x6a\x01\x79\x0b\x78\x29\x3a\x84\x7a\x72\
\x0b\xb0\x33\x3a\x84\x24\x49\xca\x62\x17\x70\x63\x74\x08\xf5\x64\
\x0f\x70\x3c\x3a\x44\x37\xa5\x16\x10\x28\xb4\xb1\xa9\x2b\xa7\x62\
\x49\x92\x34\xfa\xd6\x91\xb6\xdd\x55\x33\x3c\x19\x1d\x60\x3e\x25\
\x17\x90\x83\xa4\x23\xe3\x55\xbe\xe5\xff\x7f\x7b\x77\xfa\x65\x75\
\x79\xa6\x7b\xfc\xdb\x9b\xa2\x28\x8b\x12\x10\x11\x11\x08\x22\x02\
\x2a\x11\x34\x68\xec\xe8\xe1\xd8\x69\xdb\x93\xe5\x32\x2c\xe3\xb1\
\x6d\x93\x65\x86\xee\x3f\xac\x5f\x74\x1b\x63\xa7\x73\xec\xc9\x93\
\xa9\xd5\xe3\x31\x89\x26\xc6\xa4\x9d\x07\x40\x19\x44\x40\x40\x91\
\x99\xa2\x28\x0a\xfb\xc5\x5d\x95\x2a\xe6\xda\xe3\xfd\x1b\xbe\x9f\
\xb5\x7e\xab\x80\xe4\xc5\x95\xb0\xa9\xda\xd7\x7e\x9e\xfb\x79\x70\
\x2b\x96\x24\x49\x55\xd6\x00\x1e\x21\xb6\x5f\xab\xf8\x36\x03\xfb\
\xb3\x43\x5c\x4c\x91\x0b\x08\xc0\xaf\xb3\x03\x68\xda\x6e\x24\x96\
\x65\x25\x49\x52\xf5\x6c\xc0\xad\x57\x65\x52\xe8\xf7\xd0\x45\x2f\
\x20\x5b\x80\x4f\xb2\x43\x68\xda\xee\x27\x4e\xc6\x90\x24\x49\xd5\
\xb1\x18\xb7\x5e\x95\xc9\x07\xc0\xae\xec\x10\x97\x52\xf4\x02\x02\
\xf0\x42\x76\x00\x4d\xdb\x4c\x62\x79\xb6\x0c\xaf\x2b\x49\x92\x74\
\x79\x7d\xc4\xcf\x76\x2f\x1c\x2c\x8f\x17\xb3\x03\x5c\x4e\x19\xde\
\x28\xba\x0a\x52\x2e\x4b\xf0\x6c\x70\x49\x92\xaa\xe2\x7e\xe0\x9a\
\xec\x10\x9a\xb6\xc2\xaf\x7e\x40\x39\x0a\x08\x94\xa0\xc9\xe9\x2c\
\xf7\x02\x4b\xb3\x43\x48\x92\xa4\xb6\xac\x00\xee\xce\x0e\xa1\xa6\
\xbc\x98\x1d\x60\x3a\xca\x52\x40\x36\xe1\x2a\x48\x99\xcc\x00\x1e\
\x05\x06\xb2\x83\x48\x92\xa4\x96\x0c\x11\x5b\xaf\x54\x1e\x5b\x29\
\xc1\xea\x07\x94\xa7\x80\x40\x49\x1a\x9d\xfe\xe4\x2a\x60\x63\x76\
\x08\x49\x92\xd4\x92\x87\x81\x2b\xb3\x43\xa8\x29\xa5\x99\x9b\x2e\
\x53\x01\x71\x15\xa4\x7c\xd6\xe2\x2d\xe9\x92\x24\x95\xcd\x3d\xc0\
\xaa\xec\x10\x6a\x4a\x69\x56\x3f\xa0\x5c\x05\x04\x5c\x05\x29\xa3\
\x07\xf0\x68\x5e\x49\x92\xca\x62\x31\x31\x78\xae\x72\x29\xcd\xea\
\x07\x94\xaf\x80\x6c\x02\x76\x67\x87\x50\x53\x66\x11\xf3\x20\x7d\
\xd9\x41\x24\x49\xd2\x25\xf5\x13\x3f\xb3\x3d\x72\xb7\x5c\x36\x53\
\xa2\xd5\x0f\x28\x5f\x01\x01\x78\x3e\x3b\x80\x9a\x76\x1d\xf0\x8d\
\xec\x10\x92\x24\xe9\x92\x36\x02\x57\x67\x87\x50\xd3\x4a\xb5\xfa\
\x01\xe5\x2c\x20\xdb\x80\xed\xd9\x21\xd4\xb4\x3f\x07\x6e\xcd\x0e\
\x21\x49\x92\x2e\xe8\x4e\xe0\xb6\xec\x10\x6a\xda\xdb\xc0\xde\xec\
\x10\xcd\x2a\x63\x01\x01\x57\x41\xca\xea\x21\x9c\x07\x91\x24\xa9\
\x68\x16\x13\x33\x9b\x2a\x97\x31\x4a\xb8\xfa\x01\xe5\x2d\x20\xbb\
\x80\xf7\xb3\x43\xa8\x69\xb3\x80\xef\xe0\x3c\x88\x24\x49\x45\x31\
\x00\x3c\x06\xcc\xcc\x0e\xa2\xa6\xbd\x06\x7c\x9e\x1d\xa2\x15\x65\
\x2d\x20\x10\xab\x20\x63\xd9\x21\xd4\xb4\x6b\x88\x95\x10\x49\x92\
\x94\xef\x11\xe2\xee\x2e\x95\xcb\x28\xf0\xeb\xec\x10\xad\x2a\xf3\
\x29\x07\x27\x88\x7f\x30\xd7\x65\x07\x51\xd3\x16\x01\xc7\x80\x3d\
\xd9\x41\x24\x49\xaa\xb1\x0d\xc0\x5d\xd9\x21\xd4\x92\x57\x80\xf7\
\xb2\x43\xb4\xaa\xcc\x2b\x20\x10\xf7\x82\x8c\x66\x87\x50\x4b\x1e\
\x20\xf6\x9c\x4a\x92\xa4\xde\x5b\x01\xdc\x97\x1d\x42\x2d\x19\xa6\
\xc4\xab\x1f\x50\xfe\x02\x72\x08\xf8\x63\x76\x08\xb5\x64\x26\x31\
\x0f\x32\x94\x1d\x44\x92\xa4\x9a\x99\x87\xf7\x7d\x94\xd9\x4b\xc0\
\xc9\xec\x10\xed\x28\x7b\x01\x81\x68\x80\xc3\xd9\x21\xd4\x92\xb9\
\xc4\xe0\x5b\x15\x5e\x87\x92\x24\x95\x41\x1f\xf0\x38\x30\x3b\x3b\
\x88\x5a\x72\x98\xd8\x7e\x55\x6a\x55\x68\xbe\xa3\xc0\x69\x60\x55\
\x76\x10\xb5\x64\x1e\x70\x25\x71\x8b\xa7\x24\x49\xea\xae\x47\x88\
\xed\x57\x2a\xa7\x9f\x01\x9f\x64\x87\x68\x57\x55\x3e\x79\x7e\x15\
\x38\x90\x1d\x42\x2d\xbb\x83\xb8\x00\x49\x92\x24\x75\xcf\x06\x60\
\x6d\x76\x08\xb5\x6c\x37\xf0\x56\x76\x88\x4e\xa8\x4a\x01\x39\x03\
\x3c\x9b\x1d\x42\x6d\x79\x10\x58\x96\x1d\x42\x92\xa4\x8a\x5a\x89\
\x43\xe7\x65\xf7\xcb\xec\x00\x9d\x52\x95\x02\x02\xb0\x09\xf8\x28\
\x3b\x84\x5a\x36\x83\x18\x4a\x9f\x97\x1d\x44\x92\xa4\x8a\x59\x80\
\x43\xe7\x65\xf7\x2e\xb0\x33\x3b\x44\xa7\x54\xa9\x80\x40\x85\x9a\
\x61\x4d\xcd\x26\x06\xe3\x06\xb2\x83\x48\x92\x54\x11\x83\xc4\xcf\
\xd6\x2b\xb2\x83\xa8\x65\xa3\xc4\x05\xdc\x95\x51\xb5\x26\x7c\x14\
\x98\x4f\x5c\x74\xa7\x72\x1a\x22\xfe\xfe\xde\x01\xbe\x48\xce\x22\
\x49\x52\x99\x35\x80\xef\xe1\xa5\xcd\x65\xf7\x0a\xf1\xbe\xa8\x32\
\xaa\xb6\x02\x02\xd1\x10\xbd\x9c\xb0\xdc\x56\x11\x17\x15\x4a\x92\
\xa4\xd6\x3d\x0c\x5c\x9f\x1d\x42\x6d\x39\x4e\xc9\x2f\x1d\xbc\x90\
\xaa\xad\x80\x00\x8c\x8c\x7f\xf5\x88\xb9\x72\x5b\x0a\x1c\x03\xf6\
\x64\x07\x91\x24\xa9\x84\xee\x05\xee\xce\x0e\xa1\xb6\xfd\x27\x15\
\x9a\xfd\x98\x50\xc5\x15\x10\x80\xdf\x02\x07\xb3\x43\xa8\x6d\x0f\
\x62\x91\x94\x24\xa9\x59\xeb\x80\xbf\xca\x0e\xa1\xb6\x7d\x02\xbc\
\x96\x1d\xa2\x1b\xaa\xb8\x02\x02\x71\x2c\xef\x21\x3c\xeb\xba\xec\
\x1a\xc0\x2d\xc0\x76\xe0\x48\x72\x16\x49\x92\xca\x60\x39\xf0\x6d\
\xaa\xfb\x21\x73\x9d\xfc\x98\xb8\xf9\xbc\x72\xaa\xfc\xe2\xdc\x04\
\x6c\xcd\x0e\xa1\xb6\xcd\x22\x4e\xef\x98\x9f\x1d\x44\x92\xa4\x82\
\x5b\x48\x1c\x69\x5f\xd5\x0f\x98\xeb\xe4\x75\x60\x57\x76\x88\x6e\
\xa9\x72\x01\x01\xf8\x39\x0e\xa4\x57\xc1\x6c\xe2\x14\x8f\xc1\xec\
\x20\x92\x24\x15\xd4\x1c\xe2\x67\xa5\xc7\xed\x96\xdf\x08\x15\x3b\
\x76\xf7\x5c\x55\x6f\xc8\x27\x80\x7e\x3c\x01\xa2\x0a\x06\x89\xbf\
\xc7\xb7\x88\x2d\x76\x92\x24\x29\x0c\x00\x7f\x0b\x5c\x9d\x1d\x44\
\x1d\xf1\xff\xa8\xf8\x2e\x9e\xaa\xaf\x80\x40\x1c\x5d\x56\xc9\xfd\
\x73\x35\xf4\x25\xe0\x31\xea\xf1\xba\x95\x24\x69\x3a\x1a\xc4\xb6\
\xab\x6b\xb3\x83\xa8\x23\x3e\x25\xee\xfd\xa8\xb4\xaa\xaf\x80\x00\
\x8c\x11\x67\x28\xaf\xc9\x0e\xa2\x8e\x58\x40\x6c\xc9\xda\x92\x1d\
\x44\x92\xa4\x64\x0d\xe0\x11\xe0\xa6\xec\x20\xea\x98\x9f\x50\x83\
\x93\x5c\xeb\x50\x40\x00\xf6\x11\xa7\x42\x5c\x95\x9c\x43\x9d\xb1\
\x04\xe8\x03\xb6\x65\x07\x91\x24\x29\xd1\x37\x81\xaf\x64\x87\x50\
\xc7\xbc\x4d\x5c\x25\x51\x79\x75\x29\x20\x10\x97\xb8\xdc\x41\xbd\
\xfe\x37\x57\xd9\xf5\xc0\x69\x2a\x78\x39\x8f\x24\x49\xd3\x70\x3f\
\x5e\x34\x58\x25\xc3\xc0\x53\xc0\xa9\xec\x20\xbd\x50\xa7\x37\xe3\
\xc3\xc4\x52\xe5\x0d\xd9\x41\xd4\x31\x37\xe2\x6d\xe9\x92\xa4\xfa\
\xd9\x00\xfc\x65\x76\x08\x75\xd4\x2f\x81\x1d\xd9\x21\x7a\xa5\x4e\
\x05\x04\xe2\x3c\xe5\x35\xc4\x0c\x81\xaa\x61\x25\x70\x00\xd8\x9f\
\x1d\x44\x92\xa4\x1e\x58\x0f\x3c\x98\x1d\x42\x1d\xf5\x31\xf0\xd3\
\xec\x10\xbd\x54\xb7\x02\x72\x86\x78\xa3\xea\x7e\xc9\xea\x68\x00\
\x37\x03\xbb\x81\xcf\x93\xb3\x48\x92\xd4\x4d\xb7\x02\xdf\xc2\xd3\
\x20\xab\x64\x0c\xf8\x11\x71\x60\x52\x6d\xd4\xad\x80\x00\x1c\x02\
\xe6\x01\xd7\x65\x07\x51\xc7\x34\x88\x95\xad\x5d\xd4\xe0\xe4\x08\
\x49\x52\x2d\xdd\x0c\x3c\x4a\x3d\xdf\xbb\x55\xd9\xcb\xc4\xf0\x79\
\xad\xd4\xf5\x45\xbc\x93\x58\x05\xe9\xcf\x0e\xa2\x8e\x99\x01\x7c\
\x99\xf8\xbb\x3d\x94\x9c\x45\x92\xa4\x4e\x5a\x0d\x7c\x9b\xfa\xbe\
\x6f\xab\xaa\x83\xc4\xb1\xbb\xb5\xbb\x60\xb9\xae\x2f\xe4\x51\x62\
\xa9\xeb\x96\xec\x20\xea\xa8\x19\xc4\x4a\xc8\x47\x78\xf9\xa4\x24\
\xa9\x1a\x56\x12\xe5\xa3\x2f\x3b\x88\x3a\xee\x69\xe0\xb3\xec\x10\
\x19\xea\x5a\x40\x00\xf6\x02\xcb\x80\xf9\xd9\x41\xd4\x51\x7d\x44\
\xb1\xdc\x01\x1c\xc9\x8d\x22\x49\x52\x5b\x96\x03\x8f\x03\x33\x93\
\x73\xa8\xf3\xde\x06\x5e\xca\x0e\x91\xa5\xce\x05\x04\xe2\x93\xf2\
\xf5\xf8\xa9\x42\xd5\xcc\x24\x56\x42\xb6\x01\x47\x93\xb3\x48\x92\
\xd4\x8a\x65\xc0\xf7\xb1\x7c\x54\xd1\x71\x62\xf0\x7c\x34\x3b\x48\
\x96\xba\x17\x90\x93\xc0\x08\xb1\xb7\x52\xd5\x32\x93\x98\x09\xd9\
\x81\x2b\x21\x92\xa4\x72\x59\x0e\x7c\x17\x67\x55\xab\xea\xdf\xa8\
\xf9\x1d\x66\x75\x2f\x20\x10\xc7\xb7\x2e\x07\xae\x4a\xce\xa1\xce\
\x9b\x49\x1c\x59\xe8\x4c\x88\x24\xa9\x2c\x56\x12\xdb\xae\x2c\x1f\
\xd5\xf4\x2e\xf0\x62\x76\x88\x6c\x16\x90\x30\x71\x2a\x96\x5b\xb1\
\xaa\xa7\x8f\x58\x09\xf9\x18\x4f\xc7\x92\x24\x15\xdb\xc4\x69\x57\
\x6e\xbb\xaa\xa6\x61\x62\xeb\xd5\xa9\xec\x20\xd9\x2c\x20\x61\x98\
\xd8\x87\xb7\x2a\x3b\x88\xba\xa2\x8f\x58\x09\xf1\x9e\x10\x49\x52\
\x51\xdd\x8c\xa7\x5d\x55\xdd\x33\xc4\x07\xa2\xb5\x67\x01\x99\xb4\
\x07\xb8\x11\x98\x9b\x1d\x44\x5d\x31\x71\x4f\xc8\x1e\xbc\x31\x5d\
\x92\x54\x2c\xb7\xe2\x25\x83\x55\xb7\x19\x78\x3e\x3b\x44\x51\xf8\
\x42\x9f\xf4\x05\xb1\x15\x6b\x3d\xfe\xff\x52\x55\x33\x88\x6f\xf2\
\x07\x80\xfd\xc9\x59\x24\x49\x82\x78\xdf\xf1\x2d\x7c\xef\x51\x65\
\xc3\xc0\x0f\x71\xeb\xd5\x9f\xf8\x62\x3f\xdb\x09\xe0\x34\x31\x00\
\xa6\x6a\x6a\x10\xcb\xdc\xc7\xa9\xf9\x09\x14\x92\xa4\x74\xf7\x00\
\xdf\x24\x7e\x36\xa9\xba\x7e\x4a\x7c\xc8\xad\x71\x16\x90\xf3\xed\
\x06\x6e\x00\xe6\x65\x07\x51\xd7\x34\x80\x9b\x88\xb2\xe9\x37\x04\
\x49\x52\x86\xfb\x81\xfb\xb2\x43\xa8\xeb\xde\xc7\xad\x57\xe7\xb1\
\x80\x9c\xef\x0b\x60\x3b\x5e\x50\x58\x07\x37\x12\x7f\xc7\xdb\xb2\
\x83\x48\x92\x6a\xa3\x41\xac\x7a\xdc\x9d\x1d\x44\x5d\x77\x14\x78\
\x92\x1a\x5f\x38\x78\x31\x16\x90\x0b\x3b\x49\xbc\x68\x6e\xc9\x0e\
\xa2\xae\xbb\x1e\x98\x03\x7c\x40\x94\x4f\x49\x92\xba\xa5\x01\x3c\
\x42\x1c\xfd\xaf\xea\x7b\x1a\xd8\x9b\x1d\xa2\x88\x2c\x20\x17\xb7\
\x17\x58\x04\x5c\x93\x1d\x44\x5d\xb7\x18\xb8\x16\xd8\x04\x9c\x49\
\xce\x22\x49\xaa\xa6\x7e\xe0\x7b\xc4\x16\x60\x55\xdf\x1f\x80\xdf\
\x65\x87\x28\x2a\x0b\xc8\xa5\x6d\x03\x6e\x03\x66\x65\x07\x51\xd7\
\x5d\x03\xac\x20\x4a\x88\x4b\xa5\x92\xa4\x4e\x9a\x03\xfc\x1d\xb0\
\x34\x39\x87\x7a\xe3\x00\xf0\xcf\xc0\x58\x76\x90\xa2\xb2\x80\x5c\
\xda\x28\xf0\x19\xb0\x2e\x3b\x88\x7a\x62\x2e\xb1\xed\x6e\x33\xb1\
\x0d\x4f\x92\xa4\x76\x2d\x24\xca\xc7\xd5\xc9\x39\xd4\x1b\x63\xc0\
\x53\x78\xf1\xf1\x25\x59\x40\x2e\xef\x00\xf1\xc9\xc5\xe2\xec\x20\
\xea\x89\x41\xe2\xae\x90\x1d\xc4\x1c\x90\x24\x49\xad\x5a\x06\xfc\
\x00\x18\xca\x0e\xa2\x9e\xf9\x0d\xf0\x66\x76\x88\xa2\xb3\x80\x4c\
\xcf\x76\xe2\x16\xed\xc1\xec\x20\xea\x89\x59\xc0\x5a\xe0\x13\xbc\
\x35\x5d\x92\xd4\x9a\x5b\x81\x6f\xe3\x36\xee\x3a\xd9\x0d\xfc\x2b\
\x1e\x6a\x73\x59\x16\x90\xe9\x19\x03\x3e\x22\x8e\xe6\xf5\xb2\xa0\
\x7a\xe8\x23\x7e\x78\x0c\x13\xdf\x50\x24\x49\x9a\xae\x7b\x81\x8d\
\xf8\x3e\xab\x4e\x46\x80\x27\x88\x4b\xad\x75\x19\xfe\xc3\x98\xbe\
\x63\xc4\x8b\x6b\x55\x76\x10\xf5\x4c\x03\x58\x4d\xac\x7c\x6d\xc5\
\x4f\x34\x24\x49\x97\xd6\x07\x3c\x8c\x77\x7c\xd4\xd1\x7f\x10\xdb\
\xb7\x35\x0d\x16\x90\xe6\xec\x22\x66\x41\x16\x64\x07\x51\x4f\x2d\
\x05\x96\x00\x5b\x88\xdb\xd3\x25\x49\x3a\xd7\x20\xf0\x5d\x3c\x66\
\xb7\x8e\x5e\x07\x7e\x95\x1d\xa2\x4c\x2c\x20\xcd\xdb\x8a\x47\xf3\
\xd6\xd1\xd5\xc4\x6a\xc8\x07\x78\x42\x96\x24\xe9\x6c\x0b\x80\xbf\
\x05\xae\xcb\x0e\xa2\x9e\xfb\x14\xf8\x31\x1e\xb9\xdb\x14\x0b\x48\
\xf3\x46\x81\x3d\xc4\xd1\xbc\xce\x83\xd4\xcb\x10\xf1\xf7\xfe\x31\
\x70\x38\x39\x8b\x24\xa9\x18\x56\x12\x17\x0c\xce\xc9\x0e\xa2\x9e\
\x1b\x05\x9e\xc4\xf7\x04\x4d\xb3\x80\xb4\xe6\x10\x30\x13\xb8\x3e\
\x3b\x88\x7a\xae\x9f\x58\x01\x3b\x4e\x14\x51\x49\x52\x7d\x6d\x00\
\x1e\x22\x7e\x36\xa8\x7e\x9e\x25\x2e\x30\x56\x93\x2c\x20\xad\xdb\
\x01\xdc\x48\x5c\x5e\xa7\x7a\x69\x10\x7b\x7c\x87\x80\x6d\xc0\x99\
\xdc\x38\x92\xa4\x1e\xeb\x07\xfe\x37\x31\x6c\xee\x6e\x88\x7a\xda\
\x0c\xfc\x22\x3b\x44\x59\x59\x40\x5a\xf7\x05\xf0\x21\xf1\x69\xb8\
\x9f\x7c\xd4\xd3\x12\x60\x05\x31\x9c\x7e\x2a\x39\x8b\x24\xa9\x37\
\xe6\x01\xdf\x27\x3e\x84\x54\x3d\x1d\x04\x7e\x44\x6c\xc1\x52\x0b\
\x2c\x20\xed\x19\x01\xf6\x11\x25\x44\xf5\x34\x97\xb8\x2f\xe4\x63\
\xe0\x48\x72\x16\x49\x52\x77\xad\x20\xca\xc7\xfc\xec\x20\x4a\x33\
\x06\xfc\x10\x2f\x2a\x6e\x8b\x05\xa4\x7d\x13\x2f\xc0\x1b\x52\x53\
\x28\xd3\x00\x31\x9c\x7e\x12\x2f\x2d\x94\xa4\xaa\xda\x00\x7c\x0b\
\x4f\xc1\xac\xbb\x5f\xe0\xdc\x47\xdb\x2c\x20\x9d\xb1\x13\xf8\x12\
\x7e\x22\x52\x67\x33\x88\x63\x7a\xe7\x13\x47\x35\x7b\x1c\x9f\x24\
\x55\xc3\x00\xf0\x18\x70\x17\xce\x7b\xd4\xdd\xdb\xc0\x73\xd9\x21\
\xaa\xc0\x02\xd2\x19\x5f\x10\xf7\x43\xac\x25\xbe\x51\xa9\xbe\x16\
\x01\xb7\x10\xc3\xe9\x27\x92\xb3\x48\x92\xda\xb3\x98\xb8\xdf\x63\
\x69\x76\x10\xa5\xfb\x14\x78\x0a\x3f\x60\xec\x08\x0b\x48\xe7\x8c\
\x12\x73\x00\xb7\xe3\x27\x24\x75\x37\x9b\x78\x1d\x1c\x26\x66\x84\
\x24\x49\xe5\x73\x27\xf0\x37\xc4\xf7\x74\xd5\xdb\x08\xf0\x8f\xc0\
\xd1\xec\x20\x55\x61\x01\xe9\xac\x23\xc4\x8b\x74\x55\x76\x10\xa5\
\xeb\x03\xd6\x00\x83\xc0\x76\x3c\xaa\x57\x92\xca\xa2\x9f\x98\xf5\
\xb8\x17\xdf\x27\x29\xfc\x1b\x71\xfd\x82\x3a\xc4\x7f\x58\x9d\xb7\
\x0b\x58\x38\xfe\x48\x4b\x81\x9b\x89\x12\xe2\x96\x2c\x49\x2a\xb6\
\xc5\xc0\x0f\xf0\x60\x19\x4d\xfa\x3d\xf0\x72\x76\x88\xaa\xb1\x80\
\x74\xc7\x66\xe2\x4d\xe7\x50\x76\x10\x15\xc2\x10\xb0\x1e\x38\x06\
\x7c\x92\x9c\x45\x92\x74\x61\xf7\x00\x8f\xe0\xcf\x6e\x4d\xfa\x08\
\x78\x9a\x98\xf5\x55\x07\x59\x40\xba\xe3\x0c\x71\x12\xd2\x5a\xbc\
\xa4\x50\x61\x06\x51\x4a\x17\x10\x03\xea\xa7\x73\xe3\x48\x92\xc6\
\x0d\x02\xdf\x26\x4e\xb9\xf2\x7d\x91\x26\x1c\x06\xfe\x01\x2f\x1a\
\xee\x0a\xff\xa1\x75\xcf\x30\xf1\x69\xf7\x5a\x1c\x4a\xd7\xa4\x6b\
\x89\x8b\x0b\x77\xe1\xc5\x85\x92\x94\x6d\x05\xb1\xe5\xea\xba\xec\
\x20\x2a\x94\x51\xbc\x6c\xb0\xab\x2c\x20\xdd\x75\x90\x78\x11\xaf\
\xcc\x0e\xa2\x42\xb9\x82\x38\x25\x6b\x06\xb1\xbc\xeb\xd2\xae\x24\
\xf5\x56\x1f\xf0\x0d\x60\x23\x5e\x2c\xa8\xf3\x3d\x43\x5c\xaf\xa0\
\x2e\xb1\x80\x74\xdf\xc7\xc4\xe5\x74\x8b\xb2\x83\xa8\x50\x1a\xc0\
\x72\xe0\x26\xe2\x64\x0d\x07\xd4\x25\xa9\x37\x16\x03\xdf\x27\xbe\
\xff\x4a\xe7\xfa\x1d\xf0\x52\x76\x88\xaa\xb3\x80\xf4\xc6\x07\xc4\
\x2a\xc8\x9c\xec\x20\x2a\x9c\x2b\x89\x01\xf5\x53\xc4\xb6\x2c\x49\
\x52\x77\x34\x80\xff\x89\x83\xe6\xba\xb8\xad\xc4\x91\xbb\xee\x4c\
\xe8\x32\x0b\x48\x6f\x9c\x21\x4a\xc8\x6d\x38\x94\xae\xf3\xcd\x20\
\xee\x8e\x59\x4e\x0c\xa8\x8f\xa4\xa6\x91\xa4\xea\x99\x0f\x3c\x8e\
\x97\x05\xeb\xe2\x0e\x12\x73\x1f\x0e\x9d\xf7\x80\x05\xa4\x77\x46\
\x88\xed\x58\xb7\xe1\x37\x3f\x5d\xd8\x55\xc0\x57\x88\xed\x58\x1e\
\xd7\x2b\x49\x9d\xf1\x35\xe2\x46\xf3\xf9\xd9\x41\x54\x58\xc3\xc0\
\x13\xc0\xa1\xec\x20\x75\x61\x01\xe9\xad\xc3\x44\xc3\x5e\x93\x1d\
\x44\x85\x35\x93\x38\xae\x77\x19\x31\xa0\x7e\x32\x37\x8e\x24\x95\
\xd6\x02\x62\xd5\xe3\x0e\x62\xe8\x5c\xba\x90\x31\xe0\xff\x00\x3b\
\xb3\x83\xd4\x89\x05\xa4\xf7\xf6\x11\xdf\x08\xaf\xcf\x0e\xa2\x42\
\x9b\x4f\xcc\x86\x8c\x00\xbb\x93\xb3\x48\x52\x99\x34\x80\xff\x01\
\x3c\x4a\xac\x2c\x4b\x97\xf2\x9f\xc0\x9b\xd9\x21\xea\xc6\x02\x92\
\x63\x1b\xb0\x70\xfc\x91\x2e\xa6\x0f\x58\x4d\x9c\x53\xff\x11\xb1\
\x44\x2c\x49\xba\xb8\x85\x4c\xce\x7a\xf8\x1e\x47\x97\xf3\x07\xe0\
\x85\xec\x10\x75\xe4\x3f\xce\x3c\x9b\x89\x37\x96\x73\xb3\x83\xa8\
\xf0\xe6\x11\x5b\x08\x20\xe6\x88\x3c\x9d\x43\x92\xce\xd6\x07\x7c\
\x9d\x38\xe1\xca\x9f\xab\x9a\x8e\xad\xc0\xbf\xe0\xcf\xd4\x14\x16\
\x90\x3c\x67\x80\x2d\xc4\xad\xd8\x03\xc9\x59\x54\x7c\x33\x88\xc2\
\x7a\x0b\xb1\x8d\xef\x70\x6e\x1c\x49\x2a\x8c\x95\xc4\xaa\xc7\x2d\
\x78\xc8\x8b\xa6\x67\x1f\xf0\x24\x71\x59\xb4\x12\x58\x40\x72\x9d\
\x22\x1a\xf8\x6d\x38\x20\xa7\xe9\x19\x22\x66\x43\xe6\x10\xdb\xb2\
\x4e\xe7\xc6\x91\xa4\x34\x43\xc0\x43\xc0\xff\x02\x06\x93\xb3\xa8\
\x3c\x8e\x13\x27\x5e\x1d\xcd\x0e\x52\x67\x16\x90\x7c\xc7\x89\x26\
\xfe\x65\xfc\xe4\x46\xd3\xb7\x98\x28\x22\x47\x89\xd7\x8f\x24\xd5\
\xc9\x9d\xc0\x77\x80\x25\xd9\x41\x54\x2a\xa3\xc4\x5d\x1f\xfe\xdc\
\x4c\x66\x01\x29\x86\x03\x44\x11\xb9\x29\x3b\x88\x4a\xa5\x9f\x38\
\xd2\x79\x39\xb0\x87\x78\x0d\x49\x52\x95\x2d\x25\x8a\xc7\x9d\xc4\
\xb1\xe5\xd2\x74\x8d\x01\xff\x0c\x6c\xcf\x0e\x22\x0b\x48\x91\xec\
\xc1\xe3\x79\xd5\x9a\xab\x88\x21\xf5\xd9\xc4\x90\xba\xdb\xb2\x24\
\x55\xcd\x10\xf0\x00\xb0\x91\xd8\x82\x2a\x35\xeb\x67\xc0\xdb\xd9\
\x21\x14\x2c\x20\xc5\xb2\x8d\xb8\xff\x61\x51\x76\x10\x95\x4e\x83\
\xf8\x64\x70\x3d\x71\x5c\xaf\x37\xa9\x4b\xaa\x82\x06\xf0\xe7\xc0\
\x63\xc4\x05\xad\x52\x2b\x7e\x03\xbc\x94\x1d\x42\x93\x2c\x20\xc5\
\xb3\x99\x58\x05\xf1\xf2\x24\xb5\xa2\x9f\xb8\x49\x7d\x35\xb1\xc7\
\xf5\x48\x6e\x1c\x49\x6a\xd9\x72\xe0\xbb\xc4\x41\x2d\x6e\xb7\x52\
\xab\xde\x24\x56\x3f\x54\x20\x16\x90\xe2\xf9\x02\x78\x0f\xb8\x01\
\xcf\x32\x57\xeb\xe6\x10\xdb\xb2\x16\x10\xdb\xfb\x4e\xe6\xc6\x91\
\xa4\x69\x5b\x00\x3c\x0c\xdc\x4f\x6c\x2d\x95\x5a\xb5\x9d\x98\xfb\
\xf0\xae\x8f\x82\xb1\x80\x14\xd3\x18\xb0\x89\x38\xd3\xdc\xa3\x05\
\xd5\x8e\x6b\x81\xbb\x80\x59\xc0\x6e\x9c\x0f\x91\x54\x5c\x83\xc4\
\x91\xba\xdf\x02\xae\x49\xce\xa2\xf2\xdb\x47\x9c\x78\xe5\x5d\x1f\
\x05\x64\x01\x29\xae\x51\xe0\x03\x60\x2d\xb1\xad\x46\x6a\x55\x83\
\xd8\x3b\xbd\x9e\x78\x5d\x7d\x82\x9f\x06\x49\x2a\x8e\x3e\xe0\x6b\
\xc4\x9c\xc7\x72\x3c\x92\x5e\xed\x3b\x0c\xfc\x03\x9e\x0e\x59\x58\
\x7f\x96\x1d\x40\x97\xb5\x18\xf8\x01\x70\x45\x76\x10\x55\xc6\x01\
\xe0\x79\x62\xab\x9f\x24\x65\xba\x1d\xb8\x0f\xb7\x1c\xab\x73\x8e\
\x03\x7f\x0f\x7c\x9e\x1d\x44\x17\x67\x01\x29\x87\xe5\xc0\xf7\x70\
\x08\x4f\x9d\xb5\x1b\x78\x01\xf8\x30\x3b\x88\xa4\xda\xb9\x99\x28\
\x1e\xd7\x66\x07\x51\xa5\x0c\x13\x2b\x1f\x7b\x93\x73\xe8\x32\x2c\
\x20\xe5\xb1\x9a\xb8\x7c\xc9\x6d\x73\xea\xb4\xed\xc4\x8a\xc8\xae\
\xec\x20\x92\x2a\x6f\x05\x31\x5c\xee\x0d\xe6\xea\xb4\x51\xe0\x09\
\x60\x67\x76\x10\x5d\x9e\x05\xa4\x5c\xd6\x01\x7f\x9d\x1d\x42\x95\
\xb5\x99\x28\x22\xfb\xb3\x83\x48\xaa\x9c\xa5\xc4\x8a\xc7\x8d\xd9\
\x41\x54\x49\x63\xc0\x8f\x81\x2d\xd9\x41\x34\x3d\x16\x90\xf2\xb9\
\x0b\xf8\x66\x76\x08\x55\xda\xfb\xc0\x8b\xb8\x84\x2d\xa9\x7d\x4b\
\x81\xaf\x03\xab\x92\x73\xa8\xba\xc6\x80\x7f\x07\xde\xca\x0e\xa2\
\xe9\x73\x3b\x4f\xf9\xec\x1e\xff\x7a\x43\x6a\x0a\x55\xd9\x35\xc0\
\x57\x81\x45\xc0\x67\xc0\xb1\xdc\x38\x92\x4a\x68\x19\x71\x9c\xee\
\xfd\xc0\xd5\xc9\x59\x54\x6d\x3f\x03\x5e\xcf\x0e\xa1\xe6\xb8\x02\
\x52\x5e\x0f\x00\x77\x67\x87\x50\x2d\x6c\x26\x56\x44\xf6\x24\xe7\
\x90\x54\x7c\xcb\x88\x15\x0f\xb7\x5a\xa9\x17\x9e\x03\x5e\xca\x0e\
\xa1\xe6\x59\x40\xca\x6d\x23\xf1\x49\xb5\xd4\x0b\x1f\x10\xdf\xe8\
\x77\x24\xe7\x90\x54\x3c\x2b\x81\x0d\xb8\x3a\xaf\xde\xf9\xff\xc4\
\x87\x63\x2a\x21\x0b\x48\xf9\x3d\x04\xdc\x91\x1d\x42\xb5\xb2\x1b\
\xf8\x35\xb0\x29\x3b\x88\xa4\x54\x0d\xe0\x56\xe0\x1e\xe0\xba\xe4\
\x2c\xaa\x97\x97\x81\x67\xb3\x43\xa8\x75\x16\x90\xf2\x6b\x10\x25\
\xe4\x2b\xd9\x41\x54\x3b\x9f\x02\xbf\x25\x06\xff\x4e\x27\x67\x91\
\xd4\x3b\x7d\xc0\x7a\xa2\x78\x5c\x95\x9c\x45\xf5\xf3\x3b\xe0\x97\
\xd9\x21\xd4\x1e\x0b\x48\x35\x34\x80\x47\x80\xb5\xd9\x41\x54\x4b\
\x47\x81\x57\x81\x3f\x02\x27\x92\xb3\x48\xea\x9e\x21\xe2\x24\xc6\
\x3b\x81\xd9\xc9\x59\x54\x4f\xbf\x07\x7e\x9e\x1d\x42\xed\xb3\x80\
\x54\x47\x03\x78\x14\xf8\x72\x76\x10\xd5\xd6\x28\xb1\x1a\xf2\x0a\
\xde\x25\x22\x55\xc9\x62\xe0\x6b\xc4\x76\x2b\x4f\xcf\x54\x96\xff\
\x02\x9e\xc9\x0e\xa1\xce\xb0\x80\x54\x4b\x83\xb8\x2d\xfd\xa6\xec\
\x20\xaa\xbd\xad\x44\x11\xf1\x52\x28\xa9\x9c\x1a\xc0\xcd\x44\xf1\
\xb8\x3e\x39\x8b\xf4\x3a\x51\x3e\xce\x64\x07\x51\x67\x58\x40\xaa\
\xa7\x01\x3c\x8e\x97\x3e\xa9\x18\x0e\x10\x5b\xb3\xde\xc0\xed\x59\
\x52\x19\x0c\x01\xb7\x13\xdb\xac\x9c\xef\x50\x11\xbc\x0d\xfc\x2b\
\x96\x8f\x4a\xb1\x80\x54\x93\x2b\x21\x2a\x9a\x51\xe0\x3d\x62\x56\
\x64\x57\x72\x16\x49\xe7\x5b\x4e\x94\x8e\x35\xb8\xcd\x4a\xc5\xe1\
\xca\x47\x45\x59\x40\xaa\xcb\x99\x10\x15\xd5\x3e\xa2\x88\xbc\x05\
\x9c\x4a\xce\x22\xd5\xd9\x00\x93\xab\x1d\xd7\x24\x67\x91\xce\xe5\
\xcc\x47\x85\x59\x40\xaa\xcd\xd3\xb1\x54\x64\x23\xc4\xaa\xc8\x6b\
\xc0\xce\xe4\x2c\x52\x9d\xac\x20\x8a\xc7\x1a\x60\x66\x72\x16\xe9\
\x42\xfe\x00\xfc\x34\x3b\x84\xba\xc7\x02\x52\x7d\x0d\xe0\x61\xe0\
\xb6\xec\x20\xd2\x25\x1c\x20\xe6\x44\xde\x00\x8e\x24\x67\x91\xaa\
\x68\x3e\x51\x3a\x6e\x07\xe6\x26\x67\x91\x2e\xc5\x7b\x3e\x6a\xc0\
\x02\x52\x0f\x0d\x60\x23\xde\x98\xae\x72\xd8\x4a\x14\x91\x4d\xb8\
\x45\x4b\x6a\xc7\x00\x71\x92\xd5\x7a\x3c\xc9\x4a\xe5\xf0\x1b\xe0\
\xf9\xec\x10\xea\x3e\x0b\x48\xbd\x6c\x04\xbe\x9a\x1d\x42\x9a\xa6\
\x11\xe2\x18\xdf\xb7\x80\x0f\x71\x08\x51\x9a\x8e\x3e\x60\x35\xb0\
\x0e\x58\x89\x5b\xac\x54\x1e\xbf\x02\x5e\xc8\x0e\xa1\xde\xb0\x80\
\xd4\xcf\x03\xc0\xdd\xd9\x21\xa4\x26\x0d\x03\xef\x8c\x3f\x3b\x72\
\xa3\x48\x85\xd3\x20\x4e\xb1\x5a\x47\xac\x78\x5c\x91\x9a\x46\x6a\
\xde\x73\xc0\x4b\xd9\x21\xd4\x3b\x16\x90\x7a\xba\x17\xf8\xab\xec\
\x10\x52\x8b\x0e\x13\xdb\xb3\xde\x23\x86\xd7\x5d\x19\x51\x1d\x4d\
\x94\x8e\x35\x44\xe9\xb8\x32\x35\x8d\xd4\xba\xff\x4b\xdc\x17\xa5\
\x1a\xb1\x80\xd4\xd7\x5d\xc0\x37\xb3\x43\x48\x6d\x3a\x4e\x14\x91\
\xf7\x88\x95\x11\xcb\x88\xaa\xac\x8f\x38\xc1\x6a\x0d\xb1\xcd\x6a\
\x76\x6e\x1c\xa9\x2d\x63\xc4\x05\x83\xef\x64\x07\x51\xef\x59\x40\
\xea\x6d\x1d\x71\x42\x96\x97\x4e\xa9\x0a\x86\x89\x95\x91\x2d\xc4\
\xcc\x88\x03\xec\xaa\x82\x01\x62\x96\x63\x35\xb1\xd2\x31\x2b\x37\
\x8e\xd4\x11\xa3\xc0\x4f\x88\xef\xd7\xaa\x21\x0b\x88\x56\x03\x8f\
\xe1\xa0\xa2\xaa\x65\x8c\x58\x11\xd9\x32\xfe\x7c\x9e\x9a\x46\x6a\
\xce\x02\xe2\x7b\xf3\x6a\x60\x19\x7e\x48\xa4\x6a\x19\x06\x9e\xc2\
\xfb\x9f\x6a\xcd\x02\x22\x88\x7d\xc4\x8f\xe3\x27\x6b\xaa\xae\x4f\
\x99\x5c\x19\xd9\x09\x9c\xce\x8d\x23\x9d\xa5\x8f\xf8\x3e\x3c\x51\
\x3a\xae\x4a\x4d\x23\x75\xcf\x71\xe0\x09\x60\x6f\x76\x10\xe5\xb2\
\x80\x68\xc2\x62\xe0\x7b\xb8\xa7\x58\xd5\x37\x4a\x94\x90\x0f\x81\
\x6d\xf8\x83\x50\x39\x16\x13\xf3\x1c\x2b\x71\x95\x43\xf5\x70\x98\
\x28\x1f\x9f\x65\x07\x51\x3e\x0b\x88\xa6\x9a\x0f\xfc\x00\x3f\x7d\
\x53\xbd\x1c\x27\xca\xc8\x8e\xf1\xc7\xed\x5a\xea\x86\x05\xc4\x2a\
\xc7\x8a\xf1\xc7\xa3\x72\x55\x27\xfb\x80\x27\x81\x23\xd9\x41\x54\
\x0c\x16\x10\x9d\x6b\x88\xd8\x8e\xb5\x24\x3b\x88\x94\xe4\x28\xb1\
\x32\xb2\x93\x28\x24\x7e\x5a\xa7\x56\x2c\x24\x0a\xc7\x72\x62\x85\
\xc3\x63\x72\x55\x57\xdb\x81\x1f\x03\x27\xb3\x83\xa8\x38\x2c\x20\
\xba\x90\x7e\x62\x30\x7d\x55\x76\x10\xa9\x00\x8e\x13\x65\x64\x27\
\xb0\x0b\xd8\x83\x33\x24\x3a\x5b\x3f\xb1\xa5\x6a\x29\x51\x36\x96\
\xe1\x0a\x87\x04\xf0\x36\x71\xd4\xae\x47\xa4\xeb\x2c\x16\x10\x5d\
\x4c\x03\xd8\x08\xdc\x91\x1d\x44\x2a\x98\x31\x60\x3f\x51\x48\xf6\
\x8c\x7f\x75\xdb\x56\xbd\x2c\x20\x4a\xc6\xe2\xf1\xaf\x0b\x70\x86\
\x43\x3a\xd7\xcb\xc0\xb3\xd9\x21\x54\x4c\x16\x10\x5d\xce\xd7\x81\
\xbf\xcc\x0e\x21\x15\xdc\x30\x31\xcc\x3e\xf5\xd9\x8f\x9f\xfa\x95\
\x5d\x83\xd8\x4a\xb5\x18\x58\x34\xe5\xf1\xc4\x40\xe9\xe2\xc6\x88\
\xe2\xf1\x4a\x76\x10\x15\x97\x05\x44\xd3\xb1\x9e\x58\x0d\xf1\x13\
\x3e\x69\xfa\x26\x56\x4a\xf6\x8c\x7f\xdd\x4f\xcc\x93\x38\x84\x59\
\x4c\xf3\x88\x95\x8c\x85\xe3\xcf\xa2\xf1\xaf\x7e\xdf\x93\xa6\x6f\
\x94\xd8\x72\xf5\x5e\x76\x10\x15\x9b\x05\x44\xd3\xb5\x92\x98\x0b\
\xf1\x93\x3f\xa9\x3d\xc3\x44\x11\xd9\x3f\xe5\xeb\x21\x62\x1b\x97\
\x2b\x26\xdd\xd5\x47\x14\x8d\xf9\x44\xb9\x58\x30\xe5\xab\xdf\xdb\
\xa4\xf6\x1c\x27\x86\xcd\xbd\x60\x50\x97\x65\x01\x51\x33\x16\x12\
\x77\x85\xcc\xcd\x0e\x22\x55\xd0\x18\xb1\x3a\xf2\xf9\x39\xcf\xa1\
\xf1\x3f\x3f\x91\x17\xad\x54\x06\x81\x39\x44\xc9\x38\xf7\xf1\x7b\
\x97\xd4\x1d\xfb\x88\xdb\xcd\x0f\x65\x07\x51\x39\x58\x40\xd4\xac\
\x21\xe0\x3b\xc0\x97\xb2\x83\x48\x35\x33\xca\x64\x19\x39\x32\xe5\
\xd7\xc7\x88\x72\x72\x6c\xfc\xa9\xea\x09\x5d\xfd\x44\xb9\x18\x62\
\xb2\x64\x4c\x3c\xf3\xa6\xfc\x7a\x66\x56\x40\xa9\xa6\xb6\x02\x3f\
\xc1\x63\x76\xd5\x04\x0b\x88\x5a\xd1\x07\x3c\x0c\xac\xcd\x0e\x22\
\xe9\x3c\x23\x4c\x16\x92\x13\xe3\xcf\xc9\x8b\x3c\xa7\xc6\xbf\x9e\
\x99\xf2\xf5\x54\x97\x72\xf5\x13\x43\xdd\x03\xc4\xf7\x90\xfe\xf1\
\x67\x60\xca\x33\x78\x81\xdf\x0f\x8d\x3f\x16\x0b\xa9\x78\xfe\x00\
\xfc\x1c\xb7\x8f\xaa\x49\x16\x10\xb5\xe3\x3e\xe0\x2f\xb2\x43\x48\
\xea\xb8\x51\x62\x25\xe5\x42\x85\x64\xa2\xac\x4c\x35\x40\x94\x8b\
\xa9\x26\x0a\x47\x1f\x96\x07\xa9\x6a\x3c\xe9\x4a\x6d\xb1\x80\xa8\
\x5d\xeb\x80\x87\xf0\x0d\x86\x24\x49\x75\x30\x02\x3c\x0d\x6c\xc9\
\x0e\xa2\xf2\xf2\x78\x41\xb5\x6b\x1f\xb0\x83\xb8\x35\xdd\x53\x64\
\x24\x49\xaa\xae\x83\xc0\x3f\xe2\x49\x57\x6a\x93\x05\x44\x9d\x70\
\x18\x78\x07\xb8\x9e\x18\x02\x95\x24\x49\xd5\xb2\x1d\x78\x02\x4f\
\xba\x52\x07\x58\x40\xd4\x29\x23\xc0\x9b\x44\x01\xb9\x2e\x39\x8b\
\x24\x49\xea\x9c\xdf\x11\x17\x0c\x76\xeb\x90\x0a\xd5\x8c\x05\x44\
\x9d\x74\x06\xd8\x44\x0c\xa8\xae\xe0\xfc\xa1\x54\x49\x92\x54\x1e\
\xa3\xc0\x33\xc0\x4b\xc0\x17\xc9\x59\x54\x21\x16\x10\x75\xc3\x2e\
\xe0\x63\x62\x2e\xa4\x3f\x39\x8b\x24\x49\x6a\xde\x61\xe0\x87\xc0\
\x07\xd9\x41\x54\x3d\x16\x10\x75\xcb\x41\xe0\x5d\x60\x39\x70\x65\
\x6e\x14\x49\x92\xd4\x84\x8f\x88\x79\x8f\x03\xd9\x41\x54\x4d\x16\
\x10\x75\xd3\x49\xe0\x2d\x60\x2e\xb0\x28\x39\x8b\x24\x49\xba\xbc\
\xdf\x13\xc7\xec\x8e\x64\x07\x51\x75\x59\x40\xd4\x6d\x63\xc0\xfb\
\xc4\x6d\xcc\x37\xe0\x6b\x4e\x92\xa4\x22\x1a\x01\xfe\x03\xe7\x3d\
\xd4\x03\xbe\x19\x54\xaf\xec\x06\x3e\x24\xe6\x42\x06\x92\xb3\x48\
\x92\xa4\x49\x9f\x12\xf7\x7b\x6c\xcf\x0e\xa2\x7a\xb0\x80\xa8\x97\
\x8e\x12\x47\xf5\x5e\x0b\x5c\x9d\x9c\x45\x92\x24\xc1\xdb\xc0\x53\
\xc4\xcf\x68\xa9\x27\x2c\x20\xea\xb5\x51\x62\x2e\xe4\x0c\x71\x71\
\xa1\x47\xf5\x4a\x92\xd4\x7b\xa3\xc0\x2f\x81\xe7\x88\xed\xd2\x52\
\xcf\x58\x40\x94\xe5\x23\x3c\xaa\x57\x92\xa4\x0c\x87\x81\x1f\x11\
\x33\x9a\x52\xcf\x59\x40\x94\xe9\x20\xb1\xf4\xbb\x04\x98\x97\x9c\
\x45\x92\xa4\x3a\xd8\x0c\x3c\x89\x47\xec\x2a\x91\x05\x44\xd9\x46\
\x88\xb9\x90\x2f\x80\x65\xb8\x25\x4b\x92\xa4\x6e\x18\x05\x9e\x05\
\x7e\x31\xfe\x6b\x29\xcd\x9f\x65\x07\x90\xa6\x58\x0e\x3c\x42\xdc\
\x1b\x22\x49\x92\x3a\xe3\x00\xf0\x13\x60\x6f\x76\x10\x09\x5c\x01\
\x51\xb1\x1c\x22\x56\x43\xae\x01\x16\x24\x67\x91\x24\xa9\x0a\x5e\
\x07\xfe\x89\x98\xfb\x90\x0a\xc1\x02\xa2\xa2\x19\x25\xe6\x42\xbc\
\xb8\x50\x92\xa4\xd6\x4d\x5c\x2c\xf8\x2b\x3c\xe5\x4a\x05\xe3\x16\
\x2c\x15\xd9\x22\xe0\x51\x62\x45\x44\x92\x24\x4d\xcf\x6e\xe0\x69\
\xe0\xf3\xec\x20\xd2\x85\xf8\xe9\xb2\x8a\xec\x18\xf0\x1a\x30\x48\
\x9c\x94\x25\x49\x92\x2e\x6e\x0c\x78\x19\xf8\x17\x62\x27\x81\x54\
\x48\xae\x80\xa8\x2c\x56\x02\x0f\x03\x57\x66\x07\x91\x24\xa9\x80\
\x0e\x00\xff\x0e\xec\xcc\x0e\x22\x5d\x8e\x05\x44\x65\x32\x08\x6c\
\x04\xbe\x9c\x1d\x44\x92\xa4\x02\xf9\x2f\xe2\x56\xf3\x53\xd9\x41\
\xa4\xe9\xb0\x80\xa8\x8c\xd6\x01\x0f\x02\x57\x64\x07\x91\x24\x29\
\xd1\x71\x62\xd5\x63\x4b\x76\x10\xa9\x19\x16\x10\x95\xd5\x1c\xe2\
\xce\x90\x1b\xb2\x83\x48\x92\x94\xe0\x7d\xe0\x19\x9c\xf5\x50\x09\
\x39\x84\xae\xb2\x1a\x01\xde\x00\x4e\x12\x17\x18\xfa\x5a\x96\x24\
\xd5\xc1\x30\xf0\x73\xe0\x39\xbc\xd1\x5c\x25\xe5\x0a\x88\xaa\x60\
\x3e\x31\xa0\x7e\x7d\x76\x10\x49\x92\xba\xe8\x03\x62\xd5\xe3\x48\
\x76\x10\xa9\x1d\x16\x10\x55\xc9\x5d\xc0\xfd\xc0\xac\xec\x20\x92\
\x24\x75\xd0\x30\x31\x64\xfe\x46\x76\x10\xa9\x13\x2c\x20\xaa\x9a\
\x79\xc4\x6a\x88\xb3\x21\x92\xa4\x2a\x78\x1f\xf8\x29\x71\x37\x96\
\x54\x09\x16\x10\x55\xd5\x9d\xc0\x37\x70\x35\x44\x92\x54\x4e\xc7\
\x89\x59\x8f\x77\xb2\x83\x48\x9d\x66\x01\x51\x95\xcd\x01\x1e\x02\
\x56\x65\x07\x91\x24\xa9\x09\x6f\x13\xe5\xc3\x13\xae\x54\x49\x16\
\x10\xd5\xc1\x3a\x62\x35\xc4\x5b\xd4\x25\x49\x45\x76\x90\x28\x1e\
\xde\xeb\xa1\x4a\xb3\x80\xa8\x2e\x06\x88\x01\xf5\xaf\x66\x07\x91\
\x24\xe9\x1c\x63\xc0\x2b\xc0\x8b\x78\x9b\xb9\x6a\xc0\x02\xa2\xba\
\x59\x06\x6c\x04\xae\xcd\x0e\x22\x49\x12\xf0\x31\x31\x64\xbe\x37\
\x3b\x88\xd4\x2b\x16\x10\xd5\x51\x03\xd8\x00\xdc\x0b\xcc\x4c\xce\
\x22\x49\xaa\xa7\x61\xe0\x05\xe0\xd5\xec\x20\x52\xaf\x59\x40\x54\
\x67\xf3\x89\xd5\x90\x1b\xb3\x83\x48\x92\x6a\xe5\x5d\x62\xd6\xc3\
\xa3\x75\x55\x4b\x16\x10\x09\xd6\x00\x0f\x00\x73\xb3\x83\x48\x92\
\x2a\xed\x53\xe2\x42\xc1\x0f\xb3\x83\x48\x99\x2c\x20\x52\xe8\x23\
\xb6\x64\xdd\x83\xdb\xb2\x24\x49\x9d\x35\x42\x0c\x98\xbf\x02\x9c\
\xc9\x8d\x22\xe5\xb3\x80\x48\x67\x9b\x4f\xac\x86\xdc\x94\x1d\x44\
\x92\x54\x09\x6f\x02\xcf\xe2\x76\x2b\xe9\x4f\x2c\x20\xd2\x85\xad\
\x04\x1e\x04\xae\xce\x0e\x22\x49\x2a\xa5\x4f\x88\x39\x8f\x9d\xd9\
\x41\xa4\xa2\xb1\x80\x48\x17\x37\x71\x5a\xd6\x06\x60\x56\x72\x16\
\x49\x52\x39\x4c\x9c\x6e\xf5\x47\xdc\x6e\x25\x5d\x90\x05\x44\xba\
\xbc\x21\xe0\x3e\xe0\x8e\xec\x20\x92\xa4\xc2\x9a\xb8\x4c\xf0\x25\
\xe0\x44\x72\x16\xa9\xd0\x2c\x20\xd2\xf4\x2d\x22\xe6\x43\x6e\xc8\
\x0e\x22\x49\x2a\x94\xf7\x89\x39\x8f\xcf\xb3\x83\x48\x65\x60\x01\
\x91\x9a\xb7\x92\x28\x22\xd7\x64\x07\x91\x24\xa5\xfa\x84\x38\x56\
\x77\x47\x72\x0e\xa9\x54\x2c\x20\x52\x6b\x1a\xc0\x9d\xc0\xd7\x81\
\xd9\xb9\x51\x24\x49\x3d\x76\x98\x98\xf3\x78\x23\x3b\x88\x54\x46\
\x16\x10\xa9\x3d\x03\xc4\xfd\x21\x77\xe1\xfd\x21\x92\x54\x75\x23\
\xc4\x8c\xc7\x6f\x81\xd3\xc9\x59\xa4\xd2\xb2\x80\x48\x9d\x31\x87\
\x28\x22\xeb\x81\x19\xc9\x59\x24\x49\x9d\x35\x0a\xbc\x8a\x03\xe6\
\x52\x47\x58\x40\xa4\xce\x9a\x4f\x9c\x98\xb5\x36\x3b\x88\x24\xa9\
\x6d\x63\xc4\x36\xab\x17\x81\x23\xb9\x51\xa4\xea\xb0\x80\x48\xdd\
\xb1\x08\xb8\x1f\x58\x95\x1d\x44\x92\xd4\x92\x77\x89\x39\x8f\xcf\
\xb2\x83\x48\x55\x63\x01\x91\xba\x6b\x19\xf0\x0d\xe0\x4b\xd9\x41\
\x24\x49\xd3\xb2\x15\x78\x1e\xd8\x93\x1d\x44\xaa\x2a\x0b\x88\xd4\
\x1b\x2b\x89\xad\x59\x4b\xb2\x83\x48\x92\x2e\x68\x3b\xb1\xe2\xb1\
\x33\x3b\x88\x54\x75\x16\x10\xa9\xb7\x56\x12\x47\xf7\xba\x22\x22\
\x49\xc5\x60\xf1\x90\x7a\xcc\x02\x22\xe5\xb0\x88\x48\x52\xae\xad\
\xc4\x70\xb9\xc5\x43\xea\x31\x0b\x88\x94\xcb\x22\x22\x49\xbd\x65\
\xf1\x90\x92\x59\x40\xa4\x62\x58\x41\xdc\x23\x72\x43\x76\x10\x49\
\xaa\xa8\x0f\x80\x5f\x63\xf1\x90\xd2\x59\x40\xa4\x62\x59\x0a\x6c\
\x00\x6e\xc9\x0e\x22\x49\x15\x30\x06\xbc\x43\xdc\x5c\xbe\x37\x39\
\x8b\xa4\x71\x16\x10\xa9\x98\x16\x10\x45\x64\x1d\xde\xac\x2e\x49\
\xcd\x1a\x05\x5e\x23\x8a\xc7\xa1\xe4\x2c\x92\xce\x61\x01\x91\x8a\
\x6d\x0e\x70\x0f\xb0\x1e\x98\x95\x9c\x45\x92\x8a\x6e\x18\x78\x15\
\x78\x05\x38\x91\x9c\x45\xd2\x45\x58\x40\xa4\x72\x18\x04\xee\x1a\
\x7f\x66\x27\x67\x91\xa4\xa2\x39\x4c\x94\x8e\x3f\x02\xa7\x92\xb3\
\x48\xba\x0c\x0b\x88\x54\x2e\x7d\xc0\xad\xc4\xaa\xc8\xb5\xc9\x59\
\x24\x29\xdb\xc7\x44\xf1\x78\x0f\x38\x93\x9c\x45\xd2\x34\x59\x40\
\xa4\xf2\x5a\x4e\x14\x91\x9b\x92\x73\x48\x52\x2f\x8d\x11\x85\xe3\
\x15\x60\x57\x72\x16\x49\x2d\xb0\x80\x48\xe5\x37\x1f\xf8\x1a\x70\
\x3b\xce\x89\x48\xaa\xae\x61\x62\xb0\xfc\x15\xe0\x48\x72\x16\x49\
\x6d\xb0\x80\x48\xd5\x31\x40\x0c\xab\xdf\x09\x5c\x9d\x9c\x45\x92\
\x3a\x65\x1f\x31\xdb\xf1\x06\xce\x77\x48\x95\x60\x01\x91\xaa\x69\
\x05\x31\xb0\xbe\x1a\x8f\xf1\x95\x54\x3e\xa3\xc0\x26\xe2\x44\x2b\
\x2f\x0e\x94\x2a\xc6\x02\x22\x55\xdb\x1c\x62\x55\x64\x3d\x30\x37\
\x39\x8b\x24\x5d\xce\x41\x62\xb5\xe3\x35\x3c\x46\x57\xaa\x2c\x0b\
\x88\x54\x0f\x0d\x62\x35\xe4\x2e\xe0\xc6\xe4\x2c\x92\x34\xd5\x18\
\xf0\x21\xb1\xda\xf1\x61\x72\x16\x49\x3d\x60\x01\x91\xea\x67\x3e\
\x31\xb0\xbe\x1e\xb8\x32\x39\x8b\xa4\xfa\x3a\x40\xcc\x75\xbc\x81\
\x43\xe5\x52\xad\x58\x40\xa4\xfa\x6a\x10\xb3\x22\xeb\x89\xd5\x91\
\x99\xb9\x71\x24\xd5\xc0\x28\xf0\x0e\xb1\xc5\xca\xd9\x0e\xa9\xa6\
\x8d\x42\x03\x65\x00\x00\x03\x2b\x49\x44\x41\x54\x2c\x20\x92\x20\
\x4e\xd0\x5a\x47\xac\x8c\x2c\x49\xce\x22\xa9\x7a\x3e\x26\x56\x3a\
\xde\x01\x4e\x26\x67\x91\x94\xcc\x02\x22\xe9\x5c\x8b\x88\x55\x91\
\x5b\x81\xd9\xc9\x59\x24\x95\xd7\x61\xe0\x2d\xa2\x78\x7c\x96\x9c\
\x45\x52\x81\x58\x40\x24\x5d\xcc\xc4\x16\xad\x75\xc0\xcd\x78\xc9\
\xa1\xa4\xcb\x1b\x26\x6e\x29\x7f\x0b\xd8\x91\x1b\x45\x52\x51\x59\
\x40\x24\x4d\x47\x1f\x51\x42\xd6\x01\x2b\xf1\x6e\x11\x49\x93\x26\
\xee\xec\x78\x87\x38\xc5\xea\x74\x6e\x1c\x49\x45\x67\x01\x91\xd4\
\xac\x01\x62\x7b\xd6\x3a\xe0\xfa\xe4\x2c\x92\x72\x8c\x01\xdb\x88\
\xd2\xf1\x1e\xde\x50\x2e\xa9\x09\x16\x10\x49\xed\x18\x02\xd6\x8c\
\x3f\xcb\x70\x65\x44\xaa\xb2\x89\xd2\xf1\x1e\xb1\xe2\xe1\x45\x81\
\x92\x5a\x62\x01\x91\xd4\x29\x83\x4c\x96\x91\xe5\x58\x46\xa4\x2a\
\x18\xe5\xec\xd2\xe1\x09\x56\x92\xda\x66\x01\x91\xd4\x0d\x03\xc4\
\xcc\xc8\x1a\x62\x90\xdd\x3b\x46\xa4\xf2\x18\x05\xb6\x10\x85\x63\
\x13\x6e\xaf\x92\xd4\x61\x16\x10\x49\xdd\xd6\x4f\x94\x90\xd5\xe3\
\x8f\xb7\xaf\x4b\xc5\x73\x98\x28\x1d\x5b\x88\x15\x0f\x07\xc9\x25\
\x75\x8d\x05\x44\x52\xaf\x2d\x26\x56\x47\x56\x03\xd7\x25\x67\x91\
\xea\x6c\x37\xb1\xc2\xb1\x05\xd8\x9b\x9c\x45\x52\x8d\x58\x40\x24\
\x65\x9a\xc3\xe4\xca\x88\x5b\xb5\xa4\xee\x1a\x26\xee\xe6\x98\x58\
\xe9\x38\x96\x9a\x46\x52\x6d\x59\x40\x24\x15\x45\x83\x38\x49\x6b\
\x25\x51\x46\x96\xe4\xc6\x91\x4a\x6f\x0c\xd8\x43\xdc\xcd\xb1\x0d\
\xd8\x05\x9c\x49\x4d\x24\x49\x58\x40\x24\x15\xd7\x20\x51\x44\x56\
\x10\xa5\x64\x6e\x6e\x1c\xa9\x14\x0e\x10\x65\xe3\x43\x62\xb5\xc3\
\x53\xab\x24\x15\x8e\x05\x44\x52\x59\x2c\x20\xca\xc8\x72\x62\xa5\
\xc4\x61\x76\x29\x86\xc7\x77\x00\x3b\x89\xd2\x71\x28\x35\x8d\x24\
\x4d\x83\x05\x44\x52\x59\x2d\x60\xb2\x8c\x2c\xc7\x15\x12\xd5\xc3\
\x41\xa2\x70\xec\x20\x4a\xc7\xe7\x99\x61\x24\xa9\x15\x16\x10\x49\
\x55\x31\x9f\xc9\x32\xb2\x0c\xb8\x3a\x35\x8d\xd4\x19\x9f\x12\x45\
\x63\xc7\xf8\x73\x24\x33\x8c\x24\x75\x82\x05\x44\x52\x55\x0d\x02\
\x4b\x89\x63\x7f\x97\x8d\x7f\xbd\x22\x35\x91\x74\x69\xc3\xc4\xa0\
\xf8\x2e\xa2\x74\xec\xc1\x19\x0e\x49\x15\x64\x01\x91\x54\x27\x0b\
\x89\x52\x32\xf1\x2c\x00\x66\xa4\x26\x52\x5d\x8d\x01\xfb\x99\x2c\
\x1a\x6e\xa7\x92\x54\x1b\x16\x10\x49\x75\xd6\x47\x94\x92\xc5\xc0\
\xa2\x29\x8f\xf7\x91\xa8\x93\x46\x88\xb2\xb1\x87\xb8\xf0\x6f\xcf\
\xf8\xef\x3d\x12\x57\x52\x2d\x59\x40\x24\xe9\x6c\x0d\x62\x65\x64\
\xa2\x8c\x2c\x1e\xff\xbd\xa7\x6e\x69\x3a\x0e\x03\x9f\x31\x59\x36\
\xf6\x8e\xff\x5e\x92\x34\xce\x02\x22\x49\xd3\x33\x48\x14\x91\x85\
\xe7\x3c\xb3\x33\x43\x29\xcd\x44\xd1\xd8\x3f\xe5\xf9\x0c\x67\x36\
\x24\xe9\xb2\x2c\x20\x92\xd4\x9e\x41\xa2\x88\x2c\x20\x4e\xe2\x9a\
\xfa\xb8\x95\xab\xdc\x46\x88\xb9\x8c\xa9\x8f\x45\x43\x92\xda\x64\
\x01\x91\xa4\xee\x99\xc3\xf9\xa5\x64\xde\xf8\xe3\xca\x49\x31\x1c\
\x25\x8e\xb6\x3d\xb7\x68\x7c\x0e\x1c\x4b\xcc\x25\x49\x95\x65\x01\
\x91\xa4\x1c\x7d\x44\x41\x99\x77\xce\xd7\xa9\xbf\x9e\x95\x96\xae\
\x1a\x86\x89\x72\x71\x84\xb8\x21\xfc\x42\xbf\x3e\x9d\x96\x4e\x92\
\x6a\xca\x02\x22\x49\xc5\xd5\x47\x6c\xf1\x9a\x33\xfe\x75\x68\xfc\
\x39\xf7\xd7\x03\xe3\x4f\xd5\x0b\xcb\x08\xb1\xf5\xe9\x24\x70\x82\
\x28\x10\x27\x88\x95\x8a\x63\x17\xf8\xb5\xe5\x42\x92\x0a\xc8\x02\
\x22\x49\xd5\xd1\x60\xb2\x8c\x4c\x3c\x53\x0b\x4a\xff\x94\xff\xce\
\xd4\xaf\xfd\x17\xf8\xcf\x26\xf4\x9f\xf3\xfb\x89\x3f\x9b\xb8\x3f\
\x65\x94\xf3\xdf\xe8\x9f\x3e\xe7\xcf\xce\x10\xa5\x61\xe2\xcf\x4f\
\x4d\xf9\xb3\x73\xff\xb3\x89\x72\x71\xf2\x02\x8f\xc7\xd6\x4a\x52\
\x05\xfc\x37\x3a\xd2\x22\xbd\xb5\x96\xf6\xac\x00\x00\x00\x00\x49\
\x45\x4e\x44\xae\x42\x60\x82\
\x00\x00\x0a\x0b\
\x89\
\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\
\x00\x00\x80\x00\x00\x00\x80\x08\x06\x00\x00\x00\xc3\x3e\x61\xcb\
\x00\x00\x00\x04\x73\x42\x49\x54\x08\x08\x08\x08\x7c\x08\x64\x88\
\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\
\x01\x00\x9a\x9c\x18\x00\x00\x09\xad\x49\x44\x41\x54\x78\x9c\xed\
\x9d\x7b\x8c\x5d\x45\x1d\xc7\x3f\xbb\x5d\xba\xd6\xdd\x42\x59\x85\
\x42\x4b\x61\xb1\xa0\x29\x86\x52\x84\x22\x52\x68\x51\x04\x4a\x8c\
\x44\xe5\xa1\x08\xa8\x31\x46\xa3\x31\xfa\x0f\xc1\x57\x50\xe3\x93\
\x18\x8d\xf1\x41\x20\xa9\x28\x8f\x00\x26\x54\x31\x44\x01\x25\x5b\
\x4b\x8b\xa0\x01\xa1\xae\x5a\xd4\x56\x68\x69\xa5\xb5\x0f\x28\x2c\
\xb5\xaf\xdd\x7b\xfd\xe3\x77\xef\xde\x73\x67\xcf\xf3\x9e\x39\x33\
\x73\xee\x99\x4f\xf2\x6b\xf7\x9e\x7b\xee\x39\xbf\x3b\xf3\xbd\x73\
\xce\x99\xf9\xcd\x6f\x7a\xe8\x4e\x7a\x80\xa3\x81\x63\x1a\xff\xbf\
\x1e\x38\x12\x18\x04\x06\x80\x7e\x60\x3a\xd0\xdb\xd8\xbf\x06\x1c\
\x04\xf6\x03\x7b\x81\x31\xe0\x25\x60\x37\xb0\x13\xd8\x0e\xec\x00\
\xea\xc6\xbe\x81\x21\x7a\x6c\x3b\x90\x93\x01\x60\x11\x70\x1a\x70\
\x0a\xf0\x46\xe0\x0d\xc0\x3c\xa4\x82\x75\x72\x10\xd8\x02\x6c\x02\
\x36\x02\xff\x04\xfe\x0a\x3c\x09\xec\xd1\x7c\x2e\x4f\x04\x33\x80\
\x4b\x81\x1f\x01\xa3\xc0\x04\xf2\xab\xb4\x69\x35\x44\x04\x37\x00\
\xc3\x85\x7d\xf3\x8a\xb3\x0c\xb8\x1b\x69\x9e\x6d\x57\x78\x9c\x4d\
\x00\xf7\x01\xa7\x17\x53\x0c\xd5\x63\x29\xf0\x38\xf6\x2b\xb6\x93\
\x56\xe1\x56\xe4\xbe\xc3\xd3\x01\xd3\x81\x9b\x90\x82\xb4\x5d\x99\
\x79\x6c\x2b\x70\x8e\xe6\xb2\xe9\x7a\x66\x00\x23\xd8\xaf\x3c\x5d\
\x76\x00\xb8\x52\x6b\x09\x75\x39\x3f\xc7\x7e\xa5\xe9\xb6\x71\xe0\
\x32\x9d\x85\xd4\xad\x5c\x89\xfd\xca\x2a\xca\xf6\x03\x6f\xd1\x57\
\x54\x7a\x70\xa9\x1f\xa0\x07\x78\x06\x78\x53\x8a\x7d\x77\x23\x8f\
\x81\xe3\xc0\x02\xe0\xb8\x02\xfd\xd2\xc9\x06\x60\x21\x22\x06\x8f\
\xc2\x52\x92\x7f\x45\xdb\x81\xab\x80\x69\xca\x67\x2f\x00\xd6\xa7\
\xf8\xbc\x0b\xf6\x95\x9c\xe5\xd4\xb5\xdc\x48\x7c\xc1\x3d\x0f\x1c\
\x1f\xf3\xf9\x41\xe0\xb1\x84\x63\xb8\x60\x2f\x03\xb3\x3a\x2a\xa1\
\x2e\x67\x35\xf1\x05\xb7\x2c\xc5\x31\x8e\xc3\xfd\xce\xa2\x3a\xf0\
\xa9\x6c\x45\x53\x0d\xb6\x13\x5d\x60\x7f\xc8\x70\x9c\x5b\x62\x8e\
\xe3\x8a\xad\xca\xf0\x7d\x0a\xa5\x37\x79\x17\x23\xf4\x21\xa3\x76\
\x51\x64\x29\xb0\x91\x9c\xbe\x98\x60\x09\xfa\x07\xab\x3a\xc2\x15\
\x01\xcc\x22\xfe\x89\x64\x67\x86\x63\xed\xc8\xe9\x8b\x09\xa6\x03\
\x27\xd9\x76\x02\xdc\x11\xc0\x6b\x12\xde\x9f\x9d\xe1\x58\xc7\xe4\
\x71\xc4\x20\xc7\xda\x76\x00\xdc\x11\x80\xfa\x58\xa7\x72\x61\x86\
\x63\x5d\x94\xc7\x11\x83\x0c\xd8\x76\x00\xdc\x11\x40\x52\x87\xd4\
\x62\xe0\xe2\x14\xc7\x99\x0f\x7c\x30\xbf\x3b\x46\x70\xa2\xec\x9d\
\x70\x22\x25\xb7\x23\x11\x3f\x51\x0c\x01\x2b\x49\xbe\x9c\x78\x02\
\x94\x49\x00\xb3\x81\x3f\x21\xcf\xd0\xc1\xe6\xb3\x0f\xb8\x02\x78\
\x0a\x09\x0f\xf3\x94\x90\x61\xb2\x3d\x47\xef\x07\x9e\x06\x9e\x00\
\x5e\xc9\xf8\x59\x57\xec\x3d\x3a\x0a\x2e\x2f\x7d\xb6\x1d\xe8\x90\
\x7e\xfc\xaf\x5d\x0b\x65\xba\x04\x78\x0a\xc0\x0b\xa0\xe2\x78\x01\
\x54\x1c\x2f\x80\x8a\xe3\x05\x50\x71\x5c\x79\x0a\x98\x40\xc2\xbc\
\x6c\x70\x24\x15\xfe\x21\xb8\x22\x80\x2d\xc8\x04\x4e\x1b\x6c\x05\
\xe6\x5a\x3a\xb7\x75\x2a\xab\x7c\x8f\xe0\x05\x50\x71\x74\x5f\x02\
\xa6\x23\xcd\xe9\x10\xd2\x5b\x57\x06\x81\x39\x11\x99\x03\x9c\x45\
\x7a\x5f\x6a\xc0\xff\x80\x6d\xc0\x7f\xf3\x9c\x34\xaf\x00\x06\x80\
\x77\x01\x97\x00\x67\x23\xa3\x75\x65\xa8\x74\x17\xb9\x9f\x6c\x81\
\x2f\x4d\x5e\x04\x1e\x01\xee\x05\x7e\x89\x4c\x45\x2b\x9c\xf9\x48\
\xf0\xe5\x18\xf6\x07\x55\xca\x6a\xea\x60\x50\x5c\x50\x6c\x5a\xdb\
\x02\x7c\x68\x6a\x75\xe9\x63\x26\xf0\x03\xe0\x90\x06\x67\xab\x6e\
\x45\x08\xa0\x69\xf7\x21\xf3\x24\xb4\xb2\x18\xf8\xb7\x46\x27\xab\
\x6e\x45\x0a\xa0\x8e\x0c\x95\x1f\x41\x02\x69\xaf\xd7\x97\x03\x6b\
\x90\xfc\x3b\x9e\x72\x70\x26\xf0\x2b\x12\xee\xf3\xd2\x08\xe0\xfd\
\xc8\x94\x6d\x1f\x6a\x55\x3e\xce\x07\xbe\x16\xb7\x43\x92\x00\x96\
\x00\x77\x90\x1c\xb5\xeb\x71\x97\xeb\x81\x33\xa2\xde\x8c\x13\xc0\
\xeb\x90\x47\x0b\x57\x9e\x93\x3d\x9d\x31\x0d\xf8\x7e\xd4\x9b\x71\
\x02\xf8\x21\x8e\x4c\x5e\xf0\xe4\xe6\x3c\xe0\x9d\x61\x6f\x44\x09\
\x60\x09\xe5\x89\xaf\xf7\xa4\xe3\xba\xb0\x8d\x51\x02\x88\xbd\x71\
\xf0\x94\x92\x8b\x08\x79\x8a\x0b\x13\xc0\x22\xe0\x1d\x85\xbb\xe3\
\x31\x4d\x0f\x70\x8d\xba\x31\x4c\x00\x1f\x2d\xde\x17\x8f\x25\x2e\
\x57\x37\xa8\x02\xe8\xc1\xe7\xb4\x33\xc5\x21\xe5\xb5\x89\xe0\x9c\
\x53\x51\xf2\x19\xab\x02\x38\x9d\xce\x46\xa4\x3c\xd9\x19\x53\x5e\
\x1f\x6e\xe8\xbc\x6d\xb3\xa7\x55\x01\xf8\x6b\xbf\x39\x36\x05\xfe\
\x1e\x02\x0e\x33\x74\xde\xb6\x3a\x56\x05\x70\x9e\x21\x27\xaa\xce\
\x1e\x64\xe8\xb6\xc9\x02\x83\xe7\x6e\xab\x63\x55\x00\x6f\x33\xe8\
\x48\x95\x59\x8d\x8c\xd8\x35\x79\xab\xc1\x73\xcf\x21\x70\x1f\x10\
\x14\xc0\x89\xc0\x51\x06\x1d\xa9\x32\x2b\x95\xd7\xa1\xbd\x74\x05\
\x32\x29\xb8\xa0\x00\xce\x34\xec\x44\x55\xd9\x85\x04\x6c\x34\x19\
\x42\x32\x9d\x9a\x64\x71\xf3\x8f\xa0\x00\xfc\x74\x6b\x33\x7c\x0f\
\x09\xe8\x6c\x72\x0d\xe6\x07\xdc\x42\x93\x56\xdf\x8f\xfd\x28\x99\
\x6e\xb7\x0d\x48\xb4\x74\x93\xc3\x80\xcd\x16\xfc\x98\x9c\x85\x15\
\x6c\x01\x4c\xde\x89\x56\x91\x43\xc0\xd5\xb4\x47\xed\x7e\x92\xf8\
\xfc\xc7\x45\x31\x84\x92\x4e\xaf\x0f\x49\xbd\x6e\xfb\x17\xd2\xcd\
\xf6\x11\xa5\x12\x8e\x45\x12\x47\xdb\xf2\x67\x19\xb4\x5a\x80\xe3\
\xf1\x51\x3f\x45\x51\x43\x7e\xe9\xb7\x05\xb6\xf5\x02\x77\x62\xae\
\xf7\x2f\x8c\xf9\xd0\xea\x7f\x2e\xcb\x82\x0b\x65\x63\x17\x70\x2d\
\xf0\x90\xb2\xfd\x9b\x98\xbf\xf3\x57\x39\x01\x5a\x2d\x80\xef\xff\
\xd7\xcb\x04\xf0\x33\x64\x35\x53\xb5\xf2\x3f\x03\x7c\xde\xb8\x47\
\x53\x99\x0b\xad\x16\xc0\xaf\x6f\xa7\x87\x17\x90\x08\xea\x5b\x90\
\x3b\x7e\x95\x2f\x01\xdf\x30\xea\x51\x34\xb3\xa1\x25\x00\x9b\xd7\
\xa2\x4e\xd8\x86\x2c\x11\xb3\x05\x19\x55\x3b\x68\xc9\x8f\x43\x48\
\x9e\xc2\x4d\xc0\x3a\x64\xcd\xa3\x30\x06\x81\x15\xc0\x07\xcc\xb8\
\x95\x8a\x21\x68\x09\xa0\x0c\x91\xbf\x7f\x44\x6e\x9c\x7e\x8b\xcc\
\x50\x2a\x0b\x97\x20\x8b\x60\x9e\x68\xdb\x11\x85\x99\xc1\x17\x37\
\x60\xff\x31\x29\xcc\x6a\x48\xbf\x79\x19\x7b\x29\xcf\x05\x7e\x87\
\xfd\x32\x8c\xb2\x0d\xd0\x6a\x01\x26\x0a\x28\x80\xbc\x3c\x03\x7c\
\x02\x58\x6b\xdb\x91\x94\xf4\x22\x5d\xac\x17\x23\x11\xd5\xa7\xd8\
\x75\x27\x91\xbe\xc9\x7f\x70\x6f\x1d\xbb\x9f\x02\x9f\x06\xf6\x85\
\xbc\xd7\x8b\x44\x2e\x9d\x05\x9c\x8c\xac\x36\x62\xeb\x12\xd6\x87\
\x4c\xc0\x9c\x83\xe4\x46\x28\xd3\xf4\xb9\x71\x68\x09\xe0\x15\x8b\
\x8e\xa8\x7c\x0e\xf8\x4e\xc8\xf6\x79\xc8\x23\xd4\xb5\xf8\xc7\x56\
\x1d\xb4\x25\x92\x78\x1f\xf6\xaf\x49\x75\xa4\x82\x55\x06\x80\xef\
\x36\x1c\xb6\xed\x5f\x37\xd9\xe3\xd0\x6a\x01\xb6\x87\x14\xbc\x69\
\x6e\x44\xa6\xa3\x05\x59\x08\xfc\x02\x47\x16\x58\xea\x32\xda\xf2\
\x32\xce\xc3\xae\x1a\x47\x98\x1a\x9e\xf6\x76\x7c\x0a\x9a\x22\x6d\
\x05\x81\x42\xff\x0f\xf6\x3a\x53\x5e\x45\x46\xca\x6a\x81\x6d\x67\
\x03\xbf\xa6\x80\x34\x27\x9e\x49\x36\x43\x4b\x00\x35\xe0\x59\x4b\
\x8e\x7c\x9d\xf6\x08\xd9\xd9\x48\x66\x8b\xd7\xda\x71\xa7\x32\x6c\
\x84\xf6\x66\x37\xaa\x1b\xb3\x48\x76\x00\x3f\x56\xb6\xad\xc0\xdf\
\xe5\x9b\xe0\xef\xd0\x2e\x80\x51\x0b\x4e\xdc\x4c\x7b\x7c\xdc\x72\
\xe0\xdd\x16\xfc\xa8\x1a\xfb\x69\xfc\xe0\x83\x02\x58\x67\xd8\x89\
\x3a\x32\x64\x1a\xe4\xcb\x86\x7d\xa8\x2a\x7f\xa6\xd1\x11\x14\x14\
\xc0\x93\x86\x9d\x58\x47\xe3\x46\xa4\xc1\x42\xfc\xc4\x14\x53\x4c\
\x76\xaf\x07\x05\xb0\x15\x19\xcf\x36\x85\xba\xca\xf7\x15\x06\xcf\
\x5d\x75\x1e\x6e\xfe\xa1\x3e\x7b\x3f\x66\xd0\x89\xbf\x28\xaf\xfd\
\xc4\x54\x33\x8c\x01\x8f\x36\x5f\xa8\x02\x78\x14\x73\xa8\x11\x33\
\xa7\x1a\x3c\x77\x95\x79\x90\x40\x9f\x8f\x2a\x80\xd5\x06\x1d\xd9\
\x13\xf8\x7b\x16\x4a\x80\x82\xa7\x30\xee\x0d\xbe\x50\x05\x30\x8a\
\xb9\x71\x81\xbd\x81\xbf\x7d\xe5\x9b\x61\x0c\xf8\x4d\x70\x83\x2a\
\x80\x3a\x32\x45\xcc\x34\x7e\x4e\x82\x19\x56\xa2\xc4\x58\x84\x25\
\x89\xba\xcb\x8c\x2f\x1e\x0b\xa8\xfd\x2e\xa1\x02\x58\x43\x78\x48\
\xb3\xa7\xdc\xac\x27\x24\xbc\x2e\x2a\x51\x64\x64\x6e\x59\x4f\x69\
\x51\x63\x2d\x62\xe9\xa7\xf8\x69\xcb\xc1\xe9\x68\xc3\x05\x9f\xab\
\xea\xb6\x0d\x98\x41\x08\x51\x2d\xc0\x01\xe0\x0b\x11\xef\x79\xca\
\xc7\xb7\x09\x0f\xb0\x4d\xe4\x01\x7c\x0b\x50\x76\xfb\x07\x31\x29\
\xe8\x92\x16\x8c\xf8\x30\x12\x2d\xe4\x29\x27\x35\xe0\x63\x4c\xcd\
\x4a\x3a\x49\x92\x00\x76\x22\xeb\x02\xba\x14\x36\xee\x49\xcf\x57\
\xd1\xd4\xbd\x7f\x06\x12\xbd\xe3\x2f\x01\xe5\xb1\x9f\x20\xb9\x9f\
\xb5\x31\x0f\x79\x8e\xf4\x02\x70\xdb\x6a\xc0\xb7\xd0\x5c\xf9\x4d\
\x7a\x90\x08\x5e\x1d\xeb\x07\x7a\x01\xe8\xb7\x51\x0c\x0d\xab\x4f\
\x43\xb2\x4e\xdf\x8c\x04\x17\x1e\xec\xc0\x59\x2f\x80\xfc\x36\x0e\
\xfc\x0b\x69\xee\x2f\xa4\x83\x75\x9b\x75\x35\x13\xd3\x90\x34\xb3\
\x83\xa4\xcf\x7b\xbf\x91\x46\x5c\x1a\x22\x80\xe7\x34\xf9\x92\x95\
\xf3\xc9\xb9\x02\xb7\x05\x6a\xc8\x68\xea\x4e\xec\xcd\xe7\xd0\xca\
\x30\xf6\x7e\x45\x95\x4e\x90\xe5\x97\x7a\xaf\x38\x5e\x00\x15\xc7\
\x0b\x40\xa6\xa5\xd9\xb8\xf4\xa8\xab\x87\x5b\xc1\x0b\xa0\xe2\x78\
\x01\x54\x1c\x2f\x80\x8a\xe3\x05\x50\x71\xbc\x00\x2a\x8e\x17\x40\
\xc5\x31\xb1\x5c\x69\x37\xb3\x0b\x78\x1a\xe9\xd2\x5e\x80\xb2\x2c\
\xab\x27\x3d\xc3\xd8\x1f\x58\xc9\x62\x2f\x20\x6b\x2c\xab\x13\x5a\
\xce\x45\x04\x51\x9a\x7e\x00\x57\x18\xc6\x7e\xa5\xa6\xb5\xe7\x68\
\xe4\xda\x8f\x60\x06\xb0\x2a\xc5\x71\x9c\x10\x80\xbf\x07\xc8\xce\
\xd5\xc4\xc7\x49\xee\x43\xd2\xc2\xbf\x6c\xc6\x9d\x7c\xb8\x22\x80\
\x5a\xf2\x2e\x4e\xb0\x96\x74\x39\x14\x76\x10\x32\x0d\x4b\xc1\x89\
\xef\xec\x8a\x00\xf6\x26\xef\xe2\x04\xbf\xd7\xb8\xaf\xba\x7c\xbc\
\x15\x5c\x11\xc0\x8b\x94\x43\x04\xbb\x93\x77\x49\xbd\xaf\xc9\x74\
\x3c\x91\xb8\x22\x80\x3a\x76\xd2\xd4\x65\x65\x4e\x86\x7d\xe3\x6e\
\x14\xf7\xd1\x48\xd4\x68\x1b\x57\x04\x00\x53\x57\xd7\x72\x91\xe5\
\x9a\xf6\x5d\x85\x9b\x8b\x74\x58\x65\x18\x29\x14\xdb\x8f\x79\x49\
\xf6\xde\x14\xdf\xe5\x64\x24\x19\x63\xd4\x31\xae\xca\x56\x34\xd5\
\xe1\x0e\xec\x57\x70\x92\xed\x06\x4e\x8b\xf9\x0e\x47\x21\x97\xb3\
\xa8\xcf\x3f\x4b\x39\x16\xe9\xb2\xc2\x5c\xe0\x25\xec\x57\x72\x92\
\xbd\x0a\x5c\x4f\xfb\x7a\x8b\xfd\x48\x1f\xc1\xd6\x84\xcf\xa6\x69\
\x41\x2a\xcd\x65\xc8\x33\xb2\xed\x4a\x4e\x63\xe3\xc8\xec\xdb\x51\
\x24\xe7\x71\xd2\xfe\xb7\x6a\x2c\xa7\xae\xe6\x3a\xec\x57\xae\x6e\
\x1b\xc1\x37\xfd\x99\xf8\x2c\xe5\xb8\x29\x4c\x63\x0f\x10\x91\xa1\
\xc3\x13\xcf\x72\x64\xd6\x8e\xed\x0a\xec\xd4\x26\x90\x89\x9a\x3e\
\x0d\x5e\x0e\x8e\x06\xee\xc6\x7e\x65\x66\xb5\xbf\x21\xc3\xc3\x1e\
\x4d\x2c\x01\x1e\xc1\x7e\xc5\x26\xd9\xf3\xc0\xc7\xf1\xc1\x36\x85\
\x71\x0e\x70\x0f\xee\xad\x23\xb8\x06\xe9\xe0\xf1\x15\x6f\x88\x21\
\x64\x6d\xe1\x87\xe9\x6c\x7a\x7a\x5e\xab\x01\x4f\x00\x5f\x04\xe6\
\x17\xfc\x5d\x0b\xa3\x90\x2c\x12\x16\x98\x89\xac\x33\x78\x01\xb0\
\x14\x49\x3d\xaf\xfb\xc6\xab\x8e\xcc\xc5\x5f\x8b\x0c\xf5\x8e\x50\
\xbe\x69\xe5\x53\xe8\x16\x01\xa8\x0c\x22\x0b\x4c\x2f\x02\xde\x8c\
\x2c\xec\x7c\x02\xd2\xd3\xd8\x9f\xf0\xd9\x03\x48\x62\xc5\xcd\x48\
\xca\xdc\xf5\xc8\xe2\x16\x4f\xd1\x9e\xe2\xbe\x2b\xe8\x56\x01\xc4\
\x71\x38\xd2\x85\x3b\x80\x74\xcc\xd4\x91\x4b\xc8\x5e\x24\x8c\xab\
\x14\xa1\x5c\xba\xf8\x3f\x01\x5d\xb7\x57\x86\x8d\x0e\xed\x00\x00\
\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\
"

qt_resource_name = b"\
\x00\x03\
\x00\x00\x6f\x9f\
\x00\x69\
\x00\x63\x00\x6f\
\x00\x1a\
\x08\x4d\xda\xff\
\x00\x31\
\x00\x34\x00\x36\x00\x39\x00\x31\x00\x34\x00\x37\x00\x36\x00\x30\x00\x35\x00\x5f\x00\x50\x00\x79\x00\x74\x00\x68\x00\x6f\x00\x6e\
\x00\x5f\x00\x6c\x00\x6f\x00\x67\x00\x6f\x00\x2e\x00\x69\x00\x63\x00\x6f\
\x00\x06\
\x03\x56\x57\x47\
\x00\x32\
\x00\x33\x00\x2e\x00\x70\x00\x6e\x00\x67\
\x00\x1a\
\x08\x91\xc2\x27\
\x00\x31\
\x00\x34\x00\x36\x00\x39\x00\x31\x00\x34\x00\x37\x00\x36\x00\x30\x00\x32\x00\x5f\x00\x50\x00\x79\x00\x74\x00\x68\x00\x6f\x00\x6e\
\x00\x5f\x00\x6c\x00\x6f\x00\x67\x00\x6f\x00\x2e\x00\x70\x00\x6e\x00\x67\
"

qt_resource_struct = b"\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\
\x00\x00\x00\x46\x00\x00\x00\x00\x00\x01\x00\x00\x28\xe3\
\x00\x00\x00\x0c\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\
\x00\x00\x00\x58\x00\x00\x00\x00\x00\x01\x00\x00\x8c\x6f\
"

def qInitResources():
    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)

def qCleanupResources():
    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)

qInitResources()



================================================
File: plugins/recorder/register_run_as_admin.bat
================================================
regsvr32 "%~dp0Qt-screen-capture.dll"
regsvr32 "%~dp0Qt-screen-capture-x64.dll"


================================================
File: plugins/recorder/splashscreen.py
================================================
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtWidgets import QSplashScreen
import os
import sys
import time
from time import sleep
import record_rc
dn = os.getcwd()
sys.path.insert(0, dn)

count = [1,2,3,4,5]

def Splash(self):
    app.processEvents()
    splash = QtWidgets.QSplashScreen(QtGui.QPixmap(":ico/23.png"))

    font = QFont()
    font.setPixelSize(72)
    font.setWeight(QFont.Bold)
    font.setFixedPitch(True)
    splash.setFont(font)

    #splash.setFont(font)
    #splash.showMessage(str(count[0]), QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom, QtCore.Qt.white )
    splash.show()
    for i in range(0, 6):
        time.sleep(1.5)
        splash = QtWidgets.QSplashScreen(QtGui.QPixmap(":ico/23.png"))

        if i <= 4.0:
            splash.showMessage(str(count[i]), QtCore.Qt.AlignHCenter | QtCore.Qt.AlignHCenter | QtCore.Qt.AlignHCenter| QtCore.Qt.WindowStaysOnTopHint, QtCore.Qt.darkRed)
            font = splash.font()
            font.setPixelSize(640)
            font.setWeight(QFont.Bold)
            splash.setFont(font)
            splash.show()
        else:
            QtWidgets.QApplication.processEvents()
        splash.show()







if __name__ == '__main__':

    import sys
    app = QtWidgets.QApplication(sys.argv)
    Splash(([0]))
    app.exec_()
    Form = QtWidgets.QWidget()





================================================
File: plugins/recorder/unregister_run_as_admin.bat
================================================
regsvr32 /u "%~dp0Qt-screen-capture.dll"
regsvr32 /u "%~dp0Qt-screen-capture-x64.dll"


================================================
File: plugins/recorder/bin/add ffmpeg folder to os PATH.txt
================================================



================================================
File: pluginsdk/_dbgfunctions.h
================================================
#ifndef _DBGFUNCTIONS_H
#define _DBGFUNCTIONS_H

#ifndef __cplusplus
#include <stdbool.h>
#endif

typedef struct
{
    char mod[MAX_MODULE_SIZE];
    duint addr;
    unsigned char oldbyte;
    unsigned char newbyte;
} DBGPATCHINFO;

typedef struct
{
    duint addr;
    duint from;
    duint to;
    char comment[MAX_COMMENT_SIZE];
} DBGCALLSTACKENTRY;

typedef struct
{
    int total;
    DBGCALLSTACKENTRY* entries;
} DBGCALLSTACK;

typedef struct
{
    DWORD dwProcessId;
    char szExeFile[MAX_PATH];
} DBGPROCESSINFO;

typedef bool (*ASSEMBLEATEX)(duint addr, const char* instruction, char* error, bool fillnop);
typedef bool (*SECTIONFROMADDR)(duint addr, char* section);
typedef bool (*MODNAMEFROMADDR)(duint addr, char* modname, bool extension);
typedef duint (*MODBASEFROMADDR)(duint addr);
typedef duint (*MODBASEFROMNAME)(const char* modname);
typedef duint (*MODSIZEFROMADDR)(duint addr);
typedef bool (*ASSEMBLE)(duint addr, unsigned char* dest, int* size, const char* instruction, char* error);
typedef bool (*PATCHGET)(duint addr);
typedef bool (*PATCHINRANGE)(duint start, duint end);
typedef bool (*MEMPATCH)(duint va, const unsigned char* src, duint size);
typedef void (*PATCHRESTORERANGE)(duint start, duint end);
typedef bool (*PATCHENUM)(DBGPATCHINFO* patchlist, size_t* cbsize);
typedef bool (*PATCHRESTORE)(duint addr);
typedef int (*PATCHFILE)(DBGPATCHINFO* patchlist, int count, const char* szFileName, char* error);
typedef int (*MODPATHFROMADDR)(duint addr, char* path, int size);
typedef int (*MODPATHFROMNAME)(const char* modname, char* path, int size);
typedef bool (*DISASMFAST)(unsigned char* data, duint addr, BASIC_INSTRUCTION_INFO* basicinfo);
typedef void (*MEMUPDATEMAP)();
typedef void (*GETCALLSTACK)(DBGCALLSTACK* callstack);
typedef void (*SYMBOLDOWNLOADALLSYMBOLS)(const char* szSymbolStore);
typedef bool (*GETJIT)(char* jit, bool x64);
typedef bool (*GETJITAUTO)(bool* jitauto);
typedef bool (*GETDEFJIT)(char* defjit);
typedef bool (*GETPROCESSLIST)(DBGPROCESSINFO** entries, int* count);
typedef bool (*GETPAGERIGHTS)(duint addr, char* rights);
typedef bool (*SETPAGERIGHTS)(duint addr, const char* rights);
typedef bool (*PAGERIGHTSTOSTRING)(DWORD protect, char* rights);
typedef bool (*ISPROCESSELEVATED)();
typedef bool (*GETCMDLINE)(char* cmdline, size_t* cbsize);
typedef bool (*SETCMDLINE)(const char* cmdline);
typedef duint (*FILEOFFSETTOVA)(const char* modname, duint offset);
typedef duint (*VATOFILEOFFSET)(duint va);
typedef duint (*GETADDRFROMLINE)(const char* szSourceFile, int line);
typedef bool (*GETSOURCEFROMADDR)(duint addr, char* szSourceFile, int* line);
typedef bool (*VALFROMSTRING)(const char* string, duint* value);

typedef struct DBGFUNCTIONS_
{
    ASSEMBLEATEX AssembleAtEx;
    SECTIONFROMADDR SectionFromAddr;
    MODNAMEFROMADDR ModNameFromAddr;
    MODBASEFROMADDR ModBaseFromAddr;
    MODBASEFROMNAME ModBaseFromName;
    MODSIZEFROMADDR ModSizeFromAddr;
    ASSEMBLE Assemble;
    PATCHGET PatchGet;
    PATCHINRANGE PatchInRange;
    MEMPATCH MemPatch;
    PATCHRESTORERANGE PatchRestoreRange;
    PATCHENUM PatchEnum;
    PATCHRESTORE PatchRestore;
    PATCHFILE PatchFile;
    MODPATHFROMADDR ModPathFromAddr;
    MODPATHFROMNAME ModPathFromName;
    DISASMFAST DisasmFast;
    MEMUPDATEMAP MemUpdateMap;
    GETCALLSTACK GetCallStack;
    SYMBOLDOWNLOADALLSYMBOLS SymbolDownloadAllSymbols;
    GETJITAUTO GetJitAuto;
    GETJIT GetJit;
    GETDEFJIT GetDefJit;
    GETPROCESSLIST GetProcessList;
    GETPAGERIGHTS GetPageRights;
    SETPAGERIGHTS SetPageRights;
    PAGERIGHTSTOSTRING PageRightsToString;
    ISPROCESSELEVATED IsProcessElevated;
    GETCMDLINE GetCmdline;
    SETCMDLINE SetCmdline;
    FILEOFFSETTOVA FileOffsetToVa;
    VATOFILEOFFSET VaToFileOffset;
    GETADDRFROMLINE GetAddrFromLine;
    GETSOURCEFROMADDR GetSourceFromAddr;
    VALFROMSTRING ValFromString;
} DBGFUNCTIONS;

#ifdef BUILD_DBG

const DBGFUNCTIONS* dbgfunctionsget();
void dbgfunctionsinit();

#endif //BUILD_DBG

#endif //_DBGFUNCTIONS_H



================================================
File: pluginsdk/_plugin_types.h
================================================
#ifndef _PLUGIN_DATA_H
#define _PLUGIN_DATA_H

#ifdef BUILD_DBG

#include "_global.h"

#else

#ifdef __GNUC__
#include "dbghelp\dbghelp.h"
#else
#include <dbghelp.h>
#endif // __GNUC__

#ifndef deflen
#define deflen 1024
#endif // deflen

#include "bridgemain.h"
#include "_dbgfunctions.h"

#endif // BUILD_DBG

#endif // _PLUGIN_DATA_H



================================================
File: pluginsdk/_plugins.h
================================================
#ifndef _PLUGINS_H
#define _PLUGINS_H

#ifndef __cplusplus
#include <stdbool.h>
#endif

#ifndef PLUG_IMPEXP
#ifdef BUILD_DBG
#define PLUG_IMPEXP __declspec(dllexport)
#else
#define PLUG_IMPEXP __declspec(dllimport)
#endif //BUILD_DBG
#endif //PLUG_IMPEXP

#include "_plugin_types.h"

//default structure alignments forced
#ifdef _WIN64
#pragma pack(push, 16)
#else //x86
#pragma pack(push, 8)
#endif //_WIN64

//defines
#define PLUG_SDKVERSION 1

//structures
typedef struct
{
    //provided by the debugger
    int pluginHandle;
    //provided by the pluginit function
    int sdkVersion;
    int pluginVersion;
    char pluginName[256];
} PLUG_INITSTRUCT;

typedef struct
{
    //provided by the debugger
    HWND hwndDlg; //gui window handle
    int hMenu; //plugin menu handle
    int hMenuDisasm; //plugin disasm menu handle
    int hMenuDump; //plugin dump menu handle
    int hMenuStack; //plugin stack menu handle
} PLUG_SETUPSTRUCT;

typedef struct
{
    void* data; //user data
} PLUG_SCRIPTSTRUCT;

//callback structures
typedef struct
{
    const char* szFileName;
} PLUG_CB_INITDEBUG;

typedef struct
{
    void* reserved;
} PLUG_CB_STOPDEBUG;

typedef struct
{
    CREATE_PROCESS_DEBUG_INFO* CreateProcessInfo;
    IMAGEHLP_MODULE64* modInfo;
    const char* DebugFileName;
    PROCESS_INFORMATION* fdProcessInfo;
} PLUG_CB_CREATEPROCESS;

typedef struct
{
    EXIT_PROCESS_DEBUG_INFO* ExitProcess;
} PLUG_CB_EXITPROCESS;

typedef struct
{
    CREATE_THREAD_DEBUG_INFO* CreateThread;
    DWORD dwThreadId;
} PLUG_CB_CREATETHREAD;

typedef struct
{
    EXIT_THREAD_DEBUG_INFO* ExitThread;
    DWORD dwThreadId;
} PLUG_CB_EXITTHREAD;

typedef struct
{
    void* reserved;
} PLUG_CB_SYSTEMBREAKPOINT;

typedef struct
{
    LOAD_DLL_DEBUG_INFO* LoadDll;
    IMAGEHLP_MODULE64* modInfo;
    const char* modname;
} PLUG_CB_LOADDLL;

typedef struct
{
    UNLOAD_DLL_DEBUG_INFO* UnloadDll;
} PLUG_CB_UNLOADDLL;

typedef struct
{
    OUTPUT_DEBUG_STRING_INFO* DebugString;
} PLUG_CB_OUTPUTDEBUGSTRING;

typedef struct
{
    EXCEPTION_DEBUG_INFO* Exception;
} PLUG_CB_EXCEPTION;

typedef struct
{
    BRIDGEBP* breakpoint;
} PLUG_CB_BREAKPOINT;

typedef struct
{
    void* reserved;
} PLUG_CB_PAUSEDEBUG;

typedef struct
{
    void* reserved;
} PLUG_CB_RESUMEDEBUG;

typedef struct
{
    void* reserved;
} PLUG_CB_STEPPED;

typedef struct
{
    DWORD dwProcessId;
} PLUG_CB_ATTACH;

typedef struct
{
    PROCESS_INFORMATION* fdProcessInfo;
} PLUG_CB_DETACH;

typedef struct
{
    DEBUG_EVENT* DebugEvent;
} PLUG_CB_DEBUGEVENT;

typedef struct
{
    int hEntry;
} PLUG_CB_MENUENTRY;

typedef struct
{
    MSG* message;
    long* result;
    bool retval;
} PLUG_CB_WINEVENT;

typedef struct
{
    MSG* message;
    bool retval;
} PLUG_CB_WINEVENTGLOBAL;

//enums
typedef enum
{
    CB_INITDEBUG, //PLUG_CB_INITDEBUG
    CB_STOPDEBUG, //PLUG_CB_STOPDEBUG
    CB_CREATEPROCESS, //PLUG_CB_CREATEPROCESS
    CB_EXITPROCESS, //PLUG_CB_EXITPROCESS
    CB_CREATETHREAD, //PLUG_CB_CREATETHREAD
    CB_EXITTHREAD, //PLUG_CB_EXITTHREAD
    CB_SYSTEMBREAKPOINT, //PLUG_CB_SYSTEMBREAKPOINT
    CB_LOADDLL, //PLUG_CB_LOADDLL
    CB_UNLOADDLL, //PLUG_CB_UNLOADDLL
    CB_OUTPUTDEBUGSTRING, //PLUG_CB_OUTPUTDEBUGSTRING
    CB_EXCEPTION, //PLUG_CB_EXCEPTION
    CB_BREAKPOINT, //PLUG_CB_BREAKPOINT
    CB_PAUSEDEBUG, //PLUG_CB_PAUSEDEBUG
    CB_RESUMEDEBUG, //PLUG_CB_RESUMEDEBUG
    CB_STEPPED, //PLUG_CB_STEPPED
    CB_ATTACH, //PLUG_CB_ATTACHED (before attaching, after CB_INITDEBUG)
    CB_DETACH, //PLUG_CB_DETACH (before detaching, before CB_STOPDEBUG)
    CB_DEBUGEVENT, //PLUG_CB_DEBUGEVENT (called on any debug event)
    CB_MENUENTRY, //PLUG_CB_MENUENTRY
    CB_WINEVENT, //PLUG_CB_WINEVENT
    CB_WINEVENTGLOBAL //PLUG_CB_WINEVENTGLOBAL
} CBTYPE;

//typedefs
typedef void (*CBPLUGIN)(CBTYPE cbType, void* callbackInfo);
typedef bool (*CBPLUGINCOMMAND)(int, char**);
typedef void (*CBPLUGINSCRIPT)();

//exports
#ifdef __cplusplus
extern "C"
{
#endif

PLUG_IMPEXP void _plugin_registercallback(int pluginHandle, CBTYPE cbType, CBPLUGIN cbPlugin);
PLUG_IMPEXP bool _plugin_unregistercallback(int pluginHandle, CBTYPE cbType);
PLUG_IMPEXP bool _plugin_registercommand(int pluginHandle, const char* command, CBPLUGINCOMMAND cbCommand, bool debugonly);
PLUG_IMPEXP bool _plugin_unregistercommand(int pluginHandle, const char* command);
PLUG_IMPEXP void _plugin_logprintf(const char* format, ...);
PLUG_IMPEXP void _plugin_logputs(const char* text);
PLUG_IMPEXP void _plugin_debugpause();
PLUG_IMPEXP void _plugin_debugskipexceptions(bool skip);
PLUG_IMPEXP int _plugin_menuadd(int hMenu, const char* title);
PLUG_IMPEXP bool _plugin_menuaddentry(int hMenu, int hEntry, const char* title);
PLUG_IMPEXP bool _plugin_menuaddseparator(int hMenu);
PLUG_IMPEXP bool _plugin_menuclear(int hMenu);
PLUG_IMPEXP void _plugin_menuseticon(int hMenu, const ICONDATA* icon);
PLUG_IMPEXP void _plugin_menuentryseticon(int pluginHandle, int hEntry, const ICONDATA* icon);
PLUG_IMPEXP void _plugin_startscript(CBPLUGINSCRIPT cbScript);
PLUG_IMPEXP bool _plugin_waituntilpaused();

#ifdef __cplusplus
}
#endif

#pragma pack(pop)

#endif // _PLUGINS_H



================================================
File: pluginsdk/_scriptapi.h
================================================
#ifndef _SCRIPT_API_H
#define _SCRIPT_API_H

#include "_plugins.h"

#define SCRIPT_EXPORT PLUG_IMPEXP

#endif //_SCRIPT_API_H


================================================
File: pluginsdk/_scriptapi_assembler.h
================================================
#ifndef _SCRIPTAPI_ASSEMBLER_H
#define _SCRIPTAPI_ASSEMBLER_H

#include "_scriptapi.h"

namespace Script
{
namespace Assembler
{
SCRIPT_EXPORT bool Assemble(duint addr, unsigned char* dest, int* size, const char* instruction); //dest[16]
SCRIPT_EXPORT bool AssembleEx(duint addr, unsigned char* dest, int* size, const char* instruction, char* error); //dest[16], error[MAX_ERROR_SIZE]
SCRIPT_EXPORT bool AssembleMem(duint addr, const char* instruction);
SCRIPT_EXPORT bool AssembleMemEx(duint addr, const char* instruction, int* size, char* error, bool fillnop); //error[MAX_ERROR_SIZE]
}; //Assembler
}; //Script

#endif //_SCRIPTAPI_ASSEMBLER_H


================================================
File: pluginsdk/_scriptapi_debug.h
================================================
#ifndef _SCRIPTAPI_DEBUG_H
#define _SCRIPTAPI_DEBUG_H

#include "_scriptapi.h"

namespace Script
{
namespace Debug
{
SCRIPT_EXPORT void Wait();
SCRIPT_EXPORT void Run();
SCRIPT_EXPORT void Pause();
SCRIPT_EXPORT void Stop();
SCRIPT_EXPORT void StepIn();
SCRIPT_EXPORT void StepOver();
SCRIPT_EXPORT void StepOut();
}; //Debug
}; //Script

#endif //_SCRIPTAPI_DEBUG_H


================================================
File: pluginsdk/_scriptapi_gui.h
================================================
#ifndef _SCRIPTAPI_GUI_H
#define _SCRIPTAPI_GUI_H

#include "_scriptapi.h"

namespace Script
{
namespace Gui
{
namespace Disassembly
{
SCRIPT_EXPORT bool SelectionGet(duint* start, duint* end);
SCRIPT_EXPORT bool SelectionSet(duint start, duint end);
SCRIPT_EXPORT duint SelectionGetStart();
SCRIPT_EXPORT duint SelectionGetEnd();
}; //Disassembly

namespace Dump
{
SCRIPT_EXPORT bool SelectionGet(duint* start, duint* end);
SCRIPT_EXPORT bool SelectionSet(duint start, duint end);
SCRIPT_EXPORT duint SelectionGetStart();
SCRIPT_EXPORT duint SelectionGetEnd();
}; //Dump

namespace Stack
{
SCRIPT_EXPORT bool SelectionGet(duint* start, duint* end);
SCRIPT_EXPORT bool SelectionSet(duint start, duint end);
SCRIPT_EXPORT duint SelectionGetStart();
SCRIPT_EXPORT duint SelectionGetEnd();
}; //Stack
}; //Gui

namespace Gui
{
enum Window
{
    DisassemblyWindow,
    DumpWindow,
    StackWindow
};

SCRIPT_EXPORT bool SelectionGet(Window window, duint* start, duint* end);
SCRIPT_EXPORT bool SelectionSet(Window window, duint start, duint end);
SCRIPT_EXPORT duint SelectionGetStart(Window window);
SCRIPT_EXPORT duint SelectionGetEnd(Window window);
SCRIPT_EXPORT void Message(const char* message);
SCRIPT_EXPORT bool MessageYesNo(const char* message);
SCRIPT_EXPORT bool InputLine(const char* title, char* text); //text[GUI_MAX_LINE_SIZE]
SCRIPT_EXPORT bool InputValue(const char* title, duint* value);
SCRIPT_EXPORT void Refresh();
SCRIPT_EXPORT void AddQWidgetTab(void* qWidget);
SCRIPT_EXPORT void ShowQWidgetTab(void* qWidget);
SCRIPT_EXPORT void CloseQWidgetTab(void* qWidget);

}; //Gui
}; //Script

#endif //_SCRIPTAPI_GUI_H


================================================
File: pluginsdk/_scriptapi_memory.h
================================================
#ifndef _SCRIPTAPI_MEMORY_H
#define _SCRIPTAPI_MEMORY_H

#include "_scriptapi.h"

namespace Script
{
namespace Memory
{
SCRIPT_EXPORT bool Read(duint addr, void* data, duint size, duint* sizeRead);
SCRIPT_EXPORT bool Write(duint addr, const void* data, duint size, duint* sizeWritten);
SCRIPT_EXPORT bool IsValidPtr(duint addr);
SCRIPT_EXPORT duint RemoteAlloc(duint addr, duint size);
SCRIPT_EXPORT bool RemoteFree(duint addr);

SCRIPT_EXPORT unsigned char ReadByte(duint addr);
SCRIPT_EXPORT bool WriteByte(duint addr, unsigned char data);
SCRIPT_EXPORT unsigned short ReadWord(duint addr);
SCRIPT_EXPORT bool WriteWord(duint addr, unsigned short data);
SCRIPT_EXPORT unsigned int ReadDword(duint addr);
SCRIPT_EXPORT bool WriteDword(duint addr, unsigned int data);
#ifdef _WIN64
SCRIPT_EXPORT unsigned long long ReadQword(duint addr);
SCRIPT_EXPORT bool WriteQword(duint addr, unsigned long long data);
#endif //_WIN64
SCRIPT_EXPORT duint ReadPtr(duint addr);
SCRIPT_EXPORT bool WritePtr(duint addr, duint data);
}; //Memory
}; //Script

#endif //_SCRIPTAPI_MEMORY_H


================================================
File: pluginsdk/_scriptapi_misc.h
================================================
#ifndef _SCRIPTAPI_MISC_H
#define _SCRIPTAPI_MISC_H

#include "_scriptapi.h"

namespace Script
{
namespace Misc
{
SCRIPT_EXPORT bool ParseExpression(const char* expression, duint* value);
SCRIPT_EXPORT duint RemoteGetProcAddress(const char* module, const char* api);
SCRIPT_EXPORT duint ResolveLabel(const char* label);
SCRIPT_EXPORT void* Alloc(duint size);
SCRIPT_EXPORT void Free(void* ptr);
}; //Misc
}; //Script

#endif //_SCRIPTAPI_MISC_H


================================================
File: pluginsdk/_scriptapi_module.h
================================================
#ifndef _SCRIPTAPI_MODULE_H
#define _SCRIPTAPI_MODULE_H

#include "_scriptapi.h"

namespace Script
{
namespace Module
{
struct ModuleInfo
{
    duint base;
    duint size;
    duint entry;
    int sectionCount;
    char name[MAX_MODULE_SIZE];
    char path[MAX_PATH];
};

struct ModuleSectionInfo
{
    duint addr;
    duint size;
    char name[MAX_SECTION_SIZE * 5];
};

SCRIPT_EXPORT bool InfoFromAddr(duint addr, ModuleInfo* info);
SCRIPT_EXPORT bool InfoFromName(const char* name, ModuleInfo* info);
SCRIPT_EXPORT duint BaseFromAddr(duint addr);
SCRIPT_EXPORT duint BaseFromName(const char* name);
SCRIPT_EXPORT duint SizeFromAddr(duint addr);
SCRIPT_EXPORT duint SizeFromName(const char* name);
SCRIPT_EXPORT bool NameFromAddr(duint addr, char* name); //name[MAX_MODULE_SIZE]
SCRIPT_EXPORT bool PathFromAddr(duint addr, char* path); //path[MAX_MODULE_PATH_SIZE]
SCRIPT_EXPORT bool PathFromName(const char* name, char* path); //path[MAX_PATH]
SCRIPT_EXPORT duint EntryFromAddr(duint addr);
SCRIPT_EXPORT duint EntryFromName(const char* name);
SCRIPT_EXPORT int SectionCountFromAddr(duint addr);
SCRIPT_EXPORT int SectionCountFromName(const char* name);
SCRIPT_EXPORT bool SectionFromAddr(duint addr, int number, ModuleSectionInfo* section);
SCRIPT_EXPORT bool SectionFromName(const char* name, int number, ModuleSectionInfo* section);
SCRIPT_EXPORT bool GetMainModuleInfo(ModuleInfo* info);
SCRIPT_EXPORT duint GetMainModuleBase();
SCRIPT_EXPORT duint GetMainModuleSize();
SCRIPT_EXPORT duint GetMainModuleEntry();
SCRIPT_EXPORT int GetMainModuleSectionCount();
SCRIPT_EXPORT bool GetMainModuleName(char* name); //name[MAX_MODULE_SIZE]
SCRIPT_EXPORT bool GetMainModulePath(char* path); //path[MAX_PATH]
}; //Module
}; //Script

#endif //_SCRIPTAPI_MODULE_H


================================================
File: pluginsdk/_scriptapi_pattern.h
================================================
#ifndef _SCRIPTAPI_PATTERN_H
#define _SCRIPTAPI_PATTERN_H

#include "_scriptapi.h"

namespace Script
{
namespace Pattern
{
SCRIPT_EXPORT duint Find(unsigned char* data, duint datasize, const char* pattern);
SCRIPT_EXPORT duint FindMem(duint start, duint size, const char* pattern);
SCRIPT_EXPORT void Write(unsigned char* data, duint datasize, const char* pattern);
SCRIPT_EXPORT void WriteMem(duint start, duint size, const char* pattern);
SCRIPT_EXPORT bool SearchAndReplace(unsigned char* data, duint datasize, const char* searchpattern, const char* replacepattern);
SCRIPT_EXPORT bool SearchAndReplaceMem(duint start, duint size, const char* searchpattern, const char* replacepattern);
};
};

#endif //_SCRIPTAPI_FIND_H


================================================
File: pluginsdk/_scriptapi_register.h
================================================
#ifndef _SCRIPTAPI_REGISTER_H
#define _SCRIPTAPI_REGISTER_H

#include "_scriptapi.h"

namespace Script
{
namespace Register
{
enum RegisterEnum
{
    DR0,
    DR1,
    DR2,
    DR3,
    DR6,
    DR7,

    EAX,
    AX,
    AH,
    AL,
    EBX,
    BX,
    BH,
    BL,
    ECX,
    CX,
    CH,
    CL,
    EDX,
    DX,
    DH,
    DL,
    EDI,
    DI,
    ESI,
    SI,
    EBP,
    BP,
    ESP,
    SP,
    EIP,

#ifdef _WIN64
    RAX,
    RBX,
    RCX,
    RDX,
    RSI,
    SIL,
    RDI,
    DIL,
    RBP,
    BPL,
    RSP,
    SPL,
    RIP,
    R8,
    R8D,
    R8W,
    R8B,
    R9,
    R9D,
    R9W,
    R9B,
    R10,
    R10D,
    R10W,
    R10B,
    R11,
    R11D,
    R11W,
    R11B,
    R12,
    R12D,
    R12W,
    R12B,
    R13,
    R13D,
    R13W,
    R13B,
    R14,
    R14D,
    R14W,
    R14B,
    R15,
    R15D,
    R15W,
    R15B,
#endif //_WIN64

    CIP,
    CSP,
}; //RegisterEnum

SCRIPT_EXPORT duint Get(RegisterEnum reg);
SCRIPT_EXPORT bool Set(RegisterEnum reg, duint value);
SCRIPT_EXPORT int Size(); //gets architecture register size in bytes

SCRIPT_EXPORT duint GetDR0();
SCRIPT_EXPORT bool SetDR0(duint value);
SCRIPT_EXPORT duint GetDR1();
SCRIPT_EXPORT bool SetDR1(duint value);
SCRIPT_EXPORT duint GetDR2();
SCRIPT_EXPORT bool SetDR2(duint value);
SCRIPT_EXPORT duint GetDR3();
SCRIPT_EXPORT bool SetDR3(duint value);
SCRIPT_EXPORT duint GetDR6();
SCRIPT_EXPORT bool SetDR6(duint value);
SCRIPT_EXPORT duint GetDR7();
SCRIPT_EXPORT bool SetDR7(duint value);

SCRIPT_EXPORT unsigned int GetEAX();
SCRIPT_EXPORT bool SetEAX(unsigned int value);
SCRIPT_EXPORT unsigned short GetAX();
SCRIPT_EXPORT bool SetAX(unsigned short value);
SCRIPT_EXPORT unsigned char GetAH();
SCRIPT_EXPORT bool SetAH(unsigned char value);
SCRIPT_EXPORT unsigned char GetAL();
SCRIPT_EXPORT bool SetAL(unsigned char value);
SCRIPT_EXPORT unsigned int GetEBX();
SCRIPT_EXPORT bool SetEBX(unsigned int value);
SCRIPT_EXPORT unsigned short GetBX();
SCRIPT_EXPORT bool SetBX(unsigned short value);
SCRIPT_EXPORT unsigned char GetBH();
SCRIPT_EXPORT bool SetBH(unsigned char value);
SCRIPT_EXPORT unsigned char GetBL();
SCRIPT_EXPORT bool SetBL(unsigned char value);
SCRIPT_EXPORT unsigned int GetECX();
SCRIPT_EXPORT bool SetECX(unsigned int value);
SCRIPT_EXPORT unsigned short GetCX();
SCRIPT_EXPORT bool SetCX(unsigned short value);
SCRIPT_EXPORT unsigned char GetCH();
SCRIPT_EXPORT bool SetCH(unsigned char value);
SCRIPT_EXPORT unsigned char GetCL();
SCRIPT_EXPORT bool SetCL(unsigned char value);
SCRIPT_EXPORT unsigned int GetEDX();
SCRIPT_EXPORT bool SetEDX(unsigned int value);
SCRIPT_EXPORT unsigned short GetDX();
SCRIPT_EXPORT bool SetDX(unsigned short value);
SCRIPT_EXPORT unsigned char GetDH();
SCRIPT_EXPORT bool SetDH(unsigned char value);
SCRIPT_EXPORT unsigned char GetDL();
SCRIPT_EXPORT bool SetDL(unsigned char value);
SCRIPT_EXPORT unsigned int GetEDI();
SCRIPT_EXPORT bool SetEDI(unsigned int value);
SCRIPT_EXPORT unsigned short GetDI();
SCRIPT_EXPORT bool SetDI(unsigned short value);
SCRIPT_EXPORT unsigned int GetESI();
SCRIPT_EXPORT bool SetESI(unsigned int value);
SCRIPT_EXPORT unsigned short GetSI();
SCRIPT_EXPORT bool SetSI(unsigned short value);
SCRIPT_EXPORT unsigned int GetEBP();
SCRIPT_EXPORT bool SetEBP(unsigned int value);
SCRIPT_EXPORT unsigned short GetBP();
SCRIPT_EXPORT bool SetBP(unsigned short value);
SCRIPT_EXPORT unsigned int GetESP();
SCRIPT_EXPORT bool SetESP(unsigned int value);
SCRIPT_EXPORT unsigned short GetSP();
SCRIPT_EXPORT bool SetSP(unsigned short value);
SCRIPT_EXPORT unsigned int GetEIP();
SCRIPT_EXPORT bool SetEIP(unsigned int value);

#ifdef _WIN64
SCRIPT_EXPORT unsigned long long GetRAX();
SCRIPT_EXPORT bool SetRAX(unsigned long long value);
SCRIPT_EXPORT unsigned long long GetRBX();
SCRIPT_EXPORT bool SetRBX(unsigned long long value);
SCRIPT_EXPORT unsigned long long GetRCX();
SCRIPT_EXPORT bool SetRCX(unsigned long long value);
SCRIPT_EXPORT unsigned long long GetRDX();
SCRIPT_EXPORT bool SetRDX(unsigned long long value);
SCRIPT_EXPORT unsigned long long GetRSI();
SCRIPT_EXPORT bool SetRSI(unsigned long long value);
SCRIPT_EXPORT unsigned char GetSIL();
SCRIPT_EXPORT bool SetSIL(unsigned char value);
SCRIPT_EXPORT unsigned long long GetRDI();
SCRIPT_EXPORT bool SetRDI(unsigned long long value);
SCRIPT_EXPORT unsigned char GetDIL();
SCRIPT_EXPORT bool SetDIL(unsigned char value);
SCRIPT_EXPORT unsigned long long GetRBP();
SCRIPT_EXPORT bool SetRBP(unsigned long long value);
SCRIPT_EXPORT unsigned char GetBPL();
SCRIPT_EXPORT bool SetBPL(unsigned char value);
SCRIPT_EXPORT unsigned long long GetRSP();
SCRIPT_EXPORT bool SetRSP(unsigned long long value);
SCRIPT_EXPORT unsigned char GetSPL();
SCRIPT_EXPORT bool SetSPL(unsigned char value);
SCRIPT_EXPORT unsigned long long GetRIP();
SCRIPT_EXPORT bool SetRIP(unsigned long long value);
SCRIPT_EXPORT unsigned long long GetR8();
SCRIPT_EXPORT bool SetR8(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR8D();
SCRIPT_EXPORT bool SetR8D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR8W();
SCRIPT_EXPORT bool SetR8W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR8B();
SCRIPT_EXPORT bool SetR8B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR9();
SCRIPT_EXPORT bool SetR9(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR9D();
SCRIPT_EXPORT bool SetR9D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR9W();
SCRIPT_EXPORT bool SetR9W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR9B();
SCRIPT_EXPORT bool SetR9B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR10();
SCRIPT_EXPORT bool SetR10(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR10D();
SCRIPT_EXPORT bool SetR10D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR10W();
SCRIPT_EXPORT bool SetR10W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR10B();
SCRIPT_EXPORT bool SetR10B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR11();
SCRIPT_EXPORT bool SetR11(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR11D();
SCRIPT_EXPORT bool SetR11D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR11W();
SCRIPT_EXPORT bool SetR11W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR11B();
SCRIPT_EXPORT bool SetR11B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR12();
SCRIPT_EXPORT bool SetR12(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR12D();
SCRIPT_EXPORT bool SetR12D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR12W();
SCRIPT_EXPORT bool SetR12W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR12B();
SCRIPT_EXPORT bool SetR12B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR13();
SCRIPT_EXPORT bool SetR13(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR13D();
SCRIPT_EXPORT bool SetR13D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR13W();
SCRIPT_EXPORT bool SetR13W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR13B();
SCRIPT_EXPORT bool SetR13B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR14();
SCRIPT_EXPORT bool SetR14(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR14D();
SCRIPT_EXPORT bool SetR14D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR14W();
SCRIPT_EXPORT bool SetR14W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR14B();
SCRIPT_EXPORT bool SetR14B(unsigned char value);
SCRIPT_EXPORT unsigned long long GetR15();
SCRIPT_EXPORT bool SetR15(unsigned long long value);
SCRIPT_EXPORT unsigned int GetR15D();
SCRIPT_EXPORT bool SetR15D(unsigned int value);
SCRIPT_EXPORT unsigned short GetR15W();
SCRIPT_EXPORT bool SetR15W(unsigned short value);
SCRIPT_EXPORT unsigned char GetR15B();
SCRIPT_EXPORT bool SetR15B(unsigned char value);
#endif //_WIN64

SCRIPT_EXPORT duint GetCIP();
SCRIPT_EXPORT bool SetCIP(duint value);
SCRIPT_EXPORT duint GetCSP();
SCRIPT_EXPORT bool SetCSP(duint value);
}; //Register
}; //Script

#endif //_SCRIPTAPI_REGISTER_H


================================================
File: pluginsdk/_scriptapi_stack.h
================================================
#ifndef _SCRIPTAPI_STACK_H
#define _SCRIPTAPI_STACK_H

#include "_scriptapi.h"

namespace Script
{
namespace Stack
{
SCRIPT_EXPORT duint Pop();
SCRIPT_EXPORT duint Push(duint value); //returns the previous top, equal to Peek(1)
SCRIPT_EXPORT duint Peek(int offset = 0); //offset is in multiples of Register::Size(), for easy x32/x64 portability
}; //Stack
}; //Script

#endif //_SCRIPTAPI_STACK_H


================================================
File: pluginsdk/bridgemain.h
================================================
#ifndef _BRIDGEMAIN_H_
#define _BRIDGEMAIN_H_

#include <windows.h>

#ifndef __cplusplus
#include <stdbool.h>
#endif

//default structure alignments forced
#ifdef _WIN64
#pragma pack(push, 16)
#else //x86
#pragma pack(push, 8)
#endif //_WIN64

#ifdef _WIN64
typedef unsigned long long duint;
typedef signed long long dsint;
#else
typedef unsigned long duint;
typedef signed long dsint;
#endif //_WIN64

#ifndef BRIDGE_IMPEXP
#ifdef BUILD_BRIDGE
#define BRIDGE_IMPEXP __declspec(dllexport)
#else
#define BRIDGE_IMPEXP __declspec(dllimport)
#endif //BUILD_BRIDGE
#endif //BRIDGE_IMPEXP

#ifdef __cplusplus
extern "C"
{
#endif

//Bridge defines
#define MAX_SETTING_SIZE 65536
#define DBG_VERSION 25

//Bridge functions
BRIDGE_IMPEXP const char* BridgeInit();
BRIDGE_IMPEXP const char* BridgeStart();
BRIDGE_IMPEXP void* BridgeAlloc(size_t size);
BRIDGE_IMPEXP void BridgeFree(void* ptr);
BRIDGE_IMPEXP bool BridgeSettingGet(const char* section, const char* key, char* value);
BRIDGE_IMPEXP bool BridgeSettingGetUint(const char* section, const char* key, duint* value);
BRIDGE_IMPEXP bool BridgeSettingSet(const char* section, const char* key, const char* value);
BRIDGE_IMPEXP bool BridgeSettingSetUint(const char* section, const char* key, duint value);
BRIDGE_IMPEXP bool BridgeSettingFlush();
BRIDGE_IMPEXP bool BridgeSettingRead(int* errorLine);
BRIDGE_IMPEXP int BridgeGetDbgVersion();

//Debugger defines
#define MAX_LABEL_SIZE 256
#define MAX_COMMENT_SIZE 512
#define MAX_MODULE_SIZE 256
#define MAX_BREAKPOINT_SIZE 256
#define MAX_SCRIPT_LINE_SIZE 2048
#define MAX_THREAD_NAME_SIZE 256
#define MAX_STRING_SIZE 512
#define MAX_ERROR_SIZE 512
#define RIGHTS_STRING_SIZE (sizeof("ERWCG") + 1)
#define MAX_SECTION_SIZE 10

#define TYPE_VALUE 1
#define TYPE_MEMORY 2
#define TYPE_ADDR 4
#define MAX_MNEMONIC_SIZE 64
#define PAGE_SIZE 0x1000

//Debugger enums
typedef enum
{
    initialized,
    paused,
    running,
    stopped
} DBGSTATE;

typedef enum
{
    SEG_DEFAULT,
    SEG_ES,
    SEG_DS,
    SEG_FS,
    SEG_GS,
    SEG_CS,
    SEG_SS
} SEGMENTREG;

typedef enum
{
    flagmodule = 1,
    flaglabel = 2,
    flagcomment = 4,
    flagbookmark = 8,
    flagfunction = 16,
    flagloop = 32
} ADDRINFOFLAGS;

typedef enum
{
    bp_none = 0,
    bp_normal = 1,
    bp_hardware = 2,
    bp_memory = 4
} BPXTYPE;

typedef enum
{
    FUNC_NONE,
    FUNC_BEGIN,
    FUNC_MIDDLE,
    FUNC_END,
    FUNC_SINGLE
} FUNCTYPE;

typedef enum
{
    LOOP_NONE,
    LOOP_BEGIN,
    LOOP_MIDDLE,
    LOOP_ENTRY,
    LOOP_END
} LOOPTYPE;

typedef enum
{
    DBG_SCRIPT_LOAD,                // param1=const char* filename,      param2=unused
    DBG_SCRIPT_UNLOAD,              // param1=unused,                    param2=unused
    DBG_SCRIPT_RUN,                 // param1=int destline,              param2=unused
    DBG_SCRIPT_STEP,                // param1=unused,                    param2=unused
    DBG_SCRIPT_BPTOGGLE,            // param1=int line,                  param2=unused
    DBG_SCRIPT_BPGET,               // param1=int line,                  param2=unused
    DBG_SCRIPT_CMDEXEC,             // param1=const char* command,       param2=unused
    DBG_SCRIPT_ABORT,               // param1=unused,                    param2=unused
    DBG_SCRIPT_GETLINETYPE,         // param1=int line,                  param2=unused
    DBG_SCRIPT_SETIP,               // param1=int line,                  param2=unused
    DBG_SCRIPT_GETBRANCHINFO,       // param1=int line,                  param2=SCRIPTBRANCH* info
    DBG_SYMBOL_ENUM,                // param1=SYMBOLCBINFO* cbInfo,      param2=unused
    DBG_ASSEMBLE_AT,                // param1=duint addr,                param2=const char* instruction
    DBG_MODBASE_FROM_NAME,          // param1=const char* modname,       param2=unused
    DBG_DISASM_AT,                  // param1=duint addr,                 param2=DISASM_INSTR* instr
    DBG_STACK_COMMENT_GET,          // param1=duint addr,                param2=STACK_COMMENT* comment
    DBG_GET_THREAD_LIST,            // param1=THREADALLINFO* list,       param2=unused
    DBG_SETTINGS_UPDATED,           // param1=unused,                    param2=unused
    DBG_DISASM_FAST_AT,             // param1=duint addr,                param2=BASIC_INSTRUCTION_INFO* basicinfo
    DBG_MENU_ENTRY_CLICKED,         // param1=int hEntry,                param2=unused
    DBG_FUNCTION_GET,               // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_FUNCTION_OVERLAPS,          // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_FUNCTION_ADD,               // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_FUNCTION_DEL,               // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_LOOP_GET,                   // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_LOOP_OVERLAPS,              // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_LOOP_ADD,                   // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_LOOP_DEL,                   // param1=FUNCTION_LOOP_INFO* info,  param2=unused
    DBG_IS_RUN_LOCKED,              // param1=unused,                    param2=unused
    DBG_IS_BP_DISABLED,             // param1=duint addr,                param2=unused
    DBG_SET_AUTO_COMMENT_AT,        // param1=duint addr,                param2=const char* text
    DBG_DELETE_AUTO_COMMENT_RANGE,  // param1=duint start,               param2=duint end
    DBG_SET_AUTO_LABEL_AT,          // param1=duint addr,                param2=const char* text
    DBG_DELETE_AUTO_LABEL_RANGE,    // param1=duint start,               param2=duint end
    DBG_SET_AUTO_BOOKMARK_AT,       // param1=duint addr,                param2=const char* text
    DBG_DELETE_AUTO_BOOKMARK_RANGE, // param1=duint start,               param2=duint end
    DBG_SET_AUTO_FUNCTION_AT,       // param1=duint addr,                param2=const char* text
    DBG_DELETE_AUTO_FUNCTION_RANGE, // param1=duint start,               param2=duint end
    DBG_GET_STRING_AT,              // param1=duint addr,                param2=unused
    DBG_GET_FUNCTIONS,              // param1=unused,                    param2=unused
    DBG_WIN_EVENT,                  // param1=MSG* message,              param2=long* result
    DBG_WIN_EVENT_GLOBAL            // param1=MSG* message,              param2=unused
} DBGMSG;

typedef enum
{
    linecommand,
    linebranch,
    linelabel,
    linecomment,
    lineempty,
} SCRIPTLINETYPE;

typedef enum
{
    scriptnobranch,
    scriptjmp,
    scriptjnejnz,
    scriptjejz,
    scriptjbjl,
    scriptjajg,
    scriptjbejle,
    scriptjaejge,
    scriptcall
} SCRIPTBRANCHTYPE;

typedef enum
{
    instr_normal,
    instr_branch,
    instr_stack
} DISASM_INSTRTYPE;

typedef enum
{
    arg_normal,
    arg_memory
} DISASM_ARGTYPE;

typedef enum
{
    str_none,
    str_ascii,
    str_unicode
} STRING_TYPE;

typedef enum
{
    _PriorityIdle = -15,
    _PriorityAboveNormal = 1,
    _PriorityBelowNormal = -1,
    _PriorityHighest = 2,
    _PriorityLowest = -2,
    _PriorityNormal = 0,
    _PriorityTimeCritical = 15,
    _PriorityUnknown = 0x7FFFFFFF
} THREADPRIORITY;

typedef enum
{
    _Executive = 0,
    _FreePage = 1,
    _PageIn = 2,
    _PoolAllocation = 3,
    _DelayExecution = 4,
    _Suspended = 5,
    _UserRequest = 6,
    _WrExecutive = 7,
    _WrFreePage = 8,
    _WrPageIn = 9,
    _WrPoolAllocation = 10,
    _WrDelayExecution = 11,
    _WrSuspended = 12,
    _WrUserRequest = 13,
    _WrEventPair = 14,
    _WrQueue = 15,
    _WrLpcReceive = 16,
    _WrLpcReply = 17,
    _WrVirtualMemory = 18,
    _WrPageOut = 19,
    _WrRendezvous = 20,
    _Spare2 = 21,
    _Spare3 = 22,
    _Spare4 = 23,
    _Spare5 = 24,
    _WrCalloutStack = 25,
    _WrKernel = 26,
    _WrResource = 27,
    _WrPushLock = 28,
    _WrMutex = 29,
    _WrQuantumEnd = 30,
    _WrDispatchInt = 31,
    _WrPreempted = 32,
    _WrYieldExecution = 33,
    _WrFastMutex = 34,
    _WrGuardedMutex = 35,
    _WrRundown = 36,
} THREADWAITREASON;

typedef enum
{
    size_byte = 1,
    size_word = 2,
    size_dword = 4,
    size_qword = 8
} MEMORY_SIZE;

//Debugger typedefs
typedef MEMORY_SIZE VALUE_SIZE;
typedef struct SYMBOLINFO_ SYMBOLINFO;
typedef struct DBGFUNCTIONS_ DBGFUNCTIONS;

typedef void (*CBSYMBOLENUM)(SYMBOLINFO* symbol, void* user);

//Debugger structs
typedef struct
{
    MEMORY_BASIC_INFORMATION mbi;
    char info[MAX_MODULE_SIZE];
} MEMPAGE;

typedef struct
{
    int count;
    MEMPAGE* page;
} MEMMAP;

typedef struct
{
    BPXTYPE type;
    duint addr;
    bool enabled;
    bool singleshoot;
    bool active;
    char name[MAX_BREAKPOINT_SIZE];
    char mod[MAX_MODULE_SIZE];
    unsigned short slot;
} BRIDGEBP;

typedef struct
{
    int count;
    BRIDGEBP* bp;
} BPMAP;

typedef struct
{
    duint start; //OUT
    duint end; //OUT
} FUNCTION;

typedef struct
{
    int depth; //IN
    duint start; //OUT
    duint end; //OUT
} LOOP;

typedef struct
{
    int flags; //ADDRINFOFLAGS (IN)
    char module[MAX_MODULE_SIZE]; //module the address is in
    char label[MAX_LABEL_SIZE];
    char comment[MAX_COMMENT_SIZE];
    bool isbookmark;
    FUNCTION function;
    LOOP loop;
} ADDRINFO;

struct SYMBOLINFO_
{
    duint addr;
    char* decoratedSymbol;
    char* undecoratedSymbol;
};

typedef struct
{
    duint base;
    char name[MAX_MODULE_SIZE];
} SYMBOLMODULEINFO;

typedef struct
{
    duint base;
    CBSYMBOLENUM cbSymbolEnum;
    void* user;
} SYMBOLCBINFO;

typedef struct
{
    bool c;
    bool p;
    bool a;
    bool z;
    bool s;
    bool t;
    bool i;
    bool d;
    bool o;
} FLAGS;

typedef struct
{
    bool FZ;
    bool PM;
    bool UM;
    bool OM;
    bool ZM;
    bool IM;
    bool DM;
    bool DAZ;
    bool PE;
    bool UE;
    bool OE;
    bool ZE;
    bool DE;
    bool IE;

    unsigned short RC;
} MXCSRFIELDS;

typedef struct
{
    bool B;
    bool C3;
    bool C2;
    bool C1;
    bool C0;
    bool IR;
    bool SF;
    bool P;
    bool U;
    bool O;
    bool Z;
    bool D;
    bool I;

    unsigned short TOP;

} X87STATUSWORDFIELDS;

typedef struct
{
    bool IC;
    bool IEM;
    bool PM;
    bool UM;
    bool OM;
    bool ZM;
    bool DM;
    bool IM;

    unsigned short RC;
    unsigned short PC;

} X87CONTROLWORDFIELDS;

typedef struct DECLSPEC_ALIGN(16) _XMMREGISTER
{
    ULONGLONG Low;
    LONGLONG High;
} XMMREGISTER;

typedef struct
{
    XMMREGISTER Low; //XMM/SSE part
    XMMREGISTER High; //AVX part
} YMMREGISTER;

typedef struct
{
    BYTE    data[10];
    int     st_value;
    int     tag;
} X87FPUREGISTER;

typedef struct
{
    WORD   ControlWord;
    WORD   StatusWord;
    WORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    DWORD   Cr0NpxState;
} X87FPU;

typedef struct
{
    ULONG_PTR cax;
    ULONG_PTR ccx;
    ULONG_PTR cdx;
    ULONG_PTR cbx;
    ULONG_PTR csp;
    ULONG_PTR cbp;
    ULONG_PTR csi;
    ULONG_PTR cdi;
#ifdef _WIN64
    ULONG_PTR r8;
    ULONG_PTR r9;
    ULONG_PTR r10;
    ULONG_PTR r11;
    ULONG_PTR r12;
    ULONG_PTR r13;
    ULONG_PTR r14;
    ULONG_PTR r15;
#endif //_WIN64
    ULONG_PTR cip;
    ULONG_PTR eflags;
    unsigned short gs;
    unsigned short fs;
    unsigned short es;
    unsigned short ds;
    unsigned short cs;
    unsigned short ss;
    ULONG_PTR dr0;
    ULONG_PTR dr1;
    ULONG_PTR dr2;
    ULONG_PTR dr3;
    ULONG_PTR dr6;
    ULONG_PTR dr7;
    BYTE RegisterArea[80];
    X87FPU x87fpu;
    DWORD MxCsr;
#ifdef _WIN64
    XMMREGISTER XmmRegisters[16];
    YMMREGISTER YmmRegisters[16];
#else // x86
    XMMREGISTER XmmRegisters[8];
    YMMREGISTER YmmRegisters[8];
#endif
} REGISTERCONTEXT;

typedef struct
{
    DWORD code;
    const char* name;
} LASTERROR;

typedef struct
{
    REGISTERCONTEXT regcontext;
    FLAGS flags;
    X87FPUREGISTER x87FPURegisters[8];
    unsigned long long mmx[8];
    MXCSRFIELDS MxCsrFields;
    X87STATUSWORDFIELDS x87StatusWordFields;
    X87CONTROLWORDFIELDS x87ControlWordFields;
    LASTERROR lastError;
} REGDUMP;

typedef struct
{
    DISASM_ARGTYPE type;
    SEGMENTREG segment;
    char mnemonic[64];
    duint constant;
    duint value;
    duint memvalue;
} DISASM_ARG;

typedef struct
{
    char instruction[64];
    DISASM_INSTRTYPE type;
    int argcount;
    int instr_size;
    DISASM_ARG arg[3];
} DISASM_INSTR;

typedef struct
{
    char color[8]; //hex color-code
    char comment[MAX_COMMENT_SIZE];
} STACK_COMMENT;

typedef struct
{
    int ThreadNumber;
    HANDLE Handle;
    DWORD ThreadId;
    duint ThreadStartAddress;
    duint ThreadLocalBase;
    char threadName[MAX_THREAD_NAME_SIZE];
} THREADINFO;

typedef struct
{
    THREADINFO BasicInfo;
    duint ThreadCip;
    DWORD SuspendCount;
    THREADPRIORITY Priority;
    THREADWAITREASON WaitReason;
    DWORD LastError;
} THREADALLINFO;

typedef struct
{
    int count;
    THREADALLINFO* list;
    int CurrentThread;
} THREADLIST;

typedef struct
{
    ULONG_PTR value; //displacement / addrvalue (rip-relative)
    MEMORY_SIZE size; //byte/word/dword/qword
    char mnemonic[MAX_MNEMONIC_SIZE];
} MEMORY_INFO;

typedef struct
{
    ULONG_PTR value;
    VALUE_SIZE size;
} VALUE_INFO;

typedef struct
{
    DWORD type; //value|memory|addr
    VALUE_INFO value; //immediat
    MEMORY_INFO memory;
    ULONG_PTR addr; //addrvalue (jumps + calls)
    bool branch; //jumps/calls
    bool call; //instruction is a call
    int size;
    char instruction[MAX_MNEMONIC_SIZE * 4];
} BASIC_INSTRUCTION_INFO;

typedef struct
{
    SCRIPTBRANCHTYPE type;
    int dest;
    char branchlabel[256];
} SCRIPTBRANCH;

typedef struct
{
    duint addr;
    duint start;
    duint end;
    bool manual;
    int depth;
} FUNCTION_LOOP_INFO;

//Debugger functions
BRIDGE_IMPEXP const char* DbgInit();
BRIDGE_IMPEXP void DbgExit();
BRIDGE_IMPEXP bool DbgMemRead(duint va, unsigned char* dest, duint size);
BRIDGE_IMPEXP bool DbgMemWrite(duint va, const unsigned char* src, duint size);
BRIDGE_IMPEXP duint DbgMemGetPageSize(duint base);
BRIDGE_IMPEXP duint DbgMemFindBaseAddr(duint addr, duint* size);
BRIDGE_IMPEXP bool DbgCmdExec(const char* cmd);
BRIDGE_IMPEXP bool DbgCmdExecDirect(const char* cmd);
BRIDGE_IMPEXP bool DbgMemMap(MEMMAP* memmap);
BRIDGE_IMPEXP bool DbgIsValidExpression(const char* expression);
BRIDGE_IMPEXP bool DbgIsDebugging();
BRIDGE_IMPEXP bool DbgIsJumpGoingToExecute(duint addr);
BRIDGE_IMPEXP bool DbgGetLabelAt(duint addr, SEGMENTREG segment, char* text);
BRIDGE_IMPEXP bool DbgSetLabelAt(duint addr, const char* text);
BRIDGE_IMPEXP bool DbgGetCommentAt(duint addr, char* text);
BRIDGE_IMPEXP bool DbgSetCommentAt(duint addr, const char* text);
BRIDGE_IMPEXP bool DbgGetBookmarkAt(duint addr);
BRIDGE_IMPEXP bool DbgSetBookmarkAt(duint addr, bool isbookmark);
BRIDGE_IMPEXP bool DbgGetModuleAt(duint addr, char* text);
BRIDGE_IMPEXP BPXTYPE DbgGetBpxTypeAt(duint addr);
BRIDGE_IMPEXP duint DbgValFromString(const char* string);
BRIDGE_IMPEXP bool DbgGetRegDump(REGDUMP* regdump);
BRIDGE_IMPEXP bool DbgValToString(const char* string, duint value);
BRIDGE_IMPEXP bool DbgMemIsValidReadPtr(duint addr);
BRIDGE_IMPEXP int DbgGetBpList(BPXTYPE type, BPMAP* list);
BRIDGE_IMPEXP FUNCTYPE DbgGetFunctionTypeAt(duint addr);
BRIDGE_IMPEXP LOOPTYPE DbgGetLoopTypeAt(duint addr, int depth);
BRIDGE_IMPEXP duint DbgGetBranchDestination(duint addr);
BRIDGE_IMPEXP void DbgScriptLoad(const char* filename);
BRIDGE_IMPEXP void DbgScriptUnload();
BRIDGE_IMPEXP void DbgScriptRun(int destline);
BRIDGE_IMPEXP void DbgScriptStep();
BRIDGE_IMPEXP bool DbgScriptBpToggle(int line);
BRIDGE_IMPEXP bool DbgScriptBpGet(int line);
BRIDGE_IMPEXP bool DbgScriptCmdExec(const char* command);
BRIDGE_IMPEXP void DbgScriptAbort();
BRIDGE_IMPEXP SCRIPTLINETYPE DbgScriptGetLineType(int line);
BRIDGE_IMPEXP void DbgScriptSetIp(int line);
BRIDGE_IMPEXP bool DbgScriptGetBranchInfo(int line, SCRIPTBRANCH* info);
BRIDGE_IMPEXP void DbgSymbolEnum(duint base, CBSYMBOLENUM cbSymbolEnum, void* user);
BRIDGE_IMPEXP bool DbgAssembleAt(duint addr, const char* instruction);
BRIDGE_IMPEXP duint DbgModBaseFromName(const char* name);
BRIDGE_IMPEXP void DbgDisasmAt(duint addr, DISASM_INSTR* instr);
BRIDGE_IMPEXP bool DbgStackCommentGet(duint addr, STACK_COMMENT* comment);
BRIDGE_IMPEXP void DbgGetThreadList(THREADLIST* list);
BRIDGE_IMPEXP void DbgSettingsUpdated();
BRIDGE_IMPEXP void DbgDisasmFastAt(duint addr, BASIC_INSTRUCTION_INFO* basicinfo);
BRIDGE_IMPEXP void DbgMenuEntryClicked(int hEntry);
BRIDGE_IMPEXP bool DbgFunctionGet(duint addr, duint* start, duint* end);
BRIDGE_IMPEXP bool DbgFunctionOverlaps(duint start, duint end);
BRIDGE_IMPEXP bool DbgFunctionAdd(duint start, duint end);
BRIDGE_IMPEXP bool DbgFunctionDel(duint addr);
BRIDGE_IMPEXP bool DbgLoopGet(int depth, duint addr, duint* start, duint* end);
BRIDGE_IMPEXP bool DbgLoopOverlaps(int depth, duint start, duint end);
BRIDGE_IMPEXP bool DbgLoopAdd(duint start, duint end);
BRIDGE_IMPEXP bool DbgLoopDel(int depth, duint addr);
BRIDGE_IMPEXP bool DbgIsRunLocked();
BRIDGE_IMPEXP bool DbgIsBpDisabled(duint addr);
BRIDGE_IMPEXP bool DbgSetAutoCommentAt(duint addr, const char* text);
BRIDGE_IMPEXP void DbgClearAutoCommentRange(duint start, duint end);
BRIDGE_IMPEXP bool DbgSetAutoLabelAt(duint addr, const char* text);
BRIDGE_IMPEXP void DbgClearAutoLabelRange(duint start, duint end);
BRIDGE_IMPEXP bool DbgSetAutoBookmarkAt(duint addr);
BRIDGE_IMPEXP void DbgClearAutoBookmarkRange(duint start, duint end);
BRIDGE_IMPEXP bool DbgSetAutoFunctionAt(duint start, duint end);
BRIDGE_IMPEXP void DbgClearAutoFunctionRange(duint start, duint end);
BRIDGE_IMPEXP bool DbgGetStringAt(duint addr, char* text);
BRIDGE_IMPEXP const DBGFUNCTIONS* DbgFunctions();
BRIDGE_IMPEXP bool DbgWinEvent(MSG* message, long* result);
BRIDGE_IMPEXP bool DbgWinEventGlobal(MSG* message);
BRIDGE_IMPEXP bool DbgIsRunning();

//Gui defines
#define GUI_PLUGIN_MENU 0
#define GUI_DISASM_MENU 1
#define GUI_DUMP_MENU 2
#define GUI_STACK_MENU 3

#define GUI_DISASSEMBLY 0
#define GUI_DUMP 1
#define GUI_STACK 2

#define GUI_MAX_LINE_SIZE 65536
#define GUI_MAX_DISASSEMBLY_SIZE 2048

//Gui enums
typedef enum
{
    GUI_DISASSEMBLE_AT,             // param1=(duint)va,            param2=(duint)cip
    GUI_SET_DEBUG_STATE,            // param1=(DBGSTATE)state,      param2=unused
    GUI_ADD_MSG_TO_LOG,             // param1=(const char*)msg,     param2=unused
    GUI_CLEAR_LOG,                  // param1=unused,               param2=unused
    GUI_UPDATE_REGISTER_VIEW,       // param1=unused,               param2=unused
    GUI_UPDATE_DISASSEMBLY_VIEW,    // param1=unused,               param2=unused
    GUI_UPDATE_BREAKPOINTS_VIEW,    // param1=unused,               param2=unused
    GUI_UPDATE_WINDOW_TITLE,        // param1=(const char*)file,    param2=unused
    GUI_GET_WINDOW_HANDLE,          // param1=unused,               param2=unused
    GUI_DUMP_AT,                    // param1=(duint)va             param2=unused
    GUI_SCRIPT_ADD,                 // param1=int count,            param2=const char** lines
    GUI_SCRIPT_CLEAR,               // param1=unused,               param2=unused
    GUI_SCRIPT_SETIP,               // param1=int line,             param2=unused
    GUI_SCRIPT_ERROR,               // param1=int line,             param2=const char* message
    GUI_SCRIPT_SETTITLE,            // param1=const char* title,    param2=unused
    GUI_SCRIPT_SETINFOLINE,         // param1=int line,             param2=const char* info
    GUI_SCRIPT_MESSAGE,             // param1=const char* message,  param2=unused
    GUI_SCRIPT_MSGYN,               // param1=const char* message,  param2=unused
    GUI_SYMBOL_LOG_ADD,             // param1(const char*)msg,      param2=unused
    GUI_SYMBOL_LOG_CLEAR,           // param1=unused,               param2=unused
    GUI_SYMBOL_SET_PROGRESS,        // param1=int percent           param2=unused
    GUI_SYMBOL_UPDATE_MODULE_LIST,  // param1=int count,            param2=SYMBOLMODULEINFO* modules
    GUI_REF_ADDCOLUMN,              // param1=int width,            param2=(const char*)title
    GUI_REF_SETROWCOUNT,            // param1=int rows,             param2=unused
    GUI_REF_GETROWCOUNT,            // param1=unused,               param2=unused
    GUI_REF_DELETEALLCOLUMNS,       // param1=unused,               param2=unused
    GUI_REF_SETCELLCONTENT,         // param1=(CELLINFO*)info,      param2=unused
    GUI_REF_GETCELLCONTENT,         // param1=int row,              param2=int col
    GUI_REF_RELOADDATA,             // param1=unused,               param2=unused
    GUI_REF_SETSINGLESELECTION,     // param1=int index,            param2=bool scroll
    GUI_REF_SETPROGRESS,            // param1=int progress,            param2=unused
    GUI_REF_SETSEARCHSTARTCOL,      // param1=int col               param2=unused
    GUI_STACK_DUMP_AT,              // param1=duint addr,           param2=duint csp
    GUI_UPDATE_DUMP_VIEW,           // param1=unused,               param2=unused
    GUI_UPDATE_THREAD_VIEW,         // param1=unused,               param2=unused
    GUI_ADD_RECENT_FILE,            // param1=(const char*)file,    param2=unused
    GUI_SET_LAST_EXCEPTION,         // param1=unsigned int code,    param2=unused
    GUI_GET_DISASSEMBLY,            // param1=duint addr,           param2=char* text
    GUI_MENU_ADD,                   // param1=int hMenu,            param2=const char* title
    GUI_MENU_ADD_ENTRY,             // param1=int hMenu,            param2=const char* title
    GUI_MENU_ADD_SEPARATOR,         // param1=int hMenu,            param2=unused
    GUI_MENU_CLEAR,                 // param1=int hMenu,            param2=unused
    GUI_SELECTION_GET,              // param1=int hWindow,          param2=SELECTIONDATA* selection
    GUI_SELECTION_SET,              // param1=int hWindow,          param2=const SELECTIONDATA* selection
    GUI_GETLINE_WINDOW,             // param1=const char* title,    param2=char* text
    GUI_AUTOCOMPLETE_ADDCMD,        // param1=const char* cmd,      param2=ununsed
    GUI_AUTOCOMPLETE_DELCMD,        // param1=const char* cmd,      param2=ununsed
    GUI_AUTOCOMPLETE_CLEARALL,      // param1=unused,              param2=unused
    GUI_SCRIPT_ENABLEHIGHLIGHTING,  // param1=bool enable,          param2=unused
    GUI_ADD_MSG_TO_STATUSBAR,       // param1=const char* msg,      param2=unused
    GUI_UPDATE_SIDEBAR,             // param1=unused,               param2=unused
    GUI_REPAINT_TABLE_VIEW,         // param1=unused,               param2=unused
    GUI_UPDATE_PATCHES,             // param1=unused,               param2=unused
    GUI_UPDATE_CALLSTACK,           // param1=unused,               param2=unused
    GUI_SYMBOL_REFRESH_CURRENT,     // param1=unused,               param2=unused
    GUI_UPDATE_MEMORY_VIEW,         // param1=unused,               param2=unused
    GUI_REF_INITIALIZE,             // param1=const char* name,     param2=unused
    GUI_LOAD_SOURCE_FILE,           // param1=const char* path,     param2=line
    GUI_MENU_SET_ICON,              // param1=int hMenu,            param2=ICONINFO*
    GUI_MENU_SET_ENTRY_ICON,        // param1=int hEntry,           param2=ICONINFO*
    GUI_SHOW_CPU,                   // param1=unused,               param2=unused
    GUI_ADD_QWIDGET_TAB,            // param1=QWidget*,             param2=unused
    GUI_SHOW_QWIDGET_TAB,           // param1=QWidget*,             param2=unused
    GUI_CLOSE_QWIDGET_TAB,          // param1=QWidget*,             param2=unused
    GUI_EXECUTE_ON_GUI_THREAD       // param1=GUICALLBACK,          param2=unused
} GUIMSG;

//GUI Typedefs
typedef void (*GUICALLBACK)();

//GUI structures
typedef struct
{
    int row;
    int col;
    const char* str;
} CELLINFO;

typedef struct
{
    duint start;
    duint end;
} SELECTIONDATA;

typedef struct
{
    const void* data;
    duint size;
} ICONDATA;

//GUI functions
BRIDGE_IMPEXP void GuiDisasmAt(duint addr, duint cip);
BRIDGE_IMPEXP void GuiSetDebugState(DBGSTATE state);
BRIDGE_IMPEXP void GuiAddLogMessage(const char* msg);
BRIDGE_IMPEXP void GuiLogClear();
BRIDGE_IMPEXP void GuiUpdateAllViews();
BRIDGE_IMPEXP void GuiUpdateRegisterView();
BRIDGE_IMPEXP void GuiUpdateDisassemblyView();
BRIDGE_IMPEXP void GuiUpdateBreakpointsView();
BRIDGE_IMPEXP void GuiUpdateWindowTitle(const char* filename);
BRIDGE_IMPEXP HWND GuiGetWindowHandle();
BRIDGE_IMPEXP void GuiDumpAt(duint va);
BRIDGE_IMPEXP void GuiScriptAdd(int count, const char** lines);
BRIDGE_IMPEXP void GuiScriptClear();
BRIDGE_IMPEXP void GuiScriptSetIp(int line);
BRIDGE_IMPEXP void GuiScriptError(int line, const char* message);
BRIDGE_IMPEXP void GuiScriptSetTitle(const char* title);
BRIDGE_IMPEXP void GuiScriptSetInfoLine(int line, const char* info);
BRIDGE_IMPEXP void GuiScriptMessage(const char* message);
BRIDGE_IMPEXP int GuiScriptMsgyn(const char* message);
BRIDGE_IMPEXP void GuiScriptEnableHighlighting(bool enable);
BRIDGE_IMPEXP void GuiSymbolLogAdd(const char* message);
BRIDGE_IMPEXP void GuiSymbolLogClear();
BRIDGE_IMPEXP void GuiSymbolSetProgress(int percent);
BRIDGE_IMPEXP void GuiSymbolUpdateModuleList(int count, SYMBOLMODULEINFO* modules);
BRIDGE_IMPEXP void GuiSymbolRefreshCurrent();
BRIDGE_IMPEXP void GuiReferenceAddColumn(int width, const char* title);
BRIDGE_IMPEXP void GuiReferenceSetRowCount(int count);
BRIDGE_IMPEXP int GuiReferenceGetRowCount();
BRIDGE_IMPEXP void GuiReferenceDeleteAllColumns();
BRIDGE_IMPEXP void GuiReferenceInitialize(const char* name);
BRIDGE_IMPEXP void GuiReferenceSetCellContent(int row, int col, const char* str);
BRIDGE_IMPEXP const char* GuiReferenceGetCellContent(int row, int col);
BRIDGE_IMPEXP void GuiReferenceReloadData();
BRIDGE_IMPEXP void GuiReferenceSetSingleSelection(int index, bool scroll);
BRIDGE_IMPEXP void GuiReferenceSetProgress(int progress);
BRIDGE_IMPEXP void GuiReferenceSetSearchStartCol(int col);
BRIDGE_IMPEXP void GuiStackDumpAt(duint addr, duint csp);
BRIDGE_IMPEXP void GuiUpdateDumpView();
BRIDGE_IMPEXP void GuiUpdateThreadView();
BRIDGE_IMPEXP void GuiUpdateMemoryView();
BRIDGE_IMPEXP void GuiAddRecentFile(const char* file);
BRIDGE_IMPEXP void GuiSetLastException(unsigned int exception);
BRIDGE_IMPEXP bool GuiGetDisassembly(duint addr, char* text);
BRIDGE_IMPEXP int GuiMenuAdd(int hMenu, const char* title);
BRIDGE_IMPEXP int GuiMenuAddEntry(int hMenu, const char* title);
BRIDGE_IMPEXP void GuiMenuAddSeparator(int hMenu);
BRIDGE_IMPEXP void GuiMenuClear(int hMenu);
BRIDGE_IMPEXP bool GuiSelectionGet(int hWindow, SELECTIONDATA* selection);
BRIDGE_IMPEXP bool GuiSelectionSet(int hWindow, const SELECTIONDATA* selection);
BRIDGE_IMPEXP bool GuiGetLineWindow(const char* title, char* text);
BRIDGE_IMPEXP void GuiAutoCompleteAddCmd(const char* cmd);
BRIDGE_IMPEXP void GuiAutoCompleteDelCmd(const char* cmd);
BRIDGE_IMPEXP void GuiAutoCompleteClearAll();
BRIDGE_IMPEXP void GuiAddStatusBarMessage(const char* msg);
BRIDGE_IMPEXP void GuiUpdateSideBar();
BRIDGE_IMPEXP void GuiRepaintTableView();
BRIDGE_IMPEXP void GuiUpdatePatches();
BRIDGE_IMPEXP void GuiUpdateCallStack();
BRIDGE_IMPEXP void GuiUpdateMemoryView();
BRIDGE_IMPEXP void GuiLoadSourceFile(const char* path, int line);
BRIDGE_IMPEXP void GuiMenuSetIcon(int hMenu, const ICONDATA* icon);
BRIDGE_IMPEXP void GuiMenuSetEntryIcon(int hEntry, const ICONDATA* icon);
BRIDGE_IMPEXP void GuiShowCpu();
BRIDGE_IMPEXP void GuiAddQWidgetTab(void* qWidget);
BRIDGE_IMPEXP void GuiShowQWidgetTab(void* qWidget);
BRIDGE_IMPEXP void GuiCloseQWidgetTab(void* qWidget);
BRIDGE_IMPEXP void GuiExecuteOnGuiThread(GUICALLBACK cbGuiThread);

#ifdef __cplusplus
}
#endif

#pragma pack(pop)

#endif // _BRIDGEMAIN_H_



================================================
File: pluginsdk/DeviceNameResolver/DeviceNameResolver.h
================================================
#ifndef _DEVICENAMERESOLVER_H
#define _DEVICENAMERESOLVER_H

#include <windows.h>

#ifdef __cplusplus
extern "C"
{
#endif

__declspec(dllexport) bool DevicePathToPathW(const wchar_t* szDevicePath, wchar_t* szPath, size_t nSize);
__declspec(dllexport) bool DevicePathToPathA(const char* szDevicePath, char* szPath, size_t nSize);
__declspec(dllexport) bool DevicePathFromFileHandleW(HANDLE hFile, wchar_t* szDevicePath, size_t nSize);
__declspec(dllexport) bool DevicePathFromFileHandleA(HANDLE hFile, char* szDevicePath, size_t nSize);
__declspec(dllexport) bool PathFromFileHandleW(HANDLE hFile, wchar_t* szPath, size_t nSize);
__declspec(dllexport) bool PathFromFileHandleA(HANDLE hFile, char* szPath, size_t nSize);

#ifdef __cplusplus
}
#endif

#endif // _DEVICENAMERESOLVER_H



================================================
File: pluginsdk/TitanEngine/TitanEngine.h
================================================
#ifndef TITANENGINE
#define TITANENGINE

#define TITCALL

#if _MSC_VER > 1000
#pragma once
#endif

#include <windows.h>
#include <stdint.h>

#pragma pack(push, 1)

// Global.Constant.Structure.Declaration:
// Engine.External:
#define UE_STRUCT_PE32STRUCT 1
#define UE_STRUCT_PE64STRUCT 2
#define UE_STRUCT_PESTRUCT 3
#define UE_STRUCT_IMPORTENUMDATA 4
#define UE_STRUCT_THREAD_ITEM_DATA 5
#define UE_STRUCT_LIBRARY_ITEM_DATA 6
#define UE_STRUCT_LIBRARY_ITEM_DATAW 7
#define UE_STRUCT_PROCESS_ITEM_DATA 8
#define UE_STRUCT_HANDLERARRAY 9
#define UE_STRUCT_PLUGININFORMATION 10
#define UE_STRUCT_HOOK_ENTRY 11
#define UE_STRUCT_FILE_STATUS_INFO 12
#define UE_STRUCT_FILE_FIX_INFO 13
#define UE_STRUCT_X87FPUREGISTER 14
#define UE_STRUCT_X87FPU 15
#define UE_STRUCT_TITAN_ENGINE_CONTEXT 16

#define UE_ACCESS_READ 0
#define UE_ACCESS_WRITE 1
#define UE_ACCESS_ALL 2

#define UE_HIDE_PEBONLY 0
#define UE_HIDE_BASIC 1

#define UE_PLUGIN_CALL_REASON_PREDEBUG 1
#define UE_PLUGIN_CALL_REASON_EXCEPTION 2
#define UE_PLUGIN_CALL_REASON_POSTDEBUG 3
#define UE_PLUGIN_CALL_REASON_UNHANDLEDEXCEPTION 4

#define TEE_HOOK_NRM_JUMP 1
#define TEE_HOOK_NRM_CALL 3
#define TEE_HOOK_IAT 5

#define UE_ENGINE_ALOW_MODULE_LOADING 1
#define UE_ENGINE_AUTOFIX_FORWARDERS 2
#define UE_ENGINE_PASS_ALL_EXCEPTIONS 3
#define UE_ENGINE_NO_CONSOLE_WINDOW 4
#define UE_ENGINE_BACKUP_FOR_CRITICAL_FUNCTIONS 5
#define UE_ENGINE_CALL_PLUGIN_CALLBACK 6
#define UE_ENGINE_RESET_CUSTOM_HANDLER 7
#define UE_ENGINE_CALL_PLUGIN_DEBUG_CALLBACK 8
#define UE_ENGINE_SET_DEBUG_PRIVILEGE 9

#define UE_OPTION_REMOVEALL 1
#define UE_OPTION_DISABLEALL 2
#define UE_OPTION_REMOVEALLDISABLED 3
#define UE_OPTION_REMOVEALLENABLED 4

#define UE_STATIC_DECRYPTOR_XOR 1
#define UE_STATIC_DECRYPTOR_SUB 2
#define UE_STATIC_DECRYPTOR_ADD 3

#define UE_STATIC_DECRYPTOR_FOREWARD 1
#define UE_STATIC_DECRYPTOR_BACKWARD 2

#define UE_STATIC_KEY_SIZE_1 1
#define UE_STATIC_KEY_SIZE_2 2
#define UE_STATIC_KEY_SIZE_4 4
#define UE_STATIC_KEY_SIZE_8 8

#define UE_STATIC_APLIB 1
#define UE_STATIC_APLIB_DEPACK 2
#define UE_STATIC_LZMA 3

#define UE_STATIC_HASH_MD5 1
#define UE_STATIC_HASH_SHA1 2
#define UE_STATIC_HASH_CRC32 3

#define UE_RESOURCE_LANGUAGE_ANY -1

#define UE_PE_OFFSET 0
#define UE_IMAGEBASE 1
#define UE_OEP 2
#define UE_SIZEOFIMAGE 3
#define UE_SIZEOFHEADERS 4
#define UE_SIZEOFOPTIONALHEADER 5
#define UE_SECTIONALIGNMENT 6
#define UE_IMPORTTABLEADDRESS 7
#define UE_IMPORTTABLESIZE 8
#define UE_RESOURCETABLEADDRESS 9
#define UE_RESOURCETABLESIZE 10
#define UE_EXPORTTABLEADDRESS 11
#define UE_EXPORTTABLESIZE 12
#define UE_TLSTABLEADDRESS 13
#define UE_TLSTABLESIZE 14
#define UE_RELOCATIONTABLEADDRESS 15
#define UE_RELOCATIONTABLESIZE 16
#define UE_TIMEDATESTAMP 17
#define UE_SECTIONNUMBER 18
#define UE_CHECKSUM 19
#define UE_SUBSYSTEM 20
#define UE_CHARACTERISTICS 21
#define UE_NUMBEROFRVAANDSIZES 22
#define UE_BASEOFCODE 23
#define UE_BASEOFDATA 24
//leaving some enum space here for future additions
#define UE_SECTIONNAME 40
#define UE_SECTIONVIRTUALOFFSET 41
#define UE_SECTIONVIRTUALSIZE 42
#define UE_SECTIONRAWOFFSET 43
#define UE_SECTIONRAWSIZE 44
#define UE_SECTIONFLAGS 45

#define UE_VANOTFOUND = -2;

#define UE_CH_BREAKPOINT 1
#define UE_CH_SINGLESTEP 2
#define UE_CH_ACCESSVIOLATION 3
#define UE_CH_ILLEGALINSTRUCTION 4
#define UE_CH_NONCONTINUABLEEXCEPTION 5
#define UE_CH_ARRAYBOUNDSEXCEPTION 6
#define UE_CH_FLOATDENORMALOPERAND 7
#define UE_CH_FLOATDEVIDEBYZERO 8
#define UE_CH_INTEGERDEVIDEBYZERO 9
#define UE_CH_INTEGEROVERFLOW 10
#define UE_CH_PRIVILEGEDINSTRUCTION 11
#define UE_CH_PAGEGUARD 12
#define UE_CH_EVERYTHINGELSE 13
#define UE_CH_CREATETHREAD 14
#define UE_CH_EXITTHREAD 15
#define UE_CH_CREATEPROCESS 16
#define UE_CH_EXITPROCESS 17
#define UE_CH_LOADDLL 18
#define UE_CH_UNLOADDLL 19
#define UE_CH_OUTPUTDEBUGSTRING 20
#define UE_CH_AFTEREXCEPTIONPROCESSING 21
#define UE_CH_SYSTEMBREAKPOINT 23
#define UE_CH_UNHANDLEDEXCEPTION 24
#define UE_CH_RIPEVENT 25
#define UE_CH_DEBUGEVENT 26

#define UE_OPTION_HANDLER_RETURN_HANDLECOUNT 1
#define UE_OPTION_HANDLER_RETURN_ACCESS 2
#define UE_OPTION_HANDLER_RETURN_FLAGS 3
#define UE_OPTION_HANDLER_RETURN_TYPENAME 4

#define UE_BREAKPOINT_INT3 1
#define UE_BREAKPOINT_LONG_INT3 2
#define UE_BREAKPOINT_UD2 3

#define UE_BPXREMOVED 0
#define UE_BPXACTIVE 1
#define UE_BPXINACTIVE 2

#define UE_BREAKPOINT 0
#define UE_SINGLESHOOT 1
#define UE_HARDWARE 2
#define UE_MEMORY 3
#define UE_MEMORY_READ 4
#define UE_MEMORY_WRITE 5
#define UE_MEMORY_EXECUTE 6
#define UE_BREAKPOINT_TYPE_INT3 0x10000000
#define UE_BREAKPOINT_TYPE_LONG_INT3 0x20000000
#define UE_BREAKPOINT_TYPE_UD2 0x30000000

#define UE_HARDWARE_EXECUTE 4
#define UE_HARDWARE_WRITE 5
#define UE_HARDWARE_READWRITE 6

#define UE_HARDWARE_SIZE_1 7
#define UE_HARDWARE_SIZE_2 8
#define UE_HARDWARE_SIZE_4 9
#define UE_HARDWARE_SIZE_8 10

#define UE_ON_LIB_LOAD 1
#define UE_ON_LIB_UNLOAD 2
#define UE_ON_LIB_ALL 3

#define UE_APISTART 0
#define UE_APIEND 1

#define UE_PLATFORM_x86 1
#define UE_PLATFORM_x64 2
#define UE_PLATFORM_ALL 3

#define UE_FUNCTION_STDCALL 1
#define UE_FUNCTION_CCALL 2
#define UE_FUNCTION_FASTCALL 3
#define UE_FUNCTION_STDCALL_RET 4
#define UE_FUNCTION_CCALL_RET 5
#define UE_FUNCTION_FASTCALL_RET 6
#define UE_FUNCTION_STDCALL_CALL 7
#define UE_FUNCTION_CCALL_CALL 8
#define UE_FUNCTION_FASTCALL_CALL 9
#define UE_PARAMETER_BYTE 0
#define UE_PARAMETER_WORD 1
#define UE_PARAMETER_DWORD 2
#define UE_PARAMETER_QWORD 3
#define UE_PARAMETER_PTR_BYTE 4
#define UE_PARAMETER_PTR_WORD 5
#define UE_PARAMETER_PTR_DWORD 6
#define UE_PARAMETER_PTR_QWORD 7
#define UE_PARAMETER_STRING 8
#define UE_PARAMETER_UNICODE 9

#define UE_EAX 1
#define UE_EBX 2
#define UE_ECX 3
#define UE_EDX 4
#define UE_EDI 5
#define UE_ESI 6
#define UE_EBP 7
#define UE_ESP 8
#define UE_EIP 9
#define UE_EFLAGS 10
#define UE_DR0 11
#define UE_DR1 12
#define UE_DR2 13
#define UE_DR3 14
#define UE_DR6 15
#define UE_DR7 16
#define UE_RAX 17
#define UE_RBX 18
#define UE_RCX 19
#define UE_RDX 20
#define UE_RDI 21
#define UE_RSI 22
#define UE_RBP 23
#define UE_RSP 24
#define UE_RIP 25
#define UE_RFLAGS 26
#define UE_R8 27
#define UE_R9 28
#define UE_R10 29
#define UE_R11 30
#define UE_R12 31
#define UE_R13 32
#define UE_R14 33
#define UE_R15 34
#define UE_CIP 35
#define UE_CSP 36
#ifdef _WIN64
#define UE_CFLAGS UE_RFLAGS
#else
#define UE_CFLAGS UE_EFLAGS
#endif
#define UE_SEG_GS 37
#define UE_SEG_FS 38
#define UE_SEG_ES 39
#define UE_SEG_DS 40
#define UE_SEG_CS 41
#define UE_SEG_SS 42
#define UE_x87_r0 43
#define UE_x87_r1 44
#define UE_x87_r2 45
#define UE_x87_r3 46
#define UE_x87_r4 47
#define UE_x87_r5 48
#define UE_x87_r6 49
#define UE_x87_r7 50
#define UE_X87_STATUSWORD 51
#define UE_X87_CONTROLWORD 52
#define UE_X87_TAGWORD 53
#define UE_MXCSR 54
#define UE_MMX0 55
#define UE_MMX1 56
#define UE_MMX2 57
#define UE_MMX3 58
#define UE_MMX4 59
#define UE_MMX5 60
#define UE_MMX6 61
#define UE_MMX7 62
#define UE_XMM0 63
#define UE_XMM1 64
#define UE_XMM2 65
#define UE_XMM3 66
#define UE_XMM4 67
#define UE_XMM5 68
#define UE_XMM6 69
#define UE_XMM7 70
#define UE_XMM8 71
#define UE_XMM9 72
#define UE_XMM10 73
#define UE_XMM11 74
#define UE_XMM12 75
#define UE_XMM13 76
#define UE_XMM14 77
#define UE_XMM15 78
#define UE_x87_ST0 79
#define UE_x87_ST1 80
#define UE_x87_ST2 81
#define UE_x87_ST3 82
#define UE_x87_ST4 83
#define UE_x87_ST5 84
#define UE_x87_ST6 85
#define UE_x87_ST7 86
#define UE_YMM0 87
#define UE_YMM1 88
#define UE_YMM2 89
#define UE_YMM3 90
#define UE_YMM4 91
#define UE_YMM5 92
#define UE_YMM6 93
#define UE_YMM7 94
#define UE_YMM8 95
#define UE_YMM9 96
#define UE_YMM10 97
#define UE_YMM11 98
#define UE_YMM12 99
#define UE_YMM13 100
#define UE_YMM14 101
#define UE_YMM15 102

#ifndef CONTEXT_EXTENDED_REGISTERS
#define CONTEXT_EXTENDED_REGISTERS 0
#endif

typedef struct
{
    DWORD PE32Offset;
    DWORD ImageBase;
    DWORD OriginalEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD NtSizeOfImage;
    DWORD NtSizeOfHeaders;
    WORD SizeOfOptionalHeaders;
    DWORD FileAlignment;
    DWORD SectionAligment;
    DWORD ImportTableAddress;
    DWORD ImportTableSize;
    DWORD ResourceTableAddress;
    DWORD ResourceTableSize;
    DWORD ExportTableAddress;
    DWORD ExportTableSize;
    DWORD TLSTableAddress;
    DWORD TLSTableSize;
    DWORD RelocationTableAddress;
    DWORD RelocationTableSize;
    DWORD TimeDateStamp;
    WORD SectionNumber;
    DWORD CheckSum;
    WORD SubSystem;
    WORD Characteristics;
    DWORD NumberOfRvaAndSizes;
} PE32Struct, *PPE32Struct;

typedef struct
{
    DWORD PE64Offset;
    DWORD64 ImageBase;
    DWORD OriginalEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD NtSizeOfImage;
    DWORD NtSizeOfHeaders;
    WORD SizeOfOptionalHeaders;
    DWORD FileAlignment;
    DWORD SectionAligment;
    DWORD ImportTableAddress;
    DWORD ImportTableSize;
    DWORD ResourceTableAddress;
    DWORD ResourceTableSize;
    DWORD ExportTableAddress;
    DWORD ExportTableSize;
    DWORD TLSTableAddress;
    DWORD TLSTableSize;
    DWORD RelocationTableAddress;
    DWORD RelocationTableSize;
    DWORD TimeDateStamp;
    WORD SectionNumber;
    DWORD CheckSum;
    WORD SubSystem;
    WORD Characteristics;
    DWORD NumberOfRvaAndSizes;
} PE64Struct, *PPE64Struct;

#if defined(_WIN64)
typedef PE64Struct PEStruct;
#else
typedef PE32Struct PEStruct;
#endif

typedef struct
{
    bool NewDll;
    int NumberOfImports;
    ULONG_PTR ImageBase;
    ULONG_PTR BaseImportThunk;
    ULONG_PTR ImportThunk;
    char* APIName;
    char* DLLName;
} ImportEnumData, *PImportEnumData;

typedef struct
{
    HANDLE hThread;
    DWORD dwThreadId;
    void* ThreadStartAddress;
    void* ThreadLocalBase;
    void* TebAddress;
    ULONG WaitTime;
    LONG Priority;
    LONG BasePriority;
    ULONG ContextSwitches;
    ULONG ThreadState;
    ULONG WaitReason;
} THREAD_ITEM_DATA, *PTHREAD_ITEM_DATA;

typedef struct
{
    HANDLE hFile;
    void* BaseOfDll;
    HANDLE hFileMapping;
    void* hFileMappingView;
    char szLibraryPath[MAX_PATH];
    char szLibraryName[MAX_PATH];
} LIBRARY_ITEM_DATA, *PLIBRARY_ITEM_DATA;

typedef struct
{
    HANDLE hFile;
    void* BaseOfDll;
    HANDLE hFileMapping;
    void* hFileMappingView;
    wchar_t szLibraryPath[MAX_PATH];
    wchar_t szLibraryName[MAX_PATH];
} LIBRARY_ITEM_DATAW, *PLIBRARY_ITEM_DATAW;

typedef struct
{
    HANDLE hProcess;
    DWORD dwProcessId;
    HANDLE hThread;
    DWORD dwThreadId;
    HANDLE hFile;
    void* BaseOfImage;
    void* ThreadStartAddress;
    void* ThreadLocalBase;
} PROCESS_ITEM_DATA, *PPROCESS_ITEM_DATA;

typedef struct
{
    ULONG ProcessId;
    HANDLE hHandle;
} HandlerArray, *PHandlerArray;

typedef struct
{
    char PluginName[64];
    DWORD PluginMajorVersion;
    DWORD PluginMinorVersion;
    HMODULE PluginBaseAddress;
    void* TitanDebuggingCallBack;
    void* TitanRegisterPlugin;
    void* TitanReleasePlugin;
    void* TitanResetPlugin;
    bool PluginDisabled;
} PluginInformation, *PPluginInformation;

#define TEE_MAXIMUM_HOOK_SIZE 14
#define TEE_MAXIMUM_HOOK_RELOCS 7
#if defined(_WIN64)
#define TEE_MAXIMUM_HOOK_INSERT_SIZE 14
#else
#define TEE_MAXIMUM_HOOK_INSERT_SIZE 5
#endif

typedef struct HOOK_ENTRY
{
    bool IATHook;
    BYTE HookType;
    DWORD HookSize;
    void* HookAddress;
    void* RedirectionAddress;
    BYTE HookBytes[TEE_MAXIMUM_HOOK_SIZE];
    BYTE OriginalBytes[TEE_MAXIMUM_HOOK_SIZE];
    void* IATHookModuleBase;
    DWORD IATHookNameHash;
    bool HookIsEnabled;
    bool HookIsRemote;
    void* PatchedEntry;
    DWORD RelocationInfo[TEE_MAXIMUM_HOOK_RELOCS];
    int RelocationCount;
} HOOK_ENTRY, *PHOOK_ENTRY;

#define UE_DEPTH_SURFACE 0
#define UE_DEPTH_DEEP 1

#define UE_UNPACKER_CONDITION_SEARCH_FROM_EP 1

#define UE_UNPACKER_CONDITION_LOADLIBRARY 1
#define UE_UNPACKER_CONDITION_GETPROCADDRESS 2
#define UE_UNPACKER_CONDITION_ENTRYPOINTBREAK 3
#define UE_UNPACKER_CONDITION_RELOCSNAPSHOT1 4
#define UE_UNPACKER_CONDITION_RELOCSNAPSHOT2 5

#define UE_FIELD_OK 0
#define UE_FIELD_BROKEN_NON_FIXABLE 1
#define UE_FIELD_BROKEN_NON_CRITICAL 2
#define UE_FIELD_BROKEN_FIXABLE_FOR_STATIC_USE 3
#define UE_FIELD_BROKEN_BUT_CAN_BE_EMULATED 4
#define UE_FIELD_FIXABLE_NON_CRITICAL 5
#define UE_FIELD_FIXABLE_CRITICAL 6
#define UE_FIELD_NOT_PRESET 7
#define UE_FIELD_NOT_PRESET_WARNING 8

#define UE_RESULT_FILE_OK 10
#define UE_RESULT_FILE_INVALID_BUT_FIXABLE 11
#define UE_RESULT_FILE_INVALID_AND_NON_FIXABLE 12
#define UE_RESULT_FILE_INVALID_FORMAT 13

typedef struct
{
    BYTE OveralEvaluation;
    bool EvaluationTerminatedByException;
    bool FileIs64Bit;
    bool FileIsDLL;
    bool FileIsConsole;
    bool MissingDependencies;
    bool MissingDeclaredAPIs;
    BYTE SignatureMZ;
    BYTE SignaturePE;
    BYTE EntryPoint;
    BYTE ImageBase;
    BYTE SizeOfImage;
    BYTE FileAlignment;
    BYTE SectionAlignment;
    BYTE ExportTable;
    BYTE RelocationTable;
    BYTE ImportTable;
    BYTE ImportTableSection;
    BYTE ImportTableData;
    BYTE IATTable;
    BYTE TLSTable;
    BYTE LoadConfigTable;
    BYTE BoundImportTable;
    BYTE COMHeaderTable;
    BYTE ResourceTable;
    BYTE ResourceData;
    BYTE SectionTable;
} FILE_STATUS_INFO, *PFILE_STATUS_INFO;

typedef struct
{
    BYTE OveralEvaluation;
    bool FixingTerminatedByException;
    bool FileFixPerformed;
    bool StrippedRelocation;
    bool DontFixRelocations;
    DWORD OriginalRelocationTableAddress;
    DWORD OriginalRelocationTableSize;
    bool StrippedExports;
    bool DontFixExports;
    DWORD OriginalExportTableAddress;
    DWORD OriginalExportTableSize;
    bool StrippedResources;
    bool DontFixResources;
    DWORD OriginalResourceTableAddress;
    DWORD OriginalResourceTableSize;
    bool StrippedTLS;
    bool DontFixTLS;
    DWORD OriginalTLSTableAddress;
    DWORD OriginalTLSTableSize;
    bool StrippedLoadConfig;
    bool DontFixLoadConfig;
    DWORD OriginalLoadConfigTableAddress;
    DWORD OriginalLoadConfigTableSize;
    bool StrippedBoundImports;
    bool DontFixBoundImports;
    DWORD OriginalBoundImportTableAddress;
    DWORD OriginalBoundImportTableSize;
    bool StrippedIAT;
    bool DontFixIAT;
    DWORD OriginalImportAddressTableAddress;
    DWORD OriginalImportAddressTableSize;
    bool StrippedCOM;
    bool DontFixCOM;
    DWORD OriginalCOMTableAddress;
    DWORD OriginalCOMTableSize;
} FILE_FIX_INFO, *PFILE_FIX_INFO;

typedef struct DECLSPEC_ALIGN(16) _XmmRegister_t
{
    ULONGLONG Low;
    LONGLONG High;
} XmmRegister_t;

typedef struct
{
    XmmRegister_t Low; //XMM/SSE part
    XmmRegister_t High; //AVX part
} YmmRegister_t;

typedef struct
{
    BYTE    data[10];
    int     st_value;
    int     tag;
} x87FPURegister_t;

typedef struct
{
    WORD   ControlWord;
    WORD   StatusWord;
    WORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    DWORD   Cr0NpxState;
} x87FPU_t;

typedef struct
{
    ULONG_PTR cax;
    ULONG_PTR ccx;
    ULONG_PTR cdx;
    ULONG_PTR cbx;
    ULONG_PTR csp;
    ULONG_PTR cbp;
    ULONG_PTR csi;
    ULONG_PTR cdi;
#ifdef _WIN64
    ULONG_PTR r8;
    ULONG_PTR r9;
    ULONG_PTR r10;
    ULONG_PTR r11;
    ULONG_PTR r12;
    ULONG_PTR r13;
    ULONG_PTR r14;
    ULONG_PTR r15;
#endif //_WIN64
    ULONG_PTR cip;
    ULONG_PTR eflags;
    unsigned short gs;
    unsigned short fs;
    unsigned short es;
    unsigned short ds;
    unsigned short cs;
    unsigned short ss;
    ULONG_PTR dr0;
    ULONG_PTR dr1;
    ULONG_PTR dr2;
    ULONG_PTR dr3;
    ULONG_PTR dr6;
    ULONG_PTR dr7;
    BYTE RegisterArea[80];
    x87FPU_t x87fpu;
    DWORD MxCsr;
#ifdef _WIN64
    XmmRegister_t XmmRegisters[16];
    YmmRegister_t YmmRegisters[16];
#else // x86
    XmmRegister_t XmmRegisters[8];
    YmmRegister_t YmmRegisters[8];
#endif
} TITAN_ENGINE_CONTEXT_t;

#ifdef __cplusplus
extern "C"
{
#endif

// Global.Function.Declaration:
// TitanEngine.Dumper.functions:
__declspec(dllexport) bool TITCALL DumpProcess(HANDLE hProcess, LPVOID ImageBase, const char* szDumpFileName, ULONG_PTR EntryPoint);
__declspec(dllexport) bool TITCALL DumpProcessW(HANDLE hProcess, LPVOID ImageBase, const wchar_t* szDumpFileName, ULONG_PTR EntryPoint);
__declspec(dllexport) bool TITCALL DumpProcessEx(DWORD ProcessId, LPVOID ImageBase, const char* szDumpFileName, ULONG_PTR EntryPoint);
__declspec(dllexport) bool TITCALL DumpProcessExW(DWORD ProcessId, LPVOID ImageBase, const wchar_t* szDumpFileName, ULONG_PTR EntryPoint);
__declspec(dllexport) bool TITCALL DumpMemory(HANDLE hProcess, LPVOID MemoryStart, ULONG_PTR MemorySize, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpMemoryW(HANDLE hProcess, LPVOID MemoryStart, ULONG_PTR MemorySize, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpMemoryEx(DWORD ProcessId, LPVOID MemoryStart, ULONG_PTR MemorySize, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpMemoryExW(DWORD ProcessId, LPVOID MemoryStart, ULONG_PTR MemorySize, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpRegions(HANDLE hProcess, const char* szDumpFolder, bool DumpAboveImageBaseOnly);
__declspec(dllexport) bool TITCALL DumpRegionsW(HANDLE hProcess, const wchar_t* szDumpFolder, bool DumpAboveImageBaseOnly);
__declspec(dllexport) bool TITCALL DumpRegionsEx(DWORD ProcessId, const char* szDumpFolder, bool DumpAboveImageBaseOnly);
__declspec(dllexport) bool TITCALL DumpRegionsExW(DWORD ProcessId, const wchar_t* szDumpFolder, bool DumpAboveImageBaseOnly);
__declspec(dllexport) bool TITCALL DumpModule(HANDLE hProcess, LPVOID ModuleBase, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpModuleW(HANDLE hProcess, LPVOID ModuleBase, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpModuleEx(DWORD ProcessId, LPVOID ModuleBase, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL DumpModuleExW(DWORD ProcessId, LPVOID ModuleBase, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL PastePEHeader(HANDLE hProcess, LPVOID ImageBase, const char* szDebuggedFileName);
__declspec(dllexport) bool TITCALL PastePEHeaderW(HANDLE hProcess, LPVOID ImageBase, const wchar_t* szDebuggedFileName);
__declspec(dllexport) bool TITCALL ExtractSection(const char* szFileName, const char* szDumpFileName, DWORD SectionNumber);
__declspec(dllexport) bool TITCALL ExtractSectionW(const wchar_t* szFileName, const wchar_t* szDumpFileName, DWORD SectionNumber);
__declspec(dllexport) bool TITCALL ResortFileSections(const char* szFileName);
__declspec(dllexport) bool TITCALL ResortFileSectionsW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL FindOverlay(const char* szFileName, LPDWORD OverlayStart, LPDWORD OverlaySize);
__declspec(dllexport) bool TITCALL FindOverlayW(const wchar_t* szFileName, LPDWORD OverlayStart, LPDWORD OverlaySize);
__declspec(dllexport) bool TITCALL ExtractOverlay(const char* szFileName, const char* szExtactedFileName);
__declspec(dllexport) bool TITCALL ExtractOverlayW(const wchar_t* szFileName, const wchar_t* szExtactedFileName);
__declspec(dllexport) bool TITCALL AddOverlay(const char* szFileName, const char* szOverlayFileName);
__declspec(dllexport) bool TITCALL AddOverlayW(const wchar_t* szFileName, const wchar_t* szOverlayFileName);
__declspec(dllexport) bool TITCALL CopyOverlay(const char* szInFileName, const char* szOutFileName);
__declspec(dllexport) bool TITCALL CopyOverlayW(const wchar_t* szInFileName, const wchar_t* szOutFileName);
__declspec(dllexport) bool TITCALL RemoveOverlay(const char* szFileName);
__declspec(dllexport) bool TITCALL RemoveOverlayW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL MakeAllSectionsRWE(const char* szFileName);
__declspec(dllexport) bool TITCALL MakeAllSectionsRWEW(const wchar_t* szFileName);
__declspec(dllexport) long TITCALL AddNewSectionEx(const char* szFileName, const char* szSectionName, DWORD SectionSize, DWORD SectionAttributes, LPVOID SectionContent, DWORD ContentSize);
__declspec(dllexport) long TITCALL AddNewSectionExW(const wchar_t* szFileName, const char* szSectionName, DWORD SectionSize, DWORD SectionAttributes, LPVOID SectionContent, DWORD ContentSize);
__declspec(dllexport) long TITCALL AddNewSection(const char* szFileName, const char* szSectionName, DWORD SectionSize);
__declspec(dllexport) long TITCALL AddNewSectionW(const wchar_t* szFileName, const char* szSectionName, DWORD SectionSize);
__declspec(dllexport) bool TITCALL ResizeLastSection(const char* szFileName, DWORD NumberOfExpandBytes, bool AlignResizeData);
__declspec(dllexport) bool TITCALL ResizeLastSectionW(const wchar_t* szFileName, DWORD NumberOfExpandBytes, bool AlignResizeData);
__declspec(dllexport) void TITCALL SetSharedOverlay(const char* szFileName);
__declspec(dllexport) void TITCALL SetSharedOverlayW(const wchar_t* szFileName);
__declspec(dllexport) char* TITCALL GetSharedOverlay();
__declspec(dllexport) wchar_t* TITCALL GetSharedOverlayW();
__declspec(dllexport) bool TITCALL DeleteLastSection(const char* szFileName);
__declspec(dllexport) bool TITCALL DeleteLastSectionW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL DeleteLastSectionEx(const char* szFileName, DWORD NumberOfSections);
__declspec(dllexport) bool TITCALL DeleteLastSectionExW(const wchar_t* szFileName, DWORD NumberOfSections);
__declspec(dllexport) ULONG_PTR TITCALL GetPE32DataFromMappedFile(ULONG_PTR FileMapVA, DWORD WhichSection, DWORD WhichData);
__declspec(dllexport) ULONG_PTR TITCALL GetPE32Data(const char* szFileName, DWORD WhichSection, DWORD WhichData);
__declspec(dllexport) ULONG_PTR TITCALL GetPE32DataW(const wchar_t* szFileName, DWORD WhichSection, DWORD WhichData);
__declspec(dllexport) bool TITCALL GetPE32DataFromMappedFileEx(ULONG_PTR FileMapVA, LPVOID DataStorage);
__declspec(dllexport) bool TITCALL GetPE32DataEx(const char* szFileName, LPVOID DataStorage);
__declspec(dllexport) bool TITCALL GetPE32DataExW(const wchar_t* szFileName, LPVOID DataStorage);
__declspec(dllexport) bool TITCALL SetPE32DataForMappedFile(ULONG_PTR FileMapVA, DWORD WhichSection, DWORD WhichData, ULONG_PTR NewDataValue);
__declspec(dllexport) bool TITCALL SetPE32Data(const char* szFileName, DWORD WhichSection, DWORD WhichData, ULONG_PTR NewDataValue);
__declspec(dllexport) bool TITCALL SetPE32DataW(const wchar_t* szFileName, DWORD WhichSection, DWORD WhichData, ULONG_PTR NewDataValue);
__declspec(dllexport) bool TITCALL SetPE32DataForMappedFileEx(ULONG_PTR FileMapVA, LPVOID DataStorage);
__declspec(dllexport) bool TITCALL SetPE32DataEx(const char* szFileName, LPVOID DataStorage);
__declspec(dllexport) bool TITCALL SetPE32DataExW(const wchar_t* szFileName, LPVOID DataStorage);
__declspec(dllexport) long TITCALL GetPE32SectionNumberFromVA(ULONG_PTR FileMapVA, ULONG_PTR AddressToConvert);
__declspec(dllexport) ULONG_PTR TITCALL ConvertVAtoFileOffset(ULONG_PTR FileMapVA, ULONG_PTR AddressToConvert, bool ReturnType);
__declspec(dllexport) ULONG_PTR TITCALL ConvertVAtoFileOffsetEx(ULONG_PTR FileMapVA, DWORD FileSize, ULONG_PTR ImageBase, ULONG_PTR AddressToConvert, bool AddressIsRVA, bool ReturnType);
__declspec(dllexport) ULONG_PTR TITCALL ConvertFileOffsetToVA(ULONG_PTR FileMapVA, ULONG_PTR AddressToConvert, bool ReturnType);
__declspec(dllexport) ULONG_PTR TITCALL ConvertFileOffsetToVAEx(ULONG_PTR FileMapVA, DWORD FileSize, ULONG_PTR ImageBase, ULONG_PTR AddressToConvert, bool ReturnType);
__declspec(dllexport) bool TITCALL MemoryReadSafe(HANDLE hProcess, LPVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesRead);
__declspec(dllexport) bool TITCALL MemoryWriteSafe(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
// TitanEngine.Realigner.functions:
__declspec(dllexport) bool TITCALL FixHeaderCheckSum(const char* szFileName);
__declspec(dllexport) bool TITCALL FixHeaderCheckSumW(const wchar_t* szFileName);
__declspec(dllexport) long TITCALL RealignPE(ULONG_PTR FileMapVA, DWORD FileSize, DWORD RealingMode);
__declspec(dllexport) long TITCALL RealignPEEx(const char* szFileName, DWORD RealingFileSize, DWORD ForcedFileAlignment);
__declspec(dllexport) long TITCALL RealignPEExW(const wchar_t* szFileName, DWORD RealingFileSize, DWORD ForcedFileAlignment);
__declspec(dllexport) bool TITCALL WipeSection(const char* szFileName, int WipeSectionNumber, bool RemovePhysically);
__declspec(dllexport) bool TITCALL WipeSectionW(const wchar_t* szFileName, int WipeSectionNumber, bool RemovePhysically);
__declspec(dllexport) bool TITCALL IsPE32FileValidEx(const char* szFileName, DWORD CheckDepth, LPVOID FileStatusInfo);
__declspec(dllexport) bool TITCALL IsPE32FileValidExW(const wchar_t* szFileName, DWORD CheckDepth, LPVOID FileStatusInfo);
__declspec(dllexport) bool TITCALL FixBrokenPE32FileEx(const char* szFileName, LPVOID FileStatusInfo, LPVOID FileFixInfo);
__declspec(dllexport) bool TITCALL FixBrokenPE32FileExW(const wchar_t* szFileName, LPVOID FileStatusInfo, LPVOID FileFixInfo);
__declspec(dllexport) bool TITCALL IsFileDLL(const char* szFileName, ULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL IsFileDLLW(const wchar_t* szFileName, ULONG_PTR FileMapVA);
// TitanEngine.Hider.functions:
__declspec(dllexport) void* TITCALL GetPEBLocation(HANDLE hProcess);
__declspec(dllexport) void* TITCALL GetPEBLocation64(HANDLE hProcess);
__declspec(dllexport) void* TITCALL GetTEBLocation(HANDLE hThread);
__declspec(dllexport) void* TITCALL GetTEBLocation64(HANDLE hThread);
__declspec(dllexport) bool TITCALL HideDebugger(HANDLE hProcess, DWORD PatchAPILevel);
__declspec(dllexport) bool TITCALL UnHideDebugger(HANDLE hProcess, DWORD PatchAPILevel);
// TitanEngine.Relocater.functions:
__declspec(dllexport) void TITCALL RelocaterCleanup();
__declspec(dllexport) void TITCALL RelocaterInit(DWORD MemorySize, ULONG_PTR OldImageBase, ULONG_PTR NewImageBase);
__declspec(dllexport) void TITCALL RelocaterAddNewRelocation(HANDLE hProcess, ULONG_PTR RelocateAddress, DWORD RelocateState);
__declspec(dllexport) long TITCALL RelocaterEstimatedSize();
__declspec(dllexport) bool TITCALL RelocaterExportRelocation(ULONG_PTR StorePlace, DWORD StorePlaceRVA, ULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL RelocaterExportRelocationEx(const char* szFileName, const char* szSectionName);
__declspec(dllexport) bool TITCALL RelocaterExportRelocationExW(const wchar_t* szFileName, const char* szSectionName);
__declspec(dllexport) bool TITCALL RelocaterGrabRelocationTable(HANDLE hProcess, ULONG_PTR MemoryStart, DWORD MemorySize);
__declspec(dllexport) bool TITCALL RelocaterGrabRelocationTableEx(HANDLE hProcess, ULONG_PTR MemoryStart, ULONG_PTR MemorySize, DWORD NtSizeOfImage);
__declspec(dllexport) bool TITCALL RelocaterMakeSnapshot(HANDLE hProcess, const char* szSaveFileName, LPVOID MemoryStart, ULONG_PTR MemorySize);
__declspec(dllexport) bool TITCALL RelocaterMakeSnapshotW(HANDLE hProcess, const wchar_t* szSaveFileName, LPVOID MemoryStart, ULONG_PTR MemorySize);
__declspec(dllexport) bool TITCALL RelocaterCompareTwoSnapshots(HANDLE hProcess, ULONG_PTR LoadedImageBase, ULONG_PTR NtSizeOfImage, const char* szDumpFile1, const char* szDumpFile2, ULONG_PTR MemStart);
__declspec(dllexport) bool TITCALL RelocaterCompareTwoSnapshotsW(HANDLE hProcess, ULONG_PTR LoadedImageBase, ULONG_PTR NtSizeOfImage, const wchar_t* szDumpFile1, const wchar_t* szDumpFile2, ULONG_PTR MemStart);
__declspec(dllexport) bool TITCALL RelocaterChangeFileBase(const char* szFileName, ULONG_PTR NewImageBase);
__declspec(dllexport) bool TITCALL RelocaterChangeFileBaseW(const wchar_t* szFileName, ULONG_PTR NewImageBase);
__declspec(dllexport) bool TITCALL RelocaterRelocateMemoryBlock(ULONG_PTR FileMapVA, ULONG_PTR MemoryLocation, void* RelocateMemory, DWORD RelocateMemorySize, ULONG_PTR CurrentLoadedBase, ULONG_PTR RelocateBase);
__declspec(dllexport) bool TITCALL RelocaterWipeRelocationTable(const char* szFileName);
__declspec(dllexport) bool TITCALL RelocaterWipeRelocationTableW(const wchar_t* szFileName);
// TitanEngine.Resourcer.functions:
__declspec(dllexport) ULONG_PTR TITCALL ResourcerLoadFileForResourceUse(const char* szFileName);
__declspec(dllexport) ULONG_PTR TITCALL ResourcerLoadFileForResourceUseW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL ResourcerFreeLoadedFile(LPVOID LoadedFileBase);
__declspec(dllexport) bool TITCALL ResourcerExtractResourceFromFileEx(ULONG_PTR FileMapVA, const char* szResourceType, const char* szResourceName, const char* szExtractedFileName);
__declspec(dllexport) bool TITCALL ResourcerExtractResourceFromFile(const char* szFileName, const char* szResourceType, const char* szResourceName, const char* szExtractedFileName);
__declspec(dllexport) bool TITCALL ResourcerExtractResourceFromFileW(const wchar_t* szFileName, char* szResourceType, const char* szResourceName, const char* szExtractedFileName);
__declspec(dllexport) bool TITCALL ResourcerFindResource(const char* szFileName, const char* szResourceType, DWORD ResourceType, const char* szResourceName, DWORD ResourceName, DWORD ResourceLanguage, PULONG_PTR pResourceData, LPDWORD pResourceSize);
__declspec(dllexport) bool TITCALL ResourcerFindResourceW(const wchar_t* szFileName, const wchar_t* szResourceType, DWORD ResourceType, const wchar_t* szResourceName, DWORD ResourceName, DWORD ResourceLanguage, PULONG_PTR pResourceData, LPDWORD pResourceSize);
__declspec(dllexport) bool TITCALL ResourcerFindResourceEx(ULONG_PTR FileMapVA, DWORD FileSize, const wchar_t* szResourceType, DWORD ResourceType, const wchar_t* szResourceName, DWORD ResourceName, DWORD ResourceLanguage, PULONG_PTR pResourceData, LPDWORD pResourceSize);
__declspec(dllexport) void TITCALL ResourcerEnumerateResource(const char* szFileName, void* CallBack);
__declspec(dllexport) void TITCALL ResourcerEnumerateResourceW(const wchar_t* szFileName, void* CallBack);
__declspec(dllexport) void TITCALL ResourcerEnumerateResourceEx(ULONG_PTR FileMapVA, DWORD FileSize, void* CallBack);
// TitanEngine.Threader.functions:
__declspec(dllexport) bool TITCALL ThreaderImportRunningThreadData(DWORD ProcessId);
__declspec(dllexport) void* TITCALL ThreaderGetThreadInfo(HANDLE hThread, DWORD ThreadId);
__declspec(dllexport) void TITCALL ThreaderEnumThreadInfo(void* EnumCallBack);
__declspec(dllexport) bool TITCALL ThreaderPauseThread(HANDLE hThread);
__declspec(dllexport) bool TITCALL ThreaderResumeThread(HANDLE hThread);
__declspec(dllexport) bool TITCALL ThreaderTerminateThread(HANDLE hThread, DWORD ThreadExitCode);
__declspec(dllexport) bool TITCALL ThreaderPauseAllThreads(bool LeaveMainRunning);
__declspec(dllexport) bool TITCALL ThreaderResumeAllThreads(bool LeaveMainPaused);
__declspec(dllexport) bool TITCALL ThreaderPauseProcess();
__declspec(dllexport) bool TITCALL ThreaderResumeProcess();
__declspec(dllexport) ULONG_PTR TITCALL ThreaderCreateRemoteThread(ULONG_PTR ThreadStartAddress, bool AutoCloseTheHandle, LPVOID ThreadPassParameter, LPDWORD ThreadId);
__declspec(dllexport) bool TITCALL ThreaderInjectAndExecuteCode(LPVOID InjectCode, DWORD StartDelta, DWORD InjectSize);
__declspec(dllexport) ULONG_PTR TITCALL ThreaderCreateRemoteThreadEx(HANDLE hProcess, ULONG_PTR ThreadStartAddress, bool AutoCloseTheHandle, LPVOID ThreadPassParameter, LPDWORD ThreadId);
__declspec(dllexport) bool TITCALL ThreaderInjectAndExecuteCodeEx(HANDLE hProcess, LPVOID InjectCode, DWORD StartDelta, DWORD InjectSize);
__declspec(dllexport) void TITCALL ThreaderSetCallBackForNextExitThreadEvent(LPVOID exitThreadCallBack);
__declspec(dllexport) bool TITCALL ThreaderIsThreadStillRunning(HANDLE hThread);
__declspec(dllexport) bool TITCALL ThreaderIsThreadActive(HANDLE hThread);
__declspec(dllexport) bool TITCALL ThreaderIsAnyThreadActive();
__declspec(dllexport) bool TITCALL ThreaderExecuteOnlyInjectedThreads();
__declspec(dllexport) ULONG_PTR TITCALL ThreaderGetOpenHandleForThread(DWORD ThreadId);
__declspec(dllexport) bool TITCALL ThreaderIsExceptionInMainThread();
// TitanEngine.Debugger.functions:
__declspec(dllexport) void* TITCALL StaticDisassembleEx(ULONG_PTR DisassmStart, LPVOID DisassmAddress);
__declspec(dllexport) void* TITCALL StaticDisassemble(LPVOID DisassmAddress);
__declspec(dllexport) void* TITCALL DisassembleEx(HANDLE hProcess, LPVOID DisassmAddress, bool ReturnInstructionType);
__declspec(dllexport) void* TITCALL Disassemble(LPVOID DisassmAddress);
__declspec(dllexport) long TITCALL StaticLengthDisassemble(LPVOID DisassmAddress);
__declspec(dllexport) long TITCALL LengthDisassembleEx(HANDLE hProcess, LPVOID DisassmAddress);
__declspec(dllexport) long TITCALL LengthDisassemble(LPVOID DisassmAddress);
__declspec(dllexport) void* TITCALL InitDebug(char* szFileName, char* szCommandLine, char* szCurrentFolder);
__declspec(dllexport) void* TITCALL InitDebugW(const wchar_t* szFileName, const wchar_t* szCommandLine, const wchar_t* szCurrentFolder);
__declspec(dllexport) void* TITCALL InitDebugEx(const char* szFileName, const char* szCommandLine, const char* szCurrentFolder, LPVOID EntryCallBack);
__declspec(dllexport) void* TITCALL InitDebugExW(const wchar_t* szFileName, const wchar_t* szCommandLine, const wchar_t* szCurrentFolder, LPVOID EntryCallBack);
__declspec(dllexport) void* TITCALL InitDLLDebug(const char* szFileName, bool ReserveModuleBase, const char* szCommandLine, const char* szCurrentFolder, LPVOID EntryCallBack);
__declspec(dllexport) void* TITCALL InitDLLDebugW(const wchar_t* szFileName, bool ReserveModuleBase, const wchar_t* szCommandLine, const wchar_t* szCurrentFolder, LPVOID EntryCallBack);
__declspec(dllexport) bool TITCALL StopDebug();
__declspec(dllexport) void TITCALL SetBPXOptions(long DefaultBreakPointType);
__declspec(dllexport) bool TITCALL IsBPXEnabled(ULONG_PTR bpxAddress);
__declspec(dllexport) bool TITCALL EnableBPX(ULONG_PTR bpxAddress);
__declspec(dllexport) bool TITCALL DisableBPX(ULONG_PTR bpxAddress);
__declspec(dllexport) bool TITCALL SetBPX(ULONG_PTR bpxAddress, DWORD bpxType, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL DeleteBPX(ULONG_PTR bpxAddress);
__declspec(dllexport) bool TITCALL SafeDeleteBPX(ULONG_PTR bpxAddress);
__declspec(dllexport) bool TITCALL SetAPIBreakPoint(const char* szDLLName, const char* szAPIName, DWORD bpxType, DWORD bpxPlace, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL DeleteAPIBreakPoint(const char* szDLLName, const char* szAPIName, DWORD bpxPlace);
__declspec(dllexport) bool TITCALL SafeDeleteAPIBreakPoint(const char* szDLLName, const char* szAPIName, DWORD bpxPlace);
__declspec(dllexport) bool TITCALL SetMemoryBPX(ULONG_PTR MemoryStart, SIZE_T SizeOfMemory, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL SetMemoryBPXEx(ULONG_PTR MemoryStart, SIZE_T SizeOfMemory, DWORD BreakPointType, bool RestoreOnHit, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL RemoveMemoryBPX(ULONG_PTR MemoryStart, SIZE_T SizeOfMemory);
__declspec(dllexport) bool TITCALL GetContextFPUDataEx(HANDLE hActiveThread, void* FPUSaveArea);
__declspec(dllexport) void TITCALL Getx87FPURegisters(x87FPURegister_t x87FPURegisters[8], TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) void TITCALL GetMMXRegisters(uint64_t mmx[8], TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) bool TITCALL GetFullContextDataEx(HANDLE hActiveThread, TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) bool TITCALL SetFullContextDataEx(HANDLE hActiveThread, TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) ULONG_PTR TITCALL GetContextDataEx(HANDLE hActiveThread, DWORD IndexOfRegister);
__declspec(dllexport) ULONG_PTR TITCALL GetContextData(DWORD IndexOfRegister);
__declspec(dllexport) bool TITCALL SetContextFPUDataEx(HANDLE hActiveThread, void* FPUSaveArea);
__declspec(dllexport) bool TITCALL SetContextDataEx(HANDLE hActiveThread, DWORD IndexOfRegister, ULONG_PTR NewRegisterValue);
__declspec(dllexport) bool TITCALL SetContextData(DWORD IndexOfRegister, ULONG_PTR NewRegisterValue);
__declspec(dllexport) bool TITCALL GetAVXContext(HANDLE hActiveThread, TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) bool TITCALL SetAVXContext(HANDLE hActiveThread, TITAN_ENGINE_CONTEXT_t* titcontext);
__declspec(dllexport) void TITCALL ClearExceptionNumber();
__declspec(dllexport) long TITCALL CurrentExceptionNumber();
__declspec(dllexport) bool TITCALL MatchPatternEx(HANDLE hProcess, void* MemoryToCheck, int SizeOfMemoryToCheck, void* PatternToMatch, int SizeOfPatternToMatch, PBYTE WildCard);
__declspec(dllexport) bool TITCALL MatchPattern(void* MemoryToCheck, int SizeOfMemoryToCheck, void* PatternToMatch, int SizeOfPatternToMatch, PBYTE WildCard);
__declspec(dllexport) ULONG_PTR TITCALL FindEx(HANDLE hProcess, LPVOID MemoryStart, DWORD MemorySize, LPVOID SearchPattern, DWORD PatternSize, LPBYTE WildCard);
extern "C" __declspec(dllexport) ULONG_PTR TITCALL Find(LPVOID MemoryStart, DWORD MemorySize, LPVOID SearchPattern, DWORD PatternSize, LPBYTE WildCard);
__declspec(dllexport) bool TITCALL FillEx(HANDLE hProcess, LPVOID MemoryStart, DWORD MemorySize, PBYTE FillByte);
__declspec(dllexport) bool TITCALL Fill(LPVOID MemoryStart, DWORD MemorySize, PBYTE FillByte);
__declspec(dllexport) bool TITCALL PatchEx(HANDLE hProcess, LPVOID MemoryStart, DWORD MemorySize, LPVOID ReplacePattern, DWORD ReplaceSize, bool AppendNOP, bool PrependNOP);
__declspec(dllexport) bool TITCALL Patch(LPVOID MemoryStart, DWORD MemorySize, LPVOID ReplacePattern, DWORD ReplaceSize, bool AppendNOP, bool PrependNOP);
__declspec(dllexport) bool TITCALL ReplaceEx(HANDLE hProcess, LPVOID MemoryStart, DWORD MemorySize, LPVOID SearchPattern, DWORD PatternSize, DWORD NumberOfRepetitions, LPVOID ReplacePattern, DWORD ReplaceSize, PBYTE WildCard);
__declspec(dllexport) bool TITCALL Replace(LPVOID MemoryStart, DWORD MemorySize, LPVOID SearchPattern, DWORD PatternSize, DWORD NumberOfRepetitions, LPVOID ReplacePattern, DWORD ReplaceSize, PBYTE WildCard);
__declspec(dllexport) void* TITCALL GetDebugData();
__declspec(dllexport) void* TITCALL GetTerminationData();
__declspec(dllexport) long TITCALL GetExitCode();
__declspec(dllexport) ULONG_PTR TITCALL GetDebuggedDLLBaseAddress();
__declspec(dllexport) ULONG_PTR TITCALL GetDebuggedFileBaseAddress();
__declspec(dllexport) bool TITCALL GetRemoteString(HANDLE hProcess, LPVOID StringAddress, LPVOID StringStorage, int MaximumStringSize);
__declspec(dllexport) ULONG_PTR TITCALL GetFunctionParameter(HANDLE hProcess, DWORD FunctionType, DWORD ParameterNumber, DWORD ParameterType);
__declspec(dllexport) ULONG_PTR TITCALL GetJumpDestinationEx(HANDLE hProcess, ULONG_PTR InstructionAddress, bool JustJumps);
__declspec(dllexport) ULONG_PTR TITCALL GetJumpDestination(HANDLE hProcess, ULONG_PTR InstructionAddress);
__declspec(dllexport) bool TITCALL IsJumpGoingToExecuteEx(HANDLE hProcess, HANDLE hThread, ULONG_PTR InstructionAddress, ULONG_PTR RegFlags);
__declspec(dllexport) bool TITCALL IsJumpGoingToExecute();
__declspec(dllexport) void TITCALL SetCustomHandler(DWORD ExceptionId, LPVOID CallBack);
__declspec(dllexport) void TITCALL ForceClose();
__declspec(dllexport) void TITCALL StepInto(LPVOID traceCallBack);
__declspec(dllexport) void TITCALL StepOver(LPVOID traceCallBack);
__declspec(dllexport) void TITCALL StepOut(LPVOID StepOut, bool StepFinal);
__declspec(dllexport) void TITCALL SingleStep(DWORD StepCount, LPVOID StepCallBack);
__declspec(dllexport) bool TITCALL GetUnusedHardwareBreakPointRegister(LPDWORD RegisterIndex);
__declspec(dllexport) bool TITCALL SetHardwareBreakPointEx(HANDLE hActiveThread, ULONG_PTR bpxAddress, DWORD IndexOfRegister, DWORD bpxType, DWORD bpxSize, LPVOID bpxCallBack, LPDWORD IndexOfSelectedRegister);
__declspec(dllexport) bool TITCALL SetHardwareBreakPoint(ULONG_PTR bpxAddress, DWORD IndexOfRegister, DWORD bpxType, DWORD bpxSize, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL DeleteHardwareBreakPoint(DWORD IndexOfRegister);
__declspec(dllexport) bool TITCALL RemoveAllBreakPoints(DWORD RemoveOption);
__declspec(dllexport) PROCESS_INFORMATION* TITCALL TitanGetProcessInformation();
__declspec(dllexport) STARTUPINFOW* TITCALL TitanGetStartupInformation();
__declspec(dllexport) void TITCALL DebugLoop();
__declspec(dllexport) void TITCALL SetDebugLoopTimeOut(DWORD TimeOut);
__declspec(dllexport) void TITCALL SetNextDbgContinueStatus(DWORD SetDbgCode);
__declspec(dllexport) bool TITCALL AttachDebugger(DWORD ProcessId, bool KillOnExit, LPVOID DebugInfo, LPVOID CallBack);
__declspec(dllexport) bool TITCALL DetachDebugger(DWORD ProcessId);
__declspec(dllexport) bool TITCALL DetachDebuggerEx(DWORD ProcessId);
__declspec(dllexport) void TITCALL DebugLoopEx(DWORD TimeOut);
__declspec(dllexport) void TITCALL AutoDebugEx(const char* szFileName, bool ReserveModuleBase, const char* szCommandLine, const char* szCurrentFolder, DWORD TimeOut, LPVOID EntryCallBack);
__declspec(dllexport) void TITCALL AutoDebugExW(const wchar_t* szFileName, bool ReserveModuleBase, const wchar_t* szCommandLine, const wchar_t* szCurrentFolder, DWORD TimeOut, LPVOID EntryCallBack);
__declspec(dllexport) bool TITCALL IsFileBeingDebugged();
__declspec(dllexport) void TITCALL SetErrorModel(bool DisplayErrorMessages);
// TitanEngine.FindOEP.functions:
__declspec(dllexport) void TITCALL FindOEPInit();
__declspec(dllexport) bool TITCALL FindOEPGenerically(const char* szFileName, LPVOID TraceInitCallBack, LPVOID CallBack);
__declspec(dllexport) bool TITCALL FindOEPGenericallyW(const wchar_t* szFileName, LPVOID TraceInitCallBack, LPVOID CallBack);
// TitanEngine.Importer.functions:
__declspec(dllexport) void TITCALL ImporterAddNewDll(const char* szDLLName, ULONG_PTR FirstThunk);
__declspec(dllexport) void TITCALL ImporterAddNewAPI(const char* szAPIName, ULONG_PTR ThunkValue);
__declspec(dllexport) void TITCALL ImporterAddNewOrdinalAPI(ULONG_PTR OrdinalNumber, ULONG_PTR ThunkValue);
__declspec(dllexport) long TITCALL ImporterGetAddedDllCount();
__declspec(dllexport) long TITCALL ImporterGetAddedAPICount();
__declspec(dllexport) bool TITCALL ImporterExportIAT(ULONG_PTR StorePlace, ULONG_PTR FileMapVA, HANDLE hFileMap);
__declspec(dllexport) long TITCALL ImporterEstimatedSize();
__declspec(dllexport) bool TITCALL ImporterExportIATEx(const char* szDumpFileName, const char* szExportFileName, const char* szSectionName);
__declspec(dllexport) bool TITCALL ImporterExportIATExW(const wchar_t* szDumpFileName, const wchar_t* szExportFileName, const wchar_t* szSectionName = L".RL!TEv2");
__declspec(dllexport) ULONG_PTR TITCALL ImporterFindAPIWriteLocation(const char* szAPIName);
__declspec(dllexport) ULONG_PTR TITCALL ImporterFindOrdinalAPIWriteLocation(ULONG_PTR OrdinalNumber);
__declspec(dllexport) ULONG_PTR TITCALL ImporterFindAPIByWriteLocation(ULONG_PTR APIWriteLocation);
__declspec(dllexport) ULONG_PTR TITCALL ImporterFindDLLByWriteLocation(ULONG_PTR APIWriteLocation);
__declspec(dllexport) void* TITCALL ImporterGetDLLName(ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetDLLNameW(ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetAPIName(ULONG_PTR APIAddress);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetAPIOrdinalNumber(ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetAPINameEx(ULONG_PTR APIAddress, ULONG_PTR DLLBasesList);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetRemoteAPIAddress(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetRemoteAPIAddressEx(const char* szDLLName, const char* szAPIName);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetLocalAPIAddress(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetDLLNameFromDebugee(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetDLLNameFromDebugeeW(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetAPINameFromDebugee(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetAPIOrdinalNumberFromDebugee(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) long TITCALL ImporterGetDLLIndexEx(ULONG_PTR APIAddress, ULONG_PTR DLLBasesList);
__declspec(dllexport) long TITCALL ImporterGetDLLIndex(HANDLE hProcess, ULONG_PTR APIAddress, ULONG_PTR DLLBasesList);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetRemoteDLLBase(HANDLE hProcess, HMODULE LocalModuleBase);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetRemoteDLLBaseEx(HANDLE hProcess, const char* szModuleName);
__declspec(dllexport) void* TITCALL ImporterGetRemoteDLLBaseExW(HANDLE hProcess, const wchar_t* szModuleName);
__declspec(dllexport) bool TITCALL ImporterIsForwardedAPI(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetForwardedAPIName(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetForwardedDLLName(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) long TITCALL ImporterGetForwardedDLLIndex(HANDLE hProcess, ULONG_PTR APIAddress, ULONG_PTR DLLBasesList);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetForwardedAPIOrdinalNumber(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) ULONG_PTR TITCALL ImporterGetNearestAPIAddress(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) void* TITCALL ImporterGetNearestAPIName(HANDLE hProcess, ULONG_PTR APIAddress);
__declspec(dllexport) bool TITCALL ImporterCopyOriginalIAT(const char* szOriginalFile, const char* szDumpFile);
__declspec(dllexport) bool TITCALL ImporterCopyOriginalIATW(const wchar_t* szOriginalFile, const wchar_t* szDumpFile);
__declspec(dllexport) bool TITCALL ImporterLoadImportTable(const char* szFileName);
__declspec(dllexport) bool TITCALL ImporterLoadImportTableW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL ImporterMoveOriginalIAT(const char* szOriginalFile, const char* szDumpFile, const char* szSectionName);
__declspec(dllexport) bool TITCALL ImporterMoveOriginalIATW(const wchar_t* szOriginalFile, const wchar_t* szDumpFile, const char* szSectionName);
__declspec(dllexport) void TITCALL ImporterAutoSearchIAT(DWORD ProcessId, const char* szFileName, ULONG_PTR SearchStart, LPVOID pIATStart, LPVOID pIATSize);
__declspec(dllexport) void TITCALL ImporterAutoSearchIATW(DWORD ProcessIds, const wchar_t* szFileName, ULONG_PTR SearchStart, LPVOID pIATStart, LPVOID pIATSize);
__declspec(dllexport) void TITCALL ImporterAutoSearchIATEx(DWORD ProcessId, ULONG_PTR ImageBase, ULONG_PTR SearchStart, LPVOID pIATStart, LPVOID pIATSize);
__declspec(dllexport) void TITCALL ImporterEnumAddedData(LPVOID EnumCallBack);
__declspec(dllexport) long TITCALL ImporterAutoFixIATEx(DWORD ProcessId, const char* szDumpedFile, const char* szSectionName, bool DumpRunningProcess, bool RealignFile, ULONG_PTR EntryPointAddress, ULONG_PTR ImageBase, ULONG_PTR SearchStart, bool TryAutoFix, bool FixEliminations, LPVOID UnknownPointerFixCallback);
__declspec(dllexport) long TITCALL ImporterAutoFixIATExW(DWORD ProcessId, const wchar_t* szDumpedFile, const wchar_t* szSectionName, bool DumpRunningProcess, bool RealignFile, ULONG_PTR EntryPointAddress, ULONG_PTR ImageBase, ULONG_PTR SearchStart,  bool TryAutoFix, bool FixEliminations, LPVOID UnknownPointerFixCallback);
__declspec(dllexport) long TITCALL ImporterAutoFixIAT(DWORD ProcessId, const char* szDumpedFile, ULONG_PTR SearchStart);
__declspec(dllexport) long TITCALL ImporterAutoFixIATW(DWORD ProcessId, const wchar_t* szDumpedFile, ULONG_PTR SearchStart);
__declspec(dllexport) bool TITCALL ImporterDeleteAPI(DWORD_PTR apiAddr);
// Global.Engine.Hook.functions:
__declspec(dllexport) bool TITCALL HooksSafeTransitionEx(LPVOID HookAddressArray, int NumberOfHooks, bool TransitionStart);
__declspec(dllexport) bool TITCALL HooksSafeTransition(LPVOID HookAddress, bool TransitionStart);
__declspec(dllexport) bool TITCALL HooksIsAddressRedirected(LPVOID HookAddress);
__declspec(dllexport) void* TITCALL HooksGetTrampolineAddress(LPVOID HookAddress);
__declspec(dllexport) void* TITCALL HooksGetHookEntryDetails(LPVOID HookAddress);
__declspec(dllexport) bool TITCALL HooksInsertNewRedirection(LPVOID HookAddress, LPVOID RedirectTo, int HookType);
__declspec(dllexport) bool TITCALL HooksInsertNewIATRedirectionEx(ULONG_PTR FileMapVA, ULONG_PTR LoadedModuleBase, const char* szHookFunction, LPVOID RedirectTo);
__declspec(dllexport) bool TITCALL HooksInsertNewIATRedirection(const char* szModuleName, const char* szHookFunction, LPVOID RedirectTo);
__declspec(dllexport) bool TITCALL HooksRemoveRedirection(LPVOID HookAddress, bool RemoveAll);
__declspec(dllexport) bool TITCALL HooksRemoveRedirectionsForModule(HMODULE ModuleBase);
__declspec(dllexport) bool TITCALL HooksRemoveIATRedirection(const char* szModuleName, const char* szHookFunction, bool RemoveAll);
__declspec(dllexport) bool TITCALL HooksDisableRedirection(LPVOID HookAddress, bool DisableAll);
__declspec(dllexport) bool TITCALL HooksDisableRedirectionsForModule(HMODULE ModuleBase);
__declspec(dllexport) bool TITCALL HooksDisableIATRedirection(const char* szModuleName, const char* szHookFunction, bool DisableAll);
__declspec(dllexport) bool TITCALL HooksEnableRedirection(LPVOID HookAddress, bool EnableAll);
__declspec(dllexport) bool TITCALL HooksEnableRedirectionsForModule(HMODULE ModuleBase);
__declspec(dllexport) bool TITCALL HooksEnableIATRedirection(const char* szModuleName, const char* szHookFunction, bool EnableAll);
__declspec(dllexport) void TITCALL HooksScanModuleMemory(HMODULE ModuleBase, LPVOID CallBack);
__declspec(dllexport) void TITCALL HooksScanEntireProcessMemory(LPVOID CallBack);
__declspec(dllexport) void TITCALL HooksScanEntireProcessMemoryEx();
// TitanEngine.Tracer.functions:
__declspec(dllexport) void TITCALL TracerInit();
__declspec(dllexport) ULONG_PTR TITCALL TracerLevel1(HANDLE hProcess, ULONG_PTR AddressToTrace);
__declspec(dllexport) ULONG_PTR TITCALL HashTracerLevel1(HANDLE hProcess, ULONG_PTR AddressToTrace, DWORD InputNumberOfInstructions);
__declspec(dllexport) long TITCALL TracerDetectRedirection(HANDLE hProcess, ULONG_PTR AddressToTrace);
__declspec(dllexport) ULONG_PTR TITCALL TracerFixKnownRedirection(HANDLE hProcess, ULONG_PTR AddressToTrace, DWORD RedirectionId);
__declspec(dllexport) ULONG_PTR TITCALL TracerFixRedirectionViaModule(HMODULE hModuleHandle, HANDLE hProcess, ULONG_PTR AddressToTrace, DWORD IdParameter);
__declspec(dllexport) long TITCALL TracerFixRedirectionViaImpRecPlugin(HANDLE hProcess, const char* szPluginName, ULONG_PTR AddressToTrace);
// TitanEngine.Exporter.functions:
__declspec(dllexport) void TITCALL ExporterCleanup();
__declspec(dllexport) void TITCALL ExporterSetImageBase(ULONG_PTR ImageBase);
__declspec(dllexport) void TITCALL ExporterInit(DWORD MemorySize, ULONG_PTR ImageBase, DWORD ExportOrdinalBase, const char* szExportModuleName);
__declspec(dllexport) bool TITCALL ExporterAddNewExport(const char* szExportName, DWORD ExportRelativeAddress);
__declspec(dllexport) bool TITCALL ExporterAddNewOrdinalExport(DWORD OrdinalNumber, DWORD ExportRelativeAddress);
__declspec(dllexport) long TITCALL ExporterGetAddedExportCount();
__declspec(dllexport) long TITCALL ExporterEstimatedSize();
__declspec(dllexport) bool TITCALL ExporterBuildExportTable(ULONG_PTR StorePlace, ULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL ExporterBuildExportTableEx(const char* szExportFileName, const char* szSectionName);
__declspec(dllexport) bool TITCALL ExporterBuildExportTableExW(const wchar_t* szExportFileName, const char* szSectionName);
__declspec(dllexport) bool TITCALL ExporterLoadExportTable(const char* szFileName);
__declspec(dllexport) bool TITCALL ExporterLoadExportTableW(const wchar_t* szFileName);
// TitanEngine.Librarian.functions:
__declspec(dllexport) bool TITCALL LibrarianSetBreakPoint(const char* szLibraryName, DWORD bpxType, bool SingleShoot, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL LibrarianRemoveBreakPoint(const char* szLibraryName, DWORD bpxType);
__declspec(dllexport) void* TITCALL LibrarianGetLibraryInfo(const char* szLibraryName);
__declspec(dllexport) void* TITCALL LibrarianGetLibraryInfoW(const wchar_t* szLibraryName);
__declspec(dllexport) void* TITCALL LibrarianGetLibraryInfoEx(void* BaseOfDll);
__declspec(dllexport) void* TITCALL LibrarianGetLibraryInfoExW(void* BaseOfDll);
__declspec(dllexport) void TITCALL LibrarianEnumLibraryInfo(void* EnumCallBack);
__declspec(dllexport) void TITCALL LibrarianEnumLibraryInfoW(void* EnumCallBack);
// TitanEngine.Process.functions:
__declspec(dllexport) long TITCALL GetActiveProcessId(const char* szImageName);
__declspec(dllexport) long TITCALL GetActiveProcessIdW(const wchar_t* szImageName);
__declspec(dllexport) void TITCALL EnumProcessesWithLibrary(const char* szLibraryName, void* EnumFunction);
__declspec(dllexport) HANDLE TITCALL TitanOpenProcess(DWORD dwDesiredAccess, bool bInheritHandle, DWORD dwProcessId);
// TitanEngine.TLSFixer.functions:
__declspec(dllexport) bool TITCALL TLSBreakOnCallBack(LPVOID ArrayOfCallBacks, DWORD NumberOfCallBacks, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL TLSGrabCallBackData(const char* szFileName, LPVOID ArrayOfCallBacks, LPDWORD NumberOfCallBacks);
__declspec(dllexport) bool TITCALL TLSGrabCallBackDataW(const wchar_t* szFileName, LPVOID ArrayOfCallBacks, LPDWORD NumberOfCallBacks);
__declspec(dllexport) bool TITCALL TLSBreakOnCallBackEx(const char* szFileName, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL TLSBreakOnCallBackExW(const wchar_t* szFileName, LPVOID bpxCallBack);
__declspec(dllexport) bool TITCALL TLSRemoveCallback(const char* szFileName);
__declspec(dllexport) bool TITCALL TLSRemoveCallbackW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL TLSRemoveTable(const char* szFileName);
__declspec(dllexport) bool TITCALL TLSRemoveTableW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL TLSBackupData(const char* szFileName);
__declspec(dllexport) bool TITCALL TLSBackupDataW(const wchar_t* szFileName);
__declspec(dllexport) bool TITCALL TLSRestoreData();
__declspec(dllexport) bool TITCALL TLSBuildNewTable(ULONG_PTR FileMapVA, ULONG_PTR StorePlace, ULONG_PTR StorePlaceRVA, LPVOID ArrayOfCallBacks, DWORD NumberOfCallBacks);
__declspec(dllexport) bool TITCALL TLSBuildNewTableEx(const char* szFileName, const char* szSectionName, LPVOID ArrayOfCallBacks, DWORD NumberOfCallBacks);
__declspec(dllexport) bool TITCALL TLSBuildNewTableExW(const wchar_t* szFileName, const char* szSectionName, LPVOID ArrayOfCallBacks, DWORD NumberOfCallBacks);
// TitanEngine.TranslateName.functions:
__declspec(dllexport) void* TITCALL TranslateNativeName(const char* szNativeName);
__declspec(dllexport) void* TITCALL TranslateNativeNameW(const wchar_t* szNativeName);
// TitanEngine.Handler.functions:
__declspec(dllexport) long TITCALL HandlerGetActiveHandleCount(DWORD ProcessId);
__declspec(dllexport) bool TITCALL HandlerIsHandleOpen(DWORD ProcessId, HANDLE hHandle);
__declspec(dllexport) void* TITCALL HandlerGetHandleName(HANDLE hProcess, DWORD ProcessId, HANDLE hHandle, bool TranslateName);
__declspec(dllexport) void* TITCALL HandlerGetHandleNameW(HANDLE hProcess, DWORD ProcessId, HANDLE hHandle, bool TranslateName);
__declspec(dllexport) long TITCALL HandlerEnumerateOpenHandles(DWORD ProcessId, LPVOID HandleBuffer, DWORD MaxHandleCount);
__declspec(dllexport) ULONG_PTR TITCALL HandlerGetHandleDetails(HANDLE hProcess, DWORD ProcessId, HANDLE hHandle, DWORD InformationReturn);
__declspec(dllexport) bool TITCALL HandlerCloseRemoteHandle(HANDLE hProcess, HANDLE hHandle);
__declspec(dllexport) long TITCALL HandlerEnumerateLockHandles(char* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated, LPVOID HandleDataBuffer, DWORD MaxHandleCount);
__declspec(dllexport) long TITCALL HandlerEnumerateLockHandlesW(const wchar_t* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated, LPVOID HandleDataBuffer, DWORD MaxHandleCount);
__declspec(dllexport) bool TITCALL HandlerCloseAllLockHandles(const char* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated);
__declspec(dllexport) bool TITCALL HandlerCloseAllLockHandlesW(const wchar_t* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated);
__declspec(dllexport) bool TITCALL HandlerIsFileLocked(const char* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated);
__declspec(dllexport) bool TITCALL HandlerIsFileLockedW(const wchar_t* szFileOrFolderName, bool NameIsFolder, bool NameIsTranslated);
// TitanEngine.Handler[Mutex].functions:
__declspec(dllexport) long TITCALL HandlerEnumerateOpenMutexes(HANDLE hProcess, DWORD ProcessId, LPVOID HandleBuffer, DWORD MaxHandleCount);
__declspec(dllexport) ULONG_PTR TITCALL HandlerGetOpenMutexHandle(HANDLE hProcess, DWORD ProcessId, const char* szMutexString);
__declspec(dllexport) ULONG_PTR TITCALL HandlerGetOpenMutexHandleW(HANDLE hProcess, DWORD ProcessId, const wchar_t* szMutexString);
__declspec(dllexport) long TITCALL HandlerGetProcessIdWhichCreatedMutex(const char* szMutexString);
__declspec(dllexport) long TITCALL HandlerGetProcessIdWhichCreatedMutexW(const wchar_t* szMutexString);
// TitanEngine.Injector.functions:
__declspec(dllexport) bool TITCALL RemoteLoadLibrary(HANDLE hProcess, const char* szLibraryFile, bool WaitForThreadExit);
__declspec(dllexport) bool TITCALL RemoteLoadLibraryW(HANDLE hProcess, const wchar_t* szLibraryFile, bool WaitForThreadExit);
__declspec(dllexport) bool TITCALL RemoteFreeLibrary(HANDLE hProcess, HMODULE hModule, const char* szLibraryFile, bool WaitForThreadExit);
__declspec(dllexport) bool TITCALL RemoteFreeLibraryW(HANDLE hProcess, HMODULE hModule, const wchar_t* szLibraryFile, bool WaitForThreadExit);
__declspec(dllexport) bool TITCALL RemoteExitProcess(HANDLE hProcess, DWORD ExitCode);
// TitanEngine.StaticUnpacker.functions:
__declspec(dllexport) bool TITCALL StaticFileLoad(const char* szFileName, DWORD DesiredAccess, bool SimulateLoad, LPHANDLE FileHandle, LPDWORD LoadedSize, LPHANDLE FileMap, PULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL StaticFileLoadW(const wchar_t* szFileName, DWORD DesiredAccess, bool SimulateLoad, LPHANDLE FileHandle, LPDWORD LoadedSize, LPHANDLE FileMap, PULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL StaticFileUnload(const char* szFileName, bool CommitChanges, HANDLE FileHandle, DWORD LoadedSize, HANDLE FileMap, ULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL StaticFileUnloadW(const wchar_t* szFileName, bool CommitChanges, HANDLE FileHandle, DWORD LoadedSize, HANDLE FileMap, ULONG_PTR FileMapVA);
__declspec(dllexport) bool TITCALL StaticFileOpen(const char* szFileName, DWORD DesiredAccess, LPHANDLE FileHandle, LPDWORD FileSizeLow, LPDWORD FileSizeHigh);
__declspec(dllexport) bool TITCALL StaticFileOpenW(const wchar_t* szFileName, DWORD DesiredAccess, LPHANDLE FileHandle, LPDWORD FileSizeLow, LPDWORD FileSizeHigh);
__declspec(dllexport) bool TITCALL StaticFileGetContent(HANDLE FileHandle, DWORD FilePositionLow, LPDWORD FilePositionHigh, void* Buffer, DWORD Size);
__declspec(dllexport) void TITCALL StaticFileClose(HANDLE FileHandle);
__declspec(dllexport) void TITCALL StaticMemoryDecrypt(LPVOID MemoryStart, DWORD MemorySize, DWORD DecryptionType, DWORD DecryptionKeySize, ULONG_PTR DecryptionKey);
__declspec(dllexport) void TITCALL StaticMemoryDecryptEx(LPVOID MemoryStart, DWORD MemorySize, DWORD DecryptionKeySize, void* DecryptionCallBack);
__declspec(dllexport) void TITCALL StaticMemoryDecryptSpecial(LPVOID MemoryStart, DWORD MemorySize, DWORD DecryptionKeySize, DWORD SpecDecryptionType, void* DecryptionCallBack);
__declspec(dllexport) void TITCALL StaticSectionDecrypt(ULONG_PTR FileMapVA, DWORD SectionNumber, bool SimulateLoad, DWORD DecryptionType, DWORD DecryptionKeySize, ULONG_PTR DecryptionKey);
__declspec(dllexport) bool TITCALL StaticMemoryDecompress(void* Source, DWORD SourceSize, void* Destination, DWORD DestinationSize, int Algorithm);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopy(HANDLE hFile, ULONG_PTR FileMapVA, ULONG_PTR VitualAddressToCopy, DWORD Size, bool AddressIsRVA, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopyW(HANDLE hFile, ULONG_PTR FileMapVA, ULONG_PTR VitualAddressToCopy, DWORD Size, bool AddressIsRVA, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopyEx(HANDLE hFile, DWORD RawAddressToCopy, DWORD Size, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopyExW(HANDLE hFile, DWORD RawAddressToCopy, DWORD Size, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopyEx64(HANDLE hFile, DWORD64 RawAddressToCopy, DWORD64 Size, const char* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticRawMemoryCopyEx64W(HANDLE hFile, DWORD64 RawAddressToCopy, DWORD64 Size, const wchar_t* szDumpFileName);
__declspec(dllexport) bool TITCALL StaticHashMemory(void* MemoryToHash, DWORD SizeOfMemory, void* HashDigest, bool OutputString, int Algorithm);
__declspec(dllexport) bool TITCALL StaticHashFileW(const wchar_t* szFileName, char* HashDigest, bool OutputString, int Algorithm);
__declspec(dllexport) bool TITCALL StaticHashFile(const char* szFileName, char* HashDigest, bool OutputString, int Algorithm);
// TitanEngine.Engine.functions:
__declspec(dllexport) void TITCALL EngineUnpackerInitialize(const char* szFileName, const char* szUnpackedFileName, bool DoLogData, bool DoRealignFile, bool DoMoveOverlay, void* EntryCallBack);
__declspec(dllexport) void TITCALL EngineUnpackerInitializeW(const wchar_t* szFileName, const wchar_t* szUnpackedFileName, bool DoLogData, bool DoRealignFile, bool DoMoveOverlay, void* EntryCallBack);
__declspec(dllexport) bool TITCALL EngineUnpackerSetBreakCondition(void* SearchStart, DWORD SearchSize, void* SearchPattern, DWORD PatternSize, DWORD PatternDelta, ULONG_PTR BreakType, bool SingleBreak, DWORD Parameter1, DWORD Parameter2);
__declspec(dllexport) void TITCALL EngineUnpackerSetEntryPointAddress(ULONG_PTR UnpackedEntryPointAddress);
__declspec(dllexport) void TITCALL EngineUnpackerFinalizeUnpacking();
// TitanEngine.Engine.functions:
__declspec(dllexport) void TITCALL SetEngineVariable(DWORD VariableId, bool VariableSet);
__declspec(dllexport) bool TITCALL EngineCreateMissingDependencies(const char* szFileName, const char* szOutputFolder, bool LogCreatedFiles);
__declspec(dllexport) bool TITCALL EngineCreateMissingDependenciesW(const wchar_t* szFileName, const wchar_t* szOutputFolder, bool LogCreatedFiles);
__declspec(dllexport) bool TITCALL EngineFakeMissingDependencies(HANDLE hProcess);
__declspec(dllexport) bool TITCALL EngineDeleteCreatedDependencies();
__declspec(dllexport) bool TITCALL EngineCreateUnpackerWindow(const char* WindowUnpackerTitle, const char* WindowUnpackerLongTitle, const char* WindowUnpackerName, const char* WindowUnpackerAuthor, void* StartUnpackingCallBack);
__declspec(dllexport) void TITCALL EngineAddUnpackerWindowLogMessage(const char* szLogMessage);
__declspec(dllexport) bool TITCALL EngineCheckStructAlignment(DWORD StructureType, ULONG_PTR StructureSize);
// Global.Engine.Extension.Functions:
__declspec(dllexport) bool TITCALL ExtensionManagerIsPluginLoaded(const char* szPluginName);
__declspec(dllexport) bool TITCALL ExtensionManagerIsPluginEnabled(const char* szPluginName);
__declspec(dllexport) bool TITCALL ExtensionManagerDisableAllPlugins();
__declspec(dllexport) bool TITCALL ExtensionManagerDisablePlugin(const char* szPluginName);
__declspec(dllexport) bool TITCALL ExtensionManagerEnableAllPlugins();
__declspec(dllexport) bool TITCALL ExtensionManagerEnablePlugin(const char* szPluginName);
__declspec(dllexport) bool TITCALL ExtensionManagerUnloadAllPlugins();
__declspec(dllexport) bool TITCALL ExtensionManagerUnloadPlugin(const char* szPluginName);
__declspec(dllexport) void* TITCALL ExtensionManagerGetPluginInfo(const char* szPluginName);

#ifdef __cplusplus
}
#endif

#pragma pack(pop)

#endif /*TITANENGINE*/



================================================
File: pluginsdk/XEDParse/XEDParse.h
================================================
#ifndef _XEDPARSE_H
#define _XEDPARSE_H

#include <windows.h>

//XEDParse defines
#ifdef XEDPARSE_BUILD
#define XEDPARSE_EXPORT __declspec(dllexport)
#else
#define XEDPARSE_EXPORT __declspec(dllimport)
#endif //XEDPARSE_BUILD

#define XEDPARSE_CALL //calling convention

#define XEDPARSE_MAXBUFSIZE 256
#define XEDPARSE_MAXASMSIZE 16

//typedefs
typedef bool (XEDPARSE_CALL* CBXEDPARSE_UNKNOWN)(const char* text, ULONGLONG* value);

//XEDParse enums
enum XEDPARSE_STATUS
{
    XEDPARSE_ERROR = 0,
    XEDPARSE_OK = 1
};

//XEDParse structs
#pragma pack(push,8)
struct XEDPARSE
{
    bool x64; // use 64-bit instructions
    ULONGLONG cip; //instruction pointer (for relative addressing)
    unsigned int dest_size; //destination size (returned by XEDParse)
    CBXEDPARSE_UNKNOWN cbUnknown; //unknown operand callback
    unsigned char dest[XEDPARSE_MAXASMSIZE]; //destination buffer
    char instr[XEDPARSE_MAXBUFSIZE]; //instruction text
    char error[XEDPARSE_MAXBUFSIZE]; //error text (in case of an error)
};
#pragma pack(pop)

#ifdef __cplusplus
extern "C"
{
#endif

XEDPARSE_EXPORT XEDPARSE_STATUS XEDPARSE_CALL XEDParseAssemble(XEDPARSE* XEDParse);

#ifdef __cplusplus
}
#endif

#endif // _XEDPARSE_H



================================================
File: pluginsdk/capstone/arm.h
================================================
#ifndef CAPSTONE_ARM_H
#define CAPSTONE_ARM_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> ARM shift type
typedef enum arm_shifter
{
    ARM_SFT_INVALID = 0,
    ARM_SFT_ASR,    // shift with immediate const
    ARM_SFT_LSL,    // shift with immediate const
    ARM_SFT_LSR,    // shift with immediate const
    ARM_SFT_ROR,    // shift with immediate const
    ARM_SFT_RRX,    // shift with immediate const
    ARM_SFT_ASR_REG,    // shift with register
    ARM_SFT_LSL_REG,    // shift with register
    ARM_SFT_LSR_REG,    // shift with register
    ARM_SFT_ROR_REG,    // shift with register
    ARM_SFT_RRX_REG,    // shift with register
} arm_shifter;

//> ARM condition code
typedef enum arm_cc
{
    ARM_CC_INVALID = 0,
    ARM_CC_EQ,            // Equal                      Equal
    ARM_CC_NE,            // Not equal                  Not equal, or unordered
    ARM_CC_HS,            // Carry set                  >, ==, or unordered
    ARM_CC_LO,            // Carry clear                Less than
    ARM_CC_MI,            // Minus, negative            Less than
    ARM_CC_PL,            // Plus, positive or zero     >, ==, or unordered
    ARM_CC_VS,            // Overflow                   Unordered
    ARM_CC_VC,            // No overflow                Not unordered
    ARM_CC_HI,            // Unsigned higher            Greater than, or unordered
    ARM_CC_LS,            // Unsigned lower or same     Less than or equal
    ARM_CC_GE,            // Greater than or equal      Greater than or equal
    ARM_CC_LT,            // Less than                  Less than, or unordered
    ARM_CC_GT,            // Greater than               Greater than
    ARM_CC_LE,            // Less than or equal         <, ==, or unordered
    ARM_CC_AL             // Always (unconditional)     Always (unconditional)
} arm_cc;

typedef enum arm_sysreg
{
    //> Special registers for MSR
    ARM_SYSREG_INVALID = 0,

    // SPSR* registers can be OR combined
    ARM_SYSREG_SPSR_C = 1,
    ARM_SYSREG_SPSR_X = 2,
    ARM_SYSREG_SPSR_S = 4,
    ARM_SYSREG_SPSR_F = 8,

    // CPSR* registers can be OR combined
    ARM_SYSREG_CPSR_C = 16,
    ARM_SYSREG_CPSR_X = 32,
    ARM_SYSREG_CPSR_S = 64,
    ARM_SYSREG_CPSR_F = 128,

    // independent registers
    ARM_SYSREG_APSR = 256,
    ARM_SYSREG_APSR_G,
    ARM_SYSREG_APSR_NZCVQ,
    ARM_SYSREG_APSR_NZCVQG,

    ARM_SYSREG_IAPSR,
    ARM_SYSREG_IAPSR_G,
    ARM_SYSREG_IAPSR_NZCVQG,

    ARM_SYSREG_EAPSR,
    ARM_SYSREG_EAPSR_G,
    ARM_SYSREG_EAPSR_NZCVQG,

    ARM_SYSREG_XPSR,
    ARM_SYSREG_XPSR_G,
    ARM_SYSREG_XPSR_NZCVQG,

    ARM_SYSREG_IPSR,
    ARM_SYSREG_EPSR,
    ARM_SYSREG_IEPSR,

    ARM_SYSREG_MSP,
    ARM_SYSREG_PSP,
    ARM_SYSREG_PRIMASK,
    ARM_SYSREG_BASEPRI,
    ARM_SYSREG_BASEPRI_MAX,
    ARM_SYSREG_FAULTMASK,
    ARM_SYSREG_CONTROL,
} arm_sysreg;

//> The memory barrier constants map directly to the 4-bit encoding of
//> the option field for Memory Barrier operations.
typedef enum arm_mem_barrier
{
    ARM_MB_INVALID = 0,
    ARM_MB_RESERVED_0,
    ARM_MB_OSHLD,
    ARM_MB_OSHST,
    ARM_MB_OSH,
    ARM_MB_RESERVED_4,
    ARM_MB_NSHLD,
    ARM_MB_NSHST,
    ARM_MB_NSH,
    ARM_MB_RESERVED_8,
    ARM_MB_ISHLD,
    ARM_MB_ISHST,
    ARM_MB_ISH,
    ARM_MB_RESERVED_12,
    ARM_MB_LD,
    ARM_MB_ST,
    ARM_MB_SY,
} arm_mem_barrier;

//> Operand type for instruction's operands
typedef enum arm_op_type
{
    ARM_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    ARM_OP_REG, // = CS_OP_REG (Register operand).
    ARM_OP_IMM, // = CS_OP_IMM (Immediate operand).
    ARM_OP_MEM, // = CS_OP_MEM (Memory operand).
    ARM_OP_FP,  // = CS_OP_FP (Floating-Point operand).
    ARM_OP_CIMM = 64, // C-Immediate (coprocessor registers)
    ARM_OP_PIMM, // P-Immediate (coprocessor registers)
    ARM_OP_SETEND,  // operand for SETEND instruction
    ARM_OP_SYSREG,  // MSR/MSR special register operand
} arm_op_type;

//> Operand type for SETEND instruction
typedef enum arm_setend_type
{
    ARM_SETEND_INVALID = 0, // Uninitialized.
    ARM_SETEND_BE,  // BE operand.
    ARM_SETEND_LE, // LE operand
} arm_setend_type;

typedef enum arm_cpsmode_type
{
    ARM_CPSMODE_INVALID = 0,
    ARM_CPSMODE_IE = 2,
    ARM_CPSMODE_ID = 3
} arm_cpsmode_type;

//> Operand type for SETEND instruction
typedef enum arm_cpsflag_type
{
    ARM_CPSFLAG_INVALID = 0,
    ARM_CPSFLAG_F = 1,
    ARM_CPSFLAG_I = 2,
    ARM_CPSFLAG_A = 4,
    ARM_CPSFLAG_NONE = 16,  // no flag
} arm_cpsflag_type;

//> Data type for elements of vector instructions.
typedef enum arm_vectordata_type
{
    ARM_VECTORDATA_INVALID = 0,

    // Integer type
    ARM_VECTORDATA_I8,
    ARM_VECTORDATA_I16,
    ARM_VECTORDATA_I32,
    ARM_VECTORDATA_I64,

    // Signed integer type
    ARM_VECTORDATA_S8,
    ARM_VECTORDATA_S16,
    ARM_VECTORDATA_S32,
    ARM_VECTORDATA_S64,

    // Unsigned integer type
    ARM_VECTORDATA_U8,
    ARM_VECTORDATA_U16,
    ARM_VECTORDATA_U32,
    ARM_VECTORDATA_U64,

    // Data type for VMUL/VMULL
    ARM_VECTORDATA_P8,

    // Floating type
    ARM_VECTORDATA_F32,
    ARM_VECTORDATA_F64,

    // Convert float <-> float
    ARM_VECTORDATA_F16F64,  // f16.f64
    ARM_VECTORDATA_F64F16,  // f64.f16
    ARM_VECTORDATA_F32F16,  // f32.f16
    ARM_VECTORDATA_F16F32,  // f32.f16
    ARM_VECTORDATA_F64F32,  // f64.f32
    ARM_VECTORDATA_F32F64,  // f32.f64

    // Convert integer <-> float
    ARM_VECTORDATA_S32F32,  // s32.f32
    ARM_VECTORDATA_U32F32,  // u32.f32
    ARM_VECTORDATA_F32S32,  // f32.s32
    ARM_VECTORDATA_F32U32,  // f32.u32
    ARM_VECTORDATA_F64S16,  // f64.s16
    ARM_VECTORDATA_F32S16,  // f32.s16
    ARM_VECTORDATA_F64S32,  // f64.s32
    ARM_VECTORDATA_S16F64,  // s16.f64
    ARM_VECTORDATA_S16F32,  // s16.f64
    ARM_VECTORDATA_S32F64,  // s32.f64
    ARM_VECTORDATA_U16F64,  // u16.f64
    ARM_VECTORDATA_U16F32,  // u16.f32
    ARM_VECTORDATA_U32F64,  // u32.f64
    ARM_VECTORDATA_F64U16,  // f64.u16
    ARM_VECTORDATA_F32U16,  // f32.u16
    ARM_VECTORDATA_F64U32,  // f64.u32
} arm_vectordata_type;

// Instruction's operand referring to memory
// This is associated with ARM_OP_MEM operand type above
typedef struct arm_op_mem
{
    unsigned int base;  // base register
    unsigned int index; // index register
    int scale;  // scale for index register (can be 1, or -1)
    int disp;   // displacement/offset value
} arm_op_mem;

// Instruction operand
typedef struct cs_arm_op
{
    int vector_index;   // Vector Index for some vector operands (or -1 if irrelevant)
    struct
    {
        arm_shifter type;
        unsigned int value;
    } shift;
    arm_op_type type;   // operand type
    union
    {
        unsigned int reg;   // register value for REG/SYSREG operand
        int32_t imm;            // immediate value for C-IMM, P-IMM or IMM operand
        double fp;          // floating point value for FP operand
        arm_op_mem mem;     // base/index/scale/disp value for MEM operand
        arm_setend_type setend; // SETEND instruction's operand type
    };
    // in some instructions, an operand can be subtracted or added to
    // the base register,
    bool subtracted; // if TRUE, this operand is subtracted. otherwise, it is added.
} cs_arm_op;

// Instruction structure
typedef struct cs_arm
{
    bool usermode;  // User-mode registers to be loaded (for LDM/STM instructions)
    int vector_size;    // Scalar size for vector instructions
    arm_vectordata_type vector_data; // Data type for elements of vector instructions
    arm_cpsmode_type cps_mode;  // CPS mode for CPS instruction
    arm_cpsflag_type cps_flag;  // CPS mode for CPS instruction
    arm_cc cc;          // conditional code for this insn
    bool update_flags;  // does this insn update flags?
    bool writeback;     // does this insn write-back?
    arm_mem_barrier mem_barrier;    // Option for some memory barrier instructions

    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;

    cs_arm_op operands[36]; // operands for this instruction.
} cs_arm;

//> ARM registers
typedef enum arm_reg
{
    ARM_REG_INVALID = 0,
    ARM_REG_APSR,
    ARM_REG_APSR_NZCV,
    ARM_REG_CPSR,
    ARM_REG_FPEXC,
    ARM_REG_FPINST,
    ARM_REG_FPSCR,
    ARM_REG_FPSCR_NZCV,
    ARM_REG_FPSID,
    ARM_REG_ITSTATE,
    ARM_REG_LR,
    ARM_REG_PC,
    ARM_REG_SP,
    ARM_REG_SPSR,
    ARM_REG_D0,
    ARM_REG_D1,
    ARM_REG_D2,
    ARM_REG_D3,
    ARM_REG_D4,
    ARM_REG_D5,
    ARM_REG_D6,
    ARM_REG_D7,
    ARM_REG_D8,
    ARM_REG_D9,
    ARM_REG_D10,
    ARM_REG_D11,
    ARM_REG_D12,
    ARM_REG_D13,
    ARM_REG_D14,
    ARM_REG_D15,
    ARM_REG_D16,
    ARM_REG_D17,
    ARM_REG_D18,
    ARM_REG_D19,
    ARM_REG_D20,
    ARM_REG_D21,
    ARM_REG_D22,
    ARM_REG_D23,
    ARM_REG_D24,
    ARM_REG_D25,
    ARM_REG_D26,
    ARM_REG_D27,
    ARM_REG_D28,
    ARM_REG_D29,
    ARM_REG_D30,
    ARM_REG_D31,
    ARM_REG_FPINST2,
    ARM_REG_MVFR0,
    ARM_REG_MVFR1,
    ARM_REG_MVFR2,
    ARM_REG_Q0,
    ARM_REG_Q1,
    ARM_REG_Q2,
    ARM_REG_Q3,
    ARM_REG_Q4,
    ARM_REG_Q5,
    ARM_REG_Q6,
    ARM_REG_Q7,
    ARM_REG_Q8,
    ARM_REG_Q9,
    ARM_REG_Q10,
    ARM_REG_Q11,
    ARM_REG_Q12,
    ARM_REG_Q13,
    ARM_REG_Q14,
    ARM_REG_Q15,
    ARM_REG_R0,
    ARM_REG_R1,
    ARM_REG_R2,
    ARM_REG_R3,
    ARM_REG_R4,
    ARM_REG_R5,
    ARM_REG_R6,
    ARM_REG_R7,
    ARM_REG_R8,
    ARM_REG_R9,
    ARM_REG_R10,
    ARM_REG_R11,
    ARM_REG_R12,
    ARM_REG_S0,
    ARM_REG_S1,
    ARM_REG_S2,
    ARM_REG_S3,
    ARM_REG_S4,
    ARM_REG_S5,
    ARM_REG_S6,
    ARM_REG_S7,
    ARM_REG_S8,
    ARM_REG_S9,
    ARM_REG_S10,
    ARM_REG_S11,
    ARM_REG_S12,
    ARM_REG_S13,
    ARM_REG_S14,
    ARM_REG_S15,
    ARM_REG_S16,
    ARM_REG_S17,
    ARM_REG_S18,
    ARM_REG_S19,
    ARM_REG_S20,
    ARM_REG_S21,
    ARM_REG_S22,
    ARM_REG_S23,
    ARM_REG_S24,
    ARM_REG_S25,
    ARM_REG_S26,
    ARM_REG_S27,
    ARM_REG_S28,
    ARM_REG_S29,
    ARM_REG_S30,
    ARM_REG_S31,

    ARM_REG_ENDING,     // <-- mark the end of the list or registers

    //> alias registers
    ARM_REG_R13 = ARM_REG_SP,
    ARM_REG_R14 = ARM_REG_LR,
    ARM_REG_R15 = ARM_REG_PC,

    ARM_REG_SB = ARM_REG_R9,
    ARM_REG_SL = ARM_REG_R10,
    ARM_REG_FP = ARM_REG_R11,
    ARM_REG_IP = ARM_REG_R12,
} arm_reg;

//> ARM instruction
typedef enum arm_insn
{
    ARM_INS_INVALID = 0,

    ARM_INS_ADC,
    ARM_INS_ADD,
    ARM_INS_ADR,
    ARM_INS_AESD,
    ARM_INS_AESE,
    ARM_INS_AESIMC,
    ARM_INS_AESMC,
    ARM_INS_AND,
    ARM_INS_BFC,
    ARM_INS_BFI,
    ARM_INS_BIC,
    ARM_INS_BKPT,
    ARM_INS_BL,
    ARM_INS_BLX,
    ARM_INS_BX,
    ARM_INS_BXJ,
    ARM_INS_B,
    ARM_INS_CDP,
    ARM_INS_CDP2,
    ARM_INS_CLREX,
    ARM_INS_CLZ,
    ARM_INS_CMN,
    ARM_INS_CMP,
    ARM_INS_CPS,
    ARM_INS_CRC32B,
    ARM_INS_CRC32CB,
    ARM_INS_CRC32CH,
    ARM_INS_CRC32CW,
    ARM_INS_CRC32H,
    ARM_INS_CRC32W,
    ARM_INS_DBG,
    ARM_INS_DMB,
    ARM_INS_DSB,
    ARM_INS_EOR,
    ARM_INS_VMOV,
    ARM_INS_FLDMDBX,
    ARM_INS_FLDMIAX,
    ARM_INS_VMRS,
    ARM_INS_FSTMDBX,
    ARM_INS_FSTMIAX,
    ARM_INS_HINT,
    ARM_INS_HLT,
    ARM_INS_ISB,
    ARM_INS_LDA,
    ARM_INS_LDAB,
    ARM_INS_LDAEX,
    ARM_INS_LDAEXB,
    ARM_INS_LDAEXD,
    ARM_INS_LDAEXH,
    ARM_INS_LDAH,
    ARM_INS_LDC2L,
    ARM_INS_LDC2,
    ARM_INS_LDCL,
    ARM_INS_LDC,
    ARM_INS_LDMDA,
    ARM_INS_LDMDB,
    ARM_INS_LDM,
    ARM_INS_LDMIB,
    ARM_INS_LDRBT,
    ARM_INS_LDRB,
    ARM_INS_LDRD,
    ARM_INS_LDREX,
    ARM_INS_LDREXB,
    ARM_INS_LDREXD,
    ARM_INS_LDREXH,
    ARM_INS_LDRH,
    ARM_INS_LDRHT,
    ARM_INS_LDRSB,
    ARM_INS_LDRSBT,
    ARM_INS_LDRSH,
    ARM_INS_LDRSHT,
    ARM_INS_LDRT,
    ARM_INS_LDR,
    ARM_INS_MCR,
    ARM_INS_MCR2,
    ARM_INS_MCRR,
    ARM_INS_MCRR2,
    ARM_INS_MLA,
    ARM_INS_MLS,
    ARM_INS_MOV,
    ARM_INS_MOVT,
    ARM_INS_MOVW,
    ARM_INS_MRC,
    ARM_INS_MRC2,
    ARM_INS_MRRC,
    ARM_INS_MRRC2,
    ARM_INS_MRS,
    ARM_INS_MSR,
    ARM_INS_MUL,
    ARM_INS_MVN,
    ARM_INS_ORR,
    ARM_INS_PKHBT,
    ARM_INS_PKHTB,
    ARM_INS_PLDW,
    ARM_INS_PLD,
    ARM_INS_PLI,
    ARM_INS_QADD,
    ARM_INS_QADD16,
    ARM_INS_QADD8,
    ARM_INS_QASX,
    ARM_INS_QDADD,
    ARM_INS_QDSUB,
    ARM_INS_QSAX,
    ARM_INS_QSUB,
    ARM_INS_QSUB16,
    ARM_INS_QSUB8,
    ARM_INS_RBIT,
    ARM_INS_REV,
    ARM_INS_REV16,
    ARM_INS_REVSH,
    ARM_INS_RFEDA,
    ARM_INS_RFEDB,
    ARM_INS_RFEIA,
    ARM_INS_RFEIB,
    ARM_INS_RSB,
    ARM_INS_RSC,
    ARM_INS_SADD16,
    ARM_INS_SADD8,
    ARM_INS_SASX,
    ARM_INS_SBC,
    ARM_INS_SBFX,
    ARM_INS_SDIV,
    ARM_INS_SEL,
    ARM_INS_SETEND,
    ARM_INS_SHA1C,
    ARM_INS_SHA1H,
    ARM_INS_SHA1M,
    ARM_INS_SHA1P,
    ARM_INS_SHA1SU0,
    ARM_INS_SHA1SU1,
    ARM_INS_SHA256H,
    ARM_INS_SHA256H2,
    ARM_INS_SHA256SU0,
    ARM_INS_SHA256SU1,
    ARM_INS_SHADD16,
    ARM_INS_SHADD8,
    ARM_INS_SHASX,
    ARM_INS_SHSAX,
    ARM_INS_SHSUB16,
    ARM_INS_SHSUB8,
    ARM_INS_SMC,
    ARM_INS_SMLABB,
    ARM_INS_SMLABT,
    ARM_INS_SMLAD,
    ARM_INS_SMLADX,
    ARM_INS_SMLAL,
    ARM_INS_SMLALBB,
    ARM_INS_SMLALBT,
    ARM_INS_SMLALD,
    ARM_INS_SMLALDX,
    ARM_INS_SMLALTB,
    ARM_INS_SMLALTT,
    ARM_INS_SMLATB,
    ARM_INS_SMLATT,
    ARM_INS_SMLAWB,
    ARM_INS_SMLAWT,
    ARM_INS_SMLSD,
    ARM_INS_SMLSDX,
    ARM_INS_SMLSLD,
    ARM_INS_SMLSLDX,
    ARM_INS_SMMLA,
    ARM_INS_SMMLAR,
    ARM_INS_SMMLS,
    ARM_INS_SMMLSR,
    ARM_INS_SMMUL,
    ARM_INS_SMMULR,
    ARM_INS_SMUAD,
    ARM_INS_SMUADX,
    ARM_INS_SMULBB,
    ARM_INS_SMULBT,
    ARM_INS_SMULL,
    ARM_INS_SMULTB,
    ARM_INS_SMULTT,
    ARM_INS_SMULWB,
    ARM_INS_SMULWT,
    ARM_INS_SMUSD,
    ARM_INS_SMUSDX,
    ARM_INS_SRSDA,
    ARM_INS_SRSDB,
    ARM_INS_SRSIA,
    ARM_INS_SRSIB,
    ARM_INS_SSAT,
    ARM_INS_SSAT16,
    ARM_INS_SSAX,
    ARM_INS_SSUB16,
    ARM_INS_SSUB8,
    ARM_INS_STC2L,
    ARM_INS_STC2,
    ARM_INS_STCL,
    ARM_INS_STC,
    ARM_INS_STL,
    ARM_INS_STLB,
    ARM_INS_STLEX,
    ARM_INS_STLEXB,
    ARM_INS_STLEXD,
    ARM_INS_STLEXH,
    ARM_INS_STLH,
    ARM_INS_STMDA,
    ARM_INS_STMDB,
    ARM_INS_STM,
    ARM_INS_STMIB,
    ARM_INS_STRBT,
    ARM_INS_STRB,
    ARM_INS_STRD,
    ARM_INS_STREX,
    ARM_INS_STREXB,
    ARM_INS_STREXD,
    ARM_INS_STREXH,
    ARM_INS_STRH,
    ARM_INS_STRHT,
    ARM_INS_STRT,
    ARM_INS_STR,
    ARM_INS_SUB,
    ARM_INS_SVC,
    ARM_INS_SWP,
    ARM_INS_SWPB,
    ARM_INS_SXTAB,
    ARM_INS_SXTAB16,
    ARM_INS_SXTAH,
    ARM_INS_SXTB,
    ARM_INS_SXTB16,
    ARM_INS_SXTH,
    ARM_INS_TEQ,
    ARM_INS_TRAP,
    ARM_INS_TST,
    ARM_INS_UADD16,
    ARM_INS_UADD8,
    ARM_INS_UASX,
    ARM_INS_UBFX,
    ARM_INS_UDF,
    ARM_INS_UDIV,
    ARM_INS_UHADD16,
    ARM_INS_UHADD8,
    ARM_INS_UHASX,
    ARM_INS_UHSAX,
    ARM_INS_UHSUB16,
    ARM_INS_UHSUB8,
    ARM_INS_UMAAL,
    ARM_INS_UMLAL,
    ARM_INS_UMULL,
    ARM_INS_UQADD16,
    ARM_INS_UQADD8,
    ARM_INS_UQASX,
    ARM_INS_UQSAX,
    ARM_INS_UQSUB16,
    ARM_INS_UQSUB8,
    ARM_INS_USAD8,
    ARM_INS_USADA8,
    ARM_INS_USAT,
    ARM_INS_USAT16,
    ARM_INS_USAX,
    ARM_INS_USUB16,
    ARM_INS_USUB8,
    ARM_INS_UXTAB,
    ARM_INS_UXTAB16,
    ARM_INS_UXTAH,
    ARM_INS_UXTB,
    ARM_INS_UXTB16,
    ARM_INS_UXTH,
    ARM_INS_VABAL,
    ARM_INS_VABA,
    ARM_INS_VABDL,
    ARM_INS_VABD,
    ARM_INS_VABS,
    ARM_INS_VACGE,
    ARM_INS_VACGT,
    ARM_INS_VADD,
    ARM_INS_VADDHN,
    ARM_INS_VADDL,
    ARM_INS_VADDW,
    ARM_INS_VAND,
    ARM_INS_VBIC,
    ARM_INS_VBIF,
    ARM_INS_VBIT,
    ARM_INS_VBSL,
    ARM_INS_VCEQ,
    ARM_INS_VCGE,
    ARM_INS_VCGT,
    ARM_INS_VCLE,
    ARM_INS_VCLS,
    ARM_INS_VCLT,
    ARM_INS_VCLZ,
    ARM_INS_VCMP,
    ARM_INS_VCMPE,
    ARM_INS_VCNT,
    ARM_INS_VCVTA,
    ARM_INS_VCVTB,
    ARM_INS_VCVT,
    ARM_INS_VCVTM,
    ARM_INS_VCVTN,
    ARM_INS_VCVTP,
    ARM_INS_VCVTT,
    ARM_INS_VDIV,
    ARM_INS_VDUP,
    ARM_INS_VEOR,
    ARM_INS_VEXT,
    ARM_INS_VFMA,
    ARM_INS_VFMS,
    ARM_INS_VFNMA,
    ARM_INS_VFNMS,
    ARM_INS_VHADD,
    ARM_INS_VHSUB,
    ARM_INS_VLD1,
    ARM_INS_VLD2,
    ARM_INS_VLD3,
    ARM_INS_VLD4,
    ARM_INS_VLDMDB,
    ARM_INS_VLDMIA,
    ARM_INS_VLDR,
    ARM_INS_VMAXNM,
    ARM_INS_VMAX,
    ARM_INS_VMINNM,
    ARM_INS_VMIN,
    ARM_INS_VMLA,
    ARM_INS_VMLAL,
    ARM_INS_VMLS,
    ARM_INS_VMLSL,
    ARM_INS_VMOVL,
    ARM_INS_VMOVN,
    ARM_INS_VMSR,
    ARM_INS_VMUL,
    ARM_INS_VMULL,
    ARM_INS_VMVN,
    ARM_INS_VNEG,
    ARM_INS_VNMLA,
    ARM_INS_VNMLS,
    ARM_INS_VNMUL,
    ARM_INS_VORN,
    ARM_INS_VORR,
    ARM_INS_VPADAL,
    ARM_INS_VPADDL,
    ARM_INS_VPADD,
    ARM_INS_VPMAX,
    ARM_INS_VPMIN,
    ARM_INS_VQABS,
    ARM_INS_VQADD,
    ARM_INS_VQDMLAL,
    ARM_INS_VQDMLSL,
    ARM_INS_VQDMULH,
    ARM_INS_VQDMULL,
    ARM_INS_VQMOVUN,
    ARM_INS_VQMOVN,
    ARM_INS_VQNEG,
    ARM_INS_VQRDMULH,
    ARM_INS_VQRSHL,
    ARM_INS_VQRSHRN,
    ARM_INS_VQRSHRUN,
    ARM_INS_VQSHL,
    ARM_INS_VQSHLU,
    ARM_INS_VQSHRN,
    ARM_INS_VQSHRUN,
    ARM_INS_VQSUB,
    ARM_INS_VRADDHN,
    ARM_INS_VRECPE,
    ARM_INS_VRECPS,
    ARM_INS_VREV16,
    ARM_INS_VREV32,
    ARM_INS_VREV64,
    ARM_INS_VRHADD,
    ARM_INS_VRINTA,
    ARM_INS_VRINTM,
    ARM_INS_VRINTN,
    ARM_INS_VRINTP,
    ARM_INS_VRINTR,
    ARM_INS_VRINTX,
    ARM_INS_VRINTZ,
    ARM_INS_VRSHL,
    ARM_INS_VRSHRN,
    ARM_INS_VRSHR,
    ARM_INS_VRSQRTE,
    ARM_INS_VRSQRTS,
    ARM_INS_VRSRA,
    ARM_INS_VRSUBHN,
    ARM_INS_VSELEQ,
    ARM_INS_VSELGE,
    ARM_INS_VSELGT,
    ARM_INS_VSELVS,
    ARM_INS_VSHLL,
    ARM_INS_VSHL,
    ARM_INS_VSHRN,
    ARM_INS_VSHR,
    ARM_INS_VSLI,
    ARM_INS_VSQRT,
    ARM_INS_VSRA,
    ARM_INS_VSRI,
    ARM_INS_VST1,
    ARM_INS_VST2,
    ARM_INS_VST3,
    ARM_INS_VST4,
    ARM_INS_VSTMDB,
    ARM_INS_VSTMIA,
    ARM_INS_VSTR,
    ARM_INS_VSUB,
    ARM_INS_VSUBHN,
    ARM_INS_VSUBL,
    ARM_INS_VSUBW,
    ARM_INS_VSWP,
    ARM_INS_VTBL,
    ARM_INS_VTBX,
    ARM_INS_VCVTR,
    ARM_INS_VTRN,
    ARM_INS_VTST,
    ARM_INS_VUZP,
    ARM_INS_VZIP,
    ARM_INS_ADDW,
    ARM_INS_ASR,
    ARM_INS_DCPS1,
    ARM_INS_DCPS2,
    ARM_INS_DCPS3,
    ARM_INS_IT,
    ARM_INS_LSL,
    ARM_INS_LSR,
    ARM_INS_ASRS,
    ARM_INS_LSRS,
    ARM_INS_ORN,
    ARM_INS_ROR,
    ARM_INS_RRX,
    ARM_INS_SUBS,
    ARM_INS_SUBW,
    ARM_INS_TBB,
    ARM_INS_TBH,
    ARM_INS_CBNZ,
    ARM_INS_CBZ,
    ARM_INS_MOVS,
    ARM_INS_POP,
    ARM_INS_PUSH,

    // special instructions
    ARM_INS_NOP,
    ARM_INS_YIELD,
    ARM_INS_WFE,
    ARM_INS_WFI,
    ARM_INS_SEV,
    ARM_INS_SEVL,
    ARM_INS_VPUSH,
    ARM_INS_VPOP,

    ARM_INS_ENDING, // <-- mark the end of the list of instructions
} arm_insn;

//> Group of ARM instructions
typedef enum arm_insn_group
{
    ARM_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    ARM_GRP_JUMP,   // = CS_GRP_JUMP

    //> Architecture-specific groups
    ARM_GRP_CRYPTO = 128,
    ARM_GRP_DATABARRIER,
    ARM_GRP_DIVIDE,
    ARM_GRP_FPARMV8,
    ARM_GRP_MULTPRO,
    ARM_GRP_NEON,
    ARM_GRP_T2EXTRACTPACK,
    ARM_GRP_THUMB2DSP,
    ARM_GRP_TRUSTZONE,
    ARM_GRP_V4T,
    ARM_GRP_V5T,
    ARM_GRP_V5TE,
    ARM_GRP_V6,
    ARM_GRP_V6T2,
    ARM_GRP_V7,
    ARM_GRP_V8,
    ARM_GRP_VFP2,
    ARM_GRP_VFP3,
    ARM_GRP_VFP4,
    ARM_GRP_ARM,
    ARM_GRP_MCLASS,
    ARM_GRP_NOTMCLASS,
    ARM_GRP_THUMB,
    ARM_GRP_THUMB1ONLY,
    ARM_GRP_THUMB2,
    ARM_GRP_PREV8,
    ARM_GRP_FPVMLX,
    ARM_GRP_MULOPS,
    ARM_GRP_CRC,
    ARM_GRP_DPVFP,
    ARM_GRP_V6M,

    ARM_GRP_ENDING,
} arm_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/arm64.h
================================================
#ifndef CAPSTONE_ARM64_H
#define CAPSTONE_ARM64_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> ARM64 shift type
typedef enum arm64_shifter
{
    ARM64_SFT_INVALID = 0,
    ARM64_SFT_LSL = 1,
    ARM64_SFT_MSL = 2,
    ARM64_SFT_LSR = 3,
    ARM64_SFT_ASR = 4,
    ARM64_SFT_ROR = 5,
} arm64_shifter;

//> ARM64 extender type
typedef enum arm64_extender
{
    ARM64_EXT_INVALID = 0,
    ARM64_EXT_UXTB = 1,
    ARM64_EXT_UXTH = 2,
    ARM64_EXT_UXTW = 3,
    ARM64_EXT_UXTX = 4,
    ARM64_EXT_SXTB = 5,
    ARM64_EXT_SXTH = 6,
    ARM64_EXT_SXTW = 7,
    ARM64_EXT_SXTX = 8,
} arm64_extender;

//> ARM64 condition code
typedef enum arm64_cc
{
    ARM64_CC_INVALID = 0,
    ARM64_CC_EQ = 1,     // Equal
    ARM64_CC_NE = 2,     // Not equal:                 Not equal, or unordered
    ARM64_CC_HS = 3,     // Unsigned higher or same:   >, ==, or unordered
    ARM64_CC_LO = 4,     // Unsigned lower or same:    Less than
    ARM64_CC_MI = 5,     // Minus, negative:           Less than
    ARM64_CC_PL = 6,     // Plus, positive or zero:    >, ==, or unordered
    ARM64_CC_VS = 7,     // Overflow:                  Unordered
    ARM64_CC_VC = 8,     // No overflow:               Ordered
    ARM64_CC_HI = 9,     // Unsigned higher:           Greater than, or unordered
    ARM64_CC_LS = 10,     // Unsigned lower or same:    Less than or equal
    ARM64_CC_GE = 11,     // Greater than or equal:     Greater than or equal
    ARM64_CC_LT = 12,     // Less than:                 Less than, or unordered
    ARM64_CC_GT = 13,     // Signed greater than:       Greater than
    ARM64_CC_LE = 14,     // Signed less than or equal: <, ==, or unordered
    ARM64_CC_AL = 15,     // Always (unconditional):    Always (unconditional)
    ARM64_CC_NV = 16,     // Always (unconditional):   Always (unconditional)
    // Note the NV exists purely to disassemble 0b1111. Execution
    // is "always".
} arm64_cc;

//> System registers
typedef enum arm64_mrs_reg
{
    //> System registers for MRS
    ARM64_SYSREG_INVALID           = 0,
    ARM64_SYSREG_MDCCSR_EL0        = 0x9808, // 10  011  0000  0001  000
    ARM64_SYSREG_DBGDTRRX_EL0      = 0x9828, // 10  011  0000  0101  000
    ARM64_SYSREG_MDRAR_EL1         = 0x8080, // 10  000  0001  0000  000
    ARM64_SYSREG_OSLSR_EL1         = 0x808c, // 10  000  0001  0001  100
    ARM64_SYSREG_DBGAUTHSTATUS_EL1 = 0x83f6, // 10  000  0111  1110  110
    ARM64_SYSREG_PMCEID0_EL0       = 0xdce6, // 11  011  1001  1100  110
    ARM64_SYSREG_PMCEID1_EL0       = 0xdce7, // 11  011  1001  1100  111
    ARM64_SYSREG_MIDR_EL1          = 0xc000, // 11  000  0000  0000  000
    ARM64_SYSREG_CCSIDR_EL1        = 0xc800, // 11  001  0000  0000  000
    ARM64_SYSREG_CLIDR_EL1         = 0xc801, // 11  001  0000  0000  001
    ARM64_SYSREG_CTR_EL0           = 0xd801, // 11  011  0000  0000  001
    ARM64_SYSREG_MPIDR_EL1         = 0xc005, // 11  000  0000  0000  101
    ARM64_SYSREG_REVIDR_EL1        = 0xc006, // 11  000  0000  0000  110
    ARM64_SYSREG_AIDR_EL1          = 0xc807, // 11  001  0000  0000  111
    ARM64_SYSREG_DCZID_EL0         = 0xd807, // 11  011  0000  0000  111
    ARM64_SYSREG_ID_PFR0_EL1       = 0xc008, // 11  000  0000  0001  000
    ARM64_SYSREG_ID_PFR1_EL1       = 0xc009, // 11  000  0000  0001  001
    ARM64_SYSREG_ID_DFR0_EL1       = 0xc00a, // 11  000  0000  0001  010
    ARM64_SYSREG_ID_AFR0_EL1       = 0xc00b, // 11  000  0000  0001  011
    ARM64_SYSREG_ID_MMFR0_EL1      = 0xc00c, // 11  000  0000  0001  100
    ARM64_SYSREG_ID_MMFR1_EL1      = 0xc00d, // 11  000  0000  0001  101
    ARM64_SYSREG_ID_MMFR2_EL1      = 0xc00e, // 11  000  0000  0001  110
    ARM64_SYSREG_ID_MMFR3_EL1      = 0xc00f, // 11  000  0000  0001  111
    ARM64_SYSREG_ID_ISAR0_EL1      = 0xc010, // 11  000  0000  0010  000
    ARM64_SYSREG_ID_ISAR1_EL1      = 0xc011, // 11  000  0000  0010  001
    ARM64_SYSREG_ID_ISAR2_EL1      = 0xc012, // 11  000  0000  0010  010
    ARM64_SYSREG_ID_ISAR3_EL1      = 0xc013, // 11  000  0000  0010  011
    ARM64_SYSREG_ID_ISAR4_EL1      = 0xc014, // 11  000  0000  0010  100
    ARM64_SYSREG_ID_ISAR5_EL1      = 0xc015, // 11  000  0000  0010  101
    ARM64_SYSREG_ID_A64PFR0_EL1   = 0xc020, // 11  000  0000  0100  000
    ARM64_SYSREG_ID_A64PFR1_EL1   = 0xc021, // 11  000  0000  0100  001
    ARM64_SYSREG_ID_A64DFR0_EL1   = 0xc028, // 11  000  0000  0101  000
    ARM64_SYSREG_ID_A64DFR1_EL1   = 0xc029, // 11  000  0000  0101  001
    ARM64_SYSREG_ID_A64AFR0_EL1   = 0xc02c, // 11  000  0000  0101  100
    ARM64_SYSREG_ID_A64AFR1_EL1   = 0xc02d, // 11  000  0000  0101  101
    ARM64_SYSREG_ID_A64ISAR0_EL1  = 0xc030, // 11  000  0000  0110  000
    ARM64_SYSREG_ID_A64ISAR1_EL1  = 0xc031, // 11  000  0000  0110  001
    ARM64_SYSREG_ID_A64MMFR0_EL1  = 0xc038, // 11  000  0000  0111  000
    ARM64_SYSREG_ID_A64MMFR1_EL1  = 0xc039, // 11  000  0000  0111  001
    ARM64_SYSREG_MVFR0_EL1         = 0xc018, // 11  000  0000  0011  000
    ARM64_SYSREG_MVFR1_EL1         = 0xc019, // 11  000  0000  0011  001
    ARM64_SYSREG_MVFR2_EL1         = 0xc01a, // 11  000  0000  0011  010
    ARM64_SYSREG_RVBAR_EL1         = 0xc601, // 11  000  1100  0000  001
    ARM64_SYSREG_RVBAR_EL2         = 0xe601, // 11  100  1100  0000  001
    ARM64_SYSREG_RVBAR_EL3         = 0xf601, // 11  110  1100  0000  001
    ARM64_SYSREG_ISR_EL1           = 0xc608, // 11  000  1100  0001  000
    ARM64_SYSREG_CNTPCT_EL0        = 0xdf01, // 11  011  1110  0000  001
    ARM64_SYSREG_CNTVCT_EL0        = 0xdf02,  // 11  011  1110  0000  010

    // Trace registers
    ARM64_SYSREG_TRCSTATR          = 0x8818, // 10  001  0000  0011  000
    ARM64_SYSREG_TRCIDR8           = 0x8806, // 10  001  0000  0000  110
    ARM64_SYSREG_TRCIDR9           = 0x880e, // 10  001  0000  0001  110
    ARM64_SYSREG_TRCIDR10          = 0x8816, // 10  001  0000  0010  110
    ARM64_SYSREG_TRCIDR11          = 0x881e, // 10  001  0000  0011  110
    ARM64_SYSREG_TRCIDR12          = 0x8826, // 10  001  0000  0100  110
    ARM64_SYSREG_TRCIDR13          = 0x882e, // 10  001  0000  0101  110
    ARM64_SYSREG_TRCIDR0           = 0x8847, // 10  001  0000  1000  111
    ARM64_SYSREG_TRCIDR1           = 0x884f, // 10  001  0000  1001  111
    ARM64_SYSREG_TRCIDR2           = 0x8857, // 10  001  0000  1010  111
    ARM64_SYSREG_TRCIDR3           = 0x885f, // 10  001  0000  1011  111
    ARM64_SYSREG_TRCIDR4           = 0x8867, // 10  001  0000  1100  111
    ARM64_SYSREG_TRCIDR5           = 0x886f, // 10  001  0000  1101  111
    ARM64_SYSREG_TRCIDR6           = 0x8877, // 10  001  0000  1110  111
    ARM64_SYSREG_TRCIDR7           = 0x887f, // 10  001  0000  1111  111
    ARM64_SYSREG_TRCOSLSR          = 0x888c, // 10  001  0001  0001  100
    ARM64_SYSREG_TRCPDSR           = 0x88ac, // 10  001  0001  0101  100
    ARM64_SYSREG_TRCDEVAFF0        = 0x8bd6, // 10  001  0111  1010  110
    ARM64_SYSREG_TRCDEVAFF1        = 0x8bde, // 10  001  0111  1011  110
    ARM64_SYSREG_TRCLSR            = 0x8bee, // 10  001  0111  1101  110
    ARM64_SYSREG_TRCAUTHSTATUS     = 0x8bf6, // 10  001  0111  1110  110
    ARM64_SYSREG_TRCDEVARCH        = 0x8bfe, // 10  001  0111  1111  110
    ARM64_SYSREG_TRCDEVID          = 0x8b97, // 10  001  0111  0010  111
    ARM64_SYSREG_TRCDEVTYPE        = 0x8b9f, // 10  001  0111  0011  111
    ARM64_SYSREG_TRCPIDR4          = 0x8ba7, // 10  001  0111  0100  111
    ARM64_SYSREG_TRCPIDR5          = 0x8baf, // 10  001  0111  0101  111
    ARM64_SYSREG_TRCPIDR6          = 0x8bb7, // 10  001  0111  0110  111
    ARM64_SYSREG_TRCPIDR7          = 0x8bbf, // 10  001  0111  0111  111
    ARM64_SYSREG_TRCPIDR0          = 0x8bc7, // 10  001  0111  1000  111
    ARM64_SYSREG_TRCPIDR1          = 0x8bcf, // 10  001  0111  1001  111
    ARM64_SYSREG_TRCPIDR2          = 0x8bd7, // 10  001  0111  1010  111
    ARM64_SYSREG_TRCPIDR3          = 0x8bdf, // 10  001  0111  1011  111
    ARM64_SYSREG_TRCCIDR0          = 0x8be7, // 10  001  0111  1100  111
    ARM64_SYSREG_TRCCIDR1          = 0x8bef, // 10  001  0111  1101  111
    ARM64_SYSREG_TRCCIDR2          = 0x8bf7, // 10  001  0111  1110  111
    ARM64_SYSREG_TRCCIDR3          = 0x8bff, // 10  001  0111  1111  111

    // GICv3 registers
    ARM64_SYSREG_ICC_IAR1_EL1      = 0xc660, // 11  000  1100  1100  000
    ARM64_SYSREG_ICC_IAR0_EL1      = 0xc640, // 11  000  1100  1000  000
    ARM64_SYSREG_ICC_HPPIR1_EL1    = 0xc662, // 11  000  1100  1100  010
    ARM64_SYSREG_ICC_HPPIR0_EL1    = 0xc642, // 11  000  1100  1000  010
    ARM64_SYSREG_ICC_RPR_EL1       = 0xc65b, // 11  000  1100  1011  011
    ARM64_SYSREG_ICH_VTR_EL2       = 0xe659, // 11  100  1100  1011  001
    ARM64_SYSREG_ICH_EISR_EL2      = 0xe65b, // 11  100  1100  1011  011
    ARM64_SYSREG_ICH_ELSR_EL2      = 0xe65d, // 11  100  1100  1011  101
} arm64_sysreg;

typedef enum arm64_msr_reg
{
    //> System registers for MSR
    ARM64_SYSREG_DBGDTRTX_EL0      = 0x9828, // 10  011  0000  0101  000
    ARM64_SYSREG_OSLAR_EL1         = 0x8084, // 10  000  0001  0000  100
    ARM64_SYSREG_PMSWINC_EL0       = 0xdce4,  // 11  011  1001  1100  100

    // Trace Registers
    ARM64_SYSREG_TRCOSLAR          = 0x8884, // 10  001  0001  0000  100
    ARM64_SYSREG_TRCLAR            = 0x8be6, // 10  001  0111  1100  110

    // GICv3 registers
    ARM64_SYSREG_ICC_EOIR1_EL1     = 0xc661, // 11  000  1100  1100  001
    ARM64_SYSREG_ICC_EOIR0_EL1     = 0xc641, // 11  000  1100  1000  001
    ARM64_SYSREG_ICC_DIR_EL1       = 0xc659, // 11  000  1100  1011  001
    ARM64_SYSREG_ICC_SGI1R_EL1     = 0xc65d, // 11  000  1100  1011  101
    ARM64_SYSREG_ICC_ASGI1R_EL1    = 0xc65e, // 11  000  1100  1011  110
    ARM64_SYSREG_ICC_SGI0R_EL1     = 0xc65f, // 11  000  1100  1011  111
} arm64_msr_reg;

//> System PState Field (MSR instruction)
typedef enum arm64_pstate
{
    ARM64_PSTATE_INVALID = 0,
    ARM64_PSTATE_SPSEL = 0x05,
    ARM64_PSTATE_DAIFSET = 0x1e,
    ARM64_PSTATE_DAIFCLR = 0x1f
} arm64_pstate;

//> Vector arrangement specifier (for FloatingPoint/Advanced SIMD insn)
typedef enum arm64_vas
{
    ARM64_VAS_INVALID = 0,
    ARM64_VAS_8B,
    ARM64_VAS_16B,
    ARM64_VAS_4H,
    ARM64_VAS_8H,
    ARM64_VAS_2S,
    ARM64_VAS_4S,
    ARM64_VAS_1D,
    ARM64_VAS_2D,
    ARM64_VAS_1Q,
} arm64_vas;

//> Vector element size specifier
typedef enum arm64_vess
{
    ARM64_VESS_INVALID = 0,
    ARM64_VESS_B,
    ARM64_VESS_H,
    ARM64_VESS_S,
    ARM64_VESS_D,
} arm64_vess;

//> Memory barrier operands
typedef enum arm64_barrier_op
{
    ARM64_BARRIER_INVALID = 0,
    ARM64_BARRIER_OSHLD = 0x1,
    ARM64_BARRIER_OSHST = 0x2,
    ARM64_BARRIER_OSH =   0x3,
    ARM64_BARRIER_NSHLD = 0x5,
    ARM64_BARRIER_NSHST = 0x6,
    ARM64_BARRIER_NSH =   0x7,
    ARM64_BARRIER_ISHLD = 0x9,
    ARM64_BARRIER_ISHST = 0xa,
    ARM64_BARRIER_ISH =   0xb,
    ARM64_BARRIER_LD =    0xd,
    ARM64_BARRIER_ST =    0xe,
    ARM64_BARRIER_SY =    0xf
} arm64_barrier_op;

//> Operand type for instruction's operands
typedef enum arm64_op_type
{
    ARM64_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    ARM64_OP_REG, // = CS_OP_REG (Register operand).
    ARM64_OP_IMM, // = CS_OP_IMM (Immediate operand).
    ARM64_OP_MEM, // = CS_OP_MEM (Memory operand).
    ARM64_OP_FP,  // = CS_OP_FP (Floating-Point operand).
    ARM64_OP_CIMM = 64, // C-Immediate
    ARM64_OP_REG_MRS, // MRS register operand.
    ARM64_OP_REG_MSR, // MSR register operand.
    ARM64_OP_PSTATE, // PState operand.
    ARM64_OP_SYS, // SYS operand for IC/DC/AT/TLBI instructions.
    ARM64_OP_PREFETCH, // Prefetch operand (PRFM).
    ARM64_OP_BARRIER, // Memory barrier operand (ISB/DMB/DSB instructions).
} arm64_op_type;

//> TLBI operations
typedef enum arm64_tlbi_op
{
    ARM64_TLBI_INVALID = 0,
    ARM64_TLBI_VMALLE1IS,
    ARM64_TLBI_VAE1IS,
    ARM64_TLBI_ASIDE1IS,
    ARM64_TLBI_VAAE1IS,
    ARM64_TLBI_VALE1IS,
    ARM64_TLBI_VAALE1IS,
    ARM64_TLBI_ALLE2IS,
    ARM64_TLBI_VAE2IS,
    ARM64_TLBI_ALLE1IS,
    ARM64_TLBI_VALE2IS,
    ARM64_TLBI_VMALLS12E1IS,
    ARM64_TLBI_ALLE3IS,
    ARM64_TLBI_VAE3IS,
    ARM64_TLBI_VALE3IS,
    ARM64_TLBI_IPAS2E1IS,
    ARM64_TLBI_IPAS2LE1IS,
    ARM64_TLBI_IPAS2E1,
    ARM64_TLBI_IPAS2LE1,
    ARM64_TLBI_VMALLE1,
    ARM64_TLBI_VAE1,
    ARM64_TLBI_ASIDE1,
    ARM64_TLBI_VAAE1,
    ARM64_TLBI_VALE1,
    ARM64_TLBI_VAALE1,
    ARM64_TLBI_ALLE2,
    ARM64_TLBI_VAE2,
    ARM64_TLBI_ALLE1,
    ARM64_TLBI_VALE2,
    ARM64_TLBI_VMALLS12E1,
    ARM64_TLBI_ALLE3,
    ARM64_TLBI_VAE3,
    ARM64_TLBI_VALE3,
} arm64_tlbi_op;

//> AT operations
typedef enum arm64_at_op
{
    ARM64_AT_S1E1R,
    ARM64_AT_S1E1W,
    ARM64_AT_S1E0R,
    ARM64_AT_S1E0W,
    ARM64_AT_S1E2R,
    ARM64_AT_S1E2W,
    ARM64_AT_S12E1R,
    ARM64_AT_S12E1W,
    ARM64_AT_S12E0R,
    ARM64_AT_S12E0W,
    ARM64_AT_S1E3R,
    ARM64_AT_S1E3W,
} arm64_at_op;

//> DC operations
typedef enum arm64_dc_op
{
    ARM64_DC_INVALID = 0,
    ARM64_DC_ZVA,
    ARM64_DC_IVAC,
    ARM64_DC_ISW,
    ARM64_DC_CVAC,
    ARM64_DC_CSW,
    ARM64_DC_CVAU,
    ARM64_DC_CIVAC,
    ARM64_DC_CISW,
} arm64_dc_op;

//> IC operations
typedef enum arm64_ic_op
{
    ARM64_IC_INVALID = 0,
    ARM64_IC_IALLUIS,
    ARM64_IC_IALLU,
    ARM64_IC_IVAU,
} arm64_ic_op;

//> Prefetch operations (PRFM)
typedef enum arm64_prefetch_op
{
    ARM64_PRFM_INVALID = 0,
    ARM64_PRFM_PLDL1KEEP = 0x00 + 1,
    ARM64_PRFM_PLDL1STRM = 0x01 + 1,
    ARM64_PRFM_PLDL2KEEP = 0x02 + 1,
    ARM64_PRFM_PLDL2STRM = 0x03 + 1,
    ARM64_PRFM_PLDL3KEEP = 0x04 + 1,
    ARM64_PRFM_PLDL3STRM = 0x05 + 1,
    ARM64_PRFM_PLIL1KEEP = 0x08 + 1,
    ARM64_PRFM_PLIL1STRM = 0x09 + 1,
    ARM64_PRFM_PLIL2KEEP = 0x0a + 1,
    ARM64_PRFM_PLIL2STRM = 0x0b + 1,
    ARM64_PRFM_PLIL3KEEP = 0x0c + 1,
    ARM64_PRFM_PLIL3STRM = 0x0d + 1,
    ARM64_PRFM_PSTL1KEEP = 0x10 + 1,
    ARM64_PRFM_PSTL1STRM = 0x11 + 1,
    ARM64_PRFM_PSTL2KEEP = 0x12 + 1,
    ARM64_PRFM_PSTL2STRM = 0x13 + 1,
    ARM64_PRFM_PSTL3KEEP = 0x14 + 1,
    ARM64_PRFM_PSTL3STRM = 0x15 + 1,
} arm64_prefetch_op;

// Instruction's operand referring to memory
// This is associated with ARM64_OP_MEM operand type above
typedef struct arm64_op_mem
{
    unsigned int base;  // base register
    unsigned int index; // index register
    int32_t disp;   // displacement/offset value
} arm64_op_mem;

// Instruction operand
typedef struct cs_arm64_op
{
    int vector_index;   // Vector Index for some vector operands (or -1 if irrelevant)
    arm64_vas vas;      // Vector Arrangement Specifier
    arm64_vess vess;    // Vector Element Size Specifier
    struct
    {
        arm64_shifter type; // shifter type of this operand
        unsigned int value; // shifter value of this operand
    } shift;
    arm64_extender ext;     // extender type of this operand
    arm64_op_type type; // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int64_t imm;        // immediate value, or index for C-IMM or IMM operand
        double fp;          // floating point value for FP operand
        arm64_op_mem mem;       // base/index/scale/disp value for MEM operand
        arm64_pstate pstate;        // PState field of MSR instruction.
        unsigned int sys;  // IC/DC/AT/TLBI operation (see arm64_ic_op, arm64_dc_op, arm64_at_op, arm64_tlbi_op)
        arm64_prefetch_op prefetch;  // PRFM operation.
        arm64_barrier_op barrier;  // Memory barrier operation (ISB/DMB/DSB instructions).
    };
} cs_arm64_op;

// Instruction structure
typedef struct cs_arm64
{
    arm64_cc cc;    // conditional code for this insn
    bool update_flags;  // does this insn update flags?
    bool writeback; // does this insn request writeback? 'True' means 'yes'

    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;

    cs_arm64_op operands[8]; // operands for this instruction.
} cs_arm64;

//> ARM64 registers
typedef enum arm64_reg
{
    ARM64_REG_INVALID = 0,

    ARM64_REG_X29,
    ARM64_REG_X30,
    ARM64_REG_NZCV,
    ARM64_REG_SP,
    ARM64_REG_WSP,
    ARM64_REG_WZR,
    ARM64_REG_XZR,
    ARM64_REG_B0,
    ARM64_REG_B1,
    ARM64_REG_B2,
    ARM64_REG_B3,
    ARM64_REG_B4,
    ARM64_REG_B5,
    ARM64_REG_B6,
    ARM64_REG_B7,
    ARM64_REG_B8,
    ARM64_REG_B9,
    ARM64_REG_B10,
    ARM64_REG_B11,
    ARM64_REG_B12,
    ARM64_REG_B13,
    ARM64_REG_B14,
    ARM64_REG_B15,
    ARM64_REG_B16,
    ARM64_REG_B17,
    ARM64_REG_B18,
    ARM64_REG_B19,
    ARM64_REG_B20,
    ARM64_REG_B21,
    ARM64_REG_B22,
    ARM64_REG_B23,
    ARM64_REG_B24,
    ARM64_REG_B25,
    ARM64_REG_B26,
    ARM64_REG_B27,
    ARM64_REG_B28,
    ARM64_REG_B29,
    ARM64_REG_B30,
    ARM64_REG_B31,
    ARM64_REG_D0,
    ARM64_REG_D1,
    ARM64_REG_D2,
    ARM64_REG_D3,
    ARM64_REG_D4,
    ARM64_REG_D5,
    ARM64_REG_D6,
    ARM64_REG_D7,
    ARM64_REG_D8,
    ARM64_REG_D9,
    ARM64_REG_D10,
    ARM64_REG_D11,
    ARM64_REG_D12,
    ARM64_REG_D13,
    ARM64_REG_D14,
    ARM64_REG_D15,
    ARM64_REG_D16,
    ARM64_REG_D17,
    ARM64_REG_D18,
    ARM64_REG_D19,
    ARM64_REG_D20,
    ARM64_REG_D21,
    ARM64_REG_D22,
    ARM64_REG_D23,
    ARM64_REG_D24,
    ARM64_REG_D25,
    ARM64_REG_D26,
    ARM64_REG_D27,
    ARM64_REG_D28,
    ARM64_REG_D29,
    ARM64_REG_D30,
    ARM64_REG_D31,
    ARM64_REG_H0,
    ARM64_REG_H1,
    ARM64_REG_H2,
    ARM64_REG_H3,
    ARM64_REG_H4,
    ARM64_REG_H5,
    ARM64_REG_H6,
    ARM64_REG_H7,
    ARM64_REG_H8,
    ARM64_REG_H9,
    ARM64_REG_H10,
    ARM64_REG_H11,
    ARM64_REG_H12,
    ARM64_REG_H13,
    ARM64_REG_H14,
    ARM64_REG_H15,
    ARM64_REG_H16,
    ARM64_REG_H17,
    ARM64_REG_H18,
    ARM64_REG_H19,
    ARM64_REG_H20,
    ARM64_REG_H21,
    ARM64_REG_H22,
    ARM64_REG_H23,
    ARM64_REG_H24,
    ARM64_REG_H25,
    ARM64_REG_H26,
    ARM64_REG_H27,
    ARM64_REG_H28,
    ARM64_REG_H29,
    ARM64_REG_H30,
    ARM64_REG_H31,
    ARM64_REG_Q0,
    ARM64_REG_Q1,
    ARM64_REG_Q2,
    ARM64_REG_Q3,
    ARM64_REG_Q4,
    ARM64_REG_Q5,
    ARM64_REG_Q6,
    ARM64_REG_Q7,
    ARM64_REG_Q8,
    ARM64_REG_Q9,
    ARM64_REG_Q10,
    ARM64_REG_Q11,
    ARM64_REG_Q12,
    ARM64_REG_Q13,
    ARM64_REG_Q14,
    ARM64_REG_Q15,
    ARM64_REG_Q16,
    ARM64_REG_Q17,
    ARM64_REG_Q18,
    ARM64_REG_Q19,
    ARM64_REG_Q20,
    ARM64_REG_Q21,
    ARM64_REG_Q22,
    ARM64_REG_Q23,
    ARM64_REG_Q24,
    ARM64_REG_Q25,
    ARM64_REG_Q26,
    ARM64_REG_Q27,
    ARM64_REG_Q28,
    ARM64_REG_Q29,
    ARM64_REG_Q30,
    ARM64_REG_Q31,
    ARM64_REG_S0,
    ARM64_REG_S1,
    ARM64_REG_S2,
    ARM64_REG_S3,
    ARM64_REG_S4,
    ARM64_REG_S5,
    ARM64_REG_S6,
    ARM64_REG_S7,
    ARM64_REG_S8,
    ARM64_REG_S9,
    ARM64_REG_S10,
    ARM64_REG_S11,
    ARM64_REG_S12,
    ARM64_REG_S13,
    ARM64_REG_S14,
    ARM64_REG_S15,
    ARM64_REG_S16,
    ARM64_REG_S17,
    ARM64_REG_S18,
    ARM64_REG_S19,
    ARM64_REG_S20,
    ARM64_REG_S21,
    ARM64_REG_S22,
    ARM64_REG_S23,
    ARM64_REG_S24,
    ARM64_REG_S25,
    ARM64_REG_S26,
    ARM64_REG_S27,
    ARM64_REG_S28,
    ARM64_REG_S29,
    ARM64_REG_S30,
    ARM64_REG_S31,
    ARM64_REG_W0,
    ARM64_REG_W1,
    ARM64_REG_W2,
    ARM64_REG_W3,
    ARM64_REG_W4,
    ARM64_REG_W5,
    ARM64_REG_W6,
    ARM64_REG_W7,
    ARM64_REG_W8,
    ARM64_REG_W9,
    ARM64_REG_W10,
    ARM64_REG_W11,
    ARM64_REG_W12,
    ARM64_REG_W13,
    ARM64_REG_W14,
    ARM64_REG_W15,
    ARM64_REG_W16,
    ARM64_REG_W17,
    ARM64_REG_W18,
    ARM64_REG_W19,
    ARM64_REG_W20,
    ARM64_REG_W21,
    ARM64_REG_W22,
    ARM64_REG_W23,
    ARM64_REG_W24,
    ARM64_REG_W25,
    ARM64_REG_W26,
    ARM64_REG_W27,
    ARM64_REG_W28,
    ARM64_REG_W29,
    ARM64_REG_W30,
    ARM64_REG_X0,
    ARM64_REG_X1,
    ARM64_REG_X2,
    ARM64_REG_X3,
    ARM64_REG_X4,
    ARM64_REG_X5,
    ARM64_REG_X6,
    ARM64_REG_X7,
    ARM64_REG_X8,
    ARM64_REG_X9,
    ARM64_REG_X10,
    ARM64_REG_X11,
    ARM64_REG_X12,
    ARM64_REG_X13,
    ARM64_REG_X14,
    ARM64_REG_X15,
    ARM64_REG_X16,
    ARM64_REG_X17,
    ARM64_REG_X18,
    ARM64_REG_X19,
    ARM64_REG_X20,
    ARM64_REG_X21,
    ARM64_REG_X22,
    ARM64_REG_X23,
    ARM64_REG_X24,
    ARM64_REG_X25,
    ARM64_REG_X26,
    ARM64_REG_X27,
    ARM64_REG_X28,

    ARM64_REG_V0,
    ARM64_REG_V1,
    ARM64_REG_V2,
    ARM64_REG_V3,
    ARM64_REG_V4,
    ARM64_REG_V5,
    ARM64_REG_V6,
    ARM64_REG_V7,
    ARM64_REG_V8,
    ARM64_REG_V9,
    ARM64_REG_V10,
    ARM64_REG_V11,
    ARM64_REG_V12,
    ARM64_REG_V13,
    ARM64_REG_V14,
    ARM64_REG_V15,
    ARM64_REG_V16,
    ARM64_REG_V17,
    ARM64_REG_V18,
    ARM64_REG_V19,
    ARM64_REG_V20,
    ARM64_REG_V21,
    ARM64_REG_V22,
    ARM64_REG_V23,
    ARM64_REG_V24,
    ARM64_REG_V25,
    ARM64_REG_V26,
    ARM64_REG_V27,
    ARM64_REG_V28,
    ARM64_REG_V29,
    ARM64_REG_V30,
    ARM64_REG_V31,

    ARM64_REG_ENDING,       // <-- mark the end of the list of registers

    //> alias registers

    ARM64_REG_IP1 = ARM64_REG_X16,
    ARM64_REG_IP0 = ARM64_REG_X17,
    ARM64_REG_FP = ARM64_REG_X29,
    ARM64_REG_LR = ARM64_REG_X30,
} arm64_reg;

//> ARM64 instruction
typedef enum arm64_insn
{
    ARM64_INS_INVALID = 0,

    ARM64_INS_ABS,
    ARM64_INS_ADC,
    ARM64_INS_ADDHN,
    ARM64_INS_ADDHN2,
    ARM64_INS_ADDP,
    ARM64_INS_ADD,
    ARM64_INS_ADDV,
    ARM64_INS_ADR,
    ARM64_INS_ADRP,
    ARM64_INS_AESD,
    ARM64_INS_AESE,
    ARM64_INS_AESIMC,
    ARM64_INS_AESMC,
    ARM64_INS_AND,
    ARM64_INS_ASR,
    ARM64_INS_B,
    ARM64_INS_BFM,
    ARM64_INS_BIC,
    ARM64_INS_BIF,
    ARM64_INS_BIT,
    ARM64_INS_BL,
    ARM64_INS_BLR,
    ARM64_INS_BR,
    ARM64_INS_BRK,
    ARM64_INS_BSL,
    ARM64_INS_CBNZ,
    ARM64_INS_CBZ,
    ARM64_INS_CCMN,
    ARM64_INS_CCMP,
    ARM64_INS_CLREX,
    ARM64_INS_CLS,
    ARM64_INS_CLZ,
    ARM64_INS_CMEQ,
    ARM64_INS_CMGE,
    ARM64_INS_CMGT,
    ARM64_INS_CMHI,
    ARM64_INS_CMHS,
    ARM64_INS_CMLE,
    ARM64_INS_CMLT,
    ARM64_INS_CMTST,
    ARM64_INS_CNT,
    ARM64_INS_MOV,
    ARM64_INS_CRC32B,
    ARM64_INS_CRC32CB,
    ARM64_INS_CRC32CH,
    ARM64_INS_CRC32CW,
    ARM64_INS_CRC32CX,
    ARM64_INS_CRC32H,
    ARM64_INS_CRC32W,
    ARM64_INS_CRC32X,
    ARM64_INS_CSEL,
    ARM64_INS_CSINC,
    ARM64_INS_CSINV,
    ARM64_INS_CSNEG,
    ARM64_INS_DCPS1,
    ARM64_INS_DCPS2,
    ARM64_INS_DCPS3,
    ARM64_INS_DMB,
    ARM64_INS_DRPS,
    ARM64_INS_DSB,
    ARM64_INS_DUP,
    ARM64_INS_EON,
    ARM64_INS_EOR,
    ARM64_INS_ERET,
    ARM64_INS_EXTR,
    ARM64_INS_EXT,
    ARM64_INS_FABD,
    ARM64_INS_FABS,
    ARM64_INS_FACGE,
    ARM64_INS_FACGT,
    ARM64_INS_FADD,
    ARM64_INS_FADDP,
    ARM64_INS_FCCMP,
    ARM64_INS_FCCMPE,
    ARM64_INS_FCMEQ,
    ARM64_INS_FCMGE,
    ARM64_INS_FCMGT,
    ARM64_INS_FCMLE,
    ARM64_INS_FCMLT,
    ARM64_INS_FCMP,
    ARM64_INS_FCMPE,
    ARM64_INS_FCSEL,
    ARM64_INS_FCVTAS,
    ARM64_INS_FCVTAU,
    ARM64_INS_FCVT,
    ARM64_INS_FCVTL,
    ARM64_INS_FCVTL2,
    ARM64_INS_FCVTMS,
    ARM64_INS_FCVTMU,
    ARM64_INS_FCVTNS,
    ARM64_INS_FCVTNU,
    ARM64_INS_FCVTN,
    ARM64_INS_FCVTN2,
    ARM64_INS_FCVTPS,
    ARM64_INS_FCVTPU,
    ARM64_INS_FCVTXN,
    ARM64_INS_FCVTXN2,
    ARM64_INS_FCVTZS,
    ARM64_INS_FCVTZU,
    ARM64_INS_FDIV,
    ARM64_INS_FMADD,
    ARM64_INS_FMAX,
    ARM64_INS_FMAXNM,
    ARM64_INS_FMAXNMP,
    ARM64_INS_FMAXNMV,
    ARM64_INS_FMAXP,
    ARM64_INS_FMAXV,
    ARM64_INS_FMIN,
    ARM64_INS_FMINNM,
    ARM64_INS_FMINNMP,
    ARM64_INS_FMINNMV,
    ARM64_INS_FMINP,
    ARM64_INS_FMINV,
    ARM64_INS_FMLA,
    ARM64_INS_FMLS,
    ARM64_INS_FMOV,
    ARM64_INS_FMSUB,
    ARM64_INS_FMUL,
    ARM64_INS_FMULX,
    ARM64_INS_FNEG,
    ARM64_INS_FNMADD,
    ARM64_INS_FNMSUB,
    ARM64_INS_FNMUL,
    ARM64_INS_FRECPE,
    ARM64_INS_FRECPS,
    ARM64_INS_FRECPX,
    ARM64_INS_FRINTA,
    ARM64_INS_FRINTI,
    ARM64_INS_FRINTM,
    ARM64_INS_FRINTN,
    ARM64_INS_FRINTP,
    ARM64_INS_FRINTX,
    ARM64_INS_FRINTZ,
    ARM64_INS_FRSQRTE,
    ARM64_INS_FRSQRTS,
    ARM64_INS_FSQRT,
    ARM64_INS_FSUB,
    ARM64_INS_HINT,
    ARM64_INS_HLT,
    ARM64_INS_HVC,
    ARM64_INS_INS,

    ARM64_INS_ISB,
    ARM64_INS_LD1,
    ARM64_INS_LD1R,
    ARM64_INS_LD2R,
    ARM64_INS_LD2,
    ARM64_INS_LD3R,
    ARM64_INS_LD3,
    ARM64_INS_LD4,
    ARM64_INS_LD4R,

    ARM64_INS_LDARB,
    ARM64_INS_LDARH,
    ARM64_INS_LDAR,
    ARM64_INS_LDAXP,
    ARM64_INS_LDAXRB,
    ARM64_INS_LDAXRH,
    ARM64_INS_LDAXR,
    ARM64_INS_LDNP,
    ARM64_INS_LDP,
    ARM64_INS_LDPSW,
    ARM64_INS_LDRB,
    ARM64_INS_LDR,
    ARM64_INS_LDRH,
    ARM64_INS_LDRSB,
    ARM64_INS_LDRSH,
    ARM64_INS_LDRSW,
    ARM64_INS_LDTRB,
    ARM64_INS_LDTRH,
    ARM64_INS_LDTRSB,

    ARM64_INS_LDTRSH,
    ARM64_INS_LDTRSW,
    ARM64_INS_LDTR,
    ARM64_INS_LDURB,
    ARM64_INS_LDUR,
    ARM64_INS_LDURH,
    ARM64_INS_LDURSB,
    ARM64_INS_LDURSH,
    ARM64_INS_LDURSW,
    ARM64_INS_LDXP,
    ARM64_INS_LDXRB,
    ARM64_INS_LDXRH,
    ARM64_INS_LDXR,
    ARM64_INS_LSL,
    ARM64_INS_LSR,
    ARM64_INS_MADD,
    ARM64_INS_MLA,
    ARM64_INS_MLS,
    ARM64_INS_MOVI,
    ARM64_INS_MOVK,
    ARM64_INS_MOVN,
    ARM64_INS_MOVZ,
    ARM64_INS_MRS,
    ARM64_INS_MSR,
    ARM64_INS_MSUB,
    ARM64_INS_MUL,
    ARM64_INS_MVNI,
    ARM64_INS_NEG,
    ARM64_INS_NOT,
    ARM64_INS_ORN,
    ARM64_INS_ORR,
    ARM64_INS_PMULL2,
    ARM64_INS_PMULL,
    ARM64_INS_PMUL,
    ARM64_INS_PRFM,
    ARM64_INS_PRFUM,
    ARM64_INS_RADDHN,
    ARM64_INS_RADDHN2,
    ARM64_INS_RBIT,
    ARM64_INS_RET,
    ARM64_INS_REV16,
    ARM64_INS_REV32,
    ARM64_INS_REV64,
    ARM64_INS_REV,
    ARM64_INS_ROR,
    ARM64_INS_RSHRN2,
    ARM64_INS_RSHRN,
    ARM64_INS_RSUBHN,
    ARM64_INS_RSUBHN2,
    ARM64_INS_SABAL2,
    ARM64_INS_SABAL,

    ARM64_INS_SABA,
    ARM64_INS_SABDL2,
    ARM64_INS_SABDL,
    ARM64_INS_SABD,
    ARM64_INS_SADALP,
    ARM64_INS_SADDLP,
    ARM64_INS_SADDLV,
    ARM64_INS_SADDL2,
    ARM64_INS_SADDL,
    ARM64_INS_SADDW2,
    ARM64_INS_SADDW,
    ARM64_INS_SBC,
    ARM64_INS_SBFM,
    ARM64_INS_SCVTF,
    ARM64_INS_SDIV,
    ARM64_INS_SHA1C,
    ARM64_INS_SHA1H,
    ARM64_INS_SHA1M,
    ARM64_INS_SHA1P,
    ARM64_INS_SHA1SU0,
    ARM64_INS_SHA1SU1,
    ARM64_INS_SHA256H2,
    ARM64_INS_SHA256H,
    ARM64_INS_SHA256SU0,
    ARM64_INS_SHA256SU1,
    ARM64_INS_SHADD,
    ARM64_INS_SHLL2,
    ARM64_INS_SHLL,
    ARM64_INS_SHL,
    ARM64_INS_SHRN2,
    ARM64_INS_SHRN,
    ARM64_INS_SHSUB,
    ARM64_INS_SLI,
    ARM64_INS_SMADDL,
    ARM64_INS_SMAXP,
    ARM64_INS_SMAXV,
    ARM64_INS_SMAX,
    ARM64_INS_SMC,
    ARM64_INS_SMINP,
    ARM64_INS_SMINV,
    ARM64_INS_SMIN,
    ARM64_INS_SMLAL2,
    ARM64_INS_SMLAL,
    ARM64_INS_SMLSL2,
    ARM64_INS_SMLSL,
    ARM64_INS_SMOV,
    ARM64_INS_SMSUBL,
    ARM64_INS_SMULH,
    ARM64_INS_SMULL2,
    ARM64_INS_SMULL,
    ARM64_INS_SQABS,
    ARM64_INS_SQADD,
    ARM64_INS_SQDMLAL,
    ARM64_INS_SQDMLAL2,
    ARM64_INS_SQDMLSL,
    ARM64_INS_SQDMLSL2,
    ARM64_INS_SQDMULH,
    ARM64_INS_SQDMULL,
    ARM64_INS_SQDMULL2,
    ARM64_INS_SQNEG,
    ARM64_INS_SQRDMULH,
    ARM64_INS_SQRSHL,
    ARM64_INS_SQRSHRN,
    ARM64_INS_SQRSHRN2,
    ARM64_INS_SQRSHRUN,
    ARM64_INS_SQRSHRUN2,
    ARM64_INS_SQSHLU,
    ARM64_INS_SQSHL,
    ARM64_INS_SQSHRN,
    ARM64_INS_SQSHRN2,
    ARM64_INS_SQSHRUN,
    ARM64_INS_SQSHRUN2,
    ARM64_INS_SQSUB,
    ARM64_INS_SQXTN2,
    ARM64_INS_SQXTN,
    ARM64_INS_SQXTUN2,
    ARM64_INS_SQXTUN,
    ARM64_INS_SRHADD,
    ARM64_INS_SRI,
    ARM64_INS_SRSHL,
    ARM64_INS_SRSHR,
    ARM64_INS_SRSRA,
    ARM64_INS_SSHLL2,
    ARM64_INS_SSHLL,
    ARM64_INS_SSHL,
    ARM64_INS_SSHR,
    ARM64_INS_SSRA,
    ARM64_INS_SSUBL2,
    ARM64_INS_SSUBL,
    ARM64_INS_SSUBW2,
    ARM64_INS_SSUBW,
    ARM64_INS_ST1,
    ARM64_INS_ST2,
    ARM64_INS_ST3,
    ARM64_INS_ST4,
    ARM64_INS_STLRB,
    ARM64_INS_STLRH,
    ARM64_INS_STLR,
    ARM64_INS_STLXP,
    ARM64_INS_STLXRB,
    ARM64_INS_STLXRH,
    ARM64_INS_STLXR,
    ARM64_INS_STNP,
    ARM64_INS_STP,
    ARM64_INS_STRB,
    ARM64_INS_STR,
    ARM64_INS_STRH,
    ARM64_INS_STTRB,
    ARM64_INS_STTRH,
    ARM64_INS_STTR,
    ARM64_INS_STURB,
    ARM64_INS_STUR,
    ARM64_INS_STURH,
    ARM64_INS_STXP,
    ARM64_INS_STXRB,
    ARM64_INS_STXRH,
    ARM64_INS_STXR,
    ARM64_INS_SUBHN,
    ARM64_INS_SUBHN2,
    ARM64_INS_SUB,
    ARM64_INS_SUQADD,
    ARM64_INS_SVC,
    ARM64_INS_SYSL,
    ARM64_INS_SYS,
    ARM64_INS_TBL,
    ARM64_INS_TBNZ,
    ARM64_INS_TBX,
    ARM64_INS_TBZ,
    ARM64_INS_TRN1,
    ARM64_INS_TRN2,
    ARM64_INS_UABAL2,
    ARM64_INS_UABAL,
    ARM64_INS_UABA,
    ARM64_INS_UABDL2,
    ARM64_INS_UABDL,
    ARM64_INS_UABD,
    ARM64_INS_UADALP,
    ARM64_INS_UADDLP,
    ARM64_INS_UADDLV,
    ARM64_INS_UADDL2,
    ARM64_INS_UADDL,
    ARM64_INS_UADDW2,
    ARM64_INS_UADDW,
    ARM64_INS_UBFM,
    ARM64_INS_UCVTF,
    ARM64_INS_UDIV,
    ARM64_INS_UHADD,
    ARM64_INS_UHSUB,
    ARM64_INS_UMADDL,
    ARM64_INS_UMAXP,
    ARM64_INS_UMAXV,
    ARM64_INS_UMAX,
    ARM64_INS_UMINP,
    ARM64_INS_UMINV,
    ARM64_INS_UMIN,
    ARM64_INS_UMLAL2,
    ARM64_INS_UMLAL,
    ARM64_INS_UMLSL2,
    ARM64_INS_UMLSL,
    ARM64_INS_UMOV,
    ARM64_INS_UMSUBL,
    ARM64_INS_UMULH,
    ARM64_INS_UMULL2,
    ARM64_INS_UMULL,
    ARM64_INS_UQADD,
    ARM64_INS_UQRSHL,
    ARM64_INS_UQRSHRN,
    ARM64_INS_UQRSHRN2,
    ARM64_INS_UQSHL,
    ARM64_INS_UQSHRN,
    ARM64_INS_UQSHRN2,
    ARM64_INS_UQSUB,
    ARM64_INS_UQXTN2,
    ARM64_INS_UQXTN,
    ARM64_INS_URECPE,
    ARM64_INS_URHADD,
    ARM64_INS_URSHL,
    ARM64_INS_URSHR,
    ARM64_INS_URSQRTE,
    ARM64_INS_URSRA,
    ARM64_INS_USHLL2,
    ARM64_INS_USHLL,
    ARM64_INS_USHL,
    ARM64_INS_USHR,
    ARM64_INS_USQADD,
    ARM64_INS_USRA,
    ARM64_INS_USUBL2,
    ARM64_INS_USUBL,
    ARM64_INS_USUBW2,
    ARM64_INS_USUBW,
    ARM64_INS_UZP1,
    ARM64_INS_UZP2,
    ARM64_INS_XTN2,
    ARM64_INS_XTN,
    ARM64_INS_ZIP1,
    ARM64_INS_ZIP2,

    // alias insn
    ARM64_INS_MNEG,
    ARM64_INS_UMNEGL,
    ARM64_INS_SMNEGL,
    ARM64_INS_NOP,
    ARM64_INS_YIELD,
    ARM64_INS_WFE,
    ARM64_INS_WFI,
    ARM64_INS_SEV,
    ARM64_INS_SEVL,
    ARM64_INS_NGC,
    ARM64_INS_SBFIZ,
    ARM64_INS_UBFIZ,
    ARM64_INS_SBFX,
    ARM64_INS_UBFX,
    ARM64_INS_BFI,
    ARM64_INS_BFXIL,
    ARM64_INS_CMN,
    ARM64_INS_MVN,
    ARM64_INS_TST,
    ARM64_INS_CSET,
    ARM64_INS_CINC,
    ARM64_INS_CSETM,
    ARM64_INS_CINV,
    ARM64_INS_CNEG,
    ARM64_INS_SXTB,
    ARM64_INS_SXTH,
    ARM64_INS_SXTW,
    ARM64_INS_CMP,
    ARM64_INS_UXTB,
    ARM64_INS_UXTH,
    ARM64_INS_UXTW,
    ARM64_INS_IC,
    ARM64_INS_DC,
    ARM64_INS_AT,
    ARM64_INS_TLBI,

    ARM64_INS_ENDING,  // <-- mark the end of the list of insn
} arm64_insn;

//> Group of ARM64 instructions
typedef enum arm64_insn_group
{
    ARM64_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    ARM64_GRP_JUMP, // = CS_GRP_JUMP

    //> Architecture-specific groups
    ARM64_GRP_CRYPTO = 128,
    ARM64_GRP_FPARMV8,
    ARM64_GRP_NEON,
    ARM64_GRP_CRC,

    ARM64_GRP_ENDING,  // <-- mark the end of the list of groups
} arm64_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/capstone.h
================================================
#ifndef CAPSTONE_ENGINE_H
#define CAPSTONE_ENGINE_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>

#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#pragma warning(disable:4100)
#ifdef CAPSTONE_SHARED
#define CAPSTONE_EXPORT __declspec(dllexport)
#else    // defined(CAPSTONE_STATIC)
#define CAPSTONE_EXPORT
#endif
#else
#ifdef __GNUC__
#define CAPSTONE_EXPORT __attribute__((visibility("default")))
#else
#define CAPSTONE_EXPORT
#endif
#endif

#ifdef __GNUC__
#define CAPSTONE_DEPRECATED __attribute__((deprecated))
#elif defined(_MSC_VER)
#define CAPSTONE_DEPRECATED __declspec(deprecated)
#else
#pragma message("WARNING: You need to implement CAPSTONE_DEPRECATED for this compiler")
#define CAPSTONE_DEPRECATED
#endif

// Capstone API version
#define CS_API_MAJOR 3
#define CS_API_MINOR 0

// Macro to create combined version which can be compared to
// result of cs_version() API.
#define CS_MAKE_VERSION(major, minor) ((major << 8) + minor)

// Handle using with all API
typedef size_t csh;

// Architecture type
typedef enum cs_arch
{
    CS_ARCH_ARM = 0,    // ARM architecture (including Thumb, Thumb-2)
    CS_ARCH_ARM64,      // ARM-64, also called AArch64
    CS_ARCH_MIPS,       // Mips architecture
    CS_ARCH_X86,        // X86 architecture (including x86 & x86-64)
    CS_ARCH_PPC,        // PowerPC architecture
    CS_ARCH_SPARC,      // Sparc architecture
    CS_ARCH_SYSZ,       // SystemZ architecture
    CS_ARCH_XCORE,      // XCore architecture
    CS_ARCH_MAX,
    CS_ARCH_ALL = 0xFFFF, // All architectures - for cs_support()
} cs_arch;

// Support value to verify diet mode of the engine.
// If cs_support(CS_SUPPORT_DIET) return True, the engine was compiled
// in diet mode.
#define CS_SUPPORT_DIET (CS_ARCH_ALL + 1)

// Support value to verify X86 reduce mode of the engine.
// If cs_support(CS_SUPPORT_X86_REDUCE) return True, the engine was compiled
// in X86 reduce mode.
#define CS_SUPPORT_X86_REDUCE (CS_ARCH_ALL + 2)

// Mode type
typedef enum cs_mode
{
    CS_MODE_LITTLE_ENDIAN = 0,  // little-endian mode (default mode)
    CS_MODE_ARM = 0,    // 32-bit ARM
    CS_MODE_16 = 1 << 1,    // 16-bit mode (X86)
    CS_MODE_32 = 1 << 2,    // 32-bit mode (X86)
    CS_MODE_64 = 1 << 3,    // 64-bit mode (X86, PPC)
    CS_MODE_THUMB = 1 << 4, // ARM's Thumb mode, including Thumb-2
    CS_MODE_MCLASS = 1 << 5,    // ARM's Cortex-M series
    CS_MODE_V8 = 1 << 6,    // ARMv8 A32 encodings for ARM
    CS_MODE_MICRO = 1 << 4, // MicroMips mode (MIPS)
    CS_MODE_MIPS3 = 1 << 5, // Mips III ISA
    CS_MODE_MIPS32R6 = 1 << 6, // Mips32r6 ISA
    CS_MODE_MIPSGP64 = 1 << 7, // General Purpose Registers are 64-bit wide (MIPS)
    CS_MODE_V9 = 1 << 4, // SparcV9 mode (Sparc)
    CS_MODE_BIG_ENDIAN = 1 << 31,   // big-endian mode
    CS_MODE_MIPS32 = CS_MODE_32,    // Mips32 ISA (Mips)
    CS_MODE_MIPS64 = CS_MODE_64,    // Mips64 ISA (Mips)
} cs_mode;

typedef void* (*cs_malloc_t)(size_t size);
typedef void* (*cs_calloc_t)(size_t nmemb, size_t size);
typedef void* (*cs_realloc_t)(void* ptr, size_t size);
typedef void (*cs_free_t)(void* ptr);
typedef int (*cs_vsnprintf_t)(char* str, size_t size, const char* format, va_list ap);


// User-defined dynamic memory related functions: malloc/calloc/realloc/free/vsnprintf()
// By default, Capstone uses system's malloc(), calloc(), realloc(), free() & vsnprintf().
typedef struct cs_opt_mem
{
    cs_malloc_t malloc;
    cs_calloc_t calloc;
    cs_realloc_t realloc;
    cs_free_t free;
    cs_vsnprintf_t vsnprintf;
} cs_opt_mem;

// Runtime option for the disassembled engine
typedef enum cs_opt_type
{
    CS_OPT_SYNTAX = 1,  // Asssembly output syntax
    CS_OPT_DETAIL,  // Break down instruction structure into details
    CS_OPT_MODE,    // Change engine's mode at run-time
    CS_OPT_MEM, // User-defined dynamic memory related functions
    CS_OPT_SKIPDATA, // Skip data when disassembling. Then engine is in SKIPDATA mode.
    CS_OPT_SKIPDATA_SETUP, // Setup user-defined function for SKIPDATA option
} cs_opt_type;

// Runtime option value (associated with option type above)
typedef enum cs_opt_value
{
    CS_OPT_OFF = 0,  // Turn OFF an option - default option of CS_OPT_DETAIL, CS_OPT_SKIPDATA.
    CS_OPT_ON = 3, // Turn ON an option (CS_OPT_DETAIL, CS_OPT_SKIPDATA).
    CS_OPT_SYNTAX_DEFAULT = 0, // Default asm syntax (CS_OPT_SYNTAX).
    CS_OPT_SYNTAX_INTEL, // X86 Intel asm syntax - default on X86 (CS_OPT_SYNTAX).
    CS_OPT_SYNTAX_ATT,   // X86 ATT asm syntax (CS_OPT_SYNTAX).
    CS_OPT_SYNTAX_NOREGNAME, // Prints register name with only number (CS_OPT_SYNTAX)
} cs_opt_value;

//> Common instruction operand types - to be consistent across all architectures.
typedef enum cs_op_type
{
    CS_OP_INVALID = 0,  // uninitialized/invalid operand.
    CS_OP_REG,          // Register operand.
    CS_OP_IMM,          // Immediate operand.
    CS_OP_MEM,          // Memory operand.
    CS_OP_FP,           // Floating-Point operand.
} cs_op_type;

//> Common instruction groups - to be consistent across all architectures.
typedef enum cs_group_type
{
    CS_GRP_INVALID = 0,  // uninitialized/invalid group.
    CS_GRP_JUMP,    // all jump instructions (conditional+direct+indirect jumps)
    CS_GRP_CALL,    // all call instructions
    CS_GRP_RET,     // all return instructions
    CS_GRP_INT,     // all interrupt instructions (int+syscall)
    CS_GRP_IRET,    // all interrupt return instructions
} cs_group_type;

/*
 User-defined callback function for SKIPDATA option.
 See tests/test_skipdata.c for sample code demonstrating this API.

 @code: the input buffer containing code to be disassembled.
        This is the same buffer passed to cs_disasm().
 @code_size: size (in bytes) of the above @code buffer.
 @offset: the position of the currently-examining byte in the input
      buffer @code mentioned above.
 @user_data: user-data passed to cs_option() via @user_data field in
      cs_opt_skipdata struct below.

 @return: return number of bytes to skip, or 0 to immediately stop disassembling.
*/
typedef size_t (*cs_skipdata_cb_t)(const uint8_t* code, size_t code_size, size_t offset, void* user_data);

// User-customized setup for SKIPDATA option
typedef struct cs_opt_skipdata
{
    // Capstone considers data to skip as special "instructions".
    // User can specify the string for this instruction's "mnemonic" here.
    // By default (if @mnemonic is NULL), Capstone use ".byte".
    const char* mnemonic;

    // User-defined callback function to be called when Capstone hits data.
    // If the returned value from this callback is positive (>0), Capstone
    // will skip exactly that number of bytes & continue. Otherwise, if
    // the callback returns 0, Capstone stops disassembling and returns
    // immediately from cs_disasm()
    // NOTE: if this callback pointer is NULL, Capstone would skip a number
    // of bytes depending on architectures, as following:
    // Arm:     2 bytes (Thumb mode) or 4 bytes.
    // Arm64:   4 bytes.
    // Mips:    4 bytes.
    // PowerPC: 4 bytes.
    // Sparc:   4 bytes.
    // SystemZ: 2 bytes.
    // X86:     1 bytes.
    // XCore:   2 bytes.
    cs_skipdata_cb_t callback;  // default value is NULL

    // User-defined data to be passed to @callback function pointer.
    void* user_data;
} cs_opt_skipdata;


#include "arm.h"
#include "arm64.h"
#include "mips.h"
#include "ppc.h"
#include "sparc.h"
#include "systemz.h"
#include "x86.h"
#include "xcore.h"

// NOTE: All information in cs_detail is only available when CS_OPT_DETAIL = CS_OPT_ON
typedef struct cs_detail
{
    uint8_t regs_read[12]; // list of implicit registers read by this insn
    uint8_t regs_read_count; // number of implicit registers read by this insn

    uint8_t regs_write[20]; // list of implicit registers modified by this insn
    uint8_t regs_write_count; // number of implicit registers modified by this insn

    uint8_t groups[8]; // list of group this instruction belong to
    uint8_t groups_count; // number of groups this insn belongs to

    // Architecture-specific instruction info
    union
    {
        cs_x86 x86; // X86 architecture, including 16-bit, 32-bit & 64-bit mode
        cs_arm64 arm64; // ARM64 architecture (aka AArch64)
        cs_arm arm;     // ARM architecture (including Thumb/Thumb2)
        cs_mips mips;   // MIPS architecture
        cs_ppc ppc; // PowerPC architecture
        cs_sparc sparc; // Sparc architecture
        cs_sysz sysz;   // SystemZ architecture
        cs_xcore xcore; // XCore architecture
    };
} cs_detail;

// Detail information of disassembled instruction
typedef struct cs_insn
{
    // Instruction ID
    // Find the instruction id from header file of corresponding architecture,
    // such as arm.h for ARM, x86.h for X86, etc...
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    // NOTE: in Skipdata mode, "data" instruction has 0 for this id field.
    unsigned int id;

    // Address (EIP) of this instruction
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    uint64_t address;

    // Size of this instruction
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    uint16_t size;
    // Machine bytes of this instruction, with number of bytes indicated by @size above
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    uint8_t bytes[16];

    // Ascii text of instruction mnemonic
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    char mnemonic[32];

    // Ascii text of instruction operands
    // This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    char op_str[160];

    // Pointer to cs_detail.
    // NOTE: detail pointer is only valid when both requirements below are met:
    // (1) CS_OP_DETAIL = CS_OPT_ON
    // (2) Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)
    //
    // NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer
    //     is not NULL, its content is still irrelevant.
    cs_detail* detail;
} cs_insn;


// Calculate the offset of a disassembled instruction in its buffer, given its position
// in its array of disassembled insn
// NOTE: this macro works with position (>=1), not index
#define CS_INSN_OFFSET(insns, post) (insns[post - 1].address - insns[0].address)


// All type of errors encountered by Capstone API.
// These are values returned by cs_errno()
typedef enum cs_err
{
    CS_ERR_OK = 0,   // No error: everything was fine
    CS_ERR_MEM,      // Out-Of-Memory error: cs_open(), cs_disasm(), cs_disasm_iter()
    CS_ERR_ARCH,     // Unsupported architecture: cs_open()
    CS_ERR_HANDLE,   // Invalid handle: cs_op_count(), cs_op_index()
    CS_ERR_CSH,      // Invalid csh argument: cs_close(), cs_errno(), cs_option()
    CS_ERR_MODE,     // Invalid/unsupported mode: cs_open()
    CS_ERR_OPTION,   // Invalid/unsupported option: cs_option()
    CS_ERR_DETAIL,   // Information is unavailable because detail option is OFF
    CS_ERR_MEMSETUP, // Dynamic memory management uninitialized (see CS_OPT_MEM)
    CS_ERR_VERSION,  // Unsupported version (bindings)
    CS_ERR_DIET,     // Access irrelevant data in "diet" engine
    CS_ERR_SKIPDATA, // Access irrelevant data for "data" instruction in SKIPDATA mode
    CS_ERR_X86_ATT,  // X86 AT&T syntax is unsupported (opt-out at compile time)
    CS_ERR_X86_INTEL, // X86 Intel syntax is unsupported (opt-out at compile time)
} cs_err;

/*
 Return combined API version & major and minor version numbers.

 @major: major number of API version
 @minor: minor number of API version

 @return hexical number as (major << 8 | minor), which encodes both
     major & minor versions.
     NOTE: This returned value can be compared with version number made
     with macro CS_MAKE_VERSION

 For example, second API version would return 1 in @major, and 1 in @minor
 The return value would be 0x0101

 NOTE: if you only care about returned value, but not major and minor values,
 set both @major & @minor arguments to NULL.
*/
CAPSTONE_EXPORT
unsigned int cs_version(int* major, int* minor);


/*
 This API can be used to either ask for archs supported by this library,
 or check to see if the library was compile with 'diet' option (or called
 in 'diet' mode).

 To check if a particular arch is supported by this library, set @query to
 arch mode (CS_ARCH_* value).
 To verify if this library supports all the archs, use CS_ARCH_ALL.

 To check if this library is in 'diet' mode, set @query to CS_SUPPORT_DIET.

 @return True if this library supports the given arch, or in 'diet' mode.
*/
CAPSTONE_EXPORT
bool cs_support(int query);

/*
 Initialize CS handle: this must be done before any usage of CS.

 @arch: architecture type (CS_ARCH_*)
 @mode: hardware mode. This is combined of CS_MODE_*
 @handle: pointer to handle, which will be updated at return time

 @return CS_ERR_OK on success, or other value on failure (refer to cs_err enum
 for detailed error).
*/
CAPSTONE_EXPORT
cs_err cs_open(cs_arch arch, cs_mode mode, csh* handle);

/*
 Close CS handle: MUST do to release the handle when it is not used anymore.
 NOTE: this must be only called when there is no longer usage of Capstone,
 not even access to cs_insn array. The reason is the this API releases some
 cached memory, thus access to any Capstone API after cs_close() might crash
 your application.

 In fact,this API invalidate @handle by ZERO out its value (i.e *handle = 0).

 @handle: pointer to a handle returned by cs_open()

 @return CS_ERR_OK on success, or other value on failure (refer to cs_err enum
 for detailed error).
*/
CAPSTONE_EXPORT
cs_err cs_close(csh* handle);

/*
 Set option for disassembling engine at runtime

 @handle: handle returned by cs_open()
 @type: type of option to be set
 @value: option value corresponding with @type

 @return: CS_ERR_OK on success, or other value on failure.
 Refer to cs_err enum for detailed error.

 NOTE: in the case of CS_OPT_MEM, handle's value can be anything,
 so that cs_option(handle, CS_OPT_MEM, value) can (i.e must) be called
 even before cs_open()
*/
CAPSTONE_EXPORT
cs_err cs_option(csh handle, cs_opt_type type, size_t value);

/*
 Report the last error number when some API function fail.
 Like glibc's errno, cs_errno might not retain its old value once accessed.

 @handle: handle returned by cs_open()

 @return: error code of cs_err enum type (CS_ERR_*, see above)
*/
CAPSTONE_EXPORT
cs_err cs_errno(csh handle);


/*
 Return a string describing given error code.

 @code: error code (see CS_ERR_* above)

 @return: returns a pointer to a string that describes the error code
    passed in the argument @code
*/
CAPSTONE_EXPORT
const char* cs_strerror(cs_err code);

/*
 Disassemble binary code, given the code buffer, size, address and number
 of instructions to be decoded.
 This API dynamicly allocate memory to contain disassembled instruction.
 Resulted instructions will be put into @*insn

 NOTE 1: this API will automatically determine memory needed to contain
 output disassembled instructions in @insn.

 NOTE 2: caller must free the allocated memory itself to avoid memory leaking.

 NOTE 3: for system with scarce memory to be dynamically allocated such as
 OS kernel or firmware, the API cs_disasm_iter() might be a better choice than
 cs_disasm(). The reason is that with cs_disasm(), based on limited available
 memory, we have to calculate in advance how many instructions to be disassembled,
 which complicates things. This is especially troublesome for the case @count=0,
 when cs_disasm() runs uncontrolly (until either end of input buffer, or
 when it encounters an invalid instruction).

 @handle: handle returned by cs_open()
 @code: buffer containing raw binary code to be disassembled.
 @code_size: size of the above code buffer.
 @address: address of the first instruction in given raw code buffer.
 @insn: array of instructions filled in by this API.
       NOTE: @insn will be allocated by this function, and should be freed
       with cs_free() API.
 @count: number of instrutions to be disassembled, or 0 to get all of them

 @return: the number of succesfully disassembled instructions,
 or 0 if this function failed to disassemble the given code

 On failure, call cs_errno() for error code.
*/
CAPSTONE_EXPORT
size_t cs_disasm(csh handle,
                 const uint8_t* code, size_t code_size,
                 uint64_t address,
                 size_t count,
                 cs_insn** insn);

/*
  Deprecated function - to be retired in the next version!
  Use cs_disasm() instead of cs_disasm_ex()
*/
CAPSTONE_EXPORT
CAPSTONE_DEPRECATED
size_t cs_disasm_ex(csh handle,
                    const uint8_t* code, size_t code_size,
                    uint64_t address,
                    size_t count,
                    cs_insn** insn);

/*
 Free memory allocated by cs_malloc() or cs_disasm() (argument @insn)

 @insn: pointer returned by @insn argument in cs_disasm() or cs_malloc()
 @count: number of cs_insn structures returned by cs_disasm(), or 1
     to free memory allocated by cs_malloc().
*/
CAPSTONE_EXPORT
void cs_free(cs_insn* insn, size_t count);


/*
 Allocate memory for 1 instruction to be used by cs_disasm_iter().

 @handle: handle returned by cs_open()

 NOTE: when no longer in use, you can reclaim the memory allocated for
 this instruction with cs_free(insn, 1)
*/
CAPSTONE_EXPORT
cs_insn* cs_malloc(csh handle);

/*
 Fast API to disassemble binary code, given the code buffer, size, address
 and number of instructions to be decoded.
 This API put the resulted instruction into a given cache in @insn.
 See tests/test_iter.c for sample code demonstrating this API.

 NOTE 1: this API will update @code, @size & @address to point to the next
 instruction in the input buffer. Therefore, it is covenient to use
 cs_disasm_iter() inside a loop to quickly iterate all the instructions.
 While decoding one instruction at a time can also be achieved with
 cs_disasm(count=1), some benchmarks shown that cs_disasm_iter() can be 30%
 faster on random input.

 NOTE 2: the cache in @insn can be created with cs_malloc() API.

 NOTE 3: for system with scarce memory to be dynamically allocated such as
 OS kernel or firmware, this API is recommended over cs_disasm(), which
 allocates memory based on the number of instructions to be disassembled.
 The reason is that with cs_disasm(), based on limited available memory,
 we have to calculate in advance how many instructions to be disassembled,
 which complicates things. This is especially troublesome for the case
 @count=0, when cs_disasm() runs uncontrolly (until either end of input
 buffer, or when it encounters an invalid instruction).

 @handle: handle returned by cs_open()
 @code: buffer containing raw binary code to be disassembled
 @code_size: size of above code
 @address: address of the first insn in given raw code buffer
 @insn: pointer to instruction to be filled in by this API.

 @return: true if this API successfully decode 1 instruction,
 or false otherwise.

 On failure, call cs_errno() for error code.
*/
CAPSTONE_EXPORT
bool cs_disasm_iter(csh handle,
                    const uint8_t** code, size_t* size,
                    uint64_t* address, cs_insn* insn);

/*
 Return friendly name of regiser in a string.
 Find the instruction id from header file of corresponding architecture (arm.h for ARM,
 x86.h for X86, ...)

 WARN: when in 'diet' mode, this API is irrelevant because engine does not
 store register name.

 @handle: handle returned by cs_open()
 @reg_id: register id

 @return: string name of the register, or NULL if @reg_id is invalid.
*/
CAPSTONE_EXPORT
const char* cs_reg_name(csh handle, unsigned int reg_id);

/*
 Return friendly name of an instruction in a string.
 Find the instruction id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)

 WARN: when in 'diet' mode, this API is irrelevant because the engine does not
 store instruction name.

 @handle: handle returned by cs_open()
 @insn_id: instruction id

 @return: string name of the instruction, or NULL if @insn_id is invalid.
*/
CAPSTONE_EXPORT
const char* cs_insn_name(csh handle, unsigned int insn_id);

/*
 Return friendly name of a group id (that an instruction can belong to)
 Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)

 WARN: when in 'diet' mode, this API is irrelevant because the engine does not
 store group name.

 @handle: handle returned by cs_open()
 @group_id: group id

 @return: string name of the group, or NULL if @group_id is invalid.
*/
CAPSTONE_EXPORT
const char* cs_group_name(csh handle, unsigned int group_id);

/*
 Check if a disassembled instruction belong to a particular group.
 Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
 Internally, this simply verifies if @group_id matches any member of insn->groups array.

 NOTE: this API is only valid when detail option is ON (which is OFF by default).

 WARN: when in 'diet' mode, this API is irrelevant because the engine does not
 update @groups array.

 @handle: handle returned by cs_open()
 @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
 @group_id: group that you want to check if this instruction belong to.

 @return: true if this instruction indeed belongs to aboved group, or false otherwise.
*/
CAPSTONE_EXPORT
bool cs_insn_group(csh handle, const cs_insn* insn, unsigned int group_id);

/*
 Check if a disassembled instruction IMPLICITLY used a particular register.
 Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
 Internally, this simply verifies if @reg_id matches any member of insn->regs_read array.

 NOTE: this API is only valid when detail option is ON (which is OFF by default)

 WARN: when in 'diet' mode, this API is irrelevant because the engine does not
 update @regs_read array.

 @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
 @reg_id: register that you want to check if this instruction used it.

 @return: true if this instruction indeed implicitly used aboved register, or false otherwise.
*/
CAPSTONE_EXPORT
bool cs_reg_read(csh handle, const cs_insn* insn, unsigned int reg_id);

/*
 Check if a disassembled instruction IMPLICITLY modified a particular register.
 Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
 Internally, this simply verifies if @reg_id matches any member of insn->regs_write array.

 NOTE: this API is only valid when detail option is ON (which is OFF by default)

 WARN: when in 'diet' mode, this API is irrelevant because the engine does not
 update @regs_write array.

 @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
 @reg_id: register that you want to check if this instruction modified it.

 @return: true if this instruction indeed implicitly modified aboved register, or false otherwise.
*/
CAPSTONE_EXPORT
bool cs_reg_write(csh handle, const cs_insn* insn, unsigned int reg_id);

/*
 Count the number of operands of a given type.
 Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)

 NOTE: this API is only valid when detail option is ON (which is OFF by default)

 @handle: handle returned by cs_open()
 @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
 @op_type: Operand type to be found.

 @return: number of operands of given type @op_type in instruction @insn,
 or -1 on failure.
*/
CAPSTONE_EXPORT
int cs_op_count(csh handle, const cs_insn* insn, unsigned int op_type);

/*
 Retrieve the position of operand of given type in <arch>.operands[] array.
 Later, the operand can be accessed using the returned position.
 Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)

 NOTE: this API is only valid when detail option is ON (which is OFF by default)

 @handle: handle returned by cs_open()
 @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
 @op_type: Operand type to be found.
 @position: position of the operand to be found. This must be in the range
            [1, cs_op_count(handle, insn, op_type)]

 @return: index of operand of given type @op_type in <arch>.operands[] array
 in instruction @insn, or -1 on failure.
*/
CAPSTONE_EXPORT
int cs_op_index(csh handle, const cs_insn* insn, unsigned int op_type,
                unsigned int position);

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/mips.h
================================================
#ifndef CAPSTONE_MIPS_H
#define CAPSTONE_MIPS_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

// GCC MIPS toolchain has a default macro called "mips" which breaks
// compilation
#undef mips

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> Operand type for instruction's operands
typedef enum mips_op_type
{
    MIPS_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    MIPS_OP_REG, // = CS_OP_REG (Register operand).
    MIPS_OP_IMM, // = CS_OP_IMM (Immediate operand).
    MIPS_OP_MEM, // = CS_OP_MEM (Memory operand).
} mips_op_type;

// Instruction's operand referring to memory
// This is associated with MIPS_OP_MEM operand type above
typedef struct mips_op_mem
{
    unsigned int base;  // base register
    int64_t disp;   // displacement/offset value
} mips_op_mem;

// Instruction operand
typedef struct cs_mips_op
{
    mips_op_type type;  // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int64_t imm;        // immediate value for IMM operand
        mips_op_mem mem;    // base/index/scale/disp value for MEM operand
    };
} cs_mips_op;

// Instruction structure
typedef struct cs_mips
{
    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;
    cs_mips_op operands[8]; // operands for this instruction.
} cs_mips;

//> MIPS registers
typedef enum mips_reg
{
    MIPS_REG_INVALID = 0,
    //> General purpose registers
    MIPS_REG_0,
    MIPS_REG_1,
    MIPS_REG_2,
    MIPS_REG_3,
    MIPS_REG_4,
    MIPS_REG_5,
    MIPS_REG_6,
    MIPS_REG_7,
    MIPS_REG_8,
    MIPS_REG_9,
    MIPS_REG_10,
    MIPS_REG_11,
    MIPS_REG_12,
    MIPS_REG_13,
    MIPS_REG_14,
    MIPS_REG_15,
    MIPS_REG_16,
    MIPS_REG_17,
    MIPS_REG_18,
    MIPS_REG_19,
    MIPS_REG_20,
    MIPS_REG_21,
    MIPS_REG_22,
    MIPS_REG_23,
    MIPS_REG_24,
    MIPS_REG_25,
    MIPS_REG_26,
    MIPS_REG_27,
    MIPS_REG_28,
    MIPS_REG_29,
    MIPS_REG_30,
    MIPS_REG_31,

    //> DSP registers
    MIPS_REG_DSPCCOND,
    MIPS_REG_DSPCARRY,
    MIPS_REG_DSPEFI,
    MIPS_REG_DSPOUTFLAG,
    MIPS_REG_DSPOUTFLAG16_19,
    MIPS_REG_DSPOUTFLAG20,
    MIPS_REG_DSPOUTFLAG21,
    MIPS_REG_DSPOUTFLAG22,
    MIPS_REG_DSPOUTFLAG23,
    MIPS_REG_DSPPOS,
    MIPS_REG_DSPSCOUNT,

    //> ACC registers
    MIPS_REG_AC0,
    MIPS_REG_AC1,
    MIPS_REG_AC2,
    MIPS_REG_AC3,

    //> COP registers
    MIPS_REG_CC0,
    MIPS_REG_CC1,
    MIPS_REG_CC2,
    MIPS_REG_CC3,
    MIPS_REG_CC4,
    MIPS_REG_CC5,
    MIPS_REG_CC6,
    MIPS_REG_CC7,

    //> FPU registers
    MIPS_REG_F0,
    MIPS_REG_F1,
    MIPS_REG_F2,
    MIPS_REG_F3,
    MIPS_REG_F4,
    MIPS_REG_F5,
    MIPS_REG_F6,
    MIPS_REG_F7,
    MIPS_REG_F8,
    MIPS_REG_F9,
    MIPS_REG_F10,
    MIPS_REG_F11,
    MIPS_REG_F12,
    MIPS_REG_F13,
    MIPS_REG_F14,
    MIPS_REG_F15,
    MIPS_REG_F16,
    MIPS_REG_F17,
    MIPS_REG_F18,
    MIPS_REG_F19,
    MIPS_REG_F20,
    MIPS_REG_F21,
    MIPS_REG_F22,
    MIPS_REG_F23,
    MIPS_REG_F24,
    MIPS_REG_F25,
    MIPS_REG_F26,
    MIPS_REG_F27,
    MIPS_REG_F28,
    MIPS_REG_F29,
    MIPS_REG_F30,
    MIPS_REG_F31,

    MIPS_REG_FCC0,
    MIPS_REG_FCC1,
    MIPS_REG_FCC2,
    MIPS_REG_FCC3,
    MIPS_REG_FCC4,
    MIPS_REG_FCC5,
    MIPS_REG_FCC6,
    MIPS_REG_FCC7,

    //> AFPR128
    MIPS_REG_W0,
    MIPS_REG_W1,
    MIPS_REG_W2,
    MIPS_REG_W3,
    MIPS_REG_W4,
    MIPS_REG_W5,
    MIPS_REG_W6,
    MIPS_REG_W7,
    MIPS_REG_W8,
    MIPS_REG_W9,
    MIPS_REG_W10,
    MIPS_REG_W11,
    MIPS_REG_W12,
    MIPS_REG_W13,
    MIPS_REG_W14,
    MIPS_REG_W15,
    MIPS_REG_W16,
    MIPS_REG_W17,
    MIPS_REG_W18,
    MIPS_REG_W19,
    MIPS_REG_W20,
    MIPS_REG_W21,
    MIPS_REG_W22,
    MIPS_REG_W23,
    MIPS_REG_W24,
    MIPS_REG_W25,
    MIPS_REG_W26,
    MIPS_REG_W27,
    MIPS_REG_W28,
    MIPS_REG_W29,
    MIPS_REG_W30,
    MIPS_REG_W31,

    MIPS_REG_HI,
    MIPS_REG_LO,

    MIPS_REG_P0,
    MIPS_REG_P1,
    MIPS_REG_P2,

    MIPS_REG_MPL0,
    MIPS_REG_MPL1,
    MIPS_REG_MPL2,

    MIPS_REG_ENDING,    // <-- mark the end of the list or registers

    // alias registers
    MIPS_REG_ZERO = MIPS_REG_0,
    MIPS_REG_AT = MIPS_REG_1,
    MIPS_REG_V0 = MIPS_REG_2,
    MIPS_REG_V1 = MIPS_REG_3,
    MIPS_REG_A0 = MIPS_REG_4,
    MIPS_REG_A1 = MIPS_REG_5,
    MIPS_REG_A2 = MIPS_REG_6,
    MIPS_REG_A3 = MIPS_REG_7,
    MIPS_REG_T0 = MIPS_REG_8,
    MIPS_REG_T1 = MIPS_REG_9,
    MIPS_REG_T2 = MIPS_REG_10,
    MIPS_REG_T3 = MIPS_REG_11,
    MIPS_REG_T4 = MIPS_REG_12,
    MIPS_REG_T5 = MIPS_REG_13,
    MIPS_REG_T6 = MIPS_REG_14,
    MIPS_REG_T7 = MIPS_REG_15,
    MIPS_REG_S0 = MIPS_REG_16,
    MIPS_REG_S1 = MIPS_REG_17,
    MIPS_REG_S2 = MIPS_REG_18,
    MIPS_REG_S3 = MIPS_REG_19,
    MIPS_REG_S4 = MIPS_REG_20,
    MIPS_REG_S5 = MIPS_REG_21,
    MIPS_REG_S6 = MIPS_REG_22,
    MIPS_REG_S7 = MIPS_REG_23,
    MIPS_REG_T8 = MIPS_REG_24,
    MIPS_REG_T9 = MIPS_REG_25,
    MIPS_REG_K0 = MIPS_REG_26,
    MIPS_REG_K1 = MIPS_REG_27,
    MIPS_REG_GP = MIPS_REG_28,
    MIPS_REG_SP = MIPS_REG_29,
    MIPS_REG_FP = MIPS_REG_30, MIPS_REG_S8 = MIPS_REG_30,
    MIPS_REG_RA = MIPS_REG_31,

    MIPS_REG_HI0 = MIPS_REG_AC0,
    MIPS_REG_HI1 = MIPS_REG_AC1,
    MIPS_REG_HI2 = MIPS_REG_AC2,
    MIPS_REG_HI3 = MIPS_REG_AC3,

    MIPS_REG_LO0 = MIPS_REG_HI0,
    MIPS_REG_LO1 = MIPS_REG_HI1,
    MIPS_REG_LO2 = MIPS_REG_HI2,
    MIPS_REG_LO3 = MIPS_REG_HI3,
} mips_reg;

//> MIPS instruction
typedef enum mips_insn
{
    MIPS_INS_INVALID = 0,

    MIPS_INS_ABSQ_S,
    MIPS_INS_ADD,
    MIPS_INS_ADDIUPC,
    MIPS_INS_ADDQH,
    MIPS_INS_ADDQH_R,
    MIPS_INS_ADDQ,
    MIPS_INS_ADDQ_S,
    MIPS_INS_ADDSC,
    MIPS_INS_ADDS_A,
    MIPS_INS_ADDS_S,
    MIPS_INS_ADDS_U,
    MIPS_INS_ADDUH,
    MIPS_INS_ADDUH_R,
    MIPS_INS_ADDU,
    MIPS_INS_ADDU_S,
    MIPS_INS_ADDVI,
    MIPS_INS_ADDV,
    MIPS_INS_ADDWC,
    MIPS_INS_ADD_A,
    MIPS_INS_ADDI,
    MIPS_INS_ADDIU,
    MIPS_INS_ALIGN,
    MIPS_INS_ALUIPC,
    MIPS_INS_AND,
    MIPS_INS_ANDI,
    MIPS_INS_APPEND,
    MIPS_INS_ASUB_S,
    MIPS_INS_ASUB_U,
    MIPS_INS_AUI,
    MIPS_INS_AUIPC,
    MIPS_INS_AVER_S,
    MIPS_INS_AVER_U,
    MIPS_INS_AVE_S,
    MIPS_INS_AVE_U,
    MIPS_INS_BADDU,
    MIPS_INS_BAL,
    MIPS_INS_BALC,
    MIPS_INS_BALIGN,
    MIPS_INS_BC,
    MIPS_INS_BC0F,
    MIPS_INS_BC0FL,
    MIPS_INS_BC0T,
    MIPS_INS_BC0TL,
    MIPS_INS_BC1EQZ,
    MIPS_INS_BC1F,
    MIPS_INS_BC1FL,
    MIPS_INS_BC1NEZ,
    MIPS_INS_BC1T,
    MIPS_INS_BC1TL,
    MIPS_INS_BC2EQZ,
    MIPS_INS_BC2F,
    MIPS_INS_BC2FL,
    MIPS_INS_BC2NEZ,
    MIPS_INS_BC2T,
    MIPS_INS_BC2TL,
    MIPS_INS_BC3F,
    MIPS_INS_BC3FL,
    MIPS_INS_BC3T,
    MIPS_INS_BC3TL,
    MIPS_INS_BCLRI,
    MIPS_INS_BCLR,
    MIPS_INS_BEQ,
    MIPS_INS_BEQC,
    MIPS_INS_BEQL,
    MIPS_INS_BEQZALC,
    MIPS_INS_BEQZC,
    MIPS_INS_BGEC,
    MIPS_INS_BGEUC,
    MIPS_INS_BGEZ,
    MIPS_INS_BGEZAL,
    MIPS_INS_BGEZALC,
    MIPS_INS_BGEZALL,
    MIPS_INS_BGEZALS,
    MIPS_INS_BGEZC,
    MIPS_INS_BGEZL,
    MIPS_INS_BGTZ,
    MIPS_INS_BGTZALC,
    MIPS_INS_BGTZC,
    MIPS_INS_BGTZL,
    MIPS_INS_BINSLI,
    MIPS_INS_BINSL,
    MIPS_INS_BINSRI,
    MIPS_INS_BINSR,
    MIPS_INS_BITREV,
    MIPS_INS_BITSWAP,
    MIPS_INS_BLEZ,
    MIPS_INS_BLEZALC,
    MIPS_INS_BLEZC,
    MIPS_INS_BLEZL,
    MIPS_INS_BLTC,
    MIPS_INS_BLTUC,
    MIPS_INS_BLTZ,
    MIPS_INS_BLTZAL,
    MIPS_INS_BLTZALC,
    MIPS_INS_BLTZALL,
    MIPS_INS_BLTZALS,
    MIPS_INS_BLTZC,
    MIPS_INS_BLTZL,
    MIPS_INS_BMNZI,
    MIPS_INS_BMNZ,
    MIPS_INS_BMZI,
    MIPS_INS_BMZ,
    MIPS_INS_BNE,
    MIPS_INS_BNEC,
    MIPS_INS_BNEGI,
    MIPS_INS_BNEG,
    MIPS_INS_BNEL,
    MIPS_INS_BNEZALC,
    MIPS_INS_BNEZC,
    MIPS_INS_BNVC,
    MIPS_INS_BNZ,
    MIPS_INS_BOVC,
    MIPS_INS_BPOSGE32,
    MIPS_INS_BREAK,
    MIPS_INS_BSELI,
    MIPS_INS_BSEL,
    MIPS_INS_BSETI,
    MIPS_INS_BSET,
    MIPS_INS_BZ,
    MIPS_INS_BEQZ,
    MIPS_INS_B,
    MIPS_INS_BNEZ,
    MIPS_INS_BTEQZ,
    MIPS_INS_BTNEZ,
    MIPS_INS_CACHE,
    MIPS_INS_CEIL,
    MIPS_INS_CEQI,
    MIPS_INS_CEQ,
    MIPS_INS_CFC1,
    MIPS_INS_CFCMSA,
    MIPS_INS_CINS,
    MIPS_INS_CINS32,
    MIPS_INS_CLASS,
    MIPS_INS_CLEI_S,
    MIPS_INS_CLEI_U,
    MIPS_INS_CLE_S,
    MIPS_INS_CLE_U,
    MIPS_INS_CLO,
    MIPS_INS_CLTI_S,
    MIPS_INS_CLTI_U,
    MIPS_INS_CLT_S,
    MIPS_INS_CLT_U,
    MIPS_INS_CLZ,
    MIPS_INS_CMPGDU,
    MIPS_INS_CMPGU,
    MIPS_INS_CMPU,
    MIPS_INS_CMP,
    MIPS_INS_COPY_S,
    MIPS_INS_COPY_U,
    MIPS_INS_CTC1,
    MIPS_INS_CTCMSA,
    MIPS_INS_CVT,
    MIPS_INS_C,
    MIPS_INS_CMPI,
    MIPS_INS_DADD,
    MIPS_INS_DADDI,
    MIPS_INS_DADDIU,
    MIPS_INS_DADDU,
    MIPS_INS_DAHI,
    MIPS_INS_DALIGN,
    MIPS_INS_DATI,
    MIPS_INS_DAUI,
    MIPS_INS_DBITSWAP,
    MIPS_INS_DCLO,
    MIPS_INS_DCLZ,
    MIPS_INS_DDIV,
    MIPS_INS_DDIVU,
    MIPS_INS_DERET,
    MIPS_INS_DEXT,
    MIPS_INS_DEXTM,
    MIPS_INS_DEXTU,
    MIPS_INS_DI,
    MIPS_INS_DINS,
    MIPS_INS_DINSM,
    MIPS_INS_DINSU,
    MIPS_INS_DIV,
    MIPS_INS_DIVU,
    MIPS_INS_DIV_S,
    MIPS_INS_DIV_U,
    MIPS_INS_DLSA,
    MIPS_INS_DMFC0,
    MIPS_INS_DMFC1,
    MIPS_INS_DMFC2,
    MIPS_INS_DMOD,
    MIPS_INS_DMODU,
    MIPS_INS_DMTC0,
    MIPS_INS_DMTC1,
    MIPS_INS_DMTC2,
    MIPS_INS_DMUH,
    MIPS_INS_DMUHU,
    MIPS_INS_DMUL,
    MIPS_INS_DMULT,
    MIPS_INS_DMULTU,
    MIPS_INS_DMULU,
    MIPS_INS_DOTP_S,
    MIPS_INS_DOTP_U,
    MIPS_INS_DPADD_S,
    MIPS_INS_DPADD_U,
    MIPS_INS_DPAQX_SA,
    MIPS_INS_DPAQX_S,
    MIPS_INS_DPAQ_SA,
    MIPS_INS_DPAQ_S,
    MIPS_INS_DPAU,
    MIPS_INS_DPAX,
    MIPS_INS_DPA,
    MIPS_INS_DPOP,
    MIPS_INS_DPSQX_SA,
    MIPS_INS_DPSQX_S,
    MIPS_INS_DPSQ_SA,
    MIPS_INS_DPSQ_S,
    MIPS_INS_DPSUB_S,
    MIPS_INS_DPSUB_U,
    MIPS_INS_DPSU,
    MIPS_INS_DPSX,
    MIPS_INS_DPS,
    MIPS_INS_DROTR,
    MIPS_INS_DROTR32,
    MIPS_INS_DROTRV,
    MIPS_INS_DSBH,
    MIPS_INS_DSHD,
    MIPS_INS_DSLL,
    MIPS_INS_DSLL32,
    MIPS_INS_DSLLV,
    MIPS_INS_DSRA,
    MIPS_INS_DSRA32,
    MIPS_INS_DSRAV,
    MIPS_INS_DSRL,
    MIPS_INS_DSRL32,
    MIPS_INS_DSRLV,
    MIPS_INS_DSUB,
    MIPS_INS_DSUBU,
    MIPS_INS_EHB,
    MIPS_INS_EI,
    MIPS_INS_ERET,
    MIPS_INS_EXT,
    MIPS_INS_EXTP,
    MIPS_INS_EXTPDP,
    MIPS_INS_EXTPDPV,
    MIPS_INS_EXTPV,
    MIPS_INS_EXTRV_RS,
    MIPS_INS_EXTRV_R,
    MIPS_INS_EXTRV_S,
    MIPS_INS_EXTRV,
    MIPS_INS_EXTR_RS,
    MIPS_INS_EXTR_R,
    MIPS_INS_EXTR_S,
    MIPS_INS_EXTR,
    MIPS_INS_EXTS,
    MIPS_INS_EXTS32,
    MIPS_INS_ABS,
    MIPS_INS_FADD,
    MIPS_INS_FCAF,
    MIPS_INS_FCEQ,
    MIPS_INS_FCLASS,
    MIPS_INS_FCLE,
    MIPS_INS_FCLT,
    MIPS_INS_FCNE,
    MIPS_INS_FCOR,
    MIPS_INS_FCUEQ,
    MIPS_INS_FCULE,
    MIPS_INS_FCULT,
    MIPS_INS_FCUNE,
    MIPS_INS_FCUN,
    MIPS_INS_FDIV,
    MIPS_INS_FEXDO,
    MIPS_INS_FEXP2,
    MIPS_INS_FEXUPL,
    MIPS_INS_FEXUPR,
    MIPS_INS_FFINT_S,
    MIPS_INS_FFINT_U,
    MIPS_INS_FFQL,
    MIPS_INS_FFQR,
    MIPS_INS_FILL,
    MIPS_INS_FLOG2,
    MIPS_INS_FLOOR,
    MIPS_INS_FMADD,
    MIPS_INS_FMAX_A,
    MIPS_INS_FMAX,
    MIPS_INS_FMIN_A,
    MIPS_INS_FMIN,
    MIPS_INS_MOV,
    MIPS_INS_FMSUB,
    MIPS_INS_FMUL,
    MIPS_INS_MUL,
    MIPS_INS_NEG,
    MIPS_INS_FRCP,
    MIPS_INS_FRINT,
    MIPS_INS_FRSQRT,
    MIPS_INS_FSAF,
    MIPS_INS_FSEQ,
    MIPS_INS_FSLE,
    MIPS_INS_FSLT,
    MIPS_INS_FSNE,
    MIPS_INS_FSOR,
    MIPS_INS_FSQRT,
    MIPS_INS_SQRT,
    MIPS_INS_FSUB,
    MIPS_INS_SUB,
    MIPS_INS_FSUEQ,
    MIPS_INS_FSULE,
    MIPS_INS_FSULT,
    MIPS_INS_FSUNE,
    MIPS_INS_FSUN,
    MIPS_INS_FTINT_S,
    MIPS_INS_FTINT_U,
    MIPS_INS_FTQ,
    MIPS_INS_FTRUNC_S,
    MIPS_INS_FTRUNC_U,
    MIPS_INS_HADD_S,
    MIPS_INS_HADD_U,
    MIPS_INS_HSUB_S,
    MIPS_INS_HSUB_U,
    MIPS_INS_ILVEV,
    MIPS_INS_ILVL,
    MIPS_INS_ILVOD,
    MIPS_INS_ILVR,
    MIPS_INS_INS,
    MIPS_INS_INSERT,
    MIPS_INS_INSV,
    MIPS_INS_INSVE,
    MIPS_INS_J,
    MIPS_INS_JAL,
    MIPS_INS_JALR,
    MIPS_INS_JALRS,
    MIPS_INS_JALS,
    MIPS_INS_JALX,
    MIPS_INS_JIALC,
    MIPS_INS_JIC,
    MIPS_INS_JR,
    MIPS_INS_JRADDIUSP,
    MIPS_INS_JRC,
    MIPS_INS_JALRC,
    MIPS_INS_LB,
    MIPS_INS_LBUX,
    MIPS_INS_LBU,
    MIPS_INS_LD,
    MIPS_INS_LDC1,
    MIPS_INS_LDC2,
    MIPS_INS_LDC3,
    MIPS_INS_LDI,
    MIPS_INS_LDL,
    MIPS_INS_LDPC,
    MIPS_INS_LDR,
    MIPS_INS_LDXC1,
    MIPS_INS_LH,
    MIPS_INS_LHX,
    MIPS_INS_LHU,
    MIPS_INS_LL,
    MIPS_INS_LLD,
    MIPS_INS_LSA,
    MIPS_INS_LUXC1,
    MIPS_INS_LUI,
    MIPS_INS_LW,
    MIPS_INS_LWC1,
    MIPS_INS_LWC2,
    MIPS_INS_LWC3,
    MIPS_INS_LWL,
    MIPS_INS_LWPC,
    MIPS_INS_LWR,
    MIPS_INS_LWUPC,
    MIPS_INS_LWU,
    MIPS_INS_LWX,
    MIPS_INS_LWXC1,
    MIPS_INS_LI,
    MIPS_INS_MADD,
    MIPS_INS_MADDF,
    MIPS_INS_MADDR_Q,
    MIPS_INS_MADDU,
    MIPS_INS_MADDV,
    MIPS_INS_MADD_Q,
    MIPS_INS_MAQ_SA,
    MIPS_INS_MAQ_S,
    MIPS_INS_MAXA,
    MIPS_INS_MAXI_S,
    MIPS_INS_MAXI_U,
    MIPS_INS_MAX_A,
    MIPS_INS_MAX,
    MIPS_INS_MAX_S,
    MIPS_INS_MAX_U,
    MIPS_INS_MFC0,
    MIPS_INS_MFC1,
    MIPS_INS_MFC2,
    MIPS_INS_MFHC1,
    MIPS_INS_MFHI,
    MIPS_INS_MFLO,
    MIPS_INS_MINA,
    MIPS_INS_MINI_S,
    MIPS_INS_MINI_U,
    MIPS_INS_MIN_A,
    MIPS_INS_MIN,
    MIPS_INS_MIN_S,
    MIPS_INS_MIN_U,
    MIPS_INS_MOD,
    MIPS_INS_MODSUB,
    MIPS_INS_MODU,
    MIPS_INS_MOD_S,
    MIPS_INS_MOD_U,
    MIPS_INS_MOVE,
    MIPS_INS_MOVF,
    MIPS_INS_MOVN,
    MIPS_INS_MOVT,
    MIPS_INS_MOVZ,
    MIPS_INS_MSUB,
    MIPS_INS_MSUBF,
    MIPS_INS_MSUBR_Q,
    MIPS_INS_MSUBU,
    MIPS_INS_MSUBV,
    MIPS_INS_MSUB_Q,
    MIPS_INS_MTC0,
    MIPS_INS_MTC1,
    MIPS_INS_MTC2,
    MIPS_INS_MTHC1,
    MIPS_INS_MTHI,
    MIPS_INS_MTHLIP,
    MIPS_INS_MTLO,
    MIPS_INS_MTM0,
    MIPS_INS_MTM1,
    MIPS_INS_MTM2,
    MIPS_INS_MTP0,
    MIPS_INS_MTP1,
    MIPS_INS_MTP2,
    MIPS_INS_MUH,
    MIPS_INS_MUHU,
    MIPS_INS_MULEQ_S,
    MIPS_INS_MULEU_S,
    MIPS_INS_MULQ_RS,
    MIPS_INS_MULQ_S,
    MIPS_INS_MULR_Q,
    MIPS_INS_MULSAQ_S,
    MIPS_INS_MULSA,
    MIPS_INS_MULT,
    MIPS_INS_MULTU,
    MIPS_INS_MULU,
    MIPS_INS_MULV,
    MIPS_INS_MUL_Q,
    MIPS_INS_MUL_S,
    MIPS_INS_NLOC,
    MIPS_INS_NLZC,
    MIPS_INS_NMADD,
    MIPS_INS_NMSUB,
    MIPS_INS_NOR,
    MIPS_INS_NORI,
    MIPS_INS_NOT,
    MIPS_INS_OR,
    MIPS_INS_ORI,
    MIPS_INS_PACKRL,
    MIPS_INS_PAUSE,
    MIPS_INS_PCKEV,
    MIPS_INS_PCKOD,
    MIPS_INS_PCNT,
    MIPS_INS_PICK,
    MIPS_INS_POP,
    MIPS_INS_PRECEQU,
    MIPS_INS_PRECEQ,
    MIPS_INS_PRECEU,
    MIPS_INS_PRECRQU_S,
    MIPS_INS_PRECRQ,
    MIPS_INS_PRECRQ_RS,
    MIPS_INS_PRECR,
    MIPS_INS_PRECR_SRA,
    MIPS_INS_PRECR_SRA_R,
    MIPS_INS_PREF,
    MIPS_INS_PREPEND,
    MIPS_INS_RADDU,
    MIPS_INS_RDDSP,
    MIPS_INS_RDHWR,
    MIPS_INS_REPLV,
    MIPS_INS_REPL,
    MIPS_INS_RINT,
    MIPS_INS_ROTR,
    MIPS_INS_ROTRV,
    MIPS_INS_ROUND,
    MIPS_INS_SAT_S,
    MIPS_INS_SAT_U,
    MIPS_INS_SB,
    MIPS_INS_SC,
    MIPS_INS_SCD,
    MIPS_INS_SD,
    MIPS_INS_SDBBP,
    MIPS_INS_SDC1,
    MIPS_INS_SDC2,
    MIPS_INS_SDC3,
    MIPS_INS_SDL,
    MIPS_INS_SDR,
    MIPS_INS_SDXC1,
    MIPS_INS_SEB,
    MIPS_INS_SEH,
    MIPS_INS_SELEQZ,
    MIPS_INS_SELNEZ,
    MIPS_INS_SEL,
    MIPS_INS_SEQ,
    MIPS_INS_SEQI,
    MIPS_INS_SH,
    MIPS_INS_SHF,
    MIPS_INS_SHILO,
    MIPS_INS_SHILOV,
    MIPS_INS_SHLLV,
    MIPS_INS_SHLLV_S,
    MIPS_INS_SHLL,
    MIPS_INS_SHLL_S,
    MIPS_INS_SHRAV,
    MIPS_INS_SHRAV_R,
    MIPS_INS_SHRA,
    MIPS_INS_SHRA_R,
    MIPS_INS_SHRLV,
    MIPS_INS_SHRL,
    MIPS_INS_SLDI,
    MIPS_INS_SLD,
    MIPS_INS_SLL,
    MIPS_INS_SLLI,
    MIPS_INS_SLLV,
    MIPS_INS_SLT,
    MIPS_INS_SLTI,
    MIPS_INS_SLTIU,
    MIPS_INS_SLTU,
    MIPS_INS_SNE,
    MIPS_INS_SNEI,
    MIPS_INS_SPLATI,
    MIPS_INS_SPLAT,
    MIPS_INS_SRA,
    MIPS_INS_SRAI,
    MIPS_INS_SRARI,
    MIPS_INS_SRAR,
    MIPS_INS_SRAV,
    MIPS_INS_SRL,
    MIPS_INS_SRLI,
    MIPS_INS_SRLRI,
    MIPS_INS_SRLR,
    MIPS_INS_SRLV,
    MIPS_INS_SSNOP,
    MIPS_INS_ST,
    MIPS_INS_SUBQH,
    MIPS_INS_SUBQH_R,
    MIPS_INS_SUBQ,
    MIPS_INS_SUBQ_S,
    MIPS_INS_SUBSUS_U,
    MIPS_INS_SUBSUU_S,
    MIPS_INS_SUBS_S,
    MIPS_INS_SUBS_U,
    MIPS_INS_SUBUH,
    MIPS_INS_SUBUH_R,
    MIPS_INS_SUBU,
    MIPS_INS_SUBU_S,
    MIPS_INS_SUBVI,
    MIPS_INS_SUBV,
    MIPS_INS_SUXC1,
    MIPS_INS_SW,
    MIPS_INS_SWC1,
    MIPS_INS_SWC2,
    MIPS_INS_SWC3,
    MIPS_INS_SWL,
    MIPS_INS_SWR,
    MIPS_INS_SWXC1,
    MIPS_INS_SYNC,
    MIPS_INS_SYSCALL,
    MIPS_INS_TEQ,
    MIPS_INS_TEQI,
    MIPS_INS_TGE,
    MIPS_INS_TGEI,
    MIPS_INS_TGEIU,
    MIPS_INS_TGEU,
    MIPS_INS_TLBP,
    MIPS_INS_TLBR,
    MIPS_INS_TLBWI,
    MIPS_INS_TLBWR,
    MIPS_INS_TLT,
    MIPS_INS_TLTI,
    MIPS_INS_TLTIU,
    MIPS_INS_TLTU,
    MIPS_INS_TNE,
    MIPS_INS_TNEI,
    MIPS_INS_TRUNC,
    MIPS_INS_V3MULU,
    MIPS_INS_VMM0,
    MIPS_INS_VMULU,
    MIPS_INS_VSHF,
    MIPS_INS_WAIT,
    MIPS_INS_WRDSP,
    MIPS_INS_WSBH,
    MIPS_INS_XOR,
    MIPS_INS_XORI,

    //> some alias instructions
    MIPS_INS_NOP,
    MIPS_INS_NEGU,

    //> special instructions
    MIPS_INS_JALR_HB,   // jump and link with Hazard Barrier
    MIPS_INS_JR_HB,     // jump register with Hazard Barrier

    MIPS_INS_ENDING,
} mips_insn;

//> Group of MIPS instructions
typedef enum mips_insn_group
{
    MIPS_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    MIPS_GRP_JUMP,  // = CS_GRP_JUMP

    //> Architecture-specific groups
    MIPS_GRP_BITCOUNT = 128,
    MIPS_GRP_DSP,
    MIPS_GRP_DSPR2,
    MIPS_GRP_FPIDX,
    MIPS_GRP_MSA,
    MIPS_GRP_MIPS32R2,
    MIPS_GRP_MIPS64,
    MIPS_GRP_MIPS64R2,
    MIPS_GRP_SEINREG,
    MIPS_GRP_STDENC,
    MIPS_GRP_SWAP,
    MIPS_GRP_MICROMIPS,
    MIPS_GRP_MIPS16MODE,
    MIPS_GRP_FP64BIT,
    MIPS_GRP_NONANSFPMATH,
    MIPS_GRP_NOTFP64BIT,
    MIPS_GRP_NOTINMICROMIPS,
    MIPS_GRP_NOTNACL,
    MIPS_GRP_NOTMIPS32R6,
    MIPS_GRP_NOTMIPS64R6,
    MIPS_GRP_CNMIPS,
    MIPS_GRP_MIPS32,
    MIPS_GRP_MIPS32R6,
    MIPS_GRP_MIPS64R6,
    MIPS_GRP_MIPS2,
    MIPS_GRP_MIPS3,
    MIPS_GRP_MIPS3_32,
    MIPS_GRP_MIPS3_32R2,
    MIPS_GRP_MIPS4_32,
    MIPS_GRP_MIPS4_32R2,
    MIPS_GRP_MIPS5_32R2,
    MIPS_GRP_GP32BIT,
    MIPS_GRP_GP64BIT,

    MIPS_GRP_ENDING,
} mips_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/platform.h
================================================
/* Capstone Disassembly Engine */
/* By Axel Souchet & Nguyen Anh Quynh, 2014 */

// handle C99 issue (for pre-2013 VisualStudio)
#ifndef CAPSTONE_PLATFORM_H
#define CAPSTONE_PLATFORM_H

#if !defined(__MINGW32__) && !defined(__MINGW64__) && (defined (WIN32) || defined (WIN64) || defined (_WIN32) || defined (_WIN64))
// MSVC

// stdbool.h
#if (_MSC_VER < 1800)
#ifndef __cplusplus
typedef unsigned char bool;
#define false 0
#define true 1
#endif

#else
// VisualStudio 2013+ -> C99 is supported
#include <stdbool.h>
#endif

#else // not MSVC -> C99 is supported
#include <stdbool.h>
#endif

#endif



================================================
File: pluginsdk/capstone/ppc.h
================================================
#ifndef CAPSTONE_PPC_H
#define CAPSTONE_PPC_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> PPC branch codes for some branch instructions
typedef enum ppc_bc
{
    PPC_BC_INVALID  = 0,
    PPC_BC_LT       = (0 << 5) | 12,
    PPC_BC_LE       = (1 << 5) |  4,
    PPC_BC_EQ       = (2 << 5) | 12,
    PPC_BC_GE       = (0 << 5) |  4,
    PPC_BC_GT       = (1 << 5) | 12,
    PPC_BC_NE       = (2 << 5) |  4,
    PPC_BC_UN       = (3 << 5) | 12,
    PPC_BC_NU       = (3 << 5) |  4,

    // extra conditions
    PPC_BC_SO = (4 << 5) | 12,  // summary overflow
    PPC_BC_NS = (4 << 5) | 4,   // not summary overflow
} ppc_bc;

//> PPC branch hint for some branch instructions
typedef enum ppc_bh
{
    PPC_BH_INVALID = 0, // no hint
    PPC_BH_PLUS,    // PLUS hint
    PPC_BH_MINUS,   // MINUS hint
} ppc_bh;

//> Operand type for instruction's operands
typedef enum ppc_op_type
{
    PPC_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    PPC_OP_REG, // = CS_OP_REG (Register operand).
    PPC_OP_IMM, // = CS_OP_IMM (Immediate operand).
    PPC_OP_MEM, // = CS_OP_MEM (Memory operand).
    PPC_OP_CRX = 64,    // Condition Register field
} ppc_op_type;

// Instruction's operand referring to memory
// This is associated with PPC_OP_MEM operand type above
typedef struct ppc_op_mem
{
    unsigned int base;  // base register
    int32_t disp;   // displacement/offset value
} ppc_op_mem;

typedef struct ppc_op_crx
{
    unsigned int scale;
    unsigned int reg;
    ppc_bc cond;
} ppc_op_crx;

// Instruction operand
typedef struct cs_ppc_op
{
    ppc_op_type type;   // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int32_t imm;        // immediate value for IMM operand
        ppc_op_mem mem;     // base/disp value for MEM operand
        ppc_op_crx crx;     // operand with condition register
    };
} cs_ppc_op;

// Instruction structure
typedef struct cs_ppc
{
    // branch code for branch instructions
    ppc_bc bc;

    // branch hint for branch instructions
    ppc_bh bh;

    // if update_cr0 = True, then this 'dot' insn updates CR0
    bool update_cr0;

    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;
    cs_ppc_op operands[8]; // operands for this instruction.
} cs_ppc;

//> PPC registers
typedef enum ppc_reg
{
    PPC_REG_INVALID = 0,

    PPC_REG_CARRY,
    PPC_REG_CC,
    PPC_REG_CR0,
    PPC_REG_CR1,
    PPC_REG_CR2,
    PPC_REG_CR3,
    PPC_REG_CR4,
    PPC_REG_CR5,
    PPC_REG_CR6,
    PPC_REG_CR7,
    PPC_REG_CTR,
    PPC_REG_F0,
    PPC_REG_F1,
    PPC_REG_F2,
    PPC_REG_F3,
    PPC_REG_F4,
    PPC_REG_F5,
    PPC_REG_F6,
    PPC_REG_F7,
    PPC_REG_F8,
    PPC_REG_F9,
    PPC_REG_F10,
    PPC_REG_F11,
    PPC_REG_F12,
    PPC_REG_F13,
    PPC_REG_F14,
    PPC_REG_F15,
    PPC_REG_F16,
    PPC_REG_F17,
    PPC_REG_F18,
    PPC_REG_F19,
    PPC_REG_F20,
    PPC_REG_F21,
    PPC_REG_F22,
    PPC_REG_F23,
    PPC_REG_F24,
    PPC_REG_F25,
    PPC_REG_F26,
    PPC_REG_F27,
    PPC_REG_F28,
    PPC_REG_F29,
    PPC_REG_F30,
    PPC_REG_F31,
    PPC_REG_LR,
    PPC_REG_R0,
    PPC_REG_R1,
    PPC_REG_R2,
    PPC_REG_R3,
    PPC_REG_R4,
    PPC_REG_R5,
    PPC_REG_R6,
    PPC_REG_R7,
    PPC_REG_R8,
    PPC_REG_R9,
    PPC_REG_R10,
    PPC_REG_R11,
    PPC_REG_R12,
    PPC_REG_R13,
    PPC_REG_R14,
    PPC_REG_R15,
    PPC_REG_R16,
    PPC_REG_R17,
    PPC_REG_R18,
    PPC_REG_R19,
    PPC_REG_R20,
    PPC_REG_R21,
    PPC_REG_R22,
    PPC_REG_R23,
    PPC_REG_R24,
    PPC_REG_R25,
    PPC_REG_R26,
    PPC_REG_R27,
    PPC_REG_R28,
    PPC_REG_R29,
    PPC_REG_R30,
    PPC_REG_R31,
    PPC_REG_V0,
    PPC_REG_V1,
    PPC_REG_V2,
    PPC_REG_V3,
    PPC_REG_V4,
    PPC_REG_V5,
    PPC_REG_V6,
    PPC_REG_V7,
    PPC_REG_V8,
    PPC_REG_V9,
    PPC_REG_V10,
    PPC_REG_V11,
    PPC_REG_V12,
    PPC_REG_V13,
    PPC_REG_V14,
    PPC_REG_V15,
    PPC_REG_V16,
    PPC_REG_V17,
    PPC_REG_V18,
    PPC_REG_V19,
    PPC_REG_V20,
    PPC_REG_V21,
    PPC_REG_V22,
    PPC_REG_V23,
    PPC_REG_V24,
    PPC_REG_V25,
    PPC_REG_V26,
    PPC_REG_V27,
    PPC_REG_V28,
    PPC_REG_V29,
    PPC_REG_V30,
    PPC_REG_V31,
    PPC_REG_VRSAVE,
    PPC_REG_VS0,
    PPC_REG_VS1,
    PPC_REG_VS2,
    PPC_REG_VS3,
    PPC_REG_VS4,
    PPC_REG_VS5,
    PPC_REG_VS6,
    PPC_REG_VS7,
    PPC_REG_VS8,
    PPC_REG_VS9,
    PPC_REG_VS10,
    PPC_REG_VS11,
    PPC_REG_VS12,
    PPC_REG_VS13,
    PPC_REG_VS14,
    PPC_REG_VS15,
    PPC_REG_VS16,
    PPC_REG_VS17,
    PPC_REG_VS18,
    PPC_REG_VS19,
    PPC_REG_VS20,
    PPC_REG_VS21,
    PPC_REG_VS22,
    PPC_REG_VS23,
    PPC_REG_VS24,
    PPC_REG_VS25,
    PPC_REG_VS26,
    PPC_REG_VS27,
    PPC_REG_VS28,
    PPC_REG_VS29,
    PPC_REG_VS30,
    PPC_REG_VS31,
    PPC_REG_VS32,
    PPC_REG_VS33,
    PPC_REG_VS34,
    PPC_REG_VS35,
    PPC_REG_VS36,
    PPC_REG_VS37,
    PPC_REG_VS38,
    PPC_REG_VS39,
    PPC_REG_VS40,
    PPC_REG_VS41,
    PPC_REG_VS42,
    PPC_REG_VS43,
    PPC_REG_VS44,
    PPC_REG_VS45,
    PPC_REG_VS46,
    PPC_REG_VS47,
    PPC_REG_VS48,
    PPC_REG_VS49,
    PPC_REG_VS50,
    PPC_REG_VS51,
    PPC_REG_VS52,
    PPC_REG_VS53,
    PPC_REG_VS54,
    PPC_REG_VS55,
    PPC_REG_VS56,
    PPC_REG_VS57,
    PPC_REG_VS58,
    PPC_REG_VS59,
    PPC_REG_VS60,
    PPC_REG_VS61,
    PPC_REG_VS62,
    PPC_REG_VS63,

    // extra registers for PPCMapping.c
    PPC_REG_RM,
    PPC_REG_CTR8,
    PPC_REG_LR8,
    PPC_REG_CR1EQ,

    PPC_REG_ENDING,   // <-- mark the end of the list of registers
} ppc_reg;

//> PPC instruction
typedef enum ppc_insn
{
    PPC_INS_INVALID = 0,

    PPC_INS_ADD,
    PPC_INS_ADDC,
    PPC_INS_ADDE,
    PPC_INS_ADDI,
    PPC_INS_ADDIC,
    PPC_INS_ADDIS,
    PPC_INS_ADDME,
    PPC_INS_ADDZE,
    PPC_INS_AND,
    PPC_INS_ANDC,
    PPC_INS_ANDIS,
    PPC_INS_ANDI,
    PPC_INS_B,
    PPC_INS_BA,
    PPC_INS_BC,
    PPC_INS_BCCTR,
    PPC_INS_BCCTRL,
    PPC_INS_BCL,
    PPC_INS_BCLR,
    PPC_INS_BCLRL,
    PPC_INS_BCTR,
    PPC_INS_BCTRL,
    PPC_INS_BDNZ,
    PPC_INS_BDNZA,
    PPC_INS_BDNZL,
    PPC_INS_BDNZLA,
    PPC_INS_BDNZLR,
    PPC_INS_BDNZLRL,
    PPC_INS_BDZ,
    PPC_INS_BDZA,
    PPC_INS_BDZL,
    PPC_INS_BDZLA,
    PPC_INS_BDZLR,
    PPC_INS_BDZLRL,
    PPC_INS_BL,
    PPC_INS_BLA,
    PPC_INS_BLR,
    PPC_INS_BLRL,
    PPC_INS_BRINC,
    PPC_INS_CMPD,
    PPC_INS_CMPDI,
    PPC_INS_CMPLD,
    PPC_INS_CMPLDI,
    PPC_INS_CMPLW,
    PPC_INS_CMPLWI,
    PPC_INS_CMPW,
    PPC_INS_CMPWI,
    PPC_INS_CNTLZD,
    PPC_INS_CNTLZW,
    PPC_INS_CREQV,
    PPC_INS_CRXOR,
    PPC_INS_CRAND,
    PPC_INS_CRANDC,
    PPC_INS_CRNAND,
    PPC_INS_CRNOR,
    PPC_INS_CROR,
    PPC_INS_CRORC,
    PPC_INS_DCBA,
    PPC_INS_DCBF,
    PPC_INS_DCBI,
    PPC_INS_DCBST,
    PPC_INS_DCBT,
    PPC_INS_DCBTST,
    PPC_INS_DCBZ,
    PPC_INS_DCBZL,
    PPC_INS_DCCCI,
    PPC_INS_DIVD,
    PPC_INS_DIVDU,
    PPC_INS_DIVW,
    PPC_INS_DIVWU,
    PPC_INS_DSS,
    PPC_INS_DSSALL,
    PPC_INS_DST,
    PPC_INS_DSTST,
    PPC_INS_DSTSTT,
    PPC_INS_DSTT,
    PPC_INS_EIEIO,
    PPC_INS_EQV,
    PPC_INS_EVABS,
    PPC_INS_EVADDIW,
    PPC_INS_EVADDSMIAAW,
    PPC_INS_EVADDSSIAAW,
    PPC_INS_EVADDUMIAAW,
    PPC_INS_EVADDUSIAAW,
    PPC_INS_EVADDW,
    PPC_INS_EVAND,
    PPC_INS_EVANDC,
    PPC_INS_EVCMPEQ,
    PPC_INS_EVCMPGTS,
    PPC_INS_EVCMPGTU,
    PPC_INS_EVCMPLTS,
    PPC_INS_EVCMPLTU,
    PPC_INS_EVCNTLSW,
    PPC_INS_EVCNTLZW,
    PPC_INS_EVDIVWS,
    PPC_INS_EVDIVWU,
    PPC_INS_EVEQV,
    PPC_INS_EVEXTSB,
    PPC_INS_EVEXTSH,
    PPC_INS_EVLDD,
    PPC_INS_EVLDDX,
    PPC_INS_EVLDH,
    PPC_INS_EVLDHX,
    PPC_INS_EVLDW,
    PPC_INS_EVLDWX,
    PPC_INS_EVLHHESPLAT,
    PPC_INS_EVLHHESPLATX,
    PPC_INS_EVLHHOSSPLAT,
    PPC_INS_EVLHHOSSPLATX,
    PPC_INS_EVLHHOUSPLAT,
    PPC_INS_EVLHHOUSPLATX,
    PPC_INS_EVLWHE,
    PPC_INS_EVLWHEX,
    PPC_INS_EVLWHOS,
    PPC_INS_EVLWHOSX,
    PPC_INS_EVLWHOU,
    PPC_INS_EVLWHOUX,
    PPC_INS_EVLWHSPLAT,
    PPC_INS_EVLWHSPLATX,
    PPC_INS_EVLWWSPLAT,
    PPC_INS_EVLWWSPLATX,
    PPC_INS_EVMERGEHI,
    PPC_INS_EVMERGEHILO,
    PPC_INS_EVMERGELO,
    PPC_INS_EVMERGELOHI,
    PPC_INS_EVMHEGSMFAA,
    PPC_INS_EVMHEGSMFAN,
    PPC_INS_EVMHEGSMIAA,
    PPC_INS_EVMHEGSMIAN,
    PPC_INS_EVMHEGUMIAA,
    PPC_INS_EVMHEGUMIAN,
    PPC_INS_EVMHESMF,
    PPC_INS_EVMHESMFA,
    PPC_INS_EVMHESMFAAW,
    PPC_INS_EVMHESMFANW,
    PPC_INS_EVMHESMI,
    PPC_INS_EVMHESMIA,
    PPC_INS_EVMHESMIAAW,
    PPC_INS_EVMHESMIANW,
    PPC_INS_EVMHESSF,
    PPC_INS_EVMHESSFA,
    PPC_INS_EVMHESSFAAW,
    PPC_INS_EVMHESSFANW,
    PPC_INS_EVMHESSIAAW,
    PPC_INS_EVMHESSIANW,
    PPC_INS_EVMHEUMI,
    PPC_INS_EVMHEUMIA,
    PPC_INS_EVMHEUMIAAW,
    PPC_INS_EVMHEUMIANW,
    PPC_INS_EVMHEUSIAAW,
    PPC_INS_EVMHEUSIANW,
    PPC_INS_EVMHOGSMFAA,
    PPC_INS_EVMHOGSMFAN,
    PPC_INS_EVMHOGSMIAA,
    PPC_INS_EVMHOGSMIAN,
    PPC_INS_EVMHOGUMIAA,
    PPC_INS_EVMHOGUMIAN,
    PPC_INS_EVMHOSMF,
    PPC_INS_EVMHOSMFA,
    PPC_INS_EVMHOSMFAAW,
    PPC_INS_EVMHOSMFANW,
    PPC_INS_EVMHOSMI,
    PPC_INS_EVMHOSMIA,
    PPC_INS_EVMHOSMIAAW,
    PPC_INS_EVMHOSMIANW,
    PPC_INS_EVMHOSSF,
    PPC_INS_EVMHOSSFA,
    PPC_INS_EVMHOSSFAAW,
    PPC_INS_EVMHOSSFANW,
    PPC_INS_EVMHOSSIAAW,
    PPC_INS_EVMHOSSIANW,
    PPC_INS_EVMHOUMI,
    PPC_INS_EVMHOUMIA,
    PPC_INS_EVMHOUMIAAW,
    PPC_INS_EVMHOUMIANW,
    PPC_INS_EVMHOUSIAAW,
    PPC_INS_EVMHOUSIANW,
    PPC_INS_EVMRA,
    PPC_INS_EVMWHSMF,
    PPC_INS_EVMWHSMFA,
    PPC_INS_EVMWHSMI,
    PPC_INS_EVMWHSMIA,
    PPC_INS_EVMWHSSF,
    PPC_INS_EVMWHSSFA,
    PPC_INS_EVMWHUMI,
    PPC_INS_EVMWHUMIA,
    PPC_INS_EVMWLSMIAAW,
    PPC_INS_EVMWLSMIANW,
    PPC_INS_EVMWLSSIAAW,
    PPC_INS_EVMWLSSIANW,
    PPC_INS_EVMWLUMI,
    PPC_INS_EVMWLUMIA,
    PPC_INS_EVMWLUMIAAW,
    PPC_INS_EVMWLUMIANW,
    PPC_INS_EVMWLUSIAAW,
    PPC_INS_EVMWLUSIANW,
    PPC_INS_EVMWSMF,
    PPC_INS_EVMWSMFA,
    PPC_INS_EVMWSMFAA,
    PPC_INS_EVMWSMFAN,
    PPC_INS_EVMWSMI,
    PPC_INS_EVMWSMIA,
    PPC_INS_EVMWSMIAA,
    PPC_INS_EVMWSMIAN,
    PPC_INS_EVMWSSF,
    PPC_INS_EVMWSSFA,
    PPC_INS_EVMWSSFAA,
    PPC_INS_EVMWSSFAN,
    PPC_INS_EVMWUMI,
    PPC_INS_EVMWUMIA,
    PPC_INS_EVMWUMIAA,
    PPC_INS_EVMWUMIAN,
    PPC_INS_EVNAND,
    PPC_INS_EVNEG,
    PPC_INS_EVNOR,
    PPC_INS_EVOR,
    PPC_INS_EVORC,
    PPC_INS_EVRLW,
    PPC_INS_EVRLWI,
    PPC_INS_EVRNDW,
    PPC_INS_EVSLW,
    PPC_INS_EVSLWI,
    PPC_INS_EVSPLATFI,
    PPC_INS_EVSPLATI,
    PPC_INS_EVSRWIS,
    PPC_INS_EVSRWIU,
    PPC_INS_EVSRWS,
    PPC_INS_EVSRWU,
    PPC_INS_EVSTDD,
    PPC_INS_EVSTDDX,
    PPC_INS_EVSTDH,
    PPC_INS_EVSTDHX,
    PPC_INS_EVSTDW,
    PPC_INS_EVSTDWX,
    PPC_INS_EVSTWHE,
    PPC_INS_EVSTWHEX,
    PPC_INS_EVSTWHO,
    PPC_INS_EVSTWHOX,
    PPC_INS_EVSTWWE,
    PPC_INS_EVSTWWEX,
    PPC_INS_EVSTWWO,
    PPC_INS_EVSTWWOX,
    PPC_INS_EVSUBFSMIAAW,
    PPC_INS_EVSUBFSSIAAW,
    PPC_INS_EVSUBFUMIAAW,
    PPC_INS_EVSUBFUSIAAW,
    PPC_INS_EVSUBFW,
    PPC_INS_EVSUBIFW,
    PPC_INS_EVXOR,
    PPC_INS_EXTSB,
    PPC_INS_EXTSH,
    PPC_INS_EXTSW,
    PPC_INS_FABS,
    PPC_INS_FADD,
    PPC_INS_FADDS,
    PPC_INS_FCFID,
    PPC_INS_FCFIDS,
    PPC_INS_FCFIDU,
    PPC_INS_FCFIDUS,
    PPC_INS_FCMPU,
    PPC_INS_FCPSGN,
    PPC_INS_FCTID,
    PPC_INS_FCTIDUZ,
    PPC_INS_FCTIDZ,
    PPC_INS_FCTIW,
    PPC_INS_FCTIWUZ,
    PPC_INS_FCTIWZ,
    PPC_INS_FDIV,
    PPC_INS_FDIVS,
    PPC_INS_FMADD,
    PPC_INS_FMADDS,
    PPC_INS_FMR,
    PPC_INS_FMSUB,
    PPC_INS_FMSUBS,
    PPC_INS_FMUL,
    PPC_INS_FMULS,
    PPC_INS_FNABS,
    PPC_INS_FNEG,
    PPC_INS_FNMADD,
    PPC_INS_FNMADDS,
    PPC_INS_FNMSUB,
    PPC_INS_FNMSUBS,
    PPC_INS_FRE,
    PPC_INS_FRES,
    PPC_INS_FRIM,
    PPC_INS_FRIN,
    PPC_INS_FRIP,
    PPC_INS_FRIZ,
    PPC_INS_FRSP,
    PPC_INS_FRSQRTE,
    PPC_INS_FRSQRTES,
    PPC_INS_FSEL,
    PPC_INS_FSQRT,
    PPC_INS_FSQRTS,
    PPC_INS_FSUB,
    PPC_INS_FSUBS,
    PPC_INS_ICBI,
    PPC_INS_ICCCI,
    PPC_INS_ISEL,
    PPC_INS_ISYNC,
    PPC_INS_LA,
    PPC_INS_LBZ,
    PPC_INS_LBZU,
    PPC_INS_LBZUX,
    PPC_INS_LBZX,
    PPC_INS_LD,
    PPC_INS_LDARX,
    PPC_INS_LDBRX,
    PPC_INS_LDU,
    PPC_INS_LDUX,
    PPC_INS_LDX,
    PPC_INS_LFD,
    PPC_INS_LFDU,
    PPC_INS_LFDUX,
    PPC_INS_LFDX,
    PPC_INS_LFIWAX,
    PPC_INS_LFIWZX,
    PPC_INS_LFS,
    PPC_INS_LFSU,
    PPC_INS_LFSUX,
    PPC_INS_LFSX,
    PPC_INS_LHA,
    PPC_INS_LHAU,
    PPC_INS_LHAUX,
    PPC_INS_LHAX,
    PPC_INS_LHBRX,
    PPC_INS_LHZ,
    PPC_INS_LHZU,
    PPC_INS_LHZUX,
    PPC_INS_LHZX,
    PPC_INS_LI,
    PPC_INS_LIS,
    PPC_INS_LMW,
    PPC_INS_LSWI,
    PPC_INS_LVEBX,
    PPC_INS_LVEHX,
    PPC_INS_LVEWX,
    PPC_INS_LVSL,
    PPC_INS_LVSR,
    PPC_INS_LVX,
    PPC_INS_LVXL,
    PPC_INS_LWA,
    PPC_INS_LWARX,
    PPC_INS_LWAUX,
    PPC_INS_LWAX,
    PPC_INS_LWBRX,
    PPC_INS_LWZ,
    PPC_INS_LWZU,
    PPC_INS_LWZUX,
    PPC_INS_LWZX,
    PPC_INS_LXSDX,
    PPC_INS_LXVD2X,
    PPC_INS_LXVDSX,
    PPC_INS_LXVW4X,
    PPC_INS_MBAR,
    PPC_INS_MCRF,
    PPC_INS_MFCR,
    PPC_INS_MFCTR,
    PPC_INS_MFDCR,
    PPC_INS_MFFS,
    PPC_INS_MFLR,
    PPC_INS_MFMSR,
    PPC_INS_MFOCRF,
    PPC_INS_MFSPR,
    PPC_INS_MFSR,
    PPC_INS_MFSRIN,
    PPC_INS_MFTB,
    PPC_INS_MFVSCR,
    PPC_INS_MSYNC,
    PPC_INS_MTCRF,
    PPC_INS_MTCTR,
    PPC_INS_MTDCR,
    PPC_INS_MTFSB0,
    PPC_INS_MTFSB1,
    PPC_INS_MTFSF,
    PPC_INS_MTLR,
    PPC_INS_MTMSR,
    PPC_INS_MTMSRD,
    PPC_INS_MTOCRF,
    PPC_INS_MTSPR,
    PPC_INS_MTSR,
    PPC_INS_MTSRIN,
    PPC_INS_MTVSCR,
    PPC_INS_MULHD,
    PPC_INS_MULHDU,
    PPC_INS_MULHW,
    PPC_INS_MULHWU,
    PPC_INS_MULLD,
    PPC_INS_MULLI,
    PPC_INS_MULLW,
    PPC_INS_NAND,
    PPC_INS_NEG,
    PPC_INS_NOP,
    PPC_INS_ORI,
    PPC_INS_NOR,
    PPC_INS_OR,
    PPC_INS_ORC,
    PPC_INS_ORIS,
    PPC_INS_POPCNTD,
    PPC_INS_POPCNTW,
    PPC_INS_RFCI,
    PPC_INS_RFDI,
    PPC_INS_RFI,
    PPC_INS_RFID,
    PPC_INS_RFMCI,
    PPC_INS_RLDCL,
    PPC_INS_RLDCR,
    PPC_INS_RLDIC,
    PPC_INS_RLDICL,
    PPC_INS_RLDICR,
    PPC_INS_RLDIMI,
    PPC_INS_RLWIMI,
    PPC_INS_RLWINM,
    PPC_INS_RLWNM,
    PPC_INS_SC,
    PPC_INS_SLBIA,
    PPC_INS_SLBIE,
    PPC_INS_SLBMFEE,
    PPC_INS_SLBMTE,
    PPC_INS_SLD,
    PPC_INS_SLW,
    PPC_INS_SRAD,
    PPC_INS_SRADI,
    PPC_INS_SRAW,
    PPC_INS_SRAWI,
    PPC_INS_SRD,
    PPC_INS_SRW,
    PPC_INS_STB,
    PPC_INS_STBU,
    PPC_INS_STBUX,
    PPC_INS_STBX,
    PPC_INS_STD,
    PPC_INS_STDBRX,
    PPC_INS_STDCX,
    PPC_INS_STDU,
    PPC_INS_STDUX,
    PPC_INS_STDX,
    PPC_INS_STFD,
    PPC_INS_STFDU,
    PPC_INS_STFDUX,
    PPC_INS_STFDX,
    PPC_INS_STFIWX,
    PPC_INS_STFS,
    PPC_INS_STFSU,
    PPC_INS_STFSUX,
    PPC_INS_STFSX,
    PPC_INS_STH,
    PPC_INS_STHBRX,
    PPC_INS_STHU,
    PPC_INS_STHUX,
    PPC_INS_STHX,
    PPC_INS_STMW,
    PPC_INS_STSWI,
    PPC_INS_STVEBX,
    PPC_INS_STVEHX,
    PPC_INS_STVEWX,
    PPC_INS_STVX,
    PPC_INS_STVXL,
    PPC_INS_STW,
    PPC_INS_STWBRX,
    PPC_INS_STWCX,
    PPC_INS_STWU,
    PPC_INS_STWUX,
    PPC_INS_STWX,
    PPC_INS_STXSDX,
    PPC_INS_STXVD2X,
    PPC_INS_STXVW4X,
    PPC_INS_SUBF,
    PPC_INS_SUBFC,
    PPC_INS_SUBFE,
    PPC_INS_SUBFIC,
    PPC_INS_SUBFME,
    PPC_INS_SUBFZE,
    PPC_INS_SYNC,
    PPC_INS_TD,
    PPC_INS_TDI,
    PPC_INS_TLBIA,
    PPC_INS_TLBIE,
    PPC_INS_TLBIEL,
    PPC_INS_TLBIVAX,
    PPC_INS_TLBLD,
    PPC_INS_TLBLI,
    PPC_INS_TLBRE,
    PPC_INS_TLBSX,
    PPC_INS_TLBSYNC,
    PPC_INS_TLBWE,
    PPC_INS_TRAP,
    PPC_INS_TW,
    PPC_INS_TWI,
    PPC_INS_VADDCUW,
    PPC_INS_VADDFP,
    PPC_INS_VADDSBS,
    PPC_INS_VADDSHS,
    PPC_INS_VADDSWS,
    PPC_INS_VADDUBM,
    PPC_INS_VADDUBS,
    PPC_INS_VADDUHM,
    PPC_INS_VADDUHS,
    PPC_INS_VADDUWM,
    PPC_INS_VADDUWS,
    PPC_INS_VAND,
    PPC_INS_VANDC,
    PPC_INS_VAVGSB,
    PPC_INS_VAVGSH,
    PPC_INS_VAVGSW,
    PPC_INS_VAVGUB,
    PPC_INS_VAVGUH,
    PPC_INS_VAVGUW,
    PPC_INS_VCFSX,
    PPC_INS_VCFUX,
    PPC_INS_VCMPBFP,
    PPC_INS_VCMPEQFP,
    PPC_INS_VCMPEQUB,
    PPC_INS_VCMPEQUH,
    PPC_INS_VCMPEQUW,
    PPC_INS_VCMPGEFP,
    PPC_INS_VCMPGTFP,
    PPC_INS_VCMPGTSB,
    PPC_INS_VCMPGTSH,
    PPC_INS_VCMPGTSW,
    PPC_INS_VCMPGTUB,
    PPC_INS_VCMPGTUH,
    PPC_INS_VCMPGTUW,
    PPC_INS_VCTSXS,
    PPC_INS_VCTUXS,
    PPC_INS_VEXPTEFP,
    PPC_INS_VLOGEFP,
    PPC_INS_VMADDFP,
    PPC_INS_VMAXFP,
    PPC_INS_VMAXSB,
    PPC_INS_VMAXSH,
    PPC_INS_VMAXSW,
    PPC_INS_VMAXUB,
    PPC_INS_VMAXUH,
    PPC_INS_VMAXUW,
    PPC_INS_VMHADDSHS,
    PPC_INS_VMHRADDSHS,
    PPC_INS_VMINFP,
    PPC_INS_VMINSB,
    PPC_INS_VMINSH,
    PPC_INS_VMINSW,
    PPC_INS_VMINUB,
    PPC_INS_VMINUH,
    PPC_INS_VMINUW,
    PPC_INS_VMLADDUHM,
    PPC_INS_VMRGHB,
    PPC_INS_VMRGHH,
    PPC_INS_VMRGHW,
    PPC_INS_VMRGLB,
    PPC_INS_VMRGLH,
    PPC_INS_VMRGLW,
    PPC_INS_VMSUMMBM,
    PPC_INS_VMSUMSHM,
    PPC_INS_VMSUMSHS,
    PPC_INS_VMSUMUBM,
    PPC_INS_VMSUMUHM,
    PPC_INS_VMSUMUHS,
    PPC_INS_VMULESB,
    PPC_INS_VMULESH,
    PPC_INS_VMULEUB,
    PPC_INS_VMULEUH,
    PPC_INS_VMULOSB,
    PPC_INS_VMULOSH,
    PPC_INS_VMULOUB,
    PPC_INS_VMULOUH,
    PPC_INS_VNMSUBFP,
    PPC_INS_VNOR,
    PPC_INS_VOR,
    PPC_INS_VPERM,
    PPC_INS_VPKPX,
    PPC_INS_VPKSHSS,
    PPC_INS_VPKSHUS,
    PPC_INS_VPKSWSS,
    PPC_INS_VPKSWUS,
    PPC_INS_VPKUHUM,
    PPC_INS_VPKUHUS,
    PPC_INS_VPKUWUM,
    PPC_INS_VPKUWUS,
    PPC_INS_VREFP,
    PPC_INS_VRFIM,
    PPC_INS_VRFIN,
    PPC_INS_VRFIP,
    PPC_INS_VRFIZ,
    PPC_INS_VRLB,
    PPC_INS_VRLH,
    PPC_INS_VRLW,
    PPC_INS_VRSQRTEFP,
    PPC_INS_VSEL,
    PPC_INS_VSL,
    PPC_INS_VSLB,
    PPC_INS_VSLDOI,
    PPC_INS_VSLH,
    PPC_INS_VSLO,
    PPC_INS_VSLW,
    PPC_INS_VSPLTB,
    PPC_INS_VSPLTH,
    PPC_INS_VSPLTISB,
    PPC_INS_VSPLTISH,
    PPC_INS_VSPLTISW,
    PPC_INS_VSPLTW,
    PPC_INS_VSR,
    PPC_INS_VSRAB,
    PPC_INS_VSRAH,
    PPC_INS_VSRAW,
    PPC_INS_VSRB,
    PPC_INS_VSRH,
    PPC_INS_VSRO,
    PPC_INS_VSRW,
    PPC_INS_VSUBCUW,
    PPC_INS_VSUBFP,
    PPC_INS_VSUBSBS,
    PPC_INS_VSUBSHS,
    PPC_INS_VSUBSWS,
    PPC_INS_VSUBUBM,
    PPC_INS_VSUBUBS,
    PPC_INS_VSUBUHM,
    PPC_INS_VSUBUHS,
    PPC_INS_VSUBUWM,
    PPC_INS_VSUBUWS,
    PPC_INS_VSUM2SWS,
    PPC_INS_VSUM4SBS,
    PPC_INS_VSUM4SHS,
    PPC_INS_VSUM4UBS,
    PPC_INS_VSUMSWS,
    PPC_INS_VUPKHPX,
    PPC_INS_VUPKHSB,
    PPC_INS_VUPKHSH,
    PPC_INS_VUPKLPX,
    PPC_INS_VUPKLSB,
    PPC_INS_VUPKLSH,
    PPC_INS_VXOR,
    PPC_INS_WAIT,
    PPC_INS_WRTEE,
    PPC_INS_WRTEEI,
    PPC_INS_XOR,
    PPC_INS_XORI,
    PPC_INS_XORIS,
    PPC_INS_XSABSDP,
    PPC_INS_XSADDDP,
    PPC_INS_XSCMPODP,
    PPC_INS_XSCMPUDP,
    PPC_INS_XSCPSGNDP,
    PPC_INS_XSCVDPSP,
    PPC_INS_XSCVDPSXDS,
    PPC_INS_XSCVDPSXWS,
    PPC_INS_XSCVDPUXDS,
    PPC_INS_XSCVDPUXWS,
    PPC_INS_XSCVSPDP,
    PPC_INS_XSCVSXDDP,
    PPC_INS_XSCVUXDDP,
    PPC_INS_XSDIVDP,
    PPC_INS_XSMADDADP,
    PPC_INS_XSMADDMDP,
    PPC_INS_XSMAXDP,
    PPC_INS_XSMINDP,
    PPC_INS_XSMSUBADP,
    PPC_INS_XSMSUBMDP,
    PPC_INS_XSMULDP,
    PPC_INS_XSNABSDP,
    PPC_INS_XSNEGDP,
    PPC_INS_XSNMADDADP,
    PPC_INS_XSNMADDMDP,
    PPC_INS_XSNMSUBADP,
    PPC_INS_XSNMSUBMDP,
    PPC_INS_XSRDPI,
    PPC_INS_XSRDPIC,
    PPC_INS_XSRDPIM,
    PPC_INS_XSRDPIP,
    PPC_INS_XSRDPIZ,
    PPC_INS_XSREDP,
    PPC_INS_XSRSQRTEDP,
    PPC_INS_XSSQRTDP,
    PPC_INS_XSSUBDP,
    PPC_INS_XSTDIVDP,
    PPC_INS_XSTSQRTDP,
    PPC_INS_XVABSDP,
    PPC_INS_XVABSSP,
    PPC_INS_XVADDDP,
    PPC_INS_XVADDSP,
    PPC_INS_XVCMPEQDP,
    PPC_INS_XVCMPEQSP,
    PPC_INS_XVCMPGEDP,
    PPC_INS_XVCMPGESP,
    PPC_INS_XVCMPGTDP,
    PPC_INS_XVCMPGTSP,
    PPC_INS_XVCPSGNDP,
    PPC_INS_XVCPSGNSP,
    PPC_INS_XVCVDPSP,
    PPC_INS_XVCVDPSXDS,
    PPC_INS_XVCVDPSXWS,
    PPC_INS_XVCVDPUXDS,
    PPC_INS_XVCVDPUXWS,
    PPC_INS_XVCVSPDP,
    PPC_INS_XVCVSPSXDS,
    PPC_INS_XVCVSPSXWS,
    PPC_INS_XVCVSPUXDS,
    PPC_INS_XVCVSPUXWS,
    PPC_INS_XVCVSXDDP,
    PPC_INS_XVCVSXDSP,
    PPC_INS_XVCVSXWDP,
    PPC_INS_XVCVSXWSP,
    PPC_INS_XVCVUXDDP,
    PPC_INS_XVCVUXDSP,
    PPC_INS_XVCVUXWDP,
    PPC_INS_XVCVUXWSP,
    PPC_INS_XVDIVDP,
    PPC_INS_XVDIVSP,
    PPC_INS_XVMADDADP,
    PPC_INS_XVMADDASP,
    PPC_INS_XVMADDMDP,
    PPC_INS_XVMADDMSP,
    PPC_INS_XVMAXDP,
    PPC_INS_XVMAXSP,
    PPC_INS_XVMINDP,
    PPC_INS_XVMINSP,
    PPC_INS_XVMSUBADP,
    PPC_INS_XVMSUBASP,
    PPC_INS_XVMSUBMDP,
    PPC_INS_XVMSUBMSP,
    PPC_INS_XVMULDP,
    PPC_INS_XVMULSP,
    PPC_INS_XVNABSDP,
    PPC_INS_XVNABSSP,
    PPC_INS_XVNEGDP,
    PPC_INS_XVNEGSP,
    PPC_INS_XVNMADDADP,
    PPC_INS_XVNMADDASP,
    PPC_INS_XVNMADDMDP,
    PPC_INS_XVNMADDMSP,
    PPC_INS_XVNMSUBADP,
    PPC_INS_XVNMSUBASP,
    PPC_INS_XVNMSUBMDP,
    PPC_INS_XVNMSUBMSP,
    PPC_INS_XVRDPI,
    PPC_INS_XVRDPIC,
    PPC_INS_XVRDPIM,
    PPC_INS_XVRDPIP,
    PPC_INS_XVRDPIZ,
    PPC_INS_XVREDP,
    PPC_INS_XVRESP,
    PPC_INS_XVRSPI,
    PPC_INS_XVRSPIC,
    PPC_INS_XVRSPIM,
    PPC_INS_XVRSPIP,
    PPC_INS_XVRSPIZ,
    PPC_INS_XVRSQRTEDP,
    PPC_INS_XVRSQRTESP,
    PPC_INS_XVSQRTDP,
    PPC_INS_XVSQRTSP,
    PPC_INS_XVSUBDP,
    PPC_INS_XVSUBSP,
    PPC_INS_XVTDIVDP,
    PPC_INS_XVTDIVSP,
    PPC_INS_XVTSQRTDP,
    PPC_INS_XVTSQRTSP,
    PPC_INS_XXLAND,
    PPC_INS_XXLANDC,
    PPC_INS_XXLNOR,
    PPC_INS_XXLOR,
    PPC_INS_XXLXOR,
    PPC_INS_XXMRGHW,
    PPC_INS_XXMRGLW,
    PPC_INS_XXPERMDI,
    PPC_INS_XXSEL,
    PPC_INS_XXSLDWI,
    PPC_INS_XXSPLTW,
    PPC_INS_BCA,
    PPC_INS_BCLA,

    // extra & alias instructions
    PPC_INS_SLWI,
    PPC_INS_SRWI,
    PPC_INS_SLDI,

    PPC_INS_BTA,
    PPC_INS_CRSET,
    PPC_INS_CRNOT,
    PPC_INS_CRMOVE,
    PPC_INS_CRCLR,
    PPC_INS_MFBR0,
    PPC_INS_MFBR1,
    PPC_INS_MFBR2,
    PPC_INS_MFBR3,
    PPC_INS_MFBR4,
    PPC_INS_MFBR5,
    PPC_INS_MFBR6,
    PPC_INS_MFBR7,
    PPC_INS_MFXER,
    PPC_INS_MFRTCU,
    PPC_INS_MFRTCL,
    PPC_INS_MFDSCR,
    PPC_INS_MFDSISR,
    PPC_INS_MFDAR,
    PPC_INS_MFSRR2,
    PPC_INS_MFSRR3,
    PPC_INS_MFCFAR,
    PPC_INS_MFAMR,
    PPC_INS_MFPID,
    PPC_INS_MFTBLO,
    PPC_INS_MFTBHI,
    PPC_INS_MFDBATU,
    PPC_INS_MFDBATL,
    PPC_INS_MFIBATU,
    PPC_INS_MFIBATL,
    PPC_INS_MFDCCR,
    PPC_INS_MFICCR,
    PPC_INS_MFDEAR,
    PPC_INS_MFESR,
    PPC_INS_MFSPEFSCR,
    PPC_INS_MFTCR,
    PPC_INS_MFASR,
    PPC_INS_MFPVR,
    PPC_INS_MFTBU,
    PPC_INS_MTCR,
    PPC_INS_MTBR0,
    PPC_INS_MTBR1,
    PPC_INS_MTBR2,
    PPC_INS_MTBR3,
    PPC_INS_MTBR4,
    PPC_INS_MTBR5,
    PPC_INS_MTBR6,
    PPC_INS_MTBR7,
    PPC_INS_MTXER,
    PPC_INS_MTDSCR,
    PPC_INS_MTDSISR,
    PPC_INS_MTDAR,
    PPC_INS_MTSRR2,
    PPC_INS_MTSRR3,
    PPC_INS_MTCFAR,
    PPC_INS_MTAMR,
    PPC_INS_MTPID,
    PPC_INS_MTTBL,
    PPC_INS_MTTBU,
    PPC_INS_MTTBLO,
    PPC_INS_MTTBHI,
    PPC_INS_MTDBATU,
    PPC_INS_MTDBATL,
    PPC_INS_MTIBATU,
    PPC_INS_MTIBATL,
    PPC_INS_MTDCCR,
    PPC_INS_MTICCR,
    PPC_INS_MTDEAR,
    PPC_INS_MTESR,
    PPC_INS_MTSPEFSCR,
    PPC_INS_MTTCR,
    PPC_INS_NOT,
    PPC_INS_MR,
    PPC_INS_ROTLD,
    PPC_INS_ROTLDI,
    PPC_INS_CLRLDI,
    PPC_INS_ROTLWI,
    PPC_INS_CLRLWI,
    PPC_INS_ROTLW,
    PPC_INS_SUB,
    PPC_INS_SUBC,
    PPC_INS_LWSYNC,
    PPC_INS_PTESYNC,
    PPC_INS_TDLT,
    PPC_INS_TDEQ,
    PPC_INS_TDGT,
    PPC_INS_TDNE,
    PPC_INS_TDLLT,
    PPC_INS_TDLGT,
    PPC_INS_TDU,
    PPC_INS_TDLTI,
    PPC_INS_TDEQI,
    PPC_INS_TDGTI,
    PPC_INS_TDNEI,
    PPC_INS_TDLLTI,
    PPC_INS_TDLGTI,
    PPC_INS_TDUI,
    PPC_INS_TLBREHI,
    PPC_INS_TLBRELO,
    PPC_INS_TLBWEHI,
    PPC_INS_TLBWELO,
    PPC_INS_TWLT,
    PPC_INS_TWEQ,
    PPC_INS_TWGT,
    PPC_INS_TWNE,
    PPC_INS_TWLLT,
    PPC_INS_TWLGT,
    PPC_INS_TWU,
    PPC_INS_TWLTI,
    PPC_INS_TWEQI,
    PPC_INS_TWGTI,
    PPC_INS_TWNEI,
    PPC_INS_TWLLTI,
    PPC_INS_TWLGTI,
    PPC_INS_TWUI,
    PPC_INS_WAITRSV,
    PPC_INS_WAITIMPL,
    PPC_INS_XNOP,
    PPC_INS_XVMOVDP,
    PPC_INS_XVMOVSP,
    PPC_INS_XXSPLTD,
    PPC_INS_XXMRGHD,
    PPC_INS_XXMRGLD,
    PPC_INS_XXSWAPD,
    PPC_INS_BT,
    PPC_INS_BF,
    PPC_INS_BDNZT,
    PPC_INS_BDNZF,
    PPC_INS_BDZF,
    PPC_INS_BDZT,
    PPC_INS_BFA,
    PPC_INS_BDNZTA,
    PPC_INS_BDNZFA,
    PPC_INS_BDZTA,
    PPC_INS_BDZFA,
    PPC_INS_BTCTR,
    PPC_INS_BFCTR,
    PPC_INS_BTCTRL,
    PPC_INS_BFCTRL,
    PPC_INS_BTL,
    PPC_INS_BFL,
    PPC_INS_BDNZTL,
    PPC_INS_BDNZFL,
    PPC_INS_BDZTL,
    PPC_INS_BDZFL,
    PPC_INS_BTLA,
    PPC_INS_BFLA,
    PPC_INS_BDNZTLA,
    PPC_INS_BDNZFLA,
    PPC_INS_BDZTLA,
    PPC_INS_BDZFLA,
    PPC_INS_BTLR,
    PPC_INS_BFLR,
    PPC_INS_BDNZTLR,
    PPC_INS_BDZTLR,
    PPC_INS_BDZFLR,
    PPC_INS_BTLRL,
    PPC_INS_BFLRL,
    PPC_INS_BDNZTLRL,
    PPC_INS_BDNZFLRL,
    PPC_INS_BDZTLRL,
    PPC_INS_BDZFLRL,

    PPC_INS_ENDING,   // <-- mark the end of the list of instructions
} ppc_insn;

//> Group of PPC instructions
typedef enum ppc_insn_group
{
    PPC_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    PPC_GRP_JUMP,   // = CS_GRP_JUMP

    //> Architecture-specific groups
    PPC_GRP_ALTIVEC = 128,
    PPC_GRP_MODE32,
    PPC_GRP_MODE64,
    PPC_GRP_BOOKE,
    PPC_GRP_NOTBOOKE,
    PPC_GRP_SPE,
    PPC_GRP_VSX,
    PPC_GRP_E500,
    PPC_GRP_PPC4XX,
    PPC_GRP_PPC6XX,

    PPC_GRP_ENDING,   // <-- mark the end of the list of groups
} ppc_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/sparc.h
================================================
#ifndef CAPSTONE_SPARC_H
#define CAPSTONE_SPARC_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

// GCC SPARC toolchain has a default macro called "sparc" which breaks
// compilation
#undef sparc

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> Enums corresponding to Sparc condition codes, both icc's and fcc's.
typedef enum sparc_cc
{
    SPARC_CC_INVALID = 0,   // invalid CC (default)
    //> Integer condition codes
    SPARC_CC_ICC_A   =  8 + 256, // Always
    SPARC_CC_ICC_N   =  0 + 256, // Never
    SPARC_CC_ICC_NE  =  9 + 256, // Not Equal
    SPARC_CC_ICC_E   =  1 + 256, // Equal
    SPARC_CC_ICC_G   = 10 + 256, // Greater
    SPARC_CC_ICC_LE  =  2 + 256, // Less or Equal
    SPARC_CC_ICC_GE  = 11 + 256, // Greater or Equal
    SPARC_CC_ICC_L   =  3 + 256, // Less
    SPARC_CC_ICC_GU  = 12 + 256, // Greater Unsigned
    SPARC_CC_ICC_LEU =  4 + 256, // Less or Equal Unsigned
    SPARC_CC_ICC_CC  = 13 + 256, // Carry Clear/Great or Equal Unsigned
    SPARC_CC_ICC_CS  =  5 + 256, // Carry Set/Less Unsigned
    SPARC_CC_ICC_POS = 14 + 256, // Positive
    SPARC_CC_ICC_NEG =  6 + 256, // Negative
    SPARC_CC_ICC_VC  = 15 + 256, // Overflow Clear
    SPARC_CC_ICC_VS  =  7 + 256, // Overflow Set

    //> Floating condition codes
    SPARC_CC_FCC_A   =  8 + 16 + 256, // Always
    SPARC_CC_FCC_N   =  0 + 16 + 256, // Never
    SPARC_CC_FCC_U   =  7 + 16 + 256, // Unordered
    SPARC_CC_FCC_G   =  6 + 16 + 256, // Greater
    SPARC_CC_FCC_UG  =  5 + 16 + 256, // Unordered or Greater
    SPARC_CC_FCC_L   =  4 + 16 + 256, // Less
    SPARC_CC_FCC_UL  =  3 + 16 + 256, // Unordered or Less
    SPARC_CC_FCC_LG  =  2 + 16 + 256, // Less or Greater
    SPARC_CC_FCC_NE  =  1 + 16 + 256, // Not Equal
    SPARC_CC_FCC_E   =  9 + 16 + 256, // Equal
    SPARC_CC_FCC_UE  = 10 + 16 + 256, // Unordered or Equal
    SPARC_CC_FCC_GE  = 11 + 16 + 256, // Greater or Equal
    SPARC_CC_FCC_UGE = 12 + 16 + 256, // Unordered or Greater or Equal
    SPARC_CC_FCC_LE  = 13 + 16 + 256, // Less or Equal
    SPARC_CC_FCC_ULE = 14 + 16 + 256, // Unordered or Less or Equal
    SPARC_CC_FCC_O   = 15 + 16 + 256, // Ordered
} sparc_cc;

//> Branch hint
typedef enum sparc_hint
{
    SPARC_HINT_INVALID = 0, // no hint
    SPARC_HINT_A    = 1 << 0,   // annul delay slot instruction
    SPARC_HINT_PT   = 1 << 1,   // branch taken
    SPARC_HINT_PN   = 1 << 2,   // branch NOT taken
} sparc_hint;

//> Operand type for instruction's operands
typedef enum sparc_op_type
{
    SPARC_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    SPARC_OP_REG, // = CS_OP_REG (Register operand).
    SPARC_OP_IMM, // = CS_OP_IMM (Immediate operand).
    SPARC_OP_MEM, // = CS_OP_MEM (Memory operand).
} sparc_op_type;

// Instruction's operand referring to memory
// This is associated with SPARC_OP_MEM operand type above
typedef struct sparc_op_mem
{
    uint8_t base;   // base register
    uint8_t index;  // index register
    int32_t disp;   // displacement/offset value
} sparc_op_mem;

// Instruction operand
typedef struct cs_sparc_op
{
    sparc_op_type type; // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int32_t imm;        // immediate value for IMM operand
        sparc_op_mem mem;       // base/disp value for MEM operand
    };
} cs_sparc_op;

// Instruction structure
typedef struct cs_sparc
{
    sparc_cc cc;    // code condition for this insn
    sparc_hint hint;    // branch hint: encoding as bitwise OR of sparc_hint.
    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;
    cs_sparc_op operands[4]; // operands for this instruction.
} cs_sparc;

//> SPARC registers
typedef enum sparc_reg
{
    SPARC_REG_INVALID = 0,

    SPARC_REG_F0,
    SPARC_REG_F1,
    SPARC_REG_F2,
    SPARC_REG_F3,
    SPARC_REG_F4,
    SPARC_REG_F5,
    SPARC_REG_F6,
    SPARC_REG_F7,
    SPARC_REG_F8,
    SPARC_REG_F9,
    SPARC_REG_F10,
    SPARC_REG_F11,
    SPARC_REG_F12,
    SPARC_REG_F13,
    SPARC_REG_F14,
    SPARC_REG_F15,
    SPARC_REG_F16,
    SPARC_REG_F17,
    SPARC_REG_F18,
    SPARC_REG_F19,
    SPARC_REG_F20,
    SPARC_REG_F21,
    SPARC_REG_F22,
    SPARC_REG_F23,
    SPARC_REG_F24,
    SPARC_REG_F25,
    SPARC_REG_F26,
    SPARC_REG_F27,
    SPARC_REG_F28,
    SPARC_REG_F29,
    SPARC_REG_F30,
    SPARC_REG_F31,
    SPARC_REG_F32,
    SPARC_REG_F34,
    SPARC_REG_F36,
    SPARC_REG_F38,
    SPARC_REG_F40,
    SPARC_REG_F42,
    SPARC_REG_F44,
    SPARC_REG_F46,
    SPARC_REG_F48,
    SPARC_REG_F50,
    SPARC_REG_F52,
    SPARC_REG_F54,
    SPARC_REG_F56,
    SPARC_REG_F58,
    SPARC_REG_F60,
    SPARC_REG_F62,
    SPARC_REG_FCC0, // Floating condition codes
    SPARC_REG_FCC1,
    SPARC_REG_FCC2,
    SPARC_REG_FCC3,
    SPARC_REG_FP,
    SPARC_REG_G0,
    SPARC_REG_G1,
    SPARC_REG_G2,
    SPARC_REG_G3,
    SPARC_REG_G4,
    SPARC_REG_G5,
    SPARC_REG_G6,
    SPARC_REG_G7,
    SPARC_REG_I0,
    SPARC_REG_I1,
    SPARC_REG_I2,
    SPARC_REG_I3,
    SPARC_REG_I4,
    SPARC_REG_I5,
    SPARC_REG_I7,
    SPARC_REG_ICC,  // Integer condition codes
    SPARC_REG_L0,
    SPARC_REG_L1,
    SPARC_REG_L2,
    SPARC_REG_L3,
    SPARC_REG_L4,
    SPARC_REG_L5,
    SPARC_REG_L6,
    SPARC_REG_L7,
    SPARC_REG_O0,
    SPARC_REG_O1,
    SPARC_REG_O2,
    SPARC_REG_O3,
    SPARC_REG_O4,
    SPARC_REG_O5,
    SPARC_REG_O7,
    SPARC_REG_SP,
    SPARC_REG_Y,

    // special register
    SPARC_REG_XCC,

    SPARC_REG_ENDING,   // <-- mark the end of the list of registers

    // extras
    SPARC_REG_O6 = SPARC_REG_SP,
    SPARC_REG_I6 = SPARC_REG_FP,
} sparc_reg;

//> SPARC instruction
typedef enum sparc_insn
{
    SPARC_INS_INVALID = 0,

    SPARC_INS_ADDCC,
    SPARC_INS_ADDX,
    SPARC_INS_ADDXCC,
    SPARC_INS_ADDXC,
    SPARC_INS_ADDXCCC,
    SPARC_INS_ADD,
    SPARC_INS_ALIGNADDR,
    SPARC_INS_ALIGNADDRL,
    SPARC_INS_ANDCC,
    SPARC_INS_ANDNCC,
    SPARC_INS_ANDN,
    SPARC_INS_AND,
    SPARC_INS_ARRAY16,
    SPARC_INS_ARRAY32,
    SPARC_INS_ARRAY8,
    SPARC_INS_B,
    SPARC_INS_JMP,
    SPARC_INS_BMASK,
    SPARC_INS_FB,
    SPARC_INS_BRGEZ,
    SPARC_INS_BRGZ,
    SPARC_INS_BRLEZ,
    SPARC_INS_BRLZ,
    SPARC_INS_BRNZ,
    SPARC_INS_BRZ,
    SPARC_INS_BSHUFFLE,
    SPARC_INS_CALL,
    SPARC_INS_CASX,
    SPARC_INS_CAS,
    SPARC_INS_CMASK16,
    SPARC_INS_CMASK32,
    SPARC_INS_CMASK8,
    SPARC_INS_CMP,
    SPARC_INS_EDGE16,
    SPARC_INS_EDGE16L,
    SPARC_INS_EDGE16LN,
    SPARC_INS_EDGE16N,
    SPARC_INS_EDGE32,
    SPARC_INS_EDGE32L,
    SPARC_INS_EDGE32LN,
    SPARC_INS_EDGE32N,
    SPARC_INS_EDGE8,
    SPARC_INS_EDGE8L,
    SPARC_INS_EDGE8LN,
    SPARC_INS_EDGE8N,
    SPARC_INS_FABSD,
    SPARC_INS_FABSQ,
    SPARC_INS_FABSS,
    SPARC_INS_FADDD,
    SPARC_INS_FADDQ,
    SPARC_INS_FADDS,
    SPARC_INS_FALIGNDATA,
    SPARC_INS_FAND,
    SPARC_INS_FANDNOT1,
    SPARC_INS_FANDNOT1S,
    SPARC_INS_FANDNOT2,
    SPARC_INS_FANDNOT2S,
    SPARC_INS_FANDS,
    SPARC_INS_FCHKSM16,
    SPARC_INS_FCMPD,
    SPARC_INS_FCMPEQ16,
    SPARC_INS_FCMPEQ32,
    SPARC_INS_FCMPGT16,
    SPARC_INS_FCMPGT32,
    SPARC_INS_FCMPLE16,
    SPARC_INS_FCMPLE32,
    SPARC_INS_FCMPNE16,
    SPARC_INS_FCMPNE32,
    SPARC_INS_FCMPQ,
    SPARC_INS_FCMPS,
    SPARC_INS_FDIVD,
    SPARC_INS_FDIVQ,
    SPARC_INS_FDIVS,
    SPARC_INS_FDMULQ,
    SPARC_INS_FDTOI,
    SPARC_INS_FDTOQ,
    SPARC_INS_FDTOS,
    SPARC_INS_FDTOX,
    SPARC_INS_FEXPAND,
    SPARC_INS_FHADDD,
    SPARC_INS_FHADDS,
    SPARC_INS_FHSUBD,
    SPARC_INS_FHSUBS,
    SPARC_INS_FITOD,
    SPARC_INS_FITOQ,
    SPARC_INS_FITOS,
    SPARC_INS_FLCMPD,
    SPARC_INS_FLCMPS,
    SPARC_INS_FLUSHW,
    SPARC_INS_FMEAN16,
    SPARC_INS_FMOVD,
    SPARC_INS_FMOVQ,
    SPARC_INS_FMOVRDGEZ,
    SPARC_INS_FMOVRQGEZ,
    SPARC_INS_FMOVRSGEZ,
    SPARC_INS_FMOVRDGZ,
    SPARC_INS_FMOVRQGZ,
    SPARC_INS_FMOVRSGZ,
    SPARC_INS_FMOVRDLEZ,
    SPARC_INS_FMOVRQLEZ,
    SPARC_INS_FMOVRSLEZ,
    SPARC_INS_FMOVRDLZ,
    SPARC_INS_FMOVRQLZ,
    SPARC_INS_FMOVRSLZ,
    SPARC_INS_FMOVRDNZ,
    SPARC_INS_FMOVRQNZ,
    SPARC_INS_FMOVRSNZ,
    SPARC_INS_FMOVRDZ,
    SPARC_INS_FMOVRQZ,
    SPARC_INS_FMOVRSZ,
    SPARC_INS_FMOVS,
    SPARC_INS_FMUL8SUX16,
    SPARC_INS_FMUL8ULX16,
    SPARC_INS_FMUL8X16,
    SPARC_INS_FMUL8X16AL,
    SPARC_INS_FMUL8X16AU,
    SPARC_INS_FMULD,
    SPARC_INS_FMULD8SUX16,
    SPARC_INS_FMULD8ULX16,
    SPARC_INS_FMULQ,
    SPARC_INS_FMULS,
    SPARC_INS_FNADDD,
    SPARC_INS_FNADDS,
    SPARC_INS_FNAND,
    SPARC_INS_FNANDS,
    SPARC_INS_FNEGD,
    SPARC_INS_FNEGQ,
    SPARC_INS_FNEGS,
    SPARC_INS_FNHADDD,
    SPARC_INS_FNHADDS,
    SPARC_INS_FNOR,
    SPARC_INS_FNORS,
    SPARC_INS_FNOT1,
    SPARC_INS_FNOT1S,
    SPARC_INS_FNOT2,
    SPARC_INS_FNOT2S,
    SPARC_INS_FONE,
    SPARC_INS_FONES,
    SPARC_INS_FOR,
    SPARC_INS_FORNOT1,
    SPARC_INS_FORNOT1S,
    SPARC_INS_FORNOT2,
    SPARC_INS_FORNOT2S,
    SPARC_INS_FORS,
    SPARC_INS_FPACK16,
    SPARC_INS_FPACK32,
    SPARC_INS_FPACKFIX,
    SPARC_INS_FPADD16,
    SPARC_INS_FPADD16S,
    SPARC_INS_FPADD32,
    SPARC_INS_FPADD32S,
    SPARC_INS_FPADD64,
    SPARC_INS_FPMERGE,
    SPARC_INS_FPSUB16,
    SPARC_INS_FPSUB16S,
    SPARC_INS_FPSUB32,
    SPARC_INS_FPSUB32S,
    SPARC_INS_FQTOD,
    SPARC_INS_FQTOI,
    SPARC_INS_FQTOS,
    SPARC_INS_FQTOX,
    SPARC_INS_FSLAS16,
    SPARC_INS_FSLAS32,
    SPARC_INS_FSLL16,
    SPARC_INS_FSLL32,
    SPARC_INS_FSMULD,
    SPARC_INS_FSQRTD,
    SPARC_INS_FSQRTQ,
    SPARC_INS_FSQRTS,
    SPARC_INS_FSRA16,
    SPARC_INS_FSRA32,
    SPARC_INS_FSRC1,
    SPARC_INS_FSRC1S,
    SPARC_INS_FSRC2,
    SPARC_INS_FSRC2S,
    SPARC_INS_FSRL16,
    SPARC_INS_FSRL32,
    SPARC_INS_FSTOD,
    SPARC_INS_FSTOI,
    SPARC_INS_FSTOQ,
    SPARC_INS_FSTOX,
    SPARC_INS_FSUBD,
    SPARC_INS_FSUBQ,
    SPARC_INS_FSUBS,
    SPARC_INS_FXNOR,
    SPARC_INS_FXNORS,
    SPARC_INS_FXOR,
    SPARC_INS_FXORS,
    SPARC_INS_FXTOD,
    SPARC_INS_FXTOQ,
    SPARC_INS_FXTOS,
    SPARC_INS_FZERO,
    SPARC_INS_FZEROS,
    SPARC_INS_JMPL,
    SPARC_INS_LDD,
    SPARC_INS_LD,
    SPARC_INS_LDQ,
    SPARC_INS_LDSB,
    SPARC_INS_LDSH,
    SPARC_INS_LDSW,
    SPARC_INS_LDUB,
    SPARC_INS_LDUH,
    SPARC_INS_LDX,
    SPARC_INS_LZCNT,
    SPARC_INS_MEMBAR,
    SPARC_INS_MOVDTOX,
    SPARC_INS_MOV,
    SPARC_INS_MOVRGEZ,
    SPARC_INS_MOVRGZ,
    SPARC_INS_MOVRLEZ,
    SPARC_INS_MOVRLZ,
    SPARC_INS_MOVRNZ,
    SPARC_INS_MOVRZ,
    SPARC_INS_MOVSTOSW,
    SPARC_INS_MOVSTOUW,
    SPARC_INS_MULX,
    SPARC_INS_NOP,
    SPARC_INS_ORCC,
    SPARC_INS_ORNCC,
    SPARC_INS_ORN,
    SPARC_INS_OR,
    SPARC_INS_PDIST,
    SPARC_INS_PDISTN,
    SPARC_INS_POPC,
    SPARC_INS_RD,
    SPARC_INS_RESTORE,
    SPARC_INS_RETT,
    SPARC_INS_SAVE,
    SPARC_INS_SDIVCC,
    SPARC_INS_SDIVX,
    SPARC_INS_SDIV,
    SPARC_INS_SETHI,
    SPARC_INS_SHUTDOWN,
    SPARC_INS_SIAM,
    SPARC_INS_SLLX,
    SPARC_INS_SLL,
    SPARC_INS_SMULCC,
    SPARC_INS_SMUL,
    SPARC_INS_SRAX,
    SPARC_INS_SRA,
    SPARC_INS_SRLX,
    SPARC_INS_SRL,
    SPARC_INS_STBAR,
    SPARC_INS_STB,
    SPARC_INS_STD,
    SPARC_INS_ST,
    SPARC_INS_STH,
    SPARC_INS_STQ,
    SPARC_INS_STX,
    SPARC_INS_SUBCC,
    SPARC_INS_SUBX,
    SPARC_INS_SUBXCC,
    SPARC_INS_SUB,
    SPARC_INS_SWAP,
    SPARC_INS_TADDCCTV,
    SPARC_INS_TADDCC,
    SPARC_INS_T,
    SPARC_INS_TSUBCCTV,
    SPARC_INS_TSUBCC,
    SPARC_INS_UDIVCC,
    SPARC_INS_UDIVX,
    SPARC_INS_UDIV,
    SPARC_INS_UMULCC,
    SPARC_INS_UMULXHI,
    SPARC_INS_UMUL,
    SPARC_INS_UNIMP,
    SPARC_INS_FCMPED,
    SPARC_INS_FCMPEQ,
    SPARC_INS_FCMPES,
    SPARC_INS_WR,
    SPARC_INS_XMULX,
    SPARC_INS_XMULXHI,
    SPARC_INS_XNORCC,
    SPARC_INS_XNOR,
    SPARC_INS_XORCC,
    SPARC_INS_XOR,

    // alias instructions
    SPARC_INS_RET,
    SPARC_INS_RETL,

    SPARC_INS_ENDING,   // <-- mark the end of the list of instructions
} sparc_insn;

//> Group of SPARC instructions
typedef enum sparc_insn_group
{
    SPARC_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    SPARC_GRP_JUMP, // = CS_GRP_JUMP

    //> Architecture-specific groups
    SPARC_GRP_HARDQUAD = 128,
    SPARC_GRP_V9,
    SPARC_GRP_VIS,
    SPARC_GRP_VIS2,
    SPARC_GRP_VIS3,
    SPARC_GRP_32BIT,
    SPARC_GRP_64BIT,

    SPARC_GRP_ENDING,   // <-- mark the end of the list of groups
} sparc_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/systemz.h
================================================
#ifndef CAPSTONE_SYSTEMZ_H
#define CAPSTONE_SYSTEMZ_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> Enums corresponding to SystemZ condition codes
typedef enum sysz_cc
{
    SYSZ_CC_INVALID = 0,    // invalid CC (default)

    SYSZ_CC_O,
    SYSZ_CC_H,
    SYSZ_CC_NLE,
    SYSZ_CC_L,
    SYSZ_CC_NHE,
    SYSZ_CC_LH,
    SYSZ_CC_NE,
    SYSZ_CC_E,
    SYSZ_CC_NLH,
    SYSZ_CC_HE,
    SYSZ_CC_NL,
    SYSZ_CC_LE,
    SYSZ_CC_NH,
    SYSZ_CC_NO,
} sysz_cc;

//> Operand type for instruction's operands
typedef enum sysz_op_type
{
    SYSZ_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    SYSZ_OP_REG, // = CS_OP_REG (Register operand).
    SYSZ_OP_IMM, // = CS_OP_IMM (Immediate operand).
    SYSZ_OP_MEM, // = CS_OP_MEM (Memory operand).
    SYSZ_OP_ACREG = 64, // Access register operand.
} sysz_op_type;

// Instruction's operand referring to memory
// This is associated with SYSZ_OP_MEM operand type above
typedef struct sysz_op_mem
{
    uint8_t base;   // base register
    uint8_t index;  // index register
    uint64_t length;    // BDLAddr operand
    int64_t disp;   // displacement/offset value
} sysz_op_mem;

// Instruction operand
typedef struct cs_sysz_op
{
    sysz_op_type type;  // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int64_t imm;        // immediate value for IMM operand
        sysz_op_mem mem;        // base/disp value for MEM operand
    };
} cs_sysz_op;

// Instruction structure
typedef struct cs_sysz
{
    sysz_cc cc;     // Code condition
    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;
    cs_sysz_op operands[6]; // operands for this instruction.
} cs_sysz;

//> SystemZ registers
typedef enum sysz_reg
{
    SYSZ_REG_INVALID = 0,

    SYSZ_REG_0,
    SYSZ_REG_1,
    SYSZ_REG_2,
    SYSZ_REG_3,
    SYSZ_REG_4,
    SYSZ_REG_5,
    SYSZ_REG_6,
    SYSZ_REG_7,
    SYSZ_REG_8,
    SYSZ_REG_9,
    SYSZ_REG_10,
    SYSZ_REG_11,
    SYSZ_REG_12,
    SYSZ_REG_13,
    SYSZ_REG_14,
    SYSZ_REG_15,
    SYSZ_REG_CC,
    SYSZ_REG_F0,
    SYSZ_REG_F1,
    SYSZ_REG_F2,
    SYSZ_REG_F3,
    SYSZ_REG_F4,
    SYSZ_REG_F5,
    SYSZ_REG_F6,
    SYSZ_REG_F7,
    SYSZ_REG_F8,
    SYSZ_REG_F9,
    SYSZ_REG_F10,
    SYSZ_REG_F11,
    SYSZ_REG_F12,
    SYSZ_REG_F13,
    SYSZ_REG_F14,
    SYSZ_REG_F15,

    SYSZ_REG_R0L,

    SYSZ_REG_ENDING,
} sysz_reg;

//> SystemZ instruction
typedef enum sysz_insn
{
    SYSZ_INS_INVALID = 0,

    SYSZ_INS_A,
    SYSZ_INS_ADB,
    SYSZ_INS_ADBR,
    SYSZ_INS_AEB,
    SYSZ_INS_AEBR,
    SYSZ_INS_AFI,
    SYSZ_INS_AG,
    SYSZ_INS_AGF,
    SYSZ_INS_AGFI,
    SYSZ_INS_AGFR,
    SYSZ_INS_AGHI,
    SYSZ_INS_AGHIK,
    SYSZ_INS_AGR,
    SYSZ_INS_AGRK,
    SYSZ_INS_AGSI,
    SYSZ_INS_AH,
    SYSZ_INS_AHI,
    SYSZ_INS_AHIK,
    SYSZ_INS_AHY,
    SYSZ_INS_AIH,
    SYSZ_INS_AL,
    SYSZ_INS_ALC,
    SYSZ_INS_ALCG,
    SYSZ_INS_ALCGR,
    SYSZ_INS_ALCR,
    SYSZ_INS_ALFI,
    SYSZ_INS_ALG,
    SYSZ_INS_ALGF,
    SYSZ_INS_ALGFI,
    SYSZ_INS_ALGFR,
    SYSZ_INS_ALGHSIK,
    SYSZ_INS_ALGR,
    SYSZ_INS_ALGRK,
    SYSZ_INS_ALHSIK,
    SYSZ_INS_ALR,
    SYSZ_INS_ALRK,
    SYSZ_INS_ALY,
    SYSZ_INS_AR,
    SYSZ_INS_ARK,
    SYSZ_INS_ASI,
    SYSZ_INS_AXBR,
    SYSZ_INS_AY,
    SYSZ_INS_BCR,
    SYSZ_INS_BRC,
    SYSZ_INS_BRCL,
    SYSZ_INS_CGIJ,
    SYSZ_INS_CGRJ,
    SYSZ_INS_CIJ,
    SYSZ_INS_CLGIJ,
    SYSZ_INS_CLGRJ,
    SYSZ_INS_CLIJ,
    SYSZ_INS_CLRJ,
    SYSZ_INS_CRJ,
    SYSZ_INS_BER,
    SYSZ_INS_JE,
    SYSZ_INS_JGE,
    SYSZ_INS_LOCE,
    SYSZ_INS_LOCGE,
    SYSZ_INS_LOCGRE,
    SYSZ_INS_LOCRE,
    SYSZ_INS_STOCE,
    SYSZ_INS_STOCGE,
    SYSZ_INS_BHR,
    SYSZ_INS_BHER,
    SYSZ_INS_JHE,
    SYSZ_INS_JGHE,
    SYSZ_INS_LOCHE,
    SYSZ_INS_LOCGHE,
    SYSZ_INS_LOCGRHE,
    SYSZ_INS_LOCRHE,
    SYSZ_INS_STOCHE,
    SYSZ_INS_STOCGHE,
    SYSZ_INS_JH,
    SYSZ_INS_JGH,
    SYSZ_INS_LOCH,
    SYSZ_INS_LOCGH,
    SYSZ_INS_LOCGRH,
    SYSZ_INS_LOCRH,
    SYSZ_INS_STOCH,
    SYSZ_INS_STOCGH,
    SYSZ_INS_CGIJNLH,
    SYSZ_INS_CGRJNLH,
    SYSZ_INS_CIJNLH,
    SYSZ_INS_CLGIJNLH,
    SYSZ_INS_CLGRJNLH,
    SYSZ_INS_CLIJNLH,
    SYSZ_INS_CLRJNLH,
    SYSZ_INS_CRJNLH,
    SYSZ_INS_CGIJE,
    SYSZ_INS_CGRJE,
    SYSZ_INS_CIJE,
    SYSZ_INS_CLGIJE,
    SYSZ_INS_CLGRJE,
    SYSZ_INS_CLIJE,
    SYSZ_INS_CLRJE,
    SYSZ_INS_CRJE,
    SYSZ_INS_CGIJNLE,
    SYSZ_INS_CGRJNLE,
    SYSZ_INS_CIJNLE,
    SYSZ_INS_CLGIJNLE,
    SYSZ_INS_CLGRJNLE,
    SYSZ_INS_CLIJNLE,
    SYSZ_INS_CLRJNLE,
    SYSZ_INS_CRJNLE,
    SYSZ_INS_CGIJH,
    SYSZ_INS_CGRJH,
    SYSZ_INS_CIJH,
    SYSZ_INS_CLGIJH,
    SYSZ_INS_CLGRJH,
    SYSZ_INS_CLIJH,
    SYSZ_INS_CLRJH,
    SYSZ_INS_CRJH,
    SYSZ_INS_CGIJNL,
    SYSZ_INS_CGRJNL,
    SYSZ_INS_CIJNL,
    SYSZ_INS_CLGIJNL,
    SYSZ_INS_CLGRJNL,
    SYSZ_INS_CLIJNL,
    SYSZ_INS_CLRJNL,
    SYSZ_INS_CRJNL,
    SYSZ_INS_CGIJHE,
    SYSZ_INS_CGRJHE,
    SYSZ_INS_CIJHE,
    SYSZ_INS_CLGIJHE,
    SYSZ_INS_CLGRJHE,
    SYSZ_INS_CLIJHE,
    SYSZ_INS_CLRJHE,
    SYSZ_INS_CRJHE,
    SYSZ_INS_CGIJNHE,
    SYSZ_INS_CGRJNHE,
    SYSZ_INS_CIJNHE,
    SYSZ_INS_CLGIJNHE,
    SYSZ_INS_CLGRJNHE,
    SYSZ_INS_CLIJNHE,
    SYSZ_INS_CLRJNHE,
    SYSZ_INS_CRJNHE,
    SYSZ_INS_CGIJL,
    SYSZ_INS_CGRJL,
    SYSZ_INS_CIJL,
    SYSZ_INS_CLGIJL,
    SYSZ_INS_CLGRJL,
    SYSZ_INS_CLIJL,
    SYSZ_INS_CLRJL,
    SYSZ_INS_CRJL,
    SYSZ_INS_CGIJNH,
    SYSZ_INS_CGRJNH,
    SYSZ_INS_CIJNH,
    SYSZ_INS_CLGIJNH,
    SYSZ_INS_CLGRJNH,
    SYSZ_INS_CLIJNH,
    SYSZ_INS_CLRJNH,
    SYSZ_INS_CRJNH,
    SYSZ_INS_CGIJLE,
    SYSZ_INS_CGRJLE,
    SYSZ_INS_CIJLE,
    SYSZ_INS_CLGIJLE,
    SYSZ_INS_CLGRJLE,
    SYSZ_INS_CLIJLE,
    SYSZ_INS_CLRJLE,
    SYSZ_INS_CRJLE,
    SYSZ_INS_CGIJNE,
    SYSZ_INS_CGRJNE,
    SYSZ_INS_CIJNE,
    SYSZ_INS_CLGIJNE,
    SYSZ_INS_CLGRJNE,
    SYSZ_INS_CLIJNE,
    SYSZ_INS_CLRJNE,
    SYSZ_INS_CRJNE,
    SYSZ_INS_CGIJLH,
    SYSZ_INS_CGRJLH,
    SYSZ_INS_CIJLH,
    SYSZ_INS_CLGIJLH,
    SYSZ_INS_CLGRJLH,
    SYSZ_INS_CLIJLH,
    SYSZ_INS_CLRJLH,
    SYSZ_INS_CRJLH,
    SYSZ_INS_BLR,
    SYSZ_INS_BLER,
    SYSZ_INS_JLE,
    SYSZ_INS_JGLE,
    SYSZ_INS_LOCLE,
    SYSZ_INS_LOCGLE,
    SYSZ_INS_LOCGRLE,
    SYSZ_INS_LOCRLE,
    SYSZ_INS_STOCLE,
    SYSZ_INS_STOCGLE,
    SYSZ_INS_BLHR,
    SYSZ_INS_JLH,
    SYSZ_INS_JGLH,
    SYSZ_INS_LOCLH,
    SYSZ_INS_LOCGLH,
    SYSZ_INS_LOCGRLH,
    SYSZ_INS_LOCRLH,
    SYSZ_INS_STOCLH,
    SYSZ_INS_STOCGLH,
    SYSZ_INS_JL,
    SYSZ_INS_JGL,
    SYSZ_INS_LOCL,
    SYSZ_INS_LOCGL,
    SYSZ_INS_LOCGRL,
    SYSZ_INS_LOCRL,
    SYSZ_INS_LOC,
    SYSZ_INS_LOCG,
    SYSZ_INS_LOCGR,
    SYSZ_INS_LOCR,
    SYSZ_INS_STOCL,
    SYSZ_INS_STOCGL,
    SYSZ_INS_BNER,
    SYSZ_INS_JNE,
    SYSZ_INS_JGNE,
    SYSZ_INS_LOCNE,
    SYSZ_INS_LOCGNE,
    SYSZ_INS_LOCGRNE,
    SYSZ_INS_LOCRNE,
    SYSZ_INS_STOCNE,
    SYSZ_INS_STOCGNE,
    SYSZ_INS_BNHR,
    SYSZ_INS_BNHER,
    SYSZ_INS_JNHE,
    SYSZ_INS_JGNHE,
    SYSZ_INS_LOCNHE,
    SYSZ_INS_LOCGNHE,
    SYSZ_INS_LOCGRNHE,
    SYSZ_INS_LOCRNHE,
    SYSZ_INS_STOCNHE,
    SYSZ_INS_STOCGNHE,
    SYSZ_INS_JNH,
    SYSZ_INS_JGNH,
    SYSZ_INS_LOCNH,
    SYSZ_INS_LOCGNH,
    SYSZ_INS_LOCGRNH,
    SYSZ_INS_LOCRNH,
    SYSZ_INS_STOCNH,
    SYSZ_INS_STOCGNH,
    SYSZ_INS_BNLR,
    SYSZ_INS_BNLER,
    SYSZ_INS_JNLE,
    SYSZ_INS_JGNLE,
    SYSZ_INS_LOCNLE,
    SYSZ_INS_LOCGNLE,
    SYSZ_INS_LOCGRNLE,
    SYSZ_INS_LOCRNLE,
    SYSZ_INS_STOCNLE,
    SYSZ_INS_STOCGNLE,
    SYSZ_INS_BNLHR,
    SYSZ_INS_JNLH,
    SYSZ_INS_JGNLH,
    SYSZ_INS_LOCNLH,
    SYSZ_INS_LOCGNLH,
    SYSZ_INS_LOCGRNLH,
    SYSZ_INS_LOCRNLH,
    SYSZ_INS_STOCNLH,
    SYSZ_INS_STOCGNLH,
    SYSZ_INS_JNL,
    SYSZ_INS_JGNL,
    SYSZ_INS_LOCNL,
    SYSZ_INS_LOCGNL,
    SYSZ_INS_LOCGRNL,
    SYSZ_INS_LOCRNL,
    SYSZ_INS_STOCNL,
    SYSZ_INS_STOCGNL,
    SYSZ_INS_BNOR,
    SYSZ_INS_JNO,
    SYSZ_INS_JGNO,
    SYSZ_INS_LOCNO,
    SYSZ_INS_LOCGNO,
    SYSZ_INS_LOCGRNO,
    SYSZ_INS_LOCRNO,
    SYSZ_INS_STOCNO,
    SYSZ_INS_STOCGNO,
    SYSZ_INS_BOR,
    SYSZ_INS_JO,
    SYSZ_INS_JGO,
    SYSZ_INS_LOCO,
    SYSZ_INS_LOCGO,
    SYSZ_INS_LOCGRO,
    SYSZ_INS_LOCRO,
    SYSZ_INS_STOCO,
    SYSZ_INS_STOCGO,
    SYSZ_INS_STOC,
    SYSZ_INS_STOCG,
    SYSZ_INS_BASR,
    SYSZ_INS_BR,
    SYSZ_INS_BRAS,
    SYSZ_INS_BRASL,
    SYSZ_INS_J,
    SYSZ_INS_JG,
    SYSZ_INS_BRCT,
    SYSZ_INS_BRCTG,
    SYSZ_INS_C,
    SYSZ_INS_CDB,
    SYSZ_INS_CDBR,
    SYSZ_INS_CDFBR,
    SYSZ_INS_CDGBR,
    SYSZ_INS_CDLFBR,
    SYSZ_INS_CDLGBR,
    SYSZ_INS_CEB,
    SYSZ_INS_CEBR,
    SYSZ_INS_CEFBR,
    SYSZ_INS_CEGBR,
    SYSZ_INS_CELFBR,
    SYSZ_INS_CELGBR,
    SYSZ_INS_CFDBR,
    SYSZ_INS_CFEBR,
    SYSZ_INS_CFI,
    SYSZ_INS_CFXBR,
    SYSZ_INS_CG,
    SYSZ_INS_CGDBR,
    SYSZ_INS_CGEBR,
    SYSZ_INS_CGF,
    SYSZ_INS_CGFI,
    SYSZ_INS_CGFR,
    SYSZ_INS_CGFRL,
    SYSZ_INS_CGH,
    SYSZ_INS_CGHI,
    SYSZ_INS_CGHRL,
    SYSZ_INS_CGHSI,
    SYSZ_INS_CGR,
    SYSZ_INS_CGRL,
    SYSZ_INS_CGXBR,
    SYSZ_INS_CH,
    SYSZ_INS_CHF,
    SYSZ_INS_CHHSI,
    SYSZ_INS_CHI,
    SYSZ_INS_CHRL,
    SYSZ_INS_CHSI,
    SYSZ_INS_CHY,
    SYSZ_INS_CIH,
    SYSZ_INS_CL,
    SYSZ_INS_CLC,
    SYSZ_INS_CLFDBR,
    SYSZ_INS_CLFEBR,
    SYSZ_INS_CLFHSI,
    SYSZ_INS_CLFI,
    SYSZ_INS_CLFXBR,
    SYSZ_INS_CLG,
    SYSZ_INS_CLGDBR,
    SYSZ_INS_CLGEBR,
    SYSZ_INS_CLGF,
    SYSZ_INS_CLGFI,
    SYSZ_INS_CLGFR,
    SYSZ_INS_CLGFRL,
    SYSZ_INS_CLGHRL,
    SYSZ_INS_CLGHSI,
    SYSZ_INS_CLGR,
    SYSZ_INS_CLGRL,
    SYSZ_INS_CLGXBR,
    SYSZ_INS_CLHF,
    SYSZ_INS_CLHHSI,
    SYSZ_INS_CLHRL,
    SYSZ_INS_CLI,
    SYSZ_INS_CLIH,
    SYSZ_INS_CLIY,
    SYSZ_INS_CLR,
    SYSZ_INS_CLRL,
    SYSZ_INS_CLST,
    SYSZ_INS_CLY,
    SYSZ_INS_CPSDR,
    SYSZ_INS_CR,
    SYSZ_INS_CRL,
    SYSZ_INS_CS,
    SYSZ_INS_CSG,
    SYSZ_INS_CSY,
    SYSZ_INS_CXBR,
    SYSZ_INS_CXFBR,
    SYSZ_INS_CXGBR,
    SYSZ_INS_CXLFBR,
    SYSZ_INS_CXLGBR,
    SYSZ_INS_CY,
    SYSZ_INS_DDB,
    SYSZ_INS_DDBR,
    SYSZ_INS_DEB,
    SYSZ_INS_DEBR,
    SYSZ_INS_DL,
    SYSZ_INS_DLG,
    SYSZ_INS_DLGR,
    SYSZ_INS_DLR,
    SYSZ_INS_DSG,
    SYSZ_INS_DSGF,
    SYSZ_INS_DSGFR,
    SYSZ_INS_DSGR,
    SYSZ_INS_DXBR,
    SYSZ_INS_EAR,
    SYSZ_INS_FIDBR,
    SYSZ_INS_FIDBRA,
    SYSZ_INS_FIEBR,
    SYSZ_INS_FIEBRA,
    SYSZ_INS_FIXBR,
    SYSZ_INS_FIXBRA,
    SYSZ_INS_FLOGR,
    SYSZ_INS_IC,
    SYSZ_INS_ICY,
    SYSZ_INS_IIHF,
    SYSZ_INS_IIHH,
    SYSZ_INS_IIHL,
    SYSZ_INS_IILF,
    SYSZ_INS_IILH,
    SYSZ_INS_IILL,
    SYSZ_INS_IPM,
    SYSZ_INS_L,
    SYSZ_INS_LA,
    SYSZ_INS_LAA,
    SYSZ_INS_LAAG,
    SYSZ_INS_LAAL,
    SYSZ_INS_LAALG,
    SYSZ_INS_LAN,
    SYSZ_INS_LANG,
    SYSZ_INS_LAO,
    SYSZ_INS_LAOG,
    SYSZ_INS_LARL,
    SYSZ_INS_LAX,
    SYSZ_INS_LAXG,
    SYSZ_INS_LAY,
    SYSZ_INS_LB,
    SYSZ_INS_LBH,
    SYSZ_INS_LBR,
    SYSZ_INS_LCDBR,
    SYSZ_INS_LCEBR,
    SYSZ_INS_LCGFR,
    SYSZ_INS_LCGR,
    SYSZ_INS_LCR,
    SYSZ_INS_LCXBR,
    SYSZ_INS_LD,
    SYSZ_INS_LDEB,
    SYSZ_INS_LDEBR,
    SYSZ_INS_LDGR,
    SYSZ_INS_LDR,
    SYSZ_INS_LDXBR,
    SYSZ_INS_LDXBRA,
    SYSZ_INS_LDY,
    SYSZ_INS_LE,
    SYSZ_INS_LEDBR,
    SYSZ_INS_LEDBRA,
    SYSZ_INS_LER,
    SYSZ_INS_LEXBR,
    SYSZ_INS_LEXBRA,
    SYSZ_INS_LEY,
    SYSZ_INS_LFH,
    SYSZ_INS_LG,
    SYSZ_INS_LGB,
    SYSZ_INS_LGBR,
    SYSZ_INS_LGDR,
    SYSZ_INS_LGF,
    SYSZ_INS_LGFI,
    SYSZ_INS_LGFR,
    SYSZ_INS_LGFRL,
    SYSZ_INS_LGH,
    SYSZ_INS_LGHI,
    SYSZ_INS_LGHR,
    SYSZ_INS_LGHRL,
    SYSZ_INS_LGR,
    SYSZ_INS_LGRL,
    SYSZ_INS_LH,
    SYSZ_INS_LHH,
    SYSZ_INS_LHI,
    SYSZ_INS_LHR,
    SYSZ_INS_LHRL,
    SYSZ_INS_LHY,
    SYSZ_INS_LLC,
    SYSZ_INS_LLCH,
    SYSZ_INS_LLCR,
    SYSZ_INS_LLGC,
    SYSZ_INS_LLGCR,
    SYSZ_INS_LLGF,
    SYSZ_INS_LLGFR,
    SYSZ_INS_LLGFRL,
    SYSZ_INS_LLGH,
    SYSZ_INS_LLGHR,
    SYSZ_INS_LLGHRL,
    SYSZ_INS_LLH,
    SYSZ_INS_LLHH,
    SYSZ_INS_LLHR,
    SYSZ_INS_LLHRL,
    SYSZ_INS_LLIHF,
    SYSZ_INS_LLIHH,
    SYSZ_INS_LLIHL,
    SYSZ_INS_LLILF,
    SYSZ_INS_LLILH,
    SYSZ_INS_LLILL,
    SYSZ_INS_LMG,
    SYSZ_INS_LNDBR,
    SYSZ_INS_LNEBR,
    SYSZ_INS_LNGFR,
    SYSZ_INS_LNGR,
    SYSZ_INS_LNR,
    SYSZ_INS_LNXBR,
    SYSZ_INS_LPDBR,
    SYSZ_INS_LPEBR,
    SYSZ_INS_LPGFR,
    SYSZ_INS_LPGR,
    SYSZ_INS_LPR,
    SYSZ_INS_LPXBR,
    SYSZ_INS_LR,
    SYSZ_INS_LRL,
    SYSZ_INS_LRV,
    SYSZ_INS_LRVG,
    SYSZ_INS_LRVGR,
    SYSZ_INS_LRVR,
    SYSZ_INS_LT,
    SYSZ_INS_LTDBR,
    SYSZ_INS_LTEBR,
    SYSZ_INS_LTG,
    SYSZ_INS_LTGF,
    SYSZ_INS_LTGFR,
    SYSZ_INS_LTGR,
    SYSZ_INS_LTR,
    SYSZ_INS_LTXBR,
    SYSZ_INS_LXDB,
    SYSZ_INS_LXDBR,
    SYSZ_INS_LXEB,
    SYSZ_INS_LXEBR,
    SYSZ_INS_LXR,
    SYSZ_INS_LY,
    SYSZ_INS_LZDR,
    SYSZ_INS_LZER,
    SYSZ_INS_LZXR,
    SYSZ_INS_MADB,
    SYSZ_INS_MADBR,
    SYSZ_INS_MAEB,
    SYSZ_INS_MAEBR,
    SYSZ_INS_MDB,
    SYSZ_INS_MDBR,
    SYSZ_INS_MDEB,
    SYSZ_INS_MDEBR,
    SYSZ_INS_MEEB,
    SYSZ_INS_MEEBR,
    SYSZ_INS_MGHI,
    SYSZ_INS_MH,
    SYSZ_INS_MHI,
    SYSZ_INS_MHY,
    SYSZ_INS_MLG,
    SYSZ_INS_MLGR,
    SYSZ_INS_MS,
    SYSZ_INS_MSDB,
    SYSZ_INS_MSDBR,
    SYSZ_INS_MSEB,
    SYSZ_INS_MSEBR,
    SYSZ_INS_MSFI,
    SYSZ_INS_MSG,
    SYSZ_INS_MSGF,
    SYSZ_INS_MSGFI,
    SYSZ_INS_MSGFR,
    SYSZ_INS_MSGR,
    SYSZ_INS_MSR,
    SYSZ_INS_MSY,
    SYSZ_INS_MVC,
    SYSZ_INS_MVGHI,
    SYSZ_INS_MVHHI,
    SYSZ_INS_MVHI,
    SYSZ_INS_MVI,
    SYSZ_INS_MVIY,
    SYSZ_INS_MVST,
    SYSZ_INS_MXBR,
    SYSZ_INS_MXDB,
    SYSZ_INS_MXDBR,
    SYSZ_INS_N,
    SYSZ_INS_NC,
    SYSZ_INS_NG,
    SYSZ_INS_NGR,
    SYSZ_INS_NGRK,
    SYSZ_INS_NI,
    SYSZ_INS_NIHF,
    SYSZ_INS_NIHH,
    SYSZ_INS_NIHL,
    SYSZ_INS_NILF,
    SYSZ_INS_NILH,
    SYSZ_INS_NILL,
    SYSZ_INS_NIY,
    SYSZ_INS_NR,
    SYSZ_INS_NRK,
    SYSZ_INS_NY,
    SYSZ_INS_O,
    SYSZ_INS_OC,
    SYSZ_INS_OG,
    SYSZ_INS_OGR,
    SYSZ_INS_OGRK,
    SYSZ_INS_OI,
    SYSZ_INS_OIHF,
    SYSZ_INS_OIHH,
    SYSZ_INS_OIHL,
    SYSZ_INS_OILF,
    SYSZ_INS_OILH,
    SYSZ_INS_OILL,
    SYSZ_INS_OIY,
    SYSZ_INS_OR,
    SYSZ_INS_ORK,
    SYSZ_INS_OY,
    SYSZ_INS_PFD,
    SYSZ_INS_PFDRL,
    SYSZ_INS_RISBG,
    SYSZ_INS_RISBHG,
    SYSZ_INS_RISBLG,
    SYSZ_INS_RLL,
    SYSZ_INS_RLLG,
    SYSZ_INS_RNSBG,
    SYSZ_INS_ROSBG,
    SYSZ_INS_RXSBG,
    SYSZ_INS_S,
    SYSZ_INS_SDB,
    SYSZ_INS_SDBR,
    SYSZ_INS_SEB,
    SYSZ_INS_SEBR,
    SYSZ_INS_SG,
    SYSZ_INS_SGF,
    SYSZ_INS_SGFR,
    SYSZ_INS_SGR,
    SYSZ_INS_SGRK,
    SYSZ_INS_SH,
    SYSZ_INS_SHY,
    SYSZ_INS_SL,
    SYSZ_INS_SLB,
    SYSZ_INS_SLBG,
    SYSZ_INS_SLBR,
    SYSZ_INS_SLFI,
    SYSZ_INS_SLG,
    SYSZ_INS_SLBGR,
    SYSZ_INS_SLGF,
    SYSZ_INS_SLGFI,
    SYSZ_INS_SLGFR,
    SYSZ_INS_SLGR,
    SYSZ_INS_SLGRK,
    SYSZ_INS_SLL,
    SYSZ_INS_SLLG,
    SYSZ_INS_SLLK,
    SYSZ_INS_SLR,
    SYSZ_INS_SLRK,
    SYSZ_INS_SLY,
    SYSZ_INS_SQDB,
    SYSZ_INS_SQDBR,
    SYSZ_INS_SQEB,
    SYSZ_INS_SQEBR,
    SYSZ_INS_SQXBR,
    SYSZ_INS_SR,
    SYSZ_INS_SRA,
    SYSZ_INS_SRAG,
    SYSZ_INS_SRAK,
    SYSZ_INS_SRK,
    SYSZ_INS_SRL,
    SYSZ_INS_SRLG,
    SYSZ_INS_SRLK,
    SYSZ_INS_SRST,
    SYSZ_INS_ST,
    SYSZ_INS_STC,
    SYSZ_INS_STCH,
    SYSZ_INS_STCY,
    SYSZ_INS_STD,
    SYSZ_INS_STDY,
    SYSZ_INS_STE,
    SYSZ_INS_STEY,
    SYSZ_INS_STFH,
    SYSZ_INS_STG,
    SYSZ_INS_STGRL,
    SYSZ_INS_STH,
    SYSZ_INS_STHH,
    SYSZ_INS_STHRL,
    SYSZ_INS_STHY,
    SYSZ_INS_STMG,
    SYSZ_INS_STRL,
    SYSZ_INS_STRV,
    SYSZ_INS_STRVG,
    SYSZ_INS_STY,
    SYSZ_INS_SXBR,
    SYSZ_INS_SY,
    SYSZ_INS_TM,
    SYSZ_INS_TMHH,
    SYSZ_INS_TMHL,
    SYSZ_INS_TMLH,
    SYSZ_INS_TMLL,
    SYSZ_INS_TMY,
    SYSZ_INS_X,
    SYSZ_INS_XC,
    SYSZ_INS_XG,
    SYSZ_INS_XGR,
    SYSZ_INS_XGRK,
    SYSZ_INS_XI,
    SYSZ_INS_XIHF,
    SYSZ_INS_XILF,
    SYSZ_INS_XIY,
    SYSZ_INS_XR,
    SYSZ_INS_XRK,
    SYSZ_INS_XY,

    SYSZ_INS_ENDING,   // <-- mark the end of the list of instructions
} sysz_insn;

//> Group of SystemZ instructions
typedef enum sysz_insn_group
{
    SYSZ_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    SYSZ_GRP_JUMP,  // = CS_GRP_JUMP

    //> Architecture-specific groups
    SYSZ_GRP_DISTINCTOPS = 128,
    SYSZ_GRP_FPEXTENSION,
    SYSZ_GRP_HIGHWORD,
    SYSZ_GRP_INTERLOCKEDACCESS1,
    SYSZ_GRP_LOADSTOREONCOND,

    SYSZ_GRP_ENDING,   // <-- mark the end of the list of groups
} sysz_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/x86.h
================================================
#ifndef CAPSTONE_X86_H
#define CAPSTONE_X86_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

// Calculate relative address for X86-64, given cs_insn structure
#define X86_REL_ADDR(insn) (insn.address + insn.size + insn.detail->x86.disp)

//> X86 registers
typedef enum x86_reg
{
    X86_REG_INVALID = 0,
    X86_REG_AH, X86_REG_AL, X86_REG_AX, X86_REG_BH, X86_REG_BL,
    X86_REG_BP, X86_REG_BPL, X86_REG_BX, X86_REG_CH, X86_REG_CL,
    X86_REG_CS, X86_REG_CX, X86_REG_DH, X86_REG_DI, X86_REG_DIL,
    X86_REG_DL, X86_REG_DS, X86_REG_DX, X86_REG_EAX, X86_REG_EBP,
    X86_REG_EBX, X86_REG_ECX, X86_REG_EDI, X86_REG_EDX, X86_REG_EFLAGS,
    X86_REG_EIP, X86_REG_EIZ, X86_REG_ES, X86_REG_ESI, X86_REG_ESP,
    X86_REG_FPSW, X86_REG_FS, X86_REG_GS, X86_REG_IP, X86_REG_RAX,
    X86_REG_RBP, X86_REG_RBX, X86_REG_RCX, X86_REG_RDI, X86_REG_RDX,
    X86_REG_RIP, X86_REG_RIZ, X86_REG_RSI, X86_REG_RSP, X86_REG_SI,
    X86_REG_SIL, X86_REG_SP, X86_REG_SPL, X86_REG_SS, X86_REG_CR0,
    X86_REG_CR1, X86_REG_CR2, X86_REG_CR3, X86_REG_CR4, X86_REG_CR5,
    X86_REG_CR6, X86_REG_CR7, X86_REG_CR8, X86_REG_CR9, X86_REG_CR10,
    X86_REG_CR11, X86_REG_CR12, X86_REG_CR13, X86_REG_CR14, X86_REG_CR15,
    X86_REG_DR0, X86_REG_DR1, X86_REG_DR2, X86_REG_DR3, X86_REG_DR4,
    X86_REG_DR5, X86_REG_DR6, X86_REG_DR7, X86_REG_FP0, X86_REG_FP1,
    X86_REG_FP2, X86_REG_FP3, X86_REG_FP4, X86_REG_FP5, X86_REG_FP6, X86_REG_FP7,
    X86_REG_K0, X86_REG_K1, X86_REG_K2, X86_REG_K3, X86_REG_K4,
    X86_REG_K5, X86_REG_K6, X86_REG_K7, X86_REG_MM0, X86_REG_MM1,
    X86_REG_MM2, X86_REG_MM3, X86_REG_MM4, X86_REG_MM5, X86_REG_MM6,
    X86_REG_MM7, X86_REG_R8, X86_REG_R9, X86_REG_R10, X86_REG_R11,
    X86_REG_R12, X86_REG_R13, X86_REG_R14, X86_REG_R15,
    X86_REG_ST0, X86_REG_ST1, X86_REG_ST2, X86_REG_ST3,
    X86_REG_ST4, X86_REG_ST5, X86_REG_ST6, X86_REG_ST7,
    X86_REG_XMM0, X86_REG_XMM1, X86_REG_XMM2, X86_REG_XMM3, X86_REG_XMM4,
    X86_REG_XMM5, X86_REG_XMM6, X86_REG_XMM7, X86_REG_XMM8, X86_REG_XMM9,
    X86_REG_XMM10, X86_REG_XMM11, X86_REG_XMM12, X86_REG_XMM13, X86_REG_XMM14,
    X86_REG_XMM15, X86_REG_XMM16, X86_REG_XMM17, X86_REG_XMM18, X86_REG_XMM19,
    X86_REG_XMM20, X86_REG_XMM21, X86_REG_XMM22, X86_REG_XMM23, X86_REG_XMM24,
    X86_REG_XMM25, X86_REG_XMM26, X86_REG_XMM27, X86_REG_XMM28, X86_REG_XMM29,
    X86_REG_XMM30, X86_REG_XMM31, X86_REG_YMM0, X86_REG_YMM1, X86_REG_YMM2,
    X86_REG_YMM3, X86_REG_YMM4, X86_REG_YMM5, X86_REG_YMM6, X86_REG_YMM7,
    X86_REG_YMM8, X86_REG_YMM9, X86_REG_YMM10, X86_REG_YMM11, X86_REG_YMM12,
    X86_REG_YMM13, X86_REG_YMM14, X86_REG_YMM15, X86_REG_YMM16, X86_REG_YMM17,
    X86_REG_YMM18, X86_REG_YMM19, X86_REG_YMM20, X86_REG_YMM21, X86_REG_YMM22,
    X86_REG_YMM23, X86_REG_YMM24, X86_REG_YMM25, X86_REG_YMM26, X86_REG_YMM27,
    X86_REG_YMM28, X86_REG_YMM29, X86_REG_YMM30, X86_REG_YMM31, X86_REG_ZMM0,
    X86_REG_ZMM1, X86_REG_ZMM2, X86_REG_ZMM3, X86_REG_ZMM4, X86_REG_ZMM5,
    X86_REG_ZMM6, X86_REG_ZMM7, X86_REG_ZMM8, X86_REG_ZMM9, X86_REG_ZMM10,
    X86_REG_ZMM11, X86_REG_ZMM12, X86_REG_ZMM13, X86_REG_ZMM14, X86_REG_ZMM15,
    X86_REG_ZMM16, X86_REG_ZMM17, X86_REG_ZMM18, X86_REG_ZMM19, X86_REG_ZMM20,
    X86_REG_ZMM21, X86_REG_ZMM22, X86_REG_ZMM23, X86_REG_ZMM24, X86_REG_ZMM25,
    X86_REG_ZMM26, X86_REG_ZMM27, X86_REG_ZMM28, X86_REG_ZMM29, X86_REG_ZMM30,
    X86_REG_ZMM31, X86_REG_R8B, X86_REG_R9B, X86_REG_R10B, X86_REG_R11B,
    X86_REG_R12B, X86_REG_R13B, X86_REG_R14B, X86_REG_R15B, X86_REG_R8D,
    X86_REG_R9D, X86_REG_R10D, X86_REG_R11D, X86_REG_R12D, X86_REG_R13D,
    X86_REG_R14D, X86_REG_R15D, X86_REG_R8W, X86_REG_R9W, X86_REG_R10W,
    X86_REG_R11W, X86_REG_R12W, X86_REG_R13W, X86_REG_R14W, X86_REG_R15W,

    X86_REG_ENDING      // <-- mark the end of the list of registers
} x86_reg;

//> Operand type for instruction's operands
typedef enum x86_op_type
{
    X86_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    X86_OP_REG, // = CS_OP_REG (Register operand).
    X86_OP_IMM, // = CS_OP_IMM (Immediate operand).
    X86_OP_MEM, // = CS_OP_MEM (Memory operand).
    X86_OP_FP,  //  = CS_OP_FP  (Floating-Point operand).
} x86_op_type;

//> AVX broadcast type
typedef enum x86_avx_bcast
{
    X86_AVX_BCAST_INVALID = 0,  // Uninitialized.
    X86_AVX_BCAST_2,    // AVX512 broadcast type {1to2}
    X86_AVX_BCAST_4,    // AVX512 broadcast type {1to4}
    X86_AVX_BCAST_8,    // AVX512 broadcast type {1to8}
    X86_AVX_BCAST_16,   // AVX512 broadcast type {1to16}
} x86_avx_bcast;

//> SSE Code Condition type
typedef enum x86_sse_cc
{
    X86_SSE_CC_INVALID = 0, // Uninitialized.
    X86_SSE_CC_EQ,
    X86_SSE_CC_LT,
    X86_SSE_CC_LE,
    X86_SSE_CC_UNORD,
    X86_SSE_CC_NEQ,
    X86_SSE_CC_NLT,
    X86_SSE_CC_NLE,
    X86_SSE_CC_ORD,
    X86_SSE_CC_EQ_UQ,
    X86_SSE_CC_NGE,
    X86_SSE_CC_NGT,
    X86_SSE_CC_FALSE,
    X86_SSE_CC_NEQ_OQ,
    X86_SSE_CC_GE,
    X86_SSE_CC_GT,
    X86_SSE_CC_TRUE,
} x86_sse_cc;

//> AVX Code Condition type
typedef enum x86_avx_cc
{
    X86_AVX_CC_INVALID = 0, // Uninitialized.
    X86_AVX_CC_EQ,
    X86_AVX_CC_LT,
    X86_AVX_CC_LE,
    X86_AVX_CC_UNORD,
    X86_AVX_CC_NEQ,
    X86_AVX_CC_NLT,
    X86_AVX_CC_NLE,
    X86_AVX_CC_ORD,
    X86_AVX_CC_EQ_UQ,
    X86_AVX_CC_NGE,
    X86_AVX_CC_NGT,
    X86_AVX_CC_FALSE,
    X86_AVX_CC_NEQ_OQ,
    X86_AVX_CC_GE,
    X86_AVX_CC_GT,
    X86_AVX_CC_TRUE,
    X86_AVX_CC_EQ_OS,
    X86_AVX_CC_LT_OQ,
    X86_AVX_CC_LE_OQ,
    X86_AVX_CC_UNORD_S,
    X86_AVX_CC_NEQ_US,
    X86_AVX_CC_NLT_UQ,
    X86_AVX_CC_NLE_UQ,
    X86_AVX_CC_ORD_S,
    X86_AVX_CC_EQ_US,
    X86_AVX_CC_NGE_UQ,
    X86_AVX_CC_NGT_UQ,
    X86_AVX_CC_FALSE_OS,
    X86_AVX_CC_NEQ_OS,
    X86_AVX_CC_GE_OQ,
    X86_AVX_CC_GT_OQ,
    X86_AVX_CC_TRUE_US,
} x86_avx_cc;

//> AVX static rounding mode type
typedef enum x86_avx_rm
{
    X86_AVX_RM_INVALID = 0, // Uninitialized.
    X86_AVX_RM_RN,  // Round to nearest
    X86_AVX_RM_RD,  // Round down
    X86_AVX_RM_RU,  // Round up
    X86_AVX_RM_RZ,  // Round toward zero
} x86_avx_rm;

//> Instruction prefixes - to be used in cs_x86.prefix[]
typedef enum x86_prefix
{
    X86_PREFIX_LOCK     =   0xf0,   // lock (cs_x86.prefix[0]
    X86_PREFIX_REP      =   0xf3,   // rep (cs_x86.prefix[0]
    X86_PREFIX_REPNE    =   0xf2,   // repne (cs_x86.prefix[0]

    X86_PREFIX_CS       =   0x2e,   // segment override CS (cs_x86.prefix[1]
    X86_PREFIX_SS       =   0x36,   // segment override SS (cs_x86.prefix[1]
    X86_PREFIX_DS       =   0x3e,   // segment override DS (cs_x86.prefix[1]
    X86_PREFIX_ES       =   0x26,   // segment override ES (cs_x86.prefix[1]
    X86_PREFIX_FS       =   0x64,   // segment override FS (cs_x86.prefix[1]
    X86_PREFIX_GS       =   0x65,   // segment override GS (cs_x86.prefix[1]

    X86_PREFIX_OPSIZE   =   0x66,   // operand-size override (cs_x86.prefix[2]
    X86_PREFIX_ADDRSIZE =   0x67,   // address-size override (cs_x86.prefix[3]
} x86_prefix;

// Instruction's operand referring to memory
// This is associated with X86_OP_MEM operand type above
typedef struct x86_op_mem
{
    unsigned int segment; // segment register (or X86_REG_INVALID if irrelevant)
    unsigned int base;  // base register (or X86_REG_INVALID if irrelevant)
    unsigned int index; // index register (or X86_REG_INVALID if irrelevant)
    int scale;  // scale for index register
    int64_t disp;   // displacement value
} x86_op_mem;

// Instruction operand
typedef struct cs_x86_op
{
    x86_op_type type;   // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int64_t imm;        // immediate value for IMM operand
        double fp;      // floating point value for FP operand
        x86_op_mem mem;     // base/index/scale/disp value for MEM operand
    };

    // size of this operand (in bytes).
    uint8_t size;

    // AVX broadcast type, or 0 if irrelevant
    x86_avx_bcast avx_bcast;

    // AVX zero opmask {z}
    bool avx_zero_opmask;
} cs_x86_op;

// Instruction structure
typedef struct cs_x86
{
    // Instruction prefix, which can be up to 4 bytes.
    // A prefix byte gets value 0 when irrelevant.
    // prefix[0] indicates REP/REPNE/LOCK prefix (See X86_PREFIX_REP/REPNE/LOCK above)
    // prefix[1] indicates segment override (irrelevant for x86_64):
    // See X86_PREFIX_CS/SS/DS/ES/FS/GS above.
    // prefix[2] indicates operand-size override (X86_PREFIX_OPSIZE)
    // prefix[3] indicates address-size override (X86_PREFIX_ADDRSIZE)
    uint8_t prefix[4];

    // Instruction opcode, wich can be from 1 to 4 bytes in size.
    // This contains VEX opcode as well.
    // An trailing opcode byte gets value 0 when irrelevant.
    uint8_t opcode[4];

    // REX prefix: only a non-zero value is relavant for x86_64
    uint8_t rex;

    // Address size, which can be overrided with above prefix[5].
    uint8_t addr_size;

    // ModR/M byte
    uint8_t modrm;

    // SIB value, or 0 when irrelevant.
    uint8_t sib;

    // Displacement value, or 0 when irrelevant.
    int32_t disp;

    /* SIB state */
    // SIB index register, or X86_REG_INVALID when irrelevant.
    x86_reg sib_index;
    // SIB scale. only applicable if sib_index is relavant.
    int8_t sib_scale;
    // SIB base register, or X86_REG_INVALID when irrelevant.
    x86_reg sib_base;

    // SSE Code Condition
    x86_sse_cc sse_cc;

    // AVX Code Condition
    x86_avx_cc avx_cc;

    // AVX Suppress all Exception
    bool avx_sae;

    // AVX static rounding mode
    x86_avx_rm avx_rm;

    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;

    cs_x86_op operands[8];  // operands for this instruction.
} cs_x86;

//> X86 instructions
typedef enum x86_insn
{
    X86_INS_INVALID = 0,

    X86_INS_AAA,
    X86_INS_AAD,
    X86_INS_AAM,
    X86_INS_AAS,
    X86_INS_FABS,
    X86_INS_ADC,
    X86_INS_ADCX,
    X86_INS_ADD,
    X86_INS_ADDPD,
    X86_INS_ADDPS,
    X86_INS_ADDSD,
    X86_INS_ADDSS,
    X86_INS_ADDSUBPD,
    X86_INS_ADDSUBPS,
    X86_INS_FADD,
    X86_INS_FIADD,
    X86_INS_FADDP,
    X86_INS_ADOX,
    X86_INS_AESDECLAST,
    X86_INS_AESDEC,
    X86_INS_AESENCLAST,
    X86_INS_AESENC,
    X86_INS_AESIMC,
    X86_INS_AESKEYGENASSIST,
    X86_INS_AND,
    X86_INS_ANDN,
    X86_INS_ANDNPD,
    X86_INS_ANDNPS,
    X86_INS_ANDPD,
    X86_INS_ANDPS,
    X86_INS_ARPL,
    X86_INS_BEXTR,
    X86_INS_BLCFILL,
    X86_INS_BLCI,
    X86_INS_BLCIC,
    X86_INS_BLCMSK,
    X86_INS_BLCS,
    X86_INS_BLENDPD,
    X86_INS_BLENDPS,
    X86_INS_BLENDVPD,
    X86_INS_BLENDVPS,
    X86_INS_BLSFILL,
    X86_INS_BLSI,
    X86_INS_BLSIC,
    X86_INS_BLSMSK,
    X86_INS_BLSR,
    X86_INS_BOUND,
    X86_INS_BSF,
    X86_INS_BSR,
    X86_INS_BSWAP,
    X86_INS_BT,
    X86_INS_BTC,
    X86_INS_BTR,
    X86_INS_BTS,
    X86_INS_BZHI,
    X86_INS_CALL,
    X86_INS_CBW,
    X86_INS_CDQ,
    X86_INS_CDQE,
    X86_INS_FCHS,
    X86_INS_CLAC,
    X86_INS_CLC,
    X86_INS_CLD,
    X86_INS_CLFLUSH,
    X86_INS_CLGI,
    X86_INS_CLI,
    X86_INS_CLTS,
    X86_INS_CMC,
    X86_INS_CMOVA,
    X86_INS_CMOVAE,
    X86_INS_CMOVB,
    X86_INS_CMOVBE,
    X86_INS_FCMOVBE,
    X86_INS_FCMOVB,
    X86_INS_CMOVE,
    X86_INS_FCMOVE,
    X86_INS_CMOVG,
    X86_INS_CMOVGE,
    X86_INS_CMOVL,
    X86_INS_CMOVLE,
    X86_INS_FCMOVNBE,
    X86_INS_FCMOVNB,
    X86_INS_CMOVNE,
    X86_INS_FCMOVNE,
    X86_INS_CMOVNO,
    X86_INS_CMOVNP,
    X86_INS_FCMOVNU,
    X86_INS_CMOVNS,
    X86_INS_CMOVO,
    X86_INS_CMOVP,
    X86_INS_FCMOVU,
    X86_INS_CMOVS,
    X86_INS_CMP,
    X86_INS_CMPPD,
    X86_INS_CMPPS,
    X86_INS_CMPSB,
    X86_INS_CMPSD,
    X86_INS_CMPSQ,
    X86_INS_CMPSS,
    X86_INS_CMPSW,
    X86_INS_CMPXCHG16B,
    X86_INS_CMPXCHG,
    X86_INS_CMPXCHG8B,
    X86_INS_COMISD,
    X86_INS_COMISS,
    X86_INS_FCOMP,
    X86_INS_FCOMPI,
    X86_INS_FCOMI,
    X86_INS_FCOM,
    X86_INS_FCOS,
    X86_INS_CPUID,
    X86_INS_CQO,
    X86_INS_CRC32,
    X86_INS_CVTDQ2PD,
    X86_INS_CVTDQ2PS,
    X86_INS_CVTPD2DQ,
    X86_INS_CVTPD2PS,
    X86_INS_CVTPS2DQ,
    X86_INS_CVTPS2PD,
    X86_INS_CVTSD2SI,
    X86_INS_CVTSD2SS,
    X86_INS_CVTSI2SD,
    X86_INS_CVTSI2SS,
    X86_INS_CVTSS2SD,
    X86_INS_CVTSS2SI,
    X86_INS_CVTTPD2DQ,
    X86_INS_CVTTPS2DQ,
    X86_INS_CVTTSD2SI,
    X86_INS_CVTTSS2SI,
    X86_INS_CWD,
    X86_INS_CWDE,
    X86_INS_DAA,
    X86_INS_DAS,
    X86_INS_DATA16,
    X86_INS_DEC,
    X86_INS_DIV,
    X86_INS_DIVPD,
    X86_INS_DIVPS,
    X86_INS_FDIVR,
    X86_INS_FIDIVR,
    X86_INS_FDIVRP,
    X86_INS_DIVSD,
    X86_INS_DIVSS,
    X86_INS_FDIV,
    X86_INS_FIDIV,
    X86_INS_FDIVP,
    X86_INS_DPPD,
    X86_INS_DPPS,
    X86_INS_RET,
    X86_INS_ENCLS,
    X86_INS_ENCLU,
    X86_INS_ENTER,
    X86_INS_EXTRACTPS,
    X86_INS_EXTRQ,
    X86_INS_F2XM1,
    X86_INS_LCALL,
    X86_INS_LJMP,
    X86_INS_FBLD,
    X86_INS_FBSTP,
    X86_INS_FCOMPP,
    X86_INS_FDECSTP,
    X86_INS_FEMMS,
    X86_INS_FFREE,
    X86_INS_FICOM,
    X86_INS_FICOMP,
    X86_INS_FINCSTP,
    X86_INS_FLDCW,
    X86_INS_FLDENV,
    X86_INS_FLDL2E,
    X86_INS_FLDL2T,
    X86_INS_FLDLG2,
    X86_INS_FLDLN2,
    X86_INS_FLDPI,
    X86_INS_FNCLEX,
    X86_INS_FNINIT,
    X86_INS_FNOP,
    X86_INS_FNSTCW,
    X86_INS_FNSTSW,
    X86_INS_FPATAN,
    X86_INS_FPREM,
    X86_INS_FPREM1,
    X86_INS_FPTAN,
    X86_INS_FRNDINT,
    X86_INS_FRSTOR,
    X86_INS_FNSAVE,
    X86_INS_FSCALE,
    X86_INS_FSETPM,
    X86_INS_FSINCOS,
    X86_INS_FNSTENV,
    X86_INS_FXAM,
    X86_INS_FXRSTOR,
    X86_INS_FXRSTOR64,
    X86_INS_FXSAVE,
    X86_INS_FXSAVE64,
    X86_INS_FXTRACT,
    X86_INS_FYL2X,
    X86_INS_FYL2XP1,
    X86_INS_MOVAPD,
    X86_INS_MOVAPS,
    X86_INS_ORPD,
    X86_INS_ORPS,
    X86_INS_VMOVAPD,
    X86_INS_VMOVAPS,
    X86_INS_XORPD,
    X86_INS_XORPS,
    X86_INS_GETSEC,
    X86_INS_HADDPD,
    X86_INS_HADDPS,
    X86_INS_HLT,
    X86_INS_HSUBPD,
    X86_INS_HSUBPS,
    X86_INS_IDIV,
    X86_INS_FILD,
    X86_INS_IMUL,
    X86_INS_IN,
    X86_INS_INC,
    X86_INS_INSB,
    X86_INS_INSERTPS,
    X86_INS_INSERTQ,
    X86_INS_INSD,
    X86_INS_INSW,
    X86_INS_INT,
    X86_INS_INT1,
    X86_INS_INT3,
    X86_INS_INTO,
    X86_INS_INVD,
    X86_INS_INVEPT,
    X86_INS_INVLPG,
    X86_INS_INVLPGA,
    X86_INS_INVPCID,
    X86_INS_INVVPID,
    X86_INS_IRET,
    X86_INS_IRETD,
    X86_INS_IRETQ,
    X86_INS_FISTTP,
    X86_INS_FIST,
    X86_INS_FISTP,
    X86_INS_UCOMISD,
    X86_INS_UCOMISS,
    X86_INS_VCMP,
    X86_INS_VCOMISD,
    X86_INS_VCOMISS,
    X86_INS_VCVTSD2SS,
    X86_INS_VCVTSI2SD,
    X86_INS_VCVTSI2SS,
    X86_INS_VCVTSS2SD,
    X86_INS_VCVTTSD2SI,
    X86_INS_VCVTTSD2USI,
    X86_INS_VCVTTSS2SI,
    X86_INS_VCVTTSS2USI,
    X86_INS_VCVTUSI2SD,
    X86_INS_VCVTUSI2SS,
    X86_INS_VUCOMISD,
    X86_INS_VUCOMISS,
    X86_INS_JAE,
    X86_INS_JA,
    X86_INS_JBE,
    X86_INS_JB,
    X86_INS_JCXZ,
    X86_INS_JECXZ,
    X86_INS_JE,
    X86_INS_JGE,
    X86_INS_JG,
    X86_INS_JLE,
    X86_INS_JL,
    X86_INS_JMP,
    X86_INS_JNE,
    X86_INS_JNO,
    X86_INS_JNP,
    X86_INS_JNS,
    X86_INS_JO,
    X86_INS_JP,
    X86_INS_JRCXZ,
    X86_INS_JS,
    X86_INS_KANDB,
    X86_INS_KANDD,
    X86_INS_KANDNB,
    X86_INS_KANDND,
    X86_INS_KANDNQ,
    X86_INS_KANDNW,
    X86_INS_KANDQ,
    X86_INS_KANDW,
    X86_INS_KMOVB,
    X86_INS_KMOVD,
    X86_INS_KMOVQ,
    X86_INS_KMOVW,
    X86_INS_KNOTB,
    X86_INS_KNOTD,
    X86_INS_KNOTQ,
    X86_INS_KNOTW,
    X86_INS_KORB,
    X86_INS_KORD,
    X86_INS_KORQ,
    X86_INS_KORTESTW,
    X86_INS_KORW,
    X86_INS_KSHIFTLW,
    X86_INS_KSHIFTRW,
    X86_INS_KUNPCKBW,
    X86_INS_KXNORB,
    X86_INS_KXNORD,
    X86_INS_KXNORQ,
    X86_INS_KXNORW,
    X86_INS_KXORB,
    X86_INS_KXORD,
    X86_INS_KXORQ,
    X86_INS_KXORW,
    X86_INS_LAHF,
    X86_INS_LAR,
    X86_INS_LDDQU,
    X86_INS_LDMXCSR,
    X86_INS_LDS,
    X86_INS_FLDZ,
    X86_INS_FLD1,
    X86_INS_FLD,
    X86_INS_LEA,
    X86_INS_LEAVE,
    X86_INS_LES,
    X86_INS_LFENCE,
    X86_INS_LFS,
    X86_INS_LGDT,
    X86_INS_LGS,
    X86_INS_LIDT,
    X86_INS_LLDT,
    X86_INS_LMSW,
    X86_INS_OR,
    X86_INS_SUB,
    X86_INS_XOR,
    X86_INS_LODSB,
    X86_INS_LODSD,
    X86_INS_LODSQ,
    X86_INS_LODSW,
    X86_INS_LOOP,
    X86_INS_LOOPE,
    X86_INS_LOOPNE,
    X86_INS_RETF,
    X86_INS_RETFQ,
    X86_INS_LSL,
    X86_INS_LSS,
    X86_INS_LTR,
    X86_INS_XADD,
    X86_INS_LZCNT,
    X86_INS_MASKMOVDQU,
    X86_INS_MAXPD,
    X86_INS_MAXPS,
    X86_INS_MAXSD,
    X86_INS_MAXSS,
    X86_INS_MFENCE,
    X86_INS_MINPD,
    X86_INS_MINPS,
    X86_INS_MINSD,
    X86_INS_MINSS,
    X86_INS_CVTPD2PI,
    X86_INS_CVTPI2PD,
    X86_INS_CVTPI2PS,
    X86_INS_CVTPS2PI,
    X86_INS_CVTTPD2PI,
    X86_INS_CVTTPS2PI,
    X86_INS_EMMS,
    X86_INS_MASKMOVQ,
    X86_INS_MOVD,
    X86_INS_MOVDQ2Q,
    X86_INS_MOVNTQ,
    X86_INS_MOVQ2DQ,
    X86_INS_MOVQ,
    X86_INS_PABSB,
    X86_INS_PABSD,
    X86_INS_PABSW,
    X86_INS_PACKSSDW,
    X86_INS_PACKSSWB,
    X86_INS_PACKUSWB,
    X86_INS_PADDB,
    X86_INS_PADDD,
    X86_INS_PADDQ,
    X86_INS_PADDSB,
    X86_INS_PADDSW,
    X86_INS_PADDUSB,
    X86_INS_PADDUSW,
    X86_INS_PADDW,
    X86_INS_PALIGNR,
    X86_INS_PANDN,
    X86_INS_PAND,
    X86_INS_PAVGB,
    X86_INS_PAVGW,
    X86_INS_PCMPEQB,
    X86_INS_PCMPEQD,
    X86_INS_PCMPEQW,
    X86_INS_PCMPGTB,
    X86_INS_PCMPGTD,
    X86_INS_PCMPGTW,
    X86_INS_PEXTRW,
    X86_INS_PHADDSW,
    X86_INS_PHADDW,
    X86_INS_PHADDD,
    X86_INS_PHSUBD,
    X86_INS_PHSUBSW,
    X86_INS_PHSUBW,
    X86_INS_PINSRW,
    X86_INS_PMADDUBSW,
    X86_INS_PMADDWD,
    X86_INS_PMAXSW,
    X86_INS_PMAXUB,
    X86_INS_PMINSW,
    X86_INS_PMINUB,
    X86_INS_PMOVMSKB,
    X86_INS_PMULHRSW,
    X86_INS_PMULHUW,
    X86_INS_PMULHW,
    X86_INS_PMULLW,
    X86_INS_PMULUDQ,
    X86_INS_POR,
    X86_INS_PSADBW,
    X86_INS_PSHUFB,
    X86_INS_PSHUFW,
    X86_INS_PSIGNB,
    X86_INS_PSIGND,
    X86_INS_PSIGNW,
    X86_INS_PSLLD,
    X86_INS_PSLLQ,
    X86_INS_PSLLW,
    X86_INS_PSRAD,
    X86_INS_PSRAW,
    X86_INS_PSRLD,
    X86_INS_PSRLQ,
    X86_INS_PSRLW,
    X86_INS_PSUBB,
    X86_INS_PSUBD,
    X86_INS_PSUBQ,
    X86_INS_PSUBSB,
    X86_INS_PSUBSW,
    X86_INS_PSUBUSB,
    X86_INS_PSUBUSW,
    X86_INS_PSUBW,
    X86_INS_PUNPCKHBW,
    X86_INS_PUNPCKHDQ,
    X86_INS_PUNPCKHWD,
    X86_INS_PUNPCKLBW,
    X86_INS_PUNPCKLDQ,
    X86_INS_PUNPCKLWD,
    X86_INS_PXOR,
    X86_INS_MONITOR,
    X86_INS_MONTMUL,
    X86_INS_MOV,
    X86_INS_MOVABS,
    X86_INS_MOVBE,
    X86_INS_MOVDDUP,
    X86_INS_MOVDQA,
    X86_INS_MOVDQU,
    X86_INS_MOVHLPS,
    X86_INS_MOVHPD,
    X86_INS_MOVHPS,
    X86_INS_MOVLHPS,
    X86_INS_MOVLPD,
    X86_INS_MOVLPS,
    X86_INS_MOVMSKPD,
    X86_INS_MOVMSKPS,
    X86_INS_MOVNTDQA,
    X86_INS_MOVNTDQ,
    X86_INS_MOVNTI,
    X86_INS_MOVNTPD,
    X86_INS_MOVNTPS,
    X86_INS_MOVNTSD,
    X86_INS_MOVNTSS,
    X86_INS_MOVSB,
    X86_INS_MOVSD,
    X86_INS_MOVSHDUP,
    X86_INS_MOVSLDUP,
    X86_INS_MOVSQ,
    X86_INS_MOVSS,
    X86_INS_MOVSW,
    X86_INS_MOVSX,
    X86_INS_MOVSXD,
    X86_INS_MOVUPD,
    X86_INS_MOVUPS,
    X86_INS_MOVZX,
    X86_INS_MPSADBW,
    X86_INS_MUL,
    X86_INS_MULPD,
    X86_INS_MULPS,
    X86_INS_MULSD,
    X86_INS_MULSS,
    X86_INS_MULX,
    X86_INS_FMUL,
    X86_INS_FIMUL,
    X86_INS_FMULP,
    X86_INS_MWAIT,
    X86_INS_NEG,
    X86_INS_NOP,
    X86_INS_NOT,
    X86_INS_OUT,
    X86_INS_OUTSB,
    X86_INS_OUTSD,
    X86_INS_OUTSW,
    X86_INS_PACKUSDW,
    X86_INS_PAUSE,
    X86_INS_PAVGUSB,
    X86_INS_PBLENDVB,
    X86_INS_PBLENDW,
    X86_INS_PCLMULQDQ,
    X86_INS_PCMPEQQ,
    X86_INS_PCMPESTRI,
    X86_INS_PCMPESTRM,
    X86_INS_PCMPGTQ,
    X86_INS_PCMPISTRI,
    X86_INS_PCMPISTRM,
    X86_INS_PDEP,
    X86_INS_PEXT,
    X86_INS_PEXTRB,
    X86_INS_PEXTRD,
    X86_INS_PEXTRQ,
    X86_INS_PF2ID,
    X86_INS_PF2IW,
    X86_INS_PFACC,
    X86_INS_PFADD,
    X86_INS_PFCMPEQ,
    X86_INS_PFCMPGE,
    X86_INS_PFCMPGT,
    X86_INS_PFMAX,
    X86_INS_PFMIN,
    X86_INS_PFMUL,
    X86_INS_PFNACC,
    X86_INS_PFPNACC,
    X86_INS_PFRCPIT1,
    X86_INS_PFRCPIT2,
    X86_INS_PFRCP,
    X86_INS_PFRSQIT1,
    X86_INS_PFRSQRT,
    X86_INS_PFSUBR,
    X86_INS_PFSUB,
    X86_INS_PHMINPOSUW,
    X86_INS_PI2FD,
    X86_INS_PI2FW,
    X86_INS_PINSRB,
    X86_INS_PINSRD,
    X86_INS_PINSRQ,
    X86_INS_PMAXSB,
    X86_INS_PMAXSD,
    X86_INS_PMAXUD,
    X86_INS_PMAXUW,
    X86_INS_PMINSB,
    X86_INS_PMINSD,
    X86_INS_PMINUD,
    X86_INS_PMINUW,
    X86_INS_PMOVSXBD,
    X86_INS_PMOVSXBQ,
    X86_INS_PMOVSXBW,
    X86_INS_PMOVSXDQ,
    X86_INS_PMOVSXWD,
    X86_INS_PMOVSXWQ,
    X86_INS_PMOVZXBD,
    X86_INS_PMOVZXBQ,
    X86_INS_PMOVZXBW,
    X86_INS_PMOVZXDQ,
    X86_INS_PMOVZXWD,
    X86_INS_PMOVZXWQ,
    X86_INS_PMULDQ,
    X86_INS_PMULHRW,
    X86_INS_PMULLD,
    X86_INS_POP,
    X86_INS_POPAW,
    X86_INS_POPAL,
    X86_INS_POPCNT,
    X86_INS_POPF,
    X86_INS_POPFD,
    X86_INS_POPFQ,
    X86_INS_PREFETCH,
    X86_INS_PREFETCHNTA,
    X86_INS_PREFETCHT0,
    X86_INS_PREFETCHT1,
    X86_INS_PREFETCHT2,
    X86_INS_PREFETCHW,
    X86_INS_PSHUFD,
    X86_INS_PSHUFHW,
    X86_INS_PSHUFLW,
    X86_INS_PSLLDQ,
    X86_INS_PSRLDQ,
    X86_INS_PSWAPD,
    X86_INS_PTEST,
    X86_INS_PUNPCKHQDQ,
    X86_INS_PUNPCKLQDQ,
    X86_INS_PUSH,
    X86_INS_PUSHAW,
    X86_INS_PUSHAL,
    X86_INS_PUSHF,
    X86_INS_PUSHFD,
    X86_INS_PUSHFQ,
    X86_INS_RCL,
    X86_INS_RCPPS,
    X86_INS_RCPSS,
    X86_INS_RCR,
    X86_INS_RDFSBASE,
    X86_INS_RDGSBASE,
    X86_INS_RDMSR,
    X86_INS_RDPMC,
    X86_INS_RDRAND,
    X86_INS_RDSEED,
    X86_INS_RDTSC,
    X86_INS_RDTSCP,
    X86_INS_ROL,
    X86_INS_ROR,
    X86_INS_RORX,
    X86_INS_ROUNDPD,
    X86_INS_ROUNDPS,
    X86_INS_ROUNDSD,
    X86_INS_ROUNDSS,
    X86_INS_RSM,
    X86_INS_RSQRTPS,
    X86_INS_RSQRTSS,
    X86_INS_SAHF,
    X86_INS_SAL,
    X86_INS_SALC,
    X86_INS_SAR,
    X86_INS_SARX,
    X86_INS_SBB,
    X86_INS_SCASB,
    X86_INS_SCASD,
    X86_INS_SCASQ,
    X86_INS_SCASW,
    X86_INS_SETAE,
    X86_INS_SETA,
    X86_INS_SETBE,
    X86_INS_SETB,
    X86_INS_SETE,
    X86_INS_SETGE,
    X86_INS_SETG,
    X86_INS_SETLE,
    X86_INS_SETL,
    X86_INS_SETNE,
    X86_INS_SETNO,
    X86_INS_SETNP,
    X86_INS_SETNS,
    X86_INS_SETO,
    X86_INS_SETP,
    X86_INS_SETS,
    X86_INS_SFENCE,
    X86_INS_SGDT,
    X86_INS_SHA1MSG1,
    X86_INS_SHA1MSG2,
    X86_INS_SHA1NEXTE,
    X86_INS_SHA1RNDS4,
    X86_INS_SHA256MSG1,
    X86_INS_SHA256MSG2,
    X86_INS_SHA256RNDS2,
    X86_INS_SHL,
    X86_INS_SHLD,
    X86_INS_SHLX,
    X86_INS_SHR,
    X86_INS_SHRD,
    X86_INS_SHRX,
    X86_INS_SHUFPD,
    X86_INS_SHUFPS,
    X86_INS_SIDT,
    X86_INS_FSIN,
    X86_INS_SKINIT,
    X86_INS_SLDT,
    X86_INS_SMSW,
    X86_INS_SQRTPD,
    X86_INS_SQRTPS,
    X86_INS_SQRTSD,
    X86_INS_SQRTSS,
    X86_INS_FSQRT,
    X86_INS_STAC,
    X86_INS_STC,
    X86_INS_STD,
    X86_INS_STGI,
    X86_INS_STI,
    X86_INS_STMXCSR,
    X86_INS_STOSB,
    X86_INS_STOSD,
    X86_INS_STOSQ,
    X86_INS_STOSW,
    X86_INS_STR,
    X86_INS_FST,
    X86_INS_FSTP,
    X86_INS_FSTPNCE,
    X86_INS_SUBPD,
    X86_INS_SUBPS,
    X86_INS_FSUBR,
    X86_INS_FISUBR,
    X86_INS_FSUBRP,
    X86_INS_SUBSD,
    X86_INS_SUBSS,
    X86_INS_FSUB,
    X86_INS_FISUB,
    X86_INS_FSUBP,
    X86_INS_SWAPGS,
    X86_INS_SYSCALL,
    X86_INS_SYSENTER,
    X86_INS_SYSEXIT,
    X86_INS_SYSRET,
    X86_INS_T1MSKC,
    X86_INS_TEST,
    X86_INS_UD2,
    X86_INS_FTST,
    X86_INS_TZCNT,
    X86_INS_TZMSK,
    X86_INS_FUCOMPI,
    X86_INS_FUCOMI,
    X86_INS_FUCOMPP,
    X86_INS_FUCOMP,
    X86_INS_FUCOM,
    X86_INS_UD2B,
    X86_INS_UNPCKHPD,
    X86_INS_UNPCKHPS,
    X86_INS_UNPCKLPD,
    X86_INS_UNPCKLPS,
    X86_INS_VADDPD,
    X86_INS_VADDPS,
    X86_INS_VADDSD,
    X86_INS_VADDSS,
    X86_INS_VADDSUBPD,
    X86_INS_VADDSUBPS,
    X86_INS_VAESDECLAST,
    X86_INS_VAESDEC,
    X86_INS_VAESENCLAST,
    X86_INS_VAESENC,
    X86_INS_VAESIMC,
    X86_INS_VAESKEYGENASSIST,
    X86_INS_VALIGND,
    X86_INS_VALIGNQ,
    X86_INS_VANDNPD,
    X86_INS_VANDNPS,
    X86_INS_VANDPD,
    X86_INS_VANDPS,
    X86_INS_VBLENDMPD,
    X86_INS_VBLENDMPS,
    X86_INS_VBLENDPD,
    X86_INS_VBLENDPS,
    X86_INS_VBLENDVPD,
    X86_INS_VBLENDVPS,
    X86_INS_VBROADCASTF128,
    X86_INS_VBROADCASTI128,
    X86_INS_VBROADCASTI32X4,
    X86_INS_VBROADCASTI64X4,
    X86_INS_VBROADCASTSD,
    X86_INS_VBROADCASTSS,
    X86_INS_VCMPPD,
    X86_INS_VCMPPS,
    X86_INS_VCMPSD,
    X86_INS_VCMPSS,
    X86_INS_VCVTDQ2PD,
    X86_INS_VCVTDQ2PS,
    X86_INS_VCVTPD2DQX,
    X86_INS_VCVTPD2DQ,
    X86_INS_VCVTPD2PSX,
    X86_INS_VCVTPD2PS,
    X86_INS_VCVTPD2UDQ,
    X86_INS_VCVTPH2PS,
    X86_INS_VCVTPS2DQ,
    X86_INS_VCVTPS2PD,
    X86_INS_VCVTPS2PH,
    X86_INS_VCVTPS2UDQ,
    X86_INS_VCVTSD2SI,
    X86_INS_VCVTSD2USI,
    X86_INS_VCVTSS2SI,
    X86_INS_VCVTSS2USI,
    X86_INS_VCVTTPD2DQX,
    X86_INS_VCVTTPD2DQ,
    X86_INS_VCVTTPD2UDQ,
    X86_INS_VCVTTPS2DQ,
    X86_INS_VCVTTPS2UDQ,
    X86_INS_VCVTUDQ2PD,
    X86_INS_VCVTUDQ2PS,
    X86_INS_VDIVPD,
    X86_INS_VDIVPS,
    X86_INS_VDIVSD,
    X86_INS_VDIVSS,
    X86_INS_VDPPD,
    X86_INS_VDPPS,
    X86_INS_VERR,
    X86_INS_VERW,
    X86_INS_VEXTRACTF128,
    X86_INS_VEXTRACTF32X4,
    X86_INS_VEXTRACTF64X4,
    X86_INS_VEXTRACTI128,
    X86_INS_VEXTRACTI32X4,
    X86_INS_VEXTRACTI64X4,
    X86_INS_VEXTRACTPS,
    X86_INS_VFMADD132PD,
    X86_INS_VFMADD132PS,
    X86_INS_VFMADD213PD,
    X86_INS_VFMADD213PS,
    X86_INS_VFMADDPD,
    X86_INS_VFMADD231PD,
    X86_INS_VFMADDPS,
    X86_INS_VFMADD231PS,
    X86_INS_VFMADDSD,
    X86_INS_VFMADD213SD,
    X86_INS_VFMADD132SD,
    X86_INS_VFMADD231SD,
    X86_INS_VFMADDSS,
    X86_INS_VFMADD213SS,
    X86_INS_VFMADD132SS,
    X86_INS_VFMADD231SS,
    X86_INS_VFMADDSUB132PD,
    X86_INS_VFMADDSUB132PS,
    X86_INS_VFMADDSUB213PD,
    X86_INS_VFMADDSUB213PS,
    X86_INS_VFMADDSUBPD,
    X86_INS_VFMADDSUB231PD,
    X86_INS_VFMADDSUBPS,
    X86_INS_VFMADDSUB231PS,
    X86_INS_VFMSUB132PD,
    X86_INS_VFMSUB132PS,
    X86_INS_VFMSUB213PD,
    X86_INS_VFMSUB213PS,
    X86_INS_VFMSUBADD132PD,
    X86_INS_VFMSUBADD132PS,
    X86_INS_VFMSUBADD213PD,
    X86_INS_VFMSUBADD213PS,
    X86_INS_VFMSUBADDPD,
    X86_INS_VFMSUBADD231PD,
    X86_INS_VFMSUBADDPS,
    X86_INS_VFMSUBADD231PS,
    X86_INS_VFMSUBPD,
    X86_INS_VFMSUB231PD,
    X86_INS_VFMSUBPS,
    X86_INS_VFMSUB231PS,
    X86_INS_VFMSUBSD,
    X86_INS_VFMSUB213SD,
    X86_INS_VFMSUB132SD,
    X86_INS_VFMSUB231SD,
    X86_INS_VFMSUBSS,
    X86_INS_VFMSUB213SS,
    X86_INS_VFMSUB132SS,
    X86_INS_VFMSUB231SS,
    X86_INS_VFNMADD132PD,
    X86_INS_VFNMADD132PS,
    X86_INS_VFNMADD213PD,
    X86_INS_VFNMADD213PS,
    X86_INS_VFNMADDPD,
    X86_INS_VFNMADD231PD,
    X86_INS_VFNMADDPS,
    X86_INS_VFNMADD231PS,
    X86_INS_VFNMADDSD,
    X86_INS_VFNMADD213SD,
    X86_INS_VFNMADD132SD,
    X86_INS_VFNMADD231SD,
    X86_INS_VFNMADDSS,
    X86_INS_VFNMADD213SS,
    X86_INS_VFNMADD132SS,
    X86_INS_VFNMADD231SS,
    X86_INS_VFNMSUB132PD,
    X86_INS_VFNMSUB132PS,
    X86_INS_VFNMSUB213PD,
    X86_INS_VFNMSUB213PS,
    X86_INS_VFNMSUBPD,
    X86_INS_VFNMSUB231PD,
    X86_INS_VFNMSUBPS,
    X86_INS_VFNMSUB231PS,
    X86_INS_VFNMSUBSD,
    X86_INS_VFNMSUB213SD,
    X86_INS_VFNMSUB132SD,
    X86_INS_VFNMSUB231SD,
    X86_INS_VFNMSUBSS,
    X86_INS_VFNMSUB213SS,
    X86_INS_VFNMSUB132SS,
    X86_INS_VFNMSUB231SS,
    X86_INS_VFRCZPD,
    X86_INS_VFRCZPS,
    X86_INS_VFRCZSD,
    X86_INS_VFRCZSS,
    X86_INS_VORPD,
    X86_INS_VORPS,
    X86_INS_VXORPD,
    X86_INS_VXORPS,
    X86_INS_VGATHERDPD,
    X86_INS_VGATHERDPS,
    X86_INS_VGATHERPF0DPD,
    X86_INS_VGATHERPF0DPS,
    X86_INS_VGATHERPF0QPD,
    X86_INS_VGATHERPF0QPS,
    X86_INS_VGATHERPF1DPD,
    X86_INS_VGATHERPF1DPS,
    X86_INS_VGATHERPF1QPD,
    X86_INS_VGATHERPF1QPS,
    X86_INS_VGATHERQPD,
    X86_INS_VGATHERQPS,
    X86_INS_VHADDPD,
    X86_INS_VHADDPS,
    X86_INS_VHSUBPD,
    X86_INS_VHSUBPS,
    X86_INS_VINSERTF128,
    X86_INS_VINSERTF32X4,
    X86_INS_VINSERTF64X4,
    X86_INS_VINSERTI128,
    X86_INS_VINSERTI32X4,
    X86_INS_VINSERTI64X4,
    X86_INS_VINSERTPS,
    X86_INS_VLDDQU,
    X86_INS_VLDMXCSR,
    X86_INS_VMASKMOVDQU,
    X86_INS_VMASKMOVPD,
    X86_INS_VMASKMOVPS,
    X86_INS_VMAXPD,
    X86_INS_VMAXPS,
    X86_INS_VMAXSD,
    X86_INS_VMAXSS,
    X86_INS_VMCALL,
    X86_INS_VMCLEAR,
    X86_INS_VMFUNC,
    X86_INS_VMINPD,
    X86_INS_VMINPS,
    X86_INS_VMINSD,
    X86_INS_VMINSS,
    X86_INS_VMLAUNCH,
    X86_INS_VMLOAD,
    X86_INS_VMMCALL,
    X86_INS_VMOVQ,
    X86_INS_VMOVDDUP,
    X86_INS_VMOVD,
    X86_INS_VMOVDQA32,
    X86_INS_VMOVDQA64,
    X86_INS_VMOVDQA,
    X86_INS_VMOVDQU16,
    X86_INS_VMOVDQU32,
    X86_INS_VMOVDQU64,
    X86_INS_VMOVDQU8,
    X86_INS_VMOVDQU,
    X86_INS_VMOVHLPS,
    X86_INS_VMOVHPD,
    X86_INS_VMOVHPS,
    X86_INS_VMOVLHPS,
    X86_INS_VMOVLPD,
    X86_INS_VMOVLPS,
    X86_INS_VMOVMSKPD,
    X86_INS_VMOVMSKPS,
    X86_INS_VMOVNTDQA,
    X86_INS_VMOVNTDQ,
    X86_INS_VMOVNTPD,
    X86_INS_VMOVNTPS,
    X86_INS_VMOVSD,
    X86_INS_VMOVSHDUP,
    X86_INS_VMOVSLDUP,
    X86_INS_VMOVSS,
    X86_INS_VMOVUPD,
    X86_INS_VMOVUPS,
    X86_INS_VMPSADBW,
    X86_INS_VMPTRLD,
    X86_INS_VMPTRST,
    X86_INS_VMREAD,
    X86_INS_VMRESUME,
    X86_INS_VMRUN,
    X86_INS_VMSAVE,
    X86_INS_VMULPD,
    X86_INS_VMULPS,
    X86_INS_VMULSD,
    X86_INS_VMULSS,
    X86_INS_VMWRITE,
    X86_INS_VMXOFF,
    X86_INS_VMXON,
    X86_INS_VPABSB,
    X86_INS_VPABSD,
    X86_INS_VPABSQ,
    X86_INS_VPABSW,
    X86_INS_VPACKSSDW,
    X86_INS_VPACKSSWB,
    X86_INS_VPACKUSDW,
    X86_INS_VPACKUSWB,
    X86_INS_VPADDB,
    X86_INS_VPADDD,
    X86_INS_VPADDQ,
    X86_INS_VPADDSB,
    X86_INS_VPADDSW,
    X86_INS_VPADDUSB,
    X86_INS_VPADDUSW,
    X86_INS_VPADDW,
    X86_INS_VPALIGNR,
    X86_INS_VPANDD,
    X86_INS_VPANDND,
    X86_INS_VPANDNQ,
    X86_INS_VPANDN,
    X86_INS_VPANDQ,
    X86_INS_VPAND,
    X86_INS_VPAVGB,
    X86_INS_VPAVGW,
    X86_INS_VPBLENDD,
    X86_INS_VPBLENDMD,
    X86_INS_VPBLENDMQ,
    X86_INS_VPBLENDVB,
    X86_INS_VPBLENDW,
    X86_INS_VPBROADCASTB,
    X86_INS_VPBROADCASTD,
    X86_INS_VPBROADCASTMB2Q,
    X86_INS_VPBROADCASTMW2D,
    X86_INS_VPBROADCASTQ,
    X86_INS_VPBROADCASTW,
    X86_INS_VPCLMULQDQ,
    X86_INS_VPCMOV,
    X86_INS_VPCMP,
    X86_INS_VPCMPD,
    X86_INS_VPCMPEQB,
    X86_INS_VPCMPEQD,
    X86_INS_VPCMPEQQ,
    X86_INS_VPCMPEQW,
    X86_INS_VPCMPESTRI,
    X86_INS_VPCMPESTRM,
    X86_INS_VPCMPGTB,
    X86_INS_VPCMPGTD,
    X86_INS_VPCMPGTQ,
    X86_INS_VPCMPGTW,
    X86_INS_VPCMPISTRI,
    X86_INS_VPCMPISTRM,
    X86_INS_VPCMPQ,
    X86_INS_VPCMPUD,
    X86_INS_VPCMPUQ,
    X86_INS_VPCOMB,
    X86_INS_VPCOMD,
    X86_INS_VPCOMQ,
    X86_INS_VPCOMUB,
    X86_INS_VPCOMUD,
    X86_INS_VPCOMUQ,
    X86_INS_VPCOMUW,
    X86_INS_VPCOMW,
    X86_INS_VPCONFLICTD,
    X86_INS_VPCONFLICTQ,
    X86_INS_VPERM2F128,
    X86_INS_VPERM2I128,
    X86_INS_VPERMD,
    X86_INS_VPERMI2D,
    X86_INS_VPERMI2PD,
    X86_INS_VPERMI2PS,
    X86_INS_VPERMI2Q,
    X86_INS_VPERMIL2PD,
    X86_INS_VPERMIL2PS,
    X86_INS_VPERMILPD,
    X86_INS_VPERMILPS,
    X86_INS_VPERMPD,
    X86_INS_VPERMPS,
    X86_INS_VPERMQ,
    X86_INS_VPERMT2D,
    X86_INS_VPERMT2PD,
    X86_INS_VPERMT2PS,
    X86_INS_VPERMT2Q,
    X86_INS_VPEXTRB,
    X86_INS_VPEXTRD,
    X86_INS_VPEXTRQ,
    X86_INS_VPEXTRW,
    X86_INS_VPGATHERDD,
    X86_INS_VPGATHERDQ,
    X86_INS_VPGATHERQD,
    X86_INS_VPGATHERQQ,
    X86_INS_VPHADDBD,
    X86_INS_VPHADDBQ,
    X86_INS_VPHADDBW,
    X86_INS_VPHADDDQ,
    X86_INS_VPHADDD,
    X86_INS_VPHADDSW,
    X86_INS_VPHADDUBD,
    X86_INS_VPHADDUBQ,
    X86_INS_VPHADDUBW,
    X86_INS_VPHADDUDQ,
    X86_INS_VPHADDUWD,
    X86_INS_VPHADDUWQ,
    X86_INS_VPHADDWD,
    X86_INS_VPHADDWQ,
    X86_INS_VPHADDW,
    X86_INS_VPHMINPOSUW,
    X86_INS_VPHSUBBW,
    X86_INS_VPHSUBDQ,
    X86_INS_VPHSUBD,
    X86_INS_VPHSUBSW,
    X86_INS_VPHSUBWD,
    X86_INS_VPHSUBW,
    X86_INS_VPINSRB,
    X86_INS_VPINSRD,
    X86_INS_VPINSRQ,
    X86_INS_VPINSRW,
    X86_INS_VPLZCNTD,
    X86_INS_VPLZCNTQ,
    X86_INS_VPMACSDD,
    X86_INS_VPMACSDQH,
    X86_INS_VPMACSDQL,
    X86_INS_VPMACSSDD,
    X86_INS_VPMACSSDQH,
    X86_INS_VPMACSSDQL,
    X86_INS_VPMACSSWD,
    X86_INS_VPMACSSWW,
    X86_INS_VPMACSWD,
    X86_INS_VPMACSWW,
    X86_INS_VPMADCSSWD,
    X86_INS_VPMADCSWD,
    X86_INS_VPMADDUBSW,
    X86_INS_VPMADDWD,
    X86_INS_VPMASKMOVD,
    X86_INS_VPMASKMOVQ,
    X86_INS_VPMAXSB,
    X86_INS_VPMAXSD,
    X86_INS_VPMAXSQ,
    X86_INS_VPMAXSW,
    X86_INS_VPMAXUB,
    X86_INS_VPMAXUD,
    X86_INS_VPMAXUQ,
    X86_INS_VPMAXUW,
    X86_INS_VPMINSB,
    X86_INS_VPMINSD,
    X86_INS_VPMINSQ,
    X86_INS_VPMINSW,
    X86_INS_VPMINUB,
    X86_INS_VPMINUD,
    X86_INS_VPMINUQ,
    X86_INS_VPMINUW,
    X86_INS_VPMOVDB,
    X86_INS_VPMOVDW,
    X86_INS_VPMOVMSKB,
    X86_INS_VPMOVQB,
    X86_INS_VPMOVQD,
    X86_INS_VPMOVQW,
    X86_INS_VPMOVSDB,
    X86_INS_VPMOVSDW,
    X86_INS_VPMOVSQB,
    X86_INS_VPMOVSQD,
    X86_INS_VPMOVSQW,
    X86_INS_VPMOVSXBD,
    X86_INS_VPMOVSXBQ,
    X86_INS_VPMOVSXBW,
    X86_INS_VPMOVSXDQ,
    X86_INS_VPMOVSXWD,
    X86_INS_VPMOVSXWQ,
    X86_INS_VPMOVUSDB,
    X86_INS_VPMOVUSDW,
    X86_INS_VPMOVUSQB,
    X86_INS_VPMOVUSQD,
    X86_INS_VPMOVUSQW,
    X86_INS_VPMOVZXBD,
    X86_INS_VPMOVZXBQ,
    X86_INS_VPMOVZXBW,
    X86_INS_VPMOVZXDQ,
    X86_INS_VPMOVZXWD,
    X86_INS_VPMOVZXWQ,
    X86_INS_VPMULDQ,
    X86_INS_VPMULHRSW,
    X86_INS_VPMULHUW,
    X86_INS_VPMULHW,
    X86_INS_VPMULLD,
    X86_INS_VPMULLW,
    X86_INS_VPMULUDQ,
    X86_INS_VPORD,
    X86_INS_VPORQ,
    X86_INS_VPOR,
    X86_INS_VPPERM,
    X86_INS_VPROTB,
    X86_INS_VPROTD,
    X86_INS_VPROTQ,
    X86_INS_VPROTW,
    X86_INS_VPSADBW,
    X86_INS_VPSCATTERDD,
    X86_INS_VPSCATTERDQ,
    X86_INS_VPSCATTERQD,
    X86_INS_VPSCATTERQQ,
    X86_INS_VPSHAB,
    X86_INS_VPSHAD,
    X86_INS_VPSHAQ,
    X86_INS_VPSHAW,
    X86_INS_VPSHLB,
    X86_INS_VPSHLD,
    X86_INS_VPSHLQ,
    X86_INS_VPSHLW,
    X86_INS_VPSHUFB,
    X86_INS_VPSHUFD,
    X86_INS_VPSHUFHW,
    X86_INS_VPSHUFLW,
    X86_INS_VPSIGNB,
    X86_INS_VPSIGND,
    X86_INS_VPSIGNW,
    X86_INS_VPSLLDQ,
    X86_INS_VPSLLD,
    X86_INS_VPSLLQ,
    X86_INS_VPSLLVD,
    X86_INS_VPSLLVQ,
    X86_INS_VPSLLW,
    X86_INS_VPSRAD,
    X86_INS_VPSRAQ,
    X86_INS_VPSRAVD,
    X86_INS_VPSRAVQ,
    X86_INS_VPSRAW,
    X86_INS_VPSRLDQ,
    X86_INS_VPSRLD,
    X86_INS_VPSRLQ,
    X86_INS_VPSRLVD,
    X86_INS_VPSRLVQ,
    X86_INS_VPSRLW,
    X86_INS_VPSUBB,
    X86_INS_VPSUBD,
    X86_INS_VPSUBQ,
    X86_INS_VPSUBSB,
    X86_INS_VPSUBSW,
    X86_INS_VPSUBUSB,
    X86_INS_VPSUBUSW,
    X86_INS_VPSUBW,
    X86_INS_VPTESTMD,
    X86_INS_VPTESTMQ,
    X86_INS_VPTESTNMD,
    X86_INS_VPTESTNMQ,
    X86_INS_VPTEST,
    X86_INS_VPUNPCKHBW,
    X86_INS_VPUNPCKHDQ,
    X86_INS_VPUNPCKHQDQ,
    X86_INS_VPUNPCKHWD,
    X86_INS_VPUNPCKLBW,
    X86_INS_VPUNPCKLDQ,
    X86_INS_VPUNPCKLQDQ,
    X86_INS_VPUNPCKLWD,
    X86_INS_VPXORD,
    X86_INS_VPXORQ,
    X86_INS_VPXOR,
    X86_INS_VRCP14PD,
    X86_INS_VRCP14PS,
    X86_INS_VRCP14SD,
    X86_INS_VRCP14SS,
    X86_INS_VRCP28PD,
    X86_INS_VRCP28PS,
    X86_INS_VRCP28SD,
    X86_INS_VRCP28SS,
    X86_INS_VRCPPS,
    X86_INS_VRCPSS,
    X86_INS_VRNDSCALEPD,
    X86_INS_VRNDSCALEPS,
    X86_INS_VRNDSCALESD,
    X86_INS_VRNDSCALESS,
    X86_INS_VROUNDPD,
    X86_INS_VROUNDPS,
    X86_INS_VROUNDSD,
    X86_INS_VROUNDSS,
    X86_INS_VRSQRT14PD,
    X86_INS_VRSQRT14PS,
    X86_INS_VRSQRT14SD,
    X86_INS_VRSQRT14SS,
    X86_INS_VRSQRT28PD,
    X86_INS_VRSQRT28PS,
    X86_INS_VRSQRT28SD,
    X86_INS_VRSQRT28SS,
    X86_INS_VRSQRTPS,
    X86_INS_VRSQRTSS,
    X86_INS_VSCATTERDPD,
    X86_INS_VSCATTERDPS,
    X86_INS_VSCATTERPF0DPD,
    X86_INS_VSCATTERPF0DPS,
    X86_INS_VSCATTERPF0QPD,
    X86_INS_VSCATTERPF0QPS,
    X86_INS_VSCATTERPF1DPD,
    X86_INS_VSCATTERPF1DPS,
    X86_INS_VSCATTERPF1QPD,
    X86_INS_VSCATTERPF1QPS,
    X86_INS_VSCATTERQPD,
    X86_INS_VSCATTERQPS,
    X86_INS_VSHUFPD,
    X86_INS_VSHUFPS,
    X86_INS_VSQRTPD,
    X86_INS_VSQRTPS,
    X86_INS_VSQRTSD,
    X86_INS_VSQRTSS,
    X86_INS_VSTMXCSR,
    X86_INS_VSUBPD,
    X86_INS_VSUBPS,
    X86_INS_VSUBSD,
    X86_INS_VSUBSS,
    X86_INS_VTESTPD,
    X86_INS_VTESTPS,
    X86_INS_VUNPCKHPD,
    X86_INS_VUNPCKHPS,
    X86_INS_VUNPCKLPD,
    X86_INS_VUNPCKLPS,
    X86_INS_VZEROALL,
    X86_INS_VZEROUPPER,
    X86_INS_WAIT,
    X86_INS_WBINVD,
    X86_INS_WRFSBASE,
    X86_INS_WRGSBASE,
    X86_INS_WRMSR,
    X86_INS_XABORT,
    X86_INS_XACQUIRE,
    X86_INS_XBEGIN,
    X86_INS_XCHG,
    X86_INS_FXCH,
    X86_INS_XCRYPTCBC,
    X86_INS_XCRYPTCFB,
    X86_INS_XCRYPTCTR,
    X86_INS_XCRYPTECB,
    X86_INS_XCRYPTOFB,
    X86_INS_XEND,
    X86_INS_XGETBV,
    X86_INS_XLATB,
    X86_INS_XRELEASE,
    X86_INS_XRSTOR,
    X86_INS_XRSTOR64,
    X86_INS_XSAVE,
    X86_INS_XSAVE64,
    X86_INS_XSAVEOPT,
    X86_INS_XSAVEOPT64,
    X86_INS_XSETBV,
    X86_INS_XSHA1,
    X86_INS_XSHA256,
    X86_INS_XSTORE,
    X86_INS_XTEST,

    X86_INS_ENDING, // mark the end of the list of insn
} x86_insn;

//> Group of X86 instructions
typedef enum  x86_insn_group
{
    X86_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    X86_GRP_JUMP,   // = CS_GRP_JUMP
    // all call instructions
    X86_GRP_CALL,   // = CS_GRP_CALL
    // all return instructions
    X86_GRP_RET,    // = CS_GRP_RET
    // all interrupt instructions (int+syscall)
    X86_GRP_INT,    // = CS_GRP_INT
    // all interrupt return instructions
    X86_GRP_IRET,   // = CS_GRP_IRET

    //> Architecture-specific groups
    X86_GRP_VM = 128,   // all virtualization instructions (VT-x + AMD-V)
    X86_GRP_3DNOW,
    X86_GRP_AES,
    X86_GRP_ADX,
    X86_GRP_AVX,
    X86_GRP_AVX2,
    X86_GRP_AVX512,
    X86_GRP_BMI,
    X86_GRP_BMI2,
    X86_GRP_CMOV,
    X86_GRP_F16C,
    X86_GRP_FMA,
    X86_GRP_FMA4,
    X86_GRP_FSGSBASE,
    X86_GRP_HLE,
    X86_GRP_MMX,
    X86_GRP_MODE32,
    X86_GRP_MODE64,
    X86_GRP_RTM,
    X86_GRP_SHA,
    X86_GRP_SSE1,
    X86_GRP_SSE2,
    X86_GRP_SSE3,
    X86_GRP_SSE41,
    X86_GRP_SSE42,
    X86_GRP_SSE4A,
    X86_GRP_SSSE3,
    X86_GRP_PCLMUL,
    X86_GRP_XOP,
    X86_GRP_CDI,
    X86_GRP_ERI,
    X86_GRP_TBM,
    X86_GRP_16BITMODE,
    X86_GRP_NOT64BITMODE,
    X86_GRP_SGX,
    X86_GRP_DQI,
    X86_GRP_BWI,
    X86_GRP_PFI,
    X86_GRP_VLX,
    X86_GRP_SMAP,
    X86_GRP_NOVLX,

    X86_GRP_ENDING
} x86_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/capstone/xcore.h
================================================
#ifndef CAPSTONE_XCORE_H
#define CAPSTONE_XCORE_H

/* Capstone Disassembly Engine */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2014 */

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "platform.h"

#ifdef _MSC_VER
#pragma warning(disable:4201)
#endif

//> Operand type for instruction's operands
typedef enum xcore_op_type
{
    XCORE_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).
    XCORE_OP_REG, // = CS_OP_REG (Register operand).
    XCORE_OP_IMM, // = CS_OP_IMM (Immediate operand).
    XCORE_OP_MEM, // = CS_OP_MEM (Memory operand).
} xcore_op_type;

// Instruction's operand referring to memory
// This is associated with XCORE_OP_MEM operand type above
typedef struct xcore_op_mem
{
    uint8_t base;   // base register
    uint8_t index;  // index register
    int32_t disp;   // displacement/offset value
    int     direct; // +1: forward, -1: backward
} xcore_op_mem;

// Instruction operand
typedef struct cs_xcore_op
{
    xcore_op_type type; // operand type
    union
    {
        unsigned int reg;   // register value for REG operand
        int32_t imm;        // immediate value for IMM operand
        xcore_op_mem mem;       // base/disp value for MEM operand
    };
} cs_xcore_op;

// Instruction structure
typedef struct cs_xcore
{
    // Number of operands of this instruction,
    // or 0 when instruction has no operand.
    uint8_t op_count;
    cs_xcore_op operands[8]; // operands for this instruction.
} cs_xcore;

//> XCore registers
typedef enum xcore_reg
{
    XCORE_REG_INVALID = 0,

    XCORE_REG_CP,
    XCORE_REG_DP,
    XCORE_REG_LR,
    XCORE_REG_SP,
    XCORE_REG_R0,
    XCORE_REG_R1,
    XCORE_REG_R2,
    XCORE_REG_R3,
    XCORE_REG_R4,
    XCORE_REG_R5,
    XCORE_REG_R6,
    XCORE_REG_R7,
    XCORE_REG_R8,
    XCORE_REG_R9,
    XCORE_REG_R10,
    XCORE_REG_R11,

    //> pseudo registers
    XCORE_REG_PC,   // pc

    // internal thread registers
    // see The-XMOS-XS1-Architecture(X7879A).pdf
    XCORE_REG_SCP,  // save pc
    XCORE_REG_SSR,  // save status
    XCORE_REG_ET,   // exception type
    XCORE_REG_ED,   // exception data
    XCORE_REG_SED,  // save exception data
    XCORE_REG_KEP,  // kernel entry pointer
    XCORE_REG_KSP,  // kernel stack pointer
    XCORE_REG_ID,   // thread ID

    XCORE_REG_ENDING,   // <-- mark the end of the list of registers
} xcore_reg;

//> XCore instruction
typedef enum xcore_insn
{
    XCORE_INS_INVALID = 0,

    XCORE_INS_ADD,
    XCORE_INS_ANDNOT,
    XCORE_INS_AND,
    XCORE_INS_ASHR,
    XCORE_INS_BAU,
    XCORE_INS_BITREV,
    XCORE_INS_BLA,
    XCORE_INS_BLAT,
    XCORE_INS_BL,
    XCORE_INS_BF,
    XCORE_INS_BT,
    XCORE_INS_BU,
    XCORE_INS_BRU,
    XCORE_INS_BYTEREV,
    XCORE_INS_CHKCT,
    XCORE_INS_CLRE,
    XCORE_INS_CLRPT,
    XCORE_INS_CLRSR,
    XCORE_INS_CLZ,
    XCORE_INS_CRC8,
    XCORE_INS_CRC32,
    XCORE_INS_DCALL,
    XCORE_INS_DENTSP,
    XCORE_INS_DGETREG,
    XCORE_INS_DIVS,
    XCORE_INS_DIVU,
    XCORE_INS_DRESTSP,
    XCORE_INS_DRET,
    XCORE_INS_ECALLF,
    XCORE_INS_ECALLT,
    XCORE_INS_EDU,
    XCORE_INS_EEF,
    XCORE_INS_EET,
    XCORE_INS_EEU,
    XCORE_INS_ENDIN,
    XCORE_INS_ENTSP,
    XCORE_INS_EQ,
    XCORE_INS_EXTDP,
    XCORE_INS_EXTSP,
    XCORE_INS_FREER,
    XCORE_INS_FREET,
    XCORE_INS_GETD,
    XCORE_INS_GET,
    XCORE_INS_GETN,
    XCORE_INS_GETR,
    XCORE_INS_GETSR,
    XCORE_INS_GETST,
    XCORE_INS_GETTS,
    XCORE_INS_INCT,
    XCORE_INS_INIT,
    XCORE_INS_INPW,
    XCORE_INS_INSHR,
    XCORE_INS_INT,
    XCORE_INS_IN,
    XCORE_INS_KCALL,
    XCORE_INS_KENTSP,
    XCORE_INS_KRESTSP,
    XCORE_INS_KRET,
    XCORE_INS_LADD,
    XCORE_INS_LD16S,
    XCORE_INS_LD8U,
    XCORE_INS_LDA16,
    XCORE_INS_LDAP,
    XCORE_INS_LDAW,
    XCORE_INS_LDC,
    XCORE_INS_LDW,
    XCORE_INS_LDIVU,
    XCORE_INS_LMUL,
    XCORE_INS_LSS,
    XCORE_INS_LSUB,
    XCORE_INS_LSU,
    XCORE_INS_MACCS,
    XCORE_INS_MACCU,
    XCORE_INS_MJOIN,
    XCORE_INS_MKMSK,
    XCORE_INS_MSYNC,
    XCORE_INS_MUL,
    XCORE_INS_NEG,
    XCORE_INS_NOT,
    XCORE_INS_OR,
    XCORE_INS_OUTCT,
    XCORE_INS_OUTPW,
    XCORE_INS_OUTSHR,
    XCORE_INS_OUTT,
    XCORE_INS_OUT,
    XCORE_INS_PEEK,
    XCORE_INS_REMS,
    XCORE_INS_REMU,
    XCORE_INS_RETSP,
    XCORE_INS_SETCLK,
    XCORE_INS_SET,
    XCORE_INS_SETC,
    XCORE_INS_SETD,
    XCORE_INS_SETEV,
    XCORE_INS_SETN,
    XCORE_INS_SETPSC,
    XCORE_INS_SETPT,
    XCORE_INS_SETRDY,
    XCORE_INS_SETSR,
    XCORE_INS_SETTW,
    XCORE_INS_SETV,
    XCORE_INS_SEXT,
    XCORE_INS_SHL,
    XCORE_INS_SHR,
    XCORE_INS_SSYNC,
    XCORE_INS_ST16,
    XCORE_INS_ST8,
    XCORE_INS_STW,
    XCORE_INS_SUB,
    XCORE_INS_SYNCR,
    XCORE_INS_TESTCT,
    XCORE_INS_TESTLCL,
    XCORE_INS_TESTWCT,
    XCORE_INS_TSETMR,
    XCORE_INS_START,
    XCORE_INS_WAITEF,
    XCORE_INS_WAITET,
    XCORE_INS_WAITEU,
    XCORE_INS_XOR,
    XCORE_INS_ZEXT,

    XCORE_INS_ENDING,   // <-- mark the end of the list of instructions
} xcore_insn;

//> Group of XCore instructions
typedef enum xcore_insn_group
{
    XCORE_GRP_INVALID = 0, // = CS_GRP_INVALID

    //> Generic groups
    // all jump instructions (conditional+direct+indirect jumps)
    XCORE_GRP_JUMP, // = CS_GRP_JUMP

    XCORE_GRP_ENDING,   // <-- mark the end of the list of groups
} xcore_insn_group;

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/dbghelp/dbghelp.h
================================================
#ifndef _DBGHELP_
#define _DBGHELP_


// As a general principal always call the 64 bit version
// of every API, if a choice exists.  The 64 bit version
// works great on 32 bit platforms, and is forward
// compatible to 64 bit platforms.

#ifdef _WIN64
#ifndef _IMAGEHLP64
#define _IMAGEHLP64
#endif
#endif

#pragma pack(push,8)

// For those without specstrings.h
// Since there are different versions of this header, I need to
// individually test each item and define it if it is not around.

#ifndef __in
#define __in
#endif
#ifndef __out
#define __out
#endif
#ifndef __inout
#define __inout
#endif
#ifndef __in_opt
#define __in_opt
#endif
#ifndef __out_opt
#define __out_opt
#endif
#ifndef __inout_opt
#define __inout_opt
#endif
#ifndef __in_ecount
#define __in_ecount(x)
#endif
#ifndef __out_ecount
#define __out_ecount(x)
#endif
#ifndef __inout_ecount
#define __inout_ecount(x)
#endif
#ifndef __in_bcount
#define __in_bcount(x)
#endif
#ifndef __out_bcount
#define __out_bcount(x)
#endif
#ifndef __inout_bcount
#define __inout_bcount(x)
#endif
#ifndef __out_xcount
#define __out_xcount(x)
#endif
#ifndef __deref_opt_out
#define __deref_opt_out
#endif
#ifndef __deref_out
#define __deref_out
#endif
#ifndef __out_ecount_opt
#define __out_ecount_opt(x)
#endif
#ifndef __in_bcount_opt
#define __in_bcount_opt(x)
#endif
#ifndef __out_bcount_opt
#define __out_bcount_opt(x)
#endif
#ifndef __deref_out_opt
#define __deref_out_opt
#endif


#ifdef __cplusplus
extern "C" {
#endif

#ifdef _IMAGEHLP_SOURCE_
#define IMAGEAPI __stdcall
#define DBHLP_DEPRECIATED
#else
#define IMAGEAPI DECLSPEC_IMPORT __stdcall
#if (_MSC_VER >= 1300) && !defined(MIDL_PASS)
#define DBHLP_DEPRECIATED   __declspec(deprecated)
#else
#define DBHLP_DEPRECIATED
#endif
#endif

#define DBHLPAPI IMAGEAPI

#define IMAGE_SEPARATION (64*1024)

// Observant readers may notice that 2 new fields,
// 'fReadOnly' and 'Version' have been added to
// the LOADED_IMAGE structure after 'fDOSImage'.
// This does not change the size of the structure
// from previous headers.  That is because while
// 'fDOSImage' is a byte, it is padded by the
// compiler to 4 bytes.  So the 2 new fields are
// slipped into the extra space.

typedef struct _LOADED_IMAGE
{
    PSTR                  ModuleName;
    HANDLE                hFile;
    PUCHAR                MappedAddress;
#ifdef _IMAGEHLP64
    PIMAGE_NT_HEADERS64   FileHeader;
#else
    PIMAGE_NT_HEADERS32   FileHeader;
#endif
    PIMAGE_SECTION_HEADER LastRvaSection;
    ULONG                 NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;
    ULONG                 Characteristics;
    BOOLEAN               fSystemImage;
    BOOLEAN               fDOSImage;
    BOOLEAN               fReadOnly;
    UCHAR                 Version;
    LIST_ENTRY            Links;
    ULONG                 SizeOfImage;
} LOADED_IMAGE, *PLOADED_IMAGE;

#define MAX_SYM_NAME            2000


// Error codes set by dbghelp functions.  Call GetLastError
// to see them.
// Dbghelp also sets error codes found in winerror.h

#define ERROR_IMAGE_NOT_STRIPPED    0x8800  // the image is not stripped.  No dbg file available.
#define ERROR_NO_DBG_POINTER        0x8801  // image is stripped but there is no pointer to a dbg file
#define ERROR_NO_PDB_POINTER        0x8802  // image does not point to a pdb file

typedef BOOL
(CALLBACK* PFIND_DEBUG_FILE_CALLBACK)(
    __in HANDLE FileHandle,
    __in PCSTR FileName,
    __in PVOID CallerData
);

HANDLE
IMAGEAPI
SymFindDebugInfoFile(
    __in HANDLE hProcess,
    __in PCSTR FileName,
    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
);

typedef BOOL
(CALLBACK* PFIND_DEBUG_FILE_CALLBACKW)(
    __in HANDLE FileHandle,
    __in PCWSTR FileName,
    __in PVOID  CallerData
);

HANDLE
IMAGEAPI
SymFindDebugInfoFileW(
    __in HANDLE hProcess,
    __in PCWSTR FileName,
    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,
    __in_opt PVOID CallerData
);

HANDLE
IMAGEAPI
FindDebugInfoFile(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath
);

HANDLE
IMAGEAPI
FindDebugInfoFileEx(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR  DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
);

HANDLE
IMAGEAPI
FindDebugInfoFileExW(
    __in PCWSTR FileName,
    __in PCWSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,
    __in_opt PVOID CallerData
);

typedef BOOL
(CALLBACK* PFINDFILEINPATHCALLBACK)(
    __in PCSTR filename,
    __in PVOID context
);

BOOL
IMAGEAPI
SymFindFileInPath(
    __in HANDLE hprocess,
    __in_opt PCSTR SearchPath,
    __in PCSTR FileName,
    __in_opt PVOID id,
    __in DWORD two,
    __in DWORD three,
    __in DWORD flags,
    __out_ecount(MAX_PATH + 1) PSTR FoundFile,
    __in_opt PFINDFILEINPATHCALLBACK callback,
    __in_opt PVOID context
);

typedef BOOL
(CALLBACK* PFINDFILEINPATHCALLBACKW)(
    __in PCWSTR filename,
    __in PVOID context
);

BOOL
IMAGEAPI
SymFindFileInPathW(
    __in HANDLE hprocess,
    __in_opt PCWSTR SearchPath,
    __in PCWSTR FileName,
    __in_opt PVOID id,
    __in DWORD two,
    __in DWORD three,
    __in DWORD flags,
    __out_ecount(MAX_PATH + 1) PWSTR FoundFile,
    __in_opt PFINDFILEINPATHCALLBACKW callback,
    __in_opt PVOID context
);

typedef BOOL
(CALLBACK* PFIND_EXE_FILE_CALLBACK)(
    __in HANDLE FileHandle,
    __in PCSTR FileName,
    __in_opt PVOID CallerData
);

HANDLE
IMAGEAPI
SymFindExecutableImage(
    __in HANDLE hProcess,
    __in PCSTR FileName,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,
    __in PFIND_EXE_FILE_CALLBACK Callback,
    __in PVOID CallerData
);

typedef BOOL
(CALLBACK* PFIND_EXE_FILE_CALLBACKW)(
    __in HANDLE FileHandle,
    __in PCWSTR FileName,
    __in_opt PVOID CallerData
);

HANDLE
IMAGEAPI
SymFindExecutableImageW(
    __in HANDLE hProcess,
    __in PCWSTR FileName,
    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,
    __in PFIND_EXE_FILE_CALLBACKW Callback,
    __in PVOID CallerData
);

HANDLE
IMAGEAPI
FindExecutableImage(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath
);

HANDLE
IMAGEAPI
FindExecutableImageEx(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,
    __in_opt PFIND_EXE_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
);

HANDLE
IMAGEAPI
FindExecutableImageExW(
    __in PCWSTR FileName,
    __in PCWSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,
    __in_opt PFIND_EXE_FILE_CALLBACKW Callback,
    __in PVOID CallerData
);

PIMAGE_NT_HEADERS
IMAGEAPI
ImageNtHeader(
    __in PVOID Base
);

PVOID
IMAGEAPI
ImageDirectoryEntryToDataEx(
    __in PVOID Base,
    __in BOOLEAN MappedAsImage,
    __in USHORT DirectoryEntry,
    __out PULONG Size,
    __out_opt PIMAGE_SECTION_HEADER* FoundHeader
);

PVOID
IMAGEAPI
ImageDirectoryEntryToData(
    __in PVOID Base,
    __in BOOLEAN MappedAsImage,
    __in USHORT DirectoryEntry,
    __out PULONG Size
);

PIMAGE_SECTION_HEADER
IMAGEAPI
ImageRvaToSection(
    __in PIMAGE_NT_HEADERS NtHeaders,
    __in PVOID Base,
    __in ULONG Rva
);

PVOID
IMAGEAPI
ImageRvaToVa(
    __in PIMAGE_NT_HEADERS NtHeaders,
    __in PVOID Base,
    __in ULONG Rva,
    __in_opt OUT PIMAGE_SECTION_HEADER* LastRvaSection
);

#ifndef _WIN64
// This api won't be ported to Win64 - Fix your code.

typedef struct _IMAGE_DEBUG_INFORMATION
{
    LIST_ENTRY List;
    DWORD ReservedSize;
    PVOID ReservedMappedBase;
    USHORT ReservedMachine;
    USHORT ReservedCharacteristics;
    DWORD ReservedCheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;

    DWORD ReservedNumberOfSections;
    PIMAGE_SECTION_HEADER ReservedSections;

    DWORD ReservedExportedNamesSize;
    PSTR ReservedExportedNames;

    DWORD ReservedNumberOfFunctionTableEntries;
    PIMAGE_FUNCTION_ENTRY ReservedFunctionTableEntries;
    DWORD ReservedLowestFunctionStartingAddress;
    DWORD ReservedHighestFunctionEndingAddress;

    DWORD ReservedNumberOfFpoTableEntries;
    PFPO_DATA ReservedFpoTableEntries;

    DWORD SizeOfCoffSymbols;
    PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;

    DWORD ReservedSizeOfCodeViewSymbols;
    PVOID ReservedCodeViewSymbols;

    PSTR ImageFilePath;
    PSTR ImageFileName;
    PSTR ReservedDebugFilePath;

    DWORD ReservedTimeDateStamp;

    BOOL  ReservedRomImage;
    PIMAGE_DEBUG_DIRECTORY ReservedDebugDirectory;
    DWORD ReservedNumberOfDebugDirectories;

    DWORD ReservedOriginalFunctionTableBaseAddress;

    DWORD Reserved[ 2 ];

} IMAGE_DEBUG_INFORMATION, *PIMAGE_DEBUG_INFORMATION;


PIMAGE_DEBUG_INFORMATION
IMAGEAPI
MapDebugInformation(
    __in_opt HANDLE FileHandle,
    __in PCSTR FileName,
    __in_opt PCSTR SymbolPath,
    __in ULONG ImageBase
);

BOOL
IMAGEAPI
UnmapDebugInformation(
    __out_xcount(unknown) PIMAGE_DEBUG_INFORMATION DebugInfo
);

#endif

BOOL
IMAGEAPI
SearchTreeForFile(
    __in PCSTR RootPath,
    __in PCSTR InputPathName,
    __out_ecount(MAX_PATH + 1) PSTR OutputPathBuffer
);

BOOL
IMAGEAPI
SearchTreeForFileW(
    __in PCWSTR RootPath,
    __in PCWSTR InputPathName,
    __out_ecount(MAX_PATH + 1) PWSTR OutputPathBuffer
);

typedef BOOL
(CALLBACK* PENUMDIRTREE_CALLBACK)(
    __in PCSTR FilePath,
    __in_opt PVOID CallerData
);

BOOL
IMAGEAPI
EnumDirTree(
    __in_opt HANDLE hProcess,
    __in PCSTR RootPath,
    __in PCSTR InputPathName,
    __out_ecount_opt(MAX_PATH + 1) PSTR OutputPathBuffer,
    __in_opt PENUMDIRTREE_CALLBACK cb,
    __in_opt PVOID data
);

typedef BOOL
(CALLBACK* PENUMDIRTREE_CALLBACKW)(
    __in PCWSTR FilePath,
    __in_opt PVOID CallerData
);

BOOL
IMAGEAPI
EnumDirTreeW(
    __in_opt HANDLE hProcess,
    __in PCWSTR RootPath,
    __in PCWSTR InputPathName,
    __out_ecount_opt(MAX_PATH + 1) PWSTR OutputPathBuffer,
    __in_opt PENUMDIRTREE_CALLBACKW cb,
    __in_opt PVOID data
);

BOOL
IMAGEAPI
MakeSureDirectoryPathExists(
    __in PCSTR DirPath
);

//
// UnDecorateSymbolName Flags
//

#define UNDNAME_COMPLETE                 (0x0000)  // Enable full undecoration
#define UNDNAME_NO_LEADING_UNDERSCORES   (0x0001)  // Remove leading underscores from MS extended keywords
#define UNDNAME_NO_MS_KEYWORDS           (0x0002)  // Disable expansion of MS extended keywords
#define UNDNAME_NO_FUNCTION_RETURNS      (0x0004)  // Disable expansion of return type for primary declaration
#define UNDNAME_NO_ALLOCATION_MODEL      (0x0008)  // Disable expansion of the declaration model
#define UNDNAME_NO_ALLOCATION_LANGUAGE   (0x0010)  // Disable expansion of the declaration language specifier
#define UNDNAME_NO_MS_THISTYPE           (0x0020)  // NYI Disable expansion of MS keywords on the 'this' type for primary declaration
#define UNDNAME_NO_CV_THISTYPE           (0x0040)  // NYI Disable expansion of CV modifiers on the 'this' type for primary declaration
#define UNDNAME_NO_THISTYPE              (0x0060)  // Disable all modifiers on the 'this' type
#define UNDNAME_NO_ACCESS_SPECIFIERS     (0x0080)  // Disable expansion of access specifiers for members
#define UNDNAME_NO_THROW_SIGNATURES      (0x0100)  // Disable expansion of 'throw-signatures' for functions and pointers to functions
#define UNDNAME_NO_MEMBER_TYPE           (0x0200)  // Disable expansion of 'static' or 'virtual'ness of members
#define UNDNAME_NO_RETURN_UDT_MODEL      (0x0400)  // Disable expansion of MS model for UDT returns
#define UNDNAME_32_BIT_DECODE            (0x0800)  // Undecorate 32-bit decorated names
#define UNDNAME_NAME_ONLY                (0x1000)  // Crack only the name for primary declaration;
//  return just [scope::]name.  Does expand template params
#define UNDNAME_NO_ARGUMENTS             (0x2000)  // Don't undecorate arguments to function
#define UNDNAME_NO_SPECIAL_SYMS          (0x4000)  // Don't undecorate special names (v-table, vcall, vector xxx, metatype, etc)

DWORD
IMAGEAPI
WINAPI
UnDecorateSymbolName(
    __in PCSTR name,
    __out_ecount(maxStringLength) PSTR outputString,
    __in DWORD maxStringLength,
    __in DWORD flags
);

DWORD
IMAGEAPI
WINAPI
UnDecorateSymbolNameW(
    __in PCWSTR name,
    __out_ecount(maxStringLength) PWSTR outputString,
    __in DWORD maxStringLength,
    __in DWORD flags
);

//
// these values are used for synthesized file types
// that can be passed in as image headers instead of
// the standard ones from ntimage.h
//

#define DBHHEADER_DEBUGDIRS     0x1
#define DBHHEADER_CVMISC        0x2
#define DBHHEADER_PDBGUID       0x3
typedef struct _MODLOAD_DATA
{
    DWORD   ssize;                  // size of this struct
    DWORD   ssig;                   // signature identifying the passed data
    PVOID   data;                   // pointer to passed data
    DWORD   size;                   // size of passed data
    DWORD   flags;                  // options
} MODLOAD_DATA, *PMODLOAD_DATA;

typedef struct _MODLOAD_CVMISC
{
    DWORD   oCV;                    // ofset to the codeview record
    size_t  cCV;                    // size of the codeview record
    DWORD   oMisc;                  // offset to the misc record
    size_t  cMisc;                  // size of the misc record
    DWORD   dtImage;                // datetime stamp of the image
    DWORD   cImage;                 // size of the image
} MODLOAD_CVMISC, *PMODLOAD_CVMISC;

typedef struct _MODLOAD_PDBGUID_PDBAGE
{
    GUID    PdbGuid;                // Pdb Guid
    DWORD   PdbAge;                 // Pdb Age
} MODLOAD_PDBGUID_PDBAGE, *PMODLOAD_PDBGUID_PDBAGE;

//
// StackWalking API
//

typedef enum
{
    AddrMode1616,
    AddrMode1632,
    AddrModeReal,
    AddrModeFlat
} ADDRESS_MODE;

typedef struct _tagADDRESS64
{
    DWORD64       Offset;
    WORD          Segment;
    ADDRESS_MODE  Mode;
} ADDRESS64, *LPADDRESS64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define ADDRESS ADDRESS64
#define LPADDRESS LPADDRESS64
#else
typedef struct _tagADDRESS
{
    DWORD         Offset;
    WORD          Segment;
    ADDRESS_MODE  Mode;
} ADDRESS, *LPADDRESS;

__inline
void
Address32To64(
    __in LPADDRESS a32,
    __out LPADDRESS64 a64
)
{
    a64->Offset = (ULONG64)(LONG64)(LONG)a32->Offset;
    a64->Segment = a32->Segment;
    a64->Mode = a32->Mode;
}

__inline
void
Address64To32(
    __in LPADDRESS64 a64,
    __out LPADDRESS a32
)
{
    a32->Offset = (ULONG)a64->Offset;
    a32->Segment = a64->Segment;
    a32->Mode = a64->Mode;
}
#endif

//
// This structure is included in the STACKFRAME structure,
// and is used to trace through usermode callbacks in a thread's
// kernel stack.  The values must be copied by the kernel debugger
// from the DBGKD_GET_VERSION and WAIT_STATE_CHANGE packets.
//

//
// New KDHELP structure for 64 bit system support.
// This structure is preferred in new code.
//
typedef struct _KDHELP64
{

    //
    // address of kernel thread object, as provided in the
    // WAIT_STATE_CHANGE packet.
    //
    DWORD64   Thread;

    //
    // offset in thread object to pointer to the current callback frame
    // in kernel stack.
    //
    DWORD   ThCallbackStack;

    //
    // offset in thread object to pointer to the current callback backing
    // store frame in kernel stack.
    //
    DWORD   ThCallbackBStore;

    //
    // offsets to values in frame:
    //
    // address of next callback frame
    DWORD   NextCallback;

    // address of saved frame pointer (if applicable)
    DWORD   FramePointer;


    //
    // Address of the kernel function that calls out to user mode
    //
    DWORD64   KiCallUserMode;

    //
    // Address of the user mode dispatcher function
    //
    DWORD64   KeUserCallbackDispatcher;

    //
    // Lowest kernel mode address
    //
    DWORD64   SystemRangeStart;

    //
    // Address of the user mode exception dispatcher function.
    // Added in API version 10.
    //
    DWORD64   KiUserExceptionDispatcher;

    //
    // Stack bounds, added in API version 11.
    //
    DWORD64   StackBase;
    DWORD64   StackLimit;

    DWORD64   Reserved[5];

} KDHELP64, *PKDHELP64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define KDHELP KDHELP64
#define PKDHELP PKDHELP64
#else
typedef struct _KDHELP
{

    //
    // address of kernel thread object, as provided in the
    // WAIT_STATE_CHANGE packet.
    //
    DWORD   Thread;

    //
    // offset in thread object to pointer to the current callback frame
    // in kernel stack.
    //
    DWORD   ThCallbackStack;

    //
    // offsets to values in frame:
    //
    // address of next callback frame
    DWORD   NextCallback;

    // address of saved frame pointer (if applicable)
    DWORD   FramePointer;

    //
    // Address of the kernel function that calls out to user mode
    //
    DWORD   KiCallUserMode;

    //
    // Address of the user mode dispatcher function
    //
    DWORD   KeUserCallbackDispatcher;

    //
    // Lowest kernel mode address
    //
    DWORD   SystemRangeStart;

    //
    // offset in thread object to pointer to the current callback backing
    // store frame in kernel stack.
    //
    DWORD   ThCallbackBStore;

    //
    // Address of the user mode exception dispatcher function.
    // Added in API version 10.
    //
    DWORD   KiUserExceptionDispatcher;

    //
    // Stack bounds, added in API version 11.
    //
    DWORD   StackBase;
    DWORD   StackLimit;

    DWORD   Reserved[5];

} KDHELP, *PKDHELP;

__inline
void
KdHelp32To64(
    __in PKDHELP p32,
    __out PKDHELP64 p64
)
{
    p64->Thread = p32->Thread;
    p64->ThCallbackStack = p32->ThCallbackStack;
    p64->NextCallback = p32->NextCallback;
    p64->FramePointer = p32->FramePointer;
    p64->KiCallUserMode = p32->KiCallUserMode;
    p64->KeUserCallbackDispatcher = p32->KeUserCallbackDispatcher;
    p64->SystemRangeStart = p32->SystemRangeStart;
    p64->KiUserExceptionDispatcher = p32->KiUserExceptionDispatcher;
    p64->StackBase = p32->StackBase;
    p64->StackLimit = p32->StackLimit;
}
#endif

typedef struct _tagSTACKFRAME64
{
    ADDRESS64   AddrPC;               // program counter
    ADDRESS64   AddrReturn;           // return address
    ADDRESS64   AddrFrame;            // frame pointer
    ADDRESS64   AddrStack;            // stack pointer
    ADDRESS64   AddrBStore;           // backing store pointer
    PVOID       FuncTableEntry;       // pointer to pdata/fpo or NULL
    DWORD64     Params[4];            // possible arguments to the function
    BOOL        Far;                  // WOW far call
    BOOL        Virtual;              // is this a virtual frame?
    DWORD64     Reserved[3];
    KDHELP64    KdHelp;
} STACKFRAME64, *LPSTACKFRAME64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define STACKFRAME STACKFRAME64
#define LPSTACKFRAME LPSTACKFRAME64
#else
typedef struct _tagSTACKFRAME
{
    ADDRESS     AddrPC;               // program counter
    ADDRESS     AddrReturn;           // return address
    ADDRESS     AddrFrame;            // frame pointer
    ADDRESS     AddrStack;            // stack pointer
    PVOID       FuncTableEntry;       // pointer to pdata/fpo or NULL
    DWORD       Params[4];            // possible arguments to the function
    BOOL        Far;                  // WOW far call
    BOOL        Virtual;              // is this a virtual frame?
    DWORD       Reserved[3];
    KDHELP      KdHelp;
    ADDRESS     AddrBStore;           // backing store pointer
} STACKFRAME, *LPSTACKFRAME;
#endif


typedef
BOOL
(__stdcall* PREAD_PROCESS_MEMORY_ROUTINE64)(
    __in HANDLE hProcess,
    __in DWORD64 qwBaseAddress,
    __out_bcount(nSize) PVOID lpBuffer,
    __in DWORD nSize,
    __out LPDWORD lpNumberOfBytesRead
);

typedef
PVOID
(__stdcall* PFUNCTION_TABLE_ACCESS_ROUTINE64)(
    __in HANDLE ahProcess,
    __in DWORD64 AddrBase
);

typedef
DWORD64
(__stdcall* PGET_MODULE_BASE_ROUTINE64)(
    __in HANDLE hProcess,
    __in DWORD64 Address
);

typedef
DWORD64
(__stdcall* PTRANSLATE_ADDRESS_ROUTINE64)(
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __in LPADDRESS64 lpaddr
);

BOOL
IMAGEAPI
StackWalk64(
    __in DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME64 StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

#define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64
#define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64
#define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64
#define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64

#define StackWalk StackWalk64

#else

typedef
BOOL
(__stdcall* PREAD_PROCESS_MEMORY_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD lpBaseAddress,
    __out_bcount(nSize) PVOID lpBuffer,
    __in DWORD nSize,
    __out PDWORD lpNumberOfBytesRead
);

typedef
PVOID
(__stdcall* PFUNCTION_TABLE_ACCESS_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD AddrBase
);

typedef
DWORD
(__stdcall* PGET_MODULE_BASE_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD Address
);

typedef
DWORD
(__stdcall* PTRANSLATE_ADDRESS_ROUTINE)(
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __out LPADDRESS lpaddr
);

BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
);

#endif


#define API_VERSION_NUMBER 11

typedef struct API_VERSION
{
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  Revision;
    USHORT  Reserved;
} API_VERSION, *LPAPI_VERSION;

LPAPI_VERSION
IMAGEAPI
ImagehlpApiVersion(
    VOID
);

LPAPI_VERSION
IMAGEAPI
ImagehlpApiVersionEx(
    __in LPAPI_VERSION AppVersion
);

DWORD
IMAGEAPI
GetTimestampForLoadedLibrary(
    __in HMODULE Module
);

//
// typedefs for function pointers
//
typedef BOOL
(CALLBACK* PSYM_ENUMMODULES_CALLBACK64)(
    __in PCSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMMODULES_CALLBACKW64)(
    __in PCWSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PENUMLOADED_MODULES_CALLBACK64)(
    __in PCSTR ModuleName,
    __in DWORD64 ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PENUMLOADED_MODULES_CALLBACKW64)(
    __in PCWSTR ModuleName,
    __in DWORD64 ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMSYMBOLS_CALLBACK64)(
    __in PCSTR SymbolName,
    __in DWORD64 SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMSYMBOLS_CALLBACK64W)(
    __in PCWSTR SymbolName,
    __in DWORD64 SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYMBOL_REGISTERED_CALLBACK64)(
    __in HANDLE hProcess,
    __in ULONG ActionCode,
    __in_opt ULONG64 CallbackData,
    __in_opt ULONG64 UserContext
);

typedef
PVOID
(CALLBACK* PSYMBOL_FUNCENTRY_CALLBACK)(
    __in HANDLE hProcess,
    __in DWORD AddrBase,
    __in_opt PVOID UserContext
);

typedef
PVOID
(CALLBACK* PSYMBOL_FUNCENTRY_CALLBACK64)(
    __in HANDLE hProcess,
    __in ULONG64 AddrBase,
    __in ULONG64 UserContext
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

#define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACK PSYM_ENUMSYMBOLS_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACKW PSYM_ENUMSYMBOLS_CALLBACK64W
#define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64
#define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64
#define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64

#else

typedef BOOL
(CALLBACK* PSYM_ENUMMODULES_CALLBACK)(
    __in PCSTR ModuleName,
    __in ULONG BaseOfDll,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMSYMBOLS_CALLBACK)(
    __in PCSTR SymbolName,
    __in ULONG SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMSYMBOLS_CALLBACKW)(
    __in PCWSTR SymbolName,
    __in ULONG SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PENUMLOADED_MODULES_CALLBACK)(
    __in PCSTR ModuleName,
    __in ULONG ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYMBOL_REGISTERED_CALLBACK)(
    __in HANDLE hProcess,
    __in ULONG ActionCode,
    __in_opt PVOID CallbackData,
    __in_opt PVOID UserContext
);

#endif


// values found in SYMBOL_INFO.Tag
//
// This was taken from cvconst.h and should
// not override any values found there.
//
// #define _NO_CVCONST_H_ if you don't
// have access to that file...

#ifdef _NO_CVCONST_H

// DIA enums

enum SymTagEnum
{
    SymTagNull,
    SymTagExe,
    SymTagCompiland,
    SymTagCompilandDetails,
    SymTagCompilandEnv,
    SymTagFunction,
    SymTagBlock,
    SymTagData,
    SymTagAnnotation,
    SymTagLabel,
    SymTagPublicSymbol,
    SymTagUDT,
    SymTagEnum,
    SymTagFunctionType,
    SymTagPointerType,
    SymTagArrayType,
    SymTagBaseType,
    SymTagTypedef,
    SymTagBaseClass,
    SymTagFriend,
    SymTagFunctionArgType,
    SymTagFuncDebugStart,
    SymTagFuncDebugEnd,
    SymTagUsingNamespace,
    SymTagVTableShape,
    SymTagVTable,
    SymTagCustom,
    SymTagThunk,
    SymTagCustomType,
    SymTagManagedType,
    SymTagDimension,
    SymTagMax
};

#endif

//
// flags found in SYMBOL_INFO.Flags
//

#define SYMFLAG_VALUEPRESENT     0x00000001
#define SYMFLAG_REGISTER         0x00000008
#define SYMFLAG_REGREL           0x00000010
#define SYMFLAG_FRAMEREL         0x00000020
#define SYMFLAG_PARAMETER        0x00000040
#define SYMFLAG_LOCAL            0x00000080
#define SYMFLAG_CONSTANT         0x00000100
#define SYMFLAG_EXPORT           0x00000200
#define SYMFLAG_FORWARDER        0x00000400
#define SYMFLAG_FUNCTION         0x00000800
#define SYMFLAG_VIRTUAL          0x00001000
#define SYMFLAG_THUNK            0x00002000
#define SYMFLAG_TLSREL           0x00004000
#define SYMFLAG_SLOT             0x00008000
#define SYMFLAG_ILREL            0x00010000
#define SYMFLAG_METADATA         0x00020000
#define SYMFLAG_CLR_TOKEN        0x00040000

// this resets SymNext/Prev to the beginning
// of the module passed in the address field

#define SYMFLAG_RESET            0x80000000

//
// symbol type enumeration
//
typedef enum
{
    SymNone = 0,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym,       // .sym file
    SymDia,
    SymVirtual,
    NumSymTypes
} SYM_TYPE;

//
// symbol data structure
//

typedef struct _IMAGEHLP_SYMBOL64
{
    DWORD   SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOL64)
    DWORD64 Address;                // virtual address including dll base address
    DWORD   Size;                   // estimated size of symbol, can be zero
    DWORD   Flags;                  // info about the symbols, see the SYMF defines
    DWORD   MaxNameLength;          // maximum size of symbol name in 'Name'
    CHAR    Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOL64, *PIMAGEHLP_SYMBOL64;

typedef struct _IMAGEHLP_SYMBOL64_PACKAGE
{
    IMAGEHLP_SYMBOL64 sym;
    CHAR              name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOL64_PACKAGE, *PIMAGEHLP_SYMBOL64_PACKAGE;

typedef struct _IMAGEHLP_SYMBOLW64
{
    DWORD   SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOLW64)
    DWORD64 Address;                // virtual address including dll base address
    DWORD   Size;                   // estimated size of symbol, can be zero
    DWORD   Flags;                  // info about the symbols, see the SYMF defines
    DWORD   MaxNameLength;          // maximum size of symbol name in 'Name'
    WCHAR   Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOLW64, *PIMAGEHLP_SYMBOLW64;

typedef struct _IMAGEHLP_SYMBOLW64_PACKAGE
{
    IMAGEHLP_SYMBOLW64 sym;
    WCHAR              name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOLW64_PACKAGE, *PIMAGEHLP_SYMBOLW64_PACKAGE;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

#define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64
#define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64
#define IMAGEHLP_SYMBOL_PACKAGE IMAGEHLP_SYMBOL64_PACKAGE
#define PIMAGEHLP_SYMBOL_PACKAGE PIMAGEHLP_SYMBOL64_PACKAGE
#define IMAGEHLP_SYMBOLW IMAGEHLP_SYMBOLW64
#define PIMAGEHLP_SYMBOLW PIMAGEHLP_SYMBOLW64
#define IMAGEHLP_SYMBOLW_PACKAGE IMAGEHLP_SYMBOLW64_PACKAGE
#define PIMAGEHLP_SYMBOLW_PACKAGE PIMAGEHLP_SYMBOLW64_PACKAGE

#else

typedef struct _IMAGEHLP_SYMBOL
{
    DWORD SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOL)
    DWORD Address;                // virtual address including dll base address
    DWORD Size;                   // estimated size of symbol, can be zero
    DWORD Flags;                  // info about the symbols, see the SYMF defines
    DWORD                       MaxNameLength;          // maximum size of symbol name in 'Name'
    CHAR                        Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;

typedef struct _IMAGEHLP_SYMBOL_PACKAGE
{
    IMAGEHLP_SYMBOL sym;
    CHAR            name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOL_PACKAGE, *PIMAGEHLP_SYMBOL_PACKAGE;

typedef struct _IMAGEHLP_SYMBOLW
{
    DWORD SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOLW)
    DWORD Address;                // virtual address including dll base address
    DWORD Size;                   // estimated size of symbol, can be zero
    DWORD Flags;                  // info about the symbols, see the SYMF defines
    DWORD                       MaxNameLength;          // maximum size of symbol name in 'Name'
    WCHAR                       Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOLW, *PIMAGEHLP_SYMBOLW;

typedef struct _IMAGEHLP_SYMBOLW_PACKAGE
{
    IMAGEHLP_SYMBOLW sym;
    WCHAR            name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOLW_PACKAGE, *PIMAGEHLP_SYMBOLW_PACKAGE;

#endif

//
// module data structure
//

typedef struct _IMAGEHLP_MODULE64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    CHAR     ModuleName[32];         // module name
    CHAR     ImageName[256];         // image name
    CHAR     LoadedImageName[256];   // symbol file name
    // new elements: 07-Jun-2002
    CHAR     LoadedPdbName[256];     // pdb file name
    DWORD    CVSig;                  // Signature of the CV record in the debug directories
    CHAR     CVData[MAX_PATH * 3];   // Contents of the CV record
    DWORD    PdbSig;                 // Signature of PDB
    GUID     PdbSig70;               // Signature of PDB (VC 7 and up)
    DWORD    PdbAge;                 // DBI age of pdb
    BOOL     PdbUnmatched;           // loaded an unmatched pdb
    BOOL     DbgUnmatched;           // loaded an unmatched dbg
    BOOL     LineNumbers;            // we have line number information
    BOOL     GlobalSymbols;          // we have internal symbol information
    BOOL     TypeInfo;               // we have type information
    // new elements: 17-Dec-2003
    BOOL     SourceIndexed;          // pdb supports source server
    BOOL     Publics;                // contains public symbols
} IMAGEHLP_MODULE64, *PIMAGEHLP_MODULE64;

typedef struct _IMAGEHLP_MODULEW64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    WCHAR    ModuleName[32];         // module name
    WCHAR    ImageName[256];         // image name
    // new elements: 07-Jun-2002
    WCHAR    LoadedImageName[256];   // symbol file name
    WCHAR    LoadedPdbName[256];     // pdb file name
    DWORD    CVSig;                  // Signature of the CV record in the debug directories
    WCHAR        CVData[MAX_PATH * 3];   // Contents of the CV record
    DWORD    PdbSig;                 // Signature of PDB
    GUID     PdbSig70;               // Signature of PDB (VC 7 and up)
    DWORD    PdbAge;                 // DBI age of pdb
    BOOL     PdbUnmatched;           // loaded an unmatched pdb
    BOOL     DbgUnmatched;           // loaded an unmatched dbg
    BOOL     LineNumbers;            // we have line number information
    BOOL     GlobalSymbols;          // we have internal symbol information
    BOOL     TypeInfo;               // we have type information
    // new elements: 17-Dec-2003
    BOOL     SourceIndexed;          // pdb supports source server
    BOOL     Publics;                // contains public symbols
} IMAGEHLP_MODULEW64, *PIMAGEHLP_MODULEW64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_MODULE IMAGEHLP_MODULE64
#define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64
#define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64
#else
typedef struct _IMAGEHLP_MODULE
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    CHAR     ModuleName[32];         // module name
    CHAR     ImageName[256];         // image name
    CHAR     LoadedImageName[256];   // symbol file name
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;

typedef struct _IMAGEHLP_MODULEW
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    WCHAR    ModuleName[32];         // module name
    WCHAR    ImageName[256];         // image name
    WCHAR    LoadedImageName[256];   // symbol file name
} IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW;
#endif

//
// source file line data structure
//

typedef struct _IMAGEHLP_LINE64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINE64, *PIMAGEHLP_LINE64;

typedef struct _IMAGEHLP_LINEW64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PWSTR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINEW64, *PIMAGEHLP_LINEW64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_LINE IMAGEHLP_LINE64
#define PIMAGEHLP_LINE PIMAGEHLP_LINE64
#else
typedef struct _IMAGEHLP_LINE
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD    Address;                // first instruction of line
} IMAGEHLP_LINE, *PIMAGEHLP_LINE;

typedef struct _IMAGEHLP_LINEW
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINEW, *PIMAGEHLP_LINEW;
#endif

//
// source file structure
//

typedef struct _SOURCEFILE
{
    DWORD64  ModBase;                // base address of loaded module
    PCHAR    FileName;               // full filename of source
} SOURCEFILE, *PSOURCEFILE;

typedef struct _SOURCEFILEW
{
    DWORD64  ModBase;                // base address of loaded module
    PWSTR    FileName;               // full filename of source
} SOURCEFILEW, *PSOURCEFILEW;

//
// data structures used for registered symbol callbacks
//

#define CBA_DEFERRED_SYMBOL_LOAD_START          0x00000001
#define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE       0x00000002
#define CBA_DEFERRED_SYMBOL_LOAD_FAILURE        0x00000003
#define CBA_SYMBOLS_UNLOADED                    0x00000004
#define CBA_DUPLICATE_SYMBOL                    0x00000005
#define CBA_READ_MEMORY                         0x00000006
#define CBA_DEFERRED_SYMBOL_LOAD_CANCEL         0x00000007
#define CBA_SET_OPTIONS                         0x00000008
#define CBA_EVENT                               0x00000010
#define CBA_DEFERRED_SYMBOL_LOAD_PARTIAL        0x00000020
#define CBA_DEBUG_INFO                          0x10000000
#define CBA_SRCSRV_INFO                         0x20000000
#define CBA_SRCSRV_EVENT                        0x40000000

typedef struct _IMAGEHLP_CBA_READ_MEMORY
{
    DWORD64   addr;                                     // address to read from
    PVOID     buf;                                      // buffer to read to
    DWORD     bytes;                                    // amount of bytes to read
    DWORD*    bytesread;                                // pointer to store amount of bytes read
} IMAGEHLP_CBA_READ_MEMORY, *PIMAGEHLP_CBA_READ_MEMORY;

enum
{
    sevInfo = 0,
    sevProblem,
    sevAttn,
    sevFatal,
    sevMax  // unused
};

#define EVENT_SRCSPEW_START 100
#define EVENT_SRCSPEW       100
#define EVENT_SRCSPEW_END   199

typedef struct _IMAGEHLP_CBA_EVENT
{
    DWORD severity;                                     // values from sevInfo to sevFatal
    DWORD code;                                         // numerical code IDs the error
    PCHAR desc;                                         // may contain a text description of the error
    PVOID object;                                       // value dependant upon the error code
} IMAGEHLP_CBA_EVENT, *PIMAGEHLP_CBA_EVENT;

typedef struct _IMAGEHLP_CBA_EVENTW
{
    DWORD  severity;                                     // values from sevInfo to sevFatal
    DWORD  code;                                         // numerical code IDs the error
    PCWSTR desc;                                         // may contain a text description of the error
    PVOID  object;                                       // value dependant upon the error code
} IMAGEHLP_CBA_EVENTW, *PIMAGEHLP_CBA_EVENTW;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    CHAR     FileName[MAX_PATH];     // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
    DWORD    Flags;                     //
} IMAGEHLP_DEFERRED_SYMBOL_LOAD64, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD64;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOADW64
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOADW64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    WCHAR    FileName[MAX_PATH + 1]; // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
    DWORD    Flags;         //
} IMAGEHLP_DEFERRED_SYMBOL_LOADW64, *PIMAGEHLP_DEFERRED_SYMBOL_LOADW64;

#define DSLFLAG_MISMATCHED_PDB  0x1
#define DSLFLAG_MISMATCHED_DBG  0x2

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64
#else
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD
{
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    CHAR     FileName[MAX_PATH];     // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
} IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;
#endif

typedef struct _IMAGEHLP_DUPLICATE_SYMBOL64
{
    DWORD              SizeOfStruct;           // set to sizeof(IMAGEHLP_DUPLICATE_SYMBOL64)
    DWORD              NumberOfDups;           // number of duplicates in the Symbol array
    PIMAGEHLP_SYMBOL64 Symbol;                 // array of duplicate symbols
    DWORD              SelectedSymbol;         // symbol selected (-1 to start)
} IMAGEHLP_DUPLICATE_SYMBOL64, *PIMAGEHLP_DUPLICATE_SYMBOL64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL64
#define PIMAGEHLP_DUPLICATE_SYMBOL PIMAGEHLP_DUPLICATE_SYMBOL64
#else
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL
{
    DWORD            SizeOfStruct;           // set to sizeof(IMAGEHLP_DUPLICATE_SYMBOL)
    DWORD            NumberOfDups;           // number of duplicates in the Symbol array
    PIMAGEHLP_SYMBOL Symbol;                 // array of duplicate symbols
    DWORD            SelectedSymbol;         // symbol selected (-1 to start)
} IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL;
#endif

// If dbghelp ever needs to display graphical UI, it will use this as the parent window.

BOOL
IMAGEAPI
SymSetParentWindow(
    __in HWND hwnd
);

PCHAR
IMAGEAPI
SymSetHomeDirectory(
    __in_opt HANDLE hProcess,
    __in_opt PCSTR dir
);

PWSTR
IMAGEAPI
SymSetHomeDirectoryW(
    __in_opt HANDLE hProcess,
    __in_opt PCWSTR dir
);

PCHAR
IMAGEAPI
SymGetHomeDirectory(
    __in DWORD type,
    __out_ecount(size) PSTR dir,
    __in size_t size
);

PWSTR
IMAGEAPI
SymGetHomeDirectoryW(
    __in DWORD type,
    __out_ecount(size) PWSTR dir,
    __in size_t size
);

enum
{
    hdBase = 0, // root directory for dbghelp
    hdSym,      // where symbols are stored
    hdSrc,      // where source is stored
    hdMax       // end marker
};

typedef struct _OMAP
{
    ULONG  rva;
    ULONG  rvaTo;
} OMAP, *POMAP;

BOOL
IMAGEAPI
SymGetOmaps(
    __in HANDLE hProcess,
    __in DWORD64 BaseOfDll,
    __out POMAP* OmapTo,
    __out PDWORD64 cOmapTo,
    __out POMAP* OmapFrom,
    __out PDWORD64 cOmapFrom
);

//
// options that are set/returned by SymSetOptions() & SymGetOptions()
// these are used as a mask
//
#define SYMOPT_CASE_INSENSITIVE          0x00000001
#define SYMOPT_UNDNAME                   0x00000002
#define SYMOPT_DEFERRED_LOADS            0x00000004
#define SYMOPT_NO_CPP                    0x00000008
#define SYMOPT_LOAD_LINES                0x00000010
#define SYMOPT_OMAP_FIND_NEAREST         0x00000020
#define SYMOPT_LOAD_ANYTHING             0x00000040
#define SYMOPT_IGNORE_CVREC              0x00000080
#define SYMOPT_NO_UNQUALIFIED_LOADS      0x00000100
#define SYMOPT_FAIL_CRITICAL_ERRORS      0x00000200
#define SYMOPT_EXACT_SYMBOLS             0x00000400
#define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS    0x00000800
#define SYMOPT_IGNORE_NT_SYMPATH         0x00001000
#define SYMOPT_INCLUDE_32BIT_MODULES     0x00002000
#define SYMOPT_PUBLICS_ONLY              0x00004000
#define SYMOPT_NO_PUBLICS                0x00008000
#define SYMOPT_AUTO_PUBLICS              0x00010000
#define SYMOPT_NO_IMAGE_SEARCH           0x00020000
#define SYMOPT_SECURE                    0x00040000
#define SYMOPT_NO_PROMPTS                0x00080000
#define SYMOPT_OVERWRITE                 0x00100000
#define SYMOPT_IGNORE_IMAGEDIR           0x00200000
#define SYMOPT_FLAT_DIRECTORY            0x00400000
#define SYMOPT_FAVOR_COMPRESSED          0x00800000
#define SYMOPT_ALLOW_ZERO_ADDRESS        0x01000000
#define SYMOPT_DISABLE_SYMSRV_AUTODETECT 0x02000000

#define SYMOPT_DEBUG                     0x80000000

DWORD
IMAGEAPI
SymSetOptions(
    __in DWORD   SymOptions
);

DWORD
IMAGEAPI
SymGetOptions(
    VOID
);

BOOL
IMAGEAPI
SymCleanup(
    __in HANDLE hProcess
);

BOOL
IMAGEAPI
SymMatchString(
    __in PCSTR string,
    __in PCSTR expression,
    __in BOOL fCase
);

BOOL
IMAGEAPI
SymMatchStringA(
    __in PCSTR string,
    __in PCSTR expression,
    __in BOOL fCase
);

BOOL
IMAGEAPI
SymMatchStringW(
    __in PCWSTR string,
    __in PCWSTR expression,
    __in BOOL fCase
);

typedef BOOL
(CALLBACK* PSYM_ENUMSOURCEFILES_CALLBACK)(
    __in PSOURCEFILE pSourceFile,
    __in_opt PVOID UserContext
);

// for backwards compatibility - don't use this
#define PSYM_ENUMSOURCFILES_CALLBACK PSYM_ENUMSOURCEFILES_CALLBACK

BOOL
IMAGEAPI
SymEnumSourceFiles(
    __in HANDLE hProcess,
    __in ULONG64 ModBase,
    __in_opt PCSTR Mask,
    __in PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMSOURCEFILES_CALLBACKW)(
    __in PSOURCEFILEW pSourceFile,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSourceFilesW(
    __in HANDLE hProcess,
    __in ULONG64 ModBase,
    __in_opt PCWSTR Mask,
    __in PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumerateModules64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
);
#endif

BOOL
IMAGEAPI
EnumerateLoadedModulesEx(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
EnumerateLoadedModulesExW(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
EnumerateLoadedModules64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
);
#endif

PVOID
IMAGEAPI
SymFunctionTableAccess64(
    __in HANDLE hProcess,
    __in DWORD64 AddrBase
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
);
#endif

BOOL
IMAGEAPI
SymGetUnwindInfo(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_bcount_opt(*Size) PVOID Buffer,
    __inout PULONG Size
);

BOOL
IMAGEAPI
SymGetModuleInfo64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULE64 ModuleInfo
);

BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
);

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
);
#endif

DWORD64
IMAGEAPI
SymGetModuleBase64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
);
#endif

typedef struct _SRCCODEINFO
{
    DWORD   SizeOfStruct;           // set to sizeof(SRCCODEINFO)
    PVOID   Key;                    // not used
    DWORD64 ModBase;                // base address of module this applies to
    CHAR    Obj[MAX_PATH + 1];      // the object file within the module
    CHAR    FileName[MAX_PATH + 1]; // full filename
    DWORD   LineNumber;             // line number in file
    DWORD64 Address;                // first instruction of line
} SRCCODEINFO, *PSRCCODEINFO;

typedef struct _SRCCODEINFOW
{
    DWORD   SizeOfStruct;           // set to sizeof(SRCCODEINFO)
    PVOID   Key;                    // not used
    DWORD64 ModBase;                // base address of module this applies to
    WCHAR   Obj[MAX_PATH + 1];      // the object file within the module
    WCHAR   FileName[MAX_PATH + 1]; // full filename
    DWORD   LineNumber;             // line number in file
    DWORD64 Address;                // first instruction of line
} SRCCODEINFOW, *PSRCCODEINFOW;

typedef BOOL
(CALLBACK* PSYM_ENUMLINES_CALLBACK)(
    __in PSRCCODEINFO LineInfo,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumLines(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Obj,
    __in_opt PCSTR File,
    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMLINES_CALLBACKW)(
    __in PSRCCODEINFOW LineInfo,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumLinesW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Obj,
    __in_opt PCWSTR File,
    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymGetLineFromAddr64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINE64 Line64
);

BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    __in HANDLE hProcess,
    __in DWORD64 dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINEW64 Line
);

BOOL
IMAGEAPI
SymEnumSourceLines(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Obj,
    __in_opt PCSTR File,
    __in_opt DWORD Line,
    __in DWORD Flags,
    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSourceLinesW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Obj,
    __in_opt PCWSTR File,
    __in_opt DWORD Line,
    __in DWORD Flags,
    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,
    __in_opt PVOID UserContext
);

// flags for SymEnumSourceLines

#define ESLFLAG_FULLPATH        0x1
#define ESLFLAG_NEAREST         0x2
#define ESLFLAG_PREV            0x4
#define ESLFLAG_NEXT            0x8

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINE Line
);

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINEW Line
);
#endif

BOOL
IMAGEAPI
SymGetLineFromName64(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE64 Line
);

BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
);
#endif

BOOL
IMAGEAPI
SymGetLineNext64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE64 Line
);

BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
);

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
);
#endif

BOOL
IMAGEAPI
SymGetLinePrev64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE64 Line
);

BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
);

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
);
#endif

ULONG
IMAGEAPI
SymGetFileLineOffsets64(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in PCSTR FileName,
    __out_ecount(BufferLines) PDWORD64 Buffer,
    __in ULONG BufferLines
);

BOOL
IMAGEAPI
SymMatchFileName(
    __in PCSTR FileName,
    __in PCSTR Match,
    __deref_opt_out PSTR* FileNameStop,
    __deref_opt_out PSTR* MatchStop
);

BOOL
IMAGEAPI
SymMatchFileNameW(
    __in PCWSTR FileName,
    __in PCWSTR Match,
    __deref_opt_out PWSTR* FileNameStop,
    __deref_opt_out PWSTR* MatchStop
);

BOOL
IMAGEAPI
SymGetSourceFile(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Params,
    __in PCSTR FileSpec,
    __out_ecount(Size) PSTR FilePath,
    __in DWORD Size
);

BOOL
IMAGEAPI
SymGetSourceFileW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Params,
    __in PCWSTR FileSpec,
    __out_ecount(Size) PWSTR FilePath,
    __in DWORD Size
);

BOOL
IMAGEAPI
SymGetSourceFileToken(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PCSTR FileSpec,
    __deref_out PVOID* Token,
    __out DWORD* Size
);

BOOL
IMAGEAPI
SymGetSourceFileTokenW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PCWSTR FileSpec,
    __deref_out PVOID* Token,
    __out DWORD* Size
);

BOOL
IMAGEAPI
SymGetSourceFileFromToken(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCSTR Params,
    __out_ecount(Size) PSTR FilePath,
    __in DWORD Size
);

BOOL
IMAGEAPI
SymGetSourceFileFromTokenW(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCWSTR Params,
    __out_ecount(Size) PWSTR FilePath,
    __in DWORD Size
);

BOOL
IMAGEAPI
SymGetSourceVarFromToken(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCSTR Params,
    __in PCSTR VarName,
    __out_ecount(Size) PSTR Value,
    __in DWORD Size
);

BOOL
IMAGEAPI
SymGetSourceVarFromTokenW(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCWSTR Params,
    __in PCWSTR VarName,
    __out_ecount(Size) PWSTR Value,
    __in DWORD Size
);

typedef BOOL (CALLBACK* PENUMSOURCEFILETOKENSCALLBACK)(__in PVOID token,  __in size_t size);

BOOL
IMAGEAPI
SymEnumSourceFileTokens(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PENUMSOURCEFILETOKENSCALLBACK Callback
);

BOOL
IMAGEAPI
SymInitialize(
    __in HANDLE hProcess,
    __in_opt PCSTR UserSearchPath,
    __in BOOL fInvadeProcess
);

BOOL
IMAGEAPI
SymInitializeW(
    __in HANDLE hProcess,
    __in_opt PCWSTR UserSearchPath,
    __in BOOL fInvadeProcess
);

BOOL
IMAGEAPI
SymGetSearchPath(
    __in HANDLE hProcess,
    __out_ecount(SearchPathLength) PSTR SearchPath,
    __in DWORD SearchPathLength
);

BOOL
IMAGEAPI
SymGetSearchPathW(
    __in HANDLE hProcess,
    __out_ecount(SearchPathLength) PWSTR SearchPath,
    __in DWORD SearchPathLength
);

BOOL
IMAGEAPI
SymSetSearchPath(
    __in HANDLE hProcess,
    __in_opt PCSTR SearchPath
);

BOOL
IMAGEAPI
SymSetSearchPathW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SearchPath
);

#define SLMFLAG_VIRTUAL     0x1
#define SLMFLAG_ALT_INDEX   0x2
#define SLMFLAG_NO_SYMBOLS  0x4

DWORD64
IMAGEAPI
SymLoadModuleEx(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in DWORD DllSize,
    __in_opt PMODLOAD_DATA Data,
    __in_opt DWORD Flags
);

DWORD64
IMAGEAPI
SymLoadModuleExW(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCWSTR ImageName,
    __in_opt PCWSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in DWORD DllSize,
    __in_opt PMODLOAD_DATA Data,
    __in_opt DWORD Flags
);

BOOL
IMAGEAPI
SymUnloadModule64(
    __in HANDLE hProcess,
    __in DWORD64 BaseOfDll
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
);
#endif

BOOL
IMAGEAPI
SymUnDName64(
    __in PIMAGEHLP_SYMBOL64 sym,            // Symbol to undecorate
    __out_ecount(UnDecNameLength) PSTR UnDecName,   // Buffer to store undecorated name in
    __in DWORD UnDecNameLength              // Size of the buffer
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,              // Symbol to undecorate
    __out_ecount(UnDecNameLength) PSTR UnDecName,   // Buffer to store undecorated name in
    __in DWORD UnDecNameLength              // Size of the buffer
);
#endif

BOOL
IMAGEAPI
SymRegisterCallback64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
);

BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
);

BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback64(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
);
#endif


typedef struct _IMAGEHLP_SYMBOL_SRC
{
    DWORD sizeofstruct;
    DWORD type;
    char  file[MAX_PATH];
} IMAGEHLP_SYMBOL_SRC, *PIMAGEHLP_SYMBOL_SRC;

typedef struct _MODULE_TYPE_INFO   // AKA TYPTYP
{
    USHORT      dataLength;
    USHORT      leaf;
    BYTE        data[1];
} MODULE_TYPE_INFO, *PMODULE_TYPE_INFO;

typedef struct _SYMBOL_INFO
{
    ULONG       SizeOfStruct;
    ULONG       TypeIndex;        // Type Index of symbol
    ULONG64     Reserved[2];
    ULONG       Index;
    ULONG       Size;
    ULONG64     ModBase;          // Base Address of module comtaining this symbol
    ULONG       Flags;
    ULONG64     Value;            // Value of symbol, ValuePresent should be 1
    ULONG64     Address;          // Address of symbol including base address of module
    ULONG       Register;         // register holding value or pointer to value
    ULONG       Scope;            // scope of the symbol
    ULONG       Tag;              // pdb classification
    ULONG       NameLen;          // Actual length of name
    ULONG       MaxNameLen;
    CHAR        Name[1];          // Name of symbol
} SYMBOL_INFO, *PSYMBOL_INFO;

typedef struct _SYMBOL_INFO_PACKAGE
{
    SYMBOL_INFO si;
    CHAR        name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGE, *PSYMBOL_INFO_PACKAGE;

typedef struct _SYMBOL_INFOW
{
    ULONG       SizeOfStruct;
    ULONG       TypeIndex;        // Type Index of symbol
    ULONG64     Reserved[2];
    ULONG       Index;
    ULONG       Size;
    ULONG64     ModBase;          // Base Address of module comtaining this symbol
    ULONG       Flags;
    ULONG64     Value;            // Value of symbol, ValuePresent should be 1
    ULONG64     Address;          // Address of symbol including base address of module
    ULONG       Register;         // register holding value or pointer to value
    ULONG       Scope;            // scope of the symbol
    ULONG       Tag;              // pdb classification
    ULONG       NameLen;          // Actual length of name
    ULONG       MaxNameLen;
    WCHAR       Name[1];          // Name of symbol
} SYMBOL_INFOW, *PSYMBOL_INFOW;

typedef struct _SYMBOL_INFO_PACKAGEW
{
    SYMBOL_INFOW si;
    WCHAR        name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGEW, *PSYMBOL_INFO_PACKAGEW;

typedef struct _IMAGEHLP_STACK_FRAME
{
    ULONG64 InstructionOffset;
    ULONG64 ReturnOffset;
    ULONG64 FrameOffset;
    ULONG64 StackOffset;
    ULONG64 BackingStoreOffset;
    ULONG64 FuncTableEntry;
    ULONG64 Params[4];
    ULONG64 Reserved[5];
    BOOL    Virtual;
    ULONG   Reserved2;
} IMAGEHLP_STACK_FRAME, *PIMAGEHLP_STACK_FRAME;

typedef VOID IMAGEHLP_CONTEXT, *PIMAGEHLP_CONTEXT;


BOOL
IMAGEAPI
SymSetContext(
    __in HANDLE hProcess,
    __in PIMAGEHLP_STACK_FRAME StackFrame,
    __in_opt PIMAGEHLP_CONTEXT Context
);

BOOL
IMAGEAPI
SymSetScopeFromAddr(
    __in HANDLE hProcess,
    __in ULONG64 Address
);

BOOL
IMAGEAPI
SymSetScopeFromIndex(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index
);

typedef BOOL
(CALLBACK* PSYM_ENUMPROCESSES_CALLBACK)(
    __in HANDLE hProcess,
    __in PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumProcesses(
    __in PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback,
    __in PVOID UserContext
);

BOOL
IMAGEAPI
SymFromAddr(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_opt PDWORD64 Displacement,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymFromAddrW(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_opt PDWORD64 Displacement,
    __inout PSYMBOL_INFOW Symbol
);

BOOL
IMAGEAPI
SymFromToken(
    __in HANDLE hProcess,
    __in DWORD64 Base,
    __in DWORD Token,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymFromTokenW(
    __in HANDLE hProcess,
    __in DWORD64 Base,
    __in DWORD Token,
    __inout PSYMBOL_INFOW Symbol
);

BOOL
IMAGEAPI
SymNext(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFO si
);

BOOL
IMAGEAPI
SymNextW(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFOW siw
);

BOOL
IMAGEAPI
SymPrev(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFO si
);

BOOL
IMAGEAPI
SymPrevW(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFOW siw
);

// While SymFromName will provide a symbol from a name,
// SymEnumSymbols can provide the same matching information
// for ALL symbols with a matching name, even regular
// expressions.  That way you can search across modules
// and differentiate between identically named symbols.

BOOL
IMAGEAPI
SymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymFromNameW(
    __in HANDLE hProcess,
    __in PCWSTR Name,
    __inout PSYMBOL_INFOW Symbol
);

typedef BOOL
(CALLBACK* PSYM_ENUMERATESYMBOLS_CALLBACK)(
    __in PSYMBOL_INFO pSymInfo,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSymbols(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR Mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

typedef BOOL
(CALLBACK* PSYM_ENUMERATESYMBOLS_CALLBACKW)(
    __in PSYMBOL_INFOW pSymInfo,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSymbolsW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR Mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSymbolsForAddr(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumSymbolsForAddrW(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

#define SYMSEARCH_MASKOBJS      0x01    // used internally to implement other APIs
#define SYMSEARCH_RECURSE       0X02    // recurse scopes
#define SYMSEARCH_GLOBALSONLY   0X04    // search only for global symbols
#define SYMSEARCH_ALLITEMS      0X08    // search for everything in the pdb, not just normal scoped symbols

BOOL
IMAGEAPI
SymSearch(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt DWORD Index,
    __in_opt DWORD SymTag,
    __in_opt PCSTR Mask,
    __in_opt DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext,
    __in DWORD Options
);

BOOL
IMAGEAPI
SymSearchW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt DWORD Index,
    __in_opt DWORD SymTag,
    __in_opt PCWSTR Mask,
    __in_opt DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext,
    __in DWORD Options
);

BOOL
IMAGEAPI
SymGetScope(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymGetScopeW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFOW Symbol
);

BOOL
IMAGEAPI
SymFromIndex(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymFromIndexW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFOW Symbol
);

typedef enum _IMAGEHLP_SYMBOL_TYPE_INFO
{
    TI_GET_SYMTAG,
    TI_GET_SYMNAME,
    TI_GET_LENGTH,
    TI_GET_TYPE,
    TI_GET_TYPEID,
    TI_GET_BASETYPE,
    TI_GET_ARRAYINDEXTYPEID,
    TI_FINDCHILDREN,
    TI_GET_DATAKIND,
    TI_GET_ADDRESSOFFSET,
    TI_GET_OFFSET,
    TI_GET_VALUE,
    TI_GET_COUNT,
    TI_GET_CHILDRENCOUNT,
    TI_GET_BITPOSITION,
    TI_GET_VIRTUALBASECLASS,
    TI_GET_VIRTUALTABLESHAPEID,
    TI_GET_VIRTUALBASEPOINTEROFFSET,
    TI_GET_CLASSPARENTID,
    TI_GET_NESTED,
    TI_GET_SYMINDEX,
    TI_GET_LEXICALPARENT,
    TI_GET_ADDRESS,
    TI_GET_THISADJUST,
    TI_GET_UDTKIND,
    TI_IS_EQUIV_TO,
    TI_GET_CALLING_CONVENTION,
    TI_IS_CLOSE_EQUIV_TO,
    TI_GTIEX_REQS_VALID,
    TI_GET_VIRTUALBASEOFFSET,
    TI_GET_VIRTUALBASEDISPINDEX,
    TI_GET_IS_REFERENCE,
    TI_GET_INDIRECTVIRTUALBASECLASS,
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX,
} IMAGEHLP_SYMBOL_TYPE_INFO;

typedef struct _TI_FINDCHILDREN_PARAMS
{
    ULONG Count;
    ULONG Start;
    ULONG ChildId[1];
} TI_FINDCHILDREN_PARAMS;

BOOL
IMAGEAPI
SymGetTypeInfo(
    __in HANDLE hProcess,
    __in DWORD64 ModBase,
    __in ULONG TypeId,
    __in IMAGEHLP_SYMBOL_TYPE_INFO GetType,
    __out PVOID pInfo
);

#define IMAGEHLP_GET_TYPE_INFO_UNCACHED 0x00000001
#define IMAGEHLP_GET_TYPE_INFO_CHILDREN 0x00000002

typedef struct _IMAGEHLP_GET_TYPE_INFO_PARAMS
{
    IN  ULONG    SizeOfStruct;
    IN  ULONG    Flags;
    IN  ULONG    NumIds;
    IN  PULONG   TypeIds;
    IN  ULONG64  TagFilter;
    IN  ULONG    NumReqs;
    IN  IMAGEHLP_SYMBOL_TYPE_INFO* ReqKinds;
    IN  PULONG_PTR ReqOffsets;
    IN  PULONG   ReqSizes;
    IN  ULONG_PTR ReqStride;
    IN  ULONG_PTR BufferSize;
    OUT PVOID    Buffer;
    OUT ULONG    EntriesMatched;
    OUT ULONG    EntriesFilled;
    OUT ULONG64  TagsFound;
    OUT ULONG64  AllReqsValid;
    IN  ULONG    NumReqsValid;
    OUT PULONG64 ReqsValid OPTIONAL;
} IMAGEHLP_GET_TYPE_INFO_PARAMS, *PIMAGEHLP_GET_TYPE_INFO_PARAMS;

BOOL
IMAGEAPI
SymGetTypeInfoEx(
    __in HANDLE hProcess,
    __in DWORD64 ModBase,
    __inout PIMAGEHLP_GET_TYPE_INFO_PARAMS Params
);

BOOL
IMAGEAPI
SymEnumTypes(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumTypesW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumTypesByName(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymEnumTypesByNameW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

BOOL
IMAGEAPI
SymGetTypeFromName(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCSTR Name,
    __inout PSYMBOL_INFO Symbol
);

BOOL
IMAGEAPI
SymGetTypeFromNameW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCWSTR Name,
    __inout PSYMBOL_INFOW Symbol
);

BOOL
IMAGEAPI
SymAddSymbol(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCSTR Name,
    __in DWORD64 Address,
    __in DWORD Size,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymAddSymbolW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCWSTR Name,
    __in DWORD64 Address,
    __in DWORD Size,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymDeleteSymbol(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR Name,
    __in DWORD64 Address,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymDeleteSymbolW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR Name,
    __in DWORD64 Address,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymRefreshModuleList(
    __in HANDLE hProcess
);

BOOL
IMAGEAPI
SymAddSourceStream(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR StreamFile,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
);

typedef BOOL (WINAPI* SYMADDSOURCESTREAM)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);

BOOL
IMAGEAPI
SymAddSourceStreamA(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR StreamFile,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
);

typedef BOOL (WINAPI* SYMADDSOURCESTREAMA)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);

BOOL
IMAGEAPI
SymAddSourceStreamW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR FileSpec,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
);

BOOL
IMAGEAPI
SymSrvIsStoreW(
    __in_opt HANDLE hProcess,
    __in PCWSTR path
);

BOOL
IMAGEAPI
SymSrvIsStore(
    __in_opt HANDLE hProcess,
    __in PCSTR path
);

PCSTR
IMAGEAPI
SymSrvDeltaName(
    __in HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR Type,
    __in PCSTR File1,
    __in PCSTR File2
);

PCWSTR
IMAGEAPI
SymSrvDeltaNameW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Type,
    __in PCWSTR File1,
    __in PCWSTR File2
);

PCSTR
IMAGEAPI
SymSrvGetSupplement(
    __in HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR Node,
    __in PCSTR File
);

PCWSTR
IMAGEAPI
SymSrvGetSupplementW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Node,
    __in PCWSTR File
);

BOOL
IMAGEAPI
SymSrvGetFileIndexes(
    __in PCSTR File,
    __out GUID* Id,
    __out PDWORD Val1,
    __out_opt PDWORD Val2,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymSrvGetFileIndexesW(
    __in PCWSTR File,
    __out GUID* Id,
    __out PDWORD Val1,
    __out_opt PDWORD Val2,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymSrvGetFileIndexStringW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SrvPath,
    __in PCWSTR File,
    __out_ecount(Size) PWSTR Index,
    __in size_t Size,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymSrvGetFileIndexString(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR File,
    __out_ecount(Size) PSTR Index,
    __in size_t Size,
    __in DWORD Flags
);

typedef struct
{
    DWORD sizeofstruct;
    char file[MAX_PATH + 1];
    BOOL  stripped;
    DWORD timestamp;
    DWORD size;
    char dbgfile[MAX_PATH + 1];
    char pdbfile[MAX_PATH + 1];
    GUID  guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFO, *PSYMSRV_INDEX_INFO;

typedef struct
{
    DWORD sizeofstruct;
    WCHAR file[MAX_PATH + 1];
    BOOL  stripped;
    DWORD timestamp;
    DWORD size;
    WCHAR dbgfile[MAX_PATH + 1];
    WCHAR pdbfile[MAX_PATH + 1];
    GUID  guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFOW, *PSYMSRV_INDEX_INFOW;

BOOL
IMAGEAPI
SymSrvGetFileIndexInfo(
    __in PCSTR File,
    __out PSYMSRV_INDEX_INFO Info,
    __in DWORD Flags
);

BOOL
IMAGEAPI
SymSrvGetFileIndexInfoW(
    __in PCWSTR File,
    __out PSYMSRV_INDEX_INFOW Info,
    __in DWORD Flags
);

PCSTR
IMAGEAPI
SymSrvStoreSupplement(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR Node,
    __in PCSTR File,
    __in DWORD Flags
);

PCWSTR
IMAGEAPI
SymSrvStoreSupplementW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Node,
    __in PCWSTR File,
    __in DWORD Flags
);

PCSTR
IMAGEAPI
SymSrvStoreFile(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR File,
    __in DWORD Flags
);

PCWSTR
IMAGEAPI
SymSrvStoreFileW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SrvPath,
    __in PCWSTR File,
    __in DWORD Flags
);

// used by SymGetSymbolFile's "Type" parameter

enum
{
    sfImage = 0,
    sfDbg,
    sfPdb,
    sfMpd,
    sfMax
};

BOOL
IMAGEAPI
SymGetSymbolFile(
    __in_opt HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR ImageFile,
    __in DWORD Type,
    __out_ecount(cSymbolFile) PSTR SymbolFile,
    __in size_t cSymbolFile,
    __out_ecount(cDbgFile) PSTR DbgFile,
    __in size_t cDbgFile
);

BOOL
IMAGEAPI
SymGetSymbolFileW(
    __in_opt HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR ImageFile,
    __in DWORD Type,
    __out_ecount(cSymbolFile) PWSTR SymbolFile,
    __in size_t cSymbolFile,
    __out_ecount(cDbgFile) PWSTR DbgFile,
    __in size_t cDbgFile
);

//
// Full user-mode dump creation.
//

typedef BOOL (WINAPI* PDBGHELP_CREATE_USER_DUMP_CALLBACK)(
    __in DWORD DataType,
    __in PVOID* Data,
    __out LPDWORD DataLength,
    __in_opt PVOID UserData
);

BOOL
WINAPI
DbgHelpCreateUserDump(
    __in_opt LPCSTR FileName,
    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,
    __in_opt PVOID UserData
);

BOOL
WINAPI
DbgHelpCreateUserDumpW(
    __in_opt LPCWSTR FileName,
    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,
    __in_opt PVOID UserData
);

// -----------------------------------------------------------------
// The following 4 legacy APIs are fully supported, but newer
// ones are recommended.  SymFromName and SymFromAddr provide
// much more detailed info on the returned symbol.

BOOL
IMAGEAPI
SymGetSymFromAddr64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out_opt PDWORD64 pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL64  Symbol
);


#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
);
#endif

// While following two APIs will provide a symbol from a name,
// SymEnumSymbols can provide the same matching information
// for ALL symbols with a matching name, even regular
// expressions.  That way you can search across modules
// and differentiate between identically named symbols.

BOOL
IMAGEAPI
SymGetSymFromName64(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL64 Symbol
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
);
#endif


// Symbol server exports

typedef BOOL (WINAPI* PSYMBOLSERVERPROC)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERPROCA)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERPROCW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERBYINDEXPROC)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERBYINDEXPROCA)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERBYINDEXPROCW)(PCWSTR, PCWSTR, PCWSTR, PWSTR);
typedef BOOL (WINAPI* PSYMBOLSERVEROPENPROC)(VOID);
typedef BOOL (WINAPI* PSYMBOLSERVERCLOSEPROC)(VOID);
typedef BOOL (WINAPI* PSYMBOLSERVERSETOPTIONSPROC)(UINT_PTR, ULONG64);
typedef BOOL (WINAPI* PSYMBOLSERVERSETOPTIONSWPROC)(UINT_PTR, ULONG64);
typedef BOOL (CALLBACK WINAPI* PSYMBOLSERVERCALLBACKPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);
typedef UINT_PTR(WINAPI* PSYMBOLSERVERGETOPTIONSPROC)();
typedef BOOL (WINAPI* PSYMBOLSERVERPINGPROC)(PCSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERPINGPROCA)(PCSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERPINGPROCW)(PCWSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERGETVERSION)(LPAPI_VERSION);
typedef BOOL (WINAPI* PSYMBOLSERVERDELTANAME)(PCSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERDELTANAMEW)(PCWSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERGETSUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERGETSUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERSTORESUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t, DWORD);
typedef BOOL (WINAPI* PSYMBOLSERVERSTORESUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI* PSYMBOLSERVERGETINDEXSTRING)(PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERGETINDEXSTRINGW)(PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI* PSYMBOLSERVERSTOREFILE)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR, size_t, DWORD);
typedef BOOL (WINAPI* PSYMBOLSERVERSTOREFILEW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI* PSYMBOLSERVERISSTORE)(PCSTR);
typedef BOOL (WINAPI* PSYMBOLSERVERISSTOREW)(PCWSTR);
typedef DWORD (WINAPI* PSYMBOLSERVERVERSION)();
typedef BOOL (CALLBACK WINAPI* PSYMBOLSERVERMESSAGEPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);

#define SYMSRV_VERSION              2

#define SSRVOPT_CALLBACK            0x00000001
#define SSRVOPT_DWORD               0x00000002
#define SSRVOPT_DWORDPTR            0x00000004
#define SSRVOPT_GUIDPTR             0x00000008
#define SSRVOPT_OLDGUIDPTR          0x00000010
#define SSRVOPT_UNATTENDED          0x00000020
#define SSRVOPT_NOCOPY              0x00000040
#define SSRVOPT_GETPATH             0x00000040
#define SSRVOPT_PARENTWIN           0x00000080
#define SSRVOPT_PARAMTYPE           0x00000100
#define SSRVOPT_SECURE              0x00000200
#define SSRVOPT_TRACE               0x00000400
#define SSRVOPT_SETCONTEXT          0x00000800
#define SSRVOPT_PROXY               0x00001000
#define SSRVOPT_DOWNSTREAM_STORE    0x00002000
#define SSRVOPT_OVERWRITE           0x00004000
#define SSRVOPT_RESETTOU            0x00008000
#define SSRVOPT_CALLBACKW           0x00010000
#define SSRVOPT_FLAT_DEFAULT_STORE  0x00020000
#define SSRVOPT_PROXYW              0x00040000
#define SSRVOPT_MESSAGE             0x00080000
#define SSRVOPT_SERVICE             0x00100000   // deprecated
#define SSRVOPT_FAVOR_COMPRESSED    0x00200000
#define SSRVOPT_STRING              0x00400000
#define SSRVOPT_WINHTTP             0x00800000
#define SSRVOPT_WININET             0x01000000

#define SSRVOPT_MAX                 0x0100000

#define SSRVOPT_RESET               ((ULONG_PTR)-1)


#define NUM_SSRVOPTS                30

#define SSRVACTION_TRACE        1
#define SSRVACTION_QUERYCANCEL  2
#define SSRVACTION_EVENT        3
#define SSRVACTION_EVENTW       4
#define SSRVACTION_SIZE         5

#define SYMSTOREOPT_COMPRESS        0x01
#define SYMSTOREOPT_OVERWRITE       0x02
#define SYMSTOREOPT_RETURNINDEX     0x04
#define SYMSTOREOPT_POINTER         0x08
#define SYMSTOREOPT_ALT_INDEX       0x10
#define SYMSTOREOPT_UNICODE         0x20
#define SYMSTOREOPT_PASS_IF_EXISTS  0x40

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymInitialize                     SymInitializeW
#define SymAddSymbol                      SymAddSymbolW
#define SymDeleteSymbol                   SymDeleteSymbolW
#define SearchTreeForFile                 SearchTreeForFileW
#define UnDecorateSymbolName              UnDecorateSymbolNameW
#define SymGetLineFromName64              SymGetLineFromNameW64
#define SymGetLineFromAddr64              SymGetLineFromAddrW64
#define SymGetLineNext64                  SymGetLineNextW64
#define SymGetLinePrev64                  SymGetLinePrevW64
#define SymFromName                       SymFromNameW
#define SymFindExecutableImage            SymFindExecutableImageW
#define FindExecutableImageEx             FindExecutableImageExW
#define SymSearch                         SymSearchW
#define SymEnumLines                      SymEnumLinesW
#define SymEnumSourceLines                SymEnumSourceLinesW
#define SymGetTypeFromName                SymGetTypeFromNameW
#define SymEnumSymbolsForAddr             SymEnumSymbolsForAddrW
#define SymFromAddr                       SymFromAddrW
#define SymMatchString                    SymMatchStringW
#define SymEnumSourceFiles                SymEnumSourceFilesW
#define SymEnumSymbols                    SymEnumSymbolsW
#define SymLoadModuleEx                   SymLoadModuleExW
#define SymSetSearchPath                  SymSetSearchPathW
#define SymGetSearchPath                  SymGetSearchPathW
#define EnumDirTree                       EnumDirTreeW
#define SymFromToken                      SymFromTokenW
#define SymFromIndex                      SymFromIndexW
#define SymGetScope                       SymGetScopeW
#define SymNext                           SymNextW
#define SymPrev                           SymPrevW
#define SymEnumTypes                      SymEnumTypesW
#define SymEnumTypesByName                SymEnumTypesByNameW
#define SymRegisterCallback64             SymRegisterCallbackW64
#define SymFindDebugInfoFile              SymFindDebugInfoFileW
#define FindDebugInfoFileEx               FindDebugInfoFileExW
#define SymFindFileInPath                 SymFindFileInPathW
#define SymEnumerateModules64             SymEnumerateModulesW64
#define SymSetHomeDirectory               SymSetHomeDirectoryW
#define SymGetHomeDirectory               SymGetHomeDirectoryW
#define SymGetSourceFile                  SymGetSourceFileW
#define SymGetSourceFileToken             SymGetSourceFileTokenW
#define SymGetSourceFileFromToken         SymGetSourceFileFromTokenW
#define SymGetSourceVarFromToken          SymGetSourceVarFromTokenW
#define SymGetSourceFileToken             SymGetSourceFileTokenW
#define SymGetFileLineOffsets64           SymGetFileLineOffsetsW64
#define SymFindFileInPath                 SymFindFileInPathW
#define SymMatchFileName                  SymMatchFileNameW
#define SymGetSourceFileFromToken         SymGetSourceFileFromTokenW
#define SymGetSourceVarFromToken          SymGetSourceVarFromTokenW
#define SymGetModuleInfo64                SymGetModuleInfoW64
#define SymSrvIsStore                     SymSrvIsStoreW
#define SymSrvDeltaName                   SymSrvDeltaNameW
#define SymSrvGetSupplement               SymSrvGetSupplementW
#define SymSrvStoreSupplement             SymSrvStoreSupplementW
#define SymSrvGetFileIndexes              SymSrvGetFileIndexes
#define SymSrvGetFileIndexString          SymSrvGetFileIndexStringW
#define SymSrvStoreFile                   SymSrvStoreFileW
#define SymGetSymbolFile                  SymGetSymbolFileW
#define EnumerateLoadedModules64          EnumerateLoadedModulesW64
#define EnumerateLoadedModulesEx          EnumerateLoadedModulesExW
#define SymSrvGetFileIndexInfo            SymSrvGetFileIndexInfoW

#define IMAGEHLP_LINE64                   IMAGEHLP_LINEW64
#define PIMAGEHLP_LINE64                  PIMAGEHLP_LINEW64
#define SYMBOL_INFO                       SYMBOL_INFOW
#define PSYMBOL_INFO                      PSYMBOL_INFOW
#define SYMBOL_INFO_PACKAGE               SYMBOL_INFO_PACKAGEW
#define PSYMBOL_INFO_PACKAGE              PSYMBOL_INFO_PACKAGEW
#define FIND_EXE_FILE_CALLBACK            FIND_EXE_FILE_CALLBACKW
#define PFIND_EXE_FILE_CALLBACK           PFIND_EXE_FILE_CALLBACKW
#define SYM_ENUMERATESYMBOLS_CALLBACK     SYM_ENUMERATESYMBOLS_CALLBACKW
#define PSYM_ENUMERATESYMBOLS_CALLBACK    PSYM_ENUMERATESYMBOLS_CALLBACKW
#define SRCCODEINFO                       SRCCODEINFOW
#define PSRCCODEINFO                      PSRCCODEINFOW
#define SOURCEFILE                        SOURCEFILEW
#define PSOURCEFILE                       PSOURCEFILEW
#define SYM_ENUMSOURECFILES_CALLBACK      SYM_ENUMSOURCEFILES_CALLBACKW
#define PSYM_ENUMSOURCEFILES_CALLBACK     PSYM_ENUMSOURECFILES_CALLBACKW
#define IMAGEHLP_CBA_EVENT                IMAGEHLP_CBA_EVENTW
#define PIMAGEHLP_CBA_EVENT               PIMAGEHLP_CBA_EVENTW
#define PENUMDIRTREE_CALLBACK             PENUMDIRTREE_CALLBACKW
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD64   IMAGEHLP_DEFERRED_SYMBOL_LOADW64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD64  PIMAGEHLP_DEFERRED_SYMBOL_LOADW64
#define PFIND_DEBUG_FILE_CALLBACK         PFIND_DEBUG_FILE_CALLBACKW
#define PFINDFILEINPATHCALLBACK           PFINDFILEINPATHCALLBACKW
#define IMAGEHLP_MODULE64                 IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULE64                PIMAGEHLP_MODULEW64
#define SYMSRV_INDEX_INFO                 SYMSRV_INDEX_INFOW
#define PSYMSRV_INDEX_INFO                PSYMSRV_INDEX_INFOW

#define PSYMBOLSERVERPROC                 PSYMBOLSERVERPROCW
#define PSYMBOLSERVERPINGPROC             PSYMBOLSERVERPINGPROCW
#endif

// -----------------------------------------------------------------
// The following APIs exist only for backwards compatibility
// with a pre-release version documented in an MSDN release.

// You should use SymFindFileInPath if you want to maintain
// future compatibility.

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
FindFileInPath(
    __in HANDLE hprocess,
    __in PCSTR SearchPath,
    __in PCSTR FileName,
    __in PVOID id,
    __in DWORD two,
    __in DWORD three,
    __in DWORD flags,
    __out_ecount(MAX_PATH + 1) PSTR FilePath
);

// You should use SymFindFileInPath if you want to maintain
// future compatibility.

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
FindFileInSearchPath(
    __in HANDLE hprocess,
    __in PCSTR SearchPath,
    __in PCSTR FileName,
    __in DWORD one,
    __in DWORD two,
    __in DWORD three,
    __out_ecount(MAX_PATH + 1) PSTR FilePath
);

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
SymEnumSym(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
SymEnumerateSymbols64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
);


#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
DBHLP_DEPRECIATED
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
);

DBHLP_DEPRECIATED
BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
);
#endif

// use SymLoadModuleEx

DWORD64
IMAGEAPI
SymLoadModule64(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in DWORD SizeOfDll
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymLoadModule SymLoadModule64
#else
DWORD
IMAGEAPI
SymLoadModule(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD BaseOfDll,
    __in DWORD SizeOfDll
);
#endif

BOOL
IMAGEAPI
SymGetSymNext64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL64 Symbol
);

BOOL
IMAGEAPI
SymGetSymNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else
BOOL
IMAGEAPI
SymGetSymNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
);

BOOL
IMAGEAPI
SymGetSymNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
);
#endif

BOOL
IMAGEAPI
SymGetSymPrev64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL64 Symbol
);

BOOL
IMAGEAPI
SymGetSymPrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
);

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else
BOOL
IMAGEAPI
SymGetSymPrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
);

BOOL
IMAGEAPI
SymGetSymPrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
);
#endif


// These values should not be used.
// They have been replaced by SYMFLAG_ values.

#define SYMF_OMAP_GENERATED   0x00000001
#define SYMF_OMAP_MODIFIED    0x00000002
#define SYMF_REGISTER         0x00000008
#define SYMF_REGREL           0x00000010
#define SYMF_FRAMEREL         0x00000020
#define SYMF_PARAMETER        0x00000040
#define SYMF_LOCAL            0x00000080
#define SYMF_CONSTANT         0x00000100
#define SYMF_EXPORT           0x00000200
#define SYMF_FORWARDER        0x00000400
#define SYMF_FUNCTION         0x00000800
#define SYMF_VIRTUAL          0x00001000
#define SYMF_THUNK            0x00002000
#define SYMF_TLSREL           0x00004000

// These values should also not be used.
// They have been replaced by SYMFLAG_ values.

#define IMAGEHLP_SYMBOL_INFO_VALUEPRESENT          1
#define IMAGEHLP_SYMBOL_INFO_REGISTER              SYMF_REGISTER        // 0x0008
#define IMAGEHLP_SYMBOL_INFO_REGRELATIVE           SYMF_REGREL          // 0x0010
#define IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE         SYMF_FRAMEREL        // 0x0020
#define IMAGEHLP_SYMBOL_INFO_PARAMETER             SYMF_PARAMETER       // 0x0040
#define IMAGEHLP_SYMBOL_INFO_LOCAL                 SYMF_LOCAL           // 0x0080
#define IMAGEHLP_SYMBOL_INFO_CONSTANT              SYMF_CONSTANT        // 0x0100
#define IMAGEHLP_SYMBOL_FUNCTION                   SYMF_FUNCTION        // 0x0800
#define IMAGEHLP_SYMBOL_VIRTUAL                    SYMF_VIRTUAL         // 0x1000
#define IMAGEHLP_SYMBOL_THUNK                      SYMF_THUNK           // 0x2000
#define IMAGEHLP_SYMBOL_INFO_TLSRELATIVE           SYMF_TLSREL          // 0x4000

#pragma pack(pop)


#pragma pack(push,4)

#define MINIDUMP_SIGNATURE ('PMDM')
#define MINIDUMP_VERSION   (42899)
typedef DWORD RVA;
typedef ULONG64 RVA64;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR
{
    ULONG32 DataSize;
    RVA Rva;
} MINIDUMP_LOCATION_DESCRIPTOR;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR64
{
    ULONG64 DataSize;
    RVA64 Rva;
} MINIDUMP_LOCATION_DESCRIPTOR64;


typedef struct _MINIDUMP_MEMORY_DESCRIPTOR
{
    ULONG64 StartOfMemoryRange;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_MEMORY_DESCRIPTOR, *PMINIDUMP_MEMORY_DESCRIPTOR;

// DESCRIPTOR64 is used for full-memory minidumps where
// all of the raw memory is laid out sequentially at the
// end of the dump.  There is no need for individual RVAs
// as the RVA is the base RVA plus the sum of the preceeding
// data blocks.
typedef struct _MINIDUMP_MEMORY_DESCRIPTOR64
{
    ULONG64 StartOfMemoryRange;
    ULONG64 DataSize;
} MINIDUMP_MEMORY_DESCRIPTOR64, *PMINIDUMP_MEMORY_DESCRIPTOR64;


typedef struct _MINIDUMP_HEADER
{
    ULONG32 Signature;
    ULONG32 Version;
    ULONG32 NumberOfStreams;
    RVA StreamDirectoryRva;
    ULONG32 CheckSum;
    union
    {
        ULONG32 Reserved;
        ULONG32 TimeDateStamp;
    };
    ULONG64 Flags;
} MINIDUMP_HEADER, *PMINIDUMP_HEADER;

//
// The MINIDUMP_HEADER field StreamDirectoryRva points to
// an array of MINIDUMP_DIRECTORY structures.
//

typedef struct _MINIDUMP_DIRECTORY
{
    ULONG32 StreamType;
    MINIDUMP_LOCATION_DESCRIPTOR Location;
} MINIDUMP_DIRECTORY, *PMINIDUMP_DIRECTORY;


typedef struct _MINIDUMP_STRING
{
    ULONG32 Length;         // Length in bytes of the string
    WCHAR   Buffer [0];     // Variable size buffer
} MINIDUMP_STRING, *PMINIDUMP_STRING;



//
// The MINIDUMP_DIRECTORY field StreamType may be one of the following types.
// Types will be added in the future, so if a program reading the minidump
// header encounters a stream type it does not understand it should ignore
// the data altogether. Any tag above LastReservedStream will not be used by
// the system and is reserved for program-specific information.
//

typedef enum _MINIDUMP_STREAM_TYPE
{

    UnusedStream                = 0,
    ReservedStream0             = 1,
    ReservedStream1             = 2,
    ThreadListStream            = 3,
    ModuleListStream            = 4,
    MemoryListStream            = 5,
    ExceptionStream             = 6,
    SystemInfoStream            = 7,
    ThreadExListStream          = 8,
    Memory64ListStream          = 9,
    CommentStreamA              = 10,
    CommentStreamW              = 11,
    HandleDataStream            = 12,
    FunctionTableStream         = 13,
    UnloadedModuleListStream    = 14,
    MiscInfoStream              = 15,
    MemoryInfoListStream        = 16,
    ThreadInfoListStream        = 17,
    HandleOperationListStream   = 18,
    TokenStream                 = 19,

    ceStreamNull                = 0x8000,
    ceStreamSystemInfo          = 0x8001,
    ceStreamException           = 0x8002,
    ceStreamModuleList          = 0x8003,
    ceStreamProcessList         = 0x8004,
    ceStreamThreadList          = 0x8005,
    ceStreamThreadContextList   = 0x8006,
    ceStreamThreadCallStackList = 0x8007,
    ceStreamMemoryVirtualList   = 0x8008,
    ceStreamMemoryPhysicalList  = 0x8009,
    ceStreamBucketParameters    = 0x800A,
    ceStreamProcessModuleMap    = 0x800B,
    ceStreamDiagnosisList       = 0x800C,

    LastReservedStream          = 0xffff

} MINIDUMP_STREAM_TYPE;


//
// The minidump system information contains processor and
// Operating System specific information.
//

//
// CPU information is obtained from one of two places.
//
//  1) On x86 computers, CPU_INFORMATION is obtained from the CPUID
//     instruction. You must use the X86 portion of the union for X86
//     computers.
//
//  2) On non-x86 architectures, CPU_INFORMATION is obtained by calling
//     IsProcessorFeatureSupported().
//

typedef union _CPU_INFORMATION
{

    //
    // X86 platforms use CPUID function to obtain processor information.
    //

    struct
    {

        //
        // CPUID Subfunction 0, register EAX (VendorId [0]),
        // EBX (VendorId [1]) and ECX (VendorId [2]).
        //

        ULONG32 VendorId [ 3 ];

        //
        // CPUID Subfunction 1, register EAX
        //

        ULONG32 VersionInformation;

        //
        // CPUID Subfunction 1, register EDX
        //

        ULONG32 FeatureInformation;


        //
        // CPUID, Subfunction 80000001, register EBX. This will only
        // be obtained if the vendor id is "AuthenticAMD".
        //

        ULONG32 AMDExtendedCpuFeatures;

    } X86CpuInfo;

    //
    // Non-x86 platforms use processor feature flags.
    //

    struct
    {

        ULONG64 ProcessorFeatures [ 2 ];

    } OtherCpuInfo;

} CPU_INFORMATION, *PCPU_INFORMATION;

typedef struct _MINIDUMP_SYSTEM_INFO
{

    //
    // ProcessorArchitecture, ProcessorLevel and ProcessorRevision are all
    // taken from the SYSTEM_INFO structure obtained by GetSystemInfo( ).
    //

    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;

    union
    {
        USHORT Reserved0;
        struct
        {
            UCHAR NumberOfProcessors;
            UCHAR ProductType;
        };
    };

    //
    // MajorVersion, MinorVersion, BuildNumber, PlatformId and
    // CSDVersion are all taken from the OSVERSIONINFO structure
    // returned by GetVersionEx( ).
    //

    ULONG32 MajorVersion;
    ULONG32 MinorVersion;
    ULONG32 BuildNumber;
    ULONG32 PlatformId;

    //
    // RVA to a CSDVersion string in the string table.
    //

    RVA CSDVersionRva;

    union
    {
        ULONG32 Reserved1;
        struct
        {
            USHORT SuiteMask;
            USHORT Reserved2;
        };
    };

    CPU_INFORMATION Cpu;

} MINIDUMP_SYSTEM_INFO, *PMINIDUMP_SYSTEM_INFO;


//
// The minidump thread contains standard thread
// information plus an RVA to the memory for this
// thread and an RVA to the CONTEXT structure for
// this thread.
//


//
// ThreadId must be 4 bytes on all architectures.
//

C_ASSERT(sizeof(((PPROCESS_INFORMATION)0)->dwThreadId) == 4);

typedef struct _MINIDUMP_THREAD
{
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_THREAD, *PMINIDUMP_THREAD;

//
// The thread list is a container of threads.
//

typedef struct _MINIDUMP_THREAD_LIST
{
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD Threads [0];
} MINIDUMP_THREAD_LIST, *PMINIDUMP_THREAD_LIST;


typedef struct _MINIDUMP_THREAD_EX
{
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    MINIDUMP_MEMORY_DESCRIPTOR BackingStore;
} MINIDUMP_THREAD_EX, *PMINIDUMP_THREAD_EX;

//
// The thread list is a container of threads.
//

typedef struct _MINIDUMP_THREAD_EX_LIST
{
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD_EX Threads [0];
} MINIDUMP_THREAD_EX_LIST, *PMINIDUMP_THREAD_EX_LIST;


//
// The MINIDUMP_EXCEPTION is the same as EXCEPTION on Win64.
//

typedef struct _MINIDUMP_EXCEPTION
{
    ULONG32 ExceptionCode;
    ULONG32 ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG32 NumberParameters;
    ULONG32 __unusedAlignment;
    ULONG64 ExceptionInformation [ EXCEPTION_MAXIMUM_PARAMETERS ];
} MINIDUMP_EXCEPTION, *PMINIDUMP_EXCEPTION;


//
// The exception information stream contains the id of the thread that caused
// the exception (ThreadId), the exception record for the exception
// (ExceptionRecord) and an RVA to the thread context where the exception
// occured.
//

typedef struct MINIDUMP_EXCEPTION_STREAM
{
    ULONG32 ThreadId;
    ULONG32  __alignment;
    MINIDUMP_EXCEPTION ExceptionRecord;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_EXCEPTION_STREAM, *PMINIDUMP_EXCEPTION_STREAM;


//
// The MINIDUMP_MODULE contains information about a
// a specific module. It includes the CheckSum and
// the TimeDateStamp for the module so the module
// can be reloaded during the analysis phase.
//

typedef struct _MINIDUMP_MODULE
{
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
    VS_FIXEDFILEINFO VersionInfo;
    MINIDUMP_LOCATION_DESCRIPTOR CvRecord;
    MINIDUMP_LOCATION_DESCRIPTOR MiscRecord;
    ULONG64 Reserved0;                          // Reserved for future use.
    ULONG64 Reserved1;                          // Reserved for future use.
} MINIDUMP_MODULE, *PMINIDUMP_MODULE;


//
// The minidump module list is a container for modules.
//

typedef struct _MINIDUMP_MODULE_LIST
{
    ULONG32 NumberOfModules;
    MINIDUMP_MODULE Modules [ 0 ];
} MINIDUMP_MODULE_LIST, *PMINIDUMP_MODULE_LIST;


//
// Memory Ranges
//

typedef struct _MINIDUMP_MEMORY_LIST
{
    ULONG32 NumberOfMemoryRanges;
    MINIDUMP_MEMORY_DESCRIPTOR MemoryRanges [0];
} MINIDUMP_MEMORY_LIST, *PMINIDUMP_MEMORY_LIST;

typedef struct _MINIDUMP_MEMORY64_LIST
{
    ULONG64 NumberOfMemoryRanges;
    RVA64 BaseRva;
    MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges [0];
} MINIDUMP_MEMORY64_LIST, *PMINIDUMP_MEMORY64_LIST;


//
// Support for user supplied exception information.
//

typedef struct _MINIDUMP_EXCEPTION_INFORMATION
{
    DWORD ThreadId;
    PEXCEPTION_POINTERS ExceptionPointers;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION;

typedef struct _MINIDUMP_EXCEPTION_INFORMATION64
{
    DWORD ThreadId;
    ULONG64 ExceptionRecord;
    ULONG64 ContextRecord;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION64, *PMINIDUMP_EXCEPTION_INFORMATION64;


//
// Support for capturing system handle state at the time of the dump.
//

// Per-handle object information varies according to
// the OS, the OS version, the processor type and
// so on.  The minidump gives a minidump identifier
// to each possible data format for identification
// purposes but does not control nor describe the actual data.
typedef enum _MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE
{
    MiniHandleObjectInformationNone,
    MiniThreadInformation1,
    MiniMutantInformation1,
    MiniMutantInformation2,
    MiniProcessInformation1,
    MiniProcessInformation2,
    MiniHandleObjectInformationTypeMax
} MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE;

typedef struct _MINIDUMP_HANDLE_OBJECT_INFORMATION
{
    RVA NextInfoRva;
    ULONG32 InfoType;
    ULONG32 SizeOfInfo;
    // Raw information follows.
} MINIDUMP_HANDLE_OBJECT_INFORMATION;

typedef struct _MINIDUMP_HANDLE_DESCRIPTOR
{
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
} MINIDUMP_HANDLE_DESCRIPTOR, *PMINIDUMP_HANDLE_DESCRIPTOR;

typedef struct _MINIDUMP_HANDLE_DESCRIPTOR_2
{
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
    RVA ObjectInfoRva;
    ULONG32 Reserved0;
} MINIDUMP_HANDLE_DESCRIPTOR_2, *PMINIDUMP_HANDLE_DESCRIPTOR_2;

// The latest MINIDUMP_HANDLE_DESCRIPTOR definition.
typedef MINIDUMP_HANDLE_DESCRIPTOR_2 MINIDUMP_HANDLE_DESCRIPTOR_N;
typedef MINIDUMP_HANDLE_DESCRIPTOR_N* PMINIDUMP_HANDLE_DESCRIPTOR_N;

typedef struct _MINIDUMP_HANDLE_DATA_STREAM
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 NumberOfDescriptors;
    ULONG32 Reserved;
} MINIDUMP_HANDLE_DATA_STREAM, *PMINIDUMP_HANDLE_DATA_STREAM;

// Some operating systems can track the last operations
// performed on a handle.  For example, Application Verifier
// can enable this for some versions of Windows.  The
// handle operation list collects handle operations
// known for the dump target.
// Each entry is an AVRF_HANDLE_OPERATION.
typedef struct _MINIDUMP_HANDLE_OPERATION_LIST
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
    ULONG32 Reserved;
} MINIDUMP_HANDLE_OPERATION_LIST, *PMINIDUMP_HANDLE_OPERATION_LIST;


//
// Support for capturing dynamic function table state at the time of the dump.
//

typedef struct _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
{
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    ULONG32 EntryCount;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_DESCRIPTOR, *PMINIDUMP_FUNCTION_TABLE_DESCRIPTOR;

typedef struct _MINIDUMP_FUNCTION_TABLE_STREAM
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 SizeOfNativeDescriptor;
    ULONG32 SizeOfFunctionEntry;
    ULONG32 NumberOfDescriptors;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_STREAM, *PMINIDUMP_FUNCTION_TABLE_STREAM;


//
// The MINIDUMP_UNLOADED_MODULE contains information about a
// a specific module that was previously loaded but no
// longer is.  This can help with diagnosing problems where
// callers attempt to call code that is no longer loaded.
//

typedef struct _MINIDUMP_UNLOADED_MODULE
{
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
} MINIDUMP_UNLOADED_MODULE, *PMINIDUMP_UNLOADED_MODULE;


//
// The minidump unloaded module list is a container for unloaded modules.
//

typedef struct _MINIDUMP_UNLOADED_MODULE_LIST
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
} MINIDUMP_UNLOADED_MODULE_LIST, *PMINIDUMP_UNLOADED_MODULE_LIST;


//
// The miscellaneous information stream contains a variety
// of small pieces of information.  A member is valid if
// it's within the available size and its corresponding
// bit is set.
//

#define MINIDUMP_MISC1_PROCESS_ID            0x00000001
#define MINIDUMP_MISC1_PROCESS_TIMES         0x00000002
#define MINIDUMP_MISC1_PROCESSOR_POWER_INFO  0x00000004
#define MINIDUMP_MISC3_PROCESS_INTEGRITY     0x00000010
#define MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS 0x00000020
#define MINIDUMP_MISC3_TIMEZONE              0x00000040
#define MINIDUMP_MISC3_PROTECTED_PROCESS     0x00000080

typedef struct _MINIDUMP_MISC_INFO
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
} MINIDUMP_MISC_INFO, *PMINIDUMP_MISC_INFO;

typedef struct _MINIDUMP_MISC_INFO_2
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
} MINIDUMP_MISC_INFO_2, *PMINIDUMP_MISC_INFO_2;

typedef struct _MINIDUMP_MISC_INFO_3
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
    ULONG32 ProcessIntegrityLevel;
    ULONG32 ProcessExecuteFlags;
    ULONG32 ProtectedProcess;
    ULONG32 TimeZoneId;
    TIME_ZONE_INFORMATION TimeZone;
} MINIDUMP_MISC_INFO_3, *PMINIDUMP_MISC_INFO_3;

// The latest MINIDUMP_MISC_INFO definition.
typedef MINIDUMP_MISC_INFO_3 MINIDUMP_MISC_INFO_N;
typedef MINIDUMP_MISC_INFO_N* PMINIDUMP_MISC_INFO_N;


//
// The memory information stream contains memory region
// description information.  This stream corresponds to
// what VirtualQuery would return for the process the
// dump was created for.
//

typedef struct _MINIDUMP_MEMORY_INFO
{
    ULONG64 BaseAddress;
    ULONG64 AllocationBase;
    ULONG32 AllocationProtect;
    ULONG32 __alignment1;
    ULONG64 RegionSize;
    ULONG32 State;
    ULONG32 Protect;
    ULONG32 Type;
    ULONG32 __alignment2;
} MINIDUMP_MEMORY_INFO, *PMINIDUMP_MEMORY_INFO;

typedef struct _MINIDUMP_MEMORY_INFO_LIST
{
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG64 NumberOfEntries;
} MINIDUMP_MEMORY_INFO_LIST, *PMINIDUMP_MEMORY_INFO_LIST;


//
// The memory information stream contains memory region
// description information.  This stream corresponds to
// what VirtualQuery would return for the process the
// dump was created for.
//

// Thread dump writer status flags.
#define MINIDUMP_THREAD_INFO_ERROR_THREAD    0x00000001
#define MINIDUMP_THREAD_INFO_WRITING_THREAD  0x00000002
#define MINIDUMP_THREAD_INFO_EXITED_THREAD   0x00000004
#define MINIDUMP_THREAD_INFO_INVALID_INFO    0x00000008
#define MINIDUMP_THREAD_INFO_INVALID_CONTEXT 0x00000010
#define MINIDUMP_THREAD_INFO_INVALID_TEB     0x00000020

typedef struct _MINIDUMP_THREAD_INFO
{
    ULONG32 ThreadId;
    ULONG32 DumpFlags;
    ULONG32 DumpError;
    ULONG32 ExitStatus;
    ULONG64 CreateTime;
    ULONG64 ExitTime;
    ULONG64 KernelTime;
    ULONG64 UserTime;
    ULONG64 StartAddress;
    ULONG64 Affinity;
} MINIDUMP_THREAD_INFO, *PMINIDUMP_THREAD_INFO;

typedef struct _MINIDUMP_THREAD_INFO_LIST
{
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG NumberOfEntries;
} MINIDUMP_THREAD_INFO_LIST, *PMINIDUMP_THREAD_INFO_LIST;

//
// Support for token information.
//
typedef struct _MINIDUMP_TOKEN_INFO_HEADER
{
    ULONG   TokenSize;   // The size of the token structure.
    ULONG   TokenId;     // The PID in NtOpenProcessToken() call or TID in NtOpenThreadToken() call.
    ULONG64 TokenHandle; // The handle value returned.
} MINIDUMP_TOKEN_INFO_HEADER, *PMINIDUMP_TOKEN_INFO_HEADER;

typedef struct _MINIDUMP_TOKEN_INFO_LIST
{
    ULONG TokenListSize;
    ULONG TokenListEntries;
    ULONG ListHeaderSize;
    ULONG ElementHeaderSize;
} MINIDUMP_TOKEN_INFO_LIST, *PMINIDUMP_TOKEN_INFO_LIST;

//
// Support for arbitrary user-defined information.
//

typedef struct _MINIDUMP_USER_RECORD
{
    ULONG32 Type;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_USER_RECORD, *PMINIDUMP_USER_RECORD;


typedef struct _MINIDUMP_USER_STREAM
{
    ULONG32 Type;
    ULONG BufferSize;
    PVOID Buffer;

} MINIDUMP_USER_STREAM, *PMINIDUMP_USER_STREAM;


typedef struct _MINIDUMP_USER_STREAM_INFORMATION
{
    ULONG UserStreamCount;
    PMINIDUMP_USER_STREAM UserStreamArray;
} MINIDUMP_USER_STREAM_INFORMATION, *PMINIDUMP_USER_STREAM_INFORMATION;

//
// Callback support.
//

typedef enum _MINIDUMP_CALLBACK_TYPE
{
    ModuleCallback,
    ThreadCallback,
    ThreadExCallback,
    IncludeThreadCallback,
    IncludeModuleCallback,
    MemoryCallback,
    CancelCallback,
    WriteKernelMinidumpCallback,
    KernelMinidumpStatusCallback,
    RemoveMemoryCallback,
    IncludeVmRegionCallback,
    IoStartCallback,
    IoWriteAllCallback,
    IoFinishCallback,
    ReadMemoryFailureCallback,
    SecondaryFlagsCallback,
} MINIDUMP_CALLBACK_TYPE;


typedef struct _MINIDUMP_THREAD_CALLBACK
{
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
} MINIDUMP_THREAD_CALLBACK, *PMINIDUMP_THREAD_CALLBACK;


typedef struct _MINIDUMP_THREAD_EX_CALLBACK
{
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
    ULONG64 BackingStoreBase;
    ULONG64 BackingStoreEnd;
} MINIDUMP_THREAD_EX_CALLBACK, *PMINIDUMP_THREAD_EX_CALLBACK;


typedef struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
    ULONG ThreadId;
} MINIDUMP_INCLUDE_THREAD_CALLBACK, *PMINIDUMP_INCLUDE_THREAD_CALLBACK;


typedef enum _THREAD_WRITE_FLAGS
{
    ThreadWriteThread            = 0x0001,
    ThreadWriteStack             = 0x0002,
    ThreadWriteContext           = 0x0004,
    ThreadWriteBackingStore      = 0x0008,
    ThreadWriteInstructionWindow = 0x0010,
    ThreadWriteThreadData        = 0x0020,
    ThreadWriteThreadInfo        = 0x0040,
} THREAD_WRITE_FLAGS;

typedef struct _MINIDUMP_MODULE_CALLBACK
{
    PWCHAR FullPath;
    ULONG64 BaseOfImage;
    ULONG SizeOfImage;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    VS_FIXEDFILEINFO VersionInfo;
    PVOID CvRecord;
    ULONG SizeOfCvRecord;
    PVOID MiscRecord;
    ULONG SizeOfMiscRecord;
} MINIDUMP_MODULE_CALLBACK, *PMINIDUMP_MODULE_CALLBACK;


typedef struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
    ULONG64 BaseOfImage;
} MINIDUMP_INCLUDE_MODULE_CALLBACK, *PMINIDUMP_INCLUDE_MODULE_CALLBACK;


typedef enum _MODULE_WRITE_FLAGS
{
    ModuleWriteModule        = 0x0001,
    ModuleWriteDataSeg       = 0x0002,
    ModuleWriteMiscRecord    = 0x0004,
    ModuleWriteCvRecord      = 0x0008,
    ModuleReferencedByMemory = 0x0010,
    ModuleWriteTlsData       = 0x0020,
    ModuleWriteCodeSegs      = 0x0040,
} MODULE_WRITE_FLAGS;


typedef struct _MINIDUMP_IO_CALLBACK
{
    HANDLE Handle;
    ULONG64 Offset;
    PVOID Buffer;
    ULONG BufferBytes;
} MINIDUMP_IO_CALLBACK, *PMINIDUMP_IO_CALLBACK;


typedef struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
    ULONG64 Offset;
    ULONG Bytes;
    HRESULT FailureStatus;
} MINIDUMP_READ_MEMORY_FAILURE_CALLBACK,
*PMINIDUMP_READ_MEMORY_FAILURE_CALLBACK;


typedef struct _MINIDUMP_CALLBACK_INPUT
{
    ULONG ProcessId;
    HANDLE ProcessHandle;
    ULONG CallbackType;
    union
    {
        HRESULT Status;
        MINIDUMP_THREAD_CALLBACK Thread;
        MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
        MINIDUMP_MODULE_CALLBACK Module;
        MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
        MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
        MINIDUMP_IO_CALLBACK Io;
        MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
        ULONG SecondaryFlags;
    };
} MINIDUMP_CALLBACK_INPUT, *PMINIDUMP_CALLBACK_INPUT;

typedef struct _MINIDUMP_CALLBACK_OUTPUT
{
    union
    {
        ULONG ModuleWriteFlags;
        ULONG ThreadWriteFlags;
        ULONG SecondaryFlags;
        struct
        {
            ULONG64 MemoryBase;
            ULONG MemorySize;
        };
        struct
        {
            BOOL CheckCancel;
            BOOL Cancel;
        };
        HANDLE Handle;
        struct
        {
            MINIDUMP_MEMORY_INFO VmRegion;
            BOOL Continue;
        };
        HRESULT Status;
    };
} MINIDUMP_CALLBACK_OUTPUT, *PMINIDUMP_CALLBACK_OUTPUT;


//
// A normal minidump contains just the information
// necessary to capture stack traces for all of the
// existing threads in a process.
//
// A minidump with data segments includes all of the data
// sections from loaded modules in order to capture
// global variable contents.  This can make the dump much
// larger if many modules have global data.
//
// A minidump with full memory includes all of the accessible
// memory in the process and can be very large.  A minidump
// with full memory always has the raw memory data at the end
// of the dump so that the initial structures in the dump can
// be mapped directly without having to include the raw
// memory information.
//
// Stack and backing store memory can be filtered to remove
// data unnecessary for stack walking.  This can improve
// compression of stacks and also deletes data that may
// be private and should not be stored in a dump.
// Memory can also be scanned to see what modules are
// referenced by stack and backing store memory to allow
// omission of other modules to reduce dump size.
// In either of these modes the ModuleReferencedByMemory flag
// is set for all modules referenced before the base
// module callbacks occur.
//
// On some operating systems a list of modules that were
// recently unloaded is kept in addition to the currently
// loaded module list.  This information can be saved in
// the dump if desired.
//
// Stack and backing store memory can be scanned for referenced
// pages in order to pick up data referenced by locals or other
// stack memory.  This can increase the size of a dump significantly.
//
// Module paths may contain undesired information such as user names
// or other important directory names so they can be stripped.  This
// option reduces the ability to locate the proper image later
// and should only be used in certain situations.
//
// Complete operating system per-process and per-thread information can
// be gathered and stored in the dump.
//
// The virtual address space can be scanned for various types
// of memory to be included in the dump.
//
// Code which is concerned with potentially private information
// getting into the minidump can set a flag that automatically
// modifies all existing and future flags to avoid placing
// unnecessary data in the dump.  Basic data, such as stack
// information, will still be included but optional data, such
// as indirect memory, will not.
//
// When doing a full memory dump it's possible to store all
// of the enumerated memory region descriptive information
// in a memory information stream.
//
// Additional thread information beyond the basic thread
// structure can be collected if desired.
//
// A minidump with code segments includes all of the code
// and code-related sections from loaded modules in order
// to capture executable content.
//
// MiniDumpWithoutAuxiliaryState turns off any secondary,
// auxiliary-supported memory gathering.
//
// MiniDumpWithFullAuxiliaryState asks any present auxiliary
// data providers to include all of their state in the dump.
// The exact set of what is provided depends on the auxiliary.
// This can be quite large.
//

typedef enum _MINIDUMP_TYPE
{
    MiniDumpNormal                         = 0x00000000,
    MiniDumpWithDataSegs                   = 0x00000001,
    MiniDumpWithFullMemory                 = 0x00000002,
    MiniDumpWithHandleData                 = 0x00000004,
    MiniDumpFilterMemory                   = 0x00000008,
    MiniDumpScanMemory                     = 0x00000010,
    MiniDumpWithUnloadedModules            = 0x00000020,
    MiniDumpWithIndirectlyReferencedMemory = 0x00000040,
    MiniDumpFilterModulePaths              = 0x00000080,
    MiniDumpWithProcessThreadData          = 0x00000100,
    MiniDumpWithPrivateReadWriteMemory     = 0x00000200,
    MiniDumpWithoutOptionalData            = 0x00000400,
    MiniDumpWithFullMemoryInfo             = 0x00000800,
    MiniDumpWithThreadInfo                 = 0x00001000,
    MiniDumpWithCodeSegs                   = 0x00002000,
    MiniDumpWithoutAuxiliaryState          = 0x00004000,
    MiniDumpWithFullAuxiliaryState         = 0x00008000,
    MiniDumpWithPrivateWriteCopyMemory     = 0x00010000,
    MiniDumpIgnoreInaccessibleMemory       = 0x00020000,
    MiniDumpWithTokenInformation           = 0x00040000,
    MiniDumpValidTypeFlags                 = 0x0007ffff,
} MINIDUMP_TYPE;

//
// In addition to the primary flags provided to
// MiniDumpWriteDump there are additional, less
// frequently used options queried via the secondary
// flags callback.
//
// MiniSecondaryWithoutPowerInfo suppresses the minidump
// query that retrieves processor power information for
// MINIDUMP_MISC_INFO.
//

typedef enum _MINIDUMP_SECONDARY_FLAGS
{
    MiniSecondaryWithoutPowerInfo = 0x00000001,

    MiniSecondaryValidFlags       = 0x00000001,
} MINIDUMP_SECONDARY_FLAGS;


//
// The minidump callback should modify the FieldsToWrite parameter to reflect
// what portions of the specified thread or module should be written to the
// file.
//

typedef
BOOL
(WINAPI* MINIDUMP_CALLBACK_ROUTINE)(
    __inout PVOID CallbackParam,
    __in    PMINIDUMP_CALLBACK_INPUT CallbackInput,
    __inout PMINIDUMP_CALLBACK_OUTPUT CallbackOutput
);

typedef struct _MINIDUMP_CALLBACK_INFORMATION
{
    MINIDUMP_CALLBACK_ROUTINE CallbackRoutine;
    PVOID CallbackParam;
} MINIDUMP_CALLBACK_INFORMATION, *PMINIDUMP_CALLBACK_INFORMATION;



//++
//
// PVOID
// RVA_TO_ADDR(
//     PVOID Mapping,
//     ULONG Rva
//     )
//
// Routine Description:
//
//     Map an RVA that is contained within a mapped file to it's associated
//     flat address.
//
// Arguments:
//
//     Mapping - Base address of mapped file containing the RVA.
//
//     Rva - An Rva to fixup.
//
// Return Values:
//
//     A pointer to the desired data.
//
//--

#define RVA_TO_ADDR(Mapping,Rva) ((PVOID)(((ULONG_PTR) (Mapping)) + (Rva)))

BOOL
WINAPI
MiniDumpWriteDump(
    __in HANDLE hProcess,
    __in DWORD ProcessId,
    __in HANDLE hFile,
    __in MINIDUMP_TYPE DumpType,
    __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,
    __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,
    __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam
);

BOOL
WINAPI
MiniDumpReadDumpStream(
    __in PVOID BaseOfDump,
    __in ULONG StreamNumber,
    __deref_out_opt PMINIDUMP_DIRECTORY* Dir,
    __deref_out_opt PVOID* StreamPointer,
    __out_opt ULONG* StreamSize
);

#pragma pack(pop)

#ifdef __cplusplus
}
#endif


#endif // _DBGHELP_




================================================
File: pluginsdk/jansson/jansson.h
================================================
/*
 * Copyright (c) 2009-2014 Petri Lehtinen <petri@digip.org>
 *
 * Jansson is free software; you can redistribute it and/or modify
 * it under the terms of the MIT license. See LICENSE for details.
 */

#ifndef JANSSON_H
#define JANSSON_H

#include <stdio.h>
#include <stdlib.h>  /* for size_t */
#include <stdarg.h>

#include "jansson_config.h"

#ifdef __cplusplus
extern "C" {
#endif

/* version */

#define JANSSON_MAJOR_VERSION  2
#define JANSSON_MINOR_VERSION  7
#define JANSSON_MICRO_VERSION  0

/* Micro version is omitted if it's 0 */
#define JANSSON_VERSION  "2.7"

/* Version as a 3-byte hex number, e.g. 0x010201 == 1.2.1. Use this
   for numeric comparisons, e.g. #if JANSSON_VERSION_HEX >= ... */
#define JANSSON_VERSION_HEX  ((JANSSON_MAJOR_VERSION << 16) |   \
                              (JANSSON_MINOR_VERSION << 8)  |   \
                              (JANSSON_MICRO_VERSION << 0))


/* types */

typedef enum
{
    JSON_OBJECT,
    JSON_ARRAY,
    JSON_STRING,
    JSON_INTEGER,
    JSON_REAL,
    JSON_TRUE,
    JSON_FALSE,
    JSON_NULL
} json_type;

typedef struct json_t
{
    json_type type;
    size_t refcount;
} json_t;

#ifndef JANSSON_USING_CMAKE /* disabled if using cmake */
#if JSON_INTEGER_IS_LONG_LONG
#ifdef _WIN32
#define JSON_INTEGER_FORMAT "I64d"
#else
#define JSON_INTEGER_FORMAT "lld"
#endif
typedef long long json_int_t;
#else
#define JSON_INTEGER_FORMAT "ld"
typedef long json_int_t;
#endif /* JSON_INTEGER_IS_LONG_LONG */
#endif

#define json_typeof(json)      ((json)->type)
#define json_is_object(json)   ((json) && json_typeof(json) == JSON_OBJECT)
#define json_is_array(json)    ((json) && json_typeof(json) == JSON_ARRAY)
#define json_is_string(json)   ((json) && json_typeof(json) == JSON_STRING)
#define json_is_integer(json)  ((json) && json_typeof(json) == JSON_INTEGER)
#define json_is_real(json)     ((json) && json_typeof(json) == JSON_REAL)
#define json_is_number(json)   (json_is_integer(json) || json_is_real(json))
#define json_is_true(json)     ((json) && json_typeof(json) == JSON_TRUE)
#define json_is_false(json)    ((json) && json_typeof(json) == JSON_FALSE)
#define json_boolean_value     json_is_true
#define json_is_boolean(json)  (json_is_true(json) || json_is_false(json))
#define json_is_null(json)     ((json) && json_typeof(json) == JSON_NULL)

/* construction, destruction, reference counting */

__declspec(dllimport) json_t* json_object(void);
__declspec(dllimport) json_t* json_array(void);
__declspec(dllimport) json_t* json_string(const char* value);
__declspec(dllimport) json_t* json_stringn(const char* value, size_t len);
__declspec(dllimport) json_t* json_string_nocheck(const char* value);
__declspec(dllimport) json_t* json_stringn_nocheck(const char* value, size_t len);
__declspec(dllimport) json_t* json_integer(json_int_t value);
__declspec(dllimport) json_t* json_real(double value);
__declspec(dllimport) json_t* json_true(void);
__declspec(dllimport) json_t* json_false(void);
#define json_boolean(val)      ((val) ? json_true() : json_false())
__declspec(dllimport) json_t* json_null(void);

static JSON_INLINE
json_t* json_incref(json_t* json)
{
    if(json && json->refcount != (size_t) - 1)
        ++json->refcount;
    return json;
}

/* do not call json_delete directly */
__declspec(dllimport) void json_delete(json_t* json);

static JSON_INLINE
void json_decref(json_t* json)
{
    if(json && json->refcount != (size_t) - 1 && --json->refcount == 0)
        json_delete(json);
}


/* error reporting */

#define JSON_ERROR_TEXT_LENGTH    160
#define JSON_ERROR_SOURCE_LENGTH   80

typedef struct
{
    int line;
    int column;
    int position;
    char source[JSON_ERROR_SOURCE_LENGTH];
    char text[JSON_ERROR_TEXT_LENGTH];
} json_error_t;


/* getters, setters, manipulation */

__declspec(dllimport) void json_object_seed(size_t seed);
__declspec(dllimport) size_t json_object_size(const json_t* object);
__declspec(dllimport) json_t* json_object_get(const json_t* object, const char* key);
__declspec(dllimport) int json_object_set_new(json_t* object, const char* key, json_t* value);
__declspec(dllimport) int json_object_set_new_nocheck(json_t* object, const char* key, json_t* value);
__declspec(dllimport) int json_object_del(json_t* object, const char* key);
__declspec(dllimport) int json_object_clear(json_t* object);
__declspec(dllimport) int json_object_update(json_t* object, json_t* other);
__declspec(dllimport) int json_object_update_existing(json_t* object, json_t* other);
__declspec(dllimport) int json_object_update_missing(json_t* object, json_t* other);
__declspec(dllimport) void* json_object_iter(json_t* object);
__declspec(dllimport) void* json_object_iter_at(json_t* object, const char* key);
__declspec(dllimport) void* json_object_key_to_iter(const char* key);
__declspec(dllimport) void* json_object_iter_next(json_t* object, void* iter);
__declspec(dllimport) const char* json_object_iter_key(void* iter);
__declspec(dllimport) json_t* json_object_iter_value(void* iter);
__declspec(dllimport) int json_object_iter_set_new(json_t* object, void* iter, json_t* value);

#define json_object_foreach(object, key, value) \
    for(key = json_object_iter_key(json_object_iter(object)); \
        key && (value = json_object_iter_value(json_object_key_to_iter(key))); \
        key = json_object_iter_key(json_object_iter_next(object, json_object_key_to_iter(key))))

#define json_array_foreach(array, index, value) \
    for(index = 0; \
        index < json_array_size(array) && (value = json_array_get(array, index)); \
        index++)

static JSON_INLINE
int json_object_set(json_t* object, const char* key, json_t* value)
{
    return json_object_set_new(object, key, json_incref(value));
}

static JSON_INLINE
int json_object_set_nocheck(json_t* object, const char* key, json_t* value)
{
    return json_object_set_new_nocheck(object, key, json_incref(value));
}

static JSON_INLINE
int json_object_iter_set(json_t* object, void* iter, json_t* value)
{
    return json_object_iter_set_new(object, iter, json_incref(value));
}

__declspec(dllimport) size_t json_array_size(const json_t* array);
__declspec(dllimport) json_t* json_array_get(const json_t* array, size_t index);
__declspec(dllimport) int json_array_set_new(json_t* array, size_t index, json_t* value);
__declspec(dllimport) int json_array_append_new(json_t* array, json_t* value);
__declspec(dllimport) int json_array_insert_new(json_t* array, size_t index, json_t* value);
__declspec(dllimport) int json_array_remove(json_t* array, size_t index);
__declspec(dllimport) int json_array_clear(json_t* array);
__declspec(dllimport) int json_array_extend(json_t* array, json_t* other);

static JSON_INLINE
int json_array_set(json_t* array, size_t ind, json_t* value)
{
    return json_array_set_new(array, ind, json_incref(value));
}

static JSON_INLINE
int json_array_append(json_t* array, json_t* value)
{
    return json_array_append_new(array, json_incref(value));
}

static JSON_INLINE
int json_array_insert(json_t* array, size_t ind, json_t* value)
{
    return json_array_insert_new(array, ind, json_incref(value));
}

__declspec(dllimport) const char* json_string_value(const json_t* string);
__declspec(dllimport) size_t json_string_length(const json_t* string);
__declspec(dllimport) json_int_t json_integer_value(const json_t* integer);
__declspec(dllimport) double json_real_value(const json_t* real);
__declspec(dllimport) double json_number_value(const json_t* json);

__declspec(dllimport) int json_string_set(json_t* string, const char* value);
__declspec(dllimport) int json_string_setn(json_t* string, const char* value, size_t len);
__declspec(dllimport) int json_string_set_nocheck(json_t* string, const char* value);
__declspec(dllimport) int json_string_setn_nocheck(json_t* string, const char* value, size_t len);
__declspec(dllimport) int json_integer_set(json_t* integer, json_int_t value);
__declspec(dllimport) int json_real_set(json_t* real, double value);

/* pack, unpack */

__declspec(dllimport) json_t* json_pack(const char* fmt, ...);
__declspec(dllimport) json_t* json_pack_ex(json_error_t* error, size_t flags, const char* fmt, ...);
__declspec(dllimport) json_t* json_vpack_ex(json_error_t* error, size_t flags, const char* fmt, va_list ap);

#define JSON_VALIDATE_ONLY  0x1
#define JSON_STRICT         0x2

__declspec(dllimport) int json_unpack(json_t* root, const char* fmt, ...);
__declspec(dllimport) int json_unpack_ex(json_t* root, json_error_t* error, size_t flags, const char* fmt, ...);
__declspec(dllimport) int json_vunpack_ex(json_t* root, json_error_t* error, size_t flags, const char* fmt, va_list ap);


/* equality */

__declspec(dllimport) int json_equal(json_t* value1, json_t* value2);


/* copying */

__declspec(dllimport) json_t* json_copy(json_t* value);
__declspec(dllimport) json_t* json_deep_copy(const json_t* value);


/* decoding */

#define JSON_REJECT_DUPLICATES  0x1
#define JSON_DISABLE_EOF_CHECK  0x2
#define JSON_DECODE_ANY         0x4
#define JSON_DECODE_INT_AS_REAL 0x8
#define JSON_ALLOW_NUL          0x10

typedef size_t (*json_load_callback_t)(void* buffer, size_t buflen, void* data);

__declspec(dllimport) json_t* json_loads(const char* input, size_t flags, json_error_t* error);
__declspec(dllimport) json_t* json_loadb(const char* buffer, size_t buflen, size_t flags, json_error_t* error);
__declspec(dllimport) json_t* json_loadf(FILE* input, size_t flags, json_error_t* error);
__declspec(dllimport) json_t* json_load_file(const char* path, size_t flags, json_error_t* error);
__declspec(dllimport) json_t* json_load_callback(json_load_callback_t callback, void* data, size_t flags, json_error_t* error);


/* encoding */

#define JSON_MAX_INDENT         0x1F
#define JSON_INDENT(n)          ((n) & JSON_MAX_INDENT)
#define JSON_COMPACT            0x20
#define JSON_ENSURE_ASCII       0x40
#define JSON_SORT_KEYS          0x80
#define JSON_PRESERVE_ORDER     0x100
#define JSON_ENCODE_ANY         0x200
#define JSON_ESCAPE_SLASH       0x400
#define JSON_REAL_PRECISION(n)  (((n) & 0x1F) << 11)

typedef int (*json_dump_callback_t)(const char* buffer, size_t size, void* data);

__declspec(dllimport) char* json_dumps(const json_t* json, size_t flags);
__declspec(dllimport) int json_dumpf(const json_t* json, FILE* output, size_t flags);
__declspec(dllimport) int json_dump_file(const json_t* json, const char* path, size_t flags);
__declspec(dllimport) int json_dump_callback(const json_t* json, json_dump_callback_t callback, void* data, size_t flags);

/* custom memory allocation */

typedef void* (*json_malloc_t)(size_t);
typedef void (*json_free_t)(void*);

__declspec(dllimport) void json_set_alloc_funcs(json_malloc_t malloc_fn, json_free_t free_fn);

#ifdef __cplusplus
}
#endif

#endif



================================================
File: pluginsdk/jansson/jansson_config.h
================================================
/*
 * Copyright (c) 2010-2014 Petri Lehtinen <petri@digip.org>
 *
 * Jansson is free software; you can redistribute it and/or modify
 * it under the terms of the MIT license. See LICENSE for details.
 *
 *
 * This file specifies a part of the site-specific configuration for
 * Jansson, namely those things that affect the public API in
 * jansson.h.
 *
 * The CMake system will generate the jansson_config.h file and
 * copy it to the build and install directories.
 */

#ifndef JANSSON_CONFIG_H
#define JANSSON_CONFIG_H

/* Define this so that we can disable scattered automake configuration in source files */
#ifndef JANSSON_USING_CMAKE
#define JANSSON_USING_CMAKE
#endif

/* Note: when using cmake, JSON_INTEGER_IS_LONG_LONG is not defined nor used,
 * as we will also check for __int64 etc types.
 * (the definition was used in the automake system) */

/* Bring in the cmake-detected defines */
#define HAVE_STDINT_H 1
/* #undef HAVE_INTTYPES_H */
/* #undef HAVE_SYS_TYPES_H */

/* Include our standard type header for the integer typedef */

#if defined(HAVE_STDINT_H)
#  include <stdint.h>
#elif defined(HAVE_INTTYPES_H)
#  include <inttypes.h>
#elif defined(HAVE_SYS_TYPES_H)
#  include <sys/types.h>
#endif


/* If your compiler supports the inline keyword in C, JSON_INLINE is
   defined to `inline', otherwise empty. In C++, the inline is always
   supported. */
#ifdef __cplusplus
#define JSON_INLINE inline
#else
#define JSON_INLINE __inline
#endif


#define json_int_t long long
#define json_strtoint _strtoi64
#define JSON_INTEGER_FORMAT "I64d"


/* If locale.h and localeconv() are available, define to 1, otherwise to 0. */
#define JSON_HAVE_LOCALECONV 1



#endif



================================================
File: pluginsdk/jansson/jansson_x64dbg.h
================================================
typedef json_t* JSON;

static JSON_INLINE
json_t* json_hex(unsigned json_int_t value)
{
    char hexvalue[20];
#ifdef _WIN64
    sprintf(hexvalue, "0x%llX", value);
#else //x64
    sprintf(hexvalue, "0x%X", value);
#endif //_WIN64
    return json_string(hexvalue);
}

static JSON_INLINE
unsigned json_int_t json_hex_value(const json_t* hex)
{
    unsigned json_int_t ret;
    const char* hexvalue;
    hexvalue = json_string_value(hex);
    if(!hexvalue)
        return 0;
#ifdef _WIN64
    sscanf(hexvalue, "0x%llX", &ret);
#else //x64
    sscanf(hexvalue, "0x%X", &ret);
#endif //_WIN64
    return ret;
}


================================================
File: pluginsdk/lz4/lz4.h
================================================
/*
   LZ4 - Fast LZ compression algorithm
   Header File
   Copyright (C) 2011-2014, Yann Collet.
   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:

       * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following disclaimer
   in the documentation and/or other materials provided with the
   distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   You can contact the author at :
   - LZ4 homepage : http://fastcompression.blogspot.com/p/lz4.html
   - LZ4 source repository : http://code.google.com/p/lz4/
*/
#ifndef _LZ4_H
#define _LZ4_H

#if defined (__cplusplus)
extern "C"
{
#endif


/**************************************
   Version
**************************************/
#define LZ4_VERSION_MAJOR    1    /* for major interface/format changes  */
#define LZ4_VERSION_MINOR    1    /* for minor interface/format changes  */
#define LZ4_VERSION_RELEASE  3    /* for tweaks, bug-fixes, or development */


/**************************************
   Compiler Options
**************************************/
#if (defined(__GNUC__) && defined(__STRICT_ANSI__)) || (defined(_MSC_VER) && !defined(__cplusplus))   /* Visual Studio */
#  define inline __inline           /* Visual C is not C99, but supports some kind of inline */
#endif


/**************************************
   Simple Functions
**************************************/

__declspec(dllimport) int LZ4_compress(const char* source, char* dest, int inputSize);
__declspec(dllimport) int LZ4_decompress_safe(const char* source, char* dest, int inputSize, int maxOutputSize);

/*
LZ4_compress() :
    Compresses 'inputSize' bytes from 'source' into 'dest'.
    Destination buffer must be already allocated,
    and must be sized to handle worst cases situations (input data not compressible)
    Worst case size evaluation is provided by function LZ4_compressBound()
    inputSize : Max supported value is LZ4_MAX_INPUT_VALUE
    return : the number of bytes written in buffer dest
             or 0 if the compression fails

LZ4_decompress_safe() :
    maxOutputSize : is the size of the destination buffer (which must be already allocated)
    return : the number of bytes decoded in the destination buffer (necessarily <= maxOutputSize)
             If the source stream is detected malformed, the function will stop decoding and return a negative result.
             This function is protected against buffer overflow exploits (never writes outside of output buffer, and never reads outside of input buffer). Therefore, it is protected against malicious data packets
*/


/**************************************
   Advanced Functions
**************************************/
#define LZ4_MAX_INPUT_SIZE        0x7E000000   /* 2 113 929 216 bytes */
#define LZ4_COMPRESSBOUND(isize)  ((unsigned int)(isize) > (unsigned int)LZ4_MAX_INPUT_SIZE ? 0 : (isize) + ((isize)/255) + 16)

/*
LZ4_compressBound() :
    Provides the maximum size that LZ4 may output in a "worst case" scenario (input data not compressible)
    primarily useful for memory allocation of output buffer.
    inline function is recommended for the general case,
    macro is also provided when result needs to be evaluated at compilation (such as stack memory allocation).

    isize  : is the input size. Max supported value is LZ4_MAX_INPUT_SIZE
    return : maximum output size in a "worst case" scenario
             or 0, if input size is too large ( > LZ4_MAX_INPUT_SIZE)
*/
__declspec(dllimport) int LZ4_compressBound(int isize);


/*
LZ4_compress_limitedOutput() :
    Compress 'inputSize' bytes from 'source' into an output buffer 'dest' of maximum size 'maxOutputSize'.
    If it cannot achieve it, compression will stop, and result of the function will be zero.
    This function never writes outside of provided output buffer.

    inputSize  : Max supported value is LZ4_MAX_INPUT_VALUE
    maxOutputSize : is the size of the destination buffer (which must be already allocated)
    return : the number of bytes written in buffer 'dest'
             or 0 if the compression fails
*/
__declspec(dllimport) int LZ4_compress_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputSize);


/*
LZ4_decompress_fast() :
    originalSize : is the original and therefore uncompressed size
    return : the number of bytes read from the source buffer (in other words, the compressed size)
             If the source stream is malformed, the function will stop decoding and return a negative result.
    note : This function is a bit faster than LZ4_decompress_safe()
           This function never writes outside of output buffers, but may read beyond input buffer in case of malicious data packet.
           Use this function preferably into a trusted environment (data to decode comes from a trusted source).
           Destination buffer must be already allocated. Its size must be a minimum of 'outputSize' bytes.
*/
__declspec(dllimport) int LZ4_decompress_fast(const char* source, char* dest, int originalSize);


/*
LZ4_decompress_safe_partial() :
    This function decompress a compressed block of size 'inputSize' at position 'source'
    into output buffer 'dest' of size 'maxOutputSize'.
    The function tries to stop decompressing operation as soon as 'targetOutputSize' has been reached,
    reducing decompression time.
    return : the number of bytes decoded in the destination buffer (necessarily <= maxOutputSize)
       Note : this number can be < 'targetOutputSize' should the compressed block to decode be smaller.
             Always control how many bytes were decoded.
             If the source stream is detected malformed, the function will stop decoding and return a negative result.
             This function never writes outside of output buffer, and never reads outside of input buffer. It is therefore protected against malicious data packets
*/
__declspec(dllimport) int LZ4_decompress_safe_partial(const char* source, char* dest, int inputSize, int targetOutputSize, int maxOutputSize);


/*
These functions are provided should you prefer to allocate memory for compression tables with your own allocation methods.
To know how much memory must be allocated for the compression tables, use :
int LZ4_sizeofState();

Note that tables must be aligned on 4-bytes boundaries, otherwise compression will fail (return code 0).

The allocated memory can be provided to the compressions functions using 'void* state' parameter.
LZ4_compress_withState() and LZ4_compress_limitedOutput_withState() are equivalent to previously described functions.
They just use the externally allocated memory area instead of allocating their own (on stack, or on heap).
*/
__declspec(dllimport) int LZ4_sizeofState(void);
__declspec(dllimport) int LZ4_compress_withState(void* state, const char* source, char* dest, int inputSize);
__declspec(dllimport) int LZ4_compress_limitedOutput_withState(void* state, const char* source, char* dest, int inputSize, int maxOutputSize);


/**************************************
   Streaming Functions
**************************************/
__declspec(dllimport) void* LZ4_create(const char* inputBuffer);
__declspec(dllimport) int   LZ4_compress_continue(void* LZ4_Data, const char* source, char* dest, int inputSize);
__declspec(dllimport) int   LZ4_compress_limitedOutput_continue(void* LZ4_Data, const char* source, char* dest, int inputSize, int maxOutputSize);
__declspec(dllimport) char* LZ4_slideInputBuffer(void* LZ4_Data);
__declspec(dllimport) int   LZ4_free(void* LZ4_Data);

/*
These functions allow the compression of dependent blocks, where each block benefits from prior 64 KB within preceding blocks.
In order to achieve this, it is necessary to start creating the LZ4 Data Structure, thanks to the function :

void* LZ4_create (const char* inputBuffer);
The result of the function is the (void*) pointer on the LZ4 Data Structure.
This pointer will be needed in all other functions.
If the pointer returned is NULL, then the allocation has failed, and compression must be aborted.
The only parameter 'const char* inputBuffer' must, obviously, point at the beginning of input buffer.
The input buffer must be already allocated, and size at least 192KB.
'inputBuffer' will also be the 'const char* source' of the first block.

All blocks are expected to lay next to each other within the input buffer, starting from 'inputBuffer'.
To compress each block, use either LZ4_compress_continue() or LZ4_compress_limitedOutput_continue().
Their behavior are identical to LZ4_compress() or LZ4_compress_limitedOutput(),
but require the LZ4 Data Structure as their first argument, and check that each block starts right after the previous one.
If next block does not begin immediately after the previous one, the compression will fail (return 0).

When it's no longer possible to lay the next block after the previous one (not enough space left into input buffer), a call to :
char* LZ4_slideInputBuffer(void* LZ4_Data);
must be performed. It will typically copy the latest 64KB of input at the beginning of input buffer.
Note that, for this function to work properly, minimum size of an input buffer must be 192KB.
==> The memory position where the next input data block must start is provided as the result of the function.

Compression can then resume, using LZ4_compress_continue() or LZ4_compress_limitedOutput_continue(), as usual.

When compression is completed, a call to LZ4_free() will release the memory used by the LZ4 Data Structure.
*/


__declspec(dllimport) int LZ4_sizeofStreamState(void);
__declspec(dllimport) int LZ4_resetStreamState(void* state, const char* inputBuffer);

/*
These functions achieve the same result as :
void* LZ4_create (const char* inputBuffer);

They are provided here to allow the user program to allocate memory using its own routines.

To know how much space must be allocated, use LZ4_sizeofStreamState();
Note also that space must be 4-bytes aligned.

Once space is allocated, you must initialize it using : LZ4_resetStreamState(void* state, const char* inputBuffer);
void* state is a pointer to the space allocated.
It must be aligned on 4-bytes boundaries, and be large enough.
The parameter 'const char* inputBuffer' must, obviously, point at the beginning of input buffer.
The input buffer must be already allocated, and size at least 192KB.
'inputBuffer' will also be the 'const char* source' of the first block.

The same space can be re-used multiple times, just by initializing it each time with LZ4_resetStreamState().
return value of LZ4_resetStreamState() must be 0 is OK.
Any other value means there was an error (typically, pointer is not aligned on 4-bytes boundaries).
*/


__declspec(dllimport) int LZ4_decompress_safe_withPrefix64k(const char* source, char* dest, int inputSize, int maxOutputSize);
__declspec(dllimport) int LZ4_decompress_fast_withPrefix64k(const char* source, char* dest, int outputSize);

/*
*_withPrefix64k() :
    These decoding functions work the same as their "normal name" versions,
    but can use up to 64KB of data in front of 'char* dest'.
    These functions are necessary to decode inter-dependant blocks.
*/


/**************************************
   Obsolete Functions
**************************************/
/*
These functions are deprecated and should no longer be used.
They are provided here for compatibility with existing user programs.
*/
__declspec(dllimport) int LZ4_uncompress(const char* source, char* dest, int outputSize);
__declspec(dllimport) int LZ4_uncompress_unknownOutputSize(const char* source, char* dest, int isize, int maxOutputSize);


#if defined (__cplusplus)
}
#endif

#endif //_LZ4_H


================================================
File: pluginsdk/lz4/lz4file.h
================================================
#ifndef _LZ4FILE_H
#define _LZ4FILE_H

typedef enum _LZ4_STATUS
{
    LZ4_SUCCESS,
    LZ4_FAILED_OPEN_INPUT,
    LZ4_FAILED_OPEN_OUTPUT,
    LZ4_NOT_ENOUGH_MEMORY,
    LZ4_INVALID_ARCHIVE,
    LZ4_CORRUPTED_ARCHIVE
} LZ4_STATUS;

#if defined (__cplusplus)
extern "C"
{
#endif

__declspec(dllimport) LZ4_STATUS LZ4_compress_file(const char* input_filename, const char* output_filename);
__declspec(dllimport) LZ4_STATUS LZ4_compress_fileW(const wchar_t* input_filename, const wchar_t* output_filename);
__declspec(dllimport) LZ4_STATUS LZ4_decompress_file(const char* input_filename, const char* output_filename);
__declspec(dllimport) LZ4_STATUS LZ4_decompress_fileW(const wchar_t* input_filename, const wchar_t* output_filename);

#if defined (__cplusplus)
}
#endif

#endif //_LZ4FILE_H


================================================
File: pluginsdk/lz4/lz4hc.h
================================================
/*
   LZ4 HC - High Compression Mode of LZ4
   Header File
   Copyright (C) 2011-2014, Yann Collet.
   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:

       * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following disclaimer
   in the documentation and/or other materials provided with the
   distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   You can contact the author at :
   - LZ4 homepage : http://fastcompression.blogspot.com/p/lz4.html
   - LZ4 source repository : http://code.google.com/p/lz4/
*/
#ifndef _LZ4HC_H
#define _LZ4HC_H

#if defined (__cplusplus)
extern "C"
{
#endif


__declspec(dllimport) int LZ4_compressHC(const char* source, char* dest, int inputSize);
/*
LZ4_compressHC :
    return : the number of bytes in compressed buffer dest
             or 0 if compression fails.
    note : destination buffer must be already allocated.
        To avoid any problem, size it to handle worst cases situations (input data not compressible)
        Worst case size evaluation is provided by function LZ4_compressBound() (see "lz4.h")
*/

__declspec(dllimport) int LZ4_compressHC_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputSize);
/*
LZ4_compress_limitedOutput() :
    Compress 'inputSize' bytes from 'source' into an output buffer 'dest' of maximum size 'maxOutputSize'.
    If it cannot achieve it, compression will stop, and result of the function will be zero.
    This function never writes outside of provided output buffer.

    inputSize  : Max supported value is 1 GB
    maxOutputSize : is maximum allowed size into the destination buffer (which must be already allocated)
    return : the number of output bytes written in buffer 'dest'
             or 0 if compression fails.
*/


__declspec(dllimport) int LZ4_compressHC2(const char* source, char* dest, int inputSize, int compressionLevel);
__declspec(dllimport) int LZ4_compressHC2_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputSize, int compressionLevel);
/*
    Same functions as above, but with programmable 'compressionLevel'.
    Recommended values are between 4 and 9, although any value between 0 and 16 will work.
    'compressionLevel'==0 means use default 'compressionLevel' value.
    Values above 16 behave the same as 16.
    Equivalent variants exist for all other compression functions below.
*/

/* Note :
Decompression functions are provided within LZ4 source code (see "lz4.h") (BSD license)
*/


/**************************************
   Using an external allocation
**************************************/
__declspec(dllimport) int LZ4_sizeofStateHC(void);
__declspec(dllimport) int LZ4_compressHC_withStateHC(void* state, const char* source, char* dest, int inputSize);
__declspec(dllimport) int LZ4_compressHC_limitedOutput_withStateHC(void* state, const char* source, char* dest, int inputSize, int maxOutputSize);

__declspec(dllimport) int LZ4_compressHC2_withStateHC(void* state, const char* source, char* dest, int inputSize, int compressionLevel);
__declspec(dllimport) int LZ4_compressHC2_limitedOutput_withStateHC(void* state, const char* source, char* dest, int inputSize, int maxOutputSize, int compressionLevel);

/*
These functions are provided should you prefer to allocate memory for compression tables with your own allocation methods.
To know how much memory must be allocated for the compression tables, use :
int LZ4_sizeofStateHC();

Note that tables must be aligned for pointer (32 or 64 bits), otherwise compression will fail (return code 0).

The allocated memory can be provided to the compressions functions using 'void* state' parameter.
LZ4_compress_withStateHC() and LZ4_compress_limitedOutput_withStateHC() are equivalent to previously described functions.
They just use the externally allocated memory area instead of allocating their own (on stack, or on heap).
*/


/**************************************
   Streaming Functions
**************************************/
__declspec(dllimport) void* LZ4_createHC(const char* inputBuffer);
__declspec(dllimport) int   LZ4_compressHC_continue(void* LZ4HC_Data, const char* source, char* dest, int inputSize);
__declspec(dllimport) int   LZ4_compressHC_limitedOutput_continue(void* LZ4HC_Data, const char* source, char* dest, int inputSize, int maxOutputSize);
__declspec(dllimport) char* LZ4_slideInputBufferHC(void* LZ4HC_Data);
__declspec(dllimport) int   LZ4_freeHC(void* LZ4HC_Data);

__declspec(dllimport) int   LZ4_compressHC2_continue(void* LZ4HC_Data, const char* source, char* dest, int inputSize, int compressionLevel);
__declspec(dllimport) int   LZ4_compressHC2_limitedOutput_continue(void* LZ4HC_Data, const char* source, char* dest, int inputSize, int maxOutputSize, int compressionLevel);

/*
These functions allow the compression of dependent blocks, where each block benefits from prior 64 KB within preceding blocks.
In order to achieve this, it is necessary to start creating the LZ4HC Data Structure, thanks to the function :

void* LZ4_createHC (const char* inputBuffer);
The result of the function is the (void*) pointer on the LZ4HC Data Structure.
This pointer will be needed in all other functions.
If the pointer returned is NULL, then the allocation has failed, and compression must be aborted.
The only parameter 'const char* inputBuffer' must, obviously, point at the beginning of input buffer.
The input buffer must be already allocated, and size at least 192KB.
'inputBuffer' will also be the 'const char* source' of the first block.

All blocks are expected to lay next to each other within the input buffer, starting from 'inputBuffer'.
To compress each block, use either LZ4_compressHC_continue() or LZ4_compressHC_limitedOutput_continue().
Their behavior are identical to LZ4_compressHC() or LZ4_compressHC_limitedOutput(),
but require the LZ4HC Data Structure as their first argument, and check that each block starts right after the previous one.
If next block does not begin immediately after the previous one, the compression will fail (return 0).

When it's no longer possible to lay the next block after the previous one (not enough space left into input buffer), a call to :
char* LZ4_slideInputBufferHC(void* LZ4HC_Data);
must be performed. It will typically copy the latest 64KB of input at the beginning of input buffer.
Note that, for this function to work properly, minimum size of an input buffer must be 192KB.
==> The memory position where the next input data block must start is provided as the result of the function.

Compression can then resume, using LZ4_compressHC_continue() or LZ4_compressHC_limitedOutput_continue(), as usual.

When compression is completed, a call to LZ4_freeHC() will release the memory used by the LZ4HC Data Structure.
*/

__declspec(dllimport) int LZ4_sizeofStreamStateHC(void);
__declspec(dllimport) int LZ4_resetStreamStateHC(void* state, const char* inputBuffer);

/*
These functions achieve the same result as :
void* LZ4_createHC (const char* inputBuffer);

They are provided here to allow the user program to allocate memory using its own routines.

To know how much space must be allocated, use LZ4_sizeofStreamStateHC();
Note also that space must be aligned for pointers (32 or 64 bits).

Once space is allocated, you must initialize it using : LZ4_resetStreamStateHC(void* state, const char* inputBuffer);
void* state is a pointer to the space allocated.
It must be aligned for pointers (32 or 64 bits), and be large enough.
The parameter 'const char* inputBuffer' must, obviously, point at the beginning of input buffer.
The input buffer must be already allocated, and size at least 192KB.
'inputBuffer' will also be the 'const char* source' of the first block.

The same space can be re-used multiple times, just by initializing it each time with LZ4_resetStreamState().
return value of LZ4_resetStreamStateHC() must be 0 is OK.
Any other value means there was an error (typically, state is not aligned for pointers (32 or 64 bits)).
*/


#if defined (__cplusplus)
}
#endif

#endif //_LZ4HC_H



================================================
File: pluginsdk/yara/yara.h
================================================
/*
Copyright (c) 2007-2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_YARA_H
#define YR_YARA_H

#include "yara/utils.h"
#include "yara/filemap.h"
#include "yara/compiler.h"
#include "yara/modules.h"
#include "yara/object.h"
#include "yara/libyara.h"
#include "yara/error.h"

#endif



================================================
File: pluginsdk/yara/yara/ahocorasick.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef _AHOCORASICK_H
#define _AHOCORASICK_H

#include "limits.h"
#include "atoms.h"
#include "types.h"


int yr_ac_create_automaton(
    YR_ARENA* arena,
    YR_AC_AUTOMATON** automaton);


int yr_ac_add_string(
    YR_ARENA* arena,
    YR_AC_AUTOMATON* automaton,
    YR_STRING* string,
    YR_ATOM_LIST_ITEM* atom);


YR_AC_STATE* yr_ac_next_state(
    YR_AC_STATE* state,
    uint8_t input);


int yr_ac_create_failure_links(
    YR_ARENA* arena,
    YR_AC_AUTOMATON* automaton);


void yr_ac_print_automaton(
    YR_AC_AUTOMATON* automaton);

#endif



================================================
File: pluginsdk/yara/yara/arena.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_ARENA_H
#define YR_ARENA_H

#include <stdint.h>
#include <stddef.h>


#define ARENA_FLAGS_FIXED_SIZE   1
#define ARENA_FLAGS_COALESCED    2
#define ARENA_FILE_VERSION       6

#define EOL ((size_t) -1)


typedef struct _YR_RELOC
{
    int32_t offset;
    struct _YR_RELOC* next;

} YR_RELOC;


typedef struct _YR_ARENA_PAGE
{

    uint8_t* new_address;
    uint8_t* address;

    size_t size;
    size_t used;

    YR_RELOC* reloc_list_head;
    YR_RELOC* reloc_list_tail;

    struct _YR_ARENA_PAGE* next;
    struct _YR_ARENA_PAGE* prev;

} YR_ARENA_PAGE;


typedef struct _YR_ARENA
{
    int flags;

    YR_ARENA_PAGE* page_list_head;
    YR_ARENA_PAGE* current_page;

} YR_ARENA;


int yr_arena_create(
    size_t initial_size,
    int flags,
    YR_ARENA** arena);


void yr_arena_destroy(
    YR_ARENA* arena);


void* yr_arena_base_address(
    YR_ARENA* arena);


void* yr_arena_next_address(
    YR_ARENA* arena,
    void* address,
    int offset);


int yr_arena_coalesce(
    YR_ARENA* arena);


int yr_arena_reserve_memory(
    YR_ARENA* arena,
    size_t size);


int yr_arena_allocate_memory(
    YR_ARENA* arena,
    size_t size,
    void** allocated_memory);


int yr_arena_allocate_struct(
    YR_ARENA* arena,
    size_t size,
    void** allocated_memory,
    ...);


int yr_arena_make_relocatable(
    YR_ARENA* arena,
    void* base,
    ...);


int yr_arena_write_data(
    YR_ARENA* arena,
    void* data,
    size_t size,
    void** written_data);


int yr_arena_write_string(
    YR_ARENA* arena,
    const char* string,
    char** written_string);


int yr_arena_append(
    YR_ARENA* target_arena,
    YR_ARENA* source_arena);


int yr_arena_save(
    YR_ARENA* arena,
    const char* filename);


int yr_arena_load(
    const char* filename,
    YR_ARENA** arena);


int yr_arena_duplicate(
    YR_ARENA* arena,
    YR_ARENA** duplicated);


void yr_arena_print(
    YR_ARENA* arena);

#endif



================================================
File: pluginsdk/yara/yara/atoms.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_ATOMS_H
#define YR_ATOMS_H

#include "limits.h"
#include "re.h"

#define ATOM_TREE_LEAF  1
#define ATOM_TREE_AND   2
#define ATOM_TREE_OR    3


typedef struct _ATOM_TREE_NODE
{
    uint8_t type;
    uint8_t atom_length;
    uint8_t atom[MAX_ATOM_LENGTH];

    uint8_t* forward_code;
    uint8_t* backward_code;

    RE_NODE* recent_nodes[MAX_ATOM_LENGTH];

    struct _ATOM_TREE_NODE* children_head;
    struct _ATOM_TREE_NODE* children_tail;
    struct _ATOM_TREE_NODE* next_sibling;

} ATOM_TREE_NODE;


typedef struct _ATOM_TREE
{
    ATOM_TREE_NODE* current_leaf;
    ATOM_TREE_NODE* root_node;

} ATOM_TREE;


typedef struct _YR_ATOM_LIST_ITEM
{
    uint8_t atom_length;
    uint8_t atom[MAX_ATOM_LENGTH];

    uint16_t backtrack;

    uint8_t* forward_code;
    uint8_t* backward_code;

    struct _YR_ATOM_LIST_ITEM* next;

} YR_ATOM_LIST_ITEM;


int yr_atoms_extract_from_re(
    RE* re,
    int flags,
    YR_ATOM_LIST_ITEM** atoms);


int yr_atoms_extract_from_string(
    uint8_t* string,
    int string_length,
    int flags,
    YR_ATOM_LIST_ITEM** atoms);


int yr_atoms_min_quality(
    YR_ATOM_LIST_ITEM* atom_list);


void yr_atoms_list_destroy(
    YR_ATOM_LIST_ITEM* list_head);

#endif



================================================
File: pluginsdk/yara/yara/compiler.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_COMPILER_H
#define YR_COMPILER_H

#include <stdio.h>
#include <setjmp.h>

#include "ahocorasick.h"
#include "arena.h"
#include "hash.h"
#include "utils.h"


#define YARA_ERROR_LEVEL_ERROR   0
#define YARA_ERROR_LEVEL_WARNING 1


typedef void (*YR_COMPILER_CALLBACK_FUNC)(
    int error_level,
    const char* file_name,
    int line_number,
    const char* message,
    void* user_data);


typedef struct _YR_COMPILER
{
    int               errors;
    int               error_line;
    int               last_error;
    int               last_error_line;
    int               last_result;

    jmp_buf           error_recovery;

    YR_ARENA*         sz_arena;
    YR_ARENA*         rules_arena;
    YR_ARENA*         strings_arena;
    YR_ARENA*         code_arena;
    YR_ARENA*         re_code_arena;
    YR_ARENA*         automaton_arena;
    YR_ARENA*         compiled_rules_arena;
    YR_ARENA*         externals_arena;
    YR_ARENA*         namespaces_arena;
    YR_ARENA*         metas_arena;

    YR_AC_AUTOMATON*  automaton;
    YR_HASH_TABLE*    rules_table;
    YR_HASH_TABLE*    objects_table;
    YR_NAMESPACE*     current_namespace;
    YR_STRING*        current_rule_strings;

    int               current_rule_flags;
    int               namespaces_count;

    int8_t*           loop_address[MAX_LOOP_NESTING];
    char*             loop_identifier[MAX_LOOP_NESTING];
    int               loop_depth;
    int               loop_for_of_mem_offset;

    int               allow_includes;

    char*             file_name_stack[MAX_INCLUDE_DEPTH];
    int               file_name_stack_ptr;

    FILE*             file_stack[MAX_INCLUDE_DEPTH];
    int               file_stack_ptr;

    char              last_error_extra_info[MAX_COMPILER_ERROR_EXTRA_INFO];

    char              lex_buf[LEX_BUF_SIZE];
    char*             lex_buf_ptr;
    unsigned short    lex_buf_len;

    char              include_base_dir[MAX_PATH];
    void*             user_data;

    YR_COMPILER_CALLBACK_FUNC  callback;

} YR_COMPILER;


#define yr_compiler_set_error_extra_info(compiler, info) \
    strlcpy( \
        compiler->last_error_extra_info, \
        info, \
        sizeof(compiler->last_error_extra_info)); \
 

#define yr_compiler_set_error_extra_info_fmt(compiler, fmt, ...) \
    snprintf( \
        compiler->last_error_extra_info, \
        sizeof(compiler->last_error_extra_info), \
        fmt, __VA_ARGS__);


int _yr_compiler_push_file(
    YR_COMPILER* compiler,
    FILE* fh);


FILE* _yr_compiler_pop_file(
    YR_COMPILER* compiler);


int _yr_compiler_push_file_name(
    YR_COMPILER* compiler,
    const char* file_name);


void _yr_compiler_pop_file_name(
    YR_COMPILER* compiler);


YR_API int yr_compiler_create(
    YR_COMPILER** compiler);


YR_API void yr_compiler_destroy(
    YR_COMPILER* compiler);


YR_API void yr_compiler_set_callback(
    YR_COMPILER* compiler,
    YR_COMPILER_CALLBACK_FUNC callback,
    void* user_data);


YR_API int yr_compiler_add_file(
    YR_COMPILER* compiler,
    FILE* rules_file,
    const char* namespace_,
    const char* file_name);


YR_API int yr_compiler_add_string(
    YR_COMPILER* compiler,
    const char* rules_string,
    const char* namespace_);


YR_API char* yr_compiler_get_error_message(
    YR_COMPILER* compiler,
    char* buffer,
    int buffer_size);


YR_API char* yr_compiler_get_current_file_name(
    YR_COMPILER* context);


YR_API int yr_compiler_define_integer_variable(
    YR_COMPILER* compiler,
    const char* identifier,
    int64_t value);


YR_API int yr_compiler_define_boolean_variable(
    YR_COMPILER* compiler,
    const char* identifier,
    int value);


YR_API int yr_compiler_define_float_variable(
    YR_COMPILER* compiler,
    const char* identifier,
    double value);


YR_API int yr_compiler_define_string_variable(
    YR_COMPILER* compiler,
    const char* identifier,
    const char* value);


YR_API int yr_compiler_get_rules(
    YR_COMPILER* compiler,
    YR_RULES** rules);


#endif



================================================
File: pluginsdk/yara/yara/elf.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef _ELF_H
#define _ELF_H

#include <stdint.h>


// 32-bit ELF base types

typedef uint32_t elf32_addr_t;
typedef uint16_t elf32_half_t;
typedef uint32_t elf32_off_t;
typedef uint32_t elf32_word_t;

// 64-bit ELF base types

typedef uint64_t elf64_addr_t;
typedef uint16_t elf64_half_t;
typedef uint64_t elf64_off_t;
typedef uint32_t elf64_word_t;
typedef uint64_t elf64_xword_t;

#define ELF_MAGIC       0x464C457F

#define ELF_ET_NONE     0x0000  // no type
#define ELF_ET_REL      0x0001  // relocatable
#define ELF_ET_EXEC     0x0002  // executeable
#define ELF_ET_DYN      0x0003  // Shared-Object-File
#define ELF_ET_CORE     0x0004  // Corefile
#define ELF_ET_LOPROC   0xFF00  // Processor-specific
#define ELF_ET_HIPROC   0x00FF  // Processor-specific

#define ELF_EM_NONE     0x0000  // no type
#define ELF_EM_M32      0x0001  // AT&T WE 32100
#define ELF_EM_SPARC    0x0002  // SPARC
#define ELF_EM_386      0x0003  // Intel 80386
#define ELF_EM_68K      0x0004  // Motorola 68000
#define ELF_EM_88K      0x0005  // Motorola 88000
#define ELF_EM_860      0x0007  // Intel 80860
#define ELF_EM_MIPS     0x0008  // MIPS RS3000
#define ELF_EM_ARM      0x0032  // ARM
#define ELF_EM_X86_64   0x003E  // AMD/Intel x86_64

#define ELF_CLASS_NONE  0x0000
#define ELF_CLASS_32    0x0001  // 32bit file
#define ELF_CLASS_64    0x0002  // 64bit file

#define ELF_DATA_NONE   0x0000
#define ELF_DATA_2LSB   0x0001
#define ELF_DATA_2MSB   0x002


#define ELF_SHT_NULL         0     // Section header table entry unused
#define ELF_SHT_PROGBITS     1     // Program data
#define ELF_SHT_SYMTAB       2     // Symbol table
#define ELF_SHT_STRTAB       3     // String table
#define ELF_SHT_RELA         4     // Relocation entries with addends
#define ELF_SHT_HASH         5     // Symbol hash table
#define ELF_SHT_DYNAMIC      6     // Dynamic linking information
#define ELF_SHT_NOTE         7     // Notes
#define ELF_SHT_NOBITS       8     // Program space with no data (bss)
#define ELF_SHT_REL          9     // Relocation entries, no addends
#define ELF_SHT_SHLIB        10    // Reserved
#define ELF_SHT_DYNSYM       11    // Dynamic linker symbol table
#define ELF_SHT_NUM          12    // Number of defined types

#define ELF_SHF_WRITE        0x1   // Section is writable
#define ELF_SHF_ALLOC        0x2   // Section is present during execution
#define ELF_SHF_EXECINSTR    0x4   // Section contains executable instructions

#pragma pack(push,1)

typedef struct
{
    uint32_t magic;
    uint8_t _class;
    uint8_t data;
    uint8_t version;
    uint8_t pad[8];
    uint8_t nident;

} elf_ident_t;


typedef struct
{
    elf_ident_t     ident;
    elf32_half_t    type;
    elf32_half_t    machine;
    elf32_word_t    version;
    elf32_addr_t    entry;
    elf32_off_t     ph_offset;
    elf32_off_t     sh_offset;
    elf32_word_t    flags;
    elf32_half_t    header_size;
    elf32_half_t    ph_entry_size;
    elf32_half_t    ph_entry_count;
    elf32_half_t    sh_entry_size;
    elf32_half_t    sh_entry_count;
    elf32_half_t    sh_str_table_index;

} elf32_header_t;


typedef struct
{
    elf_ident_t     ident;
    elf64_half_t    type;
    elf64_half_t    machine;
    elf64_word_t    version;
    elf64_addr_t    entry;
    elf64_off_t     ph_offset;
    elf64_off_t     sh_offset;
    elf64_word_t    flags;
    elf64_half_t    header_size;
    elf64_half_t    ph_entry_size;
    elf64_half_t    ph_entry_count;
    elf64_half_t    sh_entry_size;
    elf64_half_t    sh_entry_count;
    elf64_half_t    sh_str_table_index;

} elf64_header_t;


typedef struct
{
    elf32_word_t    type;
    elf32_off_t     offset;
    elf32_addr_t    virt_addr;
    elf32_addr_t    phys_addr;
    elf32_word_t    file_size;
    elf32_word_t    mem_size;
    elf32_word_t    flags;
    elf32_word_t    alignment;

} elf32_program_header_t;


typedef struct
{
    elf64_word_t    type;
    elf64_word_t    flags;
    elf64_off_t     offset;
    elf64_addr_t    virt_addr;
    elf64_addr_t    phys_addr;
    elf64_xword_t   file_size;
    elf64_xword_t   mem_size;
    elf64_xword_t   alignment;

} elf64_program_header_t;


typedef struct
{
    elf32_word_t    name;
    elf32_word_t    type;
    elf32_word_t    flags;
    elf32_addr_t    addr;
    elf32_off_t     offset;
    elf32_word_t    size;
    elf32_word_t    link;
    elf32_word_t    info;
    elf32_word_t    align;
    elf32_word_t    entry_size;

} elf32_section_header_t;


typedef struct
{
    elf64_word_t    name;
    elf64_word_t    type;
    elf64_xword_t   flags;
    elf64_addr_t    addr;
    elf64_off_t     offset;
    elf64_xword_t   size;
    elf64_word_t    link;
    elf64_word_t    info;
    elf64_xword_t   align;
    elf64_xword_t   entry_size;

} elf64_section_header_t;


#pragma pack(pop)

#endif



================================================
File: pluginsdk/yara/yara/error.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_ERROR_H
#define YR_ERROR_H

#include <string.h>

#ifndef ERROR_SUCCESS
#define ERROR_SUCCESS                           0
#endif

#define ERROR_INSUFICIENT_MEMORY                1
#define ERROR_COULD_NOT_ATTACH_TO_PROCESS       2
#define ERROR_COULD_NOT_OPEN_FILE               3
#define ERROR_COULD_NOT_MAP_FILE                4
#define ERROR_INVALID_FILE                      6
#define ERROR_CORRUPT_FILE                      7
#define ERROR_UNSUPPORTED_FILE_VERSION          8
#define ERROR_INVALID_REGULAR_EXPRESSION        9
#define ERROR_INVALID_HEX_STRING                10
#define ERROR_SYNTAX_ERROR                      11
#define ERROR_LOOP_NESTING_LIMIT_EXCEEDED       12
#define ERROR_DUPLICATED_LOOP_IDENTIFIER        13
#define ERROR_DUPLICATED_IDENTIFIER             14
#define ERROR_DUPLICATED_TAG_IDENTIFIER         15
#define ERROR_DUPLICATED_META_IDENTIFIER        16
#define ERROR_DUPLICATED_STRING_IDENTIFIER      17
#define ERROR_UNREFERENCED_STRING               18
#define ERROR_UNDEFINED_STRING                  19
#define ERROR_UNDEFINED_IDENTIFIER              20
#define ERROR_MISPLACED_ANONYMOUS_STRING        21
#define ERROR_INCLUDES_CIRCULAR_REFERENCE       22
#define ERROR_INCLUDE_DEPTH_EXCEEDED            23
#define ERROR_WRONG_TYPE                        24
#define ERROR_EXEC_STACK_OVERFLOW               25
#define ERROR_SCAN_TIMEOUT                      26
#define ERROR_TOO_MANY_SCAN_THREADS             27
#define ERROR_CALLBACK_ERROR                    28
#define ERROR_INVALID_ARGUMENT                  29
#define ERROR_TOO_MANY_MATCHES                  30
#define ERROR_INTERNAL_FATAL_ERROR              31
#define ERROR_NESTED_FOR_OF_LOOP                32
#define ERROR_INVALID_FIELD_NAME                33
#define ERROR_UNKNOWN_MODULE                    34
#define ERROR_NOT_A_STRUCTURE                   35
#define ERROR_NOT_INDEXABLE                     36
#define ERROR_NOT_A_FUNCTION                    37
#define ERROR_INVALID_FORMAT                    38
#define ERROR_TOO_MANY_ARGUMENTS                39
#define ERROR_WRONG_ARGUMENTS                   40
#define ERROR_WRONG_RETURN_TYPE                 41
#define ERROR_DUPLICATED_STRUCTURE_MEMBER       42


#define FAIL_ON_ERROR(x) { \
  int result = (x); \
  if (result != ERROR_SUCCESS) \
    return result; \
}

#define FAIL_ON_ERROR_WITH_CLEANUP(x, cleanup) { \
  int result = (x); \
  if (result != ERROR_SUCCESS) { \
    cleanup; \
    return result; \
  } \
}

#define FAIL_ON_COMPILER_ERROR(x) { \
  compiler->last_result = (x); \
  if (compiler->last_result != ERROR_SUCCESS) \
    return compiler->last_result; \
}


#ifdef NDEBUG
#define assertf(expr, msg)  ((void)0)
#else
#define assertf(expr, msg, ...) \
    if(!(expr)) { \
      fprintf(stderr, "%s:%d: " msg "\n", __FILE__, __LINE__, ##__VA_ARGS__); \
      abort(); \
    }
#endif

#endif



================================================
File: pluginsdk/yara/yara/exec.h
================================================
/*
Copyright (c) 2013-2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_EXEC_H
#define YR_EXEC_H

#include "hash.h"
#include "scan.h"
#include "types.h"
#include "rules.h"


#define UNDEFINED           0xFFFABADAFABADAFFLL
#define IS_UNDEFINED(x)     ((size_t)(x) == (size_t) UNDEFINED)

#define OP_ERROR          0
#define OP_HALT           255

#define OP_AND            1
#define OP_OR             2
#define OP_NOT            3
#define OP_BITWISE_NOT    4
#define OP_BITWISE_AND    5
#define OP_BITWISE_OR     6
#define OP_BITWISE_XOR    7
#define OP_SHL            8
#define OP_SHR            9
#define OP_MOD            10
#define OP_INT_TO_DBL     11
#define OP_STR_TO_BOOL    12
#define OP_PUSH           13
#define OP_POP            14
#define OP_CALL           15
#define OP_OBJ_LOAD       16
#define OP_OBJ_VALUE      17
#define OP_OBJ_FIELD      18
#define OP_INDEX_ARRAY    19
#define OP_COUNT          20
#define OP_FOUND          21
#define OP_FOUND_AT       22
#define OP_FOUND_IN       23
#define OP_OFFSET         24
#define OP_OF             25
#define OP_PUSH_RULE      26
#define OP_MATCH_RULE     27
#define OP_INCR_M         28
#define OP_CLEAR_M        29
#define OP_ADD_M          30
#define OP_POP_M          31
#define OP_PUSH_M         32
#define OP_SWAPUNDEF      33
#define OP_JNUNDEF        34
#define OP_JLE            35
#define OP_FILESIZE       36
#define OP_ENTRYPOINT     37
#define OP_CONTAINS       38
#define OP_MATCHES        39
#define OP_IMPORT         40
#define OP_LOOKUP_DICT    41

#define _OP_EQ            0
#define _OP_NEQ           1
#define _OP_LT            2
#define _OP_GT            3
#define _OP_LE            4
#define _OP_GE            5
#define _OP_ADD           6
#define _OP_SUB           7
#define _OP_MUL           8
#define _OP_DIV           9
#define _OP_MINUS         10

#define OP_INT_BEGIN      100
#define OP_INT_EQ         (OP_INT_BEGIN + _OP_EQ)
#define OP_INT_NEQ        (OP_INT_BEGIN + _OP_NEQ)
#define OP_INT_LT         (OP_INT_BEGIN + _OP_LT)
#define OP_INT_GT         (OP_INT_BEGIN + _OP_GT)
#define OP_INT_LE         (OP_INT_BEGIN + _OP_LE)
#define OP_INT_GE         (OP_INT_BEGIN + _OP_GE)
#define OP_INT_ADD        (OP_INT_BEGIN + _OP_ADD)
#define OP_INT_SUB        (OP_INT_BEGIN + _OP_SUB)
#define OP_INT_MUL        (OP_INT_BEGIN + _OP_MUL)
#define OP_INT_DIV        (OP_INT_BEGIN + _OP_DIV)
#define OP_INT_MINUS      (OP_INT_BEGIN + _OP_MINUS)
#define OP_INT_END        OP_INT_MINUS

#define OP_DBL_BEGIN      120
#define OP_DBL_EQ         (OP_DBL_BEGIN + _OP_EQ)
#define OP_DBL_NEQ        (OP_DBL_BEGIN + _OP_NEQ)
#define OP_DBL_LT         (OP_DBL_BEGIN + _OP_LT)
#define OP_DBL_GT         (OP_DBL_BEGIN + _OP_GT)
#define OP_DBL_LE         (OP_DBL_BEGIN + _OP_LE)
#define OP_DBL_GE         (OP_DBL_BEGIN + _OP_GE)
#define OP_DBL_ADD        (OP_DBL_BEGIN + _OP_ADD)
#define OP_DBL_SUB        (OP_DBL_BEGIN + _OP_SUB)
#define OP_DBL_MUL        (OP_DBL_BEGIN + _OP_MUL)
#define OP_DBL_DIV        (OP_DBL_BEGIN + _OP_DIV)
#define OP_DBL_MINUS      (OP_DBL_BEGIN + _OP_MINUS)
#define OP_DBL_END        OP_DBL_MINUS

#define OP_STR_BEGIN      140
#define OP_STR_EQ         (OP_STR_BEGIN + _OP_EQ)
#define OP_STR_NEQ        (OP_STR_BEGIN + _OP_NEQ)
#define OP_STR_LT         (OP_STR_BEGIN + _OP_LT)
#define OP_STR_GT         (OP_STR_BEGIN + _OP_GT)
#define OP_STR_LE         (OP_STR_BEGIN + _OP_LE)
#define OP_STR_GE         (OP_STR_BEGIN + _OP_GE)
#define OP_STR_END        OP_STR_GE

#define IS_INT_OP(x)      ((x) >= OP_INT_BEGIN && (x) <= OP_INT_END)
#define IS_DBL_OP(x)      ((x) >= OP_DBL_BEGIN && (x) <= OP_DBL_END)
#define IS_STR_OP(x)      ((x) >= OP_STR_BEGIN && (x) <= OP_STR_END)

#define OP_READ_INT       240
#define OP_INT8           (OP_READ_INT + 0)
#define OP_INT16          (OP_READ_INT + 1)
#define OP_INT32          (OP_READ_INT + 2)
#define OP_UINT8          (OP_READ_INT + 3)
#define OP_UINT16         (OP_READ_INT + 4)
#define OP_UINT32         (OP_READ_INT + 5)
#define OP_INT8BE         (OP_READ_INT + 6)
#define OP_INT16BE        (OP_READ_INT + 7)
#define OP_INT32BE        (OP_READ_INT + 8)
#define OP_UINT8BE        (OP_READ_INT + 9)
#define OP_UINT16BE       (OP_READ_INT + 10)
#define OP_UINT32BE       (OP_READ_INT + 11)


#define OPERATION(operator, op1, op2) \
    (IS_UNDEFINED(op1) || IS_UNDEFINED(op2)) ? (UNDEFINED) : (op1 operator op2)


#define COMPARISON(operator, op1, op2) \
    (IS_UNDEFINED(op1) || IS_UNDEFINED(op2)) ? (0) : (op1 operator op2)


int yr_execute_code(
    YR_RULES* rules,
    YR_SCAN_CONTEXT* context,
    int timeout,
    time_t start_time);

#endif



================================================
File: pluginsdk/yara/yara/exefiles.h
================================================
/*
Copyright (c) 2007. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_EXEFILES_H
#define YR_EXEFILES_H

uint64_t yr_get_entry_point_offset(
    uint8_t* buffer,
    size_t buffer_length);


uint64_t yr_get_entry_point_address(
    uint8_t* buffer,
    size_t buffer_length,
    size_t base_address);

#endif



================================================
File: pluginsdk/yara/yara/filemap.h
================================================
/*
Copyright (c) 2007-2015. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_FILEMAP_H
#define YR_FILEMAP_H

#ifdef _WIN32
#include <windows.h>
#define FILE_DESCRIPTOR    HANDLE
#define off_t              int64_t
#else
#include <sys/types.h>
#define FILE_DESCRIPTOR    int
#endif

#include <stdlib.h>
#include <stdint.h>

#include "utils.h"


typedef struct _YR_MAPPED_FILE
{
    FILE_DESCRIPTOR     file;
    size_t              size;
    uint8_t*            data;
#ifdef _WIN32
    HANDLE              mapping;
#endif

} YR_MAPPED_FILE;


YR_API int yr_filemap_map(
    const char* file_path,
    YR_MAPPED_FILE* pmapped_file);


YR_API int yr_filemap_map_ex(
    const char* file_path,
    off_t offset,
    size_t size,
    YR_MAPPED_FILE* pmapped_file);


YR_API void yr_filemap_unmap(
    YR_MAPPED_FILE* pmapped_file);

#endif



================================================
File: pluginsdk/yara/yara/globals.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_GLOBALS_H
#define YR_GLOBALS_H

extern char lowercase[256];
extern char altercase[256];

#endif



================================================
File: pluginsdk/yara/yara/hash.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_HASH_H
#define YR_HASH_H


typedef struct _YR_HASH_TABLE_ENTRY
{
    char* key;
    char* ns;
    void* value;

    struct _YR_HASH_TABLE_ENTRY* next;

} YR_HASH_TABLE_ENTRY;


typedef struct _YR_HASH_TABLE
{
    int size;

    YR_HASH_TABLE_ENTRY* buckets[1];

} YR_HASH_TABLE;


typedef int (*YR_HASH_TABLE_FREE_VALUE_FUNC)(void* value);


int yr_hash_table_create(
    int size,
    YR_HASH_TABLE** table);


void yr_hash_table_destroy(
    YR_HASH_TABLE* table,
    YR_HASH_TABLE_FREE_VALUE_FUNC free_value);


void* yr_hash_table_lookup(
    YR_HASH_TABLE* table,
    const char* key,
    const char* ns);


int yr_hash_table_add(
    YR_HASH_TABLE* table,
    const char* key,
    const char* ns,
    void* value);

#endif



================================================
File: pluginsdk/yara/yara/hex_lexer.h
================================================
/*
Copyright (c) 2007. Victor M. Alvarez [plusvic@gmail.com].

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "re.h"

#undef yyparse
#undef yylex
#undef yyerror
#undef yyfatal
#undef yychar
#undef yydebug
#undef yynerrs
#undef yyget_extra
#undef yyget_lineno

#undef YY_FATAL_ERROR
#undef YY_DECL
#undef LEX_ENV

#define yyparse         hex_yyparse
#define yylex           hex_yylex
#define yyerror         hex_yyerror
#define yyfatal         hex_yyfatal
#define yychar          hex_yychar
#define yydebug         hex_yydebug
#define yynerrs         hex_yynerrs
#define yyget_extra     hex_yyget_extra
#define yyget_lineno    hex_yyget_lineno


#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

#define YY_EXTRA_TYPE RE*
#define YY_USE_CONST


typedef struct _HEX_LEX_ENVIRONMENT
{
    int token_count;
    int inside_or;
    int last_error_code;
    char last_error_message[256];

} HEX_LEX_ENVIRONMENT;


#define YY_FATAL_ERROR(msg) hex_yyfatal(yyscanner, msg)

#define LEX_ENV  ((HEX_LEX_ENVIRONMENT*) lex_env)

#include <hex_grammar.h>

#define YY_DECL int hex_yylex \
    (YYSTYPE * yylval_param , yyscan_t yyscanner, HEX_LEX_ENVIRONMENT* lex_env)


YY_EXTRA_TYPE yyget_extra(
    yyscan_t yyscanner);

int yylex(
    YYSTYPE* yylval_param,
    yyscan_t yyscanner,
    HEX_LEX_ENVIRONMENT* lex_env);

int yyparse(
    void* yyscanner,
    HEX_LEX_ENVIRONMENT* lex_env);

void yyerror(
    yyscan_t yyscanner,
    HEX_LEX_ENVIRONMENT* lex_env,
    const char* error_message);

void yyfatal(
    yyscan_t yyscanner,
    const char* error_message);

int yr_parse_hex_string(
    const char* hex_string,
    int flags,
    RE** re,
    RE_ERROR* error);



================================================
File: pluginsdk/yara/yara/lexer.h
================================================
/*
Copyright (c) 2007. Victor M. Alvarez [plusvic@gmail.com].

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "compiler.h"


#undef yyparse
#undef yylex
#undef yyerror
#undef yyfatal
#undef yychar
#undef yydebug
#undef yynerrs
#undef yyget_extra
#undef yyget_lineno

#undef YY_DECL
#undef YY_FATAL_ERROR
#undef YY_EXTRA_TYPE

#define yyparse       yara_yyparse
#define yylex         yara_yylex
#define yyerror       yara_yyerror
#define yyfatal       yara_yyfatal
#define yywarning     yara_yywarning
#define yychar        yara_yychar
#define yydebug       yara_yydebug
#define yynerrs       yara_yynerrs
#define yyget_extra   yara_yyget_extra
#define yyget_lineno  yara_yyget_lineno


#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

#ifndef YY_TYPEDEF_EXPRESSION_T
#define YY_TYPEDEF_EXPRESSION_T


// Expression type constants are powers of two because they are used as flags.
// For example:
//   CHECK_TYPE(whatever, EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT)
// The expression above is used to ensure that the type of "whatever" is either
// integer or float.

#define EXPRESSION_TYPE_BOOLEAN   1
#define EXPRESSION_TYPE_INTEGER   2
#define EXPRESSION_TYPE_STRING    4
#define EXPRESSION_TYPE_REGEXP    8
#define EXPRESSION_TYPE_OBJECT    16
#define EXPRESSION_TYPE_FLOAT     32

typedef struct _EXPRESSION
{
    int type;

    union
    {
        int64_t integer;
        YR_OBJECT* object;
    } value;

    const char* identifier;

} EXPRESSION;

union YYSTYPE;

#endif


#define YY_DECL int yylex( \
    union YYSTYPE* yylval_param, yyscan_t yyscanner, YR_COMPILER* compiler)


#define YY_FATAL_ERROR(msg) yara_yyfatal(yyscanner, msg)


#define YY_EXTRA_TYPE YR_COMPILER*
#define YY_USE_CONST


int yyget_lineno(yyscan_t yyscanner);

int yylex(
    union YYSTYPE* yylval_param,
    yyscan_t yyscanner,
    YR_COMPILER* compiler);

int yyparse(
    void* yyscanner,
    YR_COMPILER* compiler);

void yyerror(
    yyscan_t yyscanner,
    YR_COMPILER* compiler,
    const char* error_message);

void yywarning(
    yyscan_t yyscanner,
    const char* warning_message);

void yyfatal(
    yyscan_t yyscanner,
    const char* error_message);

YY_EXTRA_TYPE yyget_extra(
    yyscan_t yyscanner);

int yr_lex_parse_rules_string(
    const char* rules_string,
    YR_COMPILER* compiler);

int yr_lex_parse_rules_file(
    FILE* rules_file,
    YR_COMPILER* compiler);



================================================
File: pluginsdk/yara/yara/libyara.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_LIBYARA_H
#define YR_LIBYARA_H

#include "utils.h"

#define YR_MAJOR_VERSION   3
#define YR_MINOR_VERSION   3
#define YR_MICRO_VERSION   0

// Version as a string
#define YR_VERSION         "3.3.0"

// Version as a single 4-byte hex number, e.g. 0x030401 == 3.4.1.
#define YR_VERSION_HEX ((YR_MAJOR_VERSION << 16) | \
    (YR_MINOR_VERSION << 8) | \
    (YR_MICRO_VERSION << 0)


YR_API int yr_initialize(void);


YR_API int yr_finalize(void);


YR_API void yr_finalize_thread(void);


YR_API int yr_get_tidx(void);


YR_API void yr_set_tidx(int);

#endif



================================================
File: pluginsdk/yara/yara/limits.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_LIMITS_H
#define YR_LIMITS_H


// MAX_THREADS is the number of threads that can use a YR_RULES
// object simultaneosly. This value is limited by the number of
// bits in tidx_mask.

#define MAX_THREADS 32


#ifndef MAX_PATH
#define MAX_PATH 1024
#endif

#define MAX_COMPILER_ERROR_EXTRA_INFO   256
#define MAX_ATOM_LENGTH                 4
#define MAX_LOOP_NESTING                4
#define MAX_ARENA_PAGES                 32
#define MAX_INCLUDE_DEPTH               16
#define MAX_STRING_MATCHES              1000000
#define MAX_FUNCTION_ARGS               128
#define MAX_FAST_HEX_RE_STACK           300
#define MAX_OVERLOADED_FUNCTIONS        10
#define MAX_HEX_STRING_TOKENS           10000

#define LOOP_LOCAL_VARS                 4
#define STRING_CHAINING_THRESHOLD       200
#define LEX_BUF_SIZE                    1024


#endif



================================================
File: pluginsdk/yara/yara/mem.h
================================================
/*
Copyright (c) 2007. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_MEM_H
#define YR_MEM_H

#include <stdio.h>

#include "config.h"

#ifdef DMALLOC

#define yr_malloc malloc
#define yr_calloc calloc
#define yr_realloc realloc
#define yr_free free
#define yr_strdup strdup
#define yr_strndup strndup

#include <dmalloc.h>

#else

void* yr_calloc(
    size_t count,
    size_t size);

void* yr_malloc(
    size_t size);

void* yr_realloc(
    void* ptr,
    size_t size);

void yr_free(
    void* ptr);

char* yr_strdup(
    const char* str);

char* yr_strndup(
    const char* str, size_t n);

#endif

int yr_heap_alloc();

int yr_heap_free();

#endif



================================================
File: pluginsdk/yara/yara/modules.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_MODULES_H
#define YR_MODULES_H

#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include "utils.h"
#include "limits.h"
#include "error.h"
#include "exec.h"
#include "types.h"
#include "object.h"
#include "libyara.h"

// Concatenation that macro-expands its arguments.

#define CONCAT_ARGS(arg1, arg2) _CONCAT(arg1, arg2) // expands the arguments.
#define _CONCAT_ARGS(arg1, arg2) arg1 ## arg2       // do the actual concatenation.


#define module_declarations CONCAT_ARGS(MODULE_NAME, __declarations)
#define module_load CONCAT_ARGS(MODULE_NAME, __load)
#define module_unload CONCAT_ARGS(MODULE_NAME, __unload)
#define module_initialize CONCAT_ARGS(MODULE_NAME, __initialize)
#define module_finalize CONCAT_ARGS(MODULE_NAME, __finalize)

#define begin_declarations \
    int module_declarations(YR_OBJECT* module) { \
      YR_OBJECT* stack[64]; \
      int stack_top = 0; \
      stack[stack_top] = module;


#define end_declarations \
    return ERROR_SUCCESS; }


#define begin_struct(name) { \
    YR_OBJECT* structure; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRUCTURE, \
        name, \
        stack[stack_top], \
        &structure)); \
    assertf( \
        stack_top < sizeof(stack)/sizeof(stack[0]) - 1, \
        "too many nested structures"); \
    stack[++stack_top] = structure; \
  }


#define begin_struct_array(name) { \
    YR_OBJECT* structure; \
    YR_OBJECT* array; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_ARRAY, \
        name, \
        stack[stack_top], \
        &array)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRUCTURE, \
        name, \
        array, \
        &structure)); \
    assertf( \
        stack_top < sizeof(stack)/sizeof(stack[0]) - 1, \
        "too many nested structures"); \
    stack[++stack_top] = structure; \
  }


#define begin_struct_dictionary(name) { \
    YR_OBJECT* structure; \
    YR_OBJECT* array; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_DICTIONARY, \
        name, \
        stack[stack_top], \
        &array)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRUCTURE, \
        name, \
        array, \
        &structure)); \
    assertf( \
        stack_top < sizeof(stack)/sizeof(stack[0]) - 1, \
        "too many nested structures"); \
    stack[++stack_top] = structure; \
  }


#define end_struct(name) { \
    assert(stack[stack_top]->type == OBJECT_TYPE_STRUCTURE); \
    assertf( \
        strcmp(stack[stack_top]->identifier, name) == 0, \
        "unbalanced begin_struct/end_struct"); \
    stack_top--; \
  }


#define end_struct_array(name) end_struct(name)


#define end_struct_dictionary(name) end_struct(name)


#define declare_integer(name) { \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_INTEGER, \
        name, \
        stack[stack_top], \
        NULL)); \
  }


#define declare_integer_array(name) { \
    YR_OBJECT* array; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_ARRAY, \
        name, \
        stack[stack_top], \
        &array)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_INTEGER, \
        name, \
        array, \
        NULL)); \
  }


#define declare_integer_dictionary(name) { \
    YR_OBJECT* dict; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_DICTIONARY, \
        name, \
        stack[stack_top], \
        &dict)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_INTEGER, \
        name, \
        dict, \
        NULL)); \
  }


#define declare_float(name) { \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_FLOAT, \
        name, \
        stack[stack_top], \
        NULL)); \
  }


#define declare_float_array(name) { \
    YR_OBJECT* array; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_ARRAY, \
        name, \
        stack[stack_top], \
        &array)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_FLOAT, \
        name, \
        array, \
        NULL)); \
  }


#define declare_float_dictionary(name) { \
    YR_OBJECT* dict; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_DICTIONARY, \
        name, \
        stack[stack_top], \
        &dict)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_FLOAT, \
        name, \
        dict, \
        NULL)); \
  }


#define declare_string(name) { \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRING, \
        name, \
        stack[stack_top], \
        NULL)); \
  }


#define declare_string_array(name) { \
    YR_OBJECT* array; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_ARRAY, \
        name, \
        stack[stack_top], \
        &array)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRING, \
        name, \
        array, \
        NULL)); \
  }


#define declare_string_dictionary(name) { \
    YR_OBJECT* dict; \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_DICTIONARY, \
        name, \
        stack[stack_top], \
        &dict)); \
    FAIL_ON_ERROR(yr_object_create( \
        OBJECT_TYPE_STRING, \
        name, \
        dict, \
        NULL)); \
  }


#define declare_function(name, args_fmt, ret_fmt, func) { \
    YR_OBJECT* function; \
    FAIL_ON_ERROR(yr_object_function_create( \
        name, \
        args_fmt, \
        ret_fmt, \
        func, \
        stack[stack_top], \
        &function)); \
    }


#define define_function(func) \
    int func ( \
        void* __args, \
        YR_SCAN_CONTEXT* __context, \
        YR_OBJECT_FUNCTION* __function_obj)


#define sized_string_argument(n) \
    ((SIZED_STRING*)(size_t)((int64_t*) __args)[n-1])

#define string_argument(n) \
    (sized_string_argument(n)->c_string)

#define integer_argument(n) \
    (((int64_t*) __args)[n-1])

#define float_argument(n) \
    (((double*) __args)[n-1])

#define regexp_argument(n) \
    ((RE_CODE)((int64_t*) __args)[n-1])


#define module()        yr_object_get_root((YR_OBJECT*) __function_obj)
#define parent()        (__function_obj->parent)
#define scan_context()  (__context)


#define foreach_memory_block(context, block) \
  for (block = (context)->mem_block; \
       block != NULL; \
       block = block->next) \
 

#define first_memory_block(context) \
      (context)->mem_block


#define is_undefined(object, ...) \
    yr_object_has_undefined_value(object, __VA_ARGS__)


#define get_object(object, ...) \
    yr_object_lookup(object, 0, __VA_ARGS__)


#define get_integer(object, ...) \
    yr_object_get_integer(object, __VA_ARGS__)


#define get_float(object, ...) \
    yr_object_get_float(object, __VA_ARGS__)


#define get_string(object, ...) \
    yr_object_get_string(object, __VA_ARGS__)


#define set_integer(value, object, ...) \
    yr_object_set_integer(value, object, __VA_ARGS__)


#define set_float(value, object, ...) \
    yr_object_set_float(value, object, __VA_ARGS__)


#define set_sized_string(value, len, object, ...) \
    yr_object_set_string(value, len, object, __VA_ARGS__)


#define set_string(value, object, ...) \
    set_sized_string(value, strlen(value), object, __VA_ARGS__)


#define return_integer(integer) { \
      assertf( \
          __function_obj->return_obj->type == OBJECT_TYPE_INTEGER, \
          "return type differs from function declaration"); \
      yr_object_set_integer( \
          (integer), \
          __function_obj->return_obj, \
          NULL); \
      return ERROR_SUCCESS; \
    }


#define return_float(double_) { \
      assertf( \
          __function_obj->return_obj->type == OBJECT_TYPE_FLOAT, \
          "return type differs from function declaration"); \
      double d = (double) (double_); \
      yr_object_set_float( \
          (d != (double) UNDEFINED) ? d : NAN, \
          __function_obj->return_obj, \
          NULL); \
      return ERROR_SUCCESS; \
    }


#define return_string(string) { \
      assertf( \
          __function_obj->return_obj->type == OBJECT_TYPE_STRING, \
          "return type differs from function declaration"); \
      char* s = (char*) (string); \
      yr_object_set_string( \
          (s != (char*) UNDEFINED) ? s : NULL, \
          (s != (char*) UNDEFINED) ? strlen(s) : 0, \
          __function_obj->return_obj, \
          NULL); \
      return ERROR_SUCCESS; \
    }


struct _YR_MODULE;


typedef int (*YR_EXT_INITIALIZE_FUNC)(
    struct _YR_MODULE* module);


typedef int (*YR_EXT_FINALIZE_FUNC)(
    struct _YR_MODULE* module);


typedef int (*YR_EXT_DECLARATIONS_FUNC)(
    YR_OBJECT* module_object);


typedef int (*YR_EXT_LOAD_FUNC)(
    YR_SCAN_CONTEXT* context,
    YR_OBJECT* module_object,
    void* module_data,
    size_t module_data_size);


typedef int (*YR_EXT_UNLOAD_FUNC)(
    YR_OBJECT* module_object);


typedef struct _YR_MODULE
{
    tidx_mask_t is_loaded;

    char* name;

    YR_EXT_DECLARATIONS_FUNC declarations;
    YR_EXT_LOAD_FUNC load;
    YR_EXT_UNLOAD_FUNC unload;
    YR_EXT_INITIALIZE_FUNC initialize;
    YR_EXT_FINALIZE_FUNC finalize;

} YR_MODULE;


typedef struct _YR_MODULE_IMPORT
{
    const char* module_name;
    void* module_data;
    size_t module_data_size;

} YR_MODULE_IMPORT;


int yr_modules_initialize(void);


int yr_modules_finalize(void);


int yr_modules_do_declarations(
    const char* module_name,
    YR_OBJECT* main_structure);


int yr_modules_load(
    const char* module_name,
    YR_SCAN_CONTEXT* context);


int yr_modules_unload_all(
    YR_SCAN_CONTEXT* context);


void yr_modules_print_data(
    YR_SCAN_CONTEXT* context);
#endif



================================================
File: pluginsdk/yara/yara/object.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_OBJECT_H
#define YR_OBJECT_H

#ifdef _MSC_VER
#include <float.h>
#define isnan _isnan
//#define INFINITY (DBL_MAX + DBL_MAX)
//#define NAN (INFINITY-INFINITY)
#endif

#include "types.h"


#define OBJECT_CREATE           1

#define OBJECT_TYPE_INTEGER     1
#define OBJECT_TYPE_STRING      2
#define OBJECT_TYPE_STRUCTURE   3
#define OBJECT_TYPE_ARRAY       4
#define OBJECT_TYPE_FUNCTION    5
#define OBJECT_TYPE_REGEXP      6
#define OBJECT_TYPE_DICTIONARY  7
#define OBJECT_TYPE_FLOAT       8


int yr_object_create(
    int8_t type,
    const char* identifier,
    YR_OBJECT* parent,
    YR_OBJECT** object);


int yr_object_function_create(
    const char* identifier,
    const char* arguments_fmt,
    const char* return_fmt,
    YR_MODULE_FUNC func,
    YR_OBJECT* parent,
    YR_OBJECT** function);


int yr_object_from_external_variable(
    YR_EXTERNAL_VARIABLE* external,
    YR_OBJECT** object);


void yr_object_destroy(
    YR_OBJECT* object);


YR_OBJECT* yr_object_lookup_field(
    YR_OBJECT* object,
    const char* field_name);


YR_OBJECT* yr_object_lookup(
    YR_OBJECT* root,
    int flags,
    const char* pattern,
    ...);


int yr_object_has_undefined_value(
    YR_OBJECT* object,
    const char* field,
    ...);

int64_t yr_object_get_integer(
    YR_OBJECT* object,
    const char* field,
    ...);


SIZED_STRING* yr_object_get_string(
    YR_OBJECT* object,
    const char* field,
    ...);


int yr_object_set_integer(
    int64_t value,
    YR_OBJECT* object,
    const char* field,
    ...);


int yr_object_set_float(
    double value,
    YR_OBJECT* object,
    const char* field,
    ...);


int yr_object_set_string(
    const char* value,
    size_t len,
    YR_OBJECT* object,
    const char* field,
    ...);


YR_OBJECT* yr_object_array_get_item(
    YR_OBJECT* object,
    int flags,
    int index);


int yr_object_array_set_item(
    YR_OBJECT* object,
    YR_OBJECT* item,
    int index);


YR_OBJECT* yr_object_dict_get_item(
    YR_OBJECT* object,
    int flags,
    const char* key);


int yr_object_dict_set_item(
    YR_OBJECT* object,
    YR_OBJECT* item,
    const char* key);


int yr_object_structure_set_member(
    YR_OBJECT* object,
    YR_OBJECT* member);


YR_OBJECT* yr_object_get_root(
    YR_OBJECT* object);


void yr_object_print_data(
    YR_OBJECT* object,
    int indent);


#endif



================================================
File: pluginsdk/yara/yara/parser.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_PARSER_H
#define YR_PARSER_H


#include "lexer.h"


int yr_parser_emit(
    yyscan_t yyscanner,
    int8_t instruction,
    int8_t** instruction_address);


int yr_parser_emit_with_arg(
    yyscan_t yyscanner,
    int8_t instruction,
    int64_t argument,
    int8_t** instruction_address);


int yr_parser_emit_with_arg_double(
    yyscan_t yyscanner,
    int8_t instruction,
    double argument,
    int8_t** instruction_address);


int yr_parser_emit_with_arg_reloc(
    yyscan_t yyscanner,
    int8_t instruction,
    int64_t argument,
    int8_t** instruction_address);


int yr_parser_check_types(
    YR_COMPILER* compiler,
    YR_OBJECT_FUNCTION* function,
    const char* actual_args_fmt);


YR_STRING* yr_parser_lookup_string(
    yyscan_t yyscanner,
    const char* identifier);


int yr_parser_lookup_loop_variable(
    yyscan_t yyscanner,
    const char* identifier);


int yr_parser_reduce_rule_declaration(
    yyscan_t yyscanner,
    int flags,
    const char* identifier,
    char* tags,
    YR_STRING* strings,
    YR_META* metas);


YR_STRING* yr_parser_reduce_string_declaration(
    yyscan_t yyscanner,
    int flags,
    const char* identifier,
    SIZED_STRING* str);


YR_META* yr_parser_reduce_meta_declaration(
    yyscan_t yyscanner,
    int32_t type,
    const char* identifier,
    const char* string,
    int32_t integer);


int yr_parser_reduce_string_identifier(
    yyscan_t yyscanner,
    const char* identifier,
    int8_t instruction,
    uint64_t at_offset);


int yr_parser_emit_pushes_for_strings(
    yyscan_t yyscanner,
    const char* identifier);


int yr_parser_reduce_external(
    yyscan_t yyscanner,
    const char* identifier,
    int8_t intruction);


int yr_parser_reduce_import(
    yyscan_t yyscanner,
    SIZED_STRING* module_name);


int yr_parser_reduce_operation(
    yyscan_t yyscanner,
    const char* operation,
    EXPRESSION left_operand,
    EXPRESSION right_operand);

#endif



================================================
File: pluginsdk/yara/yara/pe.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#pragma pack(push, 1)

#ifdef _WIN32
#include <windows.h>

// These definitions are not present in older Windows headers.

#ifndef IMAGE_FILE_MACHINE_ARMNT
#define IMAGE_FILE_MACHINE_ARMNT             0x01c4
#endif

#ifndef IMAGE_FILE_MACHINE_ARM64
#define IMAGE_FILE_MACHINE_ARM64             0xaa64
#endif

#else

#include <stdint.h>
#include <stdlib.h>

typedef uint8_t   BYTE;
typedef uint16_t  WORD;
typedef uint32_t  DWORD;
typedef int32_t   LONG;
typedef uint32_t  ULONG;
typedef uint64_t  ULONGLONG;


#define FIELD_OFFSET(type, field)    ((size_t)&(((type *)0)->field))

#ifndef _MAC

#define IMAGE_DOS_SIGNATURE                 0x5A4D      // MZ
#define IMAGE_OS2_SIGNATURE                 0x454E      // NE
#define IMAGE_OS2_SIGNATURE_LE              0x454C      // LE
#define IMAGE_VXD_SIGNATURE                 0x454C      // LE
#define IMAGE_NT_SIGNATURE                  0x00004550  // PE00

#else

#define IMAGE_DOS_SIGNATURE                 0x4D5A      // MZ
#define IMAGE_OS2_SIGNATURE                 0x4E45      // NE
#define IMAGE_OS2_SIGNATURE_LE              0x4C45      // LE
#define IMAGE_NT_SIGNATURE                  0x50450000  // PE00

#endif

#pragma pack(push, 2)

typedef struct _IMAGE_DOS_HEADER        // DOS .EXE header
{
    WORD   e_magic;                     // Magic number
    WORD   e_cblp;                      // Bytes on last page of file
    WORD   e_cp;                        // Pages in file
    WORD   e_crlc;                      // Relocations
    WORD   e_cparhdr;                   // Size of header in paragraphs
    WORD   e_minalloc;                  // Minimum extra paragraphs needed
    WORD   e_maxalloc;                  // Maximum extra paragraphs needed
    WORD   e_ss;                        // Initial (relative) SS value
    WORD   e_sp;                        // Initial SP value
    WORD   e_csum;                      // Checksum
    WORD   e_ip;                        // Initial IP value
    WORD   e_cs;                        // Initial (relative) CS value
    WORD   e_lfarlc;                    // File address of relocation table
    WORD   e_ovno;                      // Overlay number
    WORD   e_res[4];                    // Reserved words
    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
    WORD   e_oeminfo;                   // OEM information; e_oemid specific
    WORD   e_res2[10];                  // Reserved words
    LONG   e_lfanew;                    // File address of new exe header
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

#pragma pack(pop)

//
// File header format.
//

#pragma pack(push,4)

typedef struct _IMAGE_FILE_HEADER
{
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;



#define IMAGE_SIZEOF_FILE_HEADER             20


#define IMAGE_FILE_RELOCS_STRIPPED           0x0001  // Relocation info stripped from file.
#define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  // File is executable  (i.e. no unresolved externel references).
#define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  // Line nunbers stripped from file.
#define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  // Local symbols stripped from file.
#define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  // Agressively trim working set
#define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  // App can handle >2gb addresses
#define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  // Bytes of machine word are reversed.
#define IMAGE_FILE_32BIT_MACHINE             0x0100  // 32 bit word machine.
#define IMAGE_FILE_DEBUG_STRIPPED            0x0200  // Debugging info stripped from file in .DBG file
#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  // If Image is on removable media, copy and run from the swap file.
#define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  // If Image is on Net, copy and run from the swap file.
#define IMAGE_FILE_SYSTEM                    0x1000  // System File.
#define IMAGE_FILE_DLL                       0x2000  // File is a DLL.
#define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  // File should only be run on a UP machine
#define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  // Bytes of machine word are reversed.


#define IMAGE_FILE_MACHINE_UNKNOWN           0x0000
#define IMAGE_FILE_MACHINE_AM33              0x01d3
#define IMAGE_FILE_MACHINE_AMD64             0x8664
#define IMAGE_FILE_MACHINE_ARM               0x01c0
#define IMAGE_FILE_MACHINE_ARMNT             0x01c4
#define IMAGE_FILE_MACHINE_ARM64             0xaa64
#define IMAGE_FILE_MACHINE_EBC               0x0ebc
#define IMAGE_FILE_MACHINE_I386              0x014c
#define IMAGE_FILE_MACHINE_IA64              0x0200
#define IMAGE_FILE_MACHINE_M32R              0x9041
#define IMAGE_FILE_MACHINE_MIPS16            0x0266
#define IMAGE_FILE_MACHINE_MIPSFPU           0x0366
#define IMAGE_FILE_MACHINE_MIPSFPU16         0x0466
#define IMAGE_FILE_MACHINE_POWERPC           0x01f0
#define IMAGE_FILE_MACHINE_POWERPCFP         0x01f1
#define IMAGE_FILE_MACHINE_R4000             0x0166
#define IMAGE_FILE_MACHINE_SH3               0x01a2
#define IMAGE_FILE_MACHINE_SH3DSP            0x01a3
#define IMAGE_FILE_MACHINE_SH4               0x01a6
#define IMAGE_FILE_MACHINE_SH5               0x01a8
#define IMAGE_FILE_MACHINE_THUMB             0x01c2
#define IMAGE_FILE_MACHINE_WCEMIPSV2         0x0169

// Section characteristics
#define IMAGE_SCN_CNT_CODE                   0x00000020
#define IMAGE_SCN_CNT_INITIALIZED_DATA       0x00000040
#define IMAGE_SCN_CNT_UNINITIALIZED_DATA     0x00000080
#define IMAGE_SCN_GPREL                      0x00008000
#define IMAGE_SCN_MEM_16BIT                  0x00020000
#define IMAGE_SCN_LNK_NRELOC_OVFL            0x01000000
#define IMAGE_SCN_MEM_DISCARDABLE            0x02000000
#define IMAGE_SCN_MEM_NOT_CACHED             0x04000000
#define IMAGE_SCN_MEM_NOT_PAGED              0x08000000
#define IMAGE_SCN_MEM_SHARED                 0x10000000
#define IMAGE_SCN_MEM_EXECUTE                0x20000000
#define IMAGE_SCN_MEM_READ                   0x40000000
#define IMAGE_SCN_MEM_WRITE                  0x80000000

//
// Directory format.
//

typedef struct _IMAGE_DATA_DIRECTORY
{
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16


#define IMAGE_DIRECTORY_ENTRY_EXPORT          0   // Export Directory
#define IMAGE_DIRECTORY_ENTRY_IMPORT          1   // Import Directory
#define IMAGE_DIRECTORY_ENTRY_RESOURCE        2   // Resource Directory
#define IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   // Exception Directory
#define IMAGE_DIRECTORY_ENTRY_SECURITY        4   // Security Directory
#define IMAGE_DIRECTORY_ENTRY_BASERELOC       5   // Base Relocation Table
#define IMAGE_DIRECTORY_ENTRY_DEBUG           6   // Debug Directory
#define IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)
#define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   // Architecture Specific Data
#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   // RVA of GP
#define IMAGE_DIRECTORY_ENTRY_TLS             9   // TLS Directory
#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   // Load Configuration Directory
#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   // Bound Import Directory in headers
#define IMAGE_DIRECTORY_ENTRY_IAT            12   // Import Address Table
#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   // Delay Load Import Descriptors
#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   // COM Runtime descriptor


//
// Optional header format.
//

typedef struct _IMAGE_OPTIONAL_HEADER32
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];

} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;


typedef struct _IMAGE_OPTIONAL_HEADER64
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];

} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;


#define IMAGE_NT_OPTIONAL_HDR32_MAGIC      0x10b
#define IMAGE_NT_OPTIONAL_HDR64_MAGIC      0x20b


typedef struct _IMAGE_NT_HEADERS32
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;

} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;


typedef struct _IMAGE_NT_HEADERS64
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;

} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;


// IMAGE_FIRST_SECTION doesn't need 32/64 versions since the file header is
// the same either way.

#define IMAGE_FIRST_SECTION( ntheader ) ((PIMAGE_SECTION_HEADER) \
    ((BYTE*)ntheader + \
     FIELD_OFFSET( IMAGE_NT_HEADERS32, OptionalHeader ) + \
     ((PIMAGE_NT_HEADERS32)(ntheader))->FileHeader.SizeOfOptionalHeader \
    ))

// Subsystem Values

#define IMAGE_SUBSYSTEM_UNKNOWN              0   // Unknown subsystem.
#define IMAGE_SUBSYSTEM_NATIVE               1   // Image doesn't require a subsystem.
#define IMAGE_SUBSYSTEM_WINDOWS_GUI          2   // Image runs in the Windows GUI subsystem.
#define IMAGE_SUBSYSTEM_WINDOWS_CUI          3   // Image runs in the Windows character subsystem.
#define IMAGE_SUBSYSTEM_OS2_CUI              5   // image runs in the OS/2 character subsystem.
#define IMAGE_SUBSYSTEM_POSIX_CUI            7   // image runs in the Posix character subsystem.
#define IMAGE_SUBSYSTEM_NATIVE_WINDOWS       8   // image is a native Win9x driver.

//
// Section header format.
//

#define IMAGE_SIZEOF_SHORT_NAME              8

typedef struct _IMAGE_SECTION_HEADER
{
    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];
    union
    {
        DWORD   PhysicalAddress;
        DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;

} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

#define IMAGE_SIZEOF_SECTION_HEADER          40


typedef struct _IMAGE_EXPORT_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD  MajorVersion;
    WORD  MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR
{
    union
    {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;
    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;

} IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;


typedef struct _IMAGE_IMPORT_BY_NAME
{
    WORD Hint;
    BYTE Name[1];

} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

typedef struct _IMAGE_THUNK_DATA32
{
    union
    {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;

} IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32;


#define IMAGE_ORDINAL_FLAG32  0x80000000
#define IMAGE_ORDINAL_FLAG64  0x8000000000000000L

typedef struct _IMAGE_THUNK_DATA64
{
    union
    {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;

} IMAGE_THUNK_DATA64, *PIMAGE_THUNK_DATA64;


typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    DWORD Name;
    DWORD OffsetToData;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;


typedef struct _IMAGE_RESOURCE_DATA_ENTRY
{
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;


typedef struct _IMAGE_RESOURCE_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD  MajorVersion;
    WORD  MinorVersion;
    WORD  NumberOfNamedEntries;
    WORD  NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

#pragma pack(pop)

#endif  // _WIN32

typedef struct _VERSION_INFO
{
    WORD   Length;
    WORD   ValueLength;
    WORD   Type;
    char   Key[0];
} VERSION_INFO, *PVERSION_INFO;


#define WIN_CERT_REVISION_1_0 0x0100
#define WIN_CERT_REVISION_2_0 0x0200

#define WIN_CERT_TYPE_X509             0x0001
#define WIN_CERT_TYPE_PKCS_SIGNED_DATA 0x0002
#define WIN_CERT_TYPE_RESERVED_1       0x0003
#define WIN_CERT_TYPE_TS_STACK_SIGNED  0x0004

typedef struct _WIN_CERTIFICATE
{
    DWORD Length;
    WORD  Revision;
    WORD  CertificateType;
    BYTE  Certificate[1];
} WIN_CERTIFICATE, *PWIN_CERTIFICATE;


//
// Rich signature.
// http://www.ntcore.com/files/richsign.htm
//

typedef struct _RICH_SIGNATURE
{
    DWORD dans;
    DWORD key1;
    DWORD key2;
    DWORD key3;
} RICH_SIGNATURE, *PRICH_SIGNATURE;

#define RICH_DANS 0x536e6144 // "DanS"
#define RICH_RICH 0x68636952 // "Rich"

typedef struct _RICH_DATA
{
    size_t len;
    BYTE* raw_data;
    BYTE* clear_data;
} RICH_DATA, *PRICH_DATA;

#pragma pack(pop)



================================================
File: pluginsdk/yara/yara/proc.h
================================================
/*
Copyright (c) 2007. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_PROC_H
#define YR_PROC_H

#include "types.h"

int yr_process_get_memory(
    int pid,
    YR_MEMORY_BLOCK** first_block);

#endif



================================================
File: pluginsdk/yara/yara/re.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_RE_H
#define YR_RE_H

#include <ctype.h>

#include "arena.h"
#include "sizedstr.h"

#define RE_NODE_LITERAL             1
#define RE_NODE_MASKED_LITERAL      2
#define RE_NODE_ANY                 3
#define RE_NODE_CONCAT              4
#define RE_NODE_ALT                 5
#define RE_NODE_RANGE               6
#define RE_NODE_STAR                7
#define RE_NODE_PLUS                8
#define RE_NODE_CLASS               9
#define RE_NODE_WORD_CHAR           10
#define RE_NODE_NON_WORD_CHAR       11
#define RE_NODE_SPACE               12
#define RE_NODE_NON_SPACE           13
#define RE_NODE_DIGIT               14
#define RE_NODE_NON_DIGIT           15
#define RE_NODE_EMPTY               16
#define RE_NODE_ANCHOR_START        17
#define RE_NODE_ANCHOR_END          18
#define RE_NODE_WORD_BOUNDARY       19
#define RE_NODE_NON_WORD_BOUNDARY   20


#define RE_OPCODE_ANY                   0xA0
#define RE_OPCODE_ANY_EXCEPT_NEW_LINE   0xA1
#define RE_OPCODE_LITERAL               0xA2
#define RE_OPCODE_LITERAL_NO_CASE       0xA3
#define RE_OPCODE_MASKED_LITERAL        0xA4
#define RE_OPCODE_CLASS                 0xA5
#define RE_OPCODE_CLASS_NO_CASE         0xA6
#define RE_OPCODE_WORD_CHAR             0xA7
#define RE_OPCODE_NON_WORD_CHAR         0xA8
#define RE_OPCODE_SPACE                 0xA9
#define RE_OPCODE_NON_SPACE             0xAA
#define RE_OPCODE_DIGIT                 0xAB
#define RE_OPCODE_NON_DIGIT             0xAC
#define RE_OPCODE_MATCH                 0xAD

#define RE_OPCODE_MATCH_AT_END          0xB0
#define RE_OPCODE_MATCH_AT_START        0xB1
#define RE_OPCODE_WORD_BOUNDARY         0xB2
#define RE_OPCODE_NON_WORD_BOUNDARY     0xB3

#define RE_OPCODE_SPLIT_A               0xC0
#define RE_OPCODE_SPLIT_B               0xC1
#define RE_OPCODE_PUSH                  0xC2
#define RE_OPCODE_POP                   0xC3
#define RE_OPCODE_JNZ                   0xC4
#define RE_OPCODE_JUMP                  0xC5


#define RE_FLAGS_FAST_HEX_REGEXP          0x02
#define RE_FLAGS_BACKWARDS                0x04
#define RE_FLAGS_EXHAUSTIVE               0x08
#define RE_FLAGS_WIDE                     0x10
#define RE_FLAGS_NO_CASE                  0x20
#define RE_FLAGS_SCAN                     0x40
#define RE_FLAGS_DOT_ALL                  0x80
#define RE_FLAGS_NOT_AT_START            0x100


typedef struct RE RE;
typedef struct RE_NODE RE_NODE;
typedef struct RE_ERROR RE_ERROR;

typedef uint8_t* RE_CODE;

#define CHAR_IN_CLASS(chr, cls)  \
    ((cls)[(chr) / 8] & 1 << ((chr) % 8))


#define IS_WORD_CHAR(chr) \
    (isalnum(chr) || (chr) == '_')


struct RE_NODE
{
    int type;

    union
    {
        int value;
        int count;
        int start;
    };

    union
    {
        int mask;
        int end;
    };

    int greedy;

    uint8_t* class_vector;

    RE_NODE* left;
    RE_NODE* right;

    RE_CODE forward_code;
    RE_CODE backward_code;
};


struct RE
{

    uint32_t flags;
    RE_NODE* root_node;
    YR_ARENA* code_arena;
    RE_CODE code;
};


struct RE_ERROR
{

    char message[512];

};


typedef int RE_MATCH_CALLBACK_FUNC(
    uint8_t* match,
    int match_length,
    int flags,
    void* args);


int yr_re_create(
    RE** re);


int yr_re_parse(
    const char* re_string,
    int flags,
    RE** re,
    RE_ERROR* error);


int yr_re_parse_hex(
    const char* hex_string,
    int flags,
    RE** re,
    RE_ERROR* error);


int yr_re_compile(
    const char* re_string,
    int flags,
    YR_ARENA* code_arena,
    RE** re,
    RE_ERROR* error);


void yr_re_destroy(
    RE* re);


void yr_re_print(
    RE* re);


RE_NODE* yr_re_node_create(
    int type,
    RE_NODE* left,
    RE_NODE* right);


void yr_re_node_destroy(
    RE_NODE* node);


SIZED_STRING* yr_re_extract_literal(
    RE* re);


int yr_re_contains_dot_star(
    RE* re);


int yr_re_split_at_chaining_point(
    RE* re,
    RE** result_re,
    RE** remainder_re,
    int32_t* min_gap,
    int32_t* max_gap);


int yr_re_emit_code(
    RE* re,
    YR_ARENA* arena);


int yr_re_exec(
    RE_CODE re_code,
    uint8_t* input,
    size_t input_size,
    int flags,
    RE_MATCH_CALLBACK_FUNC callback,
    void* callback_args);


int yr_re_match(
    RE_CODE re_code,
    const char* target);


int yr_re_initialize(void);


int yr_re_finalize(void);


int yr_re_finalize_thread(void);

#endif



================================================
File: pluginsdk/yara/yara/re_lexer.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#undef yyparse
#undef yylex
#undef yyerror
#undef yyfatal
#undef yychar
#undef yydebug
#undef yynerrs
#undef yyget_extra
#undef yyget_lineno

#undef YY_FATAL_ERROR
#undef YY_DECL
#undef LEX_ENV


#define yyparse         re_yyparse
#define yylex           re_yylex
#define yyerror         re_yyerror
#define yyfatal         re_yyfatal
#define yychar          re_yychar
#define yydebug         re_yydebug
#define yynerrs         re_yynerrs
#define yyget_extra     re_yyget_extra
#define yyget_lineno    re_yyget_lineno


#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

#define YY_EXTRA_TYPE RE*
#define YY_USE_CONST


typedef struct _RE_LEX_ENVIRONMENT
{
    int negated_class;
    uint8_t class_vector[32];
    int last_error_code;
    char last_error_message[256];

} RE_LEX_ENVIRONMENT;


#define LEX_ENV  ((RE_LEX_ENVIRONMENT*) lex_env)

#define YY_FATAL_ERROR(msg) re_yyfatal(yyscanner, msg)

#include <re_grammar.h>

#define YY_DECL int re_yylex \
    (YYSTYPE * yylval_param , yyscan_t yyscanner, RE_LEX_ENVIRONMENT* lex_env)


YY_EXTRA_TYPE yyget_extra(
    yyscan_t yyscanner);

int yylex(
    YYSTYPE* yylval_param,
    yyscan_t yyscanner,
    RE_LEX_ENVIRONMENT* lex_env);

int yyparse(
    void* yyscanner,
    RE_LEX_ENVIRONMENT* lex_env);

void yyerror(
    yyscan_t yyscanner,
    RE_LEX_ENVIRONMENT* lex_env,
    const char* error_message);

void yyfatal(
    yyscan_t yyscanner,
    const char* error_message);

int yr_parse_re_string(
    const char* re_string,
    int flags,
    RE** re,
    RE_ERROR* error);



================================================
File: pluginsdk/yara/yara/rules.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#ifndef YR_RULES_H
#define YR_RULES_H

#include "types.h"
#include "utils.h"


#define CALLBACK_MSG_RULE_MATCHING              1
#define CALLBACK_MSG_RULE_NOT_MATCHING          2
#define CALLBACK_MSG_SCAN_FINISHED              3
#define CALLBACK_MSG_IMPORT_MODULE              4

#define CALLBACK_CONTINUE   0
#define CALLBACK_ABORT      1
#define CALLBACK_ERROR      2


#define yr_rule_tags_foreach(rule, tag_name) \
    for (tag_name = rule->tags; \
         tag_name != NULL && *tag_name != '\0'; \
         tag_name += strlen(tag_name) + 1)


#define yr_rule_metas_foreach(rule, meta) \
    for (meta = rule->metas; !META_IS_NULL(meta); meta++)


#define yr_rule_strings_foreach(rule, string) \
    for (string = rule->strings; !STRING_IS_NULL(string); string++)


#define yr_string_matches_foreach(string, match) \
    for (match = STRING_MATCHES(string).head; match != NULL; match = match->next)


#define yr_rules_foreach(rules, rule) \
    for (rule = rules->rules_list_head; !RULE_IS_NULL(rule); rule++)



YR_API int yr_rules_scan_mem(
    YR_RULES* rules,
    uint8_t* buffer,
    size_t buffer_size,
    int flags,
    YR_CALLBACK_FUNC callback,
    void* user_data,
    int timeout);


YR_API int yr_rules_scan_file(
    YR_RULES* rules,
    const char* filename,
    int flags,
    YR_CALLBACK_FUNC callback,
    void* user_data,
    int timeout);


YR_API int yr_rules_scan_proc(
    YR_RULES* rules,
    int pid,
    int flags,
    YR_CALLBACK_FUNC callback,
    void* user_data,
    int timeout);


YR_API int yr_rules_save(
    YR_RULES* rules,
    const char* filename);


YR_API int yr_rules_load(
    const char* filename,
    YR_RULES** rules);


YR_API int yr_rules_destroy(
    YR_RULES* rules);


YR_API int yr_rules_define_integer_variable(
    YR_RULES* rules,
    const char* identifier,
    int64_t value);


YR_API int yr_rules_define_boolean_variable(
    YR_RULES* rules,
    const char* identifier,
    int value);


YR_API int yr_rules_define_float_variable(
    YR_RULES* rules,
    const char* identifier,
    double value);


YR_API int yr_rules_define_string_variable(
    YR_RULES* rules,
    const char* identifier,
    const char* value);


YR_API void yr_rules_print_profiling_info(
    YR_RULES* rules);

#endif



================================================
File: pluginsdk/yara/yara/scan.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_SCAN_H
#define YR_SCAN_H

#include "types.h"

#define SCAN_FLAGS_FAST_MODE         1
#define SCAN_FLAGS_PROCESS_MEMORY    2


int yr_scan_verify_match(
    YR_AC_MATCH* ac_match,
    uint8_t* data,
    size_t data_size,
    size_t data_base,
    size_t offset,
    YR_ARENA* matches_arena,
    int flags);

#endif



================================================
File: pluginsdk/yara/yara/sizedstr.h
================================================
/*
Copyright (c) 2007-2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef _SIZEDSTR_H
#define _SIZEDSTR_H

//
// This struct is used to support strings containing null chars. The length of
// the string is stored along the string data. However the string data is also
// terminated with a null char.
//

#define SIZED_STRING_FLAGS_NO_CASE  1
#define SIZED_STRING_FLAGS_DOT_ALL  2

typedef struct _SIZED_STRING
{
    int length;
    int flags;
    char c_string[1];

} SIZED_STRING;


int sized_string_cmp(
    SIZED_STRING* s1,
    SIZED_STRING* s2);

#endif



================================================
File: pluginsdk/yara/yara/strutils.h
================================================
/*
Copyright (c) 2007-2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_STRUTILS_H
#define YR_STRUTILS_H

#include <assert.h>
#include <stdlib.h>
#include <stdint.h>

#include "config.h"

#ifdef _WIN32
#define snprintf _snprintf
#define strcasecmp _stricmp
#define strncasecmp _strnicmp
#endif


uint64_t xtoi(
    const char* hexstr);


#if !HAVE_STRLCPY
size_t strlcpy(
    char* dst,
    const char* src,
    size_t size);
#endif


#if !HAVE_STRLCAT
size_t strlcat(
    char* dst,
    const char* src,
    size_t size);
#endif


#if !HAVE_MEMMEM
void* memmem(
    const void* haystack,
    size_t haystack_size,
    const void* needle,
    size_t needle_size);
#endif


int strlen_w(
    const char* w_str);


int strcmp_w(
    const char* w_str,
    const char* str);


size_t strlcpy_w(
    char* dst,
    const char* w_src,
    size_t n);

#endif




================================================
File: pluginsdk/yara/yara/types.h
================================================
/*
Copyright (c) 2013. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef YR_TYPES_H
#define YR_TYPES_H


#include "arena.h"
#include "re.h"
#include "limits.h"
#include "hash.h"

#ifdef _WIN32
#include <windows.h>
typedef HANDLE mutex_t;
#else
#include <pthread.h>
typedef pthread_mutex_t mutex_t;
#endif

typedef int32_t tidx_mask_t;


#define DECLARE_REFERENCE(type, name) \
    union { type name; int64_t name##_; }

#pragma pack(push)
#pragma pack(1)


#define NAMESPACE_TFLAGS_UNSATISFIED_GLOBAL      0x01

#define NAMESPACE_HAS_UNSATISFIED_GLOBAL(x) \
    ((x)->t_flags[yr_get_tidx()] & NAMESPACE_TFLAGS_UNSATISFIED_GLOBAL)


typedef struct _YR_NAMESPACE
{
    int32_t t_flags[MAX_THREADS];     // Thread-specific flags
    DECLARE_REFERENCE(char*, name);

} YR_NAMESPACE;


#define META_TYPE_NULL      0
#define META_TYPE_INTEGER   1
#define META_TYPE_STRING    2
#define META_TYPE_BOOLEAN   3

#define META_IS_NULL(x) \
    ((x) != NULL ? (x)->type == META_TYPE_NULL : TRUE)


typedef struct _YR_META
{
    int32_t type;
    int32_t integer;

    DECLARE_REFERENCE(const char*, identifier);
    DECLARE_REFERENCE(char*, string);

} YR_META;


typedef struct _YR_MATCH
{
    int64_t base;
    int64_t offset;
    int32_t length;

    union
    {
        uint8_t* data;           // Confirmed matches use "data",
        int32_t chain_length;    // unconfirmed ones use "chain_length"
    };

    struct _YR_MATCH*  prev;
    struct _YR_MATCH*  next;

} YR_MATCH;


typedef struct _YR_MATCHES
{
    int32_t count;

    DECLARE_REFERENCE(YR_MATCH*, head);
    DECLARE_REFERENCE(YR_MATCH*, tail);

} YR_MATCHES;


#define STRING_GFLAGS_REFERENCED        0x01
#define STRING_GFLAGS_HEXADECIMAL       0x02
#define STRING_GFLAGS_NO_CASE           0x04
#define STRING_GFLAGS_ASCII             0x08
#define STRING_GFLAGS_WIDE              0x10
#define STRING_GFLAGS_REGEXP            0x20
#define STRING_GFLAGS_FAST_HEX_REGEXP   0x40
#define STRING_GFLAGS_FULL_WORD         0x80
#define STRING_GFLAGS_ANONYMOUS         0x100
#define STRING_GFLAGS_SINGLE_MATCH      0x200
#define STRING_GFLAGS_LITERAL           0x400
#define STRING_GFLAGS_FITS_IN_ATOM      0x800
#define STRING_GFLAGS_NULL              0x1000
#define STRING_GFLAGS_CHAIN_PART        0x2000
#define STRING_GFLAGS_CHAIN_TAIL        0x4000
#define STRING_GFLAGS_FIXED_OFFSET      0x8000


#define STRING_IS_HEX(x) \
    (((x)->g_flags) & STRING_GFLAGS_HEXADECIMAL)

#define STRING_IS_NO_CASE(x) \
    (((x)->g_flags) & STRING_GFLAGS_NO_CASE)

#define STRING_IS_ASCII(x) \
    (((x)->g_flags) & STRING_GFLAGS_ASCII)

#define STRING_IS_WIDE(x) \
    (((x)->g_flags) & STRING_GFLAGS_WIDE)

#define STRING_IS_REGEXP(x) \
    (((x)->g_flags) & STRING_GFLAGS_REGEXP)

#define STRING_IS_FULL_WORD(x) \
    (((x)->g_flags) & STRING_GFLAGS_FULL_WORD)

#define STRING_IS_ANONYMOUS(x) \
    (((x)->g_flags) & STRING_GFLAGS_ANONYMOUS)

#define STRING_IS_REFERENCED(x) \
    (((x)->g_flags) & STRING_GFLAGS_REFERENCED)

#define STRING_IS_SINGLE_MATCH(x) \
    (((x)->g_flags) & STRING_GFLAGS_SINGLE_MATCH)

#define STRING_IS_FIXED_OFFSET(x) \
    (((x)->g_flags) & STRING_GFLAGS_FIXED_OFFSET)

#define STRING_IS_LITERAL(x) \
    (((x)->g_flags) & STRING_GFLAGS_LITERAL)

#define STRING_IS_FAST_HEX_REGEXP(x) \
    (((x)->g_flags) & STRING_GFLAGS_FAST_HEX_REGEXP)

#define STRING_IS_CHAIN_PART(x) \
    (((x)->g_flags) & STRING_GFLAGS_CHAIN_PART)

#define STRING_IS_CHAIN_TAIL(x) \
    (((x)->g_flags) & STRING_GFLAGS_CHAIN_TAIL)

#define STRING_IS_NULL(x) \
    ((x) == NULL || ((x)->g_flags) & STRING_GFLAGS_NULL)

#define STRING_FITS_IN_ATOM(x) \
    (((x)->g_flags) & STRING_GFLAGS_FITS_IN_ATOM)

#define STRING_FOUND(x) \
    ((x)->matches[yr_get_tidx()].tail != NULL)

#define STRING_MATCHES(x) \
    ((x)->matches[yr_get_tidx()])


typedef struct _YR_STRING
{
    int32_t g_flags;
    int32_t length;

    DECLARE_REFERENCE(char*, identifier);
    DECLARE_REFERENCE(uint8_t*, string);
    DECLARE_REFERENCE(struct _YR_STRING*, chained_to);

    int32_t chain_gap_min;
    int32_t chain_gap_max;

    int64_t fixed_offset;

    YR_MATCHES matches[MAX_THREADS];
    YR_MATCHES unconfirmed_matches[MAX_THREADS];

#ifdef PROFILING_ENABLED
    uint64_t clock_ticks;
#endif

} YR_STRING;


#define RULE_TFLAGS_MATCH                0x01

#define RULE_GFLAGS_PRIVATE              0x01
#define RULE_GFLAGS_GLOBAL               0x02
#define RULE_GFLAGS_REQUIRE_EXECUTABLE   0x04
#define RULE_GFLAGS_REQUIRE_FILE         0x08
#define RULE_GFLAGS_NULL                 0x1000

#define RULE_IS_PRIVATE(x) \
    (((x)->g_flags) & RULE_GFLAGS_PRIVATE)

#define RULE_IS_GLOBAL(x) \
    (((x)->g_flags) & RULE_GFLAGS_GLOBAL)

#define RULE_IS_NULL(x) \
    (((x)->g_flags) & RULE_GFLAGS_NULL)

#define RULE_MATCHES(x) \
    ((x)->t_flags[yr_get_tidx()] & RULE_TFLAGS_MATCH)


typedef struct _YR_RULE
{
    int32_t g_flags;               // Global flags
    int32_t t_flags[MAX_THREADS];  // Thread-specific flags

    DECLARE_REFERENCE(const char*, identifier);
    DECLARE_REFERENCE(const char*, tags);
    DECLARE_REFERENCE(YR_META*, metas);
    DECLARE_REFERENCE(YR_STRING*, strings);
    DECLARE_REFERENCE(YR_NAMESPACE*, ns);

#ifdef PROFILING_ENABLED
    uint64_t clock_ticks;
#endif

} YR_RULE;


#define EXTERNAL_VARIABLE_TYPE_NULL           0
#define EXTERNAL_VARIABLE_TYPE_FLOAT          1
#define EXTERNAL_VARIABLE_TYPE_INTEGER        2
#define EXTERNAL_VARIABLE_TYPE_BOOLEAN        3
#define EXTERNAL_VARIABLE_TYPE_STRING         4
#define EXTERNAL_VARIABLE_TYPE_MALLOC_STRING  5


#define EXTERNAL_VARIABLE_IS_NULL(x) \
    ((x) != NULL ? (x)->type == EXTERNAL_VARIABLE_TYPE_NULL : TRUE)


typedef struct _YR_EXTERNAL_VARIABLE
{
    int32_t type;

    union
    {
        int64_t i;
        double f;
        char* s;
    } value;

    DECLARE_REFERENCE(char*, identifier);

} YR_EXTERNAL_VARIABLE;


typedef struct _YR_AC_MATCH
{
    uint16_t backtrack;

    DECLARE_REFERENCE(YR_STRING*, string);
    DECLARE_REFERENCE(uint8_t*, forward_code);
    DECLARE_REFERENCE(uint8_t*, backward_code);
    DECLARE_REFERENCE(struct _YR_AC_MATCH*, next);

} YR_AC_MATCH;


typedef struct _YR_AC_STATE
{
    int8_t depth;

    DECLARE_REFERENCE(struct _YR_AC_STATE*, failure);
    DECLARE_REFERENCE(YR_AC_MATCH*, matches);

} YR_AC_STATE;


typedef struct _YR_AC_STATE_TRANSITION
{
    uint8_t input;

    DECLARE_REFERENCE(YR_AC_STATE*, state);
    DECLARE_REFERENCE(struct _YR_AC_STATE_TRANSITION*, next);

} YR_AC_STATE_TRANSITION;


typedef struct _YR_AC_TABLE_BASED_STATE
{
    int8_t depth;

    DECLARE_REFERENCE(YR_AC_STATE*, failure);
    DECLARE_REFERENCE(YR_AC_MATCH*, matches);
    DECLARE_REFERENCE(YR_AC_STATE*, state) transitions[256];

} YR_AC_TABLE_BASED_STATE;


typedef struct _YR_AC_LIST_BASED_STATE
{
    int8_t depth;

    DECLARE_REFERENCE(YR_AC_STATE*, failure);
    DECLARE_REFERENCE(YR_AC_MATCH*, matches);
    DECLARE_REFERENCE(YR_AC_STATE_TRANSITION*, transitions);

} YR_AC_LIST_BASED_STATE;


typedef struct _YR_AC_AUTOMATON
{
    DECLARE_REFERENCE(YR_AC_STATE*, root);

} YR_AC_AUTOMATON;


typedef struct _YARA_RULES_FILE_HEADER
{
    uint32_t version;

    DECLARE_REFERENCE(YR_RULE*, rules_list_head);
    DECLARE_REFERENCE(YR_EXTERNAL_VARIABLE*, externals_list_head);
    DECLARE_REFERENCE(uint8_t*, code_start);
    DECLARE_REFERENCE(YR_AC_AUTOMATON*, automaton);

} YARA_RULES_FILE_HEADER;



#pragma pack(pop)


typedef struct _YR_RULES
{

    tidx_mask_t tidx_mask;
    uint8_t* code_start;

    mutex_t mutex;

    YR_ARENA* arena;
    YR_RULE* rules_list_head;
    YR_EXTERNAL_VARIABLE* externals_list_head;
    YR_AC_AUTOMATON* automaton;

} YR_RULES;


typedef struct _YR_MEMORY_BLOCK
{
    uint8_t* data;
    size_t size;
    size_t base;

    struct _YR_MEMORY_BLOCK* next;

} YR_MEMORY_BLOCK;


typedef int (*YR_CALLBACK_FUNC)(
    int message,
    void* message_data,
    void* user_data);


typedef struct _YR_SCAN_CONTEXT
{
    uint64_t  file_size;
    uint64_t  entry_point;

    int flags;
    void* user_data;

    YR_MEMORY_BLOCK*  mem_block;
    YR_HASH_TABLE*  objects_table;
    YR_CALLBACK_FUNC  callback;

} YR_SCAN_CONTEXT;



#define OBJECT_COMMON_FIELDS \
    int8_t type; \
    const char* identifier; \
    void* data; \
    struct _YR_OBJECT* parent;


typedef struct _YR_OBJECT
{
    OBJECT_COMMON_FIELDS

} YR_OBJECT;


typedef struct _YR_OBJECT_INTEGER
{
    OBJECT_COMMON_FIELDS
    int64_t value;

} YR_OBJECT_INTEGER;


typedef struct _YR_OBJECT_DOUBLE
{
    OBJECT_COMMON_FIELDS
    double value;

} YR_OBJECT_DOUBLE;


typedef struct _YR_OBJECT_STRING
{
    OBJECT_COMMON_FIELDS
    SIZED_STRING* value;

} YR_OBJECT_STRING;


typedef struct _YR_OBJECT_REGEXP
{
    OBJECT_COMMON_FIELDS
    RE* value;

} YR_OBJECT_REGEXP;


typedef struct _YR_OBJECT_STRUCTURE
{
    OBJECT_COMMON_FIELDS
    struct _YR_STRUCTURE_MEMBER* members;

} YR_OBJECT_STRUCTURE;


typedef struct _YR_OBJECT_ARRAY
{
    OBJECT_COMMON_FIELDS
    YR_OBJECT* prototype_item;
    struct _YR_ARRAY_ITEMS* items;

} YR_OBJECT_ARRAY;


typedef struct _YR_OBJECT_DICTIONARY
{
    OBJECT_COMMON_FIELDS
    YR_OBJECT* prototype_item;
    struct _YR_DICTIONARY_ITEMS* items;

} YR_OBJECT_DICTIONARY;


struct _YR_OBJECT_FUNCTION;


typedef int (*YR_MODULE_FUNC)(
    void* args,
    YR_SCAN_CONTEXT* context,
    struct _YR_OBJECT_FUNCTION* function_obj);


typedef struct _YR_OBJECT_FUNCTION
{
    OBJECT_COMMON_FIELDS

    YR_OBJECT* return_obj;

    struct
    {
        const char* arguments_fmt;
        YR_MODULE_FUNC code;
    } prototypes[MAX_OVERLOADED_FUNCTIONS];

} YR_OBJECT_FUNCTION;


typedef struct _YR_STRUCTURE_MEMBER
{
    YR_OBJECT* object;
    struct _YR_STRUCTURE_MEMBER* next;

} YR_STRUCTURE_MEMBER;


typedef struct _YR_ARRAY_ITEMS
{
    int count;
    YR_OBJECT* objects[1];

} YR_ARRAY_ITEMS;


typedef struct _YR_DICTIONARY_ITEMS
{
    int used;
    int free;

    struct
    {

        char* key;
        YR_OBJECT* obj;

    } objects[1];

} YR_DICTIONARY_ITEMS;


#endif



================================================
File: pluginsdk/yara/yara/utils.h
================================================
/*
Copyright (c) 2014. The YARA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#ifndef YR_UTILS_H
#define YR_UTILS_H

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifndef NULL
#define NULL 0
#endif

#ifdef __cplusplus
#define YR_API extern "C" __declspec(dllimport)
#else
#define YR_API
#endif

#ifndef min
#define min(x, y) ((x < y) ? (x) : (y))
#endif

#ifndef max
#define max(x, y) ((x > y) ? (x) : (y))
#endif


#define PTR_TO_UINT64(x)  ((uint64_t) (size_t) x)


#ifdef NDEBUG

#define assertf(expr, msg)  ((void)0)

#else

#include <stdlib.h>

#define assertf(expr, msg, ...) \
    if(!(expr)) { \
      fprintf(stderr, "%s:%d: " msg "\n", __FILE__, __LINE__, ##__VA_ARGS__); \
      abort(); \
    }

#endif

#endif



================================================
File: res/Thumbs.db
================================================
[Non-text file]

