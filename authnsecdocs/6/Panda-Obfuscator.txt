Directory structure:
└── barotyson-panda-obfuscator/
    ├── README.md
    ├── Panda Obfuscator.sln
    ├── Core/
    │   ├── Core.csproj
    │   ├── PandaContext.cs
    │   ├── PandaEngine.cs
    │   ├── PandaIG.cs
    │   ├── PandaMarker.cs
    │   ├── PandaModuleManager.cs
    │   ├── PandaProtection.cs
    │   ├── PandaState.cs
    │   ├── Register.cs
    │   ├── Helper/
    │   │   ├── Utils.cs
    │   │   ├── DnlibUtils/
    │   │   │   ├── DnlibUtils.cs
    │   │   │   ├── InjectHelper.cs
    │   │   │   └── CIL/
    │   │   │       └── InstructionUtils.cs
    │   │   └── Generator/
    │   │       └── Context/
    │   │           ├── Generator.cs
    │   │           ├── GeneratorType.cs
    │   │           ├── Integers/
    │   │           │   └── Randomizer.cs
    │   │           └── Strings/
    │   │               ├── Randomizer.cs
    │   │               └── RandomizerType.cs
    │   ├── ObfuscationUtils/
    │   │   └── ObfuscationMethodUtil.cs
    │   ├── Properties/
    │   │   └── AssemblyInfo.cs
    │   └── Protections/
    │       ├── ConstantMelting/
    │       │   ├── ConstantMelting.cs
    │       │   └── ConstantMeltingProtection.cs
    │       ├── ControlFlow/
    │       │   ├── Block.cs
    │       │   ├── Blocks.cs
    │       │   ├── CFHelper.cs
    │       │   ├── ControlFlow.cs
    │       │   └── ControlFlowProtection.cs
    │       ├── IntMath/
    │       │   ├── INTMHelper.cs
    │       │   ├── IntMath.cs
    │       │   └── IntMathProtection.cs
    │       ├── ReferenceProxy/
    │       │   ├── RPBasic.cs
    │       │   ├── RPHelper.cs
    │       │   ├── RPNormal.cs
    │       │   ├── ReferenceProxy.cs
    │       │   └── ReferenceProxyProtection.cs
    │       └── StringEncoding/
    │           ├── BasicStringEncoding.cs
    │           ├── NormalStringEncoding.cs
    │           ├── RuntimeHelper.cs
    │           ├── StringEncodingProtection.cs
    │           └── StringHelper.cs
    ├── DarkUI/
    │   ├── DarkUI.csproj
    │   ├── Collections/
    │   │   ├── ObservableList.cs
    │   │   └── ObservableListModified.cs
    │   ├── Config/
    │   │   ├── Colors.cs
    │   │   └── Consts.cs
    │   ├── Controls/
    │   │   ├── DarkButton.cs
    │   │   ├── DarkButtonStyle.cs
    │   │   ├── DarkCheckBox.cs
    │   │   ├── DarkContentAlignment.cs
    │   │   ├── DarkContextMenu.cs
    │   │   ├── DarkControlState.cs
    │   │   ├── DarkLabel.cs
    │   │   ├── DarkListItem.cs
    │   │   ├── DarkListView.cs
    │   │   ├── DarkMenuStrip.cs
    │   │   ├── DarkRadioButton.cs
    │   │   ├── DarkScrollBar.cs
    │   │   ├── DarkScrollBase.cs
    │   │   ├── DarkScrollOrientation.cs
    │   │   ├── DarkScrollView.cs
    │   │   ├── DarkSectionPanel.cs
    │   │   ├── DarkSeparator.cs
    │   │   ├── DarkStatusStrip.cs
    │   │   ├── DarkTextBox.cs
    │   │   ├── DarkTitle.cs
    │   │   ├── DarkToolStrip.cs
    │   │   ├── DarkTreeNode.cs
    │   │   ├── DarkTreeView.cs
    │   │   └── ScrollValueEventArgs.cs
    │   ├── Docking/
    │   │   ├── DarkDockArea.cs
    │   │   ├── DarkDockContent.cs
    │   │   ├── DarkDockGroup.cs
    │   │   ├── DarkDockPanel.cs
    │   │   ├── DarkDockRegion.cs
    │   │   ├── DarkDockSplitter.cs
    │   │   ├── DarkDockTab.cs
    │   │   ├── DarkDockTabArea.cs
    │   │   ├── DarkDocument.cs
    │   │   ├── DarkSplitterType.cs
    │   │   ├── DarkToolWindow.cs
    │   │   ├── DockContentEventArgs.cs
    │   │   ├── DockDropArea.cs
    │   │   ├── DockDropCollection.cs
    │   │   ├── DockGroupState.cs
    │   │   ├── DockInsertType.cs
    │   │   ├── DockPanelState.cs
    │   │   └── DockRegionState.cs
    │   ├── Extensions/
    │   │   ├── BitmapExtensions.cs
    │   │   └── IEnumerableExtensions.cs
    │   ├── Forms/
    │   │   ├── DarkDialog.Designer.cs
    │   │   ├── DarkDialog.cs
    │   │   ├── DarkDialog.resx
    │   │   ├── DarkDialogButton.cs
    │   │   ├── DarkForm.cs
    │   │   ├── DarkMessageBox.Designer.cs
    │   │   ├── DarkMessageBox.cs
    │   │   ├── DarkMessageBox.resx
    │   │   ├── DarkMessageBoxIcon.cs
    │   │   └── DarkTranslucentForm.cs
    │   ├── Icons/
    │   │   ├── DockIcons.Designer.cs
    │   │   ├── DockIcons.resx
    │   │   ├── MenuIcons.Designer.cs
    │   │   ├── MenuIcons.resx
    │   │   ├── MessageBoxIcons.Designer.cs
    │   │   ├── MessageBoxIcons.resx
    │   │   ├── ScrollIcons.Designer.cs
    │   │   ├── ScrollIcons.resx
    │   │   ├── TreeViewIcons.Designer.cs
    │   │   └── TreeViewIcons.resx
    │   ├── Properties/
    │   │   └── AssemblyInfo.cs
    │   ├── Renderers/
    │   │   ├── DarkMenuRenderer.cs
    │   │   └── DarkToolStripRenderer.cs
    │   ├── Resources/
    │   └── Win32/
    │       ├── ControlScrollFilter.cs
    │       ├── DockContentDragFilter.cs
    │       ├── DockResizeFilter.cs
    │       ├── Native.cs
    │       └── WindowsMessages.cs
    └── PandaObfuscator/
        ├── App.config
        ├── PandaObfuscator.csproj
        ├── Program.cs
        ├── addForm.Designer.cs
        ├── addForm.cs
        ├── addForm.resx
        ├── mainForm.Designer.cs
        ├── mainForm.cs
        ├── mainForm.resx
        └── Properties/
            ├── AssemblyInfo.cs
            ├── Resources.Designer.cs
            ├── Resources.resx
            ├── Settings.Designer.cs
            └── Settings.settings

================================================
File: README.md
================================================
# Panda-Obfuscator
PandaObfuscator an simple Obfuscator, free, OpenSource for .Net Applications

# Obfuscation Features
* ~ ControlFlow
* ~ IntMath
* ~ StringEncoding
* ~ ReferenceProxy 
* ~ ConstantMelting 
 
# Credits
CodeOfDark

# Thanks to:
TheProxy and Xenocode



================================================
File: Panda Obfuscator.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 15
VisualStudioVersion = 15.0.27703.2047
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Core", "Core\Core.csproj", "{B0F3B180-0BD3-485D-8000-A9BA681E018C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "PandaObfuscator", "PandaObfuscator\PandaObfuscator.csproj", "{1F2982B5-80FC-408E-8CE6-1742DD230FD7}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DarkUI", "DarkUI\DarkUI.csproj", "{F19472F5-8C44-4C51-A8A0-B9DE5F555255}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B0F3B180-0BD3-485D-8000-A9BA681E018C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B0F3B180-0BD3-485D-8000-A9BA681E018C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B0F3B180-0BD3-485D-8000-A9BA681E018C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B0F3B180-0BD3-485D-8000-A9BA681E018C}.Release|Any CPU.Build.0 = Release|Any CPU
		{1F2982B5-80FC-408E-8CE6-1742DD230FD7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1F2982B5-80FC-408E-8CE6-1742DD230FD7}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1F2982B5-80FC-408E-8CE6-1742DD230FD7}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1F2982B5-80FC-408E-8CE6-1742DD230FD7}.Release|Any CPU.Build.0 = Release|Any CPU
		{F19472F5-8C44-4C51-A8A0-B9DE5F555255}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F19472F5-8C44-4C51-A8A0-B9DE5F555255}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F19472F5-8C44-4C51-A8A0-B9DE5F555255}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F19472F5-8C44-4C51-A8A0-B9DE5F555255}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {16ACF8AD-3DF0-41D1-87FA-DA3CA64DDDD2}
	EndGlobalSection
EndGlobal



================================================
File: Core/Core.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{B0F3B180-0BD3-485D-8000-A9BA681E018C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Core</RootNamespace>
    <AssemblyName>Core</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="dnlib">
      <HintPath>..\..\..\Obfuscations\Basics\CFlow\CFlow\bin\Debug\dnlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Helper\DnlibUtils\CIL\InstructionUtils.cs" />
    <Compile Include="Helper\DnlibUtils\DnlibUtils.cs" />
    <Compile Include="Helper\DnlibUtils\InjectHelper.cs" />
    <Compile Include="Helper\Generator\Context\Generator.cs" />
    <Compile Include="Helper\Generator\Context\GeneratorType.cs" />
    <Compile Include="Helper\Generator\Context\Integers\Randomizer.cs" />
    <Compile Include="Helper\Generator\Context\Strings\Randomizer.cs" />
    <Compile Include="Helper\Generator\Context\Strings\RandomizerType.cs" />
    <Compile Include="Helper\Utils.cs" />
    <Compile Include="ObfuscationUtils\ObfuscationMethodUtil.cs" />
    <Compile Include="PandaContext.cs" />
    <Compile Include="PandaEngine.cs" />
    <Compile Include="PandaIG.cs" />
    <Compile Include="PandaMarker.cs" />
    <Compile Include="PandaModuleManager.cs" />
    <Compile Include="PandaProtection.cs" />
    <Compile Include="PandaState.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Protections\ConstantMelting\ConstantMelting.cs" />
    <Compile Include="Protections\ConstantMelting\ConstantMeltingProtection.cs" />
    <Compile Include="Protections\ControlFlow\Block.cs" />
    <Compile Include="Protections\ControlFlow\Blocks.cs" />
    <Compile Include="Protections\ControlFlow\CFHelper.cs" />
    <Compile Include="Protections\ControlFlow\ControlFlow.cs" />
    <Compile Include="Protections\ControlFlow\ControlFlowProtection.cs" />
    <Compile Include="Protections\IntMath\IntMath.cs" />
    <Compile Include="Protections\IntMath\IntMathProtection.cs" />
    <Compile Include="Protections\IntMath\INTMHelper.cs" />
    <Compile Include="Protections\ReferenceProxy\ReferenceProxy.cs" />
    <Compile Include="Protections\ReferenceProxy\ReferenceProxyProtection.cs" />
    <Compile Include="Protections\ReferenceProxy\RPBasic.cs" />
    <Compile Include="Protections\ReferenceProxy\RPHelper.cs" />
    <Compile Include="Protections\ReferenceProxy\RPNormal.cs" />
    <Compile Include="Protections\StringEncoding\BasicStringEncoding.cs" />
    <Compile Include="Protections\StringEncoding\NormalStringEncoding.cs" />
    <Compile Include="Protections\StringEncoding\RuntimeHelper.cs" />
    <Compile Include="Protections\StringEncoding\StringHelper.cs" />
    <Compile Include="Protections\StringEncoding\StringEncodingProtection.cs" />
    <Compile Include="Register.cs" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: Core/PandaContext.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using Core.Protections.ReferenceProxy;
using dnlib.DotNet;
using dnlib.DotNet.Writer;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public class PandaContext
    {
        public List<PandaProtection> pandaProtections;
        public ModuleDef moduleDef;
        public ModuleWriterOptions moduleWriterOptions;
        public Register register;
        public PandaIG pandaIG;
        string _path;
        public PandaContext(String path)
        {
            moduleDef = ModuleDefMD.Load(path);
            _path = path;
            pandaProtections = new List<PandaProtection>();
            register = new Register();
            pandaIG = new PandaIG();
        }
        public string newPath()
        {
            string basePath = Path.GetDirectoryName(_path);
            string newDirectoryName = Directory.CreateDirectory(Path.Combine(basePath, "PandaObfuscator\\")).FullName;
            return Path.Combine(newDirectoryName + Path.GetFileName(_path));
        }
        
        public bool Write()
        {
            return Write(newPath());
        }
        public bool Write(string path)
        {
            try{
                
                moduleWriterOptions = new ModuleWriterOptions(moduleDef);
                moduleWriterOptions.Logger = DummyLogger.NoThrowInstance;
                moduleDef.Write(path, moduleWriterOptions);
                return true;
            }catch(Exception e) {
                return false;
            }
        }
        public List<PandaProtection> GetPandaProtection() { return register.getRegistredModules(); }
        public List<PandaProtection> getIGModules() { return pandaIG.getIGModules(); }
        public void addIGModule(PandaProtection pandaProtection)
        {
            pandaIG.RegisterIGModule(pandaProtection);
        }
        public void removeIGModule(PandaProtection pandaProtection)
        {
            pandaIG.UnRegisterIGModule(pandaProtection);
        }
    }
}



================================================
File: Core/PandaEngine.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public class PandaEngine
    {
        PandaContext _pandaContext;
        PandaModuleManager moduleManager;
        public PandaEngine(PandaContext pandaContext)
        {
            if (pandaContext == null)
                new ArgumentNullException("pandaContext is null!");
            _pandaContext = pandaContext;
            moduleManager = new PandaModuleManager();
            foreach (PandaProtection p in moduleManager.pandaProtections())
                p.Register(pandaContext);
        }
        public List<PandaProtection> GetPandaProtections() { return _pandaContext.GetPandaProtection(); }

        public bool runModules(PandaState pandaState, PandaContext pandaContext)
        {
            new PandaMarker().Execute(pandaState, pandaContext);
            if (pandaContext.pandaIG.getIGModules() == null)
                return false;
            if (pandaContext.pandaIG.getIGModules().Count == 0)
                return false;

            foreach (PandaProtection p in pandaContext.register.getRegistredModules())
            {
                foreach (PandaProtection panda in pandaContext.pandaIG.getIGModules())
                    if (p.Id == panda.Id)
                        panda.Execute(pandaState, pandaContext);
            }


            
            return true;
        }
    }
}



================================================
File: Core/PandaIG.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public class PandaIG
    {
        private List<PandaProtection> pandaProtections;
        public PandaIG()
        {
            pandaProtections = new List<PandaProtection>();
        }
        public void RegisterIGModule(PandaProtection pandaProtection)
        {
            if (pandaProtection == null)
                new ArgumentNullException("pandaProtection cannot be null!");
            if (pandaProtection.Name == null)
                new ArgumentNullException("pandaProtection.Name cannot be null!");
            if (pandaProtection.Description == null)
                new ArgumentNullException("pandaProtection.Description cannot be null!");
            if (pandaProtection.Id == null)
                new ArgumentNullException("pandaProtection.Id cannot be null!");
            if (pandaProtection.Author == null)
                new ArgumentNullException("pandaProtection.Author cannot be null!");
            pandaProtections.Add(pandaProtection);
        }
        public void UnRegisterIGModule(PandaProtection pandaProtection)
        {
            if (pandaProtection == null)
                new ArgumentNullException("pandaProtection cannot be null!");
            if (pandaProtection.Name == null)
                new ArgumentNullException("pandaProtection.Name cannot be null!");
            if (pandaProtection.Description == null)
                new ArgumentNullException("pandaProtection.Description cannot be null!");
            if (pandaProtection.Id == null)
                new ArgumentNullException("pandaProtection.Id cannot be null!");
            if (pandaProtection.Author == null)
                new ArgumentNullException("pandaProtection.Author cannot be null!");
            pandaProtections.Remove(pandaProtection);
        }
        public bool contains(String pandaProtectionID)
        {
            foreach (PandaProtection panda in getIGModules())
                if (panda.Id == pandaProtectionID)
                    return true;
            return false;
        }
        public List<PandaProtection> getIGModules() { return pandaProtections; }
    }
}



================================================
File: Core/PandaMarker.cs
================================================
ï»¿using dnlib.DotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    class PandaMarker : PandaProtection
    {
        public override string Name => "PandaMarker";

        public override string Description => "PandaMarker an simple class to make sure this app protected by PandaObfuscator";

        public override string Id => "panda.PandaObfuscator";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            pandaContext.moduleDef.GlobalType.NestedTypes.Add(new TypeDefUser("PandaObfuscator"));
        }

        public override void Register(PandaContext pandaContext)
        {
            //...
        }
    }
}



================================================
File: Core/PandaModuleManager.cs
================================================
ï»¿using Core.Protections.ConstantMelting;
using Core.Protections.ControlFlow;
using Core.Protections.IntMath;
using Core.Protections.ReferenceProxy;
using Core.Protections.StringEncoding;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
   public class PandaModuleManager
    {
        public List<PandaProtection> pandaProtections()
        {
            return new List<PandaProtection>()
            {
                new StringEncodingProtection(),
                new ControlFlowProtection(),
                new ConstantMeltingProtection(),
                new IntMathProtection(),
                new ReferenceProxyProtection()
                
            };
        }
    }
}



================================================
File: Core/PandaProtection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public abstract class PandaProtection
    {
        public abstract string Name { get; }
        public abstract string Description { get; }
        public abstract string Id { get; }
        public abstract string Author { get; }
        public abstract void Register(PandaContext pandaContext);
        public abstract void Execute(PandaState pandaState, PandaContext pandaContext);
    }
}



================================================
File: Core/PandaState.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public enum PandaState
    {
        Basic,
        Normal
    }
}



================================================
File: Core/Register.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core
{
    public class Register
    {
        private List<PandaProtection> registredModules;
        public Register()
        {
            if (registredModules == null)
                registredModules = new List<PandaProtection>();
        }
        public void RegisterModule(PandaProtection pandaProtection)
        {
            if (pandaProtection == null)
                new ArgumentNullException("pandaProtection cannot be null!");
            if (pandaProtection.Name == null)
                new ArgumentNullException("pandaProtection.Name cannot be null!");
            if (pandaProtection.Description == null)
                new ArgumentNullException("pandaProtection.Description cannot be null!");
            if (pandaProtection.Id == null)
                new ArgumentNullException("pandaProtection.Id cannot be null!");
            if (pandaProtection.Author == null)
                new ArgumentNullException("pandaProtection.Author cannot be null!");
            registredModules.Add(pandaProtection);
        }
        public List<PandaProtection> getRegistredModules() { return registredModules; }
    }
}



================================================
File: Core/Helper/Utils.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper
{
    public static class Utils
    {
        public static void Shuffle<T>(this IList<T> list)
        {
            RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();
            int n = list.Count;
            while (n > 1)
            {
                byte[] box = new byte[1];
                do provider.GetBytes(box);
                while (!(box[0] < n * (Byte.MaxValue / n)));
                int k = (box[0] % n);
                n--;
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
        }
    }
}



================================================
File: Core/Helper/DnlibUtils/DnlibUtils.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.DnlibUtils
{
    class DnlibUtils
    {
        public static IEnumerable<IDnlibDef> FindDefinitions(ModuleDef module)
        {
            yield return module;
            foreach (TypeDef type in module.GetTypes())
            {
                yield return type;
                foreach (MethodDef method in type.Methods)
                    yield return method;

                foreach (FieldDef field in type.Fields)
                    yield return field;
                foreach (PropertyDef prop in type.Properties)
                    yield return prop;
                foreach (EventDef evt in type.Events)
                    yield return evt;
            }
        }
        public static IEnumerable<IDnlibDef> FindDefinitions(TypeDef typeDef)
        {
            yield return typeDef;
            foreach (TypeDef nestedType in typeDef.NestedTypes)
                yield return nestedType;
            foreach (MethodDef method in typeDef.Methods)
                yield return method;
            foreach (FieldDef field in typeDef.Fields)
                yield return field;
            foreach (PropertyDef prop in typeDef.Properties)
                yield return prop;
            foreach (EventDef evt in typeDef.Events)
                yield return evt;
        }
        public static bool IsDelegate(TypeDef type)
        {
            if (type.BaseType == null)
                return false;
            string fullName = type.BaseType.FullName;
            return fullName == "System.Delegate" || fullName == "System.MulticastDelegate";
        }
        public static bool HasInstructions(MethodDef method)
        {
            if (method == null)
                new ArgumentNullException("method is null");
            if (method.Body.HasInstructions)
                return true;
            else
                return false;
        }
        public static bool HasVariables(MethodDef method)
        {
            if (method == null)
                new ArgumentNullException("method is null");
            if (method.Body.HasVariables)
                return true;
            else
                return false;
        }
        public static bool Simplify(MethodDef methodDef)
        {
            if (methodDef.Parameters == null)
                return false;
            methodDef.Body.SimplifyMacros(methodDef.Parameters);
            return true;
        }
        public static bool Optimize(MethodDef methodDef)
        {
            if (methodDef.Body == null)
                return false;
            methodDef.Body.OptimizeMacros();
            methodDef.Body.OptimizeBranches();
            return true;
        }
        public static bool hasExceptionHandlers(MethodDef methodDef)
        {
            if (methodDef.Body.HasExceptionHandlers)
                return true;
            return false;
        }
        public static void fixProxy(ModuleDef moduleDef)
        {
            AssemblyResolver assemblyResolver = new AssemblyResolver();
            ModuleContext moduleContext = new ModuleContext(assemblyResolver);
            assemblyResolver.DefaultModuleContext = moduleContext;
            assemblyResolver.EnableTypeDefCache = true;
            List<AssemblyRef> list = moduleDef.GetAssemblyRefs().ToList<AssemblyRef>();
            moduleDef.Context = moduleContext;
            foreach (AssemblyRef assemblyRef in list)
            {
                bool flag3 = assemblyRef == null;
                if (!flag3)
                {
                    AssemblyDef assemblyDef = assemblyResolver.Resolve(assemblyRef.FullName, moduleDef);
                    bool flag4 = assemblyDef == null;
                    if (!flag4)
                    {
                        moduleDef.Context.AssemblyResolver.AddToCache(assemblyDef);
                    }
                }
            }
        }
    }
}



================================================
File: Core/Helper/DnlibUtils/InjectHelper.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.DnlibUtils
{
    /// <summary>
    ///     Provides methods to inject a <see cref="TypeDef" /> into another module.
    /// </summary>
    public static class InjectHelper
    {
        /// <summary>
        ///     Clones the specified origin TypeDef.
        /// </summary>
        /// <param name="origin">The origin TypeDef.</param>
        /// <returns>The cloned TypeDef.</returns>
        static TypeDefUser Clone(TypeDef origin)
        {
            var ret = new TypeDefUser(origin.Namespace, origin.Name);
            ret.Attributes = origin.Attributes;

            if (origin.ClassLayout != null)
                ret.ClassLayout = new ClassLayoutUser(origin.ClassLayout.PackingSize, origin.ClassSize);

            foreach (GenericParam genericParam in origin.GenericParameters)
                ret.GenericParameters.Add(new GenericParamUser(genericParam.Number, genericParam.Flags, "-"));

            return ret;
        }

        /// <summary>
        ///     Clones the specified origin MethodDef.
        /// </summary>
        /// <param name="origin">The origin MethodDef.</param>
        /// <returns>The cloned MethodDef.</returns>
        static MethodDefUser Clone(MethodDef origin)
        {
            var ret = new MethodDefUser(origin.Name, null, origin.ImplAttributes, origin.Attributes);

            foreach (GenericParam genericParam in origin.GenericParameters)
                ret.GenericParameters.Add(new GenericParamUser(genericParam.Number, genericParam.Flags, "-"));

            return ret;
        }

        /// <summary>
        ///     Clones the specified origin FieldDef.
        /// </summary>
        /// <param name="origin">The origin FieldDef.</param>
        /// <returns>The cloned FieldDef.</returns>
        static FieldDefUser Clone(FieldDef origin)
        {
            var ret = new FieldDefUser(origin.Name, null, origin.Attributes);
            return ret;
        }

        /// <summary>
        ///     Populates the context mappings.
        /// </summary>
        /// <param name="typeDef">The origin TypeDef.</param>
        /// <param name="ctx">The injection context.</param>
        /// <returns>The new TypeDef.</returns>
        static TypeDef PopulateContext(TypeDef typeDef, InjectContext ctx)
        {
            TypeDef ret;
            IDnlibDef existing;
            if (!ctx.Map.TryGetValue(typeDef, out existing))
            {
                ret = Clone(typeDef);
                ctx.Map[typeDef] = ret;
            }
            else
                ret = (TypeDef)existing;

            foreach (TypeDef nestedType in typeDef.NestedTypes)
                ret.NestedTypes.Add(PopulateContext(nestedType, ctx));

            foreach (MethodDef method in typeDef.Methods)
                ret.Methods.Add((MethodDef)(ctx.Map[method] = Clone(method)));

            foreach (FieldDef field in typeDef.Fields)
                ret.Fields.Add((FieldDef)(ctx.Map[field] = Clone(field)));

            return ret;
        }

        /// <summary>
        ///     Copies the information from the origin type to injected type.
        /// </summary>
        /// <param name="typeDef">The origin TypeDef.</param>
        /// <param name="ctx">The injection context.</param>
        static void CopyTypeDef(TypeDef typeDef, InjectContext ctx)
        {
            var newTypeDef = (TypeDef)ctx.Map[typeDef];

            newTypeDef.BaseType = (ITypeDefOrRef)ctx.Importer.Import(typeDef.BaseType);

            foreach (InterfaceImpl iface in typeDef.Interfaces)
                newTypeDef.Interfaces.Add(new InterfaceImplUser((ITypeDefOrRef)ctx.Importer.Import(iface.Interface)));
        }

        /// <summary>
        ///     Copies the information from the origin method to injected method.
        /// </summary>
        /// <param name="methodDef">The origin MethodDef.</param>
        /// <param name="ctx">The injection context.</param>
        static void CopyMethodDef(MethodDef methodDef, InjectContext ctx)
        {
            var newMethodDef = (MethodDef)ctx.Map[methodDef];

            newMethodDef.Signature = ctx.Importer.Import(methodDef.Signature);
            newMethodDef.Parameters.UpdateParameterTypes();

            if (methodDef.ImplMap != null)
                newMethodDef.ImplMap = new ImplMapUser(new ModuleRefUser(ctx.TargetModule, methodDef.ImplMap.Module.Name), methodDef.ImplMap.Name, methodDef.ImplMap.Attributes);

            foreach (CustomAttribute ca in methodDef.CustomAttributes)
                newMethodDef.CustomAttributes.Add(new CustomAttribute((ICustomAttributeType)ctx.Importer.Import(ca.Constructor)));

            if (methodDef.HasBody)
            {
                newMethodDef.Body = new CilBody(methodDef.Body.InitLocals, new List<Instruction>(), new List<ExceptionHandler>(), new List<Local>());
                newMethodDef.Body.MaxStack = methodDef.Body.MaxStack;

                var bodyMap = new Dictionary<object, object>();

                foreach (Local local in methodDef.Body.Variables)
                {
                    var newLocal = new Local(ctx.Importer.Import(local.Type));
                    newMethodDef.Body.Variables.Add(newLocal);
                    newLocal.Name = local.Name;
                    newLocal.PdbAttributes = local.PdbAttributes;

                    bodyMap[local] = newLocal;
                }

                foreach (Instruction instr in methodDef.Body.Instructions)
                {
                    var newInstr = new Instruction(instr.OpCode, instr.Operand);
                    newInstr.SequencePoint = instr.SequencePoint;

                    if (newInstr.Operand is IType)
                        newInstr.Operand = ctx.Importer.Import((IType)newInstr.Operand);

                    else if (newInstr.Operand is IMethod)
                        newInstr.Operand = ctx.Importer.Import((IMethod)newInstr.Operand);

                    else if (newInstr.Operand is IField)
                        newInstr.Operand = ctx.Importer.Import((IField)newInstr.Operand);

                    newMethodDef.Body.Instructions.Add(newInstr);
                    bodyMap[instr] = newInstr;
                }

                foreach (Instruction instr in newMethodDef.Body.Instructions)
                {
                    if (instr.Operand != null && bodyMap.ContainsKey(instr.Operand))
                        instr.Operand = bodyMap[instr.Operand];

                    else if (instr.Operand is Instruction[])
                        instr.Operand = ((Instruction[])instr.Operand).Select(target => (Instruction)bodyMap[target]).ToArray();
                }

                foreach (ExceptionHandler eh in methodDef.Body.ExceptionHandlers)
                    newMethodDef.Body.ExceptionHandlers.Add(new ExceptionHandler(eh.HandlerType)
                    {
                        CatchType = eh.CatchType == null ? null : (ITypeDefOrRef)ctx.Importer.Import(eh.CatchType),
                        TryStart = (Instruction)bodyMap[eh.TryStart],
                        TryEnd = (Instruction)bodyMap[eh.TryEnd],
                        HandlerStart = (Instruction)bodyMap[eh.HandlerStart],
                        HandlerEnd = (Instruction)bodyMap[eh.HandlerEnd],
                        FilterStart = eh.FilterStart == null ? null : (Instruction)bodyMap[eh.FilterStart]
                    });

                newMethodDef.Body.SimplifyMacros(newMethodDef.Parameters);
            }
        }

        /// <summary>
        ///     Copies the information from the origin field to injected field.
        /// </summary>
        /// <param name="fieldDef">The origin FieldDef.</param>
        /// <param name="ctx">The injection context.</param>
        static void CopyFieldDef(FieldDef fieldDef, InjectContext ctx)
        {
            var newFieldDef = (FieldDef)ctx.Map[fieldDef];

            newFieldDef.Signature = ctx.Importer.Import(fieldDef.Signature);
        }

        /// <summary>
        ///     Copies the information to the injected definitions.
        /// </summary>
        /// <param name="typeDef">The origin TypeDef.</param>
        /// <param name="ctx">The injection context.</param>
        /// <param name="copySelf">if set to <c>true</c>, copy information of <paramref name="typeDef" />.</param>
        static void Copy(TypeDef typeDef, InjectContext ctx, bool copySelf)
        {
            if (copySelf)
                CopyTypeDef(typeDef, ctx);

            foreach (TypeDef nestedType in typeDef.NestedTypes)
                Copy(nestedType, ctx, true);

            foreach (MethodDef method in typeDef.Methods)
                CopyMethodDef(method, ctx);

            foreach (FieldDef field in typeDef.Fields)
                CopyFieldDef(field, ctx);
        }

        /// <summary>
        ///     Injects the specified TypeDef to another module.
        /// </summary>
        /// <param name="typeDef">The source TypeDef.</param>
        /// <param name="target">The target module.</param>
        /// <returns>The injected TypeDef.</returns>
        public static TypeDef Inject(TypeDef typeDef, ModuleDef target)
        {
            var ctx = new InjectContext(typeDef.Module, target);
            PopulateContext(typeDef, ctx);
            Copy(typeDef, ctx, true);
            return (TypeDef)ctx.Map[typeDef];
        }

        /// <summary>
        ///     Injects the specified MethodDef to another module.
        /// </summary>
        /// <param name="methodDef">The source MethodDef.</param>
        /// <param name="target">The target module.</param>
        /// <returns>The injected MethodDef.</returns>
        public static MethodDef Inject(MethodDef methodDef, ModuleDef target)
        {
            var ctx = new InjectContext(methodDef.Module, target);
            ctx.Map[methodDef] = Clone(methodDef);
            CopyMethodDef(methodDef, ctx);
            return (MethodDef)ctx.Map[methodDef];
        }

        /// <summary>
        ///     Injects the members of specified TypeDef to another module.
        /// </summary>
        /// <param name="typeDef">The source TypeDef.</param>
        /// <param name="newType">The new type.</param>
        /// <param name="target">The target module.</param>
        /// <returns>Injected members.</returns>
        public static IEnumerable<IDnlibDef> Inject(TypeDef typeDef, TypeDef newType, ModuleDef target)
        {
            var ctx = new InjectContext(typeDef.Module, target);
            ctx.Map[typeDef] = newType;
            PopulateContext(typeDef, ctx);
            Copy(typeDef, ctx, false);
            return ctx.Map.Values.Except(new[] { newType });
        }

        /// <summary>
        ///     Context of the injection process.
        /// </summary>
        class InjectContext : ImportResolver
        {
            /// <summary>
            ///     The mapping of origin definitions to injected definitions.
            /// </summary>
            public readonly Dictionary<IDnlibDef, IDnlibDef> Map = new Dictionary<IDnlibDef, IDnlibDef>();

            /// <summary>
            ///     The module which source type originated from.
            /// </summary>
            public readonly ModuleDef OriginModule;

            /// <summary>
            ///     The module which source type is being injected to.
            /// </summary>
            public readonly ModuleDef TargetModule;

            /// <summary>
            ///     The importer.
            /// </summary>
            readonly Importer importer;

            /// <summary>
            ///     Initializes a new instance of the <see cref="InjectContext" /> class.
            /// </summary>
            /// <param name="module">The origin module.</param>
            /// <param name="target">The target module.</param>
            public InjectContext(ModuleDef module, ModuleDef target)
            {
                OriginModule = module;
                TargetModule = target;
                importer = new Importer(target, ImporterOptions.TryToUseTypeDefs);
                importer.Resolver = this;
            }

            /// <summary>
            ///     Gets the importer.
            /// </summary>
            /// <value>The importer.</value>
            public Importer Importer
            {
                get { return importer; }
            }

            /// <inheritdoc />
            public override TypeDef Resolve(TypeDef typeDef)
            {
                if (Map.ContainsKey(typeDef))
                    return (TypeDef)Map[typeDef];
                return null;
            }

            /// <inheritdoc />
            public override MethodDef Resolve(MethodDef methodDef)
            {
                if (Map.ContainsKey(methodDef))
                    return (MethodDef)Map[methodDef];
                return null;
            }

            /// <inheritdoc />
            public override FieldDef Resolve(FieldDef fieldDef)
            {
                if (Map.ContainsKey(fieldDef))
                    return (FieldDef)Map[fieldDef];
                return null;
            }
        }
    }

}



================================================
File: Core/Helper/DnlibUtils/CIL/InstructionUtils.cs
================================================
ï»¿using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.DnlibUtils.CIL
{
    static class InstructionUtils
    {

        public static void InsertBefore(this CilBody body, Instruction target, Instruction instruction)
        {
            if (target == null)
                throw new ArgumentNullException("target is null");
            if (instruction == null)
                throw new ArgumentNullException("instruction is null");
            var index = body.Instructions.IndexOf(target);
            if (index == -1)
                throw new ArgumentOutOfRangeException("target");
            body.Instructions.Insert(index, instruction);
        }

        public static void InsertAfter(this CilBody body, Instruction target, Instruction instruction)
        {
            if (target == null)
                throw new ArgumentNullException("target is null");
            if (instruction == null)
                throw new ArgumentNullException("instruction is null");
            var index = body.Instructions.IndexOf(target);
            if (index == -1)
                throw new ArgumentOutOfRangeException("target");
            body.Instructions.Insert(index + 1, instruction);
        }

        public static void Replace(this CilBody body, Instruction target, Instruction instruction)
        {
            if (target == null)
                throw new ArgumentNullException("target is null");
            if (instruction == null)
                throw new ArgumentNullException("instruction");
            InsertAfter(body, target, instruction);
            Remove(body, target);
        }
        public static void Remove(this CilBody body, Instruction instruction)
        {
            if (instruction == null)
                throw new ArgumentNullException("instruction");
            if (!body.Instructions.Remove(instruction))
                throw new ArgumentOutOfRangeException("cannot remove instruction");

        }
    }
}



================================================
File: Core/Helper/Generator/Context/Generator.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.Generator.Context
{
    class Generator
    {
        Random random;
        public Generator(Random random)
        {
            if (random == null)
                new ArgumentNullException("random is Null");
            this.random = random;
        }
        public Generator()
        {
            if (random == null)
                random = new Random(Guid.NewGuid().GetHashCode());
            
        }

        public T Generate<T>(GeneratorType generatorType, int max)
        {
            if (max == 0)
                new ArgumentNullException("max cannot be zero");
            if (generatorType == GeneratorType.Integer)
                return (T)(object)new Integers.Randomizer(random).Generate(0, max);
            else
                return (T)(object)new Strings.Randomizer(random).Generate(Strings.RandomizerType.Alphabetic, max);
        }
        public List<T> GenerateList<T>(GeneratorType generatorType, int max)
        {
            List<T> ts = new List<T>();
            if (max == 0)
                new ArgumentNullException("max cannot be zero");
            if (generatorType == GeneratorType.Integer)
                ts.Add((T)(object)new Integers.Randomizer(random).Generate());
            else
                ts.Add((T)(object)new Strings.Randomizer(random).Generate());
            return ts;
        }
    }
}



================================================
File: Core/Helper/Generator/Context/GeneratorType.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.Generator.Context
{
    enum GeneratorType
    {
        String,
        Integer
    }
}



================================================
File: Core/Helper/Generator/Context/Integers/Randomizer.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.Generator.Context.Integers
{
    class Randomizer
    {
        Random random;
        public Randomizer(Random random)
        {
            if (random == null)
                new ArgumentNullException("random is Null");
            this.random = random;
        }
        public Randomizer()
        {
            if (random == null)
                random = new Random(Guid.NewGuid().GetHashCode());
        }
        public int Generate(int min, int max)
        {
            if (min == max)
                new ArgumentException("minimum integer cannot be the same for maximum integer");
            if (min > max)
                new ArgumentOutOfRangeException("minimum integer cannot be bigger than maximum integer");
            return random.Next(min, max);
        }
        public int Generate()
        {
            return random.Next(0, int.MaxValue);
        }

        public List<int> GenerateList(int min, int max, int size)
        {
            if (size == 0)
                new ArgumentOutOfRangeException("count cannot be zero");
            List<int> vs = new List<int>();
            for (int i = 0; i < size; i++)
                vs.Add(Generate(min, max));
            return vs;
        }
        public List<int> GenerateList(int size)
        {
            if (size == 0)
                new ArgumentOutOfRangeException("count cannot be zero");
            List<int> vs = new List<int>();
            for (int i = 0; i < size; i++)
                vs.Add(Generate());
            return vs;
        }
    }
}



================================================
File: Core/Helper/Generator/Context/Strings/Randomizer.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.Generator.Context.Strings
{
    class Randomizer
    {
        Random random;
        public Randomizer(Random random)
        {
            if (random == null)
                new ArgumentNullException("random is Null");
            this.random = random;
        }
        public Randomizer()
        {
            if (random == null)
                random = new Random(Guid.NewGuid().GetHashCode());
        }
        public string Generate(RandomizerType randomizerType, int maxSize)
        {
            if (maxSize == 0)
                new ArgumentNullException("size cannot be zero");
            char[] chars = (randomizerType == RandomizerType.Alphabetic ? "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray() : "れづれなるまゝに日暮らし硯にむかひて心にうりゆくよな事を、こはかとなく書きつくればあやうこそものぐるほけれ".ToCharArray());
            byte[] data = new byte[1];
            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
            {
                crypto.GetNonZeroBytes(data);
                data = new byte[maxSize];
                crypto.GetNonZeroBytes(data);
            }
            StringBuilder result = new StringBuilder(maxSize);
            foreach (byte b in data)
                result.Append(chars[b % (chars.Length)]);
            return result.ToString();
        }
        public string Generate(RandomizerType randomizerType)
        {
            return Generate(randomizerType, 10);
        }
        public string Generate()
        {
            return Generate(RandomizerType.Alphabetic, 10);
        }
        public List<string> GenerateList(RandomizerType randomizerType, int maxSize, int maxListSize)
        {
            if (maxSize == 0)
                new ArgumentNullException("size cannot be zero");
            if (maxListSize == 0)
                new ArgumentNullException("list size cannot be zero");
            List<string> stringList = new List<string>();
            for (int i = 0; i < maxListSize; i++)
                stringList.Add(Generate(randomizerType, maxSize));
            return stringList;
        }
        public List<string> GenerateList(RandomizerType randomizerType, int maxListSize)
        {
            if (maxListSize == 0)
                new ArgumentNullException("list size cannot be zero");
            List<string> stringList = new List<string>();
            for (int i = 0; i < maxListSize; i++)
                stringList.Add(Generate(randomizerType));
            return stringList;
        }
    }
}



================================================
File: Core/Helper/Generator/Context/Strings/RandomizerType.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Helper.Generator.Context.Strings
{
    enum RandomizerType
    {
        Alphabetic,
        Unreadable
    }
}



================================================
File: Core/ObfuscationUtils/ObfuscationMethodUtil.cs
================================================
ï»¿using dnlib.DotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.ObfuscationUtils
{
    public class ObfuscationMethodUtil
    {
        
        public static bool canObfuscate(MethodDef methodDef)
        {
            if (!methodDef.HasBody)
                return false;
            if (!methodDef.Body.HasInstructions)
                return false;
            if (methodDef.DeclaringType.IsGlobalModuleType)
                return false;

            return true;

        }
    }
}



================================================
File: Core/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Core")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Core")]
[assembly: AssemblyCopyright("Copyright Â©  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("b0f3b180-0bd3-485d-8000-a9ba681e018c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: Core/Protections/ConstantMelting/ConstantMelting.cs
================================================
ï»¿using Core.Helper.Generator.Context;
using Core.ObfuscationUtils;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ConstantMelting
{
    public class ConstantMelting
    {
        private Generator generator = new Generator();
        public ConstantMelting(PandaContext pandaContext)
        {
            Melting(pandaContext);
        }
        public void Melting(PandaContext pandaContext)
        {
            foreach(TypeDef type in pandaContext.moduleDef.Types.ToArray())
            {
                foreach(MethodDef method in type.Methods.ToArray())
                {
                    StringOutliner(method);
                    IntegerOutliner(method);
                }
            }
        }
        private void StringOutliner(MethodDef methodDef)
        {
            if (ObfuscationMethodUtil.canObfuscate(methodDef))
            {
                foreach(Instruction instruction in methodDef.Body.Instructions)
                {
                    if (instruction.OpCode != OpCodes.Ldstr) continue;
                    MethodDef meth = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), MethodSig.CreateStatic(methodDef.DeclaringType.Module.CorLibTypes.String), MethodImplAttributes.IL | MethodImplAttributes.Managed, MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.HideBySig) { Body = new CilBody() };
                    meth.Body.Instructions.Add(new Instruction(OpCodes.Ldstr, instruction.Operand.ToString()));
                    meth.Body.Instructions.Add(new Instruction(OpCodes.Ret));
                    methodDef.DeclaringType.Methods.Add(meth);
                    instruction.OpCode = OpCodes.Call;
                    instruction.Operand = meth;
                }
            }
        }
        private void IntegerOutliner(MethodDef methodDef)
        {
            if (ObfuscationMethodUtil.canObfuscate(methodDef))
            {
                foreach (Instruction instruction in methodDef.Body.Instructions)
                {
                    if (instruction.OpCode != OpCodes.Ldc_I4) continue;
                    MethodDef meth = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), MethodSig.CreateStatic(methodDef.DeclaringType.Module.CorLibTypes.Int32), MethodImplAttributes.IL | MethodImplAttributes.Managed, MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.HideBySig) { Body = new CilBody() };
                    meth.Body.Instructions.Add(new Instruction(OpCodes.Ldc_I4, instruction.GetLdcI4Value()));
                    meth.Body.Instructions.Add(new Instruction(OpCodes.Ret));
                    methodDef.DeclaringType.Methods.Add(meth);
                    instruction.OpCode = OpCodes.Call;
                    instruction.Operand = meth;
                }
            }
        }


    }
}



================================================
File: Core/Protections/ConstantMelting/ConstantMeltingProtection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ConstantMelting
{
    class ConstantMeltingProtection : PandaProtection
    {
        public override string Name => "Constant Melting";

        public override string Description => "Melting String and Integer (Copy it into another method and call it)";

        public override string Id => "panda.ConstantMelting";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            new ConstantMelting(pandaContext);
        }

        public override void Register(PandaContext pandaContext)
        {
            pandaContext.register.RegisterModule(this);
        }
    }
}



================================================
File: Core/Protections/ControlFlow/Block.cs
================================================
ï»¿using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ControlFlow
{
    public class Block
    {
        public int ID = 0;
        public int nextBlock = 0;
        public List<Instruction> instructions = new List<Instruction>();
    }
}



================================================
File: Core/Protections/ControlFlow/Blocks.cs
================================================
ï»¿using Core.Helper;
using Core.Helper.Generator.Context;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ControlFlow
{
    public class Blocks
    {
        public List<Block> blocks = new List<Block>();
        private Generator generator = new Generator();
        public Block getBlock(int id)
        {
            return blocks.Single(block => block.ID == id);
        }

        public void Scramble(out Blocks incGroups)
        {
            Blocks groups = new Blocks();
            foreach (var group in blocks)
                groups.blocks.Insert(generator.Generate<int>(GeneratorType.Integer, groups.blocks.Count), group);
            incGroups = groups;
        }

    }
}



================================================
File: Core/Protections/ControlFlow/CFHelper.cs
================================================
ï»¿using Core.Helper.Generator.Context;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ControlFlow
{
    public class CFHelper
    {
        private Generator generator = new Generator();
        public bool HasUnsafeInstructions(MethodDef methodDef)
        {
            if (methodDef.HasBody)
            {
                if (methodDef.Body.HasVariables)
                    return methodDef.Body.Variables.Any(x => x.Type.IsPointer);
            }
            return false;
        }
        public Blocks GetBlocks(MethodDef method)
        {
            Blocks blocks = new Blocks();
            Block block = new Block();
            int Id = 0;
            int usage = 0;
            block.ID = Id;
            Id++;
            block.nextBlock = block.ID + 1;
            block.instructions.Add(Instruction.Create(OpCodes.Nop));
            blocks.blocks.Add(block);
            block = new Block();
            foreach (Instruction instruction in method.Body.Instructions)
            {
                int pops = 0;
                int stacks;
                instruction.CalculateStackUsage(out stacks, out pops);
                block.instructions.Add(instruction);
                usage += stacks - pops;
                if (stacks == 0)
                {
                    if (instruction.OpCode != OpCodes.Nop)
                    {
                        if (usage == 0 || instruction.OpCode == OpCodes.Ret)
                        {
                            
                            block.ID = Id;
                            Id++;
                            block.nextBlock = block.ID + 1;
                            blocks.blocks.Add(block);
                            block = new Block();
                        }
                    }
                }
            }
            return blocks;
        }
        public List<Instruction> Calc(int value)
        {
            List<Instruction> instructions = new List<Instruction>();
            int num = generator.Generate<int>(GeneratorType.Integer, 100000);
            bool once = Convert.ToBoolean(generator.Generate<int>(GeneratorType.Integer, 2));
            int num1 = generator.Generate<int>(GeneratorType.Integer, 100000);
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, value - num + (once ? (0 - num1) : num1)));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, num));
            instructions.Add(Instruction.Create(OpCodes.Add));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, num1));
            instructions.Add(Instruction.Create(once ? OpCodes.Add : OpCodes.Sub));
            return instructions;
        }
    }
}



================================================
File: Core/Protections/ControlFlow/ControlFlow.cs
================================================
ï»¿using Core.Helper;
using Core.Helper.DnlibUtils;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ControlFlow
{
    public class ControlFlow
    {
        public ControlFlow(PandaState pandaState, PandaContext pandaContext)
        {
            if (pandaContext != null)
                Execute(pandaState, pandaContext);

            new ArgumentNullException("pandaContext cannot be null");
        }
        public void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            CFHelper cFHelper = new CFHelper();
            foreach (TypeDef type in pandaContext.moduleDef.Types)
            {
                foreach (MethodDef method in type.Methods)
                {
                    if (method.HasBody && method.Body.Instructions.Count > 0 && !method.IsConstructor)
                    {
                        if (!cFHelper.HasUnsafeInstructions(method))
                        {
                            if (DnlibUtils.Simplify(method))
                            {
                                Blocks blocks = cFHelper.GetBlocks(method);
                                if (blocks.blocks.Count != 1)
                                {
                                    switch (pandaState)
                                    {
                                        case PandaState.Basic:
                                            toDoSwitcher(cFHelper, method, blocks, pandaContext);
                                            break;
                                        case PandaState.Normal:
                                            toDoBody(cFHelper, method, blocks, pandaContext);
                                            break;
                                    }
                                }
                                DnlibUtils.Optimize(method);
                            }
                        }
                    }

                }
            }
        }
        public void toDoSwitcher(CFHelper cFHelper, MethodDef method, Blocks blocks, PandaContext pandaContext)
        {
            List<Instruction> instructionsOperand = new List<Instruction>();
            method.Body.Instructions.Clear();

            Local local = new Local(pandaContext.moduleDef.CorLibTypes.Int32);
            method.Body.Variables.Add(local);
            foreach (Instruction instruction in cFHelper.Calc(0))
                method.Body.Instructions.Add(instruction);
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Stloc, local));
            Instruction target = Instruction.Create(OpCodes.Nop);
            method.Body.Instructions.Add(target);
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Ldloc, local));
            Instruction targetSwitch = Instruction.Create(OpCodes.Switch, instructionsOperand);
            method.Body.Instructions.Add(targetSwitch);
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Br, blocks.getBlock((blocks.blocks.Count - 1)).instructions[blocks.getBlock((blocks.blocks.Count - 1)).instructions.Count - 1]));

            foreach (Block block in blocks.blocks)
            {
                if (block != blocks.getBlock((blocks.blocks.Count - 1)))
                {

                    Instruction instr = Instruction.Create(OpCodes.Stloc, local);
                    instructionsOperand.Add(block.instructions[0]);
                    Instruction instruction4 = Instruction.Create(OpCodes.Nop);
                    foreach (Instruction instruction in block.instructions)
                        method.Body.Instructions.Add(instruction);
                    foreach (Instruction instruction in cFHelper.Calc(block.nextBlock))
                        method.Body.Instructions.Add(instruction);
                    method.Body.Instructions.Add(instr);
                    method.Body.Instructions.Add(instruction4);
                    method.Body.Instructions.Add(new Instruction(OpCodes.Br, target));
                    method.Body.Instructions.Add(instruction4);
                }
            }
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Br, blocks.getBlock((blocks.blocks.Count - 1)).instructions[0]));
            method.Body.Instructions.Add(new Instruction(OpCodes.Br, target));
            foreach (Instruction lastBlock in blocks.getBlock((blocks.blocks.Count - 1)).instructions)
                method.Body.Instructions.Add(lastBlock);

            instructionsOperand.Add(blocks.getBlock((blocks.blocks.Count - 1)).instructions[0]);

            targetSwitch.Operand = instructionsOperand;
        }
        public void toDoBody(CFHelper cFHelper, MethodDef method, Blocks blocks, PandaContext pandaContext)
        {
            blocks.Scramble(out blocks);
            method.Body.Instructions.Clear();
            Local local = new Local(pandaContext.moduleDef.CorLibTypes.Int32);
            method.Body.Variables.Add(local);
            Instruction target = Instruction.Create(OpCodes.Nop);
            Instruction instr = Instruction.Create(OpCodes.Br, target);
            foreach (Instruction instruction in cFHelper.Calc(0))
                method.Body.Instructions.Add(instruction);
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Stloc, local));
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Br, instr));
            method.Body.Instructions.Add(target);
            foreach (Block block in blocks.blocks)
            {
                if (block != blocks.getBlock((blocks.blocks.Count - 1)))
                {
                    method.Body.Instructions.Add(Instruction.Create(OpCodes.Ldloc, local));
                    foreach (Instruction instruction in cFHelper.Calc(block.ID))
                        method.Body.Instructions.Add(instruction);
                    method.Body.Instructions.Add(Instruction.Create(OpCodes.Ceq));
                    Instruction instruction4 = Instruction.Create(OpCodes.Nop);
                    method.Body.Instructions.Add(Instruction.Create(OpCodes.Brfalse, instruction4));
                    foreach (Instruction instruction in block.instructions)
                        method.Body.Instructions.Add(instruction);
                    foreach (Instruction instruction in cFHelper.Calc(block.nextBlock))
                        method.Body.Instructions.Add(instruction);

                    method.Body.Instructions.Add(Instruction.Create(OpCodes.Stloc, local));
                    method.Body.Instructions.Add(instruction4);
                }
            }
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Ldloc, local));
            foreach (Instruction instruction in cFHelper.Calc(blocks.blocks.Count - 1))
                method.Body.Instructions.Add(instruction);
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Ceq));
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Brfalse, instr));
            method.Body.Instructions.Add(Instruction.Create(OpCodes.Br, blocks.getBlock((blocks.blocks.Count - 1)).instructions[0]));
            method.Body.Instructions.Add(instr);
            foreach (Instruction lastBlock in blocks.getBlock((blocks.blocks.Count - 1)).instructions)
                method.Body.Instructions.Add(lastBlock);

        }
    }
}



================================================
File: Core/Protections/ControlFlow/ControlFlowProtection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ControlFlow
{
    class ControlFlowProtection : PandaProtection
    {
        public override string Name => "Control Flow";

        public override string Description => "This protection mangles the code in the methods.";

        public override string Id => "panda.ControlFlow";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            new ControlFlow(pandaState, pandaContext);
        }

        public override void Register(PandaContext pandaContext)
        {
            pandaContext.register.RegisterModule(this);
        }
    }
}



================================================
File: Core/Protections/IntMath/INTMHelper.cs
================================================
ï»¿using Core.Helper.Generator.Context;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.IntMath
{
    public class INTMHelper
    {
        private Generator generator = new Generator();
        public List<Instruction> Calc(int value)
        {
            List<Instruction> instructions = new List<Instruction>();
            int num = generator.Generate<int>(GeneratorType.Integer, 10000);
            bool once = Convert.ToBoolean(generator.Generate<int>(GeneratorType.Integer, 2));
            int num1 = generator.Generate<int>(GeneratorType.Integer, 10000);
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, value - num + (once ? (0 - num1) : num1)));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, num));
            instructions.Add(Instruction.Create(OpCodes.Add));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, num1));
            instructions.Add(Instruction.Create(once ? OpCodes.Add : OpCodes.Sub));
            return instructions;
        }
    }
}



================================================
File: Core/Protections/IntMath/IntMath.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.IntMath
{
    public class IntMath
    {
        public IntMath(PandaContext pandaContext)
        {
            Execute(pandaContext);
        }
        public void Execute(PandaContext panda)
        {
            INTMHelper IMHelper = new INTMHelper();
            foreach (TypeDef type in panda.moduleDef.Types)
            {
                foreach(MethodDef method in type.Methods)
                {
                    if (ObfuscationUtils.ObfuscationMethodUtil.canObfuscate(method))
                    {
                        for(int i = 0; i < method.Body.Instructions.Count; i++)
                        {
                            Instruction instruction = method.Body.Instructions[i];
                            if (instruction.Operand is int)
                            {
                                List<Instruction> instructions = IMHelper.Calc(Convert.ToInt32(instruction.Operand));
                                instruction.OpCode = OpCodes.Nop;
                                foreach (Instruction instr in instructions)
                                {
                                    method.Body.Instructions.Insert(i + 1, instr);
                                    i++;
                                }
                                
                            }
                        }
                    }
                }
            }
        }

    }
}



================================================
File: Core/Protections/IntMath/IntMathProtection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.IntMath
{
    class IntMathProtection : PandaProtection
    {
        public override string Name => "Integer Math";

        public override string Description => "Protecting your integer by math operators Example { + and - }.";

        public override string Id => "panda.IntMath";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            switch(pandaState)
            {
                case PandaState.Basic:
                    new IntMath(pandaContext);
                    break;
                case PandaState.Normal:
                    for(int i = 0; i < 1; i++)
                    {
                        new IntMath(pandaContext);
                    }
                    break;
            }
        }

        public override void Register(PandaContext pandaContext)
        {
            pandaContext.register.RegisterModule(this);
        }
    }
}



================================================
File: Core/Protections/ReferenceProxy/RPBasic.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using Core.Helper.Generator.Context;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ReferenceProxy
{
    public class RPBasic
    {
        private List<MethodDef> usedMethods = new List<MethodDef>();
        private Generator generator = new Generator();
        public void Excute(PandaContext pandaContext)
        {
            RPHelper rPHelper = new RPHelper();
            DnlibUtils.fixProxy(pandaContext.moduleDef);
            foreach (TypeDef type in pandaContext.moduleDef.Types.ToArray())
            {
                foreach (MethodDef method in type.Methods.ToArray())
                {
                    if (usedMethods.Contains(method)) continue;
                    if (ObfuscationUtils.ObfuscationMethodUtil.canObfuscate(method))
                    {
                        foreach (Instruction instruction in method.Body.Instructions.ToArray())
                        {

                            if (instruction.OpCode == OpCodes.Newobj)
                            {
                                IMethodDefOrRef methodDefOrRef = instruction.Operand as IMethodDefOrRef;
                                if (methodDefOrRef.IsMethodSpec) continue;
                                if (methodDefOrRef == null) continue;
                                MethodDef methodDef = rPHelper.GenerateMethod(methodDefOrRef, method);
                                if (methodDef == null) continue;
                                method.DeclaringType.Methods.Add(methodDef);
                                usedMethods.Add(methodDef);
                                instruction.OpCode = OpCodes.Call;
                                instruction.Operand = methodDef;
                                usedMethods.Add(methodDef);
                            }
                            else if (instruction.OpCode == OpCodes.Stfld)
                            {
                                FieldDef targetField = instruction.Operand as FieldDef;
                                if (targetField == null) continue;
                                CilBody body = new CilBody();
                                body.Instructions.Add(OpCodes.Nop.ToInstruction());
                                body.Instructions.Add(OpCodes.Ldarg_0.ToInstruction());
                                body.Instructions.Add(OpCodes.Ldarg_1.ToInstruction());
                                body.Instructions.Add(OpCodes.Stfld.ToInstruction(targetField));
                                body.Instructions.Add(OpCodes.Ret.ToInstruction());

                                var sig = MethodSig.CreateInstance(pandaContext.moduleDef.CorLibTypes.Void, targetField.FieldSig.GetFieldType());
                                sig.HasThis = true;
                                MethodDefUser methodDefUser = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), sig)
                                {
                                    Body = body,
                                    IsHideBySig = true
                                };
                                usedMethods.Add(methodDefUser);
                                method.DeclaringType.Methods.Add(methodDefUser);
                                instruction.Operand = methodDefUser;
                                instruction.OpCode = OpCodes.Call;
                            }
                            
                        }

                    }
                }
            }
        }
    }
}



================================================
File: Core/Protections/ReferenceProxy/RPHelper.cs
================================================
ï»¿using Core.Helper.Generator.Context;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ReferenceProxy
{
    class RPHelper
    {
        private Generator generator = new Generator();
        public MethodDef GenerateMethod(TypeDef declaringType, object targetMethod, bool hasThis = false, bool isVoid = false)
        {
            MemberRef methodReference = (MemberRef)targetMethod;
            MethodDef methodDefinition = new MethodDefUser(System.IO.Path.GetRandomFileName().Replace(".", ""), MethodSig.CreateStatic((methodReference).ReturnType), MethodAttributes.FamANDAssem | MethodAttributes.Family | MethodAttributes.Static);
            methodDefinition.Body = new CilBody();
            if (hasThis)
                methodDefinition.MethodSig.Params.Add(declaringType.Module.Import(declaringType.ToTypeSig()));
            foreach (TypeSig current in methodReference.MethodSig.Params)
                methodDefinition.MethodSig.Params.Add(current);
            methodDefinition.Parameters.UpdateParameterTypes();
            foreach (var current in methodDefinition.Parameters)
                methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Ldarg, current));
            methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Call, methodReference));

            methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Ret));
            return methodDefinition;
        }
        public MethodDef GenerateMethod(IMethod targetMethod, MethodDef md)
        {

            MethodDef methodDef = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), MethodSig.CreateStatic(md.Module.Import(targetMethod.DeclaringType.ToTypeSig())), MethodAttributes.FamANDAssem | MethodAttributes.Family | MethodAttributes.Static);
            methodDef.ImplAttributes = MethodImplAttributes.Managed | MethodImplAttributes.IL;
            methodDef.IsHideBySig = true;
            methodDef.Body = new CilBody();
            for (int x = 0; x < targetMethod.MethodSig.Params.Count; x++)
            {
                methodDef.ParamDefs.Add(new ParamDefUser(generator.Generate<string>(GeneratorType.String, 10), (ushort)(x + 1)));
                methodDef.MethodSig.Params.Add(targetMethod.MethodSig.Params[x]);
            }
            methodDef.Parameters.UpdateParameterTypes();
            for (int x = 0; x < methodDef.Parameters.Count; x++)
            {
                Parameter parameter = methodDef.Parameters[x];
                methodDef.Body.Instructions.Add(new Instruction(OpCodes.Ldarg, parameter));
            }
            methodDef.Body.Instructions.Add(new Instruction(OpCodes.Newobj, targetMethod));
            methodDef.Body.Instructions.Add(new Instruction(OpCodes.Ret));
            return methodDef;
        }
        public MethodDef GenerateMethod(FieldDef targetField, MethodDef md)
        {
            MethodDef methodDefinition = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), MethodSig.CreateStatic(md.Module.Import(targetField.FieldType)), MethodAttributes.FamANDAssem | MethodAttributes.Family | MethodAttributes.Static);
            methodDefinition.Body = new CilBody();
            TypeDef declaringType = md.DeclaringType;
            methodDefinition.MethodSig.Params.Add(md.Module.Import(declaringType).ToTypeSig());

            methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Ldarg_0));
            methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Ldfld, targetField));
            methodDefinition.Body.Instructions.Add(Instruction.Create(OpCodes.Ret));
            md.DeclaringType.Methods.Add(methodDefinition);
            return methodDefinition;
        }
    }
}



================================================
File: Core/Protections/ReferenceProxy/RPNormal.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using Core.Helper.Generator.Context;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ReferenceProxy
{
    public class RPNormal
    {
        private List<MethodDef> usedMethods = new List<MethodDef>();
        private Generator generator = new Generator();
        public void Excute(PandaContext pandaContext)
        {
            RPHelper rPHelper = new RPHelper();
            DnlibUtils.fixProxy(pandaContext.moduleDef);
            foreach (TypeDef type in pandaContext.moduleDef.Types.ToArray())
            {
                foreach (MethodDef method in type.Methods.ToArray())
                {
                    if (usedMethods.Contains(method)) continue;
                    if (ObfuscationUtils.ObfuscationMethodUtil.canObfuscate(method))
                    {
                        foreach (Instruction instruction in method.Body.Instructions.ToArray())
                        {

                            if (instruction.OpCode == OpCodes.Newobj)
                            {
                                IMethodDefOrRef methodDefOrRef = instruction.Operand as IMethodDefOrRef;
                                if (methodDefOrRef.IsMethodSpec) continue;
                                if (methodDefOrRef == null) continue;
                                MethodDef methodDef = rPHelper.GenerateMethod(methodDefOrRef, method);
                                if (methodDef == null) continue;
                                method.DeclaringType.Methods.Add(methodDef);
                                usedMethods.Add(methodDef);
                                instruction.OpCode = OpCodes.Call;
                                instruction.Operand = methodDef;
                                usedMethods.Add(methodDef);
                            }
                            else if (instruction.OpCode == OpCodes.Stfld)
                            {
                                FieldDef targetField = instruction.Operand as FieldDef;
                                if (targetField == null) continue;
                                CilBody body = new CilBody();
                                body.Instructions.Add(OpCodes.Nop.ToInstruction());
                                body.Instructions.Add(OpCodes.Ldarg_0.ToInstruction());
                                body.Instructions.Add(OpCodes.Ldarg_1.ToInstruction());
                                body.Instructions.Add(OpCodes.Stfld.ToInstruction(targetField));
                                body.Instructions.Add(OpCodes.Ret.ToInstruction());

                                var sig = MethodSig.CreateInstance(pandaContext.moduleDef.CorLibTypes.Void, targetField.FieldSig.GetFieldType());
                                sig.HasThis = true;
                                MethodDefUser methodDefUser = new MethodDefUser(generator.Generate<string>(GeneratorType.String, 10), sig)
                                {
                                    Body = body,
                                    IsHideBySig = true
                                };
                                usedMethods.Add(methodDefUser);
                                method.DeclaringType.Methods.Add(methodDefUser);
                                instruction.Operand = methodDefUser;
                                instruction.OpCode = OpCodes.Call;
                            }
                            else if (instruction.OpCode == OpCodes.Ldfld)
                            {
                                FieldDef targetField = instruction.Operand as FieldDef;
                                if (targetField == null) continue;
                                MethodDef newmethod = rPHelper.GenerateMethod(targetField, method);
                                instruction.OpCode = OpCodes.Call;
                                instruction.Operand = newmethod;
                                usedMethods.Add(newmethod);
                            }
                            else if (instruction.OpCode == OpCodes.Call)
                            {
                                if (instruction.Operand is MemberRef)
                                {
                                    MemberRef methodReference = (MemberRef)instruction.Operand;
                                    if (!methodReference.FullName.Contains("Collections.Generic") && !methodReference.Name.Contains("ToString") && !methodReference.FullName.Contains("Thread::Start"))
                                    {
                                        MethodDef methodDef = rPHelper.GenerateMethod(type, methodReference, methodReference.HasThis, methodReference.FullName.StartsWith("System.Void"));
                                        if (methodDef != null)
                                        {
                                            usedMethods.Add(methodDef);
                                            type.Methods.Add(methodDef);
                                            instruction.Operand = methodDef;
                                            methodDef.Body.Instructions.Add(new Instruction(OpCodes.Ret));
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
    }
}



================================================
File: Core/Protections/ReferenceProxy/ReferenceProxy.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using Core.Helper.Generator.Context;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ReferenceProxy
{
    public class ReferenceProxy
    {
        private List<MethodDef> usedMethods = new List<MethodDef>();
        private Generator generator = new Generator();
        public ReferenceProxy(PandaState pandaState, PandaContext pandaContext)
        {
            switch (pandaState)
            {
                case PandaState.Basic:
                    new RPBasic().Excute(pandaContext);
                    break;
                case PandaState.Normal:
                    new RPNormal().Excute(pandaContext);
                    break;
            }
        }
       
    }
}




================================================
File: Core/Protections/ReferenceProxy/ReferenceProxyProtection.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.ReferenceProxy
{
    class ReferenceProxyProtection : PandaProtection
    {
        public override string Name => "Reference Proxy";

        public override string Description => "This protection hides calls.";

        public override string Id => "panda.ReferenceProxy";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            new ReferenceProxy(pandaState, pandaContext);
        }

        public override void Register(PandaContext pandaContext)
        {
            pandaContext.register.RegisterModule(this);
        }
    }
}



================================================
File: Core/Protections/StringEncoding/BasicStringEncoding.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.StringEncoding
{
    public class BasicStringEncoding
    {
        public BasicStringEncoding(PandaContext pandaContext)
        {
            if (pandaContext != null)
                Encoding(pandaContext);
            new ArgumentNullException("PandaContext cannot be null!");
        }
        public void Encoding(PandaContext pandaContext)
        {
            foreach (TypeDef type in pandaContext.moduleDef.Types)
            {
                foreach (MethodDef method in type.Methods)
                {
                    if (method.Body == null) continue;
                    for (int i = 0; i < method.Body.Instructions.Count(); i++)
                    {
                        if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                        {
                            String oldString = method.Body.Instructions[i].Operand.ToString();
                            String newString = Convert.ToBase64String(UTF8Encoding.UTF8.GetBytes(oldString));
                            method.Body.Instructions[i].OpCode = OpCodes.Nop;
                            method.Body.Instructions.Insert(i + 1, new Instruction(OpCodes.Call, pandaContext.moduleDef.Import(typeof(System.Text.Encoding).GetMethod("get_UTF8", new Type[] { }))));
                            method.Body.Instructions.Insert(i + 2, new Instruction(OpCodes.Ldstr, newString));
                            method.Body.Instructions.Insert(i + 3, new Instruction(OpCodes.Call, pandaContext.moduleDef.Import(typeof(System.Convert).GetMethod("FromBase64String", new Type[] { typeof(string) }))));
                            method.Body.Instructions.Insert(i + 4, new Instruction(OpCodes.Callvirt, pandaContext.moduleDef.Import(typeof(System.Text.Encoding).GetMethod("GetString", new Type[] { typeof(byte[]) }))));
                            i += 4;
                        }
                    }
                    DnlibUtils.Optimize(method);
                }
            }

        }
    }
}



================================================
File: Core/Protections/StringEncoding/NormalStringEncoding.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.StringEncoding
{
    public class NormalStringEncoding
    {
        
        public NormalStringEncoding(PandaContext pandaContext)
        {
            if (pandaContext != null)
                Encoding(pandaContext);
            new ArgumentNullException("PandaContext cannot be null!");
        }
        public void Encoding(PandaContext pandaContext)
        {
            StringHelper stringHelper = new StringHelper();
            MethodDef DecryptMethod = stringHelper.Inject(pandaContext.moduleDef);
            foreach (TypeDef type in pandaContext.moduleDef.Types)
            {
                foreach (MethodDef method in type.Methods)
                {
                    if (method.Body == null) continue;
                    if (method == DecryptMethod) continue;
                    for (int i = 0; i < method.Body.Instructions.Count(); i++)
                    {
                        if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                        {
                            string oldStr = method.Body.Instructions[i].Operand.ToString();
                            method.Body.Instructions[i].Operand = stringHelper.Encrypt(oldStr);
                            method.Body.Instructions.Insert(i + 1, new Instruction(OpCodes.Call, DecryptMethod));
                            i++;
                        }
                    }
                }
            }
        }
    }
}



================================================
File: Core/Protections/StringEncoding/RuntimeHelper.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.StringEncoding
{
    public class RuntimeHelper
    {
        public static string k(string str)
        {
            StringBuilder stringBuilder = new StringBuilder();
            foreach (string strings in str.Split(new char[] { 'A' }))
            {
                stringBuilder.Append(Convert.ToChar(strings.Length) + "");
            }
            return UTF8Encoding.UTF8.GetString(Convert.FromBase64String(stringBuilder.ToString().Substring(0, stringBuilder.ToString().Length - 1)));
        }
    }
}



================================================
File: Core/Protections/StringEncoding/StringEncodingProtection.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.StringEncoding
{
    public class StringEncodingProtection : PandaProtection
    {
        public override string Name => "String Encoding";

        public override string Description => "Protecting your string with Base64 Encryption method";

        public override string Id => "panda.StringEncoding";

        public override string Author => "CodeOfDark";

        public override void Execute(PandaState pandaState, PandaContext pandaContext)
        {
            switch (pandaState)
            {
                case PandaState.Basic:
                    new BasicStringEncoding(pandaContext);
                    break;
                case PandaState.Normal:
                    new NormalStringEncoding(pandaContext);
                    break;
            }
            
        }

        public override void Register(PandaContext pandaContext)
        {
            pandaContext.register.RegisterModule(this); //Need this to register Module
        }
    }
}



================================================
File: Core/Protections/StringEncoding/StringHelper.cs
================================================
ï»¿using Core.Helper.DnlibUtils;
using dnlib.DotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Protections.StringEncoding
{
    public class StringHelper
    {
        public string Encrypt(string str)
        {
            int key = 8204;
            StringBuilder stringBuilder = new StringBuilder();
            string based = Convert.ToBase64String(UTF8Encoding.UTF8.GetBytes(str));
            foreach (char strings in based.ToCharArray())
            {
                for (int i = 0; i < strings; i++)
                {
                    stringBuilder.Append(Convert.ToChar(key));
                }
                stringBuilder.Append("A");
            }
            return stringBuilder.ToString();
        }

        public MethodDef Inject(ModuleDef asmDef)
        {
            ModuleDefMD typeModule = ModuleDefMD.Load(typeof(RuntimeHelper).Module);
            TypeDef typeDef = typeModule.ResolveTypeDef(MDToken.ToRID(typeof(RuntimeHelper).MetadataToken));
            TypeDef panda = new TypeDefUser("Panda", asmDef.CorLibTypes.Object.TypeDefOrRef);
            panda.Attributes = TypeAttributes.Public | TypeAttributes.AutoLayout |
                                    TypeAttributes.Class | TypeAttributes.AnsiClass;
            asmDef.Types.Add(panda);
            IEnumerable<IDnlibDef> members = InjectHelper.Inject(typeDef, panda, asmDef);
            var init = (MethodDef)members.Single(methodddd => methodddd.Name == "k");
            return init;
        }
    }
}



================================================
File: DarkUI/DarkUI.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{F19472F5-8C44-4C51-A8A0-B9DE5F555255}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>DarkUI</RootNamespace>
    <AssemblyName>DarkUI</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>Client</TargetFrameworkProfile>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="DarkUI, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>bin\Debug\DarkUI.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Collections\ObservableList.cs" />
    <Compile Include="Collections\ObservableListModified.cs" />
    <Compile Include="Config\Colors.cs" />
    <Compile Include="Config\Consts.cs" />
    <Compile Include="Controls\DarkButtonStyle.cs" />
    <Compile Include="Controls\DarkCheckBox.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkContentAlignment.cs" />
    <Compile Include="Controls\DarkControlState.cs" />
    <Compile Include="Controls\DarkRadioButton.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkScrollOrientation.cs" />
    <Compile Include="Controls\DarkTitle.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkTreeView.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkListItem.cs" />
    <Compile Include="Controls\DarkListView.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkScrollBase.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkButton.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkContextMenu.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkLabel.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkMenuStrip.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkScrollBar.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkScrollView.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkSectionPanel.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkSeparator.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkStatusStrip.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkTextBox.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkToolStrip.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Controls\DarkTreeNode.cs" />
    <Compile Include="Controls\ScrollValueEventArgs.cs" />
    <Compile Include="Docking\DarkDockArea.cs" />
    <Compile Include="Docking\DarkDockContent.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Docking\DarkDockGroup.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Docking\DarkDockPanel.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Docking\DarkDockRegion.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Docking\DarkDocument.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Docking\DarkSplitterType.cs" />
    <Compile Include="Docking\DarkToolWindow.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Docking\DarkDockSplitter.cs" />
    <Compile Include="Docking\DarkDockTab.cs" />
    <Compile Include="Docking\DarkDockTabArea.cs" />
    <Compile Include="Docking\DockContentEventArgs.cs" />
    <Compile Include="Docking\DockDropArea.cs" />
    <Compile Include="Docking\DockDropCollection.cs" />
    <Compile Include="Docking\DockGroupState.cs" />
    <Compile Include="Docking\DockPanelState.cs" />
    <Compile Include="Docking\DockRegionState.cs" />
    <Compile Include="Docking\DockInsertType.cs" />
    <Compile Include="Extensions\BitmapExtensions.cs" />
    <Compile Include="Extensions\IEnumerableExtensions.cs" />
    <Compile Include="Forms\DarkDialog.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Forms\DarkDialog.Designer.cs">
      <DependentUpon>DarkDialog.cs</DependentUpon>
    </Compile>
    <Compile Include="Forms\DarkDialogButton.cs" />
    <Compile Include="Forms\DarkForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Forms\DarkMessageBox.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Forms\DarkMessageBox.Designer.cs">
      <DependentUpon>DarkMessageBox.cs</DependentUpon>
    </Compile>
    <Compile Include="Forms\DarkMessageBoxIcon.cs" />
    <Compile Include="Forms\DarkTranslucentForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Icons\DockIcons.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>DockIcons.resx</DependentUpon>
    </Compile>
    <Compile Include="Icons\MenuIcons.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>MenuIcons.resx</DependentUpon>
    </Compile>
    <Compile Include="Icons\MessageBoxIcons.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>MessageBoxIcons.resx</DependentUpon>
    </Compile>
    <Compile Include="Icons\ScrollIcons.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>ScrollIcons.resx</DependentUpon>
    </Compile>
    <Compile Include="Icons\TreeViewIcons.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>TreeViewIcons.resx</DependentUpon>
    </Compile>
    <Compile Include="Win32\ControlScrollFilter.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Renderers\DarkMenuRenderer.cs" />
    <Compile Include="Renderers\DarkToolStripRenderer.cs" />
    <Compile Include="Win32\DockResizeFilter.cs" />
    <Compile Include="Win32\DockContentDragFilter.cs" />
    <Compile Include="Win32\Native.cs" />
    <Compile Include="Win32\WindowsMessages.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Forms\DarkDialog.resx">
      <DependentUpon>DarkDialog.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Forms\DarkMessageBox.resx">
      <DependentUpon>DarkMessageBox.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Icons\DockIcons.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>DockIcons.Designer.cs</LastGenOutput>
      <CustomToolNamespace>DarkUI</CustomToolNamespace>
    </EmbeddedResource>
    <EmbeddedResource Include="Icons\MenuIcons.resx">
      <Generator>PublicResXFileCodeGenerator</Generator>
      <LastGenOutput>MenuIcons.Designer.cs</LastGenOutput>
      <CustomToolNamespace>DarkUI</CustomToolNamespace>
    </EmbeddedResource>
    <EmbeddedResource Include="Icons\MessageBoxIcons.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>MessageBoxIcons.Designer.cs</LastGenOutput>
      <CustomToolNamespace>DarkUI</CustomToolNamespace>
    </EmbeddedResource>
    <EmbeddedResource Include="Icons\ScrollIcons.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>ScrollIcons.Designer.cs</LastGenOutput>
      <CustomToolNamespace>DarkUI</CustomToolNamespace>
    </EmbeddedResource>
    <EmbeddedResource Include="Icons\TreeViewIcons.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>TreeViewIcons.Designer.cs</LastGenOutput>
      <CustomToolNamespace>DarkUI</CustomToolNamespace>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\grip.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\tick.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\scrollbar_arrow.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\scrollbar_arrow_clicked.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\scrollbar_arrow_hot.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\scrollbar_arrow_standard.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\error.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\info.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\warning.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\node_closed_empty.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\node_closed_full.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\node_open.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\node_open_empty.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\active-inactive-close.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\arrow.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\close.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\close-selected.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\inactive-close.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\inactive-close-selected.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\tw_close.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\tw_close_selected.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\tw_active_close.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\tw_active_close_selected.png" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: DarkUI/Collections/ObservableList.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;

namespace DarkUI.Collections
{
    public class ObservableList<T> : List<T>, IDisposable
    {
        #region Field Region

        private bool _disposed;

        #endregion

        #region Event Region

        public event EventHandler<ObservableListModified<T>> ItemsAdded;
        public event EventHandler<ObservableListModified<T>> ItemsRemoved;

        #endregion

        #region Destructor Region

        ~ObservableList()
        {
            Dispose(false);
        }

        #endregion

        #region Dispose Region

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (ItemsAdded != null)
                    ItemsAdded = null;

                if (ItemsRemoved != null)
                    ItemsRemoved = null;

                _disposed = true;
            }
        }

        #endregion

        #region Method Region

        public new void Add(T item)
        {
            base.Add(item);

            if (ItemsAdded != null)
                ItemsAdded(this, new ObservableListModified<T>(new List<T> { item }));
        }

        public new void AddRange(IEnumerable<T> collection)
        {
            var list = collection.ToList();

            base.AddRange(list);

            if (ItemsAdded != null)
                ItemsAdded(this, new ObservableListModified<T>(list));
        }

        public new void Remove(T item)
        {
            base.Remove(item);

            if (ItemsRemoved != null)
                ItemsRemoved(this, new ObservableListModified<T>(new List<T> { item }));
        }

        #endregion
    }
}



================================================
File: DarkUI/Collections/ObservableListModified.cs
================================================
ï»¿using System;
using System.Collections.Generic;

namespace DarkUI.Collections
{
    public class ObservableListModified<T> : EventArgs
    {
        public IEnumerable<T> Items { get; private set; }

        public ObservableListModified(IEnumerable<T> items)
        {
            Items = items;
        }
    }
}



================================================
File: DarkUI/Config/Colors.cs
================================================
ï»¿using System.Drawing;

namespace DarkUI.Config
{
    public sealed class Colors
    {
        public static Color GreyBackground
        {
            get { return Color.FromArgb(60, 63, 65); }
        }

        public static Color HeaderBackground
        {
            get { return Color.FromArgb(57, 60, 62); }
        }

        public static Color BlueBackground
        {
            get { return Color.FromArgb(66, 77, 95); }
        }

        public static Color DarkBlueBackground
        {
            get { return Color.FromArgb(52, 57, 66); }
        }

        public static Color DarkBackground
        {
            get { return Color.FromArgb(43, 43, 43); }
        }

        public static Color MediumBackground
        {
            get { return Color.FromArgb(49, 51, 53); }
        }

        public static Color LightBackground
        {
            get { return Color.FromArgb(69, 73, 74); }
        }

        public static Color LighterBackground
        {
            get { return Color.FromArgb(95, 101, 102); }
        }

        public static Color LightestBackground
        {
            get { return Color.FromArgb(178, 178, 178); }
        }

        public static Color LightBorder
        {
            get { return Color.FromArgb(81, 81, 81); }
        }

        public static Color DarkBorder
        {
            get { return Color.FromArgb(51, 51, 51); }
        }

        public static Color LightText
        {
            get { return Color.FromArgb(220, 220, 220); }
        }

        public static Color DisabledText
        {
            get { return Color.FromArgb(153, 153, 153); }
        }

        public static Color BlueHighlight
        {
            get { return Color.FromArgb(104, 151, 187); }
        }

        public static Color BlueSelection
        {
            get { return Color.FromArgb(75, 110, 175); }
        }

        public static Color GreyHighlight
        {
            get { return Color.FromArgb(122, 128, 132); }
        }

        public static Color GreySelection
        {
            get { return Color.FromArgb(92, 92, 92); }
        }

        public static Color DarkGreySelection
        {
            get { return Color.FromArgb(82, 82, 82); }
        }

        public static Color DarkBlueBorder
        {
            get { return Color.FromArgb(51, 61, 78); }
        }

        public static Color LightBlueBorder
        {
            get { return Color.FromArgb(86, 97, 114); }
        }

        public static Color ActiveControl
        {
            get { return Color.FromArgb(159, 178, 196); }
        }
    }
}



================================================
File: DarkUI/Config/Consts.cs
================================================
ï»¿namespace DarkUI.Config
{
    public sealed class Consts
    {
        public static int Padding = 10;

        public static int ScrollBarSize = 15;
        public static int ArrowButtonSize = 15;
        public static int MinimumThumbSize = 11;

        public static int CheckBoxSize = 12;
        public static int RadioButtonSize = 12;

        public const int ToolWindowHeaderSize = 25;
        public const int DocumentTabAreaSize = 24;
        public const int ToolWindowTabAreaSize = 21;
    }
}



================================================
File: DarkUI/Controls/DarkButton.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    [ToolboxBitmap(typeof(Button))]
    [DefaultEvent("Click")]
    public class DarkButton : Button
    {
        #region Field Region

        private DarkButtonStyle _style = DarkButtonStyle.Normal;
        private DarkControlState _buttonState = DarkControlState.Normal;

        private bool _isDefault;
        private bool _spacePressed;

        private int _padding = Consts.Padding / 2;
        private int _imagePadding = 5; // Consts.Padding / 2

        #endregion

        #region Designer Property Region

        public new string Text
        {
            get { return base.Text; }
            set
            {
                base.Text = value;
                Invalidate();
            }
        }

        public new bool Enabled
        {
            get { return base.Enabled; }
            set
            {
                base.Enabled = value;
                Invalidate();
            }
        }

        [Category("Appearance")]
        [Description("Determines the style of the button.")]
        [DefaultValue(DarkButtonStyle.Normal)]
        public DarkButtonStyle ButtonStyle
        {
            get { return _style; }
            set
            {
                _style = value;
                Invalidate();
            }
        }

        [Category("Appearance")]
        [Description("Determines the amount of padding between the image and text.")]
        [DefaultValue(5)]
        public int ImagePadding
        {
            get { return _imagePadding; }
            set
            {
                _imagePadding = value;
                Invalidate();
            }
        }

        #endregion

        #region Code Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool AutoEllipsis
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkControlState ButtonState
        {
            get { return _buttonState; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment ImageAlign
        {
            get { return base.ImageAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool FlatAppearance
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new FlatStyle FlatStyle
        {
            get { return base.FlatStyle; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment TextAlign
        {
            get { return base.TextAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseCompatibleTextRendering
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseVisualStyleBackColor
        {
            get { return false; }
        }

        #endregion

        #region Constructor Region

        public DarkButton()
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);

            base.UseVisualStyleBackColor = false;
            base.UseCompatibleTextRendering = false;

            SetButtonState(DarkControlState.Normal);
            Padding = new Padding(_padding);
        }

        #endregion

        #region Method Region

        private void SetButtonState(DarkControlState buttonState)
        {
            if (_buttonState != buttonState)
            {
                _buttonState = buttonState;
                Invalidate();
            }
        }

        #endregion

        #region Event Handler Region

        protected override void OnCreateControl()
        {
            base.OnCreateControl();

            var form = FindForm();
            if (form != null)
            {
                if (form.AcceptButton == this)
                    _isDefault = true;
            }
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (_spacePressed)
                return;

            if (e.Button == MouseButtons.Left)
            {
                if (ClientRectangle.Contains(e.Location))
                    SetButtonState(DarkControlState.Pressed);
                else
                    SetButtonState(DarkControlState.Hover);
            }
            else
            {
                SetButtonState(DarkControlState.Hover);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (!ClientRectangle.Contains(e.Location))
                return;

            SetButtonState(DarkControlState.Pressed);
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (_spacePressed)
                return;

            SetButtonState(DarkControlState.Normal);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            if (_spacePressed)
                return;

            SetButtonState(DarkControlState.Normal);
        }

        protected override void OnMouseCaptureChanged(EventArgs e)
        {
            base.OnMouseCaptureChanged(e);

            if (_spacePressed)
                return;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetButtonState(DarkControlState.Normal);
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);

            Invalidate();
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);

            _spacePressed = false;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetButtonState(DarkControlState.Normal);
            else
                SetButtonState(DarkControlState.Hover);
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            if (e.KeyCode == Keys.Space)
            {
                _spacePressed = true;
                SetButtonState(DarkControlState.Pressed);
            }
        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            base.OnKeyUp(e);

            if (e.KeyCode == Keys.Space)
            {
                _spacePressed = false;

                var location = Cursor.Position;

                if (!ClientRectangle.Contains(location))
                    SetButtonState(DarkControlState.Normal);
                else
                    SetButtonState(DarkControlState.Hover);
            }
        }

        public override void NotifyDefault(bool value)
        {
            base.NotifyDefault(value);

            if (!DesignMode)
                return;

            _isDefault = value;
            Invalidate();
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;
            var rect = new Rectangle(0, 0, ClientSize.Width, ClientSize.Height);

            var textColor = Colors.LightText;
            var borderColor = Colors.GreySelection;
            var fillColor = _isDefault ? Colors.DarkBlueBackground : Colors.LightBackground;

            if (Enabled)
            {
                if (ButtonStyle == DarkButtonStyle.Normal)
                {
                    if (Focused && TabStop)
                        borderColor = Colors.BlueHighlight;

                    switch (ButtonState)
                    {
                        case DarkControlState.Hover:
                            fillColor = _isDefault ? Colors.BlueBackground : Colors.LighterBackground;
                            break;
                        case DarkControlState.Pressed:
                            fillColor = _isDefault ? Colors.DarkBackground : Colors.DarkBackground;
                            break;
                    }
                }
                else if (ButtonStyle == DarkButtonStyle.Flat)
                {
                    switch (ButtonState)
                    {
                        case DarkControlState.Normal:
                            fillColor = Colors.GreyBackground;
                            break;
                        case DarkControlState.Hover:
                            fillColor = Colors.MediumBackground;
                            break;
                        case DarkControlState.Pressed:
                            fillColor = Colors.DarkBackground;
                            break;
                    }
                }
            }
            else
            {
                textColor = Colors.DisabledText;
                fillColor = Colors.DarkGreySelection;
            }

            using (var b = new SolidBrush(fillColor))
            {
                g.FillRectangle(b, rect);
            }

            if (ButtonStyle == DarkButtonStyle.Normal)
            {
                using (var p = new Pen(borderColor, 1))
                {
                    var modRect = new Rectangle(rect.Left, rect.Top, rect.Width - 1, rect.Height - 1);

                    g.DrawRectangle(p, modRect);
                }
            }

            var textOffsetX = 0;
            var textOffsetY = 0;

            if (Image != null)
            {
                var stringSize = g.MeasureString(Text, Font, rect.Size);

                var x = (ClientSize.Width / 2) - (Image.Size.Width / 2);
                var y = (ClientSize.Height / 2) - (Image.Size.Height / 2);

                switch (TextImageRelation)
                {
                    case TextImageRelation.ImageAboveText:
                        textOffsetY = (Image.Size.Height / 2) + (ImagePadding / 2);
                        y = y - ((int)(stringSize.Height / 2) + (ImagePadding / 2));
                        break;
                    case TextImageRelation.TextAboveImage:
                        textOffsetY = ((Image.Size.Height / 2) + (ImagePadding / 2)) * -1;
                        y = y + ((int)(stringSize.Height / 2) + (ImagePadding / 2));
                        break;
                    case TextImageRelation.ImageBeforeText:
                        textOffsetX = Image.Size.Width + (ImagePadding * 2);
                        x = ImagePadding;
                        break;
                    case TextImageRelation.TextBeforeImage:
                        x = x + (int)stringSize.Width;
                        break;
                }

                g.DrawImageUnscaled(Image, x, y);
            }

            using (var b = new SolidBrush(textColor))
            {
                var modRect = new Rectangle(rect.Left + textOffsetX + Padding.Left,
                                            rect.Top + textOffsetY + Padding.Top, rect.Width - Padding.Horizontal,
                                            rect.Height - Padding.Vertical);

                var stringFormat = new StringFormat
                {
                    LineAlignment = StringAlignment.Center,
                    Alignment = StringAlignment.Center,
                    Trimming = StringTrimming.EllipsisCharacter
                };

                g.DrawString(Text, Font, b, modRect, stringFormat);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkButtonStyle.cs
================================================
ï»¿namespace DarkUI.Controls
{
    public enum DarkButtonStyle
    {
        Normal,
        Flat
    }
}



================================================
File: DarkUI/Controls/DarkCheckBox.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkCheckBox : CheckBox
    {
        #region Field Region

        private DarkControlState _controlState = DarkControlState.Normal;

        private bool _spacePressed;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Appearance Appearance
        {
            get { return base.Appearance; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool AutoEllipsis
        {
            get { return base.AutoEllipsis; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image BackgroundImage
        {
            get { return base.BackgroundImage; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ImageLayout BackgroundImageLayout
        {
            get { return base.BackgroundImageLayout; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool FlatAppearance
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new FlatStyle FlatStyle
        {
            get { return base.FlatStyle; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image Image
        {
            get { return base.Image; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment ImageAlign
        {
            get { return base.ImageAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new int ImageIndex
        {
            get { return base.ImageIndex; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new string ImageKey
        {
            get { return base.ImageKey; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ImageList ImageList
        {
            get { return base.ImageList; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment TextAlign
        {
            get { return base.TextAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new TextImageRelation TextImageRelation
        {
            get { return base.TextImageRelation; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool ThreeState
        {
            get { return base.ThreeState; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseCompatibleTextRendering
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseVisualStyleBackColor
        {
            get { return false; }
        }

        #endregion

        #region Constructor Region

        public DarkCheckBox()
        {
            SetStyle(ControlStyles.SupportsTransparentBackColor |
                     ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);
        }

        #endregion

        #region Method Region

        private void SetControlState(DarkControlState controlState)
        {
            if (_controlState != controlState)
            {
                _controlState = controlState;
                Invalidate();
            }
        }

        #endregion

        #region Event Handler Region

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (_spacePressed)
                return;

            if (e.Button == MouseButtons.Left)
            {
                if (ClientRectangle.Contains(e.Location))
                    SetControlState(DarkControlState.Pressed);
                else
                    SetControlState(DarkControlState.Hover);
            }
            else
            {
                SetControlState(DarkControlState.Hover);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (!ClientRectangle.Contains(e.Location))
                return;

            SetControlState(DarkControlState.Pressed);
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (_spacePressed)
                return;

            SetControlState(DarkControlState.Normal);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            if (_spacePressed)
                return;

            SetControlState(DarkControlState.Normal);
        }

        protected override void OnMouseCaptureChanged(EventArgs e)
        {
            base.OnMouseCaptureChanged(e);

            if (_spacePressed)
                return;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetControlState(DarkControlState.Normal);
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);

            Invalidate();
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);

            _spacePressed = false;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetControlState(DarkControlState.Normal);
            else
                SetControlState(DarkControlState.Hover);
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            if (e.KeyCode == Keys.Space)
            {
                _spacePressed = true;
                SetControlState(DarkControlState.Pressed);
            }
        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            base.OnKeyUp(e);

            if (e.KeyCode == Keys.Space)
            {
                _spacePressed = false;

                var location = Cursor.Position;

                if (!ClientRectangle.Contains(location))
                    SetControlState(DarkControlState.Normal);
                else
                    SetControlState(DarkControlState.Hover);
            }
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;
            var rect = new Rectangle(0, 0, ClientSize.Width, ClientSize.Height);

            var size = Consts.CheckBoxSize;

            var textColor = Colors.LightText;
            var borderColor = Colors.LightText;
            var fillColor = Colors.LightestBackground;

            if (Enabled)
            {
                if (Focused)
                {
                    borderColor = Colors.BlueHighlight;
                    fillColor = Colors.BlueSelection;
                }

                if (_controlState == DarkControlState.Hover)
                {
                    borderColor = Colors.BlueHighlight;
                    fillColor = Colors.BlueSelection;
                }
                else if (_controlState == DarkControlState.Pressed)
                {
                    borderColor = Colors.GreyHighlight;
                    fillColor = Colors.GreySelection;
                }
            }
            else
            {
                textColor = Colors.DisabledText;
                borderColor = Colors.GreyHighlight;
                fillColor = Colors.GreySelection;
            }

            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, rect);
            }

            using (var p = new Pen(borderColor))
            {
                var boxRect = new Rectangle(0, (rect.Height / 2) - (size / 2), size, size);
                g.DrawRectangle(p, boxRect);
            }

            if (Checked)
            {
                using (var b = new SolidBrush(fillColor))
                {
                    Rectangle boxRect = new Rectangle(2, (rect.Height / 2) - ((size - 4) / 2), size - 3, size - 3);
                    g.FillRectangle(b, boxRect);
                }
            }

            using (var b = new SolidBrush(textColor))
            {
                var stringFormat = new StringFormat
                {
                    LineAlignment = StringAlignment.Center,
                    Alignment = StringAlignment.Near
                };

                var modRect = new Rectangle(size + 4, 0, rect.Width - size, rect.Height);
                g.DrawString(Text, Font, b, modRect, stringFormat);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkContentAlignment.cs
================================================
ï»¿namespace DarkUI.Controls
{
    public enum DarkContentAlignment
    {
        Center,
        Left,
        Right
    }
}



================================================
File: DarkUI/Controls/DarkContextMenu.cs
================================================
ï»¿using DarkUI.Renderers;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkContextMenu : ContextMenuStrip
    {
        #region Constructor Region

        public DarkContextMenu()
        {
            Renderer = new DarkMenuRenderer();
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkControlState.cs
================================================
ï»¿namespace DarkUI.Controls
{
    public enum DarkControlState
    {
        Normal,
        Hover,
        Pressed
    }
}



================================================
File: DarkUI/Controls/DarkLabel.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkLabel : Label
    {
        #region Field Region

        private bool _autoUpdateHeight;
        private bool _isGrowing;

        #endregion

        #region Property Region

        [Category("Layout")]
        [Description("Enables automatic height sizing based on the contents of the label.")]
        [DefaultValue(false)]
        public bool AutoUpdateHeight
        {
            get { return _autoUpdateHeight; }
            set
            {
                _autoUpdateHeight = value;

                if (_autoUpdateHeight)
                {
                    AutoSize = false;
                    ResizeLabel();
                }
            }
        }

        public new bool AutoSize
        {
            get { return base.AutoSize; }
            set
            {
                base.AutoSize = value;

                if (AutoSize)
                    AutoUpdateHeight = false;
            }
        }

        #endregion

        #region Constructor Region

        public DarkLabel()
        {
            ForeColor = Colors.LightText;
        }

        #endregion

        #region Method Region

        private void ResizeLabel()
        {
            if (!_autoUpdateHeight || _isGrowing)
                return;

            try
            {
                _isGrowing = true;
                var sz = new Size(Width, int.MaxValue);
                sz = TextRenderer.MeasureText(Text, Font, sz, TextFormatFlags.WordBreak);
                Height = sz.Height + Padding.Vertical;
            }
            finally
            {
                _isGrowing = false;
            }
        }

        #endregion

        #region Event Handler Region

        protected override void OnTextChanged(EventArgs e)
        {
            base.OnTextChanged(e);
            ResizeLabel();
        }

        protected override void OnFontChanged(EventArgs e)
        {
            base.OnFontChanged(e);
            ResizeLabel();
        }

        protected override void OnSizeChanged(EventArgs e)
        {
            base.OnSizeChanged(e);
            ResizeLabel();
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkListItem.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.Drawing;

namespace DarkUI.Controls
{
    public class DarkListItem
    {
        #region Event Region

        public event EventHandler TextChanged;

        #endregion

        #region Field Region

        private string _text;

        #endregion

        #region Property Region

        public string Text
        {
            get { return _text; }
            set
            {
                _text = value;

                if (TextChanged != null)
                    TextChanged(this, new EventArgs());
            }
        }

        public Rectangle Area { get; set; }

        public Color TextColor { get; set; }

        public FontStyle FontStyle { get; set; }

        public object Tag { get; set; }

        #endregion

        #region Constructor Region

        public DarkListItem()
        {
            TextColor = Colors.LightText;
            FontStyle = FontStyle.Regular;
        }

        public DarkListItem(string text)
            : this()
        {
            Text = text;
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkListView.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkListView : DarkScrollView
    {
        #region Event Region

        public event EventHandler SelectedIndicesChanged;

        #endregion

        #region Field Region

        private int _itemHeight = 20;
        private bool _multiSelect;

        private ObservableCollection<DarkListItem> _items;
        private List<int> _selectedIndices;
        private int _anchoredItemStart = -1;
        private int _anchoredItemEnd = -1;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ObservableCollection<DarkListItem> Items
        {
            get { return _items; }
            set
            {
                if (_items != null)
                    _items.CollectionChanged -= Items_CollectionChanged;

                _items = value;

                _items.CollectionChanged += Items_CollectionChanged;

                UpdateListBox();
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public List<int> SelectedIndices
        {
            get { return _selectedIndices; }
        }

        [Category("Appearance")]
        [Description("Determines the height of the individual list view items.")]
        [DefaultValue(20)]
        public int ItemHeight
        {
            get { return _itemHeight; }
            set
            {
                _itemHeight = value;
                UpdateListBox();
            }
        }

        [Category("Behaviour")]
        [Description("Determines whether multiple list view items can be selected at once.")]
        [DefaultValue(false)]
        public bool MultiSelect
        {
            get { return _multiSelect; }
            set { _multiSelect = value; }
        }

        #endregion

        #region Constructor Region

        public DarkListView()
        {
            Items = new ObservableCollection<DarkListItem>();
            _selectedIndices = new List<int>();
        }

        #endregion

        #region Event Handler Region

        private void Items_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                using (var g = CreateGraphics())
                {
                    // Set the area size of all new items
                    foreach (DarkListItem item in e.NewItems)
                    {
                        item.TextChanged += Item_TextChanged;
                        UpdateItemSize(item, g);
                    }
                }

                // Find the starting index of the new item list and update anything past that
                if (e.NewStartingIndex < (Items.Count - 1))
                {
                    for (var i = e.NewStartingIndex; i <= Items.Count - 1; i++)
                    {
                        UpdateItemPosition(Items[i], i);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (DarkListItem item in e.OldItems)
                    item.TextChanged -= Item_TextChanged;

                // Find the starting index of the old item list and update anything past that
                if (e.OldStartingIndex < (Items.Count - 1))
                {
                    for (var i = e.OldStartingIndex; i <= Items.Count - 1; i++)
                    {
                        UpdateItemPosition(Items[i], i);
                    }
                }
            }

            if (Items.Count == 0)
            {
                if (_selectedIndices.Count > 0)
                {
                    _selectedIndices.Clear();

                    if (SelectedIndicesChanged != null)
                        SelectedIndicesChanged(this, null);
                }
            }

            UpdateContentSize();
        }

        private void Item_TextChanged(object sender, EventArgs e)
        {
            var item = (DarkListItem)sender;

            UpdateItemSize(item);
            UpdateContentSize(item);
            Invalidate();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (Items.Count == 0)
                return;

            if (e.Button != MouseButtons.Left && e.Button != MouseButtons.Right)
                return;

            var pos = OffsetMousePosition;

            var range = ItemIndexesInView().ToList();

            var top = range.Min();
            var bottom = range.Max();
            var width = Math.Max(ContentSize.Width, Viewport.Width);

            for (var i = top; i <= bottom; i++)
            {
                var rect = new Rectangle(0, i * ItemHeight, width, ItemHeight);

                if (rect.Contains(pos))
                {
                    if (MultiSelect && ModifierKeys == Keys.Shift)
                        SelectAnchoredRange(i);
                    else if (MultiSelect && ModifierKeys == Keys.Control)
                        ToggleItem(i);
                    else
                        SelectItem(i);
                }
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            if (Items.Count == 0)
                return;

            if (e.KeyCode != Keys.Down && e.KeyCode != Keys.Up)
                return;

            if (MultiSelect && ModifierKeys == Keys.Shift)
            {
                if (e.KeyCode == Keys.Up)
                {
                    if (_anchoredItemEnd - 1 >= 0)
                    {
                        SelectAnchoredRange(_anchoredItemEnd - 1);
                        EnsureVisible();
                    }
                }
                else if (e.KeyCode == Keys.Down)
                {
                    if (_anchoredItemEnd + 1 <= Items.Count - 1)
                    {
                        SelectAnchoredRange(_anchoredItemEnd + 1);
                    }
                }
            }
            else
            {
                if (e.KeyCode == Keys.Up)
                {
                    if (_anchoredItemEnd - 1 >= 0)
                        SelectItem(_anchoredItemEnd - 1);
                }
                else if (e.KeyCode == Keys.Down)
                {
                    if (_anchoredItemEnd + 1 <= Items.Count - 1)
                        SelectItem(_anchoredItemEnd + 1);
                }
            }

            EnsureVisible();
        }

        #endregion

        #region Method Region

        public int GetItemIndex(DarkListItem item)
        {
            return Items.IndexOf(item);
        }

        public void SelectItem(int index)
        {
            if (index < 0 || index > Items.Count - 1)
                throw new IndexOutOfRangeException($"Value '{index}' is outside of valid range.");

            _selectedIndices.Clear();
            _selectedIndices.Add(index);

            if (SelectedIndicesChanged != null)
                SelectedIndicesChanged(this, null);

            _anchoredItemStart = index;
            _anchoredItemEnd = index;

            Invalidate();
        }

        public void SelectItems(IEnumerable<int> indexes)
        {
            _selectedIndices.Clear();

            var list = indexes.ToList();

            foreach (var index in list)
            {
                if (index < 0 || index > Items.Count - 1)
                    throw new IndexOutOfRangeException($"Value '{index}' is outside of valid range.");

                _selectedIndices.Add(index);
            }

            if (SelectedIndicesChanged != null)
                SelectedIndicesChanged(this, null);

            _anchoredItemStart = list[list.Count - 1];
            _anchoredItemEnd = list[list.Count - 1];

            Invalidate();
        }

        public void ToggleItem(int index)
        {
            if (_selectedIndices.Contains(index))
            {
                _selectedIndices.Remove(index);

                // If we just removed both the anchor start AND end then reset them
                if (_anchoredItemStart == index && _anchoredItemEnd == index)
                {
                    if (_selectedIndices.Count > 0)
                    {
                        _anchoredItemStart = _selectedIndices[0];
                        _anchoredItemEnd = _selectedIndices[0];
                    }
                    else
                    {
                        _anchoredItemStart = -1;
                        _anchoredItemEnd = -1;
                    }
                }

                // If we just removed the anchor start then update it accordingly
                if (_anchoredItemStart == index)
                {
                    if (_anchoredItemEnd < index)
                        _anchoredItemStart = index - 1;
                    else if (_anchoredItemEnd > index)
                        _anchoredItemStart = index + 1;
                    else
                        _anchoredItemStart = _anchoredItemEnd;
                }

                // If we just removed the anchor end then update it accordingly
                if (_anchoredItemEnd == index)
                {
                    if (_anchoredItemStart < index)
                        _anchoredItemEnd = index - 1;
                    else if (_anchoredItemStart > index)
                        _anchoredItemEnd = index + 1;
                    else
                        _anchoredItemEnd = _anchoredItemStart;
                }
            }
            else
            {
                _selectedIndices.Add(index);
                _anchoredItemStart = index;
                _anchoredItemEnd = index;
            }

            if (SelectedIndicesChanged != null)
                SelectedIndicesChanged(this, null);

            Invalidate();
        }

        public void SelectItems(int startRange, int endRange)
        {
            _selectedIndices.Clear();

            if (startRange == endRange)
                _selectedIndices.Add(startRange);

            if (startRange < endRange)
            {
                for (var i = startRange; i <= endRange; i++)
                    _selectedIndices.Add(i);
            }
            else if (startRange > endRange)
            {
                for (var i = startRange; i >= endRange; i--)
                    _selectedIndices.Add(i);
            }

            if (SelectedIndicesChanged != null)
                SelectedIndicesChanged(this, null);

            Invalidate();
        }

        private void SelectAnchoredRange(int index)
        {
            _anchoredItemEnd = index;
            SelectItems(_anchoredItemStart, index);
        }

        private void UpdateListBox()
        {
            using (var g = CreateGraphics())
            {
                for (var i = 0; i <= Items.Count - 1; i++)
                {
                    var item = Items[i];
                    UpdateItemSize(item, g);
                    UpdateItemPosition(item, i);
                }
            }

            UpdateContentSize();
        }

        private void UpdateItemSize(DarkListItem item)
        {
            using (var g = CreateGraphics())
            {
                UpdateItemSize(item, g);
            }
        }

        private void UpdateItemSize(DarkListItem item, Graphics g)
        {
            var size = g.MeasureString(item.Text, Font);
            size.Width++;

            item.Area = new Rectangle(item.Area.Left, item.Area.Top, (int)size.Width, item.Area.Height);
        }

        private void UpdateItemPosition(DarkListItem item, int index)
        {
            item.Area = new Rectangle(2, (index * ItemHeight), item.Area.Width, ItemHeight);
        }

        private void UpdateContentSize()
        {
            var highestWidth = 0;

            foreach (var item in Items)
            {
                if (item.Area.Right + 1 > highestWidth)
                    highestWidth = item.Area.Right + 1;
            }

            var width = highestWidth;
            var height = Items.Count * ItemHeight;

            if (ContentSize.Width != width || ContentSize.Height != height)
            {
                ContentSize = new Size(width, height);
                Invalidate();
            }
        }

        private void UpdateContentSize(DarkListItem item)
        {
            var itemWidth = item.Area.Right + 1;

            if (itemWidth == ContentSize.Width)
            {
                UpdateContentSize();
                return;
            }

            if (itemWidth > ContentSize.Width)
            {
                ContentSize = new Size(itemWidth, ContentSize.Height);
                Invalidate();
            }
        }

        public void EnsureVisible()
        {
            if (SelectedIndices.Count == 0)
                return;

            var itemTop = -1;

            if (!MultiSelect)
                itemTop = SelectedIndices[0] * ItemHeight;
            else
                itemTop = _anchoredItemEnd * ItemHeight;

            var itemBottom = itemTop + ItemHeight;

            if (itemTop < Viewport.Top)
                VScrollTo(itemTop);

            if (itemBottom > Viewport.Bottom)
                VScrollTo((itemBottom - Viewport.Height));
        }

        private IEnumerable<int> ItemIndexesInView()
        {
            var top = (Viewport.Top / ItemHeight) - 1;

            if (top < 0)
                top = 0;

            var bottom = ((Viewport.Top + Viewport.Height) / ItemHeight) + 1;

            if (bottom > Items.Count)
                bottom = Items.Count;

            var result = Enumerable.Range(top, bottom - top);
            return result;
        }

        private IEnumerable<DarkListItem> ItemsInView()
        {
            var indexes = ItemIndexesInView();
            var result = indexes.Select(index => Items[index]).ToList();
            return result;
        }

        #endregion

        #region Paint Region

        protected override void PaintContent(Graphics g)
        {
            var range = ItemIndexesInView().ToList();

            if (range.Count == 0)
                return;

            var top = range.Min();
            var bottom = range.Max();

            for (var i = top; i <= bottom; i++)
            {
                var width = Math.Max(ContentSize.Width, Viewport.Width);
                var rect = new Rectangle(0, i * ItemHeight, width, ItemHeight);

                // Background
                var odd = i % 2 != 0;
                var bgColor = !odd ? Colors.HeaderBackground : Colors.GreyBackground;

                if (SelectedIndices.Count > 0 && SelectedIndices.Contains(i))
                    bgColor = Focused ? Colors.BlueSelection : Colors.GreySelection;

                using (var b = new SolidBrush(bgColor))
                {
                    g.FillRectangle(b, rect);
                }

                // DEBUG: Border
                /*using (var p = new Pen(Colors.DarkBorder))
                {
                    g.DrawLine(p, new Point(rect.Left, rect.Bottom - 1), new Point(rect.Right, rect.Bottom - 1));
                }*/

                // Text
                using (var b = new SolidBrush(Items[i].TextColor))
                {
                    var stringFormat = new StringFormat
                    {
                        Alignment = StringAlignment.Near,
                        LineAlignment = StringAlignment.Center
                    };

                    var modFont = new Font(Font, Items[i].FontStyle);

                    var modRect = new Rectangle(rect.Left + 2, rect.Top, rect.Width, rect.Height);
                    g.DrawString(Items[i].Text, modFont, b, modRect, stringFormat);
                }
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkMenuStrip.cs
================================================
ï»¿using DarkUI.Renderers;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkMenuStrip : MenuStrip
    {
        #region Constructor Region

        public DarkMenuStrip()
        {
            Renderer = new DarkMenuRenderer();
            Padding = new Padding(3, 2, 0, 2);
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkRadioButton.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkRadioButton : RadioButton
    {
        #region Field Region

        private DarkControlState _controlState = DarkControlState.Normal;

        private bool _spacePressed;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Appearance Appearance
        {
            get { return base.Appearance; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool AutoEllipsis
        {
            get { return base.AutoEllipsis; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image BackgroundImage
        {
            get { return base.BackgroundImage; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ImageLayout BackgroundImageLayout
        {
            get { return base.BackgroundImageLayout; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool FlatAppearance
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new FlatStyle FlatStyle
        {
            get { return base.FlatStyle; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image Image
        {
            get { return base.Image; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment ImageAlign
        {
            get { return base.ImageAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new int ImageIndex
        {
            get { return base.ImageIndex; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new string ImageKey
        {
            get { return base.ImageKey; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ImageList ImageList
        {
            get { return base.ImageList; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new ContentAlignment TextAlign
        {
            get { return base.TextAlign; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new TextImageRelation TextImageRelation
        {
            get { return base.TextImageRelation; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseCompatibleTextRendering
        {
            get { return false; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseVisualStyleBackColor
        {
            get { return false; }
        }

        #endregion

        #region Constructor Region

        public DarkRadioButton()
        {
            SetStyle(ControlStyles.SupportsTransparentBackColor |
                     ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);
        }

        #endregion

        #region Method Region

        private void SetControlState(DarkControlState controlState)
        {
            if (_controlState != controlState)
            {
                _controlState = controlState;
                Invalidate();
            }
        }

        #endregion

        #region Event Handler Region

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (_spacePressed)
                return;

            if (e.Button == MouseButtons.Left)
            {
                if (ClientRectangle.Contains(e.Location))
                    SetControlState(DarkControlState.Pressed);
                else
                    SetControlState(DarkControlState.Hover);
            }
            else
            {
                SetControlState(DarkControlState.Hover);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (!ClientRectangle.Contains(e.Location))
                return;

            SetControlState(DarkControlState.Pressed);
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (_spacePressed)
                return;

            SetControlState(DarkControlState.Normal);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            if (_spacePressed)
                return;

            SetControlState(DarkControlState.Normal);
        }

        protected override void OnMouseCaptureChanged(EventArgs e)
        {
            base.OnMouseCaptureChanged(e);

            if (_spacePressed)
                return;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetControlState(DarkControlState.Normal);
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);

            Invalidate();
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);

            _spacePressed = false;

            var location = Cursor.Position;

            if (!ClientRectangle.Contains(location))
                SetControlState(DarkControlState.Normal);
            else
                SetControlState(DarkControlState.Hover);
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;
            var rect = new Rectangle(0, 0, ClientSize.Width, ClientSize.Height);

            var size = Consts.RadioButtonSize;

            var textColor = Colors.LightText;
            var borderColor = Colors.LightText;
            var fillColor = Colors.LightestBackground;

            if (Enabled)
            {
                if (Focused)
                {
                    borderColor = Colors.BlueHighlight;
                    fillColor = Colors.BlueSelection;
                }

                if (_controlState == DarkControlState.Hover)
                {
                    borderColor = Colors.BlueHighlight;
                    fillColor = Colors.BlueSelection;
                }
                else if (_controlState == DarkControlState.Pressed)
                {
                    borderColor = Colors.GreyHighlight;
                    fillColor = Colors.GreySelection;
                }
            }
            else
            {
                textColor = Colors.DisabledText;
                borderColor = Colors.GreyHighlight;
                fillColor = Colors.GreySelection;
            }

            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, rect);
            }

            g.SmoothingMode = SmoothingMode.HighQuality;

            using (var p = new Pen(borderColor))
            {
                var boxRect = new Rectangle(0, (rect.Height / 2) - (size / 2), size, size);
                g.DrawEllipse(p, boxRect);
            }

            if (Checked)
            {
                using (var b = new SolidBrush(fillColor))
                {
                    Rectangle boxRect = new Rectangle(3, (rect.Height / 2) - ((size - 7) / 2) - 1, size - 6, size - 6);
                    g.FillEllipse(b, boxRect);
                }
            }

            g.SmoothingMode = SmoothingMode.Default;

            using (var b = new SolidBrush(textColor))
            {
                var stringFormat = new StringFormat
                {
                    LineAlignment = StringAlignment.Center,
                    Alignment = StringAlignment.Near
                };

                var modRect = new Rectangle(size + 4, 0, rect.Width - size, rect.Height);
                g.DrawString(Text, Font, b, modRect, stringFormat);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkScrollBar.cs
================================================
ï»¿using DarkUI.Config;
using DarkUI.Icons;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkScrollBar : Control
    {
        #region Event Region

        public event EventHandler<ScrollValueEventArgs> ValueChanged;

        #endregion

        #region Field Region

        private DarkScrollOrientation _scrollOrientation;

        private int _value;
        private int _minimum = 0;
        private int _maximum = 100;

        private int _viewSize;

        private Rectangle _trackArea;
        private float _viewContentRatio;

        private Rectangle _thumbArea;
        private Rectangle _upArrowArea;
        private Rectangle _downArrowArea;

        private bool _thumbHot;
        private bool _upArrowHot;
        private bool _downArrowHot;

        private bool _thumbClicked;
        private bool _upArrowClicked;
        private bool _downArrowClicked;

        private bool _isScrolling;
        private int _initialValue;
        private Point _initialContact;

        private Timer _scrollTimer;

        #endregion

        #region Property Region

        [Category("Behavior")]
        [Description("The orientation type of the scrollbar.")]
        [DefaultValue(DarkScrollOrientation.Vertical)]
        public DarkScrollOrientation ScrollOrientation
        {
            get { return _scrollOrientation; }
            set
            {
                _scrollOrientation = value;
                UpdateScrollBar();
            }
        }

        [Category("Behavior")]
        [Description("The value that the scroll thumb position represents.")]
        [DefaultValue(0)]
        public int Value
        {
            get { return _value; }
            set
            {
                if (value < Minimum)
                    value = Minimum;

                var maximumValue = Maximum - ViewSize;
                if (value > maximumValue)
                    value = maximumValue;

                if (_value == value)
                    return;

                _value = value;

                UpdateThumb(true);

                if (ValueChanged != null)
                    ValueChanged(this, new ScrollValueEventArgs(Value));
            }
        }

        [Category("Behavior")]
        [Description("The lower limit value of the scrollable range.")]
        [DefaultValue(0)]
        public int Minimum
        {
            get { return _minimum; }
            set
            {
                _minimum = value;
                UpdateScrollBar();
            }
        }

        [Category("Behavior")]
        [Description("The upper limit value of the scrollable range.")]
        [DefaultValue(100)]
        public int Maximum
        {
            get { return _maximum; }
            set
            {
                _maximum = value;
                UpdateScrollBar();
            }
        }

        [Category("Behavior")]
        [Description("The view size for the scrollable area.")]
        [DefaultValue(0)]
        public int ViewSize
        {
            get { return _viewSize; }
            set
            {
                _viewSize = value;
                UpdateScrollBar();
            }
        }

        public new bool Visible
        {
            get { return base.Visible; }
            set
            {
                if (base.Visible == value)
                    return;

                base.Visible = value;
            }
        }

        #endregion

        #region Constructor Region

        public DarkScrollBar()
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);

            SetStyle(ControlStyles.Selectable, false);

            _scrollTimer = new Timer();
            _scrollTimer.Interval = 1;
            _scrollTimer.Tick += ScrollTimerTick;
        }

        #endregion

        #region Event Handler Region

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            UpdateScrollBar();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (_thumbArea.Contains(e.Location) && e.Button == MouseButtons.Left)
            {
                _isScrolling = true;
                _initialContact = e.Location;

                if (_scrollOrientation == DarkScrollOrientation.Vertical)
                    _initialValue = _thumbArea.Top;
                else
                    _initialValue = _thumbArea.Left;

                Invalidate();
                return;
            }

            if (_upArrowArea.Contains(e.Location) && e.Button == MouseButtons.Left)
            {
                _upArrowClicked = true;
                _scrollTimer.Enabled = true;

                Invalidate();
                return;
            }

            if (_downArrowArea.Contains(e.Location) && e.Button == MouseButtons.Left)
            {
                _downArrowClicked = true;
                _scrollTimer.Enabled = true;

                Invalidate();
                return;
            }

            if (_trackArea.Contains(e.Location) && e.Button == MouseButtons.Left)
            {
                // Step 1. Check if our input is at least aligned with the thumb
                if (_scrollOrientation == DarkScrollOrientation.Vertical)
                {
                    var modRect = new Rectangle(_thumbArea.Left, _trackArea.Top, _thumbArea.Width, _trackArea.Height);
                    if (!modRect.Contains(e.Location))
                        return;
                }
                else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
                {
                    var modRect = new Rectangle(_trackArea.Left, _thumbArea.Top, _trackArea.Width, _thumbArea.Height);
                    if (!modRect.Contains(e.Location))
                        return;
                }

                // Step 2. Scroll to the area initially clicked.
                if (_scrollOrientation == DarkScrollOrientation.Vertical)
                {
                    var loc = e.Location.Y;
                    loc -= _upArrowArea.Bottom - 1;
                    loc -= _thumbArea.Height / 2;
                    ScrollToPhysical(loc);
                }
                else
                {
                    var loc = e.Location.X;
                    loc -= _upArrowArea.Right - 1;
                    loc -= _thumbArea.Width / 2;
                    ScrollToPhysical(loc);
                }

                // Step 3. Initiate a thumb drag.
                _isScrolling = true;
                _initialContact = e.Location;
                _thumbHot = true;

                if (_scrollOrientation == DarkScrollOrientation.Vertical)
                    _initialValue = _thumbArea.Top;
                else
                    _initialValue = _thumbArea.Left;

                Invalidate();
                return;
            }
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            _isScrolling = false;

            _thumbClicked = false;
            _upArrowClicked = false;
            _downArrowClicked = false;

            Invalidate();
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (!_isScrolling)
            {
                var thumbHot = _thumbArea.Contains(e.Location);
                if (_thumbHot != thumbHot)
                {
                    _thumbHot = thumbHot;
                    Invalidate();
                }

                var upArrowHot = _upArrowArea.Contains(e.Location);
                if (_upArrowHot != upArrowHot)
                {
                    _upArrowHot = upArrowHot;
                    Invalidate();
                }

                var downArrowHot = _downArrowArea.Contains(e.Location);
                if (_downArrowHot != downArrowHot)
                {
                    _downArrowHot = downArrowHot;
                    Invalidate();
                }
            }

            if (_isScrolling)
            {
                if (e.Button != MouseButtons.Left)
                {
                    OnMouseUp(null);
                    return;
                }

                var difference = new Point(e.Location.X - _initialContact.X, e.Location.Y - _initialContact.Y);

                if (_scrollOrientation == DarkScrollOrientation.Vertical)
                {
                    var thumbPos = (_initialValue - _trackArea.Top);
                    var newPosition = thumbPos + difference.Y;

                    ScrollToPhysical(newPosition);
                }
                else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
                {
                    var thumbPos = (_initialValue - _trackArea.Left);
                    var newPosition = thumbPos + difference.X;

                    ScrollToPhysical(newPosition);
                }

                UpdateScrollBar();
            }
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            _thumbHot = false;
            _upArrowHot = false;
            _downArrowHot = false;

            Invalidate();
        }

        private void ScrollTimerTick(object sender, EventArgs e)
        {
            if (!_upArrowClicked && !_downArrowClicked)
            {
                _scrollTimer.Enabled = false;
                return;
            }

            if (_upArrowClicked)
                ScrollBy(-1);
            else if (_downArrowClicked)
                ScrollBy(1);
        }

        #endregion

        #region Method Region

        public void ScrollTo(int position)
        {
            Value = position;
        }

        public void ScrollToPhysical(int positionInPixels)
        {
            var isVert = _scrollOrientation == DarkScrollOrientation.Vertical;

            var trackAreaSize = isVert ? _trackArea.Height - _thumbArea.Height : _trackArea.Width - _thumbArea.Width;

            var positionRatio = (float)positionInPixels / (float)trackAreaSize;
            var viewScrollSize = (Maximum - ViewSize);

            var newValue = (int)(positionRatio * viewScrollSize);
            Value = newValue;
        }

        public void ScrollBy(int offset)
        {
            var newValue = Value + offset;
            ScrollTo(newValue);
        }

        public void ScrollByPhysical(int offsetInPixels)
        {
            var isVert = _scrollOrientation == DarkScrollOrientation.Vertical;

            var thumbPos = isVert ? (_thumbArea.Top - _trackArea.Top) : (_thumbArea.Left - _trackArea.Left);

            var newPosition = thumbPos - offsetInPixels;

            ScrollToPhysical(newPosition);
        }

        public void UpdateScrollBar()
        {
            if (ViewSize >= Maximum)
                return;

            var area = ClientRectangle;

            // Cap to maximum value
            var maximumValue = Maximum - ViewSize;
            if (Value > maximumValue)
                Value = maximumValue;

            // Arrow buttons
            if (_scrollOrientation == DarkScrollOrientation.Vertical)
            {
                _upArrowArea = new Rectangle(area.Left, area.Top, Consts.ArrowButtonSize, Consts.ArrowButtonSize);
                _downArrowArea = new Rectangle(area.Left, area.Bottom - Consts.ArrowButtonSize, Consts.ArrowButtonSize, Consts.ArrowButtonSize);
            }
            else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
            {
                _upArrowArea = new Rectangle(area.Left, area.Top, Consts.ArrowButtonSize, Consts.ArrowButtonSize);
                _downArrowArea = new Rectangle(area.Right - Consts.ArrowButtonSize, area.Top, Consts.ArrowButtonSize, Consts.ArrowButtonSize);
            }

            // Track
            if (_scrollOrientation == DarkScrollOrientation.Vertical)
            {
                _trackArea = new Rectangle(area.Left, area.Top + Consts.ArrowButtonSize, area.Width, area.Height - (Consts.ArrowButtonSize * 2));
            }
            else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
            {
                _trackArea = new Rectangle(area.Left + Consts.ArrowButtonSize, area.Top, area.Width - (Consts.ArrowButtonSize * 2), area.Height);
            }

            // Thumb
            UpdateThumb();

            Invalidate();
        }

        private void UpdateThumb(bool forceRefresh = false)
        {
            // Calculate size ratio
            _viewContentRatio = (float)ViewSize / (float)Maximum;
            var viewAreaSize = Maximum - ViewSize;
            var positionRatio = (float)Value / (float)viewAreaSize;

            // Update area
            if (_scrollOrientation == DarkScrollOrientation.Vertical)
            {
                var thumbSize = (int)(_trackArea.Height * _viewContentRatio);

                if (thumbSize < Consts.MinimumThumbSize)
                    thumbSize = Consts.MinimumThumbSize;

                var trackAreaSize = _trackArea.Height - thumbSize;
                var thumbPosition = (int)(trackAreaSize * positionRatio);

                _thumbArea = new Rectangle(_trackArea.Left + 3, _trackArea.Top + thumbPosition, Consts.ScrollBarSize - 6, thumbSize);
            }
            else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
            {
                var thumbSize = (int)(_trackArea.Width * _viewContentRatio);

                if (thumbSize < Consts.MinimumThumbSize)
                    thumbSize = Consts.MinimumThumbSize;

                var trackAreaSize = _trackArea.Width - thumbSize;
                var thumbPosition = (int)(trackAreaSize * positionRatio);

                _thumbArea = new Rectangle(_trackArea.Left + thumbPosition, _trackArea.Top + 3, thumbSize, Consts.ScrollBarSize - 6);
            }

            if (forceRefresh)
            {
                Invalidate();
                Update();
            }
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            // DEBUG: Scrollbar bg
            /*using (var b = new SolidBrush(Colors.MediumBackground))
            {
                g.FillRectangle(b, ClientRectangle);
            }*/

            // DEBUG: Arrow backgrounds
            /*using (var b = new SolidBrush(Color.White))
            {
                g.FillRectangle(b, _upArrowArea);
                g.FillRectangle(b, _downArrowArea);
            }*/

            // Up arrow
            var upIcon = _upArrowHot ? ScrollIcons.scrollbar_arrow_hot : ScrollIcons.scrollbar_arrow_standard;

            if (_upArrowClicked)
                upIcon = ScrollIcons.scrollbar_arrow_clicked;

            if (_scrollOrientation == DarkScrollOrientation.Vertical)
                upIcon.RotateFlip(RotateFlipType.RotateNoneFlipY);
            else if (_scrollOrientation == DarkScrollOrientation.Horizontal)
                upIcon.RotateFlip(RotateFlipType.Rotate90FlipNone);

            g.DrawImageUnscaled(upIcon,
                                _upArrowArea.Left + (_upArrowArea.Width / 2) - (upIcon.Width / 2),
                                _upArrowArea.Top + (_upArrowArea.Height / 2) - (upIcon.Height / 2));

            // Down arrow
            var downIcon = _downArrowHot ? ScrollIcons.scrollbar_arrow_hot : ScrollIcons.scrollbar_arrow_standard;

            if (_downArrowClicked)
                downIcon = ScrollIcons.scrollbar_arrow_clicked;

            if (_scrollOrientation == DarkScrollOrientation.Horizontal)
                downIcon.RotateFlip(RotateFlipType.Rotate270FlipNone);

            g.DrawImageUnscaled(downIcon,
                                _downArrowArea.Left + (_downArrowArea.Width / 2) - (downIcon.Width / 2),
                                _downArrowArea.Top + (_downArrowArea.Height / 2) - (downIcon.Height / 2));

            // Draw thumb
            var scrollColor = _thumbHot ? Colors.GreyHighlight : Colors.GreySelection;

            if (_isScrolling)
                scrollColor = Colors.ActiveControl;

            using (var b = new SolidBrush(scrollColor))
            {
                g.FillRectangle(b, _thumbArea);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkScrollBase.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public abstract class DarkScrollBase : Control
    {
        #region Event Region

        public event EventHandler ViewportChanged;
        public event EventHandler ContentSizeChanged;

        #endregion

        #region Field Region

        protected readonly DarkScrollBar _vScrollBar;
        protected readonly DarkScrollBar _hScrollBar;

        private Size _visibleSize;
        private Size _contentSize;

        private Rectangle _viewport;

        private Point _offsetMousePosition;

        private int _maxDragChange = 0;
        private Timer _dragTimer;

        #endregion

        #region Property Region


        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Rectangle Viewport
        {
            get { return _viewport; }
            private set
            {
                _viewport = value;

                if (ViewportChanged != null)
                    ViewportChanged(this, null);
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Size ContentSize
        {
            get { return _contentSize; }
            set
            {
                _contentSize = value;
                UpdateScrollBars();

                if (ContentSizeChanged != null)
                    ContentSizeChanged(this, null);
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Point OffsetMousePosition
        {
            get { return _offsetMousePosition; }
        }

        [Category("Behavior")]
        [Description("Determines the maximum scroll change when dragging.")]
        [DefaultValue(0)]
        public int MaxDragChange
        {
            get { return _maxDragChange; }
            set
            {
                _maxDragChange = value;
                Invalidate();
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDragging { get; private set; }

        #endregion

        #region Constructor Region

        protected DarkScrollBase()
        {
            SetStyle(ControlStyles.Selectable |
                     ControlStyles.UserMouse, true);

            _vScrollBar = new DarkScrollBar { ScrollOrientation = DarkScrollOrientation.Vertical };
            _hScrollBar = new DarkScrollBar { ScrollOrientation = DarkScrollOrientation.Horizontal };

            Controls.Add(_vScrollBar);
            Controls.Add(_hScrollBar);

            _vScrollBar.ValueChanged += delegate { UpdateViewport(); };
            _hScrollBar.ValueChanged += delegate { UpdateViewport(); };

            _vScrollBar.MouseDown += delegate { Select(); };
            _hScrollBar.MouseDown += delegate { Select(); };

            _dragTimer = new Timer();
            _dragTimer.Interval = 1;
            _dragTimer.Tick += DragTimer_Tick;
        }

        #endregion

        #region Method Region

        private void UpdateScrollBars()
        {
            if (_vScrollBar.Maximum != ContentSize.Height)
                _vScrollBar.Maximum = ContentSize.Height;

            if (_hScrollBar.Maximum != ContentSize.Width)
                _hScrollBar.Maximum = ContentSize.Width;

            var scrollSize = Consts.ScrollBarSize;

            _vScrollBar.Location = new Point(ClientSize.Width - scrollSize, 0);
            _vScrollBar.Size = new Size(scrollSize, ClientSize.Height);

            _hScrollBar.Location = new Point(0, ClientSize.Height - scrollSize);
            _hScrollBar.Size = new Size(ClientSize.Width, scrollSize);

            if (DesignMode)
                return;

            // Do this twice in case changing the visibility of the scrollbars
            // causes the VisibleSize to change in such a way as to require a second scrollbar.
            // Probably a better way to detect that scenario...
            SetVisibleSize();
            SetScrollBarVisibility();
            SetVisibleSize();
            SetScrollBarVisibility();

            if (_vScrollBar.Visible)
                _hScrollBar.Width -= scrollSize;

            if (_hScrollBar.Visible)
                _vScrollBar.Height -= scrollSize;

            _vScrollBar.ViewSize = _visibleSize.Height;
            _hScrollBar.ViewSize = _visibleSize.Width;

            UpdateViewport();
        }

        private void SetScrollBarVisibility()
        {
            _vScrollBar.Visible = _visibleSize.Height < ContentSize.Height;
            _hScrollBar.Visible = _visibleSize.Width < ContentSize.Width;
        }

        private void SetVisibleSize()
        {
            var scrollSize = Consts.ScrollBarSize;

            _visibleSize = new Size(ClientSize.Width, ClientSize.Height);

            if (_vScrollBar.Visible)
                _visibleSize.Width -= scrollSize;

            if (_hScrollBar.Visible)
                _visibleSize.Height -= scrollSize;
        }

        private void UpdateViewport()
        {
            var left = 0;
            var top = 0;
            var width = ClientSize.Width;
            var height = ClientSize.Height;

            if (_hScrollBar.Visible)
            {
                left = _hScrollBar.Value;
                height -= _hScrollBar.Height;
            }

            if (_vScrollBar.Visible)
            {
                top = _vScrollBar.Value;
                width -= _vScrollBar.Width;
            }

            Viewport = new Rectangle(left, top, width, height);

            var pos = PointToClient(MousePosition);
            _offsetMousePosition = new Point(pos.X + Viewport.Left, pos.Y + Viewport.Top);

            Invalidate();
        }

        public void ScrollTo(Point point)
        {
            HScrollTo(point.X);
            VScrollTo(point.Y);
        }

        public void VScrollTo(int value)
        {
            if (_vScrollBar.Visible)
                _vScrollBar.Value = value;
        }

        public void HScrollTo(int value)
        {
            if (_hScrollBar.Visible)
                _hScrollBar.Value = value;
        }

        protected virtual void StartDrag()
        {
            IsDragging = true;
            _dragTimer.Start();
        }

        protected virtual void StopDrag()
        {
            IsDragging = false;
            _dragTimer.Stop();
        }

        public Point PointToView(Point point)
        {
            return new Point(point.X - Viewport.Left, point.Y - Viewport.Top);
        }

        public Rectangle RectangleToView(Rectangle rect)
        {
            return new Rectangle(new Point(rect.Left - Viewport.Left, rect.Top - Viewport.Top), rect.Size);
        }

        #endregion

        #region Event Handler Region

        protected override void OnCreateControl()
        {
            base.OnCreateControl();

            UpdateScrollBars();
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);

            Invalidate();
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);

            Invalidate();
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            UpdateScrollBars();
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            _offsetMousePosition = new Point(e.X + Viewport.Left, e.Y + Viewport.Top);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (e.Button == MouseButtons.Right)
                Select();
        }

        protected override void OnMouseWheel(MouseEventArgs e)
        {
            base.OnMouseWheel(e);

            var horizontal = false;

            if (_hScrollBar.Visible && ModifierKeys == Keys.Control)
                horizontal = true;

            if (_hScrollBar.Visible && !_vScrollBar.Visible)
                horizontal = true;

            if (!horizontal)
            {
                if (e.Delta > 0)
                    _vScrollBar.ScrollByPhysical(3);
                else if (e.Delta < 0)
                    _vScrollBar.ScrollByPhysical(-3);
            }
            else
            {
                if (e.Delta > 0)
                    _hScrollBar.ScrollByPhysical(3);
                else if (e.Delta < 0)
                    _hScrollBar.ScrollByPhysical(-3);
            }
        }

        protected override void OnPreviewKeyDown(PreviewKeyDownEventArgs e)
        {
            base.OnPreviewKeyDown(e);

            // Allows arrow keys to trigger OnKeyPress
            switch (e.KeyCode)
            {
                case Keys.Up:
                case Keys.Down:
                case Keys.Left:
                case Keys.Right:
                    e.IsInputKey = true;
                    break;
            }
        }

        private void DragTimer_Tick(object sender, EventArgs e)
        {
            var pos = PointToClient(MousePosition);

            var right = ClientRectangle.Right;
            var bottom = ClientRectangle.Bottom;

            if (_vScrollBar.Visible)
                right = _vScrollBar.Left;

            if (_hScrollBar.Visible)
                bottom = _hScrollBar.Top;

            if (_vScrollBar.Visible)
            {
                // Scroll up
                if (pos.Y < ClientRectangle.Top)
                {
                    var difference = (pos.Y - ClientRectangle.Top) * -1;

                    if (MaxDragChange > 0 && difference > MaxDragChange)
                        difference = MaxDragChange;

                    _vScrollBar.Value = _vScrollBar.Value - difference;
                }

                // Scroll down
                if (pos.Y > bottom)
                {
                    var difference = pos.Y - bottom;

                    if (MaxDragChange > 0 && difference > MaxDragChange)
                        difference = MaxDragChange;

                    _vScrollBar.Value = _vScrollBar.Value + difference;
                }
            }

            if (_hScrollBar.Visible)
            {
                // Scroll left
                if (pos.X < ClientRectangle.Left)
                {
                    var difference = (pos.X - ClientRectangle.Left) * -1;

                    if (MaxDragChange > 0 && difference > MaxDragChange)
                        difference = MaxDragChange;

                    _hScrollBar.Value = _hScrollBar.Value - difference;
                }

                // Scroll right
                if (pos.X > right)
                {
                    var difference = pos.X - right;

                    if (MaxDragChange > 0 && difference > MaxDragChange)
                        difference = MaxDragChange;

                    _hScrollBar.Value = _hScrollBar.Value + difference;
                }
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkScrollOrientation.cs
================================================
ï»¿namespace DarkUI.Controls
{
    public enum DarkScrollOrientation
    {
        Vertical,
        Horizontal
    }
}



================================================
File: DarkUI/Controls/DarkScrollView.cs
================================================
ï»¿using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public abstract class DarkScrollView : DarkScrollBase
    {
        #region Constructor Region

        protected DarkScrollView()
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);
        }

        #endregion

        #region Paint Region

        protected abstract void PaintContent(Graphics g);

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            // Draw background
            using (var b = new SolidBrush(BackColor))
            {
                g.FillRectangle(b, ClientRectangle);
            }

            // Offset the graphics based on the viewport, render the control contents, then reset it.
            g.TranslateTransform(Viewport.Left * -1, Viewport.Top * -1);

            PaintContent(g);

            g.TranslateTransform(Viewport.Left, Viewport.Top);

            // Draw the bit where the scrollbars meet
            if (_vScrollBar.Visible && _hScrollBar.Visible)
            {
                using (var b = new SolidBrush(BackColor))
                {
                    var rect = new Rectangle(_hScrollBar.Right, _vScrollBar.Bottom, _vScrollBar.Width,
                                             _hScrollBar.Height);

                    g.FillRectangle(b, rect);
                }
            }
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            // Absorb event
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkSectionPanel.cs
================================================
ï»¿using DarkUI.Config;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkSectionPanel : Panel
    {
        #region Field Region

        private string _sectionHeader;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Padding Padding
        {
            get { return base.Padding; }
        }

        [Category("Appearance")]
        [Description("The section header text associated with this control.")]
        public string SectionHeader
        {
            get { return _sectionHeader; }
            set
            {
                _sectionHeader = value;
                Invalidate();
            }
        }

        #endregion

        #region Constructor Region

        public DarkSectionPanel()
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);

            base.Padding = new Padding(1, 25, 1, 1);
        }

        #endregion

        #region Event Handler Region

        protected override void OnEnter(System.EventArgs e)
        {
            base.OnEnter(e);

            Invalidate();
        }

        protected override void OnLeave(System.EventArgs e)
        {
            base.OnLeave(e);

            Invalidate();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (Controls.Count > 0)
                Controls[0].Focus();
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;
            var rect = ClientRectangle;

            // Fill body
            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, rect);
            }

            // Draw header
            var bgColor = ContainsFocus ? Colors.BlueBackground : Colors.HeaderBackground;
            var darkColor = ContainsFocus ? Colors.DarkBlueBorder : Colors.DarkBorder;
            var lightColor = ContainsFocus ? Colors.LightBlueBorder : Colors.LightBorder;

            using (var b = new SolidBrush(bgColor))
            {
                var bgRect = new Rectangle(0, 0, rect.Width, 25);
                g.FillRectangle(b, bgRect);
            }

            using (var p = new Pen(darkColor))
            {
                g.DrawLine(p, rect.Left, 0, rect.Right, 0);
                g.DrawLine(p, rect.Left, 25 - 1, rect.Right, 25 - 1);
            }

            using (var p = new Pen(lightColor))
            {
                g.DrawLine(p, rect.Left, 1, rect.Right, 1);
            }

            var xOffset = 3;

            using (var b = new SolidBrush(Colors.LightText))
            {
                var textRect = new Rectangle(xOffset, 0, rect.Width - 4 - xOffset, 25);

                var format = new StringFormat
                {
                    Alignment = StringAlignment.Near,
                    LineAlignment = StringAlignment.Center,
                    FormatFlags = StringFormatFlags.NoWrap,
                    Trimming = StringTrimming.EllipsisCharacter
                };

                g.DrawString(SectionHeader, Font, b, textRect, format);
            }

            // Draw border
            using (var p = new Pen(Colors.DarkBorder, 1))
            {
                var modRect = new Rectangle(rect.Left, rect.Top, rect.Width - 1, rect.Height - 1);

                g.DrawRectangle(p, modRect);
            }
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            // Absorb event
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkSeparator.cs
================================================
ï»¿using DarkUI.Config;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkSeparator : Control
    {
        #region Constructor Region

        public DarkSeparator()
        {
            SetStyle(ControlStyles.Selectable, false);

            Dock = DockStyle.Top;
            Size = new Size(1, 2);
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            using (var p = new Pen(Colors.DarkBorder))
            {
                g.DrawLine(p, ClientRectangle.Left, 0, ClientRectangle.Right, 0);
            }

            using (var p = new Pen(Colors.LightBorder))
            {
                g.DrawLine(p, ClientRectangle.Left, 1, ClientRectangle.Right, 1);
            }
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            // Absorb event
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkStatusStrip.cs
================================================
ï»¿using DarkUI.Config;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkStatusStrip : StatusStrip
    {
        #region Constructor Region

        public DarkStatusStrip()
        {
            AutoSize = false;
            BackColor = Colors.GreyBackground;
            ForeColor = Colors.LightText;
            Padding = new Padding(0, 5, 0, 3);
            Size = new Size(Size.Width, 24);
            SizingGrip = false;
        }

        #endregion

        #region Paint Region

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            var g = e.Graphics;

            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, ClientRectangle);
            }

            using (var p = new Pen(Colors.DarkBorder))
            {
                g.DrawLine(p, ClientRectangle.Left, 0, ClientRectangle.Right, 0);
            }

            using (var p = new Pen(Colors.LightBorder))
            {
                g.DrawLine(p, ClientRectangle.Left, 1, ClientRectangle.Right, 1);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkTextBox.cs
================================================
ï»¿using DarkUI.Config;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkTextBox : TextBox
    {
        #region Constructor Region

        public DarkTextBox()
        {
            BackColor = Colors.LightBackground;
            ForeColor = Colors.LightText;
            Padding = new Padding(2, 2, 2, 2);
            BorderStyle = BorderStyle.FixedSingle;
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkTitle.cs
================================================
ï»¿using DarkUI.Config;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkTitle : Label
    {
        #region Constructor Region

        public DarkTitle()
        { }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;
            var rect = new Rectangle(0, 0, ClientSize.Width, ClientSize.Height);

            var textSize = g.MeasureString(Text, Font);

            using (var b = new SolidBrush(Colors.LightText))
            {
                g.DrawString(Text, Font, b, new PointF(-2, 0));
            }

            using (var p = new Pen(Colors.GreyHighlight))
            {
                var p1 = new PointF(textSize.Width + 5, textSize.Height / 2);
                var p2 = new PointF(rect.Width, textSize.Height / 2);
                g.DrawLine(p, p1, p2);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkToolStrip.cs
================================================
ï»¿using DarkUI.Renderers;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkToolStrip : ToolStrip
    {
        #region Constructor Region

        public DarkToolStrip()
        {
            Renderer = new DarkToolStripRenderer();
            Padding = new Padding(5, 0, 1, 0);
            AutoSize = false;
            Size = new Size(1, 28);
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkTreeNode.cs
================================================
ï»¿using DarkUI.Collections;
using System;
using System.Drawing;

namespace DarkUI.Controls
{
    public class DarkTreeNode
    {
        #region Event Region

        public event EventHandler<ObservableListModified<DarkTreeNode>> ItemsAdded;
        public event EventHandler<ObservableListModified<DarkTreeNode>> ItemsRemoved;

        public event EventHandler TextChanged;
        public event EventHandler NodeExpanded;
        public event EventHandler NodeCollapsed;

        #endregion

        #region Field Region

        private string _text;
        private bool _isRoot;
        private DarkTreeView _parentTree;
        private DarkTreeNode _parentNode;

        private ObservableList<DarkTreeNode> _nodes;

        private bool _expanded;

        #endregion

        #region Property Region

        public string Text
        {
            get { return _text; }
            set
            {
                if (_text == value)
                    return;

                _text = value;

                OnTextChanged();
            }
        }

        public Rectangle ExpandArea { get; set; }

        public Rectangle IconArea { get; set; }

        public Rectangle TextArea { get; set; }

        public Rectangle FullArea { get; set; }

        public bool ExpandAreaHot { get; set; }

        public Bitmap Icon { get; set; }

        public Bitmap ExpandedIcon { get; set; }

        public bool Expanded
        {
            get { return _expanded; }
            set
            {
                if (_expanded == value)
                    return;

                if (value == true && Nodes.Count == 0)
                    return;

                _expanded = value;

                if (_expanded)
                {
                    if (NodeExpanded != null)
                        NodeExpanded(this, null);
                }
                else
                {
                    if (NodeCollapsed != null)
                        NodeCollapsed(this, null);
                }
            }
        }

        public ObservableList<DarkTreeNode> Nodes
        {
            get { return _nodes; }
            set
            {
                if (_nodes != null)
                {
                    _nodes.ItemsAdded -= Nodes_ItemsAdded;
                    _nodes.ItemsRemoved -= Nodes_ItemsRemoved;
                }

                _nodes = value;

                _nodes.ItemsAdded += Nodes_ItemsAdded;
                _nodes.ItemsRemoved += Nodes_ItemsRemoved;
            }
        }

        public bool IsRoot
        {
            get { return _isRoot; }
            set { _isRoot = value; }
        }

        public DarkTreeView ParentTree
        {
            get { return _parentTree; }
            set
            {
                if (_parentTree == value)
                    return;

                _parentTree = value;

                foreach (var node in Nodes)
                    node.ParentTree = _parentTree;
            }
        }

        public DarkTreeNode ParentNode
        {
            get { return _parentNode; }
            set { _parentNode = value; }
        }

        public bool Odd { get; set; }

        public object NodeType { get; set; }

        public object Tag { get; set; }

        public string FullPath
        {
            get
            {
                var parent = ParentNode;
                var path = Text;

                while (parent != null)
                {
                    path = string.Format("{0}{1}{2}", parent.Text, "\\", path);
                    parent = parent.ParentNode;
                }

                return path;
            }
        }

        public DarkTreeNode PrevVisibleNode { get; set; }

        public DarkTreeNode NextVisibleNode { get; set; }

        public int VisibleIndex { get; set; }

        public bool IsNodeAncestor(DarkTreeNode node)
        {
            var parent = ParentNode;
            while (parent != null)
            {
                if (parent == node)
                    return true;

                parent = parent.ParentNode;
            }

            return false;
        }

        #endregion

        #region Constructor Region

        public DarkTreeNode()
        {
            Nodes = new ObservableList<DarkTreeNode>();
        }

        public DarkTreeNode(string text)
            : this()
        {
            Text = text;
        }

        #endregion

        #region Method Region

        public void Remove()
        {
            if (ParentNode != null)
                ParentNode.Nodes.Remove(this);
            else
                ParentTree.Nodes.Remove(this);
        }

        public void EnsureVisible()
        {
            var parent = ParentNode;

            while (parent != null)
            {
                parent.Expanded = true;
                parent = parent.ParentNode;
            }
        }

        #endregion

        #region Event Handler Region

        private void OnTextChanged()
        {
            if (ParentTree != null && ParentTree.TreeViewNodeSorter != null)
            {
                if (ParentNode != null)
                    ParentNode.Nodes.Sort(ParentTree.TreeViewNodeSorter);
                else
                    ParentTree.Nodes.Sort(ParentTree.TreeViewNodeSorter);
            }

            if (TextChanged != null)
                TextChanged(this, null);
        }

        private void Nodes_ItemsAdded(object sender, ObservableListModified<DarkTreeNode> e)
        {
            foreach (var node in e.Items)
            {
                node.ParentNode = this;
                node.ParentTree = ParentTree;
            }

            if (ParentTree != null && ParentTree.TreeViewNodeSorter != null)
                Nodes.Sort(ParentTree.TreeViewNodeSorter);

            if (ItemsAdded != null)
                ItemsAdded(this, e);
        }

        private void Nodes_ItemsRemoved(object sender, ObservableListModified<DarkTreeNode> e)
        {
            if (Nodes.Count == 0)
                Expanded = false;

            if (ItemsRemoved != null)
                ItemsRemoved(this, e);
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/DarkTreeView.cs
================================================
ï»¿using DarkUI.Collections;
using DarkUI.Config;
using DarkUI.Extensions;
using DarkUI.Forms;
using DarkUI.Icons;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace DarkUI.Controls
{
    public class DarkTreeView : DarkScrollView
    {
        #region Event Region

        public event EventHandler SelectedNodesChanged;
        public event EventHandler AfterNodeExpand;
        public event EventHandler AfterNodeCollapse;

        #endregion

        #region Field Region

        private bool _disposed;

        private readonly int _expandAreaSize = 16;
        private readonly int _iconSize = 16;

        private int _itemHeight = 20;
        private int _indent = 20;

        private ObservableList<DarkTreeNode> _nodes;
        private ObservableCollection<DarkTreeNode> _selectedNodes;

        private DarkTreeNode _anchoredNodeStart;
        private DarkTreeNode _anchoredNodeEnd;

        private Bitmap _nodeClosed;
        private Bitmap _nodeClosedHover;
        private Bitmap _nodeClosedHoverSelected;
        private Bitmap _nodeOpen;
        private Bitmap _nodeOpenHover;
        private Bitmap _nodeOpenHoverSelected;

        private DarkTreeNode _provisionalNode;
        private DarkTreeNode _dropNode;
        private bool _provisionalDragging;
        private List<DarkTreeNode> _dragNodes;
        private Point _dragPos;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ObservableList<DarkTreeNode> Nodes
        {
            get { return _nodes; }
            set
            {
                if (_nodes != null)
                {
                    _nodes.ItemsAdded -= Nodes_ItemsAdded;
                    _nodes.ItemsRemoved -= Nodes_ItemsRemoved;

                    foreach (var node in _nodes)
                        UnhookNodeEvents(node);
                }

                _nodes = value;

                _nodes.ItemsAdded += Nodes_ItemsAdded;
                _nodes.ItemsRemoved += Nodes_ItemsRemoved;

                foreach (var node in _nodes)
                    HookNodeEvents(node);

                UpdateNodes();
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ObservableCollection<DarkTreeNode> SelectedNodes
        {
            get { return _selectedNodes; }
        }

        [Category("Appearance")]
        [Description("Determines the height of tree nodes.")]
        [DefaultValue(20)]
        public int ItemHeight
        {
            get { return _itemHeight; }
            set
            {
                _itemHeight = value;
                MaxDragChange = _itemHeight;
                UpdateNodes();
            }
        }

        [Category("Appearance")]
        [Description("Determines the amount of horizontal space given by parent node.")]
        [DefaultValue(20)]
        public int Indent
        {
            get { return _indent; }
            set
            {
                _indent = value;
                UpdateNodes();
            }
        }

        [Category("Behavior")]
        [Description("Determines whether multiple tree nodes can be selected at once.")]
        [DefaultValue(false)]
        public bool MultiSelect { get; set; }

        [Category("Behavior")]
        [Description("Determines whether nodes can be moved within this tree view.")]
        [DefaultValue(false)]
        public bool AllowMoveNodes { get; set; }

        [Category("Appearance")]
        [Description("Determines whether icons are rendered with the tree nodes.")]
        [DefaultValue(false)]
        public bool ShowIcons { get; set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int VisibleNodeCount { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IComparer<DarkTreeNode> TreeViewNodeSorter { get; set; }

        #endregion

        #region Constructor Region

        public DarkTreeView()
        {
            Nodes = new ObservableList<DarkTreeNode>();
            _selectedNodes = new ObservableCollection<DarkTreeNode>();
            _selectedNodes.CollectionChanged += SelectedNodes_CollectionChanged;

            MaxDragChange = _itemHeight;

            LoadIcons();
        }

        #endregion

        #region Dispose Region

        protected override void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                DisposeIcons();

                if (SelectedNodesChanged != null)
                    SelectedNodesChanged = null;

                if (AfterNodeExpand != null)
                    AfterNodeExpand = null;

                if (AfterNodeCollapse != null)
                    AfterNodeExpand = null;

                if (_nodes != null)
                    _nodes.Dispose();

                if (_selectedNodes != null)
                    _selectedNodes.CollectionChanged -= SelectedNodes_CollectionChanged;

                _disposed = true;
            }

            base.Dispose(disposing);
        }

        #endregion

        #region Event Handler Region

        private void Nodes_ItemsAdded(object sender, ObservableListModified<DarkTreeNode> e)
        {
            foreach (var node in e.Items)
            {
                node.ParentTree = this;
                node.IsRoot = true;

                HookNodeEvents(node);
            }

            if (TreeViewNodeSorter != null)
                Nodes.Sort(TreeViewNodeSorter);

            UpdateNodes();
        }

        private void Nodes_ItemsRemoved(object sender, ObservableListModified<DarkTreeNode> e)
        {
            foreach (var node in e.Items)
            {
                node.ParentTree = this;
                node.IsRoot = true;

                HookNodeEvents(node);
            }

            UpdateNodes();
        }

        private void ChildNodes_ItemsAdded(object sender, ObservableListModified<DarkTreeNode> e)
        {
            foreach (var node in e.Items)
                HookNodeEvents(node);

            UpdateNodes();
        }

        private void ChildNodes_ItemsRemoved(object sender, ObservableListModified<DarkTreeNode> e)
        {
            foreach (var node in e.Items)
            {
                if (SelectedNodes.Contains(node))
                    SelectedNodes.Remove(node);

                UnhookNodeEvents(node);
            }

            UpdateNodes();
        }

        private void SelectedNodes_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (SelectedNodesChanged != null)
                SelectedNodesChanged(this, null);
        }

        private void Nodes_TextChanged(object sender, EventArgs e)
        {
            UpdateNodes();
        }

        private void Nodes_NodeExpanded(object sender, EventArgs e)
        {
            UpdateNodes();

            if (AfterNodeExpand != null)
                AfterNodeExpand(this, null);
        }

        private void Nodes_NodeCollapsed(object sender, EventArgs e)
        {
            UpdateNodes();

            if (AfterNodeCollapse != null)
                AfterNodeCollapse(this, null);
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            if (_provisionalDragging)
            {
                if (OffsetMousePosition != _dragPos)
                {
                    StartDrag();
                    HandleDrag();
                    return;
                }
            }

            if (IsDragging)
            {
                if (_dropNode != null)
                {
                    var rect = GetNodeFullRowArea(_dropNode);
                    if (!rect.Contains(OffsetMousePosition))
                    {
                        _dropNode = null;
                        Invalidate();
                    }
                }
            }

            CheckHover();

            if (IsDragging)
            {
                HandleDrag();
            }

            base.OnMouseMove(e);
        }

        protected override void OnMouseWheel(MouseEventArgs e)
        {
            CheckHover();

            base.OnMouseWheel(e);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left || e.Button == MouseButtons.Right)
            {
                foreach (var node in Nodes)
                    CheckNodeClick(node, OffsetMousePosition, e.Button);
            }

            base.OnMouseDown(e);
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            if (IsDragging)
            {
                HandleDrop();
            }

            if (_provisionalDragging)
            {

                if (_provisionalNode != null)
                {
                    var pos = _dragPos;
                    if (OffsetMousePosition == pos)
                        SelectNode(_provisionalNode);
                }

                _provisionalDragging = false;
            }

            base.OnMouseUp(e);
        }

        protected override void OnMouseDoubleClick(MouseEventArgs e)
        {
            if (ModifierKeys == Keys.Control)
                return;

            if (e.Button == MouseButtons.Left)
            {
                foreach (var node in Nodes)
                    CheckNodeDoubleClick(node, OffsetMousePosition);
            }

            base.OnMouseDoubleClick(e);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            foreach (var node in Nodes)
                NodeMouseLeave(node);
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            if (IsDragging)
                return;

            if (Nodes.Count == 0)
                return;

            if (e.KeyCode != Keys.Down && e.KeyCode != Keys.Up && e.KeyCode != Keys.Left && e.KeyCode != Keys.Right)
                return;

            if (_anchoredNodeEnd == null)
            {
                if (Nodes.Count > 0)
                    SelectNode(Nodes[0]);
                return;
            }

            if (e.KeyCode == Keys.Down || e.KeyCode == Keys.Up)
            {
                if (MultiSelect && ModifierKeys == Keys.Shift)
                {
                    if (e.KeyCode == Keys.Up)
                    {
                        if (_anchoredNodeEnd.PrevVisibleNode != null)
                        {
                            SelectAnchoredRange(_anchoredNodeEnd.PrevVisibleNode);
                            EnsureVisible();
                        }
                    }
                    else if (e.KeyCode == Keys.Down)
                    {
                        if (_anchoredNodeEnd.NextVisibleNode != null)
                        {
                            SelectAnchoredRange(_anchoredNodeEnd.NextVisibleNode);
                            EnsureVisible();
                        }
                    }
                }
                else
                {
                    if (e.KeyCode == Keys.Up)
                    {
                        if (_anchoredNodeEnd.PrevVisibleNode != null)
                        {
                            SelectNode(_anchoredNodeEnd.PrevVisibleNode);
                            EnsureVisible();
                        }
                    }
                    else if (e.KeyCode == Keys.Down)
                    {
                        if (_anchoredNodeEnd.NextVisibleNode != null)
                        {
                            SelectNode(_anchoredNodeEnd.NextVisibleNode);
                            EnsureVisible();
                        }
                    }
                }
            }

            if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)
            {
                if (e.KeyCode == Keys.Left)
                {
                    if (_anchoredNodeEnd.Expanded && _anchoredNodeEnd.Nodes.Count > 0)
                    {
                        _anchoredNodeEnd.Expanded = false;
                    }
                    else
                    {
                        if (_anchoredNodeEnd.ParentNode != null)
                        {
                            SelectNode(_anchoredNodeEnd.ParentNode);
                            EnsureVisible();
                        }
                    }
                }
                else if (e.KeyCode == Keys.Right)
                {
                    if (!_anchoredNodeEnd.Expanded)
                    {
                        _anchoredNodeEnd.Expanded = true;
                    }
                    else
                    {
                        if (_anchoredNodeEnd.Nodes.Count > 0)
                        {
                            SelectNode(_anchoredNodeEnd.Nodes[0]);
                            EnsureVisible();
                        }
                    }
                }
            }
        }

        private void DragTimer_Tick(object sender, EventArgs e)
        {
            if (!IsDragging)
            {
                StopDrag();
                return;
            }

            if (MouseButtons != MouseButtons.Left)
            {
                StopDrag();
                return;
            }

            var pos = PointToClient(MousePosition);

            if (_vScrollBar.Visible)
            {
                // Scroll up
                if (pos.Y < ClientRectangle.Top)
                {
                    var difference = (pos.Y - ClientRectangle.Top) * -1;

                    if (difference > ItemHeight)
                        difference = ItemHeight;

                    _vScrollBar.Value = _vScrollBar.Value - difference;
                }

                // Scroll down
                if (pos.Y > ClientRectangle.Bottom)
                {
                    var difference = pos.Y - ClientRectangle.Bottom;

                    if (difference > ItemHeight)
                        difference = ItemHeight;

                    _vScrollBar.Value = _vScrollBar.Value + difference;
                }
            }

            if (_hScrollBar.Visible)
            {
                // Scroll left
                if (pos.X < ClientRectangle.Left)
                {
                    var difference = (pos.X - ClientRectangle.Left) * -1;

                    if (difference > ItemHeight)
                        difference = ItemHeight;

                    _hScrollBar.Value = _hScrollBar.Value - difference;
                }

                // Scroll right
                if (pos.X > ClientRectangle.Right)
                {
                    var difference = pos.X - ClientRectangle.Right;

                    if (difference > ItemHeight)
                        difference = ItemHeight;

                    _hScrollBar.Value = _hScrollBar.Value + difference;
                }
            }
        }

        #endregion

        #region Method Region

        private void HookNodeEvents(DarkTreeNode node)
        {
            node.Nodes.ItemsAdded += ChildNodes_ItemsAdded;
            node.Nodes.ItemsRemoved += ChildNodes_ItemsRemoved;

            node.TextChanged += Nodes_TextChanged;
            node.NodeExpanded += Nodes_NodeExpanded;
            node.NodeCollapsed += Nodes_NodeCollapsed;

            foreach (var childNode in node.Nodes)
                HookNodeEvents(childNode);
        }

        private void UnhookNodeEvents(DarkTreeNode node)
        {
            node.Nodes.ItemsAdded -= ChildNodes_ItemsAdded;
            node.Nodes.ItemsRemoved -= ChildNodes_ItemsRemoved;

            node.TextChanged -= Nodes_TextChanged;
            node.NodeExpanded -= Nodes_NodeExpanded;
            node.NodeCollapsed -= Nodes_NodeCollapsed;

            foreach (var childNode in node.Nodes)
                UnhookNodeEvents(childNode);
        }

        private void UpdateNodes()
        {
            if (IsDragging)
                return;

            if (Nodes.Count == 0)
                return;

            var yOffset = 0;
            var isOdd = false;
            var index = 0;
            DarkTreeNode prevNode = null;

            ContentSize = new Size(0, 0);

            for (var i = 0; i <= Nodes.Count - 1; i++)
            {
                var node = Nodes[i];
                UpdateNode(node, ref prevNode, 0, ref yOffset, ref isOdd, ref index);
            }

            ContentSize = new Size(ContentSize.Width, yOffset);

            VisibleNodeCount = index;

            Invalidate();
        }

        private void UpdateNode(DarkTreeNode node, ref DarkTreeNode prevNode, int indent, ref int yOffset,
                                ref bool isOdd, ref int index)
        {
            UpdateNodeBounds(node, yOffset, indent);

            yOffset += ItemHeight;

            node.Odd = isOdd;
            isOdd = !isOdd;

            node.VisibleIndex = index;
            index++;

            node.PrevVisibleNode = prevNode;

            if (prevNode != null)
                prevNode.NextVisibleNode = node;

            prevNode = node;

            if (node.Expanded)
            {
                foreach (var childNode in node.Nodes)
                    UpdateNode(childNode, ref prevNode, indent + Indent, ref yOffset, ref isOdd, ref index);
            }
        }

        private void UpdateNodeBounds(DarkTreeNode node, int yOffset, int indent)
        {
            var expandTop = yOffset + (ItemHeight / 2) - (_expandAreaSize / 2);
            node.ExpandArea = new Rectangle(indent + 3, expandTop, _expandAreaSize, _expandAreaSize);

            var iconTop = yOffset + (ItemHeight / 2) - (_iconSize / 2);

            if (ShowIcons)
                node.IconArea = new Rectangle(node.ExpandArea.Right + 2, iconTop, _iconSize, _iconSize);
            else
                node.IconArea = new Rectangle(node.ExpandArea.Right, iconTop, 0, 0);

            using (var g = CreateGraphics())
            {
                var textSize = (int)(g.MeasureString(node.Text, Font).Width);
                node.TextArea = new Rectangle(node.IconArea.Right + 2, yOffset, textSize + 1, ItemHeight);
            }

            node.FullArea = new Rectangle(indent, yOffset, (node.TextArea.Right - indent), ItemHeight);

            if (ContentSize.Width < node.TextArea.Right + 2)
                ContentSize = new Size(node.TextArea.Right + 2, ContentSize.Height);
        }

        private void LoadIcons()
        {
            DisposeIcons();

            _nodeClosed = TreeViewIcons.node_closed_empty.SetColor(Colors.LightText);
            _nodeClosedHover = TreeViewIcons.node_closed_empty.SetColor(Colors.BlueHighlight);
            _nodeClosedHoverSelected = TreeViewIcons.node_closed_full.SetColor(Colors.LightText);
            _nodeOpen = TreeViewIcons.node_open.SetColor(Colors.LightText);
            _nodeOpenHover = TreeViewIcons.node_open.SetColor(Colors.BlueHighlight);
            _nodeOpenHoverSelected = TreeViewIcons.node_open_empty.SetColor(Colors.LightText);
        }

        private void DisposeIcons()
        {
            if (_nodeClosed != null)
                _nodeClosed.Dispose();

            if (_nodeClosedHover != null)
                _nodeClosedHover.Dispose();

            if (_nodeClosedHoverSelected != null)
                _nodeClosedHoverSelected.Dispose();

            if (_nodeOpen != null)
                _nodeOpen.Dispose();

            if (_nodeOpenHover != null)
                _nodeOpenHover.Dispose();

            if (_nodeOpenHoverSelected != null)
                _nodeOpenHoverSelected.Dispose();
        }

        private void CheckHover()
        {
            if (!ClientRectangle.Contains(PointToClient(MousePosition)))
            {
                if (IsDragging)
                {
                    if (_dropNode != null)
                    {
                        _dropNode = null;
                        Invalidate();
                    }
                }

                return;
            }

            foreach (var node in Nodes)
                CheckNodeHover(node, OffsetMousePosition);
        }

        private void NodeMouseLeave(DarkTreeNode node)
        {
            node.ExpandAreaHot = false;

            foreach (var childNode in node.Nodes)
                NodeMouseLeave(childNode);

            Invalidate();
        }

        private void CheckNodeHover(DarkTreeNode node, Point location)
        {
            if (IsDragging)
            {
                var rect = GetNodeFullRowArea(node);
                if (rect.Contains(OffsetMousePosition))
                {
                    var newDropNode = _dragNodes.Contains(node) ? null : node;

                    if (_dropNode != newDropNode)
                    {
                        _dropNode = newDropNode;
                        Invalidate();
                    }
                }
            }
            else
            {
                var hot = node.ExpandArea.Contains(location);
                if (node.ExpandAreaHot != hot)
                {
                    node.ExpandAreaHot = hot;
                    Invalidate();
                }
            }

            foreach (var childNode in node.Nodes)
                CheckNodeHover(childNode, location);
        }

        private void CheckNodeClick(DarkTreeNode node, Point location, MouseButtons button)
        {
            var rect = GetNodeFullRowArea(node);
            if (rect.Contains(location))
            {
                if (node.ExpandArea.Contains(location))
                {
                    if (button == MouseButtons.Left)
                        node.Expanded = !node.Expanded;
                }
                else
                {
                    if (button == MouseButtons.Left)
                    {
                        if (MultiSelect && ModifierKeys == Keys.Shift)
                        {
                            SelectAnchoredRange(node);
                        }
                        else if (MultiSelect && ModifierKeys == Keys.Control)
                        {
                            ToggleNode(node);
                        }
                        else
                        {
                            if (!SelectedNodes.Contains(node))
                                SelectNode(node);

                            _dragPos = OffsetMousePosition;
                            _provisionalDragging = true;
                            _provisionalNode = node;
                        }

                        return;
                    }
                    else if (button == MouseButtons.Right)
                    {
                        if (MultiSelect && ModifierKeys == Keys.Shift)
                            return;

                        if (MultiSelect && ModifierKeys == Keys.Control)
                            return;

                        if (!SelectedNodes.Contains(node))
                            SelectNode(node);

                        return;
                    }
                }
            }

            if (node.Expanded)
            {
                foreach (var childNode in node.Nodes)
                    CheckNodeClick(childNode, location, button);
            }
        }

        private void CheckNodeDoubleClick(DarkTreeNode node, Point location)
        {
            var rect = GetNodeFullRowArea(node);
            if (rect.Contains(location))
            {
                if (!node.ExpandArea.Contains(location))
                    node.Expanded = !node.Expanded;

                return;
            }

            if (node.Expanded)
            {
                foreach (var childNode in node.Nodes)
                    CheckNodeDoubleClick(childNode, location);
            }
        }

        public void SelectNode(DarkTreeNode node)
        {
            _selectedNodes.Clear();
            _selectedNodes.Add(node);

            _anchoredNodeStart = node;
            _anchoredNodeEnd = node;

            Invalidate();
        }

        public void SelectNodes(DarkTreeNode startNode, DarkTreeNode endNode)
        {
            var nodes = new List<DarkTreeNode>();

            if (startNode == endNode)
                nodes.Add(startNode);

            if (startNode.VisibleIndex < endNode.VisibleIndex)
            {
                var node = startNode;
                nodes.Add(node);
                while (node != endNode && node != null)
                {
                    node = node.NextVisibleNode;
                    nodes.Add(node);
                }
            }
            else if (startNode.VisibleIndex > endNode.VisibleIndex)
            {
                var node = startNode;
                nodes.Add(node);
                while (node != endNode && node != null)
                {
                    node = node.PrevVisibleNode;
                    nodes.Add(node);
                }
            }

            SelectNodes(nodes, false);
        }

        public void SelectNodes(List<DarkTreeNode> nodes, bool updateAnchors = true)
        {
            _selectedNodes.Clear();

            foreach (var node in nodes)
                _selectedNodes.Add(node);

            if (updateAnchors && _selectedNodes.Count > 0)
            {
                _anchoredNodeStart = _selectedNodes[_selectedNodes.Count - 1];
                _anchoredNodeEnd = _selectedNodes[_selectedNodes.Count - 1];
            }

            Invalidate();
        }

        private void SelectAnchoredRange(DarkTreeNode node)
        {
            _anchoredNodeEnd = node;
            SelectNodes(_anchoredNodeStart, _anchoredNodeEnd);
        }

        public void ToggleNode(DarkTreeNode node)
        {
            if (_selectedNodes.Contains(node))
            {
                _selectedNodes.Remove(node);

                // If we just removed both the anchor start AND end then reset them
                if (_anchoredNodeStart == node && _anchoredNodeEnd == node)
                {
                    if (_selectedNodes.Count > 0)
                    {
                        _anchoredNodeStart = _selectedNodes[0];
                        _anchoredNodeEnd = _selectedNodes[0];
                    }
                    else
                    {
                        _anchoredNodeStart = null;
                        _anchoredNodeEnd = null;
                    }
                }

                // If we just removed the anchor start then update it accordingly
                if (_anchoredNodeStart == node)
                {
                    if (_anchoredNodeEnd.VisibleIndex < node.VisibleIndex)
                        _anchoredNodeStart = node.PrevVisibleNode;
                    else if (_anchoredNodeEnd.VisibleIndex > node.VisibleIndex)
                        _anchoredNodeStart = node.NextVisibleNode;
                    else
                        _anchoredNodeStart = _anchoredNodeEnd;
                }

                // If we just removed the anchor end then update it accordingly
                if (_anchoredNodeEnd == node)
                {
                    if (_anchoredNodeStart.VisibleIndex < node.VisibleIndex)
                        _anchoredNodeEnd = node.PrevVisibleNode;
                    else if (_anchoredNodeStart.VisibleIndex > node.VisibleIndex)
                        _anchoredNodeEnd = node.NextVisibleNode;
                    else
                        _anchoredNodeEnd = _anchoredNodeStart;
                }
            }
            else
            {
                _selectedNodes.Add(node);

                _anchoredNodeStart = node;
                _anchoredNodeEnd = node;
            }

            Invalidate();
        }

        public Rectangle GetNodeFullRowArea(DarkTreeNode node)
        {
            if (node.ParentNode != null && !node.ParentNode.Expanded)
                return new Rectangle(-1, -1, -1, -1);

            var width = Math.Max(ContentSize.Width, Viewport.Width);
            var rect = new Rectangle(0, node.FullArea.Top, width, ItemHeight);
            return rect;
        }

        public void EnsureVisible()
        {
            if (SelectedNodes.Count == 0)
                return;

            foreach (var node in SelectedNodes)
                node.EnsureVisible();

            var itemTop = -1;

            if (!MultiSelect)
                itemTop = SelectedNodes[0].FullArea.Top;
            else
                itemTop = _anchoredNodeEnd.FullArea.Top;

            var itemBottom = itemTop + ItemHeight;

            if (itemTop < Viewport.Top)
                VScrollTo(itemTop);

            if (itemBottom > Viewport.Bottom)
                VScrollTo((itemBottom - Viewport.Height));
        }

        public void Sort()
        {
            if (TreeViewNodeSorter == null)
                return;

            Nodes.Sort(TreeViewNodeSorter);

            foreach (var node in Nodes)
                SortChildNodes(node);
        }

        private void SortChildNodes(DarkTreeNode node)
        {
            node.Nodes.Sort(TreeViewNodeSorter);

            foreach (var childNode in node.Nodes)
                SortChildNodes(childNode);
        }

        public DarkTreeNode FindNode(string path)
        {
            foreach (var node in Nodes)
            {
                var compNode = FindNode(node, path);
                if (compNode != null)
                    return compNode;
            }

            return null;
        }

        private DarkTreeNode FindNode(DarkTreeNode parentNode, string path, bool recursive = true)
        {
            if (parentNode.FullPath == path)
                return parentNode;

            foreach (var node in parentNode.Nodes)
            {
                if (node.FullPath == path)
                    return node;

                if (recursive)
                {
                    var compNode = FindNode(node, path);
                    if (compNode != null)
                        return compNode;
                }
            }

            return null;
        }

        #endregion

        #region Drag & Drop Region

        protected override void StartDrag()
        {
            if (!AllowMoveNodes)
            {
                _provisionalDragging = false;
                return;
            }

            // Create initial list of nodes to drag
            _dragNodes = new List<DarkTreeNode>();
            foreach (var node in SelectedNodes)
                _dragNodes.Add(node);

            // Clear out any nodes with a parent that is being dragged
            foreach (var node in _dragNodes.ToList())
            {
                if (node.ParentNode == null)
                    continue;

                if (_dragNodes.Contains(node.ParentNode))
                    _dragNodes.Remove(node);
            }

            _provisionalDragging = false;

            Cursor = Cursors.SizeAll;

            base.StartDrag();
        }

        private void HandleDrag()
        {
            if (!AllowMoveNodes)
                return;

            var dropNode = _dropNode;

            if (dropNode == null)
            {
                if (Cursor != Cursors.No)
                    Cursor = Cursors.No;

                return;
            }

            if (ForceDropToParent(dropNode))
                dropNode = dropNode.ParentNode;

            if (!CanMoveNodes(_dragNodes, dropNode))
            {
                if (Cursor != Cursors.No)
                    Cursor = Cursors.No;

                return;
            }

            if (Cursor != Cursors.SizeAll)
                Cursor = Cursors.SizeAll;
        }

        private void HandleDrop()
        {
            if (!AllowMoveNodes)
                return;

            var dropNode = _dropNode;

            if (dropNode == null)
            {
                StopDrag();
                return;
            }

            if (ForceDropToParent(dropNode))
                dropNode = dropNode.ParentNode;

            if (CanMoveNodes(_dragNodes, dropNode, true))
            {
                var cachedSelectedNodes = SelectedNodes.ToList();

                MoveNodes(_dragNodes, dropNode);

                foreach (var node in _dragNodes)
                {
                    if (node.ParentNode == null)
                        Nodes.Remove(node);
                    else
                        node.ParentNode.Nodes.Remove(node);

                    dropNode.Nodes.Add(node);
                }

                if (TreeViewNodeSorter != null)
                    dropNode.Nodes.Sort(TreeViewNodeSorter);

                dropNode.Expanded = true;

                NodesMoved(_dragNodes);

                foreach (var node in cachedSelectedNodes)
                    _selectedNodes.Add(node);
            }

            StopDrag();
            UpdateNodes();
        }

        protected override void StopDrag()
        {
            _dragNodes = null;
            _dropNode = null;

            Cursor = Cursors.Default;

            Invalidate();

            base.StopDrag();
        }

        protected virtual bool ForceDropToParent(DarkTreeNode node)
        {
            return false;
        }

        protected virtual bool CanMoveNodes(List<DarkTreeNode> dragNodes, DarkTreeNode dropNode, bool isMoving = false)
        {
            if (dropNode == null)
                return false;

            foreach (var node in dragNodes)
            {
                if (node == dropNode)
                {
                    if (isMoving)
                        DarkMessageBox.ShowError($"Cannot move {node.Text}. The destination folder is the same as the source folder.", Application.ProductName);

                    return false;
                }

                if (node.ParentNode != null && node.ParentNode == dropNode)
                {
                    if (isMoving)
                        DarkMessageBox.ShowError($"Cannot move {node.Text}. The destination folder is the same as the source folder.", Application.ProductName);

                    return false;
                }

                var parentNode = dropNode.ParentNode;
                while (parentNode != null)
                {
                    if (node == parentNode)
                    {
                        if (isMoving)
                            DarkMessageBox.ShowError($"Cannot move {node.Text}. The destination folder is a subfolder of the source folder.", Application.ProductName);

                        return false;
                    }

                    parentNode = parentNode.ParentNode;
                }
            }

            return true;
        }

        protected virtual void MoveNodes(List<DarkTreeNode> dragNodes, DarkTreeNode dropNode)
        { }

        protected virtual void NodesMoved(List<DarkTreeNode> nodesMoved)
        { }

        #endregion

        #region Paint Region

        protected override void PaintContent(Graphics g)
        {
            foreach (var node in Nodes)
            {
                DrawNode(node, g);
            }
        }

        private void DrawNode(DarkTreeNode node, Graphics g)
        {
            var rect = GetNodeFullRowArea(node);

            // 1. Draw background
            var bgColor = node.Odd ? Colors.HeaderBackground : Colors.GreyBackground;

            if (SelectedNodes.Count > 0 && SelectedNodes.Contains(node))
                bgColor = Focused ? Colors.BlueSelection : Colors.GreySelection;

            if (IsDragging && _dropNode == node)
                bgColor = Focused ? Colors.BlueSelection : Colors.GreySelection;

            using (var b = new SolidBrush(bgColor))
            {
                g.FillRectangle(b, rect);
            }

            // 2. Draw plus/minus icon
            if (node.Nodes.Count > 0)
            {
                var pos = new Point(node.ExpandArea.Location.X - 1, node.ExpandArea.Location.Y - 1);

                var icon = _nodeOpen;

                if (node.Expanded && !node.ExpandAreaHot)
                    icon = _nodeOpen;
                else if (node.Expanded && node.ExpandAreaHot && !SelectedNodes.Contains(node))
                    icon = _nodeOpenHover;
                else if (node.Expanded && node.ExpandAreaHot && SelectedNodes.Contains(node))
                    icon = _nodeOpenHoverSelected;
                else if (!node.Expanded && !node.ExpandAreaHot)
                    icon = _nodeClosed;
                else if (!node.Expanded && node.ExpandAreaHot && !SelectedNodes.Contains(node))
                    icon = _nodeClosedHover;
                else if (!node.Expanded && node.ExpandAreaHot && SelectedNodes.Contains(node))
                    icon = _nodeClosedHoverSelected;

                g.DrawImageUnscaled(icon, pos);
            }

            // 3. Draw icon
            if (ShowIcons && node.Icon != null)
            {
                if (node.Expanded && node.ExpandedIcon != null)
                    g.DrawImageUnscaled(node.ExpandedIcon, node.IconArea.Location);
                else
                    g.DrawImageUnscaled(node.Icon, node.IconArea.Location);
            }

            // 4. Draw text
            using (var b = new SolidBrush(Colors.LightText))
            {
                var stringFormat = new StringFormat
                {
                    Alignment = StringAlignment.Near,
                    LineAlignment = StringAlignment.Center
                };

                g.DrawString(node.Text, Font, b, node.TextArea, stringFormat);
            }

            // 5. Draw child nodes
            if (node.Expanded)
            {
                foreach (var childNode in node.Nodes)
                    DrawNode(childNode, g);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Controls/ScrollValueEventArgs.cs
================================================
ï»¿using System;

namespace DarkUI.Controls
{
    public class ScrollValueEventArgs : EventArgs
    {
        public int Value { get; private set; }

        public ScrollValueEventArgs(int value)
        {
            Value = value;
        }
    }
}



================================================
File: DarkUI/Docking/DarkDockArea.cs
================================================
ï»¿namespace DarkUI.Docking
{
    public enum DarkDockArea
    {
        None,
        Document,
        Left,
        Right,
        Bottom
    }
}



================================================
File: DarkUI/Docking/DarkDockContent.cs
================================================
ï»¿using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    [ToolboxItem(false)]
    public class DarkDockContent : UserControl
    {
        #region Event Handler Region

        public event EventHandler DockTextChanged;

        #endregion

        #region Field Region

        private string _dockText;
        private Image _icon;

        #endregion

        #region Property Region

        [Category("Appearance")]
        [Description("Determines the text that will appear in the content tabs and headers.")]
        public string DockText
        {
            get { return _dockText; }
            set
            {
                var oldText = _dockText;

                _dockText = value;

                if (DockTextChanged != null)
                    DockTextChanged(this, null);

                Invalidate();
            }
        }

        [Category("Appearance")]
        [Description("Determines the icon that will appear in the content tabs and headers.")]
        public Image Icon
        {
            get { return _icon; }
            set
            {
                _icon = value;
                Invalidate();
            }
        }

        [Category("Layout")]
        [Description("Determines the default area of the dock panel this content will be added to.")]
        [DefaultValue(DarkDockArea.Document)]
        public DarkDockArea DefaultDockArea { get; set; }

        [Category("Behavior")]
        [Description("Determines the key used by this content in the dock serialization.")]
        public string SerializationKey { get; set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockPanel DockPanel { get; internal set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockRegion DockRegion { get; internal set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockGroup DockGroup { get; internal set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockArea DockArea { get; set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int Order { get; set; }

        #endregion

        #region Constructor Region

        public DarkDockContent()
        { }

        #endregion

        #region Method Region

        public virtual void Close()
        {
            if (DockPanel != null)
                DockPanel.RemoveContent(this);
        }

        #endregion

        #region Event Handler Region

        protected override void OnEnter(EventArgs e)
        {
            base.OnEnter(e);

            if (DockPanel == null)
                return;

            DockPanel.ActiveContent = this;
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDockGroup.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    [ToolboxItem(false)]
    public class DarkDockGroup : Panel
    {
        #region Field Region

        private List<DarkDockContent> _contents = new List<DarkDockContent>();

        private Dictionary<DarkDockContent, DarkDockTab> _tabs = new Dictionary<DarkDockContent, DarkDockTab>();

        private DarkDockTabArea _tabArea;

        private DarkDockTab _dragTab = null;

        #endregion

        #region Property Region

        public DarkDockPanel DockPanel { get; private set; }

        public DarkDockRegion DockRegion { get; private set; }

        public DarkDockArea DockArea { get; private set; }

        public DarkDockContent VisibleContent { get; private set; }

        public int Order { get; set; }

        public int ContentCount { get { return _contents.Count; } }

        #endregion

        #region Constructor Region

        public DarkDockGroup(DarkDockPanel dockPanel, DarkDockRegion dockRegion, int order)
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);

            DockPanel = dockPanel;
            DockRegion = dockRegion;
            DockArea = dockRegion.DockArea;

            Order = order;

            _tabArea = new DarkDockTabArea(DockArea);

            DockPanel.ActiveContentChanged += DockPanel_ActiveContentChanged;
        }

        #endregion

        #region Method Region

        public void AddContent(DarkDockContent dockContent)
        {
            dockContent.DockGroup = this;
            dockContent.Dock = DockStyle.Fill;

            dockContent.Order = 0;

            if (_contents.Count > 0)
            {
                var order = -1;
                foreach (var otherContent in _contents)
                {
                    if (otherContent.Order >= order)
                        order = otherContent.Order + 1;
                }

                dockContent.Order = order;
            }

            _contents.Add(dockContent);
            Controls.Add(dockContent);

            dockContent.DockTextChanged += DockContent_DockTextChanged;

            _tabs.Add(dockContent, new DarkDockTab(dockContent));

            if (VisibleContent == null)
            {
                dockContent.Visible = true;
                VisibleContent = dockContent;
            }
            else
            {
                dockContent.Visible = false;
            }

            var menuItem = new ToolStripMenuItem(dockContent.DockText);
            menuItem.Tag = dockContent;
            menuItem.Click += TabMenuItem_Select;
            menuItem.Image = dockContent.Icon;
            _tabArea.AddMenuItem(menuItem);

            UpdateTabArea();
        }

        public void RemoveContent(DarkDockContent dockContent)
        {
            dockContent.DockGroup = null;

            var order = dockContent.Order;

            _contents.Remove(dockContent);
            Controls.Remove(dockContent);

            foreach (var otherContent in _contents)
            {
                if (otherContent.Order > order)
                    otherContent.Order--;
            }

            dockContent.DockTextChanged -= DockContent_DockTextChanged;

            if (_tabs.ContainsKey(dockContent))
                _tabs.Remove(dockContent);

            if (VisibleContent == dockContent)
            {
                VisibleContent = null;

                if (_contents.Count > 0)
                {
                    var newContent = _contents[0];
                    newContent.Visible = true;
                    VisibleContent = newContent;
                }
            }

            var menuItem = _tabArea.GetMenuItem(dockContent);

            menuItem.Click -= TabMenuItem_Select;
            _tabArea.RemoveMenuItem(menuItem);

            UpdateTabArea();
        }

        public List<DarkDockContent> GetContents()
        {
            return _contents.OrderBy(c => c.Order).ToList();
        }

        private void UpdateTabArea()
        {
            if (DockArea == DarkDockArea.Document)
                _tabArea.Visible = (_contents.Count > 0);
            else
                _tabArea.Visible = (_contents.Count > 1);

            var size = 0;

            switch (DockArea)
            {
                case DarkDockArea.Document:
                    size = _tabArea.Visible ? Consts.DocumentTabAreaSize : 0;
                    Padding = new Padding(0, size, 0, 0);
                    _tabArea.ClientRectangle = new Rectangle(Padding.Left, 0, ClientRectangle.Width - Padding.Horizontal, size);
                    break;
                case DarkDockArea.Left:
                case DarkDockArea.Right:
                    size = _tabArea.Visible ? Consts.ToolWindowTabAreaSize : 0;
                    Padding = new Padding(0, 0, 0, size);
                    _tabArea.ClientRectangle = new Rectangle(Padding.Left, ClientRectangle.Bottom - size, ClientRectangle.Width - Padding.Horizontal, size);
                    break;
                case DarkDockArea.Bottom:
                    size = _tabArea.Visible ? Consts.ToolWindowTabAreaSize : 0;
                    Padding = new Padding(1, 0, 0, size);
                    _tabArea.ClientRectangle = new Rectangle(Padding.Left, ClientRectangle.Bottom - size, ClientRectangle.Width - Padding.Horizontal, size);
                    break;
            }

            if (DockArea == DarkDockArea.Document)
            {
                var dropdownSize = Consts.DocumentTabAreaSize;
                _tabArea.DropdownRectangle = new Rectangle(_tabArea.ClientRectangle.Right - dropdownSize, 0, dropdownSize, dropdownSize);
            }

            BuildTabs();

            EnsureVisible();
        }

        private void BuildTabs()
        {
            if (!_tabArea.Visible)
                return;

            SuspendLayout();

            var closeButtonSize = DockIcons.close.Width;

            // Calculate areas of all tabs
            var totalSize = 0;

            var orderedContent = _contents.OrderBy(c => c.Order);

            foreach (var content in orderedContent)
            {
                int width;

                var tab = _tabs[content];

                using (var g = CreateGraphics())
                {
                    width = tab.CalculateWidth(g, Font);
                }

                // Add additional width for document tab items
                if (DockArea == DarkDockArea.Document)
                {
                    width += 5;
                    width += closeButtonSize;

                    if (tab.DockContent.Icon != null)
                        width += tab.DockContent.Icon.Width + 5;
                }

                // Show separator on all tabs for now
                tab.ShowSeparator = true;
                width += 1;

                var y = DockArea == DarkDockArea.Document ? 0 : ClientRectangle.Height - Consts.ToolWindowTabAreaSize;
                var height = DockArea == DarkDockArea.Document ? Consts.DocumentTabAreaSize : Consts.ToolWindowTabAreaSize;

                var tabRect = new Rectangle(_tabArea.ClientRectangle.Left + totalSize, y, width, height);
                tab.ClientRectangle = tabRect;

                totalSize += width;
            }

            // Cap the size if too large for the tab area
            if (DockArea != DarkDockArea.Document)
            {
                if (totalSize > _tabArea.ClientRectangle.Width)
                {
                    var difference = totalSize - _tabArea.ClientRectangle.Width;

                    // No matter what, we want to slice off the 1 pixel separator from the final tab.
                    var lastTab = _tabs[orderedContent.Last()];
                    var tabRect = lastTab.ClientRectangle;
                    lastTab.ClientRectangle = new Rectangle(tabRect.Left, tabRect.Top, tabRect.Width - 1, tabRect.Height);
                    lastTab.ShowSeparator = false;

                    var differenceMadeUp = 1;

                    // Loop through and progressively resize the larger tabs until the total size fits within the tab area.
                    while (differenceMadeUp < difference)
                    {
                        var largest = _tabs.Values.OrderByDescending(tab => tab.ClientRectangle.Width)
                                                                     .First()
                                                                     .ClientRectangle.Width;

                        foreach (var content in orderedContent)
                        {
                            var tab = _tabs[content];

                            // Check if previous iteration of loop met the difference
                            if (differenceMadeUp >= difference)
                                break;

                            if (tab.ClientRectangle.Width >= largest)
                            {
                                var rect = tab.ClientRectangle;
                                tab.ClientRectangle = new Rectangle(rect.Left, rect.Top, rect.Width - 1, rect.Height);
                                differenceMadeUp += 1;
                            }
                        }
                    }

                    // After resizing the tabs reposition them accordingly.
                    var xOffset = 0;
                    foreach (var content in orderedContent)
                    {
                        var tab = _tabs[content];

                        var rect = tab.ClientRectangle;
                        tab.ClientRectangle = new Rectangle(_tabArea.ClientRectangle.Left + xOffset, rect.Top, rect.Width, rect.Height);

                        xOffset += rect.Width;
                    }
                }
            }

            // Build close button rectangles
            if (DockArea == DarkDockArea.Document)
            {
                foreach (var content in orderedContent)
                {
                    var tab = _tabs[content];
                    var closeRect = new Rectangle(tab.ClientRectangle.Right - 7 - closeButtonSize - 1,
                                                  tab.ClientRectangle.Top + (tab.ClientRectangle.Height / 2) - (closeButtonSize / 2) - 1,
                                                  closeButtonSize, closeButtonSize);
                    tab.CloseButtonRectangle = closeRect;
                }
            }

            // Update the tab area with the new total tab width
            totalSize = 0;
            foreach (var content in orderedContent)
            {
                var tab = _tabs[content];
                totalSize += tab.ClientRectangle.Width;
            }

            _tabArea.TotalTabSize = totalSize;

            ResumeLayout();

            Invalidate();
        }

        public void EnsureVisible()
        {
            if (DockArea != DarkDockArea.Document)
                return;

            if (VisibleContent == null)
                return;

            var width = ClientRectangle.Width - Padding.Horizontal - _tabArea.DropdownRectangle.Width;
            var offsetArea = new Rectangle(Padding.Left, 0, width, 0);

            var tab = _tabs[VisibleContent];

            if (tab.ClientRectangle.IsEmpty)
                return;

            if (RectangleToTabArea(tab.ClientRectangle).Left < offsetArea.Left)
                _tabArea.Offset = tab.ClientRectangle.Left;
            else if (RectangleToTabArea(tab.ClientRectangle).Right > offsetArea.Right)
                _tabArea.Offset = tab.ClientRectangle.Right - width;

            if (_tabArea.TotalTabSize < offsetArea.Width)
                _tabArea.Offset = 0;

            if (_tabArea.TotalTabSize > offsetArea.Width)
            {
                var orderedContent = _contents.OrderBy(x => x.Order);
                var lastTab = _tabs[orderedContent.Last()];
                if (lastTab != null)
                {
                    if (RectangleToTabArea(lastTab.ClientRectangle).Right < offsetArea.Right)
                        _tabArea.Offset = lastTab.ClientRectangle.Right - width;
                }
            }

            Invalidate();
        }

        public void SetVisibleContent(DarkDockContent content)
        {
            if (!_contents.Contains(content))
                return;

            if (VisibleContent != content)
            {
                VisibleContent = content;
                content.Visible = true;

                foreach (var otherContent in _contents)
                {
                    if (otherContent != content)
                        otherContent.Visible = false;
                }

                Invalidate();
            }
        }

        private Point PointToTabArea(Point point)
        {
            return new Point(point.X - _tabArea.Offset, point.Y);
        }

        private Rectangle RectangleToTabArea(Rectangle rectangle)
        {
            return new Rectangle(PointToTabArea(rectangle.Location), rectangle.Size);
        }

        #endregion

        #region Event Handler Region

        protected override void OnResize(EventArgs eventargs)
        {
            base.OnResize(eventargs);

            UpdateTabArea();
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (_dragTab != null)
            {
                var offsetX = e.Location.X + _tabArea.Offset;
                if (offsetX < _dragTab.ClientRectangle.Left)
                {
                    if (_dragTab.DockContent.Order > 0)
                    {
                        var otherTabs = _tabs.Values.Where(t => t.DockContent.Order == _dragTab.DockContent.Order - 1).ToList();
                        if (otherTabs.Count == 0)
                            return;

                        var otherTab = otherTabs.First();

                        if (otherTab == null)
                            return;

                        var oldIndex = _dragTab.DockContent.Order;
                        _dragTab.DockContent.Order = oldIndex - 1;
                        otherTab.DockContent.Order = oldIndex;

                        BuildTabs();
                        EnsureVisible();

                        _tabArea.RebuildMenu();

                        return;
                    }
                }
                else if (offsetX > _dragTab.ClientRectangle.Right)
                {
                    var maxOrder = _contents.Count;

                    if (_dragTab.DockContent.Order < maxOrder)
                    {
                        var otherTabs = _tabs.Values.Where(t => t.DockContent.Order == _dragTab.DockContent.Order + 1).ToList();
                        if(otherTabs.Count == 0)
                            return;

                        var otherTab = otherTabs.First();

                        if (otherTab == null)
                            return;

                        var oldIndex = _dragTab.DockContent.Order;
                        _dragTab.DockContent.Order = oldIndex + 1;
                        otherTab.DockContent.Order = oldIndex;

                        BuildTabs();
                        EnsureVisible();

                        _tabArea.RebuildMenu();

                        return;
                    }
                }

                return;
            }

            if (_tabArea.DropdownRectangle.Contains(e.Location))
            {
                _tabArea.DropdownHot = true;

                foreach (var tab in _tabs.Values)
                    tab.Hot = false;

                Invalidate();
                return;
            }

            _tabArea.DropdownHot = false;

            foreach (var tab in _tabs.Values)
            {
                var rect = RectangleToTabArea(tab.ClientRectangle);
                var hot = rect.Contains(e.Location);

                if (tab.Hot != hot)
                {
                    tab.Hot = hot;
                    Invalidate();
                }

                var closeRect = RectangleToTabArea(tab.CloseButtonRectangle);
                var closeHot = closeRect.Contains(e.Location);

                if (tab.CloseButtonHot != closeHot)
                {
                    tab.CloseButtonHot = closeHot;
                    Invalidate();
                }
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (_tabArea.DropdownRectangle.Contains(e.Location))
            {
                _tabArea.DropdownHot = true;
                return;
            }

            foreach (var tab in _tabs.Values)
            {
                var rect = RectangleToTabArea(tab.ClientRectangle);
                if (rect.Contains(e.Location))
                {
                    if (e.Button == MouseButtons.Middle)
                    {
                        tab.DockContent.Close();
                        return;
                    }

                    var closeRect = RectangleToTabArea(tab.CloseButtonRectangle);
                    if (closeRect.Contains(e.Location))
                    {
                        _tabArea.ClickedCloseButton = tab;
                        return;
                    }
                    else
                    {
                        DockPanel.ActiveContent = tab.DockContent;
                        EnsureVisible();

                        _dragTab = tab;
   
                        return;
                    }
                }
            }

            if (VisibleContent != null)
                DockPanel.ActiveContent = VisibleContent;
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            _dragTab = null;

            if (_tabArea.DropdownRectangle.Contains(e.Location))
            {
                if (_tabArea.DropdownHot)
                    _tabArea.ShowMenu(this, new Point(_tabArea.DropdownRectangle.Left, _tabArea.DropdownRectangle.Bottom - 2));

                return;
            }

            if (_tabArea.ClickedCloseButton == null)
                return;

            var closeRect = RectangleToTabArea(_tabArea.ClickedCloseButton.CloseButtonRectangle);
            if (closeRect.Contains(e.Location))
                _tabArea.ClickedCloseButton.DockContent.Close();
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            foreach (var tab in _tabs.Values)
                tab.Hot = false;

            Invalidate();
        }

        private void TabMenuItem_Select(object sender, EventArgs e)
        {
            var menuItem = sender as ToolStripMenuItem;
            if (menuItem == null)
                return;

            var content = menuItem.Tag as DarkDockContent;
            if (content == null)
                return;

            DockPanel.ActiveContent = content;
        }

        private void DockPanel_ActiveContentChanged(object sender, DockContentEventArgs e)
        {
            if (!_contents.Contains(e.Content))
                return;

            if (e.Content == VisibleContent)
            {
                VisibleContent.Focus();
                return;
            }

            VisibleContent = e.Content;

            foreach (var content in _contents)
                content.Visible = content == VisibleContent;

            VisibleContent.Focus();

            EnsureVisible();
            Invalidate();
        }

        private void DockContent_DockTextChanged(object sender, EventArgs e)
        {
            BuildTabs();
        }

        #endregion

        #region Render Region

        public void Redraw()
        {
            Invalidate();

            foreach (var content in _contents)
                content.Invalidate();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, ClientRectangle);
            }

            if (!_tabArea.Visible)
                return;

            using (var b = new SolidBrush(Colors.MediumBackground))
            {
                g.FillRectangle(b, _tabArea.ClientRectangle);
            }

            foreach (var tab in _tabs.Values)
            {
                if (DockArea == DarkDockArea.Document)
                    PaintDocumentTab(g, tab);
                else
                    PaintToolWindowTab(g, tab);
            }

            if (DockArea == DarkDockArea.Document)
            {
                // Color divider
                var isActiveGroup = DockPanel.ActiveGroup == this;
                var divColor = isActiveGroup ? Colors.BlueSelection : Colors.GreySelection;
                using (var b = new SolidBrush(divColor))
                {
                    var divRect = new Rectangle(_tabArea.ClientRectangle.Left, _tabArea.ClientRectangle.Bottom - 2, _tabArea.ClientRectangle.Width, 2);
                    g.FillRectangle(b, divRect);
                }

                // Content dropdown list
                var dropdownRect = new Rectangle(_tabArea.DropdownRectangle.Left, _tabArea.DropdownRectangle.Top, _tabArea.DropdownRectangle.Width, _tabArea.DropdownRectangle.Height - 2);

                using (var b = new SolidBrush(Colors.MediumBackground))
                {
                    g.FillRectangle(b, dropdownRect);
                }

                using (var img = DockIcons.arrow)
                {
                    g.DrawImageUnscaled(img, dropdownRect.Left + (dropdownRect.Width / 2) - (img.Width / 2), dropdownRect.Top + (dropdownRect.Height / 2) - (img.Height / 2) + 1);
                }
            }
        }

        private void PaintDocumentTab(Graphics g, DarkDockTab tab)
        {
            var tabRect = RectangleToTabArea(tab.ClientRectangle);

            var isVisibleTab = VisibleContent == tab.DockContent;
            var isActiveGroup = DockPanel.ActiveGroup == this;

            var bgColor = isVisibleTab ? Colors.BlueSelection : Colors.DarkBackground;

            if (!isActiveGroup)
                bgColor = isVisibleTab ? Colors.GreySelection : Colors.DarkBackground;

            if (tab.Hot && !isVisibleTab)
                bgColor = Colors.MediumBackground;

            using (var b = new SolidBrush(bgColor))
            {
                g.FillRectangle(b, tabRect);
            }

            // Draw separators
            if (tab.ShowSeparator)
            {
                using (var p = new Pen(Colors.DarkBorder))
                {
                    g.DrawLine(p, tabRect.Right - 1, tabRect.Top, tabRect.Right - 1, tabRect.Bottom);
                }
            }

            var xOffset = 0;

            // Draw icon
            if (tab.DockContent.Icon != null)
            {
                g.DrawImageUnscaled(tab.DockContent.Icon, tabRect.Left + 5, tabRect.Top + 4);
                xOffset += tab.DockContent.Icon.Width + 2;
            }

            var tabTextFormat = new StringFormat
            {
                Alignment = StringAlignment.Near,
                LineAlignment = StringAlignment.Center,
                FormatFlags = StringFormatFlags.NoWrap,
                Trimming = StringTrimming.EllipsisCharacter
            };

            // Draw text
            var textColor = isVisibleTab ? Colors.LightText : Colors.DisabledText;
            using (var b = new SolidBrush(textColor))
            {
                var textRect = new Rectangle(tabRect.Left + 5 + xOffset, tabRect.Top, tabRect.Width - tab.CloseButtonRectangle.Width - 7 - 5 - xOffset, tabRect.Height);
                g.DrawString(tab.DockContent.DockText, Font, b, textRect, tabTextFormat);
            }

            // Close button
            var img = tab.CloseButtonHot ? DockIcons.inactive_close_selected : DockIcons.inactive_close;

            if (isVisibleTab)
            {
                if (isActiveGroup)
                    img = tab.CloseButtonHot ? DockIcons.close_selected : DockIcons.close;
                else
                    img = tab.CloseButtonHot ? DockIcons.close_selected : DockIcons.active_inactive_close;
            }

            var closeRect = RectangleToTabArea(tab.CloseButtonRectangle);
            g.DrawImageUnscaled(img, closeRect.Left, closeRect.Top);
        }

        private void PaintToolWindowTab(Graphics g, DarkDockTab tab)
        {
            var tabRect = tab.ClientRectangle;

            var isVisibleTab = VisibleContent == tab.DockContent;

            var bgColor = isVisibleTab ? Colors.GreyBackground : Colors.DarkBackground;

            if (tab.Hot && !isVisibleTab)
                bgColor = Colors.MediumBackground;

            using (var b = new SolidBrush(bgColor))
            {
                g.FillRectangle(b, tabRect);
            }

            // Draw separators
            if (tab.ShowSeparator)
            {
                using (var p = new Pen(Colors.DarkBorder))
                {
                    g.DrawLine(p, tabRect.Right - 1, tabRect.Top, tabRect.Right - 1, tabRect.Bottom);
                }
            }

            var tabTextFormat = new StringFormat
            {
                Alignment = StringAlignment.Near,
                LineAlignment = StringAlignment.Center,
                FormatFlags = StringFormatFlags.NoWrap,
                Trimming = StringTrimming.EllipsisCharacter
            };

            var textColor = isVisibleTab ? Colors.BlueHighlight : Colors.DisabledText;
            using (var b = new SolidBrush(textColor))
            {
                var textRect = new Rectangle(tabRect.Left + 5, tabRect.Top, tabRect.Width - 5, tabRect.Height);
                g.DrawString(tab.DockContent.DockText, Font, b, textRect, tabTextFormat);
            }
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            // Absorb event
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDockPanel.cs
================================================
ï»¿using DarkUI.Config;
using DarkUI.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    public class DarkDockPanel : UserControl
    {
        #region Event Region

        public event EventHandler<DockContentEventArgs> ActiveContentChanged;
        public event EventHandler<DockContentEventArgs> ContentAdded;
        public event EventHandler<DockContentEventArgs> ContentRemoved;

        #endregion

        #region Field Region

        private List<DarkDockContent> _contents;
        private Dictionary<DarkDockArea, DarkDockRegion> _regions;

        private DarkDockContent _activeContent;
        private bool _switchingContent = false;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockContent ActiveContent
        {
            get { return _activeContent; }
            set
            {
                // Don't let content visibility changes re-trigger event
                if (_switchingContent)
                    return;

                _switchingContent = true;

                _activeContent = value;

                ActiveGroup = _activeContent.DockGroup;
                ActiveRegion = ActiveGroup.DockRegion;

                foreach (var region in _regions.Values)
                    region.Redraw();

                if (ActiveContentChanged != null)
                    ActiveContentChanged(this, new DockContentEventArgs(_activeContent));

                _switchingContent = false;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockRegion ActiveRegion { get; internal set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockGroup ActiveGroup { get; internal set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DarkDockContent ActiveDocument
        {
            get
            {
                return _regions[DarkDockArea.Document].ActiveDocument;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DockContentDragFilter DockContentDragFilter { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DockResizeFilter DockResizeFilter { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public List<DarkDockSplitter> Splitters { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public MouseButtons MouseButtonState
        {
            get
            {
                var buttonState = MouseButtons;
                return buttonState;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Dictionary<DarkDockArea, DarkDockRegion> Regions
        {
            get
            {
                return _regions;
            }
        }

        #endregion

        #region Constructor Region

        public DarkDockPanel()
        {
            Splitters = new List<DarkDockSplitter>();
            DockContentDragFilter = new DockContentDragFilter(this);
            DockResizeFilter = new DockResizeFilter(this);

            _regions = new Dictionary<DarkDockArea, DarkDockRegion>();
            _contents = new List<DarkDockContent>();

            BackColor = Colors.GreyBackground;

            CreateRegions();
        }

        #endregion

        #region Method Region

        public void AddContent(DarkDockContent dockContent)
        {
            AddContent(dockContent, null);
        }

        public void AddContent(DarkDockContent dockContent, DarkDockGroup dockGroup)
        {
            if (_contents.Contains(dockContent))
                RemoveContent(dockContent);

            dockContent.DockPanel = this;
            _contents.Add(dockContent);

            if (dockGroup != null)
                dockContent.DockArea = dockGroup.DockArea;

            if (dockContent.DockArea == DarkDockArea.None)
                dockContent.DockArea = dockContent.DefaultDockArea;

            var region = _regions[dockContent.DockArea];
            region.AddContent(dockContent, dockGroup);

            if (ContentAdded != null)
                ContentAdded(this, new DockContentEventArgs(dockContent));

            dockContent.Select();
        }

        public void InsertContent(DarkDockContent dockContent, DarkDockGroup dockGroup, DockInsertType insertType)
        {
            if (_contents.Contains(dockContent))
                RemoveContent(dockContent);

            dockContent.DockPanel = this;
            _contents.Add(dockContent);

            dockContent.DockArea = dockGroup.DockArea;

            var region = _regions[dockGroup.DockArea];
            region.InsertContent(dockContent, dockGroup, insertType);

            if (ContentAdded != null)
                ContentAdded(this, new DockContentEventArgs(dockContent));

            dockContent.Select();
        }

        public void RemoveContent(DarkDockContent dockContent)
        {
            if (!_contents.Contains(dockContent))
                return;

            dockContent.DockPanel = null;
            _contents.Remove(dockContent);

            var region = _regions[dockContent.DockArea];
            region.RemoveContent(dockContent);

            if (ContentRemoved != null)
                ContentRemoved(this, new DockContentEventArgs(dockContent));
        }

        public bool ContainsContent(DarkDockContent dockContent)
        {
            return _contents.Contains(dockContent);
        }

        public List<DarkDockContent> GetDocuments()
        {
            return _regions[DarkDockArea.Document].GetContents();
        }

        private void CreateRegions()
        {
            var documentRegion = new DarkDockRegion(this, DarkDockArea.Document);
            _regions.Add(DarkDockArea.Document, documentRegion);

            var leftRegion = new DarkDockRegion(this, DarkDockArea.Left);
            _regions.Add(DarkDockArea.Left, leftRegion);

            var rightRegion = new DarkDockRegion(this, DarkDockArea.Right);
            _regions.Add(DarkDockArea.Right, rightRegion);

            var bottomRegion = new DarkDockRegion(this, DarkDockArea.Bottom);
            _regions.Add(DarkDockArea.Bottom, bottomRegion);

            // Add the regions in this order to force the bottom region to be positioned
            // between the left and right regions properly.
            Controls.Add(documentRegion);
            Controls.Add(bottomRegion);
            Controls.Add(leftRegion);
            Controls.Add(rightRegion);

            // Create tab index for intuitive tabbing order
            documentRegion.TabIndex = 0;
            rightRegion.TabIndex = 1;
            bottomRegion.TabIndex = 2;
            leftRegion.TabIndex = 3;
        }

        public void DragContent(DarkDockContent content)
        {
            DockContentDragFilter.StartDrag(content);
        }

        #endregion

        #region Serialization Region

        public DockPanelState GetDockPanelState()
        {
            var state = new DockPanelState();

            state.Regions.Add(new DockRegionState(DarkDockArea.Document));
            state.Regions.Add(new DockRegionState(DarkDockArea.Left, _regions[DarkDockArea.Left].Size));
            state.Regions.Add(new DockRegionState(DarkDockArea.Right, _regions[DarkDockArea.Right].Size));
            state.Regions.Add(new DockRegionState(DarkDockArea.Bottom, _regions[DarkDockArea.Bottom].Size));

            var _groupStates = new Dictionary<DarkDockGroup, DockGroupState>();

            var orderedContent = _contents.OrderBy(c => c.Order);
            foreach (var content in orderedContent)
            {
                foreach (var region in state.Regions)
                {
                    if (region.Area == content.DockArea)
                    {
                        DockGroupState groupState;

                        if (_groupStates.ContainsKey(content.DockGroup))
                        {
                            groupState = _groupStates[content.DockGroup];
                        }
                        else
                        {
                            groupState = new DockGroupState();
                            region.Groups.Add(groupState);
                            _groupStates.Add(content.DockGroup, groupState);
                        }

                        groupState.Contents.Add(content.SerializationKey);
                    }
                }
            }

            return state;
        }

        public void RestoreDockPanelState(DockPanelState state, Func<string, DarkDockContent> getContentBySerializationKey)
        {
            foreach (var region in state.Regions)
            {
                switch (region.Area)
                {
                    case DarkDockArea.Left:
                        _regions[DarkDockArea.Left].Size = region.Size;
                        break;
                    case DarkDockArea.Right:
                        _regions[DarkDockArea.Right].Size = region.Size;
                        break;
                    case DarkDockArea.Bottom:
                        _regions[DarkDockArea.Bottom].Size = region.Size;
                        break;
                }

                foreach (var group in region.Groups)
                {
                    DarkDockContent previousContent = null;

                    foreach (var contentKey in group.Contents)
                    {
                        var content = getContentBySerializationKey(contentKey);

                        if (content == null)
                            continue;

                        if (previousContent == null)
                            AddContent(content);
                        else
                            AddContent(content, previousContent.DockGroup);

                        previousContent = content;
                    }
                }
            }
        }

        #endregion
    }
}
    


================================================
File: DarkUI/Docking/DarkDockRegion.cs
================================================
ï»¿using DarkUI.Config;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    [ToolboxItem(false)]
    public class DarkDockRegion : Panel
    {
        #region Field Region

        private List<DarkDockGroup> _groups;

        private Form _parentForm;
        private DarkDockSplitter _splitter;

        #endregion

        #region Property Region

        public DarkDockPanel DockPanel { get; private set; }

        public DarkDockArea DockArea { get; private set; }

        public DarkDockContent ActiveDocument
        {
            get
            {
                if (DockArea != DarkDockArea.Document || _groups.Count == 0)
                    return null;

                return _groups[0].VisibleContent;
            }
        }

        public List<DarkDockGroup> Groups
        {
            get
            {
                return _groups.ToList();
            }
        }

        #endregion

        #region Constructor Region

        public DarkDockRegion(DarkDockPanel dockPanel, DarkDockArea dockArea)
        {
            _groups = new List<DarkDockGroup>();

            DockPanel = dockPanel;
            DockArea = dockArea;

            BuildProperties();
        }

        #endregion

        #region Method Region

        internal void AddContent(DarkDockContent dockContent)
        {
            AddContent(dockContent, null);
        }

        internal void AddContent(DarkDockContent dockContent, DarkDockGroup dockGroup)
        {
            // If no existing group is specified then create a new one
            if (dockGroup == null)
            {
                // If this is the document region, then default to first group if it exists
                if (DockArea == DarkDockArea.Document && _groups.Count > 0)
                    dockGroup = _groups[0];
                else
                    dockGroup = CreateGroup();
            }

            dockContent.DockRegion = this;
            dockGroup.AddContent(dockContent);

            if (!Visible)
            {
                Visible = true;
                CreateSplitter();
            }

            PositionGroups();
        }

        internal void InsertContent(DarkDockContent dockContent, DarkDockGroup dockGroup, DockInsertType insertType)
        {
            var order = dockGroup.Order;

            if (insertType == DockInsertType.After)
                order++;

            var newGroup = InsertGroup(order);

            dockContent.DockRegion = this;
            newGroup.AddContent(dockContent);

            if (!Visible)
            {
                Visible = true;
                CreateSplitter();
            }

            PositionGroups();
        }

        internal void RemoveContent(DarkDockContent dockContent)
        {
            dockContent.DockRegion = null;

            var group = dockContent.DockGroup;
            group.RemoveContent(dockContent);

            dockContent.DockArea = DarkDockArea.None;

            // If that was the final content in the group then remove the group
            if (group.ContentCount == 0)
                RemoveGroup(group);

            // If we just removed the final group, and this isn't the document region, then hide
            if (_groups.Count == 0 && DockArea != DarkDockArea.Document)
            {
                Visible = false;
                RemoveSplitter();
            }

            PositionGroups();
        }

        public List<DarkDockContent> GetContents()
        {
            var result = new List<DarkDockContent>();
            
            foreach (var group in _groups)
                result.AddRange(group.GetContents());

            return result;
        }

        private DarkDockGroup CreateGroup()
        {
            var order = 0;

            if (_groups.Count >= 1)
            {
                order = -1;
                foreach (var group in _groups)
                {
                    if (group.Order >= order)
                        order = group.Order + 1;
                }
            }

            var newGroup = new DarkDockGroup(DockPanel, this, order);
            _groups.Add(newGroup);
            Controls.Add(newGroup);

            return newGroup;
        }

        private DarkDockGroup InsertGroup(int order)
        {
            foreach (var group in _groups)
            {
                if (group.Order >= order)
                    group.Order++;
            }

            var newGroup = new DarkDockGroup(DockPanel, this, order);
            _groups.Add(newGroup);
            Controls.Add(newGroup);

            return newGroup;
        }

        private void RemoveGroup(DarkDockGroup group)
        {
            var lastOrder = group.Order;

            _groups.Remove(group);
            Controls.Remove(group);

            foreach (var otherGroup in _groups)
            {
                if (otherGroup.Order > lastOrder)
                    otherGroup.Order--;
            }
        }

        private void PositionGroups()
        {
            DockStyle dockStyle;

            switch (DockArea)
            {
                default:
                case DarkDockArea.Document:
                    dockStyle = DockStyle.Fill;
                    break;
                case DarkDockArea.Left:
                case DarkDockArea.Right:
                    dockStyle = DockStyle.Top;
                    break;
                case DarkDockArea.Bottom:
                    dockStyle = DockStyle.Left;
                    break;
            }

            if (_groups.Count == 1)
            {
                _groups[0].Dock = DockStyle.Fill;
                return;
            }

            if (_groups.Count > 1)
            {
                var lastGroup = _groups.OrderByDescending(g => g.Order).First();

                foreach (var group in _groups.OrderByDescending(g => g.Order))
                {
                    group.SendToBack();

                    if (group.Order == lastGroup.Order)
                        group.Dock = DockStyle.Fill;
                    else
                        group.Dock = dockStyle;
                }

                SizeGroups();
            }
        }

        private void SizeGroups()
        {
            if (_groups.Count <= 1)
                return;

            var size = new Size(0, 0);

            switch (DockArea)
            {
                default:
                case DarkDockArea.Document:
                    return;
                case DarkDockArea.Left:
                case DarkDockArea.Right:
                    size = new Size(ClientRectangle.Width, ClientRectangle.Height / _groups.Count);
                    break;
                case DarkDockArea.Bottom:
                    size = new Size(ClientRectangle.Width / _groups.Count, ClientRectangle.Height);
                    break;
            }

            foreach (var group in _groups)
                group.Size = size;
        }

        private void BuildProperties()
        {
            MinimumSize = new Size(50, 50);

            switch (DockArea)
            {
                default:
                case DarkDockArea.Document:
                    Dock = DockStyle.Fill;
                    Padding = new Padding(0, 1, 0, 0);
                    break;
                case DarkDockArea.Left:
                    Dock = DockStyle.Left;
                    Padding = new Padding(0, 0, 1, 0);
                    Visible = false;
                    break;
                case DarkDockArea.Right:
                    Dock = DockStyle.Right;
                    Padding = new Padding(1, 0, 0, 0);
                    Visible = false;
                    break;
                case DarkDockArea.Bottom:
                    Dock = DockStyle.Bottom;
                    Padding = new Padding(0, 0, 0, 0);
                    Visible = false;
                    break;
            }
        }

        private void CreateSplitter()
        {
            if (_splitter != null && DockPanel.Splitters.Contains(_splitter))
                DockPanel.Splitters.Remove(_splitter);

            switch (DockArea)
            {
                case DarkDockArea.Left:
                    _splitter = new DarkDockSplitter(DockPanel, this, DarkSplitterType.Right);
                    break;
                case DarkDockArea.Right:
                    _splitter = new DarkDockSplitter(DockPanel, this, DarkSplitterType.Left);
                    break;
                case DarkDockArea.Bottom:
                    _splitter = new DarkDockSplitter(DockPanel, this, DarkSplitterType.Top);
                    break;
                default:
                    return;
            }

            DockPanel.Splitters.Add(_splitter);
        }

        private void RemoveSplitter()
        {
            if (DockPanel.Splitters.Contains(_splitter))
                DockPanel.Splitters.Remove(_splitter);
        }

        #endregion

        #region Event Handler Region

        protected override void OnCreateControl()
        {
            base.OnCreateControl();

            _parentForm = FindForm();
            _parentForm.ResizeEnd += ParentForm_ResizeEnd;
        }

        protected override void OnResize(EventArgs eventargs)
        {
            base.OnResize(eventargs);

            SizeGroups();
        }

        private void ParentForm_ResizeEnd(object sender, EventArgs e)
        {
            if (_splitter != null)
                _splitter.UpdateBounds();
        }

        protected override void OnLayout(LayoutEventArgs e)
        {
            base.OnLayout(e);

            if (_splitter != null)
                _splitter.UpdateBounds();
        }

        #endregion

        #region Paint Region

        public void Redraw()
        {
            Invalidate();

            foreach (var group in _groups)
                group.Redraw();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            if (!Visible)
                return;

            // Fill body
            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, ClientRectangle);
            }

            // Draw border
            using (var p = new Pen(Colors.DarkBorder))
            {
                // Top border
                if (DockArea == DarkDockArea.Document)
                    g.DrawLine(p, ClientRectangle.Left, 0, ClientRectangle.Right, 0);

                // Left border
                if (DockArea == DarkDockArea.Right)
                    g.DrawLine(p, ClientRectangle.Left, 0, ClientRectangle.Left, ClientRectangle.Height);

                // Right border
                if (DockArea == DarkDockArea.Left)
                    g.DrawLine(p, ClientRectangle.Right - 1, 0, ClientRectangle.Right - 1, ClientRectangle.Height);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDockSplitter.cs
================================================
ï»¿using DarkUI.Forms;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    public class DarkDockSplitter
    {
        #region Field Region

        private Control _parentControl;
        private Control _control;

        private DarkSplitterType _splitterType;

        private int _minimum;
        private int _maximum;
        private DarkTranslucentForm _overlayForm;

        #endregion

        #region Property Region

        public Rectangle Bounds { get; set; }

        public Cursor ResizeCursor { get; private set; }

        #endregion

        #region Constructor Region

        public DarkDockSplitter(Control parentControl, Control control, DarkSplitterType splitterType)
        {
            _parentControl = parentControl;
            _control = control;
            _splitterType = splitterType;

            switch (_splitterType)
            {
                case DarkSplitterType.Left:
                case DarkSplitterType.Right:
                    ResizeCursor = Cursors.SizeWE;
                    break;
                case DarkSplitterType.Top:
                case DarkSplitterType.Bottom:
                    ResizeCursor = Cursors.SizeNS;
                    break;
            }
        }

        #endregion

        #region Method Region

        public void ShowOverlay()
        {
            _overlayForm = new DarkTranslucentForm(Color.Black);
            _overlayForm.Visible = true;

            UpdateOverlay(new Point(0, 0));
        }

        public void HideOverlay()
        {
            _overlayForm.Visible = false;
        }

        public void UpdateOverlay(Point difference)
        {
            var bounds = new Rectangle(Bounds.Location, Bounds.Size);

            switch (_splitterType)
            {
                case DarkSplitterType.Left:
                    var leftX = Math.Max(bounds.Location.X - difference.X, _minimum);

                    if (_maximum != 0 && leftX > _maximum)
                        leftX = _maximum;

                    bounds.Location = new Point(leftX, bounds.Location.Y);
                    break;
                case DarkSplitterType.Right:
                    var rightX = Math.Max(bounds.Location.X - difference.X, _minimum);

                    if (_maximum != 0 && rightX > _maximum)
                        rightX = _maximum;

                    bounds.Location = new Point(rightX, bounds.Location.Y);
                    break;
                case DarkSplitterType.Top:
                    var topY = Math.Max(bounds.Location.Y - difference.Y, _minimum);

                    if (_maximum != 0 && topY > _maximum)
                        topY = _maximum;

                    bounds.Location = new Point(bounds.Location.X, topY);
                    break;
                case DarkSplitterType.Bottom:
                    var bottomY = Math.Max(bounds.Location.Y - difference.Y, _minimum);

                    if (_maximum != 0 && bottomY > _maximum)
                        topY = _maximum;

                    bounds.Location = new Point(bounds.Location.X, bottomY);
                    break;
            }

            _overlayForm.Bounds = bounds;
        }

        public void Move(Point difference)
        {
            switch (_splitterType)
            {
                case DarkSplitterType.Left:
                    _control.Width += difference.X;
                    break;
                case DarkSplitterType.Right:
                    _control.Width -= difference.X;
                    break;
                case DarkSplitterType.Top:
                    _control.Height += difference.Y;
                    break;
                case DarkSplitterType.Bottom:
                    _control.Height -= difference.Y;
                    break;
            }

            UpdateBounds();
        }

        public void UpdateBounds()
        {
            var bounds = _parentControl.RectangleToScreen(_control.Bounds);

            switch (_splitterType)
            {
                case DarkSplitterType.Left:
                    Bounds = new Rectangle(bounds.Left - 2, bounds.Top, 5, bounds.Height);
                    _maximum = bounds.Right - 2 - _control.MinimumSize.Width;
                    break;
                case DarkSplitterType.Right:
                    Bounds = new Rectangle(bounds.Right - 2, bounds.Top, 5, bounds.Height);
                    _minimum = bounds.Left - 2 + _control.MinimumSize.Width;
                    break;
                case DarkSplitterType.Top:
                    Bounds = new Rectangle(bounds.Left, bounds.Top - 2, bounds.Width, 5);
                    _maximum = bounds.Bottom - 2 - _control.MinimumSize.Height;
                    break;
                case DarkSplitterType.Bottom:
                    Bounds = new Rectangle(bounds.Left, bounds.Bottom - 2, bounds.Width, 5);
                    _minimum = bounds.Top - 2 + _control.MinimumSize.Height;
                    break;
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDockTab.cs
================================================
ï»¿using System.Drawing;

namespace DarkUI.Docking
{
    internal class DarkDockTab
    {
        #region Property Region

        public DarkDockContent DockContent { get; set; }

        public Rectangle ClientRectangle { get; set; }

        public Rectangle CloseButtonRectangle { get; set; }

        public bool Hot { get; set; }

        public bool CloseButtonHot { get; set; }

        public bool ShowSeparator { get; set; }

        #endregion

        #region Constructor Region

        public DarkDockTab(DarkDockContent content)
        {
            DockContent = content;
        }

        #endregion

        #region Method Region

        public int CalculateWidth(Graphics g, Font font)
        {
            var width = (int)g.MeasureString(DockContent.DockText, font).Width;
            width += 10;

            return width;
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDockTabArea.cs
================================================
ï»¿using DarkUI.Controls;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Docking
{
    internal class DarkDockTabArea
    {
        #region Field Region

        private Dictionary<DarkDockContent, DarkDockTab> _tabs = new Dictionary<DarkDockContent, DarkDockTab>();

        private List<ToolStripMenuItem> _menuItems = new List<ToolStripMenuItem>();
        private DarkContextMenu _tabMenu = new DarkContextMenu();

        #endregion

        #region Property Region

        public DarkDockArea DockArea { get; private set; }

        public Rectangle ClientRectangle { get; set; }

        public Rectangle DropdownRectangle { get; set; }

        public bool DropdownHot { get; set; }

        public int Offset { get; set; }

        public int TotalTabSize { get; set; }

        public bool Visible { get; set; }

        public DarkDockTab ClickedCloseButton { get; set; }

        #endregion
        
        #region Constructor Region

        public DarkDockTabArea(DarkDockArea dockArea)
        {
            DockArea = dockArea;
        }

        #endregion

        #region Method Region

        public void ShowMenu(Control control, Point location)
        {
            _tabMenu.Show(control, location);
        }

        public void AddMenuItem(ToolStripMenuItem menuItem)
        {
            _menuItems.Add(menuItem);
            RebuildMenu();
        }

        public void RemoveMenuItem(ToolStripMenuItem menuItem)
        {
            _menuItems.Remove(menuItem);
            RebuildMenu();
        }

        public ToolStripMenuItem GetMenuItem(DarkDockContent content)
        {
            ToolStripMenuItem menuItem = null;
            foreach (ToolStripMenuItem item in _menuItems)
            {
                var menuContent = item.Tag as DarkDockContent;
                if (menuContent == null)
                    continue;

                if (menuContent == content)
                    menuItem = item;
            }

            return menuItem;
        }

        public void RebuildMenu()
        {
            _tabMenu.Items.Clear();

            var orderedItems = new List<ToolStripMenuItem>();

            var index = 0;
            for (var i = 0; i < _menuItems.Count; i++)
            {
                foreach (var item in _menuItems)
                {
                    var content = (DarkDockContent)item.Tag;
                    if (content.Order == index)
                        orderedItems.Add(item);
                }
                index++;
            }

            foreach (var item in orderedItems)
                _tabMenu.Items.Add(item);
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkDocument.cs
================================================
ï»¿using DarkUI.Config;
using System.ComponentModel;

namespace DarkUI.Docking
{
    [ToolboxItem(false)]
    public class DarkDocument : DarkDockContent
    {
        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DarkDockArea DefaultDockArea
        {
            get { return base.DefaultDockArea; }
        }

        #endregion

        #region Constructor Region

        public DarkDocument()
        {
            BackColor = Colors.GreyBackground;
            base.DefaultDockArea = DarkDockArea.Document;
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DarkSplitterType.cs
================================================
ï»¿namespace DarkUI.Docking
{
    public enum DarkSplitterType
    {
        Left,
        Right,
        Top,
        Bottom
    }
}



================================================
File: DarkUI/Docking/DarkToolWindow.cs
================================================
ï»¿using DarkUI.Config;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System;

namespace DarkUI.Docking
{
    [ToolboxItem(false)]
    public class DarkToolWindow : DarkDockContent
    {
        #region Field Region

        private Rectangle _closeButtonRect;
        private bool _closeButtonHot = false;
        private bool _closeButtonPressed = false;

        private Rectangle _headerRect;
        private bool _shouldDrag;

        #endregion

        #region Property Region

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Padding Padding
        {
            get { return base.Padding; }
        }

        #endregion

        #region Constructor Region

        public DarkToolWindow()
        {
            SetStyle(ControlStyles.OptimizedDoubleBuffer |
                     ControlStyles.ResizeRedraw |
                     ControlStyles.UserPaint, true);

            BackColor = Colors.GreyBackground;
            base.Padding = new Padding(0, Consts.ToolWindowHeaderSize, 0, 0);

            UpdateCloseButton();
        }

        #endregion

        #region Method Region

        private bool IsActive()
        {
            if (DockPanel == null)
                return false;

            return DockPanel.ActiveContent == this;
        }

        private void UpdateCloseButton()
        {
            _headerRect = new Rectangle
            {
                X = ClientRectangle.Left,
                Y = ClientRectangle.Top,
                Width = ClientRectangle.Width,
                Height = Consts.ToolWindowHeaderSize
            };

            _closeButtonRect = new Rectangle
            {
                X = ClientRectangle.Right - DockIcons.tw_close.Width - 5 - 3,
                Y = ClientRectangle.Top + (Consts.ToolWindowHeaderSize / 2) - (DockIcons.tw_close.Height / 2),
                Width = DockIcons.tw_close.Width,
                Height = DockIcons.tw_close.Height
            };
        }

        #endregion

        #region Event Handler Region

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            UpdateCloseButton();
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (_closeButtonRect.Contains(e.Location) || _closeButtonPressed)
            {
                if (!_closeButtonHot)
                {
                    _closeButtonHot = true;
                    Invalidate();
                }
            }
            else
            {
                if (_closeButtonHot)
                {
                    _closeButtonHot = false;
                    Invalidate();
                }

                if (_shouldDrag)
                {
                    DockPanel.DragContent(this);
                    return;
                }
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);

            if (_closeButtonRect.Contains(e.Location))
            {
                _closeButtonPressed = true;
                _closeButtonHot = true;
                Invalidate();
                return;
            }

            if (_headerRect.Contains(e.Location))
            {
                _shouldDrag = true;
                return;
            }
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (_closeButtonRect.Contains(e.Location) && _closeButtonPressed)
                Close();

            _closeButtonPressed = false;
            _closeButtonHot = false;

            _shouldDrag = false;

            Invalidate();
        }

        #endregion

        #region Paint Region

        protected override void OnPaint(PaintEventArgs e)
        {
            var g = e.Graphics;

            // Fill body
            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, ClientRectangle);
            }

            var isActive = IsActive();

            // Draw header
            var bgColor = isActive ? Colors.BlueBackground : Colors.HeaderBackground;
            var darkColor = isActive ? Colors.DarkBlueBorder : Colors.DarkBorder;
            var lightColor = isActive ? Colors.LightBlueBorder : Colors.LightBorder;

            using (var b = new SolidBrush(bgColor))
            {
                var bgRect = new Rectangle(0, 0, ClientRectangle.Width, Consts.ToolWindowHeaderSize);
                g.FillRectangle(b, bgRect);
            }

            using (var p = new Pen(darkColor))
            {
                g.DrawLine(p, ClientRectangle.Left, 0, ClientRectangle.Right, 0);
                g.DrawLine(p, ClientRectangle.Left, Consts.ToolWindowHeaderSize - 1, ClientRectangle.Right, Consts.ToolWindowHeaderSize - 1);
            }

            using (var p = new Pen(lightColor))
            {
                g.DrawLine(p, ClientRectangle.Left, 1, ClientRectangle.Right, 1);
            }

            var xOffset = 2;

            // Draw icon
            if (Icon != null)
            {
                g.DrawImageUnscaled(Icon, ClientRectangle.Left + 5, ClientRectangle.Top + (Consts.ToolWindowHeaderSize / 2) - (Icon.Height / 2) + 1);
                xOffset = Icon.Width + 8;
            }

            // Draw text
            using (var b = new SolidBrush(Colors.LightText))
            {
                var textRect = new Rectangle(xOffset, 0, ClientRectangle.Width - 4 - xOffset, Consts.ToolWindowHeaderSize);

                var format = new StringFormat
                {
                    Alignment = StringAlignment.Near,
                    LineAlignment = StringAlignment.Center,
                    FormatFlags = StringFormatFlags.NoWrap,
                    Trimming = StringTrimming.EllipsisCharacter
                };

                g.DrawString(DockText, Font, b, textRect, format);
            }

            // Close button
            var img = _closeButtonHot ? DockIcons.tw_close_selected : DockIcons.tw_close;

            if (isActive)
                img = _closeButtonHot ? DockIcons.tw_active_close_selected : DockIcons.tw_active_close;

            g.DrawImageUnscaled(img, _closeButtonRect.Left, _closeButtonRect.Top);
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            // Absorb event
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DockContentEventArgs.cs
================================================
ï»¿using System;

namespace DarkUI.Docking
{
    public class DockContentEventArgs : EventArgs
    {
        public DarkDockContent Content { get; private set; }

        public DockContentEventArgs(DarkDockContent content)
        {
            Content = content;
        }
    }
}



================================================
File: DarkUI/Docking/DockDropArea.cs
================================================
ï»¿using System.Drawing;

namespace DarkUI.Docking
{
    internal class DockDropArea
    {
        #region Property Region

        internal DarkDockPanel DockPanel { get; private set; }

        internal Rectangle DropArea { get; private set; }

        internal Rectangle HighlightArea { get; private set; }

        internal DarkDockRegion DockRegion { get; private set; }

        internal DarkDockGroup DockGroup { get; private set; }

        internal DockInsertType InsertType { get; private set; }

        #endregion

        #region Constructor Region

        internal DockDropArea(DarkDockPanel dockPanel, DarkDockRegion region)
        {
            DockPanel = dockPanel;
            DockRegion = region;
            InsertType = DockInsertType.None;

            BuildAreas();
        }

        internal DockDropArea(DarkDockPanel dockPanel, DarkDockGroup group, DockInsertType insertType)
        {
            DockPanel = dockPanel;
            DockGroup = group;
            InsertType = insertType;

            BuildAreas();
        }

        #endregion

        #region Method Region

        internal void BuildAreas()
        {
            if (DockRegion != null)
                BuildRegionAreas();
            else if (DockGroup != null)
                BuildGroupAreas();
        }

        private void BuildRegionAreas()
        {
            switch (DockRegion.DockArea)
            {
                case DarkDockArea.Left:

                    var leftRect = new Rectangle
                    {
                        X = DockPanel.PointToScreen(Point.Empty).X,
                        Y = DockPanel.PointToScreen(Point.Empty).Y,
                        Width = 50,
                        Height = DockPanel.Height
                    };

                    DropArea = leftRect;
                    HighlightArea = leftRect;

                    break;

                case DarkDockArea.Right:

                    var rightRect = new Rectangle
                    {
                        X = DockPanel.PointToScreen(Point.Empty).X + DockPanel.Width - 50,
                        Y = DockPanel.PointToScreen(Point.Empty).Y,
                        Width = 50,
                        Height = DockPanel.Height
                    };

                    DropArea = rightRect;
                    HighlightArea = rightRect;

                    break;

                case DarkDockArea.Bottom:

                    var x = DockPanel.PointToScreen(Point.Empty).X;
                    var width = DockPanel.Width;

                    if (DockPanel.Regions[DarkDockArea.Left].Visible)
                    {
                        x += DockPanel.Regions[DarkDockArea.Left].Width;
                        width -= DockPanel.Regions[DarkDockArea.Left].Width;
                    }

                    if (DockPanel.Regions[DarkDockArea.Right].Visible)
                    {
                        width -= DockPanel.Regions[DarkDockArea.Right].Width;
                    }

                    var bottomRect = new Rectangle
                    {
                        X = x,
                        Y = DockPanel.PointToScreen(Point.Empty).Y + DockPanel.Height - 50,
                        Width = width,
                        Height = 50
                    };

                    DropArea = bottomRect;
                    HighlightArea = bottomRect;

                    break;
            }
        }

        private void BuildGroupAreas()
        {
            switch (InsertType)
            {
                case DockInsertType.None:
                    var dropRect = new Rectangle
                    {
                        X = DockGroup.PointToScreen(Point.Empty).X,
                        Y = DockGroup.PointToScreen(Point.Empty).Y,
                        Width = DockGroup.Width,
                        Height = DockGroup.Height
                    };

                    DropArea = dropRect;
                    HighlightArea = dropRect;

                    break;

                case DockInsertType.Before:
                    var beforeDropWidth = DockGroup.Width;
                    var beforeDropHeight = DockGroup.Height;

                    switch (DockGroup.DockArea)
                    {
                        case DarkDockArea.Left:
                        case DarkDockArea.Right:
                            beforeDropHeight = DockGroup.Height / 4;
                            break;

                        case DarkDockArea.Bottom:
                            beforeDropWidth = DockGroup.Width / 4;
                            break;
                    }

                    var beforeDropRect = new Rectangle
                    {
                        X = DockGroup.PointToScreen(Point.Empty).X,
                        Y = DockGroup.PointToScreen(Point.Empty).Y,
                        Width = beforeDropWidth,
                        Height = beforeDropHeight
                    };

                    DropArea = beforeDropRect;
                    HighlightArea = beforeDropRect;

                    break;

                case DockInsertType.After:
                    var afterDropX = DockGroup.PointToScreen(Point.Empty).X;
                    var afterDropY = DockGroup.PointToScreen(Point.Empty).Y;
                    var afterDropWidth = DockGroup.Width;
                    var afterDropHeight = DockGroup.Height;

                    switch (DockGroup.DockArea)
                    {
                        case DarkDockArea.Left:
                        case DarkDockArea.Right:
                            afterDropHeight = DockGroup.Height / 4;
                            afterDropY = DockGroup.PointToScreen(Point.Empty).Y + DockGroup.Height - afterDropHeight;
                            break;

                        case DarkDockArea.Bottom:
                            afterDropWidth = DockGroup.Width / 4;
                            afterDropX = DockGroup.PointToScreen(Point.Empty).X + DockGroup.Width - afterDropWidth;
                            break;
                    }

                    var afterDropRect = new Rectangle
                    {
                        X = afterDropX,
                        Y = afterDropY,
                        Width = afterDropWidth,
                        Height = afterDropHeight
                    };

                    DropArea = afterDropRect;
                    HighlightArea = afterDropRect;

                    break;
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DockDropCollection.cs
================================================
ï»¿namespace DarkUI.Docking
{
    internal class DockDropCollection
    {
        #region Property Region

        internal DockDropArea DropArea { get; private set; }

        internal DockDropArea InsertBeforeArea { get; private set; }

        internal DockDropArea InsertAfterArea { get; private set; }

        #endregion

        #region Constructor Region

        internal DockDropCollection(DarkDockPanel dockPanel, DarkDockGroup group)
        {
            DropArea = new DockDropArea(dockPanel, group, DockInsertType.None);
            InsertBeforeArea = new DockDropArea(dockPanel, group, DockInsertType.Before);
            InsertAfterArea = new DockDropArea(dockPanel, group, DockInsertType.After);
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DockGroupState.cs
================================================
ï»¿using System.Collections.Generic;

namespace DarkUI.Docking
{
    public class DockGroupState
    {
        #region Property Region

        public List<string> Contents { get; set; }

        #endregion

        #region Constructor Region

        public DockGroupState()
        {
            Contents = new List<string>();
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DockInsertType.cs
================================================
ï»¿namespace DarkUI.Docking
{
    public enum DockInsertType
    {
        None,
        Before,
        After
    }
}



================================================
File: DarkUI/Docking/DockPanelState.cs
================================================
ï»¿using System.Collections.Generic;

namespace DarkUI.Docking
{
    public class DockPanelState
    {
        #region Property Region

        public List<DockRegionState> Regions { get; set; }

        #endregion

        #region Constructor Region

        public DockPanelState()
        {
            Regions = new List<DockRegionState>();
        }

        #endregion
    }
}



================================================
File: DarkUI/Docking/DockRegionState.cs
================================================
ï»¿using System.Collections.Generic;
using System.Drawing;

namespace DarkUI.Docking
{
    public class DockRegionState
    {
        #region Property Region

        public DarkDockArea Area { get; set; }

        public Size Size { get; set; }

        public List<DockGroupState> Groups { get; set; }

        #endregion

        #region Constructor Region

        public DockRegionState()
        {
            Groups = new List<DockGroupState>();
        }

        public DockRegionState(DarkDockArea area)
            : this()
        {
            Area = area;
        }

        public DockRegionState(DarkDockArea area, Size size)
            : this(area)
        {
            Size = size;
        }

        #endregion
    }
}



================================================
File: DarkUI/Extensions/BitmapExtensions.cs
================================================
ï»¿using System.Drawing;

namespace DarkUI.Extensions
{
    internal static class BitmapExtensions
    {
        internal static Bitmap SetColor(this Bitmap bitmap, Color color)
        {
            var newBitmap = new Bitmap(bitmap.Width, bitmap.Height);
            for (int i = 0; i < bitmap.Width; i++)
            {
                for (int j = 0; j < bitmap.Height; j++)
                {
                    var pixel = bitmap.GetPixel(i, j);
                    if (pixel.A > 0)
                        newBitmap.SetPixel(i, j, color);
                }
            }
            return newBitmap;
        }

        internal static Bitmap ChangeColor(this Bitmap bitmap, Color oldColor, Color newColor)
        {
            var newBitmap = new Bitmap(bitmap.Width, bitmap.Height);
            for (int i = 0; i < bitmap.Width; i++)
            {
                for (int j = 0; j < bitmap.Height; j++)
                {
                    var pixel = bitmap.GetPixel(i, j);
                    if (pixel == oldColor)
                        newBitmap.SetPixel(i, j, newColor);
                }
            }
            return newBitmap;
        }
    }
}



================================================
File: DarkUI/Extensions/IEnumerableExtensions.cs
================================================
ï»¿using System.Collections.Generic;
using System.Linq;

namespace DarkUI.Extensions
{
    internal static class IEnumerableExtensions
    {
        internal static bool IsLast<T>(this IEnumerable<T> items, T item)
        {
            var last = items.LastOrDefault();
            if (last == null)
                return false;
            return item.Equals(last);
        }

        internal static bool IsFirst<T>(this IEnumerable<T> items, T item)
        {
            var first = items.FirstOrDefault();
            if (first == null)
                return false;
            return item.Equals(first);
        }

        internal static bool IsFirstOrLast<T>(this IEnumerable<T> items, T item)
        {
            return items.IsFirst(item) || items.IsLast(item);
        }
    }
}



================================================
File: DarkUI/Forms/DarkDialog.Designer.cs
================================================
ï»¿using DarkUI.Controls;

namespace DarkUI.Forms
{
    partial class DarkDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.pnlFooter = new System.Windows.Forms.Panel();
            this.flowInner = new System.Windows.Forms.FlowLayoutPanel();
            this.btnOk = new DarkButton();
            this.btnCancel = new DarkButton();
            this.btnClose = new DarkButton();
            this.btnYes = new DarkButton();
            this.btnNo = new DarkButton();
            this.btnAbort = new DarkButton();
            this.btnRetry = new DarkButton();
            this.btnIgnore = new DarkButton();
            this.pnlFooter.SuspendLayout();
            this.flowInner.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlFooter
            // 
            this.pnlFooter.Controls.Add(this.flowInner);
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Location = new System.Drawing.Point(0, 357);
            this.pnlFooter.Name = "pnlFooter";
            this.pnlFooter.Size = new System.Drawing.Size(767, 45);
            this.pnlFooter.TabIndex = 1;
            // 
            // flowInner
            // 
            this.flowInner.Controls.Add(this.btnOk);
            this.flowInner.Controls.Add(this.btnCancel);
            this.flowInner.Controls.Add(this.btnClose);
            this.flowInner.Controls.Add(this.btnYes);
            this.flowInner.Controls.Add(this.btnNo);
            this.flowInner.Controls.Add(this.btnAbort);
            this.flowInner.Controls.Add(this.btnRetry);
            this.flowInner.Controls.Add(this.btnIgnore);
            this.flowInner.Dock = System.Windows.Forms.DockStyle.Right;
            this.flowInner.Location = new System.Drawing.Point(104, 0);
            this.flowInner.Name = "flowInner";
            this.flowInner.Padding = new System.Windows.Forms.Padding(10);
            this.flowInner.Size = new System.Drawing.Size(663, 45);
            this.flowInner.TabIndex = 10014;
            // 
            // btnOk
            // 
            this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btnOk.Location = new System.Drawing.Point(10, 10);
            this.btnOk.Margin = new System.Windows.Forms.Padding(0);
            this.btnOk.Name = "btnOk";
            this.btnOk.Padding = new System.Windows.Forms.Padding(5);
            this.btnOk.Size = new System.Drawing.Size(75, 26);
            this.btnOk.TabIndex = 3;
            this.btnOk.Text = "Ok";
            // 
            // btnCancel
            // 
            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnCancel.Location = new System.Drawing.Point(85, 10);
            this.btnCancel.Margin = new System.Windows.Forms.Padding(0);
            this.btnCancel.Name = "btnCancel";
            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
            this.btnCancel.Size = new System.Drawing.Size(75, 26);
            this.btnCancel.TabIndex = 4;
            this.btnCancel.Text = "Cancel";
            // 
            // btnClose
            // 
            this.btnClose.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnClose.Location = new System.Drawing.Point(160, 10);
            this.btnClose.Margin = new System.Windows.Forms.Padding(0);
            this.btnClose.Name = "btnClose";
            this.btnClose.Padding = new System.Windows.Forms.Padding(5);
            this.btnClose.Size = new System.Drawing.Size(75, 26);
            this.btnClose.TabIndex = 5;
            this.btnClose.Text = "Close";
            // 
            // btnYes
            // 
            this.btnYes.DialogResult = System.Windows.Forms.DialogResult.Yes;
            this.btnYes.Location = new System.Drawing.Point(235, 10);
            this.btnYes.Margin = new System.Windows.Forms.Padding(0);
            this.btnYes.Name = "btnYes";
            this.btnYes.Padding = new System.Windows.Forms.Padding(5);
            this.btnYes.Size = new System.Drawing.Size(75, 26);
            this.btnYes.TabIndex = 6;
            this.btnYes.Text = "Yes";
            // 
            // btnNo
            // 
            this.btnNo.DialogResult = System.Windows.Forms.DialogResult.No;
            this.btnNo.Location = new System.Drawing.Point(310, 10);
            this.btnNo.Margin = new System.Windows.Forms.Padding(0);
            this.btnNo.Name = "btnNo";
            this.btnNo.Padding = new System.Windows.Forms.Padding(5);
            this.btnNo.Size = new System.Drawing.Size(75, 26);
            this.btnNo.TabIndex = 7;
            this.btnNo.Text = "No";
            // 
            // btnAbort
            // 
            this.btnAbort.DialogResult = System.Windows.Forms.DialogResult.Abort;
            this.btnAbort.Location = new System.Drawing.Point(385, 10);
            this.btnAbort.Margin = new System.Windows.Forms.Padding(0);
            this.btnAbort.Name = "btnAbort";
            this.btnAbort.Padding = new System.Windows.Forms.Padding(5);
            this.btnAbort.Size = new System.Drawing.Size(75, 26);
            this.btnAbort.TabIndex = 8;
            this.btnAbort.Text = "Abort";
            // 
            // btnRetry
            // 
            this.btnRetry.DialogResult = System.Windows.Forms.DialogResult.Retry;
            this.btnRetry.Location = new System.Drawing.Point(460, 10);
            this.btnRetry.Margin = new System.Windows.Forms.Padding(0);
            this.btnRetry.Name = "btnRetry";
            this.btnRetry.Padding = new System.Windows.Forms.Padding(5);
            this.btnRetry.Size = new System.Drawing.Size(75, 26);
            this.btnRetry.TabIndex = 9;
            this.btnRetry.Text = "Retry";
            // 
            // btnIgnore
            // 
            this.btnIgnore.DialogResult = System.Windows.Forms.DialogResult.Ignore;
            this.btnIgnore.Location = new System.Drawing.Point(535, 10);
            this.btnIgnore.Margin = new System.Windows.Forms.Padding(0);
            this.btnIgnore.Name = "btnIgnore";
            this.btnIgnore.Padding = new System.Windows.Forms.Padding(5);
            this.btnIgnore.Size = new System.Drawing.Size(75, 26);
            this.btnIgnore.TabIndex = 10;
            this.btnIgnore.Text = "Ignore";
            // 
            // DarkDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(767, 402);
            this.Controls.Add(this.pnlFooter);
            this.Name = "DarkDialog";
            this.Text = "DarkDialog";
            this.pnlFooter.ResumeLayout(false);
            this.flowInner.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Panel pnlFooter;
        private System.Windows.Forms.FlowLayoutPanel flowInner;
    }
}


================================================
File: DarkUI/Forms/DarkDialog.cs
================================================
ï»¿using DarkUI.Controls;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;

namespace DarkUI.Forms
{
    public partial class DarkDialog : DarkForm
    {
        #region Field Region

        private DarkDialogButton _dialogButtons = DarkDialogButton.Ok;
        private List<DarkButton> _buttons;

        #endregion

        #region Button Region

        protected DarkButton btnOk;
        protected DarkButton btnCancel;
        protected DarkButton btnClose;
        protected DarkButton btnYes;
        protected DarkButton btnNo;
        protected DarkButton btnAbort;
        protected DarkButton btnRetry;
        protected DarkButton btnIgnore;

        #endregion

        #region Property Region

        [Description("Determines the type of the dialog window.")]
        [DefaultValue(DarkDialogButton.Ok)]
        public DarkDialogButton DialogButtons
        {
            get { return _dialogButtons; }
            set
            {
                if (_dialogButtons == value)
                    return;

                _dialogButtons = value;
                SetButtons();
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int TotalButtonSize { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new IButtonControl AcceptButton
        {
            get { return base.AcceptButton; }
            private set { base.AcceptButton = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new IButtonControl CancelButton
        {
            get { return base.CancelButton; }
            private set { base.CancelButton = value; }
        }

        #endregion

        #region Constructor Region

        public DarkDialog()
        {
            InitializeComponent();

            _buttons = new List<DarkButton>
                {
                    btnAbort, btnRetry, btnIgnore, btnOk,
                    btnCancel, btnClose, btnYes, btnNo
                };
        }

        #endregion

        #region Event Handler Region

        protected override void OnLoad(System.EventArgs e)
        {
            base.OnLoad(e);

            SetButtons();
        }

        #endregion

        #region Method Region

        private void SetButtons()
        {
            foreach (var btn in _buttons)
                btn.Visible = false;

            switch (_dialogButtons)
            {
                case DarkDialogButton.Ok:
                    ShowButton(btnOk, true);
                    AcceptButton = btnOk;
                    break;
                case DarkDialogButton.Close:
                    ShowButton(btnClose, true);
                    AcceptButton = btnClose;
                    CancelButton = btnClose;
                    break;
                case DarkDialogButton.OkCancel:
                    ShowButton(btnOk);
                    ShowButton(btnCancel, true);
                    AcceptButton = btnOk;
                    CancelButton = btnCancel;
                    break;
                case DarkDialogButton.AbortRetryIgnore:
                    ShowButton(btnAbort);
                    ShowButton(btnRetry);
                    ShowButton(btnIgnore, true);
                    AcceptButton = btnAbort;
                    CancelButton = btnIgnore;
                    break;
                case DarkDialogButton.RetryCancel:
                    ShowButton(btnRetry);
                    ShowButton(btnCancel, true);
                    AcceptButton = btnRetry;
                    CancelButton = btnCancel;
                    break;
                case DarkDialogButton.YesNo:
                    ShowButton(btnYes);
                    ShowButton(btnNo, true);
                    AcceptButton = btnYes;
                    CancelButton = btnNo;
                    break;
                case DarkDialogButton.YesNoCancel:
                    ShowButton(btnYes);
                    ShowButton(btnNo);
                    ShowButton(btnCancel, true);
                    AcceptButton = btnYes;
                    CancelButton = btnCancel;
                    break;
            }

            SetFlowSize();
        }

        private void ShowButton(DarkButton button, bool isLast = false)
        {
            button.SendToBack();

            if (!isLast)
                button.Margin = new Padding(0, 0, 10, 0);

            button.Visible = true;
        }

        private void SetFlowSize()
        {
            var width = flowInner.Padding.Horizontal;

            foreach (var btn in _buttons)
            {
                if (btn.Visible)
                    width += btn.Width + btn.Margin.Right;
            }

            flowInner.Width = width;
            TotalButtonSize = width;
        }

        #endregion
    }
}



================================================
File: DarkUI/Forms/DarkDialog.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: DarkUI/Forms/DarkDialogButton.cs
================================================
ï»¿namespace DarkUI.Forms
{
    public enum DarkDialogButton
    {
        Ok,
        Close,
        OkCancel,
        YesNo,
        YesNoCancel,
        AbortRetryIgnore,
        RetryCancel
    }
}



================================================
File: DarkUI/Forms/DarkForm.cs
================================================
ï»¿using DarkUI.Config;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Forms
{
    public class DarkForm : Form
    {
        #region Field Region

        private bool _flatBorder;

        #endregion

        #region Property Region

        [Category("Appearance")]
        [Description("Determines whether a single pixel border should be rendered around the form.")]
        [DefaultValue(false)]
        public bool FlatBorder
        {
            get { return _flatBorder; }
            set
            {
                _flatBorder = value;
                Invalidate();
            }
        }

        #endregion

        #region Constructor Region

        public DarkForm()
        {
            BackColor = Colors.GreyBackground;
        }

        #endregion

        #region Paint Region

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            base.OnPaintBackground(e);

            if (!_flatBorder)
                return;

            var g = e.Graphics;

            using (var p = new Pen(Colors.DarkBorder))
            {
                var modRect = new Rectangle(ClientRectangle.Location, new Size(ClientRectangle.Width - 1, ClientRectangle.Height - 1));
                g.DrawRectangle(p, modRect);
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Forms/DarkMessageBox.Designer.cs
================================================
ï»¿using DarkUI.Controls;

namespace DarkUI.Forms
{
    partial class DarkMessageBox
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.picIcon = new System.Windows.Forms.PictureBox();
            this.lblText = new DarkLabel();
            ((System.ComponentModel.ISupportInitialize)(this.picIcon)).BeginInit();
            this.SuspendLayout();
            // 
            // picIcon
            // 
            this.picIcon.Location = new System.Drawing.Point(10, 10);
            this.picIcon.Name = "picIcon";
            this.picIcon.Size = new System.Drawing.Size(32, 32);
            this.picIcon.TabIndex = 3;
            this.picIcon.TabStop = false;
            // 
            // lblText
            // 
            this.lblText.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.lblText.Location = new System.Drawing.Point(50, 9);
            this.lblText.Name = "lblText";
            this.lblText.Size = new System.Drawing.Size(185, 15);
            this.lblText.TabIndex = 4;
            this.lblText.Text = "Something something something";
            // 
            // DarkMessageBox
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(244, 86);
            this.Controls.Add(this.lblText);
            this.Controls.Add(this.picIcon);
            this.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "DarkMessageBox";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Message box";
            this.Controls.SetChildIndex(this.picIcon, 0);
            this.Controls.SetChildIndex(this.lblText, 0);
            ((System.ComponentModel.ISupportInitialize)(this.picIcon)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.PictureBox picIcon;
        private DarkLabel lblText;
    }
}


================================================
File: DarkUI/Forms/DarkMessageBox.cs
================================================
ï»¿using DarkUI.Icons;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Forms
{
    public partial class DarkMessageBox : DarkDialog
    {
        #region Field Region

        private string _message;
        private int _maximumWidth = 350;

        #endregion

        #region Property Region

        [Description("Determines the maximum width of the message box when it autosizes around the displayed message.")]
        [DefaultValue(350)]
        public int MaximumWidth
        {
            get { return _maximumWidth; }
            set
            {
                _maximumWidth = value;
                CalculateSize();
            }
        }

        #endregion

        #region Constructor Region

        public DarkMessageBox()
        {
            InitializeComponent();
        }

        public DarkMessageBox(string message, string title, DarkMessageBoxIcon icon, DarkDialogButton buttons)
            : this()
        {
            Text = title;
            _message = message;

            DialogButtons = buttons;
            SetIcon(icon);
        }

        public DarkMessageBox(string message)
            : this(message, null, DarkMessageBoxIcon.None, DarkDialogButton.Ok)
        { }

        public DarkMessageBox(string message, string title)
            : this(message, title, DarkMessageBoxIcon.None, DarkDialogButton.Ok)
        { }

        public DarkMessageBox(string message, string title, DarkDialogButton buttons)
            : this(message, title, DarkMessageBoxIcon.None, buttons)
        { }

        public DarkMessageBox(string message, string title, DarkMessageBoxIcon icon)
            : this(message, title, icon, DarkDialogButton.Ok)
        { }

        #endregion

        #region Static Method Region

        public static DialogResult ShowInformation(string message, string caption, DarkDialogButton buttons = DarkDialogButton.Ok)
        {
            return ShowDialog(message, caption, DarkMessageBoxIcon.Information, buttons);
        }

        public static DialogResult ShowWarning(string message, string caption, DarkDialogButton buttons = DarkDialogButton.Ok)
        {
            return ShowDialog(message, caption, DarkMessageBoxIcon.Warning, buttons);
        }

        public static DialogResult ShowError(string message, string caption, DarkDialogButton buttons = DarkDialogButton.Ok)
        {
            return ShowDialog(message, caption, DarkMessageBoxIcon.Error, buttons);
        }

        private static DialogResult ShowDialog(string message, string caption, DarkMessageBoxIcon icon, DarkDialogButton buttons)
        {
            using (var dlg = new DarkMessageBox(message, caption, icon, buttons))
            {
                var result = dlg.ShowDialog();
                return result;
            }
        }

        #endregion

        #region Method Region

        private void SetIcon(DarkMessageBoxIcon icon)
        {
            switch (icon)
            {
                case DarkMessageBoxIcon.None:
                    picIcon.Visible = false;
                    lblText.Left = 10;
                    break;
                case DarkMessageBoxIcon.Information:
                    picIcon.Image = MessageBoxIcons.info;
                    break;
                case DarkMessageBoxIcon.Warning:
                    picIcon.Image = MessageBoxIcons.warning;
                    break;
                case DarkMessageBoxIcon.Error:
                    picIcon.Image = MessageBoxIcons.error;
                    break;
            }
        }

        private void CalculateSize()
        {
            var width = 260; var height = 124;

            // Reset form back to original size
            Size = new Size(width, height);

            lblText.Text = string.Empty;
            lblText.AutoSize = true;
            lblText.Text = _message;

            // Set the minimum dialog size to whichever is bigger - the original size or the buttons.
            var minWidth = Math.Max(width, TotalButtonSize + 15);

            // Calculate the total size of the message
            var totalWidth = lblText.Right + 25;

            // Make sure we're not making the dialog bigger than the maximum size
            if (totalWidth < _maximumWidth)
            {
                // Width is smaller than the maximum width.
                // This means we can have a single-line message box.
                // Move the label to accomodate this.
                width = totalWidth;
                lblText.Top = picIcon.Top + (picIcon.Height / 2) - (lblText.Height / 2);
            }
            else
            {
                // Width is larger than the maximum width.
                // Change the label size and wrap it.
                width = _maximumWidth;
                var offsetHeight = Height - picIcon.Height;
                lblText.AutoUpdateHeight = true;
                lblText.Width = width - lblText.Left - 25;
                height = offsetHeight + lblText.Height;
            }

            // Force the width to the minimum width
            if (width < minWidth)
                width = minWidth;

            // Set the new size of the dialog
            Size = new Size(width, height);
        }

        #endregion

        #region Event Handler Region

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            CalculateSize();
        }

        #endregion
    }
}



================================================
File: DarkUI/Forms/DarkMessageBox.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: DarkUI/Forms/DarkMessageBoxIcon.cs
================================================
ï»¿namespace DarkUI.Forms
{
    public enum DarkMessageBoxIcon
    {
        None,
        Information,
        Warning,
        Error
    }
}



================================================
File: DarkUI/Forms/DarkTranslucentForm.cs
================================================
ï»¿using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Forms
{
    internal class DarkTranslucentForm : Form
    {
        #region Property Region

        protected override bool ShowWithoutActivation
        {
            get { return true; }
        }

        #endregion

        #region Constructor Region

        public DarkTranslucentForm(Color backColor, double opacity = 0.6)
        {
            StartPosition = FormStartPosition.Manual;
            FormBorderStyle = FormBorderStyle.None;
            Size = new Size(1, 1);
            ShowInTaskbar = false;
            AllowTransparency = true;
            Opacity = opacity;
            BackColor = backColor;
        }

        #endregion
    }
}



================================================
File: DarkUI/Icons/DockIcons.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkUI {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DockIcons {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DockIcons() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DarkUI.Icons.DockIcons", typeof(DockIcons).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap active_inactive_close {
            get {
                object obj = ResourceManager.GetObject("active_inactive_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap arrow {
            get {
                object obj = ResourceManager.GetObject("arrow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap close {
            get {
                object obj = ResourceManager.GetObject("close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap close_selected {
            get {
                object obj = ResourceManager.GetObject("close_selected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap inactive_close {
            get {
                object obj = ResourceManager.GetObject("inactive_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap inactive_close_selected {
            get {
                object obj = ResourceManager.GetObject("inactive_close_selected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tw_active_close {
            get {
                object obj = ResourceManager.GetObject("tw_active_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tw_active_close_selected {
            get {
                object obj = ResourceManager.GetObject("tw_active_close_selected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tw_close {
            get {
                object obj = ResourceManager.GetObject("tw_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tw_close_selected {
            get {
                object obj = ResourceManager.GetObject("tw_close_selected", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}



================================================
File: DarkUI/Icons/DockIcons.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="active_inactive_close" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\active-inactive-close.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="arrow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\arrow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="close" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\close.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="close_selected" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\close-selected.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="inactive_close" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\inactive-close.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="inactive_close_selected" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\inactive-close-selected.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tw_active_close" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tw_active_close.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tw_active_close_selected" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tw_active_close_selected.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tw_close" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tw_close.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tw_close_selected" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tw_close_selected.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DarkUI/Icons/MenuIcons.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkUI.Icons {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MenuIcons {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MenuIcons() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DarkUI.Icons.MenuIcons", typeof(MenuIcons).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap grip {
            get {
                object obj = ResourceManager.GetObject("grip", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap tick {
            get {
                object obj = ResourceManager.GetObject("tick", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}



================================================
File: DarkUI/Icons/MenuIcons.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="grip" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\grip.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tick" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tick.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DarkUI/Icons/MessageBoxIcons.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkUI.Icons {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MessageBoxIcons {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MessageBoxIcons() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DarkUI.Icons.MessageBoxIcons", typeof(MessageBoxIcons).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap error {
            get {
                object obj = ResourceManager.GetObject("error", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap info {
            get {
                object obj = ResourceManager.GetObject("info", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap warning {
            get {
                object obj = ResourceManager.GetObject("warning", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}



================================================
File: DarkUI/Icons/MessageBoxIcons.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="error" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\error.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="info" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\info.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="warning" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\warning.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DarkUI/Icons/ScrollIcons.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkUI.Icons {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ScrollIcons {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ScrollIcons() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DarkUI.Icons.ScrollIcons", typeof(ScrollIcons).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap scrollbar_arrow {
            get {
                object obj = ResourceManager.GetObject("scrollbar_arrow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap scrollbar_arrow_clicked {
            get {
                object obj = ResourceManager.GetObject("scrollbar_arrow_clicked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap scrollbar_arrow_hot {
            get {
                object obj = ResourceManager.GetObject("scrollbar_arrow_hot", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap scrollbar_arrow_standard {
            get {
                object obj = ResourceManager.GetObject("scrollbar_arrow_standard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}



================================================
File: DarkUI/Icons/ScrollIcons.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="scrollbar_arrow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\scrollbar_arrow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="scrollbar_arrow_clicked" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\scrollbar_arrow_clicked.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="scrollbar_arrow_hot" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\scrollbar_arrow_hot.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="scrollbar_arrow_standard" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\scrollbar_arrow_standard.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DarkUI/Icons/TreeViewIcons.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkUI.Icons {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TreeViewIcons {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TreeViewIcons() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DarkUI.Icons.TreeViewIcons", typeof(TreeViewIcons).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap node_closed_empty {
            get {
                object obj = ResourceManager.GetObject("node_closed_empty", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap node_closed_full {
            get {
                object obj = ResourceManager.GetObject("node_closed_full", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap node_open {
            get {
                object obj = ResourceManager.GetObject("node_open", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap node_open_empty {
            get {
                object obj = ResourceManager.GetObject("node_open_empty", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}



================================================
File: DarkUI/Icons/TreeViewIcons.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="node_closed_empty" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\node_closed_empty.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="node_closed_full" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\node_closed_full.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="node_open" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\node_open.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="node_open_empty" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\node_open_empty.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>


================================================
File: DarkUI/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Dark UI")]
[assembly: AssemblyDescription("Dark themed control and docking library for .NET WinForms.")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Robin Perris")]
[assembly: AssemblyProduct("Dark UI")]
[assembly: AssemblyCopyright("Copyright Â© Robin Perris")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f19472f5-8c44-4c51-a8a0-b9de5f555255")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: DarkUI/Renderers/DarkMenuRenderer.cs
================================================
ï»¿using DarkUI.Config;
using DarkUI.Icons;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Renderers
{
    public class DarkMenuRenderer : ToolStripRenderer
    {
        #region Initialisation Region

        protected override void Initialize(ToolStrip toolStrip)
        {
            base.Initialize(toolStrip);

            toolStrip.BackColor = Colors.GreyBackground;
            toolStrip.ForeColor = Colors.LightText;
        }

        protected override void InitializeItem(ToolStripItem item)
        {
            base.InitializeItem(item);

            item.ForeColor = Colors.LightText;

            if (item.GetType() == typeof(ToolStripSeparator))
            {
                item.Margin = new Padding(0, 0, 0, 1);
            }
        }

        #endregion

        #region Render Region

        protected override void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
        {
            var g = e.Graphics;
            using (var b = new SolidBrush(Colors.GreyBackground))
            {
                g.FillRectangle(b, e.AffectedBounds);
            }
        }

        protected override void OnRenderImageMargin(ToolStripRenderEventArgs e)
        {
            var g = e.Graphics;

            var rect = new Rectangle(0, 0, e.ToolStrip.Width - 1, e.ToolStrip.Height - 1);

            using (var p = new Pen(Colors.LightBorder))
            {
                g.DrawRectangle(p, rect);
            }
        }

        protected override void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e)
        {
            var g = e.Graphics;

            var rect = new Rectangle(e.ImageRectangle.Left - 2, e.ImageRectangle.Top - 2,
                                         e.ImageRectangle.Width + 4, e.ImageRectangle.Height + 4);

            using (var b = new SolidBrush(Colors.LightBorder))
            {
                g.FillRectangle(b, rect);
            }

            using (var p = new Pen(Colors.BlueHighlight))
            {
                var modRect = new Rectangle(rect.Left, rect.Top, rect.Width - 1, rect.Height - 1);
                g.DrawRectangle(p, modRect);
            }

            if (e.Item.ImageIndex == -1 && String.IsNullOrEmpty(e.Item.ImageKey) && e.Item.Image == null)
            {
                g.DrawImageUnscaled(MenuIcons.tick, new Point(e.ImageRectangle.Left, e.ImageRectangle.Top));
            }
        }

        protected override void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
        {
            var g = e.Graphics;

            var rect = new Rectangle(1, 3, e.Item.Width, 1);

            using (var b = new SolidBrush(Colors.LightBorder))
            {
                g.FillRectangle(b, rect);
            }
        }

        protected override void OnRenderArrow(ToolStripArrowRenderEventArgs e)
        {
            e.ArrowColor = Colors.LightText;
            e.ArrowRectangle = new Rectangle(new Point(e.ArrowRectangle.Left, e.ArrowRectangle.Top - 1), e.ArrowRectangle.Size);

            base.OnRenderArrow(e);
        }

        protected override void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
        {
            var g = e.Graphics;

            e.Item.ForeColor = e.Item.Enabled ? Colors.LightText : Colors.DisabledText;

            if (e.Item.Enabled)
            {
                // Normal item
                if (e.Item.Selected)
                {
                    var rect = new Rectangle(2, 0, e.Item.Width - 3, e.Item.Height);

                    using (var b = new SolidBrush(Colors.GreySelection))
                    {
                        g.FillRectangle(b, rect);
                    }
                }

                // Header item on open menu
                if (e.Item.GetType() == typeof(ToolStripMenuItem))
                {
                    if (((ToolStripMenuItem)e.Item).DropDown.Visible && e.Item.IsOnDropDown == false)
                    {
                        var rect = new Rectangle(2, 0, e.Item.Width - 3, e.Item.Height);

                        using (var b = new SolidBrush(Colors.GreySelection))
                        {
                            g.FillRectangle(b, rect);
                        }
                    }
                }
            }
        }

        #endregion
    }
}



================================================
File: DarkUI/Renderers/DarkToolStripRenderer.cs
================================================
ï»¿using DarkUI.Config;
using DarkUI.Extensions;
using DarkUI.Icons;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Renderers
{
    public class DarkToolStripRenderer : DarkMenuRenderer
    {
        #region Initialisation Region

        protected override void InitializeItem(ToolStripItem item)
        {
            base.InitializeItem(item);

            if (item.GetType() == typeof(ToolStripSeparator))
            {
                var castItem = (ToolStripSeparator)item;
                if (!castItem.IsOnDropDown)
                    item.Margin = new Padding(0, 0, 2, 0);
            }

            if (item.GetType() == typeof(ToolStripButton))
            {
                item.AutoSize = false;
                item.Size = new Size(24, 24);
            }
        }

        #endregion

        #region Render Region

        protected override void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
        {
            base.OnRenderToolStripBackground(e);

            var g = e.Graphics;

            if (e.ToolStrip.GetType() == typeof(ToolStripOverflow))
            {
                using (var p = new Pen(Colors.GreyBackground))
                {
                    var rect = new Rectangle(e.AffectedBounds.Left, e.AffectedBounds.Top, e.AffectedBounds.Width - 1, e.AffectedBounds.Height - 1);
                    g.DrawRectangle(p, rect);
                }
            }
        }

        protected override void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
        {
            if (e.ToolStrip.GetType() != typeof(ToolStrip))
                base.OnRenderToolStripBorder(e);
        }

        protected override void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
        {
            var g = e.Graphics;

            var rect = new Rectangle(0, 1, e.Item.Width, e.Item.Height - 2);

            if (e.Item.Selected || e.Item.Pressed)
            {
                using (var b = new SolidBrush(Colors.GreySelection))
                {
                    g.FillRectangle(b, rect);
                }
            }

            if (e.Item.GetType() == typeof(ToolStripButton))
            {
                var castItem = (ToolStripButton)e.Item;

                if (castItem.Checked)
                {
                    using (var b = new SolidBrush(Colors.GreySelection))
                    {
                        g.FillRectangle(b, rect);
                    }
                }

                if (castItem.Checked && castItem.Selected)
                {
                    var modRect = new Rectangle(rect.Left, rect.Top, rect.Width - 1, rect.Height - 1);
                    using (var p = new Pen(Colors.GreyHighlight))
                    {
                        g.DrawRectangle(p, modRect);
                    }
                }
            }
        }

        protected override void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
        {
            var g = e.Graphics;

            var rect = new Rectangle(0, 1, e.Item.Width, e.Item.Height - 2);

            if (e.Item.Selected || e.Item.Pressed)
            {
                using (var b = new SolidBrush(Colors.GreySelection))
                {
                    g.FillRectangle(b, rect);
                }
            }
        }

        protected override void OnRenderGrip(ToolStripGripRenderEventArgs e)
        {
            if (e.GripStyle == ToolStripGripStyle.Hidden)
                return;

            var g = e.Graphics;

            using (var img = MenuIcons.grip.SetColor(Colors.LightBorder))
            {
                g.DrawImageUnscaled(img, new Point(e.AffectedBounds.Left, e.AffectedBounds.Top));
            }
        }

        protected override void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
        {
            var g = e.Graphics;

            var castItem = (ToolStripSeparator)e.Item;
            if (castItem.IsOnDropDown)
            {
                base.OnRenderSeparator(e);
                return;
            }

            var rect = new Rectangle(3, 3, 2, e.Item.Height - 4);

            using (var p = new Pen(Colors.DarkBorder))
            {
                g.DrawLine(p, rect.Left, rect.Top, rect.Left, rect.Height);
            }

            using (var p = new Pen(Colors.LightBorder))
            {
                g.DrawLine(p, rect.Left + 1, rect.Top, rect.Left + 1, rect.Height);
            }
        }

        protected override void OnRenderItemImage(ToolStripItemImageRenderEventArgs e)
        {
            var g = e.Graphics;

            if (e.Image == null)
                return;

            if (e.Item.Enabled)
                g.DrawImageUnscaled(e.Image, new Point(e.ImageRectangle.Left, e.ImageRectangle.Top));
            else
                ControlPaint.DrawImageDisabled(g, e.Image, e.ImageRectangle.Left, e.ImageRectangle.Top, Color.Transparent);
        }

        protected override void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
        {
            /*var g = e.Graphics;

            var rect = new Rectangle(1, 0, e.Item.Width - 5, e.Item.Height);

            var castItem = (ToolStripOverflowButton)e.Item;

            var bgColor = BasicColors.White;
            if (castItem.Selected)
                bgColor = StyleColors.Weak(style);
            if (castItem.Pressed)
                bgColor = StyleColors.Medium(style);

            using (var b = new SolidBrush(bgColor))
            {
                g.FillRectangle(b, rect);
            }

            var fgColor = BasicColors.Grey;
            if (castItem.Selected)
                fgColor = StyleColors.Medium(style);
            if (castItem.Pressed)
                fgColor = StyleColors.Strong(style);

            using (var p = new Pen(fgColor))
            {
                var modRect = new Rectangle(1, 0, e.Item.Width - 6, e.Item.Height - 1);
                g.DrawRectangle(p, modRect);
            }

            using (var img = MenuIcons.overflow.SetColor(BasicColors.MediumGrey))
            {
                g.DrawImageUnscaled(img, e.Item.Width - 13, e.Item.Height - 9);
            }*/
        }

        #endregion
    }
}



================================================
File: DarkUI/Win32/ControlScrollFilter.cs
================================================
ï»¿using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Win32
{
    public class ControlScrollFilter : IMessageFilter
    {
        public bool PreFilterMessage(ref Message m)
        {
            switch (m.Msg)
            {
                case (int)WM.MOUSEWHEEL:
                case (int)WM.MOUSEHWHEEL:
                    var hControlUnderMouse = Native.WindowFromPoint(new Point((int)m.LParam));

                    if (hControlUnderMouse == m.HWnd)
                        return false;

                    Native.SendMessage(hControlUnderMouse, (uint)m.Msg, m.WParam, m.LParam);
                    return true;
            }

            return false;
        }
    }
}



================================================
File: DarkUI/Win32/DockContentDragFilter.cs
================================================
ï»¿using DarkUI.Config;
using DarkUI.Docking;
using DarkUI.Forms;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Win32
{
    public class DockContentDragFilter : IMessageFilter
    {
        #region Field Region

        private DarkDockPanel _dockPanel;

        private DarkDockContent _dragContent;

        private DarkTranslucentForm _highlightForm;

        private bool _isDragging = false;
        private DarkDockRegion _targetRegion;
        private DarkDockGroup _targetGroup;
        private DockInsertType _insertType = DockInsertType.None;

        private Dictionary<DarkDockRegion, DockDropArea> _regionDropAreas = new Dictionary<DarkDockRegion, DockDropArea>();
        private Dictionary<DarkDockGroup, DockDropCollection> _groupDropAreas = new Dictionary<DarkDockGroup, DockDropCollection>();

        #endregion

        #region Constructor Region

        public DockContentDragFilter(DarkDockPanel dockPanel)
        {
            _dockPanel = dockPanel;

            _highlightForm = new DarkTranslucentForm(Colors.BlueSelection);
        }

        #endregion

        #region IMessageFilter Region

        public bool PreFilterMessage(ref Message m)
        {
            // Exit out early if we're not dragging any content
            if (!_isDragging)
                return false;

            // We only care about mouse events
            if (!(m.Msg == (int)WM.MOUSEMOVE ||
                  m.Msg == (int)WM.LBUTTONDOWN || m.Msg == (int)WM.LBUTTONUP || m.Msg == (int)WM.LBUTTONDBLCLK ||
                  m.Msg == (int)WM.RBUTTONDOWN || m.Msg == (int)WM.RBUTTONUP || m.Msg == (int)WM.RBUTTONDBLCLK))
                return false;

            // Move content
            if (m.Msg == (int)WM.MOUSEMOVE)
            {
                HandleDrag();
                return false;
            }

            // Drop content
            if (m.Msg == (int)WM.LBUTTONUP)
            {
                if (_targetRegion != null)
                {
                    _dockPanel.RemoveContent(_dragContent);
                    _dragContent.DockArea = _targetRegion.DockArea;
                    _dockPanel.AddContent(_dragContent);
                }
                else if (_targetGroup != null)
                {
                    _dockPanel.RemoveContent(_dragContent);

                    switch (_insertType)
                    {
                        case DockInsertType.None:
                            _dockPanel.AddContent(_dragContent, _targetGroup);
                            break;

                        case DockInsertType.Before:
                        case DockInsertType.After:
                            _dockPanel.InsertContent(_dragContent, _targetGroup, _insertType);
                            break;
                    }                        
                }

                StopDrag();
                return false;
            }

            return true;
        }

        #endregion

        #region Method Region

        public void StartDrag(DarkDockContent content)
        {
            _regionDropAreas = new Dictionary<DarkDockRegion, DockDropArea>();
            _groupDropAreas = new Dictionary<DarkDockGroup, DockDropCollection>();

            // Add all regions and groups to the drop collections
            foreach (var region in _dockPanel.Regions.Values)
            {
                if (region.DockArea == DarkDockArea.Document)
                    continue;

                // If the region is visible then build drop areas for the groups.
                if (region.Visible)
                {
                    foreach (var group in region.Groups)
                    {
                        var collection = new DockDropCollection(_dockPanel, group);
                        _groupDropAreas.Add(group, collection);
                    }
                }
                // If the region is NOT visible then build the drop area for the region itself.
                else
                {
                    var area = new DockDropArea(_dockPanel, region);
                    _regionDropAreas.Add(region, area);
                }
            }

            _dragContent = content;
            _isDragging = true;
        }

        private void StopDrag()
        {
            Cursor.Current = Cursors.Default;

            _highlightForm.Hide();
            _dragContent = null;
            _isDragging = false;
        }

        private void UpdateHighlightForm(Rectangle rect)
        {
            Cursor.Current = Cursors.SizeAll;

            _highlightForm.SuspendLayout();

            _highlightForm.Size = new Size(rect.Width, rect.Height);
            _highlightForm.Location = new Point(rect.X, rect.Y);

            _highlightForm.ResumeLayout();

            if (!_highlightForm.Visible)
            {
                _highlightForm.Show();
                _highlightForm.BringToFront();
            }
        }

        private void HandleDrag()
        {
            var location = Cursor.Position;

            _insertType = DockInsertType.None;

            _targetRegion = null;
            _targetGroup = null;

            // Check all region drop areas
            foreach (var area in _regionDropAreas.Values)
            {
                if (area.DropArea.Contains(location))
                {
                    _insertType = DockInsertType.None;
                    _targetRegion = area.DockRegion;
                    UpdateHighlightForm(area.HighlightArea);
                    return;
                }
            }

            // Check all group drop areas
            foreach (var collection in _groupDropAreas.Values)
            {
                var sameRegion = false;
                var sameGroup = false;
                var groupHasOtherContent = false;

                if (collection.DropArea.DockGroup == _dragContent.DockGroup)
                    sameGroup = true;

                if (collection.DropArea.DockGroup.DockRegion == _dragContent.DockRegion)
                    sameRegion = true;

                if (_dragContent.DockGroup.ContentCount > 1)
                    groupHasOtherContent = true;

                // If we're hovering over the group itself, only allow inserting before/after if multiple content is tabbed.
                if (!sameGroup || groupHasOtherContent)
                {
                    var skipBefore = false;
                    var skipAfter = false;

                    // Inserting before/after other content might cause the content to be dropped on to its own location.
                    // Check if the group above/below the hovered group contains our drag content.
                    if (sameRegion && !groupHasOtherContent)
                    {
                        if (collection.InsertBeforeArea.DockGroup.Order == _dragContent.DockGroup.Order + 1)
                            skipBefore = true;

                        if (collection.InsertAfterArea.DockGroup.Order == _dragContent.DockGroup.Order - 1)
                            skipAfter = true;
                    }

                    if (!skipBefore)
                    {
                        if (collection.InsertBeforeArea.DropArea.Contains(location))
                        {
                            _insertType = DockInsertType.Before;
                            _targetGroup = collection.InsertBeforeArea.DockGroup;
                            UpdateHighlightForm(collection.InsertBeforeArea.HighlightArea);
                            return;
                        }
                    }

                    if (!skipAfter)
                    {
                        if (collection.InsertAfterArea.DropArea.Contains(location))
                        {
                            _insertType = DockInsertType.After;
                            _targetGroup = collection.InsertAfterArea.DockGroup;
                            UpdateHighlightForm(collection.InsertAfterArea.HighlightArea);
                            return;
                        }
                    }
                }

                // Don't allow content to be dragged on to itself
                if (!sameGroup)
                {
                    if (collection.DropArea.DropArea.Contains(location))
                    {
                        _insertType = DockInsertType.None;
                        _targetGroup = collection.DropArea.DockGroup;
                        UpdateHighlightForm(collection.DropArea.HighlightArea);
                        return;
                    }
                }
            }

            // Not hovering over anything - hide the highlight
            if (_highlightForm.Visible)
                _highlightForm.Hide();

            // Show we can't drag here
            Cursor.Current = Cursors.No;
        }

        #endregion
    }
}



================================================
File: DarkUI/Win32/DockResizeFilter.cs
================================================
ï»¿using DarkUI.Docking;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace DarkUI.Win32
{
    public class DockResizeFilter : IMessageFilter
    {
        #region Field Region

        private DarkDockPanel _dockPanel;

        private Timer _dragTimer;
        private bool _isDragging;
        private Point _initialContact;
        private DarkDockSplitter _activeSplitter;

        #endregion

        #region Constructor Region

        public DockResizeFilter(DarkDockPanel dockPanel)
        {
            _dockPanel = dockPanel;

            _dragTimer = new Timer();
            _dragTimer.Interval = 1;
            _dragTimer.Tick += DragTimer_Tick;
        }

        #endregion

        #region IMessageFilter Region

        public bool PreFilterMessage(ref Message m)
        {
            // We only care about mouse events
            if (!(m.Msg == (int)WM.MOUSEMOVE ||
                  m.Msg == (int)WM.LBUTTONDOWN || m.Msg == (int)WM.LBUTTONUP || m.Msg == (int)WM.LBUTTONDBLCLK ||
                  m.Msg == (int)WM.RBUTTONDOWN || m.Msg == (int)WM.RBUTTONUP || m.Msg == (int)WM.RBUTTONDBLCLK))
                return false;

            // Stop drag.
            if (m.Msg == (int)WM.LBUTTONUP)
            {
                if (_isDragging)
                {
                    StopDrag();
                    return true;
                }
            }

            // Exit out early if we're simply releasing a non-splitter drag over the area
            if (m.Msg == (int)WM.LBUTTONUP && !_isDragging)
                return false;

            // Force cursor if already dragging.
            if (_isDragging)
                Cursor.Current = _activeSplitter.ResizeCursor;

            // Return out early if we're dragging something that's not a splitter.
            if (m.Msg == (int)WM.MOUSEMOVE && !_isDragging && _dockPanel.MouseButtonState != MouseButtons.None)
                return false;

            // Try and create a control from the message handle.
            var control = Control.FromHandle(m.HWnd);

            // Exit out if we didn't manage to create a control.
            if (control == null)
                return false;

            // Exit out if the control is not the dock panel or a child control.
            if (!(control == _dockPanel || _dockPanel.Contains(control)))
                return false;

            // Update the mouse cursor
            CheckCursor();

            // Start drag.
            if (m.Msg == (int)WM.LBUTTONDOWN)
            {
                var hotSplitter = HotSplitter();
                if (hotSplitter != null)
                {
                    StartDrag(hotSplitter);
                    return true;
                }
            }

            // Stop events passing through if we're hovering over a splitter
            if (HotSplitter() != null)
                return true;

            // Stop all events from going through if we're dragging a splitter.
            if (_isDragging)
                return true;

            return false;
        }

        #endregion

        #region Event Handler Region

        private void DragTimer_Tick(object sender, EventArgs e)
        {
            if (_dockPanel.MouseButtonState != MouseButtons.Left)
            {
                StopDrag();
                return;
            }

            var difference = new Point(_initialContact.X - Cursor.Position.X, _initialContact.Y - Cursor.Position.Y);
            _activeSplitter.UpdateOverlay(difference);
        }

        #endregion

        #region Method Region

        private void StartDrag(DarkDockSplitter splitter)
        {
            _activeSplitter = splitter;
            Cursor.Current = _activeSplitter.ResizeCursor;

            _initialContact = Cursor.Position;
            _isDragging = true;

            _activeSplitter.ShowOverlay();
            _dragTimer.Start();
        }

        private void StopDrag()
        {
            _dragTimer.Stop();
            _activeSplitter.HideOverlay();

            var difference = new Point(_initialContact.X - Cursor.Position.X, _initialContact.Y - Cursor.Position.Y);
            _activeSplitter.Move(difference);

            _isDragging = false;
        }

        private DarkDockSplitter HotSplitter()
        {
            foreach (var splitter in _dockPanel.Splitters)
            {
                if (splitter.Bounds.Contains(Cursor.Position))
                    return splitter;
            }

            return null;
        }

        private void CheckCursor()
        {
            if (_isDragging)
                return;

            var hotSplitter = HotSplitter();
            if (hotSplitter != null)
                Cursor.Current = hotSplitter.ResizeCursor;
        }

        private void ResetCursor()
        {
            Cursor.Current = Cursors.Default;
            CheckCursor();
        }

        #endregion
    }
}


================================================
File: DarkUI/Win32/Native.cs
================================================
ï»¿using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace DarkUI.Win32
{
    internal sealed class Native
    {
        [DllImport("user32.dll")]
        internal static extern IntPtr WindowFromPoint(Point point);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        internal static extern IntPtr SendMessage(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    }
}



================================================
File: DarkUI/Win32/WindowsMessages.cs
================================================
ï»¿using System;

namespace DarkUI.Win32
{
    /// <summary>
    /// Windows Messages
    /// Defined in winuser.h from Windows SDK v6.1
    /// Documentation pulled from MSDN.
    /// </summary>
    internal enum WM : uint
    {
        /// <summary>
        /// The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
        /// </summary>
        NULL = 0x0000,

        /// <summary>
        /// The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
        /// </summary>
        CREATE = 0x0001,

        /// <summary>
        /// The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
        /// This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
        /// /// </summary>
        DESTROY = 0x0002,

        /// <summary>
        /// The WM_MOVE message is sent after a window has been moved. 
        /// </summary>
        MOVE = 0x0003,

        /// <summary>
        /// The WM_SIZE message is sent to a window after its size has changed.
        /// </summary>
        SIZE = 0x0005,

        /// <summary>
        /// The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
        /// </summary>
        ACTIVATE = 0x0006,

        /// <summary>
        /// The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
        /// </summary>
        SETFOCUS = 0x0007,

        /// <summary>
        /// The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
        /// </summary>
        KILLFOCUS = 0x0008,

        /// <summary>
        /// The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
        /// </summary>
        ENABLE = 0x000A,

        /// <summary>
        /// An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
        /// </summary>
        SETREDRAW = 0x000B,

        /// <summary>
        /// An application sends a WM_SETTEXT message to set the text of a window. 
        /// </summary>
        SETTEXT = 0x000C,

        /// <summary>
        /// An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
        /// </summary>
        GETTEXT = 0x000D,

        /// <summary>
        /// An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
        /// </summary>
        GETTEXTLENGTH = 0x000E,

        /// <summary>
        /// The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
        /// </summary>
        PAINT = 0x000F,

        /// <summary>
        /// The WM_CLOSE message is sent as a signal that a window or an application should terminate.
        /// </summary>
        CLOSE = 0x0010,

        /// <summary>
        /// The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
        /// After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
        /// </summary>
        QUERYENDSESSION = 0x0011,

        /// <summary>
        /// The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
        /// </summary>
        QUERYOPEN = 0x0013,

        /// <summary>
        /// The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
        /// </summary>
        ENDSESSION = 0x0016,

        /// <summary>
        /// The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
        /// </summary>
        QUIT = 0x0012,

        /// <summary>
        /// The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
        /// </summary>
        ERASEBKGND = 0x0014,

        /// <summary>
        /// This message is sent to all top-level windows when a change is made to a system color setting. 
        /// </summary>
        SYSCOLORCHANGE = 0x0015,

        /// <summary>
        /// The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
        /// </summary>
        SHOWWINDOW = 0x0018,

        /// <summary>
        /// An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
        /// Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
        /// </summary>
        WININICHANGE = 0x001A,

        /// <summary>
        /// An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
        /// Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
        /// </summary>
        SETTINGCHANGE = WININICHANGE,

        /// <summary>
        /// The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
        /// </summary>
        DEVMODECHANGE = 0x001B,

        /// <summary>
        /// The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
        /// </summary>
        ACTIVATEAPP = 0x001C,

        /// <summary>
        /// An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
        /// </summary>
        FONTCHANGE = 0x001D,

        /// <summary>
        /// A message that is sent whenever there is a change in the system time.
        /// </summary>
        TIMECHANGE = 0x001E,

        /// <summary>
        /// The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
        /// </summary>
        CANCELMODE = 0x001F,

        /// <summary>
        /// The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
        /// </summary>
        SETCURSOR = 0x0020,

        /// <summary>
        /// The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
        /// </summary>
        MOUSEACTIVATE = 0x0021,

        /// <summary>
        /// The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
        /// </summary>
        CHILDACTIVATE = 0x0022,

        /// <summary>
        /// The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
        /// </summary>
        QUEUESYNC = 0x0023,

        /// <summary>
        /// The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
        /// </summary>
        GETMINMAXINFO = 0x0024,

        /// <summary>
        /// Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
        /// </summary>
        PAINTICON = 0x0026,

        /// <summary>
        /// Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
        /// </summary>
        ICONERASEBKGND = 0x0027,

        /// <summary>
        /// The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
        /// </summary>
        NEXTDLGCTL = 0x0028,

        /// <summary>
        /// The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
        /// </summary>
        SPOOLERSTATUS = 0x002A,

        /// <summary>
        /// The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
        /// </summary>
        DRAWITEM = 0x002B,

        /// <summary>
        /// The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
        /// </summary>
        MEASUREITEM = 0x002C,

        /// <summary>
        /// Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
        /// </summary>
        DELETEITEM = 0x002D,

        /// <summary>
        /// Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
        /// </summary>
        VKEYTOITEM = 0x002E,

        /// <summary>
        /// Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
        /// </summary>
        CHARTOITEM = 0x002F,

        /// <summary>
        /// An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
        /// </summary>
        SETFONT = 0x0030,

        /// <summary>
        /// An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
        /// </summary>
        GETFONT = 0x0031,

        /// <summary>
        /// An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
        /// </summary>
        SETHOTKEY = 0x0032,

        /// <summary>
        /// An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
        /// </summary>
        GETHOTKEY = 0x0033,

        /// <summary>
        /// The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
        /// </summary>
        QUERYDRAGICON = 0x0037,

        /// <summary>
        /// The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
        /// </summary>
        COMPAREITEM = 0x0039,

        /// <summary>
        /// Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
        /// Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
        /// </summary>
        GETOBJECT = 0x003D,

        /// <summary>
        /// The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
        /// </summary>
        COMPACTING = 0x0041,

        /// <summary>
        /// WM_COMMNOTIFY is Obsolete for Win32-Based Applications
        /// </summary>
        [Obsolete]
        COMMNOTIFY = 0x0044,

        /// <summary>
        /// The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
        /// </summary>
        WINDOWPOSCHANGING = 0x0046,

        /// <summary>
        /// The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
        /// </summary>
        WINDOWPOSCHANGED = 0x0047,

        /// <summary>
        /// Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
        /// Use: POWERBROADCAST
        /// </summary>
        [Obsolete]
        POWER = 0x0048,

        /// <summary>
        /// An application sends the WM_COPYDATA message to pass data to another application. 
        /// </summary>
        COPYDATA = 0x004A,

        /// <summary>
        /// The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
        /// </summary>
        CANCELJOURNAL = 0x004B,

        /// <summary>
        /// Sent by a common control to its parent window when an event has occurred or the control requires some information. 
        /// </summary>
        NOTIFY = 0x004E,

        /// <summary>
        /// The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
        /// </summary>
        INPUTLANGCHANGEREQUEST = 0x0050,

        /// <summary>
        /// The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
        /// </summary>
        INPUTLANGCHANGE = 0x0051,

        /// <summary>
        /// Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
        /// </summary>
        TCARD = 0x0052,

        /// <summary>
        /// Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
        /// </summary>
        HELP = 0x0053,

        /// <summary>
        /// The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
        /// </summary>
        USERCHANGED = 0x0054,

        /// <summary>
        /// Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
        /// </summary>
        NOTIFYFORMAT = 0x0055,

        /// <summary>
        /// The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
        /// </summary>
        CONTEXTMENU = 0x007B,

        /// <summary>
        /// The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
        /// </summary>
        STYLECHANGING = 0x007C,

        /// <summary>
        /// The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
        /// </summary>
        STYLECHANGED = 0x007D,

        /// <summary>
        /// The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
        /// </summary>
        DISPLAYCHANGE = 0x007E,

        /// <summary>
        /// The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
        /// </summary>
        GETICON = 0x007F,

        /// <summary>
        /// An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
        /// </summary>
        SETICON = 0x0080,

        /// <summary>
        /// The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
        /// </summary>
        NCCREATE = 0x0081,

        /// <summary>
        /// The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
        /// The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
        /// </summary>
        NCDESTROY = 0x0082,

        /// <summary>
        /// The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
        /// </summary>
        NCCALCSIZE = 0x0083,

        /// <summary>
        /// The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
        /// </summary>
        NCHITTEST = 0x0084,

        /// <summary>
        /// The WM_NCPAINT message is sent to a window when its frame must be painted. 
        /// </summary>
        NCPAINT = 0x0085,

        /// <summary>
        /// The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
        /// </summary>
        NCACTIVATE = 0x0086,

        /// <summary>
        /// The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
        /// </summary>
        GETDLGCODE = 0x0087,

        /// <summary>
        /// The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
        /// </summary>
        SYNCPAINT = 0x0088,

        /// <summary>
        /// The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCMOUSEMOVE = 0x00A0,

        /// <summary>
        /// The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCLBUTTONDOWN = 0x00A1,

        /// <summary>
        /// The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCLBUTTONUP = 0x00A2,

        /// <summary>
        /// The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCLBUTTONDBLCLK = 0x00A3,

        /// <summary>
        /// The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCRBUTTONDOWN = 0x00A4,

        /// <summary>
        /// The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCRBUTTONUP = 0x00A5,

        /// <summary>
        /// The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCRBUTTONDBLCLK = 0x00A6,

        /// <summary>
        /// The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCMBUTTONDOWN = 0x00A7,

        /// <summary>
        /// The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCMBUTTONUP = 0x00A8,

        /// <summary>
        /// The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCMBUTTONDBLCLK = 0x00A9,

        /// <summary>
        /// The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCXBUTTONDOWN = 0x00AB,

        /// <summary>
        /// The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCXBUTTONUP = 0x00AC,

        /// <summary>
        /// The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
        /// </summary>
        NCXBUTTONDBLCLK = 0x00AD,

        /// <summary>
        /// The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
        /// </summary>
        INPUT_DEVICE_CHANGE = 0x00FE,

        /// <summary>
        /// The WM_INPUT message is sent to the window that is getting raw input. 
        /// </summary>
        INPUT = 0x00FF,

        /// <summary>
        /// This message filters for keyboard messages.
        /// </summary>
        KEYFIRST = 0x0100,

        /// <summary>
        /// The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
        /// </summary>
        KEYDOWN = 0x0100,

        /// <summary>
        /// The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
        /// </summary>
        KEYUP = 0x0101,

        /// <summary>
        /// The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
        /// </summary>
        CHAR = 0x0102,

        /// <summary>
        /// The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ã–) is generated by typing the dead key for the umlaut character, and then typing the O key. 
        /// </summary>
        DEADCHAR = 0x0103,

        /// <summary>
        /// The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
        /// </summary>
        SYSKEYDOWN = 0x0104,

        /// <summary>
        /// The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
        /// </summary>
        SYSKEYUP = 0x0105,

        /// <summary>
        /// The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key â€” that is, a character key that is pressed while the ALT key is down. 
        /// </summary>
        SYSCHAR = 0x0106,

        /// <summary>
        /// The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key â€” that is, a dead key that is pressed while holding down the ALT key. 
        /// </summary>
        SYSDEADCHAR = 0x0107,

        /// <summary>
        /// The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
        /// The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
        /// </summary>
        UNICHAR = 0x0109,

        /// <summary>
        /// This message filters for keyboard messages.
        /// </summary>
        KEYLAST = 0x0109,

        /// <summary>
        /// Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_STARTCOMPOSITION = 0x010D,

        /// <summary>
        /// Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_ENDCOMPOSITION = 0x010E,

        /// <summary>
        /// Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_COMPOSITION = 0x010F,
        IME_KEYLAST = 0x010F,

        /// <summary>
        /// The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
        /// </summary>
        INITDIALOG = 0x0110,

        /// <summary>
        /// The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
        /// </summary>
        COMMAND = 0x0111,

        /// <summary>
        /// A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
        /// </summary>
        SYSCOMMAND = 0x0112,

        /// <summary>
        /// The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
        /// </summary>
        TIMER = 0x0113,

        /// <summary>
        /// The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
        /// </summary>
        HSCROLL = 0x0114,

        /// <summary>
        /// The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
        /// </summary>
        VSCROLL = 0x0115,

        /// <summary>
        /// The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
        /// </summary>
        INITMENU = 0x0116,

        /// <summary>
        /// The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
        /// </summary>
        INITMENUPOPUP = 0x0117,

        /// <summary>
        /// The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
        /// </summary>
        MENUSELECT = 0x011F,

        /// <summary>
        /// The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
        /// </summary>
        MENUCHAR = 0x0120,

        /// <summary>
        /// The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
        /// </summary>
        ENTERIDLE = 0x0121,

        /// <summary>
        /// The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
        /// </summary>
        MENURBUTTONUP = 0x0122,

        /// <summary>
        /// The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
        /// </summary>
        MENUDRAG = 0x0123,

        /// <summary>
        /// The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
        /// </summary>
        MENUGETOBJECT = 0x0124,

        /// <summary>
        /// The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
        /// </summary>
        UNINITMENUPOPUP = 0x0125,

        /// <summary>
        /// The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
        /// </summary>
        MENUCOMMAND = 0x0126,

        /// <summary>
        /// An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
        /// </summary>
        CHANGEUISTATE = 0x0127,

        /// <summary>
        /// An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
        /// </summary>
        UPDATEUISTATE = 0x0128,

        /// <summary>
        /// An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
        /// </summary>
        QUERYUISTATE = 0x0129,

        /// <summary>
        /// The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
        /// </summary>
        CTLCOLORMSGBOX = 0x0132,

        /// <summary>
        /// An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
        /// </summary>
        CTLCOLOREDIT = 0x0133,

        /// <summary>
        /// Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
        /// </summary>
        CTLCOLORLISTBOX = 0x0134,

        /// <summary>
        /// The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
        /// </summary>
        CTLCOLORBTN = 0x0135,

        /// <summary>
        /// The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
        /// </summary>
        CTLCOLORDLG = 0x0136,

        /// <summary>
        /// The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
        /// </summary>
        CTLCOLORSCROLLBAR = 0x0137,

        /// <summary>
        /// A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
        /// </summary>
        CTLCOLORSTATIC = 0x0138,

        /// <summary>
        /// Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
        /// </summary>
        MOUSEFIRST = 0x0200,

        /// <summary>
        /// The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        MOUSEMOVE = 0x0200,

        /// <summary>
        /// The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        LBUTTONDOWN = 0x0201,

        /// <summary>
        /// The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        LBUTTONUP = 0x0202,

        /// <summary>
        /// The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        LBUTTONDBLCLK = 0x0203,

        /// <summary>
        /// The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        RBUTTONDOWN = 0x0204,

        /// <summary>
        /// The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        RBUTTONUP = 0x0205,

        /// <summary>
        /// The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        RBUTTONDBLCLK = 0x0206,

        /// <summary>
        /// The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        MBUTTONDOWN = 0x0207,

        /// <summary>
        /// The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        MBUTTONUP = 0x0208,

        /// <summary>
        /// The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        MBUTTONDBLCLK = 0x0209,

        /// <summary>
        /// The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
        /// </summary>
        MOUSEWHEEL = 0x020A,

        /// <summary>
        /// The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
        /// </summary>
        XBUTTONDOWN = 0x020B,

        /// <summary>
        /// The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        XBUTTONUP = 0x020C,

        /// <summary>
        /// The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
        /// </summary>
        XBUTTONDBLCLK = 0x020D,

        /// <summary>
        /// The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
        /// </summary>
        MOUSEHWHEEL = 0x020E,

        /// <summary>
        /// Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
        /// </summary>
        MOUSELAST = 0x020E,

        /// <summary>
        /// The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
        /// </summary>
        PARENTNOTIFY = 0x0210,

        /// <summary>
        /// The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
        /// </summary>
        ENTERMENULOOP = 0x0211,

        /// <summary>
        /// The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
        /// </summary>
        EXITMENULOOP = 0x0212,

        /// <summary>
        /// The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
        /// </summary>
        NEXTMENU = 0x0213,

        /// <summary>
        /// The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
        /// </summary>
        SIZING = 0x0214,

        /// <summary>
        /// The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
        /// </summary>
        CAPTURECHANGED = 0x0215,

        /// <summary>
        /// The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
        /// </summary>
        MOVING = 0x0216,

        /// <summary>
        /// Notifies applications that a power-management event has occurred.
        /// </summary>
        POWERBROADCAST = 0x0218,

        /// <summary>
        /// Notifies an application of a change to the hardware configuration of a device or the computer.
        /// </summary>
        DEVICECHANGE = 0x0219,

        /// <summary>
        /// An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
        /// </summary>
        MDICREATE = 0x0220,

        /// <summary>
        /// An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
        /// </summary>
        MDIDESTROY = 0x0221,

        /// <summary>
        /// An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
        /// </summary>
        MDIACTIVATE = 0x0222,

        /// <summary>
        /// An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
        /// </summary>
        MDIRESTORE = 0x0223,

        /// <summary>
        /// An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
        /// </summary>
        MDINEXT = 0x0224,

        /// <summary>
        /// An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
        /// </summary>
        MDIMAXIMIZE = 0x0225,

        /// <summary>
        /// An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
        /// </summary>
        MDITILE = 0x0226,

        /// <summary>
        /// An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
        /// </summary>
        MDICASCADE = 0x0227,

        /// <summary>
        /// An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
        /// </summary>
        MDIICONARRANGE = 0x0228,

        /// <summary>
        /// An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
        /// </summary>
        MDIGETACTIVE = 0x0229,

        /// <summary>
        /// An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
        /// </summary>
        MDISETMENU = 0x0230,

        /// <summary>
        /// The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
        /// The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
        /// </summary>
        ENTERSIZEMOVE = 0x0231,

        /// <summary>
        /// The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
        /// </summary>
        EXITSIZEMOVE = 0x0232,

        /// <summary>
        /// Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
        /// </summary>
        DROPFILES = 0x0233,

        /// <summary>
        /// An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
        /// </summary>
        MDIREFRESHMENU = 0x0234,

        /// <summary>
        /// Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_SETCONTEXT = 0x0281,

        /// <summary>
        /// Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_NOTIFY = 0x0282,

        /// <summary>
        /// Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
        /// </summary>
        IME_CONTROL = 0x0283,

        /// <summary>
        /// Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_COMPOSITIONFULL = 0x0284,

        /// <summary>
        /// Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_SELECT = 0x0285,

        /// <summary>
        /// Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_CHAR = 0x0286,

        /// <summary>
        /// Sent to an application to provide commands and request information. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_REQUEST = 0x0288,

        /// <summary>
        /// Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_KEYDOWN = 0x0290,

        /// <summary>
        /// Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
        /// </summary>
        IME_KEYUP = 0x0291,

        /// <summary>
        /// The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
        /// </summary>
        MOUSEHOVER = 0x02A1,

        /// <summary>
        /// The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
        /// </summary>
        MOUSELEAVE = 0x02A3,

        /// <summary>
        /// The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
        /// </summary>
        NCMOUSEHOVER = 0x02A0,

        /// <summary>
        /// The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
        /// </summary>
        NCMOUSELEAVE = 0x02A2,

        /// <summary>
        /// The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
        /// </summary>
        WTSSESSION_CHANGE = 0x02B1,
        TABLET_FIRST = 0x02c0,
        TABLET_LAST = 0x02df,

        /// <summary>
        /// An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
        /// </summary>
        CUT = 0x0300,

        /// <summary>
        /// An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
        /// </summary>
        COPY = 0x0301,

        /// <summary>
        /// An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
        /// </summary>
        PASTE = 0x0302,

        /// <summary>
        /// An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
        /// </summary>
        CLEAR = 0x0303,

        /// <summary>
        /// An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
        /// </summary>
        UNDO = 0x0304,

        /// <summary>
        /// The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
        /// </summary>
        RENDERFORMAT = 0x0305,

        /// <summary>
        /// The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
        /// </summary>
        RENDERALLFORMATS = 0x0306,

        /// <summary>
        /// The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
        /// </summary>
        DESTROYCLIPBOARD = 0x0307,

        /// <summary>
        /// The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
        /// </summary>
        DRAWCLIPBOARD = 0x0308,

        /// <summary>
        /// The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
        /// </summary>
        PAINTCLIPBOARD = 0x0309,

        /// <summary>
        /// The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
        /// </summary>
        VSCROLLCLIPBOARD = 0x030A,

        /// <summary>
        /// The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
        /// </summary>
        SIZECLIPBOARD = 0x030B,

        /// <summary>
        /// The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
        /// </summary>
        ASKCBFORMATNAME = 0x030C,

        /// <summary>
        /// The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
        /// </summary>
        CHANGECBCHAIN = 0x030D,

        /// <summary>
        /// The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
        /// </summary>
        HSCROLLCLIPBOARD = 0x030E,

        /// <summary>
        /// This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
        /// </summary>
        QUERYNEWPALETTE = 0x030F,

        /// <summary>
        /// The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
        /// </summary>
        PALETTEISCHANGING = 0x0310,

        /// <summary>
        /// This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
        /// This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
        /// </summary>
        PALETTECHANGED = 0x0311,

        /// <summary>
        /// The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
        /// </summary>
        HOTKEY = 0x0312,

        /// <summary>
        /// The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
        /// </summary>
        PRINT = 0x0317,

        /// <summary>
        /// The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
        /// </summary>
        PRINTCLIENT = 0x0318,

        /// <summary>
        /// The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
        /// </summary>
        APPCOMMAND = 0x0319,

        /// <summary>
        /// The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
        /// </summary>
        THEMECHANGED = 0x031A,

        /// <summary>
        /// Sent when the contents of the clipboard have changed.
        /// </summary>
        CLIPBOARDUPDATE = 0x031D,

        /// <summary>
        /// The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
        /// </summary>
        DWMCOMPOSITIONCHANGED = 0x031E,

        /// <summary>
        /// WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
        /// </summary>
        DWMNCRENDERINGCHANGED = 0x031F,

        /// <summary>
        /// Sent to all top-level windows when the colorization color has changed. 
        /// </summary>
        DWMCOLORIZATIONCOLORCHANGED = 0x0320,

        /// <summary>
        /// WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
        /// </summary>
        DWMWINDOWMAXIMIZEDCHANGE = 0x0321,

        /// <summary>
        /// Sent to request extended title bar information. A window receives this message through its WindowProc function.
        /// </summary>
        GETTITLEBARINFOEX = 0x033F,
        HANDHELDFIRST = 0x0358,
        HANDHELDLAST = 0x035F,
        AFXFIRST = 0x0360,
        AFXLAST = 0x037F,
        PENWINFIRST = 0x0380,
        PENWINLAST = 0x038F,

        /// <summary>
        /// The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
        /// </summary>
        APP = 0x8000,

        /// <summary>
        /// The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
        /// </summary>
        USER = 0x0400,

        /// <summary>
        /// An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
        /// </summary>
        CPL_LAUNCH = USER + 0x1000,

        /// <summary>
        /// The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
        /// </summary>
        CPL_LAUNCHED = USER + 0x1001,

        /// <summary>
        /// WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
        /// </summary>
        SYSTIMER = 0x118,

        /// <summary>
        /// The accessibility state has changed.
        /// </summary>
        HSHELL_ACCESSIBILITYSTATE = 11,

        /// <summary>
        /// The shell should activate its main window.
        /// </summary>
        HSHELL_ACTIVATESHELLWINDOW = 3,

        /// <summary>
        /// The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
        /// If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
        /// </summary>
        HSHELL_APPCOMMAND = 12,

        /// <summary>
        /// A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
        /// </summary>
        HSHELL_GETMINRECT = 5,

        /// <summary>
        /// Keyboard language was changed or a new keyboard layout was loaded.
        /// </summary>
        HSHELL_LANGUAGE = 8,

        /// <summary>
        /// The title of a window in the task bar has been redrawn.
        /// </summary>
        HSHELL_REDRAW = 6,

        /// <summary>
        /// The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
        /// </summary>
        HSHELL_TASKMAN = 7,

        /// <summary>
        /// A top-level, unowned window has been created. The window exists when the system calls this hook.
        /// </summary>
        HSHELL_WINDOWCREATED = 1,

        /// <summary>
        /// A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
        /// </summary>
        HSHELL_WINDOWDESTROYED = 2,

        /// <summary>
        /// The activation has changed to a different top-level, unowned window.
        /// </summary>
        HSHELL_WINDOWACTIVATED = 4,

        /// <summary>
        /// A top-level window is being replaced. The window exists when the system calls this hook.
        /// </summary>
        HSHELL_WINDOWREPLACED = 13
    }
}



================================================
File: PandaObfuscator/App.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>


================================================
File: PandaObfuscator/PandaObfuscator.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{1F2982B5-80FC-408E-8CE6-1742DD230FD7}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>PandaObfuscator</RootNamespace>
    <AssemblyName>PandaObfuscator</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Core">
      <HintPath>..\Core\bin\Debug\Core.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="addForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="addForm.Designer.cs">
      <DependentUpon>addForm.cs</DependentUpon>
    </Compile>
    <Compile Include="mainForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="mainForm.Designer.cs">
      <DependentUpon>mainForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <EmbeddedResource Include="addForm.resx">
      <DependentUpon>addForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="mainForm.resx">
      <DependentUpon>mainForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\DarkUI\DarkUI.csproj">
      <Project>{F19472F5-8C44-4C51-A8A0-B9DE5F555255}</Project>
      <Name>DarkUI</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: PandaObfuscator/Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PandaObfuscator
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new mainForm());
        }
    }
}



================================================
File: PandaObfuscator/addForm.Designer.cs
================================================
ï»¿namespace PandaObfuscator
{
    partial class addForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(addForm));
            this.darkSectionPanel1 = new DarkUI.Controls.DarkSectionPanel();
            this.darkButton2 = new DarkUI.Controls.DarkButton();
            this.darkButton1 = new DarkUI.Controls.DarkButton();
            this.darkListView1 = new DarkUI.Controls.DarkListView();
            this.darkSectionPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // darkSectionPanel1
            // 
            this.darkSectionPanel1.Controls.Add(this.darkButton2);
            this.darkSectionPanel1.Controls.Add(this.darkButton1);
            this.darkSectionPanel1.Controls.Add(this.darkListView1);
            this.darkSectionPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.darkSectionPanel1.Location = new System.Drawing.Point(0, 0);
            this.darkSectionPanel1.Name = "darkSectionPanel1";
            this.darkSectionPanel1.SectionHeader = null;
            this.darkSectionPanel1.Size = new System.Drawing.Size(388, 345);
            this.darkSectionPanel1.TabIndex = 0;
            // 
            // darkButton2
            // 
            this.darkButton2.Location = new System.Drawing.Point(301, 310);
            this.darkButton2.Name = "darkButton2";
            this.darkButton2.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton2.Size = new System.Drawing.Size(75, 23);
            this.darkButton2.TabIndex = 2;
            this.darkButton2.Text = "Ok";
            this.darkButton2.Click += new System.EventHandler(this.darkButton2_Click);
            // 
            // darkButton1
            // 
            this.darkButton1.Location = new System.Drawing.Point(12, 310);
            this.darkButton1.Name = "darkButton1";
            this.darkButton1.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton1.Size = new System.Drawing.Size(75, 23);
            this.darkButton1.TabIndex = 1;
            this.darkButton1.Text = "Cancel";
            this.darkButton1.Click += new System.EventHandler(this.darkButton1_Click);
            // 
            // darkListView1
            // 
            this.darkListView1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.darkListView1.Location = new System.Drawing.Point(1, 25);
            this.darkListView1.Name = "darkListView1";
            this.darkListView1.Size = new System.Drawing.Size(386, 279);
            this.darkListView1.TabIndex = 0;
            this.darkListView1.Text = "darkListView1";
            // 
            // addForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 345);
            this.Controls.Add(this.darkSectionPanel1);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "addForm";
            this.Text = "PandaSettings";
            this.Load += new System.EventHandler(this.addForm_Load);
            this.darkSectionPanel1.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private DarkUI.Controls.DarkSectionPanel darkSectionPanel1;
        private DarkUI.Controls.DarkButton darkButton2;
        private DarkUI.Controls.DarkButton darkButton1;
        private DarkUI.Controls.DarkListView darkListView1;
    }
}


================================================
File: PandaObfuscator/addForm.cs
================================================
ï»¿using Core;
using DarkUI.Controls;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PandaObfuscator
{
    public partial class addForm : Form
    {
        PandaContext pandaContext;
        mainForm main;
        public addForm(PandaContext pandaContext, mainForm mainForm)
        {
            this.main = mainForm;
            this.pandaContext = pandaContext;
            InitializeComponent();
        }

        private void addForm_Load(object sender, EventArgs e)
        {
            foreach (PandaProtection p in pandaContext.register.getRegistredModules())
            {
                try
                {
                    if (main.darkListView1.Items.Single(itm => itm.Tag == p.Id) != null) continue;
                }
                catch { }
                
                if (pandaContext.getIGModules().Contains(p)) continue;
                DarkListItem darkListItem = new DarkUI.Controls.DarkListItem(p.Name);
                darkListItem.Tag = p.Id;
                darkListView1.Items.Add(darkListItem);
            }
        }

        private void darkButton2_Click(object sender, EventArgs e)
        {
            try
            {
                DarkListItem darkListItem = darkListView1.Items[darkListView1.SelectedIndices[0]];
                main.darkListView1.Items.Add(darkListItem);
                this.Close();
            }
            catch { }
        }

        private void darkButton1_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}



================================================
File: PandaObfuscator/addForm.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B30AAAAFAAAAAAAAAAAAAAAAAgICAAAAADE2OjvRkpyg/6m1uf/S3uL/4+7y/+Lt8f/i7fH/4+7y/9vk
        5/+coaP/cHR1/52jpf/M1NX/d2mh/5h39v+efP//jm/h/4qGn//l7/H/gISG/zY2N/9GRkb/Ojs7/4iM
        jv/Q19n/SEpK7AAAAE4AAAAAAAAAAAUGBgAFBQUHAAAAPxYXGL10fH//qLS4/8DM0P/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+bx9f/m8fX/6vX4/6mut/+CZsn/nnz//518//+aePv/ZVqY/9Xe3//Z4+b/pqyt/52i
        pP+/xsj/4+3w/+fy9v+lq63/DxAQsgAAAAAAAAAAAQEBAAAAADwxNTbpipSX/6ezt/+3w8f/2uXq/+Xw
        9P/n8fX/5u/z/+bx9P/m8fX/4+7y/+Lt8f/m8fX/paq1/35jzf+TdPr/gWbr/04/y/83N4X/1N3d/+Tv
        8//m8fX/5/L1/+Xw9P/i7fH/4+/z/83V1/8tLi/fAAAAAAAAAAABAQEAAAAARFtiZPasuLz/rrq+/9vm
        6v/l7/P/usDC/3yAgf9eYWL/bnFy/5+jpf/a4+b/4+7y/+bx9f+wt73/LSl//ycjkv8YF4n/DQ2D/09R
        gv/f6er/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/j7vL/1+Hk/zs9Pu4AAAAAAAAAAAAAAAAAAAAxTFFT7Ki0
        uP+9yMz/5O/y/o6Sk/5ISUn/nZ2d/3V1df8EBAT/BAQE/2BjZP/d5un/4+7y/9nj5v+ttbv/p6+1/6Co
        sP+coqz/v8jM/+Tu8v/l8PT/5/L2/+fy9v/m8fX/4+7y/+Pu8v/U3N//NTc46wAAAAAAAAABAAAAKgAA
        AH0mKSrwnams/8rV2f+9xcf+QkND/s/Pz//39/f/lpaW/wcHB/8AAAD/CQkJ/6Gnqf/m8fX/4+7y/+fy
        9v/S2tz/z9fZ/+jz9v/l8PT/5O7y/7vBxP+FiYr/dnt8/6Knqf/b5Oj/5vH1/8TLzv8kJSXWAAAACAAA
        AGwAAADfAAAA/wkJCf+Bi47/0d3h/4eMjf9zc3P/xMTE/0ZGRv8JCQn/CAgI/wgICP8AAAD/aWxt/+bw
        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
        d/xBQ0PfDQ4OjQAAADMAAACQAAAA4gAAAO8AAADVAAAAgAAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAICAgAAAAA6DxARnSQnJ74uMTPQNTY30y0vL8IbGxypBwgIfgAAAE4AAAAZAAAAAwIC
        Ak0ICQmHAgICYQAAACQAAAADAAAAAAAAAAYAAAAkAAAANQAAABoAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACwAAABQAAAAWAAAADQAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AAAA+AAAAfAA
        AAHwAAAA8AAAAOAAAADgAAAA4AAAAOAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAA
        AAAAAAAAgAAAAMAAAADgAAAA/gAAAf4AAAP+AAEH/wP//////////////////////////////////ygA
        AAAwAAAAYAAAAAEAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAABTAQEBqRITFOkwMzT7WF5g+llfYfoREhL6TU1N+ltb
        W/pZWVn6WVlZ+llZWfpZWVn6W1tb+i0tLfqanZ76z9PV+srP0PrL0NH6xMjK+qqxs/qJjo/6VVdX+hka
        GvoBAQH6CgoK+k1NTfpaWlr6WVlZ+llZWfpZWVn6WVlZ+lxcXPonJyf9AAAAigAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAPAcICKouMTLxYmls/42Xmv+jr7P/rLi8/6Ku
        sv8lKCn/Nzc3/1xcXP9ZWVn/WVlZ/1lZWf9ZWVn/WFhY/yorK/+9wcP/6fP3/+Xv8//l7/P/5fD0/+fy
        9v/o8vX/4ejr/8PIyf9VV1j/HBwc/1paWv9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/1FRUf8RERHsAAAAPAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAB4GBka52tzdf+lsbT/rrq+/6m1
        uv+msrb/rbm9/8TP0/9rcHL/HR0d/1paWv9ZWVn/WVlZ/1lZWf9aWlr/U1NT/zI0NP/S2t3/5O/z/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3y/+32+f9rbnD/Ly8v/1xcXP9ZWVn/WVlZ/1lZWf9ZWVn/XFxc/ysr
        K/8AAAClAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAI4sLzD4jJaZ/625
        vf+otLj/pbG1/625vf/G0dX/3ejs/+fy9v/Iz9H/JSYm/z8/P/9cXFz/WVlZ/1lZWf9cXFz/PT09/0xO
        T//i6u3/5O/0/+ny9f/m8fP/6PL0/+Xw9P/i7fH/4u3x/+bu8P9SVFX/NjY2/1xcXP9ZWVn/WVlZ/1lZ
        Wf9cXFz/R0dH/wkJCeYAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUAAAAAbSot
        LvmZpKj/rLm9/6ezt/+lsbX/usbK/9zo7P/k7/P/4+7y/+Lt8f/n8fX/hIeJ/xcXF/9SUlH/XV1d/1xc
        XP9YWFj/GRkZ/4eLjP/t9/r/0tnZ/46Rlf9vbn//e3yD/8XLy//n8fX/4u3x/+Xt7/9PUlP/ODg4/1xc
        XP9ZWVn/WVlZ/1paWv9UVFT/FRUV/wAAAN0AAAA6AAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAdCwwM1YOMj/+uur//p7O2/6aytv+2wsb/4ezw/+Pu8v/i7fH/4u3x/+Lt8f/j7vL/2+Ll/1ZY
        WP8WFhb/NDQ0/0NCQv8lJSX/QEJD/9fd4P/Fysz/XVdx/3RbsP+Pbt//gWXF/15Vd/+8wsL/5vH0/+ny
        9f9gY2T/OTk5/11dXf9ZWVn/W1tb/1paWv8iIiL/ODk6/0JDRP8BAQHPAAAAKQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAYBAQEt1NZW/6ns7f/qLS4/6aytv/S3eH/5O/z/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/5O/z/9zk5v+Pk5T/T1FS/zM1Nv9hZGX/zdTW/+Ho6f9kYHb/iGrS/6F+//+ce///oH7//4xt
        1v9kYHb/3ebn/+n09/+RlZf/HBwc/05OTv9YWFj/TExL/yMjI/8/QUL/ztPV/9HX2f85Ozv/AAAAnwAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAIDA8RPVVf/qbW5/6aytv/AzND/4+7y/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/p8vb/5O3w/9zl6P/l7/L/6/b5/6Sqqv9iT5P/oX7//5t6
        //+bev//m3r//6F+//9gTor/sbi3/+jz9//X3+H/YWRl/zEyMv81Njb/Pj9A/3Bzc//R19n/5/H1/+jy
        9v+wtLb/ERIS7QAAAEwAAAAAAAAAAAAAAAAAAAAACAgJAAgJCQkCAwM/AAEBlhobHOtpcHP/qbW5/6Wx
        tf+rt7v/2uXp/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/i7fH/6fT2/4OG
        kP98X8H/nn3//5t6//+bev//nXv//6F+//9MPJ3/jpOX/+rz9v/j7vL/5O3w/9LY2v/L0tT/2+Hj/+jx
        9P/k7/P/4u3x/+Lt8v/j6+7/RkhJ/wAAAJsAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAE4KCwvrTVNV/5Se
        ov+suLz/prK2/7C8wP/W4eX/4+7y/+Lt8f7i7fH/4+7y/+Tv8//j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/6fT2/4OFkP+BY8X/pIH//6F+//+fff7/knTz/1tJ0P8REID/jZKV/+rz9v/i7fH/4u3x/+Tv
        8//l8PT/4+7y/+Lt8f/i7fH/4u3x/+Lt8f/p8/b/en19/wAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGAvMjP8qra6/6q3u/+msrb/rrq+/9rm6v/k7/P/4+7y/+jy9v/l7vL/2+Tm/9Ta3P/b5Ob/5+/y/+nz
        9v/j7vL/4u3x/+Lt8f/i7fH/6fX4/4uQlv9PPqX/alXg/2FO1v9HO8X/JSGv/xMTqf8PDnn/oKap/+n0
        9//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/q9Pf/lZuc/wECAt8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFk1OTr6qLO3/6ezt/+msrb/ztnd/+Tv8//l7/P/4Ojq/5+jpP9TVVb/MDIy/yEi
        I/8yNDX/Wlxc/4+TlP/a4uT/5O/z/+Lt8f/i7fH/6PP3/6Knpv8QEFz/DAx2/woKc/8HCHX/CQp4/wsK
        e/8iI1r/xszK/+Xw9P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/p9Pj/oKiq/wUF
        BeUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQkJyfxoq2x/6ezt/+rt7v/3ejs/+Xw9P/S2Nv/VVdX/xwd
        Hf9oaGj/k5OT/zk5Of8AAAD/AAAA/wQEBP9RU1P/1tzf/+Tv8//i7fH/5O7y/9Xe4P+aoaL/lJua/46V
        lP+Eio3/foOJ/32DiP+coqX/4+3w/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/q9Pf/mJ6g/wIDA+IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8SFBTokJue/6i0uf+zv8P/4u3x/9/o
        6v1SVFX8Gxsb/6ysrP/7+/v//////6+vr/8JCQn/AAAA/wAAAP8AAAD/cXR1/+fw8//i7fH/4u3x/+Pv
        8//p9Pj/6fT4/+35/P/v+vz/6/X3/+r1+P/o8/f/4u3x/+Lt8f/l8PT/6fL2/+bu8f/j7fD/5u/y/+jy
        9v/j7vL/4u3x/+Lt8f/q8/b/hYiJ/wAAANUAAAAAAAAAAAAAAAAAAAAgAAAAbgAAAK0AAAD2Z29x/au4
        vP+7xsr/6vT4/6SqrP8VFRX/o6Oj///////7+/v/2NjY/2VlZf8BAQH/AAAA/wAAAP8AAAD/HR4f/8nQ
        0v/l8PT/4u3x/+Lt8f/i7fH/5e/y/8DGyP+3vb7/4+3x/+Lt8f/i7fH/4u3x/+jx9P/Kz9H/fH+A/1FT
        VP9DRkb/V1la/5ugof/d5Of/5fDz/+Ht8f/o8vX/YmVm/wAAALUAAAAAAAAABwAAAFsAAADOAAAA/AAA
        AP8AAAD/OT0+/6i0uP++ys7/6/T3/2dqa/9FRUX/9PT0/+Pj4/90dHT/Hx8f/wICAv8AAAD/AAAA/wAA
        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
        AP8AAAD/AAAA/4CFhv/p9Pj/4u3x/+Tv8//o8vb/6fP2/+ny9v/n8vX/4+7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/c5Ob/XF5f/wMEBP8HBwf/jo6O/+Dg
        4P/U1NT/qqqq/15eXv8MDAz/AAAA/wAAAPsAAACFAAAAAwAAAAAAAACCAAAA/AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/Ghsb/7vBw//m8fT/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/3ubo/4qN
        jv8tLi//FxcX/ywtLf8lJSb/P0FC/0VISf8DAwT/AAAA/wAAAP8AAADmAAAAMwAAAAAAAAAoAAAA0gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8PDw//j5OU/+bw8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+jy9f/V3N//t7/B/7C2uP+5wML/ub6//y0uL/8AAAD/AAAA/wAAAP8AAAD/AAAAhgAA
        AAAAAAAAAAAAVwAAAO0AAAD/AAAA/wAAAP8AAAD/AAAA/xUWFv+Pk5T/5u/y/+Lt8v/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/5/L2/+nz9//n7/H/VVhY/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAwAAAABEAAAAAAAAABAAAAFUAAADHAAAA+wQFBf8VFxf/PkJE/46Xmv/a5Oj/5fD0/+Pu
        8v/j7vL/5fD0/+bx9f/k7/P/3ent/9fi5v7h7PD+4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Lt8f/i7fH/4u3x/+fw8/+MkJL/CAgI/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAzAAAABoAAAAAAAAAAAAAAAAAAAAZAAAAsTI1Nv+WoaT/r7zA/6+8
        wP+yvsL/ztre/97p7f/d6ez/ztfa/7i/wf+9yMz/rLi8/8DLz//j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/6fP2/6On
        qP8UFBX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuwAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAQAwN
        Ds4xNTb7TVNV/2JpbP9qcnT/anJ0/1phY/8/Q0X/KSwt/3F5fP+otLj/q7e7/9zn6//j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5O/z/+Pu8f/X4ub/4u3x/+Lt8f/i7fH/4u3x/+Hs
        8P/p8/b/v8PE/yYnJ/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAjwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAB0AAABdAAAAkAAAAKACAgKfAgICnQAAAJAAAADPODw9/6i0uf+msrb/vsrO/+Tv
        8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lu8v/o8vb/1dve/7bAw/3Ez9P/5O/z/+Lt
        8f/i7fH/4u3x/+jx9f+2u7z/Kywt/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADwAAAAQgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgMDQ3ZgIqN/6y4
        vP+lsrb/z9re/+Tv8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5vH1/+Ts7v+mqqv/SkxN/pSf
        o/3N2d3/5O/z/+Lt8f/k7/P/6PH0/6Glpv8fICD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACWAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHE0ODn+p7S4/6ezt/+ns7f/1+Lm/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+bx9f/n8PT/v8XG/1td
        Xf8MDAz/QkdI/6m2uv/M19v/5vH1/+nz9v/b4uT/hIaH/xQVFf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAMcAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACAMDA7FudXj/sL3B/6i0uP+ns7f/1ODk/+Xw9P/k7/P/5vD0/+fy9v/q9Pf/4+rt/7/F
        x/9ucXL/GRka/QAAAM4AAADkcHh7/7K+w//Ez9P/1tze/46Rk/86Ozz+BgYGxwAAAIkAAADmAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD6AAAAuQAAADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEgMEBM9VW17/lqGl/5+rrv+lsbX/wszQ/97l6P/W3+L/x87Q/66z
        tP+Giov/SUpL/xUWFvoBAQHaAAAAggAAADAAAADHRElK/211eP9NUlT/Kyws9wUFBdEAAACAAAAAHwAA
        AAIAAABQAAAAvgAAAOkAAADzAAAA6wAAAMIAAABsAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAG8EBATOFBYW6SMlJvQwMzT8MjU2/zc4
        OP4sLi73GRsb7Q0ODt0DAwO6AAAAkQAAAF0AAAAjAAAAAwAAAAEAAABOAgICswIDA78AAACXAAAAVgAA
        ABoAAAACAAAAAAAAAAAAAAABAAAADwAAADIAAABIAAAANAAAABEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAWAAAAMwAA
        AEYAAABcAAAAaQAAAGIAAABPAAAAOAAAACMAAAALAAAAAgAAAAAAAAAAAAAAAAMDAwADAwMBAQEBCAAA
        AAoAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/4AAAAAEAAP+AAAAAAQAA/wAAAAABAAD+AAAAAAMAAP4AAAAAAwAA/AAAAAAB
        AAD8AAAAAAAAAP4AAAAAAAAA+AAAAAAAAAD4AAAAAAAAAPgAAAAAAAAA+AAAAAAAAAD4AAAAAAAAAPgA
        AAAAAAAA4AAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAD
        AAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAACAAAAAAAAAAIAA
        AAAAAAAA4AAAAAAAAADwAAAAAAEAAPAAAAAAAQAA/+AAAAABAAD/4AAAAAMAAP/AAAAABwAA/8AAAAAP
        AAD/wAAAMB8AAP/gAeH//wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAAoAAAAcAAAAOAAAAABACAAAAAAAADE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAABlAAAAvAAAAPAAAADyAAAA8gAAAPIAAADyAAAA8gQE
        BPIGBwfyAAAA8gAAAPI8PDzyaGho8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZ
        WfJZWVnyWVlZ8llZWfJZWVnyaGho8ikpKfIAAADyOz4/8pmen/KWnaDyfIKF8mlucPJ9g4XyhYuO8nuC
        hPJ9g4byeX+B8m50dvJTV1fyNDc48hwdHfIJCQnyAAAA8gAAAPIAAADyAAAA8gAAAPIAAADyAAAA8gAA
        APIAAADyAAAA8gAAAPJERETyZWVl8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZ
        WfJZWVnyWVlZ8llZWfJbW1vyYWFh8hUVFfIAAADyAAAA5QAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAYwAAALYAAAD/AAAA/wAA
        AP8AAAD/AAAA/x8hIv9AREb/Y2ps/4CIjP+yvsL/X2Zp/wAAAP8AAAD/Kioq/2pqav9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/2dnZ/8mJib/AAAA/36E
        h/////////////////////////////////////////////////////////////X////l7/P/097h/663
        u/+Hjo//TU9Q/wABAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8UFBT/ZGRk/1tbW/9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/ZGRk/09PT/8AAAD/AAAA/wAA
        AKIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABhAAAA5QAAAP8AAAD/AAAA/wQEBP85PT//ZGtt/5Gcn/+yv8P/wc/T/8bU2f/AztL/zdzh/5Oe
        ov8AAAD/AAAA/wkJCf9aWlr/X19f/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1paWv9nZ2f/ISEh/wAAAP98gYT//////+Hs8P/i7fH/4+7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Tv8//o9Pj/7vr///X////////////////////N1tn/fYGD/zk7O/8AAAD/AAAA/wAA
        AP8AAAD/OTk5/2xsbP9YWFj/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WFhY/21tbf8zMzP/AAAA/wAAAP8AAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE0AAADTAAAA/wAAAP8AAAD/Njo7/3J6ff+bpqr/v83R/8bV
        2f+7yM3/rbq+/6i0uP+ns7f/p7O3/6m1uf/BztP/MTQ1/wAAAP8AAAD/QEBA/2hoaP9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9cXFz/YGBg/xAPD/8AAAD/maCj////
        ///i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Ds
        8P/k8PT/+//////////7////0NTV/0NHSP8AAAD/AQEB/1FRUf9iYmL/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WFhY/2FhYf9gYGD/CQkJ/wAAAP8AAAC6AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAAKkAAAD/AAAA/wAA
        AP9MUlP+k52h/8DO0v/G1dn/t8XJ/6m1uf+msrb/p7O3/6ezt/+ns7f/p7O3/6ezt/+ksLT/wtHV/2Zv
        cv8AAAD/AAAA/ykpKf9ra2v/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/Xl5e/1lZWf8AAAD/AAAA/8TO0v/8////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7fH/8Pz///////8/QkP/AAAA/xUV
        Ff9kZGT/Wlpa/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9paWn/JSUl/wAAAP8AAAD/AAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAWgAAAPEAAAD/AAAA/y8yM/+eqa3/ydfc/77M0P+ptbn/prK2/6ezt/+ns7f/p7O3/6ez
        t/+ns7f/p7O3/6CssP+bp6v/oq6y/7zJzf+2wcX/BgYG/wAAAP8JCQn/XV1d/19fX/9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/2JiYv9SUlL/AAAA/w8REf/i7vP/8Pz//+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//H+///f6/D/ERIS/wAAAP8sLCz/ampq/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1hYWP9nZ2f/TExM/wAAAP8AAAD/AAAAzwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkgAAAP8AAAD/AAAA/05TVf/Bz9T/wtDV/6ay
        tv+msrb/p7O3/6ezt/+ns7f/p7O3/6ezt/+otLj/oKyw/5uorP+tub3/xM/T/9fi5v/j7vL//////2Fn
        af8AAAD/AAAA/z4+Pv9tbW3/V1dX/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1hY
        WP9paWn/PT09/wAAAP81ODn/+f///+jz+P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/4////zdba/wUGBv8AAAD/QkJC/2dn
        Z/9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9aWlr/bm5u/yEh
        If8AAAD/AAAA/wAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAA
        AP8AAAD/ERMT/3+Ii//H1dn/s7/E/6Sws/+ns7f/p7O3/6ezt/+ns7f/p7O3/6ezt/+hrbH/maaq/6q3
        u//M19v/5fD0/+75/f/r9vr/5O/z//j+///c5un/BgYG/wAAAP8KCgr/Xl5e/2FhYf9YWFj/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/a2tr/x0dHf8AAAD/VVpb///////j7/P/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH//////6Ssr/8AAAD/AAAA/0hISP9lZWX/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9YWFj/ampq/0BAQP8AAAD/AAAA/wAAAL4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAP8AAAD/Jigp/7C8wP/L2t//qbW5/6Wxtf+ns7f/p7O3/6ez
        t/+ns7f/qLS4/6Ovs/+bp6v/qbW5/8XQ1P/k7/P/7/r+/+bx9f/h7PD/4u3x/+Lt8f/h7vP//////2Bm
        af8AAAD/AAAA/yoqKv9tbW3/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9YWFj/ZmZm/09P
        T/8AAAD/AAAA/5efof//////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7vH/5/L2/+34/P/p9fn/4+7y/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//////+fp6n/AAAA/wAAAP9JSUn/ZGRk/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9YWFj/Y2Nj/19fX/8FBQX/AAAA/wAA
        APoAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoQAAAP8AAAD/LDAx/7zK
        zv/AztL/pK+z/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/56qrv+hrbH/xdDU/+Tv8//v+v7/5/L2/+Hs
        8P/i7fH/4u3x/+Lt8f/i7fH/4ezw//T7/f/i6ez/DQ4O/wAAAP8AAAD/VFRU/2hoaP9XV1f/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/2lpaf8XFxf/AAAA/w0ODv/j8fX/8v3//+Lt8f/i7fH/3+vv/+fy
        9v////////////r////m8vT/8f3/////////////5/L2/9/r7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f//////maGk/wAAAP8AAAD/S0tL/2NjY/9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9YWFj/XFxc/21tbf8iIiL/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAATQAAAP8AAAD/Jykq/7/N0f+8ys7/o6+z/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/52p
        rf+ptbn/2uXp//D7///o8/f/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f7PD//////56o
        rP8AAAD/AAAA/xkZGf9qamr/ZWVl/1hYWP9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2xsbP9JSUn/AAAA/wAA
        AP9AQ0T//////+Xx9v/h7PD/4Ozw////////////sLm5/2BnYv8rMiT/ERcI/xkhD/9KUkX/nqan////
        ///2////3urv/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////5KZnP8AAAD/AAAA/0xMTP9jY2P/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/2tra/8vLy//AAAA/wAAAP8AAAD/AAAA0wAA
        ABwBAQEAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOwAAAD/CQoK/7G9wv/AztL/o6+z/6ez
        t/+ns7f/p7O3/6ezt/+ns7f/qLS4/52prf+rt7v/5O/z/+75/f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+n0+P//////MDM0/wAAAP8AAAD/HR0d/2BgYP9sbGz/Xl5e/1lZ
        Wf9ZWVn/WFhY/2RkZP9jY2P/Dw8P/wAAAP8AAAD/rri8///////f6u7/5O/0///////M1Nb/PEI4/wAA
        AP8AAAv/KhlW/1Y9k/9GMHn/AAAJ/wAAAP9NU0v//P////3////e6/D/4u3x/+Lt8f/i7fH/4u3x////
        //+psbT/AAAA/wAAAP9QUFD/YmJi/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2xs
        bP9LS0v/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADrAQEBNAABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGQAAAD/CgsL/4aQk//G1Nn/pLC0/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/6CssP+ksLT/4Ozw/+34
        /P/h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6+///////9DY
        2v8AAAD/AAAA/wAAAP8JCQn/PDw8/2BgYP9nZ2f/aGho/2xsbP9oaGj/Hh4e/wAAAP8AAAD/REpM////
        ///l8fX/5PD0//////+vtrj/AAAA/wAAAP9sUqr/qYX//7aQ//+3kP//upL//6yJ//9tV6T/AAAA/ycu
        Jf/o7/L/+////9/q7//i7fH/4u3x/+Hs8P/9////v8jM/wAAAP8AAAD/Wlpa/15eXv9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2ZmZv9bW1v/BwcH/wAAAP8AAAD/LC8x/wsNDf8AAAD/AAAA/wAA
        APkAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnAAAA/yYoKf/O3OH/rru//6axtf+ns7f/p7O3/6ez
        t/+ns7f/p7O3/6azt/+dqq7/z9re//D7///h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Dt8v//////yc/Q/x4gIf8AAAD/AAAA/wAAAP8NDQ3/ISEh/ykp
        Kf8sLCz/ERER/wAAAP8AAAD/NDg5//D09v/1+/3/3uvw//////+lrKz/AAAA/xsUM/+cfO3/u5P//6OA
        //+bev//mnn//5l5//+if///wJb//4xu1/8AAAD/LzUv///////r9vn/4ezw/+Lt8f/i7fH/8/7//9nm
        6v8ICAj/AAAA/1NTU/9nZ2f/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2dnZ/9lZWX/Dw8P/wAA
        AP8AAAD/MjY4///////Cycz/AAAA/wAAAP8AAAD/AAAA1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAA6gAA
        AP8DAwP/b3d6/9Pi5/+rt7v/pbG1/6ezt/+ns7f/p7O3/6ezt/+fq6//tsLG/+v2+v/k7/P/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/4Ozw////
        ///j6+3/YGNk/wICAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/PD4///L7/P//////2+jt//3/
        ///U29//AAAA/yUaSf+3kv//sIr//5l4//+bev//m3r//5t6//+bev//mnr//5p5//+/lv//blW5/wAA
        AP+Ejon//////+Ds8f/i7fH/4u3x/+by9//7////NTg5/wAAAP8hISH/bGxs/2FhYf9YWFj/WVlZ/1lZ
        Wf9XV1f/XV1c/2xsbP9hYWH/Hh4e/wAAAP8AAAD/LjIz//f9///9/////////52kpv8AAAD/AAAA/wAA
        AP8AAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACMAAADnAAAA/wAAAP9udnj/ytnd/6+7v/+lsbT/p7O3/6ez
        t/+ns7f/m6er/8fT1//w+v7/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/d6u//+P/////////M1tn/goiL/1RVVv8kJib/AAAA/wcH
        CP83Ojr/k5qc//j////5////3erv/+f0+P//////Pkc3/wAAB/+tiP//rIf//5l4//+bev//m3r//5t6
        //+bev//m3r//5t6//+bev//nXv//8CX//8mGUr/AAEA/+vz9//x+vz/4u3x/+Lt8f/h7PD//////3iA
        g/8AAAD/AAAA/ysrK/9jY2P/a2tr/2ZmZv9lZWX/bW1t/2RkZP88PDz/CQkJ/wAAAP8AAAD/Njo8//b8
        /f//////3urv/+Xw9P//////g4yO/wAAAP8AAAD/AAAA/gAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAA
        ANoAAAD/AAAA/1ddX//K2d3/rru//6Wxtf+ns7f/p7O3/52prf+9yc3/8Pv//+Pu8v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Ds
        8P/i7vL/+v//////////////5/P3/8fR1P/P2d3/9P/////////s+Pz/3+rv/+Hs8P/+////wczQ/wAA
        AP9TPJn/vZX//5l4//+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5p5//+viP//j3Lq/wAA
        AP+CjIn//////+Hs8P/i7fH/4u3x//L6/P/m7e//CQkK/wAAAP8AAAD/FBQU/zg4OP9HR0f/SEhI/z0+
        Pv8UFBT/AAAA/wAAAP8AAAD/SEtM//j+////////3urv/+Lt8f/g6+//7Pb6//////88QEH/AAAA/wAA
        AP8AAACvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAEBERABQVFgAAAAAAAAAAAAAAAAAAAAAAAAAAoQAAAP8AAAD/U1pc/7XCxv+ruLz/p7O3/6ez
        t/+lsbX/oKyw/9Db3//u+f3/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+7z/+35/f/5////9v///+n0
        +f/h7PD/4u3x/+Lt8f/l8fX//////0xVRf8AAAD/oH3//6WC//+bev//m3r//5t6//+bev//m3r//5t6
        //+bev//m3r//5t6//+bev//nHr//7SQ//8PCCD/HycU//3////m8vf/4u3x/+Lt8f/f7PD//////7rD
        xf8YGhr/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP87PT3/lZuc//3////5////3urv/+Lt
        8f/i7fH/4u3x/9/q7///////2uTo/wQEBP8AAAD/AAAA/wAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUWFgAcHyAAAAAAAAAAAAAAAAAAAAAAAwAA
        AIkAAAD/AAAA/wAAAP+otLj/s8DE/6ezt/+ns7f/qLS4/6CssP+hrrL/3+ru/+r1+f/h7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8f3//+Hu8f8AAgD/KBhT/7yU
        //+aef//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5h4//+/lf//VT6J/wAA
        AP/U4eX/9P///+Lt8f/i7fH/4ezw/+Dt8f//////3+rt/52kpv9lamz/RUhJ/zc6O/9AREX/aG1v/46W
        mP+9xsn/+v/////////q9vr/3urv/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4e7z//////9lamz/AAAA/wAA
        AP8AAACXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFRUAGx0eAAAAAAAAAAAEAAAAcgAAAPIAAAD/AAAA/wEBAf9mbXD/tsPI/6m1uf+ns7f/p7O3/6ez
        t/+ptbn/lKGl/665vf/p9Pj/5O/z/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//j////Dzs//AAAA/2JKqv+1jv//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5t6
        //+bev//m3r//5p5//+if///rYn//z0vnf8AAAD/sLm3///////i7fH/4u3x/+Lt8f/h7PD/4Ovv//L+
        //////////////7////3////+v///////////////f///+fz9//g7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Hs8P//////tcDE/wAAAP8AAAD/AAAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhMUABgaGzcAAACFAAAA4AAAAP8AAAD/AAAA/y8y
        M/+apaj/ydfc/6i0uP+msrb/p7O3/6ezt/+ns7f/nKmt/6aytv/G0dX/4+7y/+Tv8//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/6////ucPC/wACAP92W8f/roj//5t6
        //+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5p5//+de///wZb//1lJ4/8AAoX/AAAA/5ih
        mf//////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/m8fX/6PP3/+fy9v/j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/7fn8/+73+v8jJSb/AAAA/wAA
        AP8AAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC
        AoMCAgL/AAAA/wAAAP8AAAD/HyEi/3uEhv+/zdH/v8zR/6Wxtf+msrb/p7O3/6i0uP+lsbX/maaq/7K+
        wv/j7vL/7/r+/+Pu8v/h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/+////7jCwf8AAAD/aE6x/7CK//+bev//m3r//5t6//+bev//m3r//5t6//+bev//mnr//5t6
        //+ohP//vpT//3lh5v8DB6L/ERCV/wAAAP+Wn5b//////+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Ht8f//////YWZn/wAAAP8AAAD/AAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADXAAAA/wAAAP8fISL/bHR2/7O/xP/J19z/rLi8/6Wx
        tf+ns7f/p7O3/6i0uP+lsbX/m6er/7rGyv/q9fn/6/b6/+Hs8P/i7fH/4u3x/uLt8f3i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//f////G0dH/AAIA/19GpP+wi///m3r//5t6
        //+bev//m3r//5t6//+de///oH7//7CK//+2j///n337/1lIzv8DCJf/CAun/xQRj/8AAAD/r7iy////
        ///i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////4qRk/8AAAD/AAAA/wAA
        AGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzQAA
        AP8GBgb/oq6y/9bl6v+wvcH/pLC0/6ezt/+ns7f/p7O3/6ezt/+msrb/mqer/8DM0P/w+v7/6PL2/+Hs
        8P/i7fH/4u3x/+Lt8f7i7fH94u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/0////0t3e/wAAAP9iSKL/y5///6+J//+uif//roj//7GK//+0jf//rYj//6aC//98Y+f/STzE/x0b
        qP8AApH/DA6c/xgYs/8LCYT/BAMD/8TOyf/6////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//////+wuLv/AAAA/wAAAP8AAACTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAAAD/Jikq/7rHzP+suLz/p7O3/6ezt/+ns7f/p7O3/6ez
        t/+otLj/m6er/7rGyv/u+f3/5/L2/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PH/5vL2/+/7
        ///3//////////////////////////H9///k7/T/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8/7//9fi5P8FBgD/PCuA/41w7/96Yej/fGPp/35k
        6f92XuT/XkzU/zwzvP8rJq7/CAua/wAAj/8IC5n/FRWi/xYWo/8VFrX/BQN7/wsJCP/Q2t3/9f///+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/8////vcbK/wAAAP8AAAD/AAAAqgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLAAAA/zE0
        Nf+6x8z/qra6/6ezt/+ns7f/p7O3/6ezt/+otLj/nqqu/6y3u//p9Pj/6fT4/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4ezw/+Ds8P/4//////////z////j7vL/z9nc/7nCxf+rs7b/pa6x/7S9wP/f6u7/////////
        ////////+v///+Xw9P/g6/D/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+v2
        +//t+vz/LC4Y/wAASf8GC7f/CAua/wkMm/8KDZr/BQmX/wADkv8AA5L/BAiY/xESn/8WFqP/FRWi/xUV
        ov8VFaL/FxfA/wAAUP8fHRL/7PX8/+z5+//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/8////9nk6P8ODw//AAAA/wAAALkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAP8wMzT/usfL/6u2uv+ns7f/p7O3/6ezt/+ns7f/pbG1/6Cs
        sP/V4eX/7fj8/+Hs8P/i7fH/4u3x/+Lt8f/h7PD/3+vv//r/////////1+Di/4OJiv9FSUn/JCYn/wkJ
        Cf8AAAD/AAAA/wAAAP8AAAD/FhgY/0ZISf9rb3D/m5+h/8nS1v//////+v///97q7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/m8fb//P///z1BKP8AADr/HRza/xUWu/8VFbr/FRW8/xcX
        vv8ZGb//GhnA/xkZv/8ZGb//GRm//xkZv/8bGr//GRnB/yMi1/8AABD/V1tF///////i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//L////Z5Of/EhIS/wAAAP8AAAC2AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALcAAAD/Jyor/7bD
        x/+st7z/p7O3/6ezt/+ns7f/p7O3/56prf+4w8f/7Pf7/+Pu8v/i7fH/4u3x/+Lt8f/f6+//5/L2////
        ///c5Of/dnt7/woLC/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/UFRU/9zk5v//////4O3x/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5O/z////
        //9VW1D/AAAA/woBUf8AAC//AAAu/wAANv8AADj/AAA6/wAAP/8AAEX/AABH/wAARv8AAEn/AQBF/wAA
        Qv8HBjj/AAAA/7S+vf/+////4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/z////2ePn/xESEv8AAAD/AAAAtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACYAAAA/w8QD/+jr7P/sr/D/6ezt/+ns7f/p7O3/6ezt/+cqKz/xtLW/+74
        /P/i7fH/4u3x/+Lt8f/e6u7/8vz///////+eo6X/ERIS/wAAAP8AAAD/AAAA/wAAAP8kJCT/Nzc3/wMD
        A/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8WFxj/x8vN///////h7fL/4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/4+/z/srvC/y4wKf8pKxT/LzEa/y0vF/8oKhL/ISML/xwd
        Bf8UFQD/DQ8A/w0OAP8HCAD/AQEA/wQFAP8QEQD/AAAA/zw/Pv/8////6fX5/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8v///9zm6/8QERH/AAAA/wAAALIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaQAAAP8AAAD/jZeb/7vI
        zf+ns7f/p7O3/6ezt/+msrb/nquv/9Db3//s9/v/4u3x/+Lt8f/f6u//8fj7//7///9mamv/AAAA/wAA
        AP8AAAD/AAAA/1dXV//AwMD////////////g4OD/SkpK/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+4vsH//////97r8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/3+zw//H9
        ///w+///7Pj7//L9///w/P//7Pj8/+n1+P/l8PP/2+bq/9Hb3//P2dz/zdjb/8nS1v/O2Nv/2OPn/8fR
        1P/g6+//7PX4/+Dr7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//z/
        //+9x8r/AgIC/wAAAP8AAACxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAAD/AAAA/4ONkP/C0NT/prK2/6ezt/+ns7f/pbG1/6Wxtf/Z5Oj/6fT4/+Lt
        8f/h7PD/6PP3//////1aYGH+AAAA/wAAAP8AAAD/BwcH/7Gxsf//////////////////////////////
        //8tLS3/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQsM/+bs7v/4/f//4Ovv/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/j7vL/6vb6/+v2+//q9fn/6vX6/+v3+//t+Pz/7vr+//L9
        ///2////9v////f////4////9v////L+///5////7/v//9/r7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f//////q7S3/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAA/wAAAP9VXF7/xtXZ/6ay
        tv+ns7f/p7O3/6Gtsf+uur7/4u7y/+Xx9f/i7fH/4O3y//////qZoqXvAAAA/gAAAP8AAAD/DQ0N/9TU
        1P//////////////////////////////////////kpKS/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9QVlj//////+Xy9v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+/z/+Xw9P/o9Pj/6fX5/+fy
        9v/k7/P/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////5ui
        pf8AAAD/AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEAAAAP4AAAD/FBUW9rC+wfauu7//p7O3/6ezt/+eqq7/tsLG/+jz9//j7vL/4ezw//b8
        /v/f6Or9AwQE/QAAAP8AAAD/CwsL/9ra2v///////////////////////////////////////////3h4
        eP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/7vGyf/+////4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/m8fX/6PT4/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4Ovw/+bx
        9v/+////////////////////9f////L+///6///////////////w/f//4Ovw/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/h7PD/4ezw//////97gYT/AAAA/wAAAP8AAABzAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAABRAAAAgAAAALIAAAD+AAAA/wAAAPiJk5b4v8zR/6ez
        t/+ns7f/namt/8DLz//s9vr/4u3x/+Ds8f//////dXx+/wAAAP8AAAD/AAAA/8vLy///////////////
        /////////////////////////////+fn5/8PDw//AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9LT1H//////+Tx9f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4ezw/97q7//5/////v////b/////////4e3x/+Ds8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/f6/D/5fH1////////////vMXI/4GIiv9lamz/UFRV/zU4OP8zNjf/PkJD/1pe
        YP+Um57/5u7x///////x/P//4Ovw/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pv8///////VVla/wAA
        AP8AAAD/AAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAAJEAAAD4AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/Ulha/8jX3P+msrb/p7O3/52prf/J1dn/7ff7/+Lt8f/u+fz/6fL1/xYX
        GP8AAAD/AAAA/2lpaf//////////////////////////////////////3t7e/5SUlP8ZGRn/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DAwN/+Tx9f/z/f/+4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/9/s8P//////1+Dj/1VaW/84Ozz/nqao////
        ///i7vP/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/e6u///P////////+4vb7/RkhJ/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xsbG/+Lj5D/8/n7///////m8fX/3+vv/+Lt
        8f/i7fH/4u3x/+Lt8f/t+v7/7fj8/xwdHv8AAAD/AAAA/wAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAeAAAAPUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/x8iI/+5x8v/qre7/6ez
        t/+dqa3/yNTY/+33+//i7fH//v///8XQ1P8AAAD/AAAA/wcHB//x8fH/////////////////////////
        ///Jycn/WFhY/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+fp6r//////OLt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/9/r
        8P//////x83P/w8QEf8AAAD/AAAA/wAAAP++xcj/+/7//+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs
        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
        AP8AAAD/P0JD//n////o8/f/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g7fL//f///7W+
        wf9LT1H/HR4f/wAAAP8AAAD/f4SG//v////k7/P/4u3x/+Lt8f/f6u//+////+Pp6/8NDw//AAAA/wAA
        AP/Pz8//////////////////////////////////////////////////m5ub/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/9Xe4f/3/f7//////5mgo/8AAAD/AAAA/wAAAHMAAAAAAAAAAAAA
        AAAAAAAIAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9veHv/y9vf/52prf/R3OD/6/b6/+r1+f/z/f//LzEy/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FxcX/6CgoP/x8fH/////////////////////////
        //////////////////9bW1v/AAAA/wAAAP8AAAD/AAAA/0dLTP/+////5vH1/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/9/r8P///////////+Lu8f/Fz9L/xM7S//X////l7/P/4ezw/+Lt
        8f/i7fH/6vb4//////8uMjP/AAAA/wAAAP+1tbX/////////////////////////////////////////
        ///09PT/jIyM/wMDA/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9scnT///////3/
        //8yNDX/AAAA/wAAAP8AAAATAAAAAAAAAAAAAAAAAAAAlwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/JCco/77N0f+ns7f/1uHl/+r1
        +f/l8PT//v///0dLTP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ODg4/+zs
        7P///////////////////////////////////////////////////////////xoaGv8AAAD/AAAA/wAA
        AP9nbG7//////+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Xx
        9f/v+///+v////r////l8PT/4Ovw/+Lt8f/i7fH/4Ovw//////+eqKv/AAAA/wAAAP9bW1v/////////
        ////////////////////////9/f3/6CgoP9hYWH/FhYW/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/GRob///////N2d3/AAAA/wAAAP8AAACmAAAAAAAAAAAAAAAAAAAAFQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9+h4v/w9LX/9bi5v/p9Pj/4u3x//////9yeHr/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/NTU1////////////////////////////////////////////////////
        //////////////////9BQUH/AAAA/wAAAP8AAAD/kpmb///////i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+f0
        +P/9////LzEy/wAAAP8BAQH/3t7e////////////////////////////urq6/xkZGf8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP/q9vr/kJaZ/wAA
        AP8AAAD/AAAAKQAAAAAAAAAAAAAAAAAAAFQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ISQl/8DO0//d6u7/6PP3/+Lt
        8f//////iY+S/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/+3t7f//////////////
        ////////////////////////////////////////////////////////T09P/wAAAP8AAAD/AAAA/8HN
        0f/8////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/8////yNTY/wAAAP8AAAD/GRkZ////////////////////
        ////////r6+v/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/xc7T/05SU/8AAAD/AAAAzgAAAAAAAAAAAAAAAAAAAAAAAACEAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+Nl5r//////+Pw9P/i7fH//////6u0uP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/3BwcP//////////////////////////////////////////////////////////////
        /////////////2xsbP8AAAD/AAAA/zs+QP/7////6PX5/+Lt8f/i7fH+4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////4KJ
        i/8AAAD/AAAA/xcXF///////////////////////nZ2d/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DQ4O/46Vl/8QERH/AAAA/wAA
        AFAAAAAAAAAAAAAAAAAAAAAAAAAAtQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/GRob/+72+P/z+vz/4ezw//H7
        /v/l8PP/ERIS/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+ysrL/////////////////////////
        //////////////////////////////////////////////////8+Pj7/AAAA/wAAAP/F0NP//////+Ds
        8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/5PD0//////9GSUv/AAAA/wAAAP8AAAD/pKSk////////////mpqa/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQkJ/zAwMP8rKyv/BgYG/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/x0fH/9NUVP/AAAA/wAAAPUAAAAGAAAAAAAAAAAAAAAAAAAAAAAAANwAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP99hIf//////+Ds8f/h7vL//////1dcXf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/s7Oz////////////////////////////////////////////////////////////////////
        ///Ozs7/AAAA/wAAAP9XXF7//////+Tx9v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+v4+//t+Pv/Jico/wAA
        AP8AAAD/AAAA/wAAAP9KSkr/MzMz/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9FRUX/p6en/+rq
        6v///////////+jo6P/MzMz/k5OT/y8vL/8AAAD/AAAA/wAAAP8PDxD/ERES/wAAAP8AAAC3AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADiAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DAwM/+nz9v/z+/3/4Ovv////
        //+tuLv/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/9vb2///////////////////////////////
        ////////////////////////////////////////JCQk/wAAAP8AAAD/1+Dh//r+///g7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/w/P//3+vw/xcZGf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/xEREf+8vLz/////////////////////////////////////////////////PDw8/wAA
        AP8AAAD/AQEB/wAAAP8AAAD/AAAARQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP91fH7//////+Dt8v/o9Pj//////zEzNP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP/b29v/////////////////////////////////////////////////////////////////WVlZ/wAA
        AP8AAAD/r7S3///////f7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8Pv//+Hs8P8aGxz/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xMTE//e3t7/////////////////////////
        ///////////////////9/f3//////9LS0v8AAAD/AAAA/wAAAP8AAAD/AAAA4gAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAOEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/BgYG/9zl6P/1/P7/3+vv////
        //+4wsb/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/lpaW////////////////////////////////////
        ////////////////////////bW1t/wAAAP8AAAD/o6iq///////i7vL/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//P+///Z4+f/EBER/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wMD
        A//b29v////////////////////////////////////////////////////////////y8vL/CQkJ/wAA
        AP8AAAD/AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+Lk5b//////+Dr7//k8fX//////1xiZf8AAAD/AAAA/wAAAP8AAAD/AAAA/xMT
        E//c3Nz////////////////////////////////////////////Ozs7/SkpK/wAAAP8AAAD/nKCj////
        ///l8fT/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/z/v//2ubq/w4PD/8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9sbGz/////////////////////////////////////////
        ////////////////////////8/Pz/wwMDP8AAAD/AAAA/wAAAP8AAAAxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA3QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/RklK///////k8fX/4Ovv//H5
        +//+////PEBB/wAAAP8AAAD/AAAA/wAAAP8AAAD/BwcH/4iIiP/V1dX/////////////////1NTU/5qa
        mv9OTk7/AAAA/wAAAP8AAAD/rrS1///////l8PX/4Ovw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/5/L3//n9/v9AQ0T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/zMzM////
        /////////////////////////////////////////////////////////////9zc3P8DAwP/AAAA/wAA
        AP8AAADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANEAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP/CzdH//f///+Hs8P/e6u//+f////j///9sb3H/BgYG/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/yEhIP8uLi7/HBwc/wAAAP8AAAD/AAAA/wAAAP9AQUH/xs7P///////i7vL/4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P//////gYeJ/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/GRkZ////////////////////////////////////////////////////
        //////////////////+Xl5f/AAAA/wAAAP8AAAD/AAAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADJAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/UlZX///////i7/T/4u3x/97q
        7//x/P///////9Lc3v+KkJH/UVNU/w0NDf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/EhMT/2Nn
        aP+4v8H////////////f6/D/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH//P///8PO0v8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/1dXV///////////////
        ////////////////////////////////////////////////////////MDAw/wAAAP8AAAD/AAAA6wAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAugAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wgJCf/g7PD/9P3//+Lt8f/i7fH/4Ozw/+Ht8v/5///////////////W4OL/maCj/3B2
        eP9hZmj/h46Q/5adoP+krK//u8TH/9vm6v///////////+fz9//f6+//4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+j1+f/9////KSss/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9ubm7/////////////////////////////////////////////////////////
        ////////n5+f/wAAAP8AAAD/AAAA/wAAAMUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AJ8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ho2Q///////h7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Hs8P/j7/P/9f/////////////////////////////////////////y/v//4u3x/+Hs
        8P/i7fH/4u3x/OLt8fvi7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6/D//////6Osr/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ampq////////////////////
        ////////////////////////////////////////mZmZ/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAxAAA
        AA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/y8xMv/2/f//6PT4/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+7y/+Pu
        8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+bx9f//////V11f/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/05OTv/////////////////////////////////////////////////19fX/ZWVl/wAA
        AP8AAAD/AQEB/wEBAf8AAAD/AAAA/wAAAP8AAADKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8dHx//8fz//+v2+v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//8vr8//3///9IS0z/AAAA/wAAAP8AAAD/AAAA/wAAAP8EBAT/rq6u////////////////////
        ////////6Ojo/6urq/9aWlr/ERER/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/bHN1///////j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/97q7//3/////////3+ChP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8tLS3/Z2dn/3Fxcf9FRUX/KSkp/wcHB/8AAAD/AAAA/wAAAP8eICH/BAQE/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FhcX/u309v7x+fv/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/3urv/+75/f//////0dbY/0dKS/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/yEiI/+jq67/TlFT/wICAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AJMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/6ev
        sv//////3uvw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/4e3x////////////rbS2/1NX
        Wf8hIyT/BwcH/wAAAP8AAAD/AgID/wAAAP8FBgb/LjAx/4uRlP//////tb3A/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/2RqbP//////5vL1/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/uLt8f/f6+//5/P3////////////5vL2/87Z3P/Fz9L/xM3R/8rU1//Gz9P/ztjb/+z5
        /f//////4ert/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/2Jnaf//////7vf6/9/r
        7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f7i7fH/4u3x/+Lt8f/h7PD/5O/z/+75
        /f/2////+v////r////4////+v////X////3/////////zAzNP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/2Noav//////8vv+/9/q7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k8fX//////19m
        aP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADHAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/3J2d///////8vv+/97q7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/f6/D//////7zHyv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAA
        AMoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FBQV/6Wu
        sf//////7vj8/97q7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/5O/z/uTv8/7i7fH/4u3x/uLt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/uLt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs
        8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6+//9fz+//j+//8gIiP/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAdgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdQAAAPQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8ODxD/WF5g/6ezt//O3OH/2OTo/+/6///i7fH/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Xw9P/r9vr/7Pf7/+jz9/3k7/P84ezw/+Lt
        8f7i7fH+4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hr7//f6u7/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6+//6vT4//////9sc3b/AAAA/wAAAP8AAAD/AAAA/wEBAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAXAAAAiwAAAPYAAAD/AAAA/wAAAP8AAAD/FhcY/zg8Pf9jam3/prG1/8rY3f+2w8f/mqWp/6Sw
        tP/X4ub/8Pr+/+jz9//h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/6/b6/+75
        /f/k7/P/0t7i/8HN0f+tub3/ucTI/+Tv8//k7/P/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/5fH0//////+Lk5X/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABhAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjAAAA9wAAAP8LDAz/mKKm/7nG
        y/+8ys7/xdPX/7TBxv+lsbX/prK2/6i0uP+grLD/n6uv/8DLz//j7vL/7/n9/+z3+//s9vr/6/b6/+v2
        +v/r9vr/7/r/////////////9f///87Y3P/CzdH/rrq+/6CssP+Zpan/lKCk/8jU2P/q9fn/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4O3x////
        //+epaf/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAALwAAAD/CQoK/4mTlv/N3OH/y9rf/77M0f+1wsb/rru//6u3u/+ptbn/qbW5/6Wx
        tf+bqKz/qra6/8bS1v/V4OT/2ufr/+bz9//v/f//7vz//9zp7f+3wcX/eX6A/2txc/+sub3/nKis/6Cs
        sP+nsrb/mqer/7/Lz//w+///4+7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/h7PD/4uzw/+Lt8f/i7fH/3uvv///////L0tX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAA/wAAAP8AAAD/Ki0v/2Zt
        cP+Gj5L/nais/6+8wP+4xcr/vsvQ/8HP1P/D0dX/xNLW/73M0P+4xsv/sr/D/56qr/+FjpL/aXFz/0pQ
        U/8jJif/AAAA/wAAAP97hYj/u8jN/6i0uP+ns7f/oq6y/6azt//j7vL/6fP3/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/q9fn/6PP3/+Dr7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/g6+//3+ru/+Lu8v/i7fH/3erv//7////6////HiEi/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGoAAAD0AAAA/wAAAP8AAAD/AAAA/w0ODv8sLzD/Nzs9/zxAQf9GS03/TFJU/01T
        Vf9MUlP/RUlL/y0wMf8REhP/AAAA/wAAAP8AAAD/AAAA/wAAAP+AiY3/y9ne/6Svs/+ns7f/qLS4/5un
        q//BzND/7/r+/+Ds8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/u+f3/0t3h/8TQ1P/m8fX/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Lt
        8f/i7fH/3erv//7////9////OT5A/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACfAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAAIQAAADcAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAA/wAA
        AP9BRkf/zNrg/6m1uf+ns7f/p7O3/6Wxtf+irrL/2eTo/+r1+f/i7fH/4u7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4Ovw/+n0+P/1////1uHl/5ejp/+9yMz/7vn9/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/3erv///////6/v//PEBC/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMAAACQAAAAsgAAAMAAAADTAAAA3AAAANgAAADMAAAAzwAA
        ANAAAADHAAAAtAAAAJcAAAB/AAAA9gAAAP8EBQX/nqqu/7zKzv+lsbX/p7O3/6ezt/+eqq7/t8PH/+r1
        +f/j7vL/4ezw/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g6/D/4e3x///////6////wszQ/KCs
        sPybp6v/2eTo/+r1+f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/3+vw////
        ///q7/H/MTU3/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAAP4AAAD/VVtc/8jX
        2/+msrb/p7O3/6ezt/+ns7f/nKis/8vW2v/u+f3/4u3x/+Hs8P/g6+//4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//7vn9///////Izs//RUlK/3mDhvmsub79q7e7/9/q7v/n8vb/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/h7PD/4O3x///////c4uT/ICMk/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAOkAAAD/DQ4O/6Svs/+5xsr/prK2/6ezt/+ns7f/pbG1/6Ovs//X4ub/6vX5/+Lt
        8f/i7fH/4u7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Dr8P/j7/T///////////+HjI7/AAAA/wYGB/y6x8z6prO3/6+7
        v//j7vL/5fD0/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g6/D/5PD0///////DyMn/DxES/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAD/AAAA/1RaXP/E0tf/p7O3/6ez
        t/+ns7f/p7O3/6Gtsf+tub3/4u3x/+bw9P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/9/r8P/8/////////8DG
        x/85Ozz/AAAA/wAAAP9nbnH+ytne/p6qrv+yvsL/5fD0/+Tv8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//7Pf6//////+mq63/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAAALAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADQAAAA/wIDAv+Zpaj/usjM/6aytv+ns7f/p7O3/6ezt/+dqq7/uMTI/+r1+f/j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/h7PH/3+vv//P+////////3OPl/2FjZP8AAAD/AAAA/wAAAP8AAAD/k56h/7vIzf+eqq7/tMDE/+fy
        9v/j7vL/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/f6/D///////////+Hi43/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAABKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAA/wAAAP89QkL/xNPY/6i1uf+ns7f/p7O3/6ez
        t/+ns7f/nKmt/7vHy//r9fn/4+7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6u//7vn9///////w9vj/iY6P/wsMDf8AAAD/AAAA/wAA
        AP8AAAD/LTAx/73Kz/+qtrr/oKyw/7G9wf/l8PT/5fD0/+Lt8f/i7fH/4ezw/+Ds8P/1/////////9/k
        5v9PU1T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACgAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAA
        AP8AAAD/gYqN/8PR1v+msrb/p7O3/6ezt/+ns7f/p7O3/52prf+5xMj/6fT4/+Pu8v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Hs8P/s+Pz///////n/
        //+Slpf/Hh8f/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/252ef/J2N3/pbG1/6SwtP+msrb/3Ofr/+n0
        +P/g6/D/4u7z//3/////////5+3w/4eKi/8JCwz/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAC0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMMAAAD/Gxwd/7TBxf+uu7//p7O3/6ezt/+ns7f/p7O3/6ez
        t/+hrbH/r7u//+Tv8//l8PT/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6/D/5vH2//7/////////9v///62ztP8yNDX/AAAA/wAAAP8AAAD/AAAA/wAAANUAAAC4AAAA/wAA
        AP+LlZn/vcrP/6ezt/+ns7f/nKis/8zX2//2///////////////N1Nf/cHR1/xUVFv8AAAD/AAAA/wAA
        AP8AAADAAAAANgAAAKQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADsAAAA/09U
        Vv/M2+D/pbG1/6ezt/+ns7f/p7O3/6ezt/+ns7f/oq6y/6q2uv/h7PD/5/L2/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4+7y/+n0+P/6///////////////I0NP/en+A/zM1Nf8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAK4AAAAKAAAAqgAAAP8FBQX/rLi8/73Kzv+rt7v/sr/D/7jGy//N2+D/9f///8vS
        0/9hY2T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB4AAAAAAAAAAAAAAAAAAAArwAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANEAAABEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAdAAAA/wAAAP85PT//x9Xa/83b4P+5xsv/r7u//666v/+suLz/p7O3/6ay
        tv+grLD/0Nzg//D7///j7vP/5fD0/+fz9//r9/v/8v7///v////////////////////3////ztjb/5GW
        mP9FSEj/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3AAAAFMAAAAAAAAAAAAAAOIAAAD/AwMD/36H
        iv/D0dX/t8TJ/6ezt/+GkJP/U1pc/ywvMP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKwAAAAtAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACIAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA6wAAAHsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQAAAP8AAAD/AAAA/yot
        Lv9weHv/laCj/667v/+wvMD/tsTI/8TS1//G1Nn/t8XK/8fU2f/////////////////5////7vr+/9vm
        6v/EztH/qbG0/4CHif9ZXV7/ODs8/wQEBP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADVAAAAcwAA
        AAIAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/MDQ1/yksLf8REhP/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADkAAAAmQAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkAAACZAAAA3AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAAC/AAAAZAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAcAAADRAAAA/wAAAP8AAAD/AAAA/wEBAf8cHh7/ICMj/y0wMf9LUFL/WWBi/1JY
        Wv9JT1H/U1ha/1ZaW/9KTk//P0JD/y0vL/8TFBT/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA2wAAAJ0AAABCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAN8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAK4BAQFUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAaQAAAIoAAACQAAAAeAAAAEgAAAAYAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAIgAAADeAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADsAAAAugAAAI8AAABhAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAALAQEBgAEBAcgAAADmAAAA7QAAAMoAAACWAAAAWgAAABsAAAAAAQEBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AAABzAAAAlwAAALYAAADNAAAA1AAAAOYAAAD7AAAA/wAA
        AP8AAAD/AAAA/gAAAPQAAADtAAAA1wAAAMAAAACkAAAAlgAAAG0AAAA7AAAACgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgADBQUAAAAABQAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABwAAAA0AAAAfAAAANgAAAEAAAABEAAAARQAAADoAAAAuAAAAJwAAABAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAACAgIAAwQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP////4AAAAAAAAAAAADAAD////wAAAAAAAA
        AAAABwAA////4AAAAAAAAAAAAAcAAP///4AAAAAAAAAAAAAPAAD///4AAAAAAAAAAAAADwAA///8AAAA
        AAAAAAAAAB8AAP//+AAAAAAAAAAAAAAfAAD///AAAAAAAAAAAAAAPwAA///gAAAAAAAAAAAAAD8AAP//
        wAAAAAAAAAAAAAB/AAD//4AAAAAAAAAAAAAAPwAA//+AAAAAAAAAAAAAAB8AAP//AAAAAAAAAAAAAAAP
        AAD//wAAAAAAAAAAAAAADwAA//4AAAAAAAAAAAAAAAcAAP/+AAAAAAAAAAAAAAADAAD//4AAAAAAAAAA
        AAAAAwAA///gAAAAAAAAAAAAAAEAAP//wAAAAAAAAAAAAAABAAD//wAAAAAAAAAAAAAAAQAA//wAAAAA
        AAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4
        AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAA
        AAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAA
        AAAAAAAA//gAAAAAAAAAAAAAAAAAAP/AAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAA/gAAAAAA
        AAAAAAAAAAEAAPgAAAAAAAAAAAAAAAABAADwAAAAAAAAAAAAAAAAAQAA4AAAAAAAAAAAAAAAAAMAAMAA
        AAAAAAAAAAAAAAADAACAAAAAAAAAAAAAAAAAAwAAgAAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAH
        AAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAA
        AAAAHwAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAPwAAAAAAAAAA
        AAAAAAAAAD8AAAAAAAAAAAAAAAAAAAB/AAAAAAAAAAAAAAAAAAAAfwAAAAAAAAAAAAAAAAAAAH8AAAAA
        AAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAAPwAAAAAAAAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAAAAAf
        AAAAAAAAAAAAAAAAAAAADwAAgAAAAAAAAAAAAAAAAA8AAIAAAAAAAAAAAAAAAAAHAADAAAAAAAAAAAAA
        AAAABwAAwAAAAAAAAAAAAAAAAAcAAOAAAAAAAAAAAAAAAAADAADwAAAAAAAAAAAAAAAAAwAA8AAAAAAA
        AAAAAAAAAAMAAPwAAAAAAAAAAAAAAAADAAD+AAAAAAAAAAAAAAAAAwAA/4AAAAAAAAAAAAAAAAMAAP/A
        AAAAAAAAAAAAAAADAAD/wAAAAAAAAAAAAAAABwAA/+AAAAAAAAAAAAAAAAcAAP/wAAAAAAAAAAAAAAAH
        AAD//gAAAAAAAAAAAAAADwAA////8AAAAAAAAAAAAA8AAP///+AAAAAAAAAAAAAfAAD////gAAAAAAAA
        AAAAHwAA////4AAAAAAAAAAAAD8AAP///8AAAAAAAAAAAAB/AAD////AAAAAAAAAAAAA/wAA////wAAA
        AAAAAAAAAf8AAP///4AAAAAAAABwAAP/AAD///+AAAAABgAA+AAP/wAA////gAAAAA4AA/wAH/8AAP//
        /4AAAAB+AA//gP//AAD////AAAAD/wB//////wAA////+AAAP//n//////8AAP////+AD///////////
        AAD//////////////////wAA//////////////////8AAP//////////////////AAD/////////////
        /////wAA//////////////////8AAP//////////////////AAD//////////////////wAA////////
        //////////8AAP//////////////////AAD//////////////////wAA//////////////////8AAP//
        ////////////////AAD//////////////////wAA//////////////////8AAP//////////////////
        AAD//////////////////wAA//////////////////8AAP//////////////////AAD/////////////
        /////wAA//////////////////8AAP//////////////////AAD//////////////////wAA////////
        //////////8AAP//////////////////AAA=
</value>
  </data>
</root>


================================================
File: PandaObfuscator/mainForm.Designer.cs
================================================
ï»¿namespace PandaObfuscator
{
    partial class mainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(mainForm));
            this.darkSectionPanel2 = new DarkUI.Controls.DarkSectionPanel();
            this.darkLabel6 = new DarkUI.Controls.DarkLabel();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.darkButton4 = new DarkUI.Controls.DarkButton();
            this.authorLbl = new DarkUI.Controls.DarkLabel();
            this.idLbl = new DarkUI.Controls.DarkLabel();
            this.DescLbl = new DarkUI.Controls.DarkLabel();
            this.nameLbl = new DarkUI.Controls.DarkLabel();
            this.darkButton3 = new DarkUI.Controls.DarkButton();
            this.darkButton2 = new DarkUI.Controls.DarkButton();
            this.darkListView1 = new DarkUI.Controls.DarkListView();
            this.darkSectionPanel1 = new DarkUI.Controls.DarkSectionPanel();
            this.darkLabel1 = new DarkUI.Controls.DarkLabel();
            this.darkTextBox1 = new DarkUI.Controls.DarkTextBox();
            this.darkButton1 = new DarkUI.Controls.DarkButton();
            this.darkSectionPanel3 = new DarkUI.Controls.DarkSectionPanel();
            this.basic = new DarkUI.Controls.DarkRadioButton();
            this.normal = new DarkUI.Controls.DarkRadioButton();
            this.darkSectionPanel2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.darkSectionPanel1.SuspendLayout();
            this.darkSectionPanel3.SuspendLayout();
            this.SuspendLayout();
            // 
            // darkSectionPanel2
            // 
            this.darkSectionPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(57)))), ((int)(((byte)(60)))), ((int)(((byte)(62)))));
            this.darkSectionPanel2.Controls.Add(this.darkSectionPanel3);
            this.darkSectionPanel2.Controls.Add(this.darkLabel6);
            this.darkSectionPanel2.Controls.Add(this.pictureBox1);
            this.darkSectionPanel2.Controls.Add(this.darkButton4);
            this.darkSectionPanel2.Controls.Add(this.authorLbl);
            this.darkSectionPanel2.Controls.Add(this.idLbl);
            this.darkSectionPanel2.Controls.Add(this.DescLbl);
            this.darkSectionPanel2.Controls.Add(this.nameLbl);
            this.darkSectionPanel2.Controls.Add(this.darkButton3);
            this.darkSectionPanel2.Controls.Add(this.darkButton2);
            this.darkSectionPanel2.Controls.Add(this.darkListView1);
            this.darkSectionPanel2.Enabled = false;
            this.darkSectionPanel2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(214)))), ((int)(((byte)(214)))), ((int)(((byte)(204)))));
            this.darkSectionPanel2.Location = new System.Drawing.Point(0, 60);
            this.darkSectionPanel2.Name = "darkSectionPanel2";
            this.darkSectionPanel2.SectionHeader = "Settings";
            this.darkSectionPanel2.Size = new System.Drawing.Size(800, 384);
            this.darkSectionPanel2.TabIndex = 3;
            // 
            // darkLabel6
            // 
            this.darkLabel6.AutoSize = true;
            this.darkLabel6.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.darkLabel6.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.darkLabel6.Location = new System.Drawing.Point(430, 246);
            this.darkLabel6.Name = "darkLabel6";
            this.darkLabel6.Size = new System.Drawing.Size(293, 78);
            this.darkLabel6.TabIndex = 9;
            this.darkLabel6.Text = "Panda Obfuscator\r\n\r\nBasic .NET Obfuscator, to protect you applications or library" +
    "s\r\n\r\nTheme: DarkUI by RobinPerris\r\nPandaObfuscator: CodeOfDark";
            this.darkLabel6.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // pictureBox1
            // 
            this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.Location = new System.Drawing.Point(247, 231);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(112, 112);
            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
            this.pictureBox1.TabIndex = 8;
            this.pictureBox1.TabStop = false;
            // 
            // darkButton4
            // 
            this.darkButton4.Location = new System.Drawing.Point(247, 349);
            this.darkButton4.Name = "darkButton4";
            this.darkButton4.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton4.Size = new System.Drawing.Size(541, 23);
            this.darkButton4.TabIndex = 7;
            this.darkButton4.Text = "Start";
            this.darkButton4.Click += new System.EventHandler(this.darkButton4_Click);
            // 
            // authorLbl
            // 
            this.authorLbl.AutoSize = true;
            this.authorLbl.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.authorLbl.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.authorLbl.Location = new System.Drawing.Point(244, 139);
            this.authorLbl.Name = "authorLbl";
            this.authorLbl.Size = new System.Drawing.Size(41, 13);
            this.authorLbl.TabIndex = 6;
            this.authorLbl.Text = "Author:";
            // 
            // idLbl
            // 
            this.idLbl.AutoSize = true;
            this.idLbl.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.idLbl.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.idLbl.Location = new System.Drawing.Point(244, 121);
            this.idLbl.Name = "idLbl";
            this.idLbl.Size = new System.Drawing.Size(19, 13);
            this.idLbl.TabIndex = 5;
            this.idLbl.Text = "Id:";
            // 
            // DescLbl
            // 
            this.DescLbl.AutoSize = true;
            this.DescLbl.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.DescLbl.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.DescLbl.Location = new System.Drawing.Point(244, 157);
            this.DescLbl.Name = "DescLbl";
            this.DescLbl.Size = new System.Drawing.Size(66, 13);
            this.DescLbl.TabIndex = 4;
            this.DescLbl.Text = "Description: ";
            // 
            // nameLbl
            // 
            this.nameLbl.AutoSize = true;
            this.nameLbl.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
            this.nameLbl.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.nameLbl.Location = new System.Drawing.Point(244, 103);
            this.nameLbl.Name = "nameLbl";
            this.nameLbl.Size = new System.Drawing.Size(38, 13);
            this.nameLbl.TabIndex = 3;
            this.nameLbl.Text = "Name:";
            // 
            // darkButton3
            // 
            this.darkButton3.Location = new System.Drawing.Point(247, 64);
            this.darkButton3.Name = "darkButton3";
            this.darkButton3.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton3.Size = new System.Drawing.Size(27, 23);
            this.darkButton3.TabIndex = 2;
            this.darkButton3.Text = "-";
            this.darkButton3.Click += new System.EventHandler(this.darkButton3_Click);
            // 
            // darkButton2
            // 
            this.darkButton2.Location = new System.Drawing.Point(247, 35);
            this.darkButton2.Name = "darkButton2";
            this.darkButton2.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton2.Size = new System.Drawing.Size(27, 23);
            this.darkButton2.TabIndex = 1;
            this.darkButton2.Text = "+";
            this.darkButton2.Click += new System.EventHandler(this.darkButton2_Click);
            // 
            // darkListView1
            // 
            this.darkListView1.Location = new System.Drawing.Point(11, 35);
            this.darkListView1.Name = "darkListView1";
            this.darkListView1.Size = new System.Drawing.Size(230, 338);
            this.darkListView1.TabIndex = 0;
            this.darkListView1.Text = "darkListView1";
            this.darkListView1.Click += new System.EventHandler(this.darkListView1_Click);
            // 
            // darkSectionPanel1
            // 
            this.darkSectionPanel1.Controls.Add(this.darkLabel1);
            this.darkSectionPanel1.Controls.Add(this.darkTextBox1);
            this.darkSectionPanel1.Controls.Add(this.darkButton1);
            this.darkSectionPanel1.Location = new System.Drawing.Point(0, 0);
            this.darkSectionPanel1.Name = "darkSectionPanel1";
            this.darkSectionPanel1.SectionHeader = "PandaObfuscator";
            this.darkSectionPanel1.Size = new System.Drawing.Size(800, 61);
            this.darkSectionPanel1.TabIndex = 0;
            // 
            // darkLabel1
            // 
            this.darkLabel1.AutoSize = true;
            this.darkLabel1.BackColor = System.Drawing.Color.Transparent;
            this.darkLabel1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.darkLabel1.Location = new System.Drawing.Point(12, 33);
            this.darkLabel1.Name = "darkLabel1";
            this.darkLabel1.Size = new System.Drawing.Size(54, 13);
            this.darkLabel1.TabIndex = 2;
            this.darkLabel1.Text = "App Path:";
            // 
            // darkTextBox1
            // 
            this.darkTextBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
            this.darkTextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.darkTextBox1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
            this.darkTextBox1.Location = new System.Drawing.Point(72, 30);
            this.darkTextBox1.Name = "darkTextBox1";
            this.darkTextBox1.ReadOnly = true;
            this.darkTextBox1.Size = new System.Drawing.Size(635, 20);
            this.darkTextBox1.TabIndex = 1;
            // 
            // darkButton1
            // 
            this.darkButton1.Location = new System.Drawing.Point(713, 28);
            this.darkButton1.Name = "darkButton1";
            this.darkButton1.Padding = new System.Windows.Forms.Padding(5);
            this.darkButton1.Size = new System.Drawing.Size(75, 23);
            this.darkButton1.TabIndex = 0;
            this.darkButton1.Text = "...";
            this.darkButton1.Click += new System.EventHandler(this.darkButton1_Click);
            // 
            // darkSectionPanel3
            // 
            this.darkSectionPanel3.Controls.Add(this.normal);
            this.darkSectionPanel3.Controls.Add(this.basic);
            this.darkSectionPanel3.Location = new System.Drawing.Point(633, 28);
            this.darkSectionPanel3.Name = "darkSectionPanel3";
            this.darkSectionPanel3.SectionHeader = "State";
            this.darkSectionPanel3.Size = new System.Drawing.Size(163, 77);
            this.darkSectionPanel3.TabIndex = 10;
            // 
            // basic
            // 
            this.basic.AutoSize = true;
            this.basic.Checked = true;
            this.basic.Location = new System.Drawing.Point(7, 30);
            this.basic.Name = "basic";
            this.basic.Size = new System.Drawing.Size(51, 17);
            this.basic.TabIndex = 0;
            this.basic.TabStop = true;
            this.basic.Text = "Basic";
            // 
            // normal
            // 
            this.normal.AutoSize = true;
            this.normal.Location = new System.Drawing.Point(7, 53);
            this.normal.Name = "normal";
            this.normal.Size = new System.Drawing.Size(58, 17);
            this.normal.TabIndex = 1;
            this.normal.Text = "Normal";
            // 
            // mainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 444);
            this.Controls.Add(this.darkSectionPanel2);
            this.Controls.Add(this.darkSectionPanel1);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.Name = "mainForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "PandaObfuscator";
            this.Load += new System.EventHandler(this.mainForm_Load);
            this.darkSectionPanel2.ResumeLayout(false);
            this.darkSectionPanel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.darkSectionPanel1.ResumeLayout(false);
            this.darkSectionPanel1.PerformLayout();
            this.darkSectionPanel3.ResumeLayout(false);
            this.darkSectionPanel3.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        public DarkUI.Controls.DarkSectionPanel darkSectionPanel1;
        public DarkUI.Controls.DarkLabel darkLabel1;
        public DarkUI.Controls.DarkTextBox darkTextBox1;
        public DarkUI.Controls.DarkButton darkButton1;
        public DarkUI.Controls.DarkSectionPanel darkSectionPanel2;
        public DarkUI.Controls.DarkListView darkListView1;
        public DarkUI.Controls.DarkLabel DescLbl;
        public DarkUI.Controls.DarkLabel nameLbl;
        public DarkUI.Controls.DarkButton darkButton3;
        public DarkUI.Controls.DarkButton darkButton2;
        public DarkUI.Controls.DarkLabel authorLbl;
        public DarkUI.Controls.DarkLabel idLbl;
        public DarkUI.Controls.DarkButton darkButton4;
        public DarkUI.Controls.DarkLabel darkLabel6;
        public System.Windows.Forms.PictureBox pictureBox1;
        private DarkUI.Controls.DarkSectionPanel darkSectionPanel3;
        private DarkUI.Controls.DarkRadioButton normal;
        private DarkUI.Controls.DarkRadioButton basic;
    }
}




================================================
File: PandaObfuscator/mainForm.cs
================================================
ï»¿using Core;
using Core.Protections.StringEncoding;
using DarkUI.Controls;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PandaObfuscator
{
    public partial class mainForm : Form
    {
        public mainForm()
        {
            InitializeComponent();
            pandaModuleManager = new PandaModuleManager();
        }
        PandaContext pandaContext;
        PandaModuleManager pandaModuleManager;
        PandaEngine pandaEngine;
        private void mainForm_Load(object sender, EventArgs e)
        {

        }

        private void darkButton1_Click(object sender, EventArgs e)
        {
            OpenFileDialog op = new OpenFileDialog();
            if (op.ShowDialog() == DialogResult.OK)
            {
                darkTextBox1.Text = op.FileName;
                try
                {
                    pandaContext = new PandaContext(op.FileName);
                    pandaModuleManager = new PandaModuleManager();
                    pandaEngine = new PandaEngine(pandaContext);
                    darkSectionPanel2.Enabled = true;
                }catch (Exception)
                {
                    darkSectionPanel2.Enabled = false;
                }

            }
            


        }

        private void darkListView1_Click(object sender, EventArgs e)
        {
            try
            {
                DarkListItem darkListItem = darkListView1.Items[darkListView1.SelectedIndices[0]];
                PandaProtection pandaProtection = pandaModuleManager.pandaProtections().Single(t => t.Id == darkListItem.Tag && t.Name == darkListItem.Text);
                nameLbl.Text = "Name: " + (pandaProtection.Name);
                idLbl.Text = "Id: " + pandaProtection.Id;
                DescLbl.Text = "Description: " + pandaProtection.Description;
                authorLbl.Text = "Author: " + pandaProtection.Author;
            }
            catch{}
        }

        private void darkButton2_Click(object sender, EventArgs e)
        {
            new addForm(pandaContext, this).Show();

        }

        private void darkButton3_Click(object sender, EventArgs e)
        {
            DarkListItem darkListItem = darkListView1.Items[darkListView1.SelectedIndices[0]];
            PandaProtection pandaProtection = pandaModuleManager.pandaProtections().Single(t => t.Id == darkListItem.Tag && t.Name == darkListItem.Text);
            darkListView1.Items.RemoveAt(darkListView1.SelectedIndices[0]);
            pandaContext.removeIGModule(pandaProtection);
        }

        private void darkButton4_Click(object sender, EventArgs e)
        {
            foreach(DarkListItem itm in darkListView1.Items)
            {
                PandaProtection pandaProtection = pandaModuleManager.pandaProtections().Single(t => t.Id == itm.Tag && t.Name == itm.Text);
                pandaContext.addIGModule(pandaProtection);

            }
            if (basic.Checked)
                pandaEngine.runModules(PandaState.Basic, pandaContext);
            else
                pandaEngine.runModules(PandaState.Normal, pandaContext);

            if (pandaContext.Write())
                MessageBox.Show("File Obfuscated!");
            else
                MessageBox.Show("Cannot Obfuscate the file for some reasons!");
            reNew();
        }
        public void reNew()
        {
            darkTextBox1.Text = "";
            darkSectionPanel2.Enabled = false;
            nameLbl.Text = "Name: ";
            idLbl.Text = "Id: ";
            DescLbl.Text = "Description: ";
            authorLbl.Text = "Author: ";
            pandaContext = null;
            pandaEngine = null;
        }
    }
}



================================================
File: PandaObfuscator/mainForm.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAHAAAABwCAYAAADG4PRLAAAABGdBTUEAALGPC/xhBQAAJDlJREFUeF7t
        nQd8VMX2x5EuRaR3kCJIBxEBKQJPlKYCoUgRQVCKiOh78gexIKI0KQKC9N6b1AQIkEBICAkh9BZ6LyE9
        pJ//+Z2bu7m7md1skg2S93I+n+8n2bv3zs6dc2fmnJkzc7MRURaZGOXBLDIPyoNZZB6UB7PIPCgPZpF5
        UB7MIvOgPJhF5kF5MIvMg/JgFpkH5cEsMg/Kg1lkHpQHs8g8KA9mkXlQHswi86A8mEXmQXkwi8yD8mAW
        mQflwSwyD8qDWWQelAezyDwoD2aReVAezCLzoDyYReZBeTCLzMPzInmYgkxF5k2mFfMO05Z5i6nLVGde
        Zhwu2bNnz5YzZ47ET2p54YUXEv/LEsjbzL+Zecxu5jhzhrnLxDJ4tHQSmHAmkDnPuDGrmLnMl0wzJh+T
        ZoECc+USBeZilGllKVArmEnMVcaoIEfwmNnLzGAGMLUZeyU/K2ccc5T/xwOEB+UYgwekN1OW+Z9XIJrI
        k4xZwXOhUIUK5ahKlVeoQf061LVzR/q0fy/q/VFX6vJhe/7rRH1696APP+hA/2rzNtWrV4eKFStqloYN
        LjOLmTaMNSnFXGNU1+ugRdjCee3Gf3MyaZFGzFBmCjOTGc20Y/D7mUJqMKZCqVunJo0dPZJWLvuTDu7b
        Qm6uf9NRj910/pQHXTzjSceOOPNfL+6jjRJNCTFP6OHdy3TSz4N2bltPkyeOo34f96LmzZpQzpw5jYVu
        yVkGTXZ2xijrGNN5jd6oT3Vq16CiRQobrzVym5nPNGRSkqYMzg1gVGmBaOYgM4iBDfDcSnlGMv12i6Z0
        6awXXb98nHw897ACt9LBvVvI1WUTOe9YS7u3r6G/Ny2j6wH+RLHBFPbkFoUH36GnYfco9ukjooRQVmas
        plOTPKXLF/zor7l/ULt2bS0LyQgK04nR5SZDOXLkoCkTf6SzJw+Tt4ez5GP2zN+ob28nql+vtiodsImp
        w6gEXYXqGls8YsYyz6XAOEA/RT26fcjK86Vd21ZLQVmyfcsK2rt7AwU/vkGRofcoJPCmTUJZwVHhD1iJ
        MZouWU77H6VxP31HjRo1VBUU2MKgT96Az7ly5ZIHyO/YftrnvJEOH9zOD5eLPGREEXT6lA8NGjhAlQ5A
        c2iUrYzqPHtBVwML/LmTwwyVL1eWjrjvlKZTpcBtm5dLrQwLui01T6U0awQ/uk6RIXe50BNEkUSRtHPH
        Zm4aX1cVFJpVF/3z/D+n0glWoJ6PTesW0eXzvpKGLufPHKdv/zOSShQvbpkWLGO4P7COLb9LK5OZ50q+
        YSRz06b8TOe4uUJzaVQe2Lx+MfeHe6RWoXapFJUSqL0gLupxYtFH07y5s6hixQqWhWRizKgRdOWCt7QM
        O/9eJXl7dC9A8oEHI+zJTU4nXlILDrxHU6dMpAL5X1Sm5UB2Ms+NvMJIxtq0aUEXTnvQnl3rFApcRD5e
        +yg64lGaFWgk6OE1io9+IgUfFRlMM6ZPpoIF8lsWlFjBqIFovtEHu+/fJi2AsRXQHozrnFKEpHf39jXq
        5vRhsrQczDLmuRF/hrLnyE7rVs8n36N7k9XCLRtQA11YgQ8dokCBCz7o0TVuWcOk4O/cClD2acuXzKbj
        R/dxHpaQh9tO6YNVeRBFIr1EmTZ1YrK0HEwH5rmQ/oxkqm/vbuI2GJUH0Afu37NZCio8+G6ywksPSQUf
        JwXv5enGLkhTU0F9PWJwwtWLxxKgwEMHtkvtQ1+sSgvgoYh5qjXTmzeuMaWTAYQy+Zl/XOAIP2DopZcK
        0o6tq+gYuxLGWog+aMfWlXT35nmphXphhXIfZCy89IA+LTzolhQ8ZPrvWg3Kkzt3nK/X3hjnHWvEkELt
        S8mQkrSCb0s63kcPU5HChSwL31FgyPG5EDi4GN+kvn26s6V3NFkzCgvw0jkf6bukkKQJvJ6s8NILapDe
        P57wO0od2rel334ZE31gz6Z4uBNPuP+0x5VB/kIC0TcS3b4ZQFWrvKJSgCPA4L5D5V8Mhoa2MzClTzNw
        li8wvswJBv2eFwOLCoPXPzGRDPtfOaW/8TvmauYX4pjXYWdTP6gZDygkdQGmB9SgkMAbUvjwJf19D8Wx
        ERO3ce1Cun/7olkrYIuk5pkoJOghNW7UQKWA9ILhwXRLSWYCY2uIKCWkBoL33m1N1y/5skW63qRAKBMO
        vbEAHdmEqoAitQGBCLpz4xytXTmPjaz9plbAXoIeXhElUkIMtWnV3PK+HQHGVdMswxhM7Zgliv4MQ04t
        mjWm1pzp9zu+S926dqLuTu+TE//tyE0TzHRrY4zTJo+jqxd9pE+EAl12riPUAH9fdy6HIH66Hd982gJK
        u3HlFJ3x96CIEPsMKWMLoSkRgwnx1KplkpHkIJYyaRKM6psSqlenJo388nOaNeM37rMWk5vrVjp2xIX8
        fQ7QmRPuMq54jq1Mf9/9MiyF4amt3DTOmv4r/fvroeTUuQNVr1bFlN6kX8eKCQ/lQYmogTAm0IQ+DWNn
        OoOaUBX4LdT8p2H37ep7kUechz5TbymSlBhDlStZH0BIAxi/TZO4MpQv34s0d/ZkuhFwnK5d8qGTvgfI
        89AuGRpDx4+mEKAZ3LRuoTjG50550u3rZ+nRvUtcKHf5wQxiS/4JBT4IoCPuzjTuxzGs1C/YfdgkBgwc
        6d3b13ItXEAnfA7KoLbKH3vekH7wcdLnoEdXWYFEZ0/5qBSRHtCNpUqqME8ZKlAgP61Z8ZfMJMD4OH/6
        CHm67xSFwZpEDYICtm5cyoXvJgUfHx1EsewvxUSCRyaIm8ckiaCAC3508vghOrB3i6Sxnp39Vcvm0IUz
        R+02Jp4/NOt07eolKkWklcaMXQJNT2XEajRSqmQJatG8CX05bCArbw1duXCMLcfdXOgLZCwRflxCTLA0
        Q/Y0f3CYoVT0P/j/5tVTrEx3ceoxNopjtpzq5xXce3jIHVHin7OnmpWhDia2VcdtgKiDFOVbJpnBouLl
        Qi9R/34fSd91I8CPrccLUrv0G7C8qZSA8wxlotbyAxDPiotLTCchkWTX/BMEPboh/Z7qOyPoH6PCH4oS
        R/17eLLyS4MCv2OsSgEGMSGqC21SvFgx2rZltWQ0LuoJd+RXlTeUGlh5CSDxszUF/mNKtfcBxaBBQlwE
        2zVRVKVyuh39UYxVgdOtushu/m/UN6LEhNhQhyjxvwXd0T/m5aost1SAMWWljGNUF6SaYUMGSmY1Jabc
        zPyvEBGijZsO+fwTZbnZSTUmmdRnVCenmaGDP5XMxjzl5pSfPtUN/Rdg1nyjSYWxpY2xYjYfoR4gKvEv
        5hKfMkRvNKyvLLcUQMiFUjIiXpOGDxskmY0IdezU0HOEKBAPKAKvdInk+w246EenThxha9qDzp85RqdP
        eErwVXy0NgUV+PCGssxSYAyTTLowqpMdwvatayXDwezYWtx8pkczYvTBcKLdOzdTr55OVLVKJcqTJ4+p
        DHJkzy5/c+fORQ3q16U5f0yV89327zKdYyfFmGSyh1Gd7BBKliyREBkemBAbHZImt+J5BQaaPh114dxJ
        6tjhPeX9W6NK5Uq0ZeNKcuryAWVPVHAKzGaSSRFGdbJD+Zb9H0hmGBKzByhP78smjP9Jec+gTp06NHjw
        YPr666+pbdu2VKNGDbOaCSq9UiGlwGSdokwyQaCr6mSHUrFieXYOQ8RBVxVIZgL9XVwMAozjqVPHdsr7
        hUK2bNkiCraU+/fv08aNG6l3795UuLDVKHBLfmWUgrk91QUO5fUG9fh+Iykq/L6yUIygltpZU/8RBx5T
        TJBPPu6pvFfwwQcfyDkpSUREBH322Wem6zAqoxiZwcCKVcH8kuUFDmfmtN8kw6o+UDO9EaOihetZlYRQ
        0/mJ18YxsYn/PxMw8QvZumml8j51hg0bJufZK/Pnz1elE894MDbXTWBZlupih/Hii3m50PnG48OTCoI/
        h4r1Fq3dAcvN6+do5bL5NHrUSHZ0B9DM6RNp2eK5XFiryMtjnyxs0QUm+z/hW0ZH3Odfj6fatWoo71Vn
        xIgRWkZTIUuXLrVM5wiTongzlhc6lJ49ukoGw4O0QhADgPtDyNWAU/THzCnUzakLFSxYUHm9TtGiRWjI
        4IHkftBFroVgeOpZWrYISTzld1iZPyM9e/bUMphKqV/fzLnHghesK7EpydbtORrM8eGpRUFr1htqXRR9
        /dVw9otyK68Br1SqRHXr1qVy5col+65161Z0ws8T98z9pVmzmmHgNyCTJ/6cLD+WlC5dWs5NrcybN88y
        LSxJsClXGMuLHEaH9u9KxjAGiGkV+IIINUDsjOp8mNiTJk2is2fPynW6nDlzhhYsWCDGgfH8XTs1Sy8i
        +I70T6qCdxRPQ+9RQnw0vfOvVmZ5sIavLxbHpE4CAgJkuZshHQSP2ZSUVqimi7mztREHKE8fyP3s077K
        c4sWLSo3kJL4+flRhw4dTNetXLZIjmPiNCNrIkLzH969RIUKvWSWb2sMH675vqmRsLAwKlCggGVaDRir
        coOxvMAhoHm8fydA5sFgcEA8D7kozwVz586Vc+yVL7/80nTthnUr5VhGNqdQ4L1bF9l3e9ks39ZATbp8
        OcnwskdCQ0PZ6Eu26mkaY1WwbNjyAofw4/ffapkKxIw0rDeMwFsPeE3tzUJ69eplut5551Y5FhKYMdYp
        gqvwcJQrW8Ys37ZAq3L1qhbcZEvi47Wla6dOnVKlYzMSTZYZOxo0A5FhDyg+NkyaT8g+l83Kc3XSokBI
        1apVTWncuH6ea0oMF7Tj+0OKYwVyS1K6dEmzfKcERltcXV0Tc2tbmjdPsg0sHHqrYfXpibC2ysQJP0iG
        QuDvPdGst4/7Wh+5ADt27JDzUivoE/U0+vFvQCK5v1UpIT3ERj1iAum16tXM8g3QJzdsaHVJt4Cx0LVr
        19LDh1p8DATDajB2Zs+eTfXq1TM7/+VChahI0lCbM6OUXYzZhemlbJnSFBX5hOJiwqTJSYgNoTC2EotY
        3/1B2L59e+JtpV5atmxpSue0/xE55uhaqK9C6siWtTHfq1atkuMQWMrG71Sgj4O/V6tWLZtuFMaPnbq8
        r3+OYHIzycThY6EL5k2TmwkP1sYzIS47NyrPNTJy5Eg5Ny0Ci09Pp1XLZnwkVkZNEgvfYWOmkKmTx5t+
        q2TJknLMKIsXLzZ9nx6wZGHen9ONRlNnJplgAxuzC9PDq1Ur0Wk/N3ry8IrEhOo3PWvGZOX5lgQGBsr5
        qZUPPzRf6oyYUoyaWCogvSBNBBrrv2PNYd+6datZftLKab8j5NTV5Pv6McmkOGN2UXqYOvFHOn/qMN29
        eU5W+2g3TfTd6G+U51vSqFEjOT+10rp1a7N0Fs6fJcctFZBeosIRNhEvsyv4HRga1qzMvXv3ioKN+Uot
        MZEPaf7cmcZj2DQpmWDdnvGkNPFa9ar85B+QAF8s0UI4PIJ0MfLSqaP9s9VNmjShx4/1HSbskzJlzE37
        EcMHy/HUTCCjv45AFHUsQv61YCTk3zjCo89GbFy3xPRbffr0kWMqefr0KS1btowGDBhAJUqUMMtjSsCW
        gFy5eNx4fA2TTPIyYYzxxFQzdvRXdO2yj2wVcj3gpEzeQokUH2Z6Yu0FfQtuPCREG/S2JShAy+vxwODB
        sWd5GBSnx2xCQp7clGCkU34e/CmCwoLMR3iiuFZAGr5e1/R7u3btkmO2JDw8nH7//XfLoTKr/OcbfSQn
        3nKvG+XMPLaANJ6UatavWSBLxLDC6NwpLwmNx14t8Wx+16xRPdn59jyR8KG6dOlCM2fOJBcXFzpx4oQ0
        WdeuXSMPDw8aMmSI8jpsjodBc70ftgUGGlBI7gd2UZcPO1LFCuVN6fw24Sf+LtZsXQbiXHHs0YNbVKhQ
        0gwK8maPLFy40HSNLW5cPUsJ8VrYBqbZDN9h3zelYAGn8US7qVXrNfL32U97nTdIDTx70pMVGKjVwIQw
        sxjI4sWL07Fjx6R5gQmeP3/yfVvSS+tWLfi2o+yKAEiIi6SAi8oRECpblpuxuBDZp814jV5j/Y57cj+o
        nYswis2bN8txWzJnzpxkv2PJ8qV/ybnycMWH8wN001hOWL5uVQYzZonZw7AhA2TNIFYmYa+XC2e8pQbq
        fWC79/5lOnf8+PGSOV1Qo6pVS+4cp4fuTp05ZfuaUMiShX+YrjVGiCE8MCH2sdyL8RqtSdX6w6Ne7lSw
        QD7TNV27diVnZ2eKjbXclI/I29s7xSZ0/Ljv5FzkXeuXNf8TmzAYzoPxaVWwkwRMVuMFNlm66A/y83aV
        NYJGBeoFNGtmkhuBZs9SoqKipKM3ppkeRn37laRrLHRrxEYH06P7t6hYUc3fyp49aQgLS+jQvKp2qzAq
        8WrAOSpV0nwPNcxjOjk5yQM7YcIE6tGjh9n3KjDXCMFqJgxB6r8DmTPLbHkaditOUbATH0YAjBcmo0rl
        iuTjtYf2cfMJCxRNKHwlNKHIAGrCGf8jpvMx52fNOMET+tFHH5mlnxY2rF2K5BAzk6ITrzeHJ457UeGX
        zfd5OXrkAGc/1syIMbuWjwc/1q5/cO8G5z1lJamoXOkVmjN7uqQTHflYZm+MvwP/09/3kPEau8ItIKWZ
        P5goxpiACeywG2DY7wUKvHgWNVBTYFz0E4oIfSCLQvVrhg4dKpm1JmhW0VekxY8qWKCA1uzEh9k9AqMr
        4db189Snd3fZRHbdmiVyDBvdqa4xokUaaDtAHdjvQu3bmQ+3WaNs2bI0c8ZUbgW0bcDQbKpifRJiAtkg
        DKQK5c2iE5TWqDUpwyAEHyuYsC+MvlVI1NzZk6NO+h4U5ekKxPJqLKmWDCCgiQXTS4nXCD4+PnLclty7
        d48tvdTtfgRLEgIlWhaENVCTksI9sDmBts0kwubtHVNFTRY/MlGOHnGlKZN+puHDPqPu3Tqzf9uIGr/Z
        kC3kltS/X2/ud+ewy6KFKMJQgo9praZrUXtEvXt1N95rJyZNgu3/RYEliheLdD/wd6Rx/09s1ON5aLeY
        8HCkkSlYeg/vX4vPmTMHQuUkA7CqLl26JBmzJaNHjzZmOkW8PffxVQlWC8MWuAa1wB7r1RpQhPm+pbpg
        gScCgpM2p6V4TFFZVxzAdwAy4eexxnu16k6kJDByJJF+fbtzc+lptl0WNqzDRgWYHccTiUxovhbFrF4x
        P4ivM230g0g0xLvYklmzZhkzbZOPesD6xOqg1G0Wm5Gg9sAax0MRHfFADCKjX2kvkNUrzHxImzP1tgQv
        5pBEZk77hQ2UQ2YKxI4VADst6eOheIJQI1niB/TvbVIggFGzbds2yaBKsL7AeL41sAHrk8fYxiTKZMGp
        QF7QMmCcMTZxtCiGga+Hfgabq1M8agqaUQBnGuv7+H+pQdzMxgYp+6qMBOJsPquznEmTYAt9SWThvGky
        +qIrD0CZWzcuoWuX/c38J4xgxEZpUWlfDPvcmBEBsZRubm6SUcj169fNgpdSwv2AFi+a0jI2MVjiOR+x
        wZyfx5qy4oJl1CiKawjmLhFEfO3ySXbwT9DlC8fp3ClvWdt379YFOnPSSx6QqAhYi46dc7QFjKRjXvuN
        fuo2Jk3yF0OF2OTG1pDYhcmoQKANp3nKZgfGTDyRoF48xdwcrFyinORFiETjxo3tHjOEdXvcR3tNAaK9
        bfUnIC42ig7t20416telYrVqUJkG9ahkvTpUpOZrlJ8d91yw9IoXo2wYJnuJyZuHsiG8IVdOypY4N9fy
        7eb8a3HSJKp+IyPgu6NHdwOM84MwJtMkmN6nWjWry94wrs7aKwOMbF6PHQddpAZazgig6UE/ALl3O4DG
        jh3FBk3SSEZq6MbW3V1OAwKnOiXloe+BdO6jWXNdXshH9fhvXeZNpgnzFvM205Z5j3mXaS+fX6A2/LdJ
        bm152P4DOzmltBlLaYEdGomKMzz0ad5TG1tLyvimj9de2rt7YzIFog/Ebkt3bpyVfsXyJvFZCzXULLKb
        7H9NmfwLtW/flqpXq6oKraNSpUqIfzXyqy9o+dKF0qxpEiMugDF9a2jWYRy91rqFKOpSufK0r0Rx2lu8
        OLkyB0qWpIPse7qVLiN/zShTltz57/nKVYjNcGrbR4u/Uf1ORoAaeI/tiiJFiuhlkuZNYH0YavRGA/IV
        BWojMEaw5RbciX1cO2HIyO7viicVx+BnaUYCJE5qLPqeI4f20O4dG2XvGbf9O2VTHXNJPl+XEjBa4tgp
        LlW3ttQq5/y5aUH+vLSwwIu0oGA+mvdiLpqVI5vwV96ctJSf9pUlStAKVq6OGyu5M19bpHxFiuN+MDba
        fJw0o0ANhGFoCCzGyuo0CUbDqWaNaqJA/a0rKiVi28hjnntlKTKaTZvNDX+HzQG0CVVtGsVM2PAIT+d2
        W5gZuX3zPGXLnYvG1WpOQSOn0f0B39GDgd/Tg0E/0u1+o+hMp37k2rA5balWS5Q7g+91Pv+F8qDMXVxj
        x+bIRXlfzE9XLvlzxiKUv+VoxIjx3K8rD+DFJWkSvC5OIqqwLeTDO+fIff/fMhNhqURYpNh10N/XTfZO
        iwxNtncahrviDZ8zFKJwunpFmzpa0e5ToqU+RJO3MluIJjFT2J2Zxn3bpM1E49fQPVasR/P2tK5sefoj
        ezZa9FIB2lGqFE1g5eXIkZO8ZdI3Rvlbjgayz+VvowKVa+btEbzHTxKpXKkijfrPcPI4uIMCzntLbUT/
        pysQtRCf9ZooPhc3YwYlPmMFPqWTJz0pGytj1bufEE39m+i7hckZu5jox2WsUP5+xm6K/WEp+bXrRfPy
        5qC1qJWF2Url+9/uokeDq3/PkUBm/zHFqEDM36Ze2A/5xXJXBSjytwlj6eTxg4RxUShNd+51JW5YM1+2
        80cfh5149WE2VWYzCsykuyeuz9j2wRBNQSoFmlig/Z2wjmjOAbo7YAytyJOD/nxZswTnLtXWc6h+y7Fo
        Q2mDPzebcmvJpF6KFS2SrWyZUtizEgvvrzOmRBu+Xo/WrV4gtRGKM47QALyZBccwYw8FpmVIKT2guTt0
        eI/UQK8+o7RmM5nSFIxhRaJWznWnW+170a98Pe53/nJt5lz1Wzq4T4yvYiQKdgA+q86zRVx0oOx4Ve3V
        pF2OGXk5ZaqlePFi2SqUN12Ld0FgESJeTiEJI9QO2zEfZR/RuJk5wOfVy+fQ/j1bxDJ99gqMohOJK2w3
        dOA+cPoutcJUQIk/reD+cjMtrtdC0nDewzXYQoFoVWQ9iAy76YKBbRhmhoFsimelwrCzbUUjPYiHm9mm
        QHjbaNqkRIni2V6pWC7xk0nwElq8ccv0I6iBHm47TMrDZ/iG27csF5cA/eEzb0LZkg15ckNqoFOp17hZ
        dNUUo1KYitFc4/48SJNbagMBd25gIN649h/3o02fBfI9rlm1WKaT2rdrS83eakxt32lFX305hP6aO528
        2aLUFYpxWWu+bFji2hKkYyhfhIKmTQoXfjlbCa6FCsHgqvwAXp6IvbRdXZKcfPSDUCDGSOFWZITy8MLI
        eG5utHm9SIq28D/1+bq23TtJPukHNlTGr1YrS8kiopk76ZW8hahY9YqcEtciwz5w+sTwkcN7qUyZUsYC
        V9KiRTNatPBPSQd5tlSiFgFH7P9dstwMCC8Tc5hga+ZLjCSO/VOuXDwmG6FDaboCMdF73JufOgduYo7m
        B9NWxqYJzRIGnK9cRJhfuBzDQDUKQ2uOEuSVBsjr/OZOXKM4T6PnK5RlAWrqpK308JsZcu3k37XgLOMD
        gg2AggLvUj7DSFKxYsUkWPm9996jdu3aUcuWLeSY/j3AhkHYDBaiKxHNMCbFIRZL0vGSSYfICww2RL/H
        SOKj8R4+Ud5W2mlQHoArcf60l/iDjqh92tb+2k1fPOdLUyeNpx7du1G1atp6wbx58tBb3GwtWjA78Tw8
        4Ve479XGYRu/15Ly8Hni803clLISYcTMc6MOpasR3zk/KBjV4SY5MT/aw0H0y7ikCWisQBo4cCB98cUX
        9Pnnn8umPlhZPGjQIFkLaBwybP7WmxQfp0UCQIlaRB/e7fSL6RwGU3EOe3ky+r2HjMwcfPd/X9G9m6fl
        9QPGmqeDnewxUw8/MD3GCwpKG37jfubRLRo0sH+Km8W93bI5xcVqRkXgfSwkjeem/Ix8177Mq0SznDWX
        QqlErnmofXMP0p7uI+SaydMnSFoIF9HzhaYUbkrTJo3knEqVKsmqKUTbIVALq4kBps36fvyx6bsKFZLe
        K4Fob5JgXm3FLvpQ/btEvmccKlL7arxWTTY815pNc9chCS3k8OolbtoSlysbFWMvibP75H/CWzaKw+/r
        YIYfBYdN5WrXri2R3fp3TZu8QZHhwRQfGyFzhpBNm1bLdw2LlaXA77l/m72PaNxKTXFQ2hhWKCzPuW50
        fsTvcm69RvXk2mjzAQkZpnt49yLlzZtXzkNIITa6MyrPCBSJ71ErjXE/Td58XdL39TaLQgMYQHG44BXa
        Mh2ENz/jNeKqITWgW6H4HjVINUuREtoMBtGlC/5mN4emCE1S//79pVAQe4onHH+NT3inDu/I9TBm9AWb
        LruTloJt6Dqc6Nf1bKjsZrhWztrLbsMmWtVT21Dh1brVKTQIkQWx0qfq+dKaz3jyPXrQlBY2s+vXr59S
        eTpQIppWrO8w7mLYoF5tfhjNItbxyvJURaGlRuQN1Xiry6H92+iUn5tM9FpTIowZNLNoRmGNGhVkCxQS
        fEeIMVS/fPnyojgozFhgePLR16APMj7hri7a3jJwZTA4Djl3xpeatNEMhfxMj9I1aXaLHjSm/rv0YuJ1
        HZ3e5zMROhivnPWH4P32+u907tyZPv30UzOFqYASkfeOHTuarrXgEfvWb7wAiyOD5H1GfgyLWDCchre6
        pKREOPUP7lyS5hSjFCnVRt1E32RY2lW6dGnZWA7NkKqp0gunffv2pmuwUQ8kkmshflPvTyF72DH/dHB/
        qvp6LcpbsjAVqlSa2nbtQGsTY0Thmljz1yCL5icFYHXq1EkeHss8WQOGjuU6eQav9CvHCsyWkQqEmHzA
        BvVriwK1mmi9OcV8ISLYELWN2ojxUWtTTjgWHxtOjx/clKXH+m9169ZNmkkoSlUoAE0ZAomxZA3X4PqI
        kFtckbTdD4ExSkCTGAqHUYLYmUTB97YCmSCrlietIkKNsleBePj69u0rFmrlypVNaTDP9HXkMlMPYNS4
        uf4tL8jSX4alUiJqKdwLnGNUpL6wQy8cfTRi6Of9TTdXs2ZNuWFrRoIOvkc/Y1yGvXzpPEnPqAAT7FdC
        WeijEfNir88KWb82acdB1Ho04ao8qUA+ofBPPvmEcuXKpacTw1RgnplsYuTHixYtzL7ZT3TxrJdMN+2w
        YtwA1ETMVmB9BV7ADx8I/aPucsDJfXA3wLSrQ758+aS/szTRbYEmCv0lrkf4PAQxmyplpAUItsbU7x9O
        O5p2VV6sgXtBl9Cqldl+bAeYZyqzGFMGujt9oL1TMDF+1HKGQke3UvHaOrz06vQJD3mJFmoAZOjgpKkU
        bCuC2mer6TSCgkEz2qKFNggNXw2OfZQdC0DtBYMFl84d54dMqz1t2rQRi1iVH1ugycd+o3CH9Ptl0jZ1
        lA7pzYQwkgFMMyFSDdNM/r4HpMm0pkgARaJpxYz/cW9XOuK+21T74DJ8zI4wmhpVAVgDFiHW7iGNwoUL
        yaIVxIOqlJEWKAHrG66Zosbgh6I2qfJiCzxsUDyMIL38GLyP+JkLxkjXM6aMOHXtlLB88WwxcBCS733E
        2aYy4TOePXmIvvkqKRAYTjqaQ3ubTh3dxdDT0dbAO2orEu6j+WGAYHk30sdKZPSBqFGWebEHtBivvvqq
        Kb+MzV0LM1LgZsAcNmWm2Vtv0g/ffcP93kJxO6BMRHgf2LtZmlJdgVDuaT93iYDTr0X/AMtTddO2gJUH
        f7FQIS0wFuvOIWqFpAzcD20wQF+JG0tnz/ibViNjXhTr++3xBS3Bw4n+Hfk1jJdie+x/VPDiwjuMniGZ
        Inm7RVP68otBssoXUd6nub/EiA5qKZZtr1gy23Q+bgZPdGqbT4Dr0DTpfcuEn7+XYtetXVvWJgwp2XER
        6yYsNme/yP3eLz//QM2aJX/hcdOmTcUPTW1rAXAN+nmLPdjKM/+oYEuTgQyCUo0ZExBb8+47rWj4sIH0
        +6RxEkMz1PCmL7gOaelXgK5AfT3+xAk/JqrAXtG2HLlxFQP2W2jG9InU+cP3KXviJgcqMG2EZhRDZao8
        pQSutdiFagXz3EhF5jMGL1gOZhCWYQbX0NA8eXKbPjdv3jyUm89Qvrk0gWu5D5W03m7ZLHTpkvmhyxbP
        Df11/PehI0cMDf31lx9Cp0/9NXTC+LGhv/H/P/80JnTUf0aE9uzpFNqk8Ruh5cuXC+VWwJQfe3jnnXdC
        2Z1Q5iclWPGh3JSGcn+qp4cWDOszWbJl+39EggaEguIrJQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B30AAAAFAAAAAAAAAAAAAAAAAgICAAAAADE2OjvRkpyg/6m1uf/S3uL/4+7y/+Lt8f/i7fH/4+7y/9vk
        5/+coaP/cHR1/52jpf/M1NX/d2mh/5h39v+efP//jm/h/4qGn//l7/H/gISG/zY2N/9GRkb/Ojs7/4iM
        jv/Q19n/SEpK7AAAAE4AAAAAAAAAAAUGBgAFBQUHAAAAPxYXGL10fH//qLS4/8DM0P/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+bx9f/m8fX/6vX4/6mut/+CZsn/nnz//518//+aePv/ZVqY/9Xe3//Z4+b/pqyt/52i
        pP+/xsj/4+3w/+fy9v+lq63/DxAQsgAAAAAAAAAAAQEBAAAAADwxNTbpipSX/6ezt/+3w8f/2uXq/+Xw
        9P/n8fX/5u/z/+bx9P/m8fX/4+7y/+Lt8f/m8fX/paq1/35jzf+TdPr/gWbr/04/y/83N4X/1N3d/+Tv
        8//m8fX/5/L1/+Xw9P/i7fH/4+/z/83V1/8tLi/fAAAAAAAAAAABAQEAAAAARFtiZPasuLz/rrq+/9vm
        6v/l7/P/usDC/3yAgf9eYWL/bnFy/5+jpf/a4+b/4+7y/+bx9f+wt73/LSl//ycjkv8YF4n/DQ2D/09R
        gv/f6er/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/j7vL/1+Hk/zs9Pu4AAAAAAAAAAAAAAAAAAAAxTFFT7Ki0
        uP+9yMz/5O/y/o6Sk/5ISUn/nZ2d/3V1df8EBAT/BAQE/2BjZP/d5un/4+7y/9nj5v+ttbv/p6+1/6Co
        sP+coqz/v8jM/+Tu8v/l8PT/5/L2/+fy9v/m8fX/4+7y/+Pu8v/U3N//NTc46wAAAAAAAAABAAAAKgAA
        AH0mKSrwnams/8rV2f+9xcf+QkND/s/Pz//39/f/lpaW/wcHB/8AAAD/CQkJ/6Gnqf/m8fX/4+7y/+fy
        9v/S2tz/z9fZ/+jz9v/l8PT/5O7y/7vBxP+FiYr/dnt8/6Knqf/b5Oj/5vH1/8TLzv8kJSXWAAAACAAA
        AGwAAADfAAAA/wkJCf+Bi47/0d3h/4eMjf9zc3P/xMTE/0ZGRv8JCQn/CAgI/wgICP8AAAD/aWxt/+bw
        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
        d/xBQ0PfDQ4OjQAAADMAAACQAAAA4gAAAO8AAADVAAAAgAAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAICAgAAAAA6DxARnSQnJ74uMTPQNTY30y0vL8IbGxypBwgIfgAAAE4AAAAZAAAAAwIC
        Ak0ICQmHAgICYQAAACQAAAADAAAAAAAAAAYAAAAkAAAANQAAABoAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACwAAABQAAAAWAAAADQAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AAAA+AAAAfAA
        AAHwAAAA8AAAAOAAAADgAAAA4AAAAOAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAA
        AAAAAAAAgAAAAMAAAADgAAAA/gAAAf4AAAP+AAEH/wP//////////////////////////////////ygA
        AAAwAAAAYAAAAAEAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAABTAQEBqRITFOkwMzT7WF5g+llfYfoREhL6TU1N+ltb
        W/pZWVn6WVlZ+llZWfpZWVn6W1tb+i0tLfqanZ76z9PV+srP0PrL0NH6xMjK+qqxs/qJjo/6VVdX+hka
        GvoBAQH6CgoK+k1NTfpaWlr6WVlZ+llZWfpZWVn6WVlZ+lxcXPonJyf9AAAAigAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAPAcICKouMTLxYmls/42Xmv+jr7P/rLi8/6Ku
        sv8lKCn/Nzc3/1xcXP9ZWVn/WVlZ/1lZWf9ZWVn/WFhY/yorK/+9wcP/6fP3/+Xv8//l7/P/5fD0/+fy
        9v/o8vX/4ejr/8PIyf9VV1j/HBwc/1paWv9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/1FRUf8RERHsAAAAPAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAB4GBka52tzdf+lsbT/rrq+/6m1
        uv+msrb/rbm9/8TP0/9rcHL/HR0d/1paWv9ZWVn/WVlZ/1lZWf9aWlr/U1NT/zI0NP/S2t3/5O/z/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3y/+32+f9rbnD/Ly8v/1xcXP9ZWVn/WVlZ/1lZWf9ZWVn/XFxc/ysr
        K/8AAAClAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAI4sLzD4jJaZ/625
        vf+otLj/pbG1/625vf/G0dX/3ejs/+fy9v/Iz9H/JSYm/z8/P/9cXFz/WVlZ/1lZWf9cXFz/PT09/0xO
        T//i6u3/5O/0/+ny9f/m8fP/6PL0/+Xw9P/i7fH/4u3x/+bu8P9SVFX/NjY2/1xcXP9ZWVn/WVlZ/1lZ
        Wf9cXFz/R0dH/wkJCeYAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUAAAAAbSot
        LvmZpKj/rLm9/6ezt/+lsbX/usbK/9zo7P/k7/P/4+7y/+Lt8f/n8fX/hIeJ/xcXF/9SUlH/XV1d/1xc
        XP9YWFj/GRkZ/4eLjP/t9/r/0tnZ/46Rlf9vbn//e3yD/8XLy//n8fX/4u3x/+Xt7/9PUlP/ODg4/1xc
        XP9ZWVn/WVlZ/1paWv9UVFT/FRUV/wAAAN0AAAA6AAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAdCwwM1YOMj/+uur//p7O2/6aytv+2wsb/4ezw/+Pu8v/i7fH/4u3x/+Lt8f/j7vL/2+Ll/1ZY
        WP8WFhb/NDQ0/0NCQv8lJSX/QEJD/9fd4P/Fysz/XVdx/3RbsP+Pbt//gWXF/15Vd/+8wsL/5vH0/+ny
        9f9gY2T/OTk5/11dXf9ZWVn/W1tb/1paWv8iIiL/ODk6/0JDRP8BAQHPAAAAKQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAYBAQEt1NZW/6ns7f/qLS4/6aytv/S3eH/5O/z/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/5O/z/9zk5v+Pk5T/T1FS/zM1Nv9hZGX/zdTW/+Ho6f9kYHb/iGrS/6F+//+ce///oH7//4xt
        1v9kYHb/3ebn/+n09/+RlZf/HBwc/05OTv9YWFj/TExL/yMjI/8/QUL/ztPV/9HX2f85Ozv/AAAAnwAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAIDA8RPVVf/qbW5/6aytv/AzND/4+7y/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/p8vb/5O3w/9zl6P/l7/L/6/b5/6Sqqv9iT5P/oX7//5t6
        //+bev//m3r//6F+//9gTor/sbi3/+jz9//X3+H/YWRl/zEyMv81Njb/Pj9A/3Bzc//R19n/5/H1/+jy
        9v+wtLb/ERIS7QAAAEwAAAAAAAAAAAAAAAAAAAAACAgJAAgJCQkCAwM/AAEBlhobHOtpcHP/qbW5/6Wx
        tf+rt7v/2uXp/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/i7fH/6fT2/4OG
        kP98X8H/nn3//5t6//+bev//nXv//6F+//9MPJ3/jpOX/+rz9v/j7vL/5O3w/9LY2v/L0tT/2+Hj/+jx
        9P/k7/P/4u3x/+Lt8v/j6+7/RkhJ/wAAAJsAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAE4KCwvrTVNV/5Se
        ov+suLz/prK2/7C8wP/W4eX/4+7y/+Lt8f7i7fH/4+7y/+Tv8//j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/6fT2/4OFkP+BY8X/pIH//6F+//+fff7/knTz/1tJ0P8REID/jZKV/+rz9v/i7fH/4u3x/+Tv
        8//l8PT/4+7y/+Lt8f/i7fH/4u3x/+Lt8f/p8/b/en19/wAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGAvMjP8qra6/6q3u/+msrb/rrq+/9rm6v/k7/P/4+7y/+jy9v/l7vL/2+Tm/9Ta3P/b5Ob/5+/y/+nz
        9v/j7vL/4u3x/+Lt8f/i7fH/6fX4/4uQlv9PPqX/alXg/2FO1v9HO8X/JSGv/xMTqf8PDnn/oKap/+n0
        9//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/q9Pf/lZuc/wECAt8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFk1OTr6qLO3/6ezt/+msrb/ztnd/+Tv8//l7/P/4Ojq/5+jpP9TVVb/MDIy/yEi
        I/8yNDX/Wlxc/4+TlP/a4uT/5O/z/+Lt8f/i7fH/6PP3/6Knpv8QEFz/DAx2/woKc/8HCHX/CQp4/wsK
        e/8iI1r/xszK/+Xw9P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/p9Pj/oKiq/wUF
        BeUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQkJyfxoq2x/6ezt/+rt7v/3ejs/+Xw9P/S2Nv/VVdX/xwd
        Hf9oaGj/k5OT/zk5Of8AAAD/AAAA/wQEBP9RU1P/1tzf/+Tv8//i7fH/5O7y/9Xe4P+aoaL/lJua/46V
        lP+Eio3/foOJ/32DiP+coqX/4+3w/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/q9Pf/mJ6g/wIDA+IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8SFBTokJue/6i0uf+zv8P/4u3x/9/o
        6v1SVFX8Gxsb/6ysrP/7+/v//////6+vr/8JCQn/AAAA/wAAAP8AAAD/cXR1/+fw8//i7fH/4u3x/+Pv
        8//p9Pj/6fT4/+35/P/v+vz/6/X3/+r1+P/o8/f/4u3x/+Lt8f/l8PT/6fL2/+bu8f/j7fD/5u/y/+jy
        9v/j7vL/4u3x/+Lt8f/q8/b/hYiJ/wAAANUAAAAAAAAAAAAAAAAAAAAgAAAAbgAAAK0AAAD2Z29x/au4
        vP+7xsr/6vT4/6SqrP8VFRX/o6Oj///////7+/v/2NjY/2VlZf8BAQH/AAAA/wAAAP8AAAD/HR4f/8nQ
        0v/l8PT/4u3x/+Lt8f/i7fH/5e/y/8DGyP+3vb7/4+3x/+Lt8f/i7fH/4u3x/+jx9P/Kz9H/fH+A/1FT
        VP9DRkb/V1la/5ugof/d5Of/5fDz/+Ht8f/o8vX/YmVm/wAAALUAAAAAAAAABwAAAFsAAADOAAAA/AAA
        AP8AAAD/OT0+/6i0uP++ys7/6/T3/2dqa/9FRUX/9PT0/+Pj4/90dHT/Hx8f/wICAv8AAAD/AAAA/wAA
        AP8AAAD/BAQE/5ygof/p8/b/4u3x/+Lt8f/m8fX/t7y+/x8gIP8fICD/xMvN/+Xw9P/i7fH/5u/y/5qe
        n/8yMzP/Ozs7/1tbW/8yMjL/AAAA/wcICP9JSkv/yc/R/+bx9f/c4+b/Njg5+gAAAHIAAAAFAAAAdQAA
        APMAAAD/AAAA/wAAAP8AAAD/FRcX/5Wgo//AzND/5e/y/0JFRf8vLy//m5ub/z8/P/8BAQH/AQEB/xYW
        Fv83Nzf/RkZG/zIyMv8EBAT/AAAA/4OHiP/q9Pj/4u3x/+Lt8f/o8vb/qa6w/x0eHv8UFRb/tb2//+fy
        9v/n8PT/kpaX/zY3N/+pqan/8fHx///////U1NT/JCQk/wAAAP8AAAD/QEJC/9ng4v+6wML/EhMT4AAA
        AC4AAABRAAAA6wAAAP8AAAD/AAAA/wAAAP8AAAD/AgIC/211eP/I1Nn/5e/y/0dJSv8AAAD/AgIC/wAA
        AP8KCgr/bW1t/83Nzf/t7e3/9/f3/+Tk5P9NTU3/AAAA/4uOj//p8/f/4u3x/+Lt8f/i7fH/4+zw/8rR
        1P+6wcP/3ujr/+fx9f+8wcP/Li8v/7S0tP//////9PT0/8DAwP9vb2//DQ0N/wAAAP8AAAD/AQEB/4+S
        k/96fH3/AAAAowAAAAcAAAC1AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/ywwMf/Ez9P/6/P2/2Jk
        Zf8AAAD/AAAA/wAAAP9vb2//9/f3//////////////////////+Kior/CgsL/66ztf/o8vb/4u3x/+Lt
        8f/i7fH/4u3x/+Xw9P/n8vX/4u7y/+jx9P9namv/S0tL//r6+v/o6Oj/ZWVl/w8PD/8BAQH/AAAA/wAA
        AP8AAAD/AAAA/1BTVf89QEH0AAAATAAAAAAAAADjAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wQE
        BP+MkZL/8Pn8/4uQkf8BAgL/AAAA/xAQEP/CwsL///////////////////////////95eXn/Q0ZG/97m
        6P/j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+7y/9vk5v80NTb/Ly8v/7Kysv9XV1f/AgIC/wUF
        Bf8uLi7/WVlZ/0pKSv8gICD/AQEB/yEiI/8PEBDHAAAAEgAAAAAAAAD1AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8uMDH/1t3f/8vR0/8hIiL/AAAA/xcXF//T09P//////////////////////8fH
        x/86Ojv/rbK0/+fy9f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5PD0/9Db3v8hIyT/AAAA/wkJ
        Cf8BAQH/CwsL/39/f//l5eX//f39//j4+P/Ly8v/KSkp/wAAAP8BAQF/BwYHAAAAAAAAAAD0AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8CAgL/jpOU/+72+f9/g4T/BAQE/wcHB/+Ojo7/9PT0//7+
        /v/t7e3/sLCv/0pLS/+anZ//5u/z/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5fD0/9Da
        3f8hIyP/AAAA/wAAAP8AAAD/ZGRk//j4+P/////////////////7+/v/TU1N/wAAAOwAAAA5AAAAAAAA
        AAAAAADvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/Q0VF/+Do6//h6ez/foGC/yor
        LP8WFxf/RkdH/2BgYP9JSUr/UFFS/6mtr//m7/P/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+Hp7P9GSUn/AAAA/wAAAP8ICAj/s7Oz///////////////////////n5+f/MDAw/wAA
        ALAAAAALAAAAAAAAAAAAAADiAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DA0N/660
        tv/o8/f/5/H0/9bc3v+rsLL/kpWW/6Ckpf+3vb//3ubo/+fx9f7i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+nz9v+NkJL/BAQE/wAAAP8VFRX/y8vL//////////////////X1
        9f+CgoL/BQUF/wAAAKcAAAARAAAAAAAAAAAAAADEAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/4CFhv/p9Pj/4u3x/+Tv8//o8vb/6fP2/+ny9v/n8vX/4+7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/c5Ob/XF5f/wMEBP8HBwf/jo6O/+Dg
        4P/U1NT/qqqq/15eXv8MDAz/AAAA/wAAAPsAAACFAAAAAwAAAAAAAACCAAAA/AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/Ghsb/7vBw//m8fT/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/3ubo/4qN
        jv8tLi//FxcX/ywtLf8lJSb/P0FC/0VISf8DAwT/AAAA/wAAAP8AAADmAAAAMwAAAAAAAAAoAAAA0gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8PDw//j5OU/+bw8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+jy9f/V3N//t7/B/7C2uP+5wML/ub6//y0uL/8AAAD/AAAA/wAAAP8AAAD/AAAAhgAA
        AAAAAAAAAAAAVwAAAO0AAAD/AAAA/wAAAP8AAAD/AAAA/xUWFv+Pk5T/5u/y/+Lt8v/i7fH/4u3x/+Lt
        8f/i7fH/4+7y/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/5/L2/+nz9//n7/H/VVhY/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAwAAAABEAAAAAAAAABAAAAFUAAADHAAAA+wQFBf8VFxf/PkJE/46Xmv/a5Oj/5fD0/+Pu
        8v/j7vL/5fD0/+bx9f/k7/P/3ent/9fi5v7h7PD+4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Lt8f/i7fH/4u3x/+fw8/+MkJL/CAgI/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAzAAAABoAAAAAAAAAAAAAAAAAAAAZAAAAsTI1Nv+WoaT/r7zA/6+8
        wP+yvsL/ztre/97p7f/d6ez/ztfa/7i/wf+9yMz/rLi8/8DLz//j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/6fP2/6On
        qP8UFBX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuwAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAQAwN
        Ds4xNTb7TVNV/2JpbP9qcnT/anJ0/1phY/8/Q0X/KSwt/3F5fP+otLj/q7e7/9zn6//j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5O/z/+Pu8f/X4ub/4u3x/+Lt8f/i7fH/4u3x/+Hs
        8P/p8/b/v8PE/yYnJ/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAjwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAB0AAABdAAAAkAAAAKACAgKfAgICnQAAAJAAAADPODw9/6i0uf+msrb/vsrO/+Tv
        8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lu8v/o8vb/1dve/7bAw/3Ez9P/5O/z/+Lt
        8f/i7fH/4u3x/+jx9f+2u7z/Kywt/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADwAAAAQgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgMDQ3ZgIqN/6y4
        vP+lsrb/z9re/+Tv8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5vH1/+Ts7v+mqqv/SkxN/pSf
        o/3N2d3/5O/z/+Lt8f/k7/P/6PH0/6Glpv8fICD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACWAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHE0ODn+p7S4/6ezt/+ns7f/1+Lm/+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+bx9f/n8PT/v8XG/1td
        Xf8MDAz/QkdI/6m2uv/M19v/5vH1/+nz9v/b4uT/hIaH/xQVFf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAMcAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACAMDA7FudXj/sL3B/6i0uP+ns7f/1ODk/+Xw9P/k7/P/5vD0/+fy9v/q9Pf/4+rt/7/F
        x/9ucXL/GRka/QAAAM4AAADkcHh7/7K+w//Ez9P/1tze/46Rk/86Ozz+BgYGxwAAAIkAAADmAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD6AAAAuQAAADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEgMEBM9VW17/lqGl/5+rrv+lsbX/wszQ/97l6P/W3+L/x87Q/66z
        tP+Giov/SUpL/xUWFvoBAQHaAAAAggAAADAAAADHRElK/211eP9NUlT/Kyws9wUFBdEAAACAAAAAHwAA
        AAIAAABQAAAAvgAAAOkAAADzAAAA6wAAAMIAAABsAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAG8EBATOFBYW6SMlJvQwMzT8MjU2/zc4
        OP4sLi73GRsb7Q0ODt0DAwO6AAAAkQAAAF0AAAAjAAAAAwAAAAEAAABOAgICswIDA78AAACXAAAAVgAA
        ABoAAAACAAAAAAAAAAAAAAABAAAADwAAADIAAABIAAAANAAAABEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAWAAAAMwAA
        AEYAAABcAAAAaQAAAGIAAABPAAAAOAAAACMAAAALAAAAAgAAAAAAAAAAAAAAAAMDAwADAwMBAQEBCAAA
        AAoAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/4AAAAAEAAP+AAAAAAQAA/wAAAAABAAD+AAAAAAMAAP4AAAAAAwAA/AAAAAAB
        AAD8AAAAAAAAAP4AAAAAAAAA+AAAAAAAAAD4AAAAAAAAAPgAAAAAAAAA+AAAAAAAAAD4AAAAAAAAAPgA
        AAAAAAAA4AAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAD
        AAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAACAAAAAAAAAAIAA
        AAAAAAAA4AAAAAAAAADwAAAAAAEAAPAAAAAAAQAA/+AAAAABAAD/4AAAAAMAAP/AAAAABwAA/8AAAAAP
        AAD/wAAAMB8AAP/gAeH//wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAAoAAAAcAAAAOAAAAABACAAAAAAAADE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAABlAAAAvAAAAPAAAADyAAAA8gAAAPIAAADyAAAA8gQE
        BPIGBwfyAAAA8gAAAPI8PDzyaGho8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZ
        WfJZWVnyWVlZ8llZWfJZWVnyaGho8ikpKfIAAADyOz4/8pmen/KWnaDyfIKF8mlucPJ9g4XyhYuO8nuC
        hPJ9g4byeX+B8m50dvJTV1fyNDc48hwdHfIJCQnyAAAA8gAAAPIAAADyAAAA8gAAAPIAAADyAAAA8gAA
        APIAAADyAAAA8gAAAPJERETyZWVl8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZWfJZWVnyWVlZ8llZ
        WfJZWVnyWVlZ8llZWfJbW1vyYWFh8hUVFfIAAADyAAAA5QAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAYwAAALYAAAD/AAAA/wAA
        AP8AAAD/AAAA/x8hIv9AREb/Y2ps/4CIjP+yvsL/X2Zp/wAAAP8AAAD/Kioq/2pqav9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/2dnZ/8mJib/AAAA/36E
        h/////////////////////////////////////////////////////////////X////l7/P/097h/663
        u/+Hjo//TU9Q/wABAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8UFBT/ZGRk/1tbW/9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/ZGRk/09PT/8AAAD/AAAA/wAA
        AKIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABhAAAA5QAAAP8AAAD/AAAA/wQEBP85PT//ZGtt/5Gcn/+yv8P/wc/T/8bU2f/AztL/zdzh/5Oe
        ov8AAAD/AAAA/wkJCf9aWlr/X19f/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1paWv9nZ2f/ISEh/wAAAP98gYT//////+Hs8P/i7fH/4+7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Tv8//o9Pj/7vr///X////////////////////N1tn/fYGD/zk7O/8AAAD/AAAA/wAA
        AP8AAAD/OTk5/2xsbP9YWFj/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WFhY/21tbf8zMzP/AAAA/wAAAP8AAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE0AAADTAAAA/wAAAP8AAAD/Njo7/3J6ff+bpqr/v83R/8bV
        2f+7yM3/rbq+/6i0uP+ns7f/p7O3/6m1uf/BztP/MTQ1/wAAAP8AAAD/QEBA/2hoaP9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9cXFz/YGBg/xAPD/8AAAD/maCj////
        ///i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Ds
        8P/k8PT/+//////////7////0NTV/0NHSP8AAAD/AQEB/1FRUf9iYmL/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WFhY/2FhYf9gYGD/CQkJ/wAAAP8AAAC6AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAAKkAAAD/AAAA/wAA
        AP9MUlP+k52h/8DO0v/G1dn/t8XJ/6m1uf+msrb/p7O3/6ezt/+ns7f/p7O3/6ezt/+ksLT/wtHV/2Zv
        cv8AAAD/AAAA/ykpKf9ra2v/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/Xl5e/1lZWf8AAAD/AAAA/8TO0v/8////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7fH/8Pz///////8/QkP/AAAA/xUV
        Ff9kZGT/Wlpa/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9paWn/JSUl/wAAAP8AAAD/AAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAWgAAAPEAAAD/AAAA/y8yM/+eqa3/ydfc/77M0P+ptbn/prK2/6ezt/+ns7f/p7O3/6ez
        t/+ns7f/p7O3/6CssP+bp6v/oq6y/7zJzf+2wcX/BgYG/wAAAP8JCQn/XV1d/19fX/9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/2JiYv9SUlL/AAAA/w8REf/i7vP/8Pz//+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//H+///f6/D/ERIS/wAAAP8sLCz/ampq/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1hYWP9nZ2f/TExM/wAAAP8AAAD/AAAAzwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkgAAAP8AAAD/AAAA/05TVf/Bz9T/wtDV/6ay
        tv+msrb/p7O3/6ezt/+ns7f/p7O3/6ezt/+otLj/oKyw/5uorP+tub3/xM/T/9fi5v/j7vL//////2Fn
        af8AAAD/AAAA/z4+Pv9tbW3/V1dX/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1hY
        WP9paWn/PT09/wAAAP81ODn/+f///+jz+P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/4////zdba/wUGBv8AAAD/QkJC/2dn
        Z/9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9aWlr/bm5u/yEh
        If8AAAD/AAAA/wAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAA
        AP8AAAD/ERMT/3+Ii//H1dn/s7/E/6Sws/+ns7f/p7O3/6ezt/+ns7f/p7O3/6ezt/+hrbH/maaq/6q3
        u//M19v/5fD0/+75/f/r9vr/5O/z//j+///c5un/BgYG/wAAAP8KCgr/Xl5e/2FhYf9YWFj/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/a2tr/x0dHf8AAAD/VVpb///////j7/P/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH//////6Ssr/8AAAD/AAAA/0hISP9lZWX/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9YWFj/ampq/0BAQP8AAAD/AAAA/wAAAL4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAP8AAAD/Jigp/7C8wP/L2t//qbW5/6Wxtf+ns7f/p7O3/6ez
        t/+ns7f/qLS4/6Ovs/+bp6v/qbW5/8XQ1P/k7/P/7/r+/+bx9f/h7PD/4u3x/+Lt8f/h7vP//////2Bm
        af8AAAD/AAAA/yoqKv9tbW3/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9YWFj/ZmZm/09P
        T/8AAAD/AAAA/5efof//////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7vH/5/L2/+34/P/p9fn/4+7y/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//////+fp6n/AAAA/wAAAP9JSUn/ZGRk/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9YWFj/Y2Nj/19fX/8FBQX/AAAA/wAA
        APoAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoQAAAP8AAAD/LDAx/7zK
        zv/AztL/pK+z/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/56qrv+hrbH/xdDU/+Tv8//v+v7/5/L2/+Hs
        8P/i7fH/4u3x/+Lt8f/i7fH/4ezw//T7/f/i6ez/DQ4O/wAAAP8AAAD/VFRU/2hoaP9XV1f/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/Wlpa/2lpaf8XFxf/AAAA/w0ODv/j8fX/8v3//+Lt8f/i7fH/3+vv/+fy
        9v////////////r////m8vT/8f3/////////////5/L2/9/r7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f//////maGk/wAAAP8AAAD/S0tL/2NjY/9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZ
        Wf9YWFj/XFxc/21tbf8iIiL/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAATQAAAP8AAAD/Jykq/7/N0f+8ys7/o6+z/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/52p
        rf+ptbn/2uXp//D7///o8/f/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f7PD//////56o
        rP8AAAD/AAAA/xkZGf9qamr/ZWVl/1hYWP9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2xsbP9JSUn/AAAA/wAA
        AP9AQ0T//////+Xx9v/h7PD/4Ozw////////////sLm5/2BnYv8rMiT/ERcI/xkhD/9KUkX/nqan////
        ///2////3urv/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////5KZnP8AAAD/AAAA/0xMTP9jY2P/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/2tra/8vLy//AAAA/wAAAP8AAAD/AAAA0wAA
        ABwBAQEAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOwAAAD/CQoK/7G9wv/AztL/o6+z/6ez
        t/+ns7f/p7O3/6ezt/+ns7f/qLS4/52prf+rt7v/5O/z/+75/f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+n0+P//////MDM0/wAAAP8AAAD/HR0d/2BgYP9sbGz/Xl5e/1lZ
        Wf9ZWVn/WFhY/2RkZP9jY2P/Dw8P/wAAAP8AAAD/rri8///////f6u7/5O/0///////M1Nb/PEI4/wAA
        AP8AAAv/KhlW/1Y9k/9GMHn/AAAJ/wAAAP9NU0v//P////3////e6/D/4u3x/+Lt8f/i7fH/4u3x////
        //+psbT/AAAA/wAAAP9QUFD/YmJi/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2xs
        bP9LS0v/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADrAQEBNAABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGQAAAD/CgsL/4aQk//G1Nn/pLC0/6ezt/+ns7f/p7O3/6ezt/+ns7f/qLS4/6CssP+ksLT/4Ozw/+34
        /P/h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6+///////9DY
        2v8AAAD/AAAA/wAAAP8JCQn/PDw8/2BgYP9nZ2f/aGho/2xsbP9oaGj/Hh4e/wAAAP8AAAD/REpM////
        ///l8fX/5PD0//////+vtrj/AAAA/wAAAP9sUqr/qYX//7aQ//+3kP//upL//6yJ//9tV6T/AAAA/ycu
        Jf/o7/L/+////9/q7//i7fH/4u3x/+Hs8P/9////v8jM/wAAAP8AAAD/Wlpa/15eXv9ZWVn/WVlZ/1lZ
        Wf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2ZmZv9bW1v/BwcH/wAAAP8AAAD/LC8x/wsNDf8AAAD/AAAA/wAA
        APkAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnAAAA/yYoKf/O3OH/rru//6axtf+ns7f/p7O3/6ez
        t/+ns7f/p7O3/6azt/+dqq7/z9re//D7///h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Dt8v//////yc/Q/x4gIf8AAAD/AAAA/wAAAP8NDQ3/ISEh/ykp
        Kf8sLCz/ERER/wAAAP8AAAD/NDg5//D09v/1+/3/3uvw//////+lrKz/AAAA/xsUM/+cfO3/u5P//6OA
        //+bev//mnn//5l5//+if///wJb//4xu1/8AAAD/LzUv///////r9vn/4ezw/+Lt8f/i7fH/8/7//9nm
        6v8ICAj/AAAA/1NTU/9nZ2f/WFhY/1lZWf9ZWVn/WVlZ/1lZWf9ZWVn/V1dX/2dnZ/9lZWX/Dw8P/wAA
        AP8AAAD/MjY4///////Cycz/AAAA/wAAAP8AAAD/AAAA1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAA6gAA
        AP8DAwP/b3d6/9Pi5/+rt7v/pbG1/6ezt/+ns7f/p7O3/6ezt/+fq6//tsLG/+v2+v/k7/P/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/4Ozw////
        ///j6+3/YGNk/wICAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/PD4///L7/P//////2+jt//3/
        ///U29//AAAA/yUaSf+3kv//sIr//5l4//+bev//m3r//5t6//+bev//mnr//5p5//+/lv//blW5/wAA
        AP+Ejon//////+Ds8f/i7fH/4u3x/+by9//7////NTg5/wAAAP8hISH/bGxs/2FhYf9YWFj/WVlZ/1lZ
        Wf9XV1f/XV1c/2xsbP9hYWH/Hh4e/wAAAP8AAAD/LjIz//f9///9/////////52kpv8AAAD/AAAA/wAA
        AP8AAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACMAAADnAAAA/wAAAP9udnj/ytnd/6+7v/+lsbT/p7O3/6ez
        t/+ns7f/m6er/8fT1//w+v7/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/d6u//+P/////////M1tn/goiL/1RVVv8kJib/AAAA/wcH
        CP83Ojr/k5qc//j////5////3erv/+f0+P//////Pkc3/wAAB/+tiP//rIf//5l4//+bev//m3r//5t6
        //+bev//m3r//5t6//+bev//nXv//8CX//8mGUr/AAEA/+vz9//x+vz/4u3x/+Lt8f/h7PD//////3iA
        g/8AAAD/AAAA/ysrK/9jY2P/a2tr/2ZmZv9lZWX/bW1t/2RkZP88PDz/CQkJ/wAAAP8AAAD/Njo8//b8
        /f//////3urv/+Xw9P//////g4yO/wAAAP8AAAD/AAAA/gAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAA
        ANoAAAD/AAAA/1ddX//K2d3/rru//6Wxtf+ns7f/p7O3/52prf+9yc3/8Pv//+Pu8v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Ds
        8P/i7vL/+v//////////////5/P3/8fR1P/P2d3/9P/////////s+Pz/3+rv/+Hs8P/+////wczQ/wAA
        AP9TPJn/vZX//5l4//+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5p5//+viP//j3Lq/wAA
        AP+CjIn//////+Hs8P/i7fH/4u3x//L6/P/m7e//CQkK/wAAAP8AAAD/FBQU/zg4OP9HR0f/SEhI/z0+
        Pv8UFBT/AAAA/wAAAP8AAAD/SEtM//j+////////3urv/+Lt8f/g6+//7Pb6//////88QEH/AAAA/wAA
        AP8AAACvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAEBERABQVFgAAAAAAAAAAAAAAAAAAAAAAAAAAoQAAAP8AAAD/U1pc/7XCxv+ruLz/p7O3/6ez
        t/+lsbX/oKyw/9Db3//u+f3/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+7z/+35/f/5////9v///+n0
        +f/h7PD/4u3x/+Lt8f/l8fX//////0xVRf8AAAD/oH3//6WC//+bev//m3r//5t6//+bev//m3r//5t6
        //+bev//m3r//5t6//+bev//nHr//7SQ//8PCCD/HycU//3////m8vf/4u3x/+Lt8f/f7PD//////7rD
        xf8YGhr/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP87PT3/lZuc//3////5////3urv/+Lt
        8f/i7fH/4u3x/9/q7///////2uTo/wQEBP8AAAD/AAAA/wAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUWFgAcHyAAAAAAAAAAAAAAAAAAAAAAAwAA
        AIkAAAD/AAAA/wAAAP+otLj/s8DE/6ezt/+ns7f/qLS4/6CssP+hrrL/3+ru/+r1+f/h7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8f3//+Hu8f8AAgD/KBhT/7yU
        //+aef//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5h4//+/lf//VT6J/wAA
        AP/U4eX/9P///+Lt8f/i7fH/4ezw/+Dt8f//////3+rt/52kpv9lamz/RUhJ/zc6O/9AREX/aG1v/46W
        mP+9xsn/+v/////////q9vr/3urv/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4e7z//////9lamz/AAAA/wAA
        AP8AAACXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFRUAGx0eAAAAAAAAAAAEAAAAcgAAAPIAAAD/AAAA/wEBAf9mbXD/tsPI/6m1uf+ns7f/p7O3/6ez
        t/+ptbn/lKGl/665vf/p9Pj/5O/z/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//j////Dzs//AAAA/2JKqv+1jv//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5t6
        //+bev//m3r//5p5//+if///rYn//z0vnf8AAAD/sLm3///////i7fH/4u3x/+Lt8f/h7PD/4Ovv//L+
        //////////////7////3////+v///////////////f///+fz9//g7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Hs8P//////tcDE/wAAAP8AAAD/AAAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhMUABgaGzcAAACFAAAA4AAAAP8AAAD/AAAA/y8y
        M/+apaj/ydfc/6i0uP+msrb/p7O3/6ezt/+ns7f/nKmt/6aytv/G0dX/4+7y/+Tv8//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/6////ucPC/wACAP92W8f/roj//5t6
        //+bev//m3r//5t6//+bev//m3r//5t6//+bev//m3r//5p5//+de///wZb//1lJ4/8AAoX/AAAA/5ih
        mf//////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/m8fX/6PP3/+fy9v/j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/7fn8/+73+v8jJSb/AAAA/wAA
        AP8AAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC
        AoMCAgL/AAAA/wAAAP8AAAD/HyEi/3uEhv+/zdH/v8zR/6Wxtf+msrb/p7O3/6i0uP+lsbX/maaq/7K+
        wv/j7vL/7/r+/+Pu8v/h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/+////7jCwf8AAAD/aE6x/7CK//+bev//m3r//5t6//+bev//m3r//5t6//+bev//mnr//5t6
        //+ohP//vpT//3lh5v8DB6L/ERCV/wAAAP+Wn5b//////+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Ht8f//////YWZn/wAAAP8AAAD/AAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADXAAAA/wAAAP8fISL/bHR2/7O/xP/J19z/rLi8/6Wx
        tf+ns7f/p7O3/6i0uP+lsbX/m6er/7rGyv/q9fn/6/b6/+Hs8P/i7fH/4u3x/uLt8f3i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//f////G0dH/AAIA/19GpP+wi///m3r//5t6
        //+bev//m3r//5t6//+de///oH7//7CK//+2j///n337/1lIzv8DCJf/CAun/xQRj/8AAAD/r7iy////
        ///i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////4qRk/8AAAD/AAAA/wAA
        AGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzQAA
        AP8GBgb/oq6y/9bl6v+wvcH/pLC0/6ezt/+ns7f/p7O3/6ezt/+msrb/mqer/8DM0P/w+v7/6PL2/+Hs
        8P/i7fH/4u3x/+Lt8f7i7fH94u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/0////0t3e/wAAAP9iSKL/y5///6+J//+uif//roj//7GK//+0jf//rYj//6aC//98Y+f/STzE/x0b
        qP8AApH/DA6c/xgYs/8LCYT/BAMD/8TOyf/6////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//////+wuLv/AAAA/wAAAP8AAACTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAAAD/Jikq/7rHzP+suLz/p7O3/6ezt/+ns7f/p7O3/6ez
        t/+otLj/m6er/7rGyv/u+f3/5/L2/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PH/5vL2/+/7
        ///3//////////////////////////H9///k7/T/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8/7//9fi5P8FBgD/PCuA/41w7/96Yej/fGPp/35k
        6f92XuT/XkzU/zwzvP8rJq7/CAua/wAAj/8IC5n/FRWi/xYWo/8VFrX/BQN7/wsJCP/Q2t3/9f///+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/8////vcbK/wAAAP8AAAD/AAAAqgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLAAAA/zE0
        Nf+6x8z/qra6/6ezt/+ns7f/p7O3/6ezt/+otLj/nqqu/6y3u//p9Pj/6fT4/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4ezw/+Ds8P/4//////////z////j7vL/z9nc/7nCxf+rs7b/pa6x/7S9wP/f6u7/////////
        ////////+v///+Xw9P/g6/D/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+v2
        +//t+vz/LC4Y/wAASf8GC7f/CAua/wkMm/8KDZr/BQmX/wADkv8AA5L/BAiY/xESn/8WFqP/FRWi/xUV
        ov8VFaL/FxfA/wAAUP8fHRL/7PX8/+z5+//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/8////9nk6P8ODw//AAAA/wAAALkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAP8wMzT/usfL/6u2uv+ns7f/p7O3/6ezt/+ns7f/pbG1/6Cs
        sP/V4eX/7fj8/+Hs8P/i7fH/4u3x/+Lt8f/h7PD/3+vv//r/////////1+Di/4OJiv9FSUn/JCYn/wkJ
        Cf8AAAD/AAAA/wAAAP8AAAD/FhgY/0ZISf9rb3D/m5+h/8nS1v//////+v///97q7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/m8fb//P///z1BKP8AADr/HRza/xUWu/8VFbr/FRW8/xcX
        vv8ZGb//GhnA/xkZv/8ZGb//GRm//xkZv/8bGr//GRnB/yMi1/8AABD/V1tF///////i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//L////Z5Of/EhIS/wAAAP8AAAC2AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALcAAAD/Jyor/7bD
        x/+st7z/p7O3/6ezt/+ns7f/p7O3/56prf+4w8f/7Pf7/+Pu8v/i7fH/4u3x/+Lt8f/f6+//5/L2////
        ///c5Of/dnt7/woLC/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/UFRU/9zk5v//////4O3x/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/5O/z////
        //9VW1D/AAAA/woBUf8AAC//AAAu/wAANv8AADj/AAA6/wAAP/8AAEX/AABH/wAARv8AAEn/AQBF/wAA
        Qv8HBjj/AAAA/7S+vf/+////4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/z////2ePn/xESEv8AAAD/AAAAtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACYAAAA/w8QD/+jr7P/sr/D/6ezt/+ns7f/p7O3/6ezt/+cqKz/xtLW/+74
        /P/i7fH/4u3x/+Lt8f/e6u7/8vz///////+eo6X/ERIS/wAAAP8AAAD/AAAA/wAAAP8kJCT/Nzc3/wMD
        A/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8WFxj/x8vN///////h7fL/4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/4+/z/srvC/y4wKf8pKxT/LzEa/y0vF/8oKhL/ISML/xwd
        Bf8UFQD/DQ8A/w0OAP8HCAD/AQEA/wQFAP8QEQD/AAAA/zw/Pv/8////6fX5/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8v///9zm6/8QERH/AAAA/wAAALIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaQAAAP8AAAD/jZeb/7vI
        zf+ns7f/p7O3/6ezt/+msrb/nquv/9Db3//s9/v/4u3x/+Lt8f/f6u//8fj7//7///9mamv/AAAA/wAA
        AP8AAAD/AAAA/1dXV//AwMD////////////g4OD/SkpK/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+4vsH//////97r8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/3+zw//H9
        ///w+///7Pj7//L9///w/P//7Pj8/+n1+P/l8PP/2+bq/9Hb3//P2dz/zdjb/8nS1v/O2Nv/2OPn/8fR
        1P/g6+//7PX4/+Dr7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x//z/
        //+9x8r/AgIC/wAAAP8AAACxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAAD/AAAA/4ONkP/C0NT/prK2/6ezt/+ns7f/pbG1/6Wxtf/Z5Oj/6fT4/+Lt
        8f/h7PD/6PP3//////1aYGH+AAAA/wAAAP8AAAD/BwcH/7Gxsf//////////////////////////////
        //8tLS3/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQsM/+bs7v/4/f//4Ovv/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/j7vL/6vb6/+v2+//q9fn/6vX6/+v3+//t+Pz/7vr+//L9
        ///2////9v////f////4////9v////L+///5////7/v//9/r7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f//////q7S3/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAA/wAAAP9VXF7/xtXZ/6ay
        tv+ns7f/p7O3/6Gtsf+uur7/4u7y/+Xx9f/i7fH/4O3y//////qZoqXvAAAA/gAAAP8AAAD/DQ0N/9TU
        1P//////////////////////////////////////kpKS/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9QVlj//////+Xy9v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+/z/+Xw9P/o9Pj/6fX5/+fy
        9v/k7/P/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////5ui
        pf8AAAD/AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEAAAAP4AAAD/FBUW9rC+wfauu7//p7O3/6ezt/+eqq7/tsLG/+jz9//j7vL/4ezw//b8
        /v/f6Or9AwQE/QAAAP8AAAD/CwsL/9ra2v///////////////////////////////////////////3h4
        eP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/7vGyf/+////4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/m8fX/6PT4/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4Ovw/+bx
        9v/+////////////////////9f////L+///6///////////////w/f//4Ovw/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/h7PD/4ezw//////97gYT/AAAA/wAAAP8AAABzAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAABRAAAAgAAAALIAAAD+AAAA/wAAAPiJk5b4v8zR/6ez
        t/+ns7f/namt/8DLz//s9vr/4u3x/+Ds8f//////dXx+/wAAAP8AAAD/AAAA/8vLy///////////////
        /////////////////////////////+fn5/8PDw//AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9LT1H//////+Tx9f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4ezw/97q7//5/////v////b/////////4e3x/+Ds8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/f6/D/5fH1////////////vMXI/4GIiv9lamz/UFRV/zU4OP8zNjf/PkJD/1pe
        YP+Um57/5u7x///////x/P//4Ovw/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pv8///////VVla/wAA
        AP8AAAD/AAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAAJEAAAD4AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/Ulha/8jX3P+msrb/p7O3/52prf/J1dn/7ff7/+Lt8f/u+fz/6fL1/xYX
        GP8AAAD/AAAA/2lpaf//////////////////////////////////////3t7e/5SUlP8ZGRn/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DAwN/+Tx9f/z/f/+4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/9/s8P//////1+Dj/1VaW/84Ozz/nqao////
        ///i7vP/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/e6u///P////////+4vb7/RkhJ/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xsbG/+Lj5D/8/n7///////m8fX/3+vv/+Lt
        8f/i7fH/4u3x/+Lt8f/t+v7/7fj8/xwdHv8AAAD/AAAA/wAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAeAAAAPUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/x8iI/+5x8v/qre7/6ez
        t/+dqa3/yNTY/+33+//i7fH//v///8XQ1P8AAAD/AAAA/wcHB//x8fH/////////////////////////
        ///Jycn/WFhY/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+fp6r//////OLt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/9/r
        8P//////x83P/w8QEf8AAAD/AAAA/wAAAP++xcj/+/7//+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs
        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
        AP8AAAD/P0JD//n////o8/f/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g7fL//f///7W+
        wf9LT1H/HR4f/wAAAP8AAAD/f4SG//v////k7/P/4u3x/+Lt8f/f6u//+////+Pp6/8NDw//AAAA/wAA
        AP/Pz8//////////////////////////////////////////////////m5ub/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/9Xe4f/3/f7//////5mgo/8AAAD/AAAA/wAAAHMAAAAAAAAAAAAA
        AAAAAAAIAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9veHv/y9vf/52prf/R3OD/6/b6/+r1+f/z/f//LzEy/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FxcX/6CgoP/x8fH/////////////////////////
        //////////////////9bW1v/AAAA/wAAAP8AAAD/AAAA/0dLTP/+////5vH1/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/9/r8P///////////+Lu8f/Fz9L/xM7S//X////l7/P/4ezw/+Lt
        8f/i7fH/6vb4//////8uMjP/AAAA/wAAAP+1tbX/////////////////////////////////////////
        ///09PT/jIyM/wMDA/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9scnT///////3/
        //8yNDX/AAAA/wAAAP8AAAATAAAAAAAAAAAAAAAAAAAAlwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/JCco/77N0f+ns7f/1uHl/+r1
        +f/l8PT//v///0dLTP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ODg4/+zs
        7P///////////////////////////////////////////////////////////xoaGv8AAAD/AAAA/wAA
        AP9nbG7//////+Pu8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Xx
        9f/v+///+v////r////l8PT/4Ovw/+Lt8f/i7fH/4Ovw//////+eqKv/AAAA/wAAAP9bW1v/////////
        ////////////////////////9/f3/6CgoP9hYWH/FhYW/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/GRob///////N2d3/AAAA/wAAAP8AAACmAAAAAAAAAAAAAAAAAAAAFQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9+h4v/w9LX/9bi5v/p9Pj/4u3x//////9yeHr/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/NTU1////////////////////////////////////////////////////
        //////////////////9BQUH/AAAA/wAAAP8AAAD/kpmb///////i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+f0
        +P/9////LzEy/wAAAP8BAQH/3t7e////////////////////////////urq6/xkZGf8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP/q9vr/kJaZ/wAA
        AP8AAAD/AAAAKQAAAAAAAAAAAAAAAAAAAFQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ISQl/8DO0//d6u7/6PP3/+Lt
        8f//////iY+S/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/+3t7f//////////////
        ////////////////////////////////////////////////////////T09P/wAAAP8AAAD/AAAA/8HN
        0f/8////4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/8////yNTY/wAAAP8AAAD/GRkZ////////////////////
        ////////r6+v/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/xc7T/05SU/8AAAD/AAAAzgAAAAAAAAAAAAAAAAAAAAAAAACEAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+Nl5r//////+Pw9P/i7fH//////6u0uP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/3BwcP//////////////////////////////////////////////////////////////
        /////////////2xsbP8AAAD/AAAA/zs+QP/7////6PX5/+Lt8f/i7fH+4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH//////4KJ
        i/8AAAD/AAAA/xcXF///////////////////////nZ2d/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DQ4O/46Vl/8QERH/AAAA/wAA
        AFAAAAAAAAAAAAAAAAAAAAAAAAAAtQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/GRob/+72+P/z+vz/4ezw//H7
        /v/l8PP/ERIS/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+ysrL/////////////////////////
        //////////////////////////////////////////////////8+Pj7/AAAA/wAAAP/F0NP//////+Ds
        8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/5PD0//////9GSUv/AAAA/wAAAP8AAAD/pKSk////////////mpqa/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQkJ/zAwMP8rKyv/BgYG/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/x0fH/9NUVP/AAAA/wAAAPUAAAAGAAAAAAAAAAAAAAAAAAAAAAAAANwAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP99hIf//////+Ds8f/h7vL//////1dcXf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/s7Oz////////////////////////////////////////////////////////////////////
        ///Ozs7/AAAA/wAAAP9XXF7//////+Tx9v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+v4+//t+Pv/Jico/wAA
        AP8AAAD/AAAA/wAAAP9KSkr/MzMz/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9FRUX/p6en/+rq
        6v///////////+jo6P/MzMz/k5OT/y8vL/8AAAD/AAAA/wAAAP8PDxD/ERES/wAAAP8AAAC3AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADiAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DAwM/+nz9v/z+/3/4Ovv////
        //+tuLv/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/9vb2///////////////////////////////
        ////////////////////////////////////////JCQk/wAAAP8AAAD/1+Dh//r+///g7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/w/P//3+vw/xcZGf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/xEREf+8vLz/////////////////////////////////////////////////PDw8/wAA
        AP8AAAD/AQEB/wAAAP8AAAD/AAAARQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP91fH7//////+Dt8v/o9Pj//////zEzNP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP/b29v/////////////////////////////////////////////////////////////////WVlZ/wAA
        AP8AAAD/r7S3///////f7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/8Pv//+Hs8P8aGxz/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xMTE//e3t7/////////////////////////
        ///////////////////9/f3//////9LS0v8AAAD/AAAA/wAAAP8AAAD/AAAA4gAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAOEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/BgYG/9zl6P/1/P7/3+vv////
        //+4wsb/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/lpaW////////////////////////////////////
        ////////////////////////bW1t/wAAAP8AAAD/o6iq///////i7vL/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x//P+///Z4+f/EBER/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wMD
        A//b29v////////////////////////////////////////////////////////////y8vL/CQkJ/wAA
        AP8AAAD/AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP+Lk5b//////+Dr7//k8fX//////1xiZf8AAAD/AAAA/wAAAP8AAAD/AAAA/xMT
        E//c3Nz////////////////////////////////////////////Ozs7/SkpK/wAAAP8AAAD/nKCj////
        ///l8fT/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/z/v//2ubq/w4PD/8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9sbGz/////////////////////////////////////////
        ////////////////////////8/Pz/wwMDP8AAAD/AAAA/wAAAP8AAAAxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA3QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/RklK///////k8fX/4Ovv//H5
        +//+////PEBB/wAAAP8AAAD/AAAA/wAAAP8AAAD/BwcH/4iIiP/V1dX/////////////////1NTU/5qa
        mv9OTk7/AAAA/wAAAP8AAAD/rrS1///////l8PX/4Ovw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/5/L3//n9/v9AQ0T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/zMzM////
        /////////////////////////////////////////////////////////////9zc3P8DAwP/AAAA/wAA
        AP8AAADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANEAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP/CzdH//f///+Hs8P/e6u//+f////j///9sb3H/BgYG/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/yEhIP8uLi7/HBwc/wAAAP8AAAD/AAAA/wAAAP9AQUH/xs7P///////i7vL/4ezw/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P//////gYeJ/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/GRkZ////////////////////////////////////////////////////
        //////////////////+Xl5f/AAAA/wAAAP8AAAD/AAAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADJAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/UlZX///////i7/T/4u3x/97q
        7//x/P///////9Lc3v+KkJH/UVNU/w0NDf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/EhMT/2Nn
        aP+4v8H////////////f6/D/4ezw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH//P///8PO0v8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/1dXV///////////////
        ////////////////////////////////////////////////////////MDAw/wAAAP8AAAD/AAAA6wAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAugAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wgJCf/g7PD/9P3//+Lt8f/i7fH/4Ozw/+Ht8v/5///////////////W4OL/maCj/3B2
        eP9hZmj/h46Q/5adoP+krK//u8TH/9vm6v///////////+fz9//f6+//4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+j1+f/9////KSss/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP9ubm7/////////////////////////////////////////////////////////
        ////////n5+f/wAAAP8AAAD/AAAA/wAAAMUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AJ8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ho2Q///////h7PD/4u3x/+Lt
        8f/i7fH/4u3x/+Hs8P/j7/P/9f/////////////////////////////////////////y/v//4u3x/+Hs
        8P/i7fH/4u3x/OLt8fvi7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6/D//////6Osr/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ampq////////////////////
        ////////////////////////////////////////mZmZ/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAxAAA
        AA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/y8xMv/2/f//6PT4/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4+7y/+Pu
        8v/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+bx9f//////V11f/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/05OTv/////////////////////////////////////////////////19fX/ZWVl/wAA
        AP8AAAD/AQEB/wEBAf8AAAD/AAAA/wAAAP8AAADKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8dHx//8fz//+v2+v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//8vr8//3///9IS0z/AAAA/wAAAP8AAAD/AAAA/wAAAP8EBAT/rq6u////////////////////
        ////////6Ojo/6urq/9aWlr/ERER/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/bHN1///////j7vL/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/97q7//3/////////3+ChP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8tLS3/Z2dn/3Fxcf9FRUX/KSkp/wcHB/8AAAD/AAAA/wAAAP8eICH/BAQE/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FhcX/u309v7x+fv/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/3urv/+75/f//////0dbY/0dKS/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/yEiI/+jq67/TlFT/wICAv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AJMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/6ev
        sv//////3uvw/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/4e3x////////////rbS2/1NX
        Wf8hIyT/BwcH/wAAAP8AAAD/AgID/wAAAP8FBgb/LjAx/4uRlP//////tb3A/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/2RqbP//////5vL1/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/uLt8f/f6+//5/P3////////////5vL2/87Z3P/Fz9L/xM3R/8rU1//Gz9P/ztjb/+z5
        /f//////4ert/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/2Jnaf//////7vf6/9/r
        7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f7i7fH/4u3x/+Lt8f/h7PD/5O/z/+75
        /f/2////+v////r////4////+v////X////3/////////zAzNP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/2Noav//////8vv+/9/q7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k8fX//////19m
        aP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADHAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/3J2d///////8vv+/97q7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/f6/D//////7zHyv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAA
        AMoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FBQV/6Wu
        sf//////7vj8/97q7//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/5O/z/uTv8/7i7fH/4u3x/uLt8f7i7fH/4u3x/+Lt8f/i7fH/4u3x/uLt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs
        8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6+//9fz+//j+//8gIiP/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAdgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdQAAAPQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8ODxD/WF5g/6ezt//O3OH/2OTo/+/6///i7fH/4ezw/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Xw9P/r9vr/7Pf7/+jz9/3k7/P84ezw/+Lt
        8f7i7fH+4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hr7//f6u7/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6+//6vT4//////9sc3b/AAAA/wAAAP8AAAD/AAAA/wEBAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAXAAAAiwAAAPYAAAD/AAAA/wAAAP8AAAD/FhcY/zg8Pf9jam3/prG1/8rY3f+2w8f/mqWp/6Sw
        tP/X4ub/8Pr+/+jz9//h7PD/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/k7/P/6/b6/+75
        /f/k7/P/0t7i/8HN0f+tub3/ucTI/+Tv8//k7/P/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/5fH0//////+Lk5X/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABhAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjAAAA9wAAAP8LDAz/mKKm/7nG
        y/+8ys7/xdPX/7TBxv+lsbX/prK2/6i0uP+grLD/n6uv/8DLz//j7vL/7/n9/+z3+//s9vr/6/b6/+v2
        +v/r9vr/7/r/////////////9f///87Y3P/CzdH/rrq+/6CssP+Zpan/lKCk/8jU2P/q9fn/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4O3x////
        //+epaf/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAALwAAAD/CQoK/4mTlv/N3OH/y9rf/77M0f+1wsb/rru//6u3u/+ptbn/qbW5/6Wx
        tf+bqKz/qra6/8bS1v/V4OT/2ufr/+bz9//v/f//7vz//9zp7f+3wcX/eX6A/2txc/+sub3/nKis/6Cs
        sP+nsrb/mqer/7/Lz//w+///4+7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/h7PD/4uzw/+Lt8f/i7fH/3uvv///////L0tX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAA/wAAAP8AAAD/Ki0v/2Zt
        cP+Gj5L/nais/6+8wP+4xcr/vsvQ/8HP1P/D0dX/xNLW/73M0P+4xsv/sr/D/56qr/+FjpL/aXFz/0pQ
        U/8jJif/AAAA/wAAAP97hYj/u8jN/6i0uP+ns7f/oq6y/6azt//j7vL/6fP3/+Hs8P/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/q9fn/6PP3/+Dr7//i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Pu8v/g6+//3+ru/+Lu8v/i7fH/3erv//7////6////HiEi/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGoAAAD0AAAA/wAAAP8AAAD/AAAA/w0ODv8sLzD/Nzs9/zxAQf9GS03/TFJU/01T
        Vf9MUlP/RUlL/y0wMf8REhP/AAAA/wAAAP8AAAD/AAAA/wAAAP+AiY3/y9ne/6Svs/+ns7f/qLS4/5un
        q//BzND/7/r+/+Ds8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/u+f3/0t3h/8TQ1P/m8fX/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Lt
        8f/i7fH/3erv//7////9////OT5A/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACfAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAAIQAAADcAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAA/wAA
        AP9BRkf/zNrg/6m1uf+ns7f/p7O3/6Wxtf+irrL/2eTo/+r1+f/i7fH/4u7y/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4Ovw/+n0+P/1////1uHl/5ejp/+9yMz/7vn9/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/3erv///////6/v//PEBC/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMAAACQAAAAsgAAAMAAAADTAAAA3AAAANgAAADMAAAAzwAA
        ANAAAADHAAAAtAAAAJcAAAB/AAAA9gAAAP8EBQX/nqqu/7zKzv+lsbX/p7O3/6ezt/+eqq7/t8PH/+r1
        +f/j7vL/4ezw/+Hs8P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g6/D/4e3x///////6////wszQ/KCs
        sPybp6v/2eTo/+r1+f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/h7PD/3+vw////
        ///q7/H/MTU3/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAAP4AAAD/VVtc/8jX
        2/+msrb/p7O3/6ezt/+ns7f/nKis/8vW2v/u+f3/4u3x/+Hs8P/g6+//4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//7vn9///////Izs//RUlK/3mDhvmsub79q7e7/9/q7v/n8vb/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/h7PD/4O3x///////c4uT/ICMk/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAOkAAAD/DQ4O/6Svs/+5xsr/prK2/6ezt/+ns7f/pbG1/6Ovs//X4ub/6vX5/+Lt
        8f/i7fH/4u7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Dr8P/j7/T///////////+HjI7/AAAA/wYGB/y6x8z6prO3/6+7
        v//j7vL/5fD0/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/g6/D/5PD0///////DyMn/DxES/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAD/AAAA/1RaXP/E0tf/p7O3/6ez
        t/+ns7f/p7O3/6Gtsf+tub3/4u3x/+bw9P/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/9/r8P/8/////////8DG
        x/85Ozz/AAAA/wAAAP9nbnH+ytne/p6qrv+yvsL/5fD0/+Tv8//i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/f6+//7Pf6//////+mq63/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAAALAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADQAAAA/wIDAv+Zpaj/usjM/6aytv+ns7f/p7O3/6ezt/+dqq7/uMTI/+r1+f/j7vL/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/h7PH/3+vv//P+////////3OPl/2FjZP8AAAD/AAAA/wAAAP8AAAD/k56h/7vIzf+eqq7/tMDE/+fy
        9v/j7vL/4u3x/+Lt8f/i7fH/4u3x/+Hs8P/f6/D///////////+Hi43/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAABKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAA/wAAAP89QkL/xNPY/6i1uf+ns7f/p7O3/6ez
        t/+ns7f/nKmt/7vHy//r9fn/4+7y/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/f6u//7vn9///////w9vj/iY6P/wsMDf8AAAD/AAAA/wAA
        AP8AAAD/LTAx/73Kz/+qtrr/oKyw/7G9wf/l8PT/5fD0/+Lt8f/i7fH/4ezw/+Ds8P/1/////////9/k
        5v9PU1T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACgAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAA
        AP8AAAD/gYqN/8PR1v+msrb/p7O3/6ezt/+ns7f/p7O3/52prf+5xMj/6fT4/+Pu8v/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4ezw/+Hs8P/s+Pz///////n/
        //+Slpf/Hh8f/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/252ef/J2N3/pbG1/6SwtP+msrb/3Ofr/+n0
        +P/g6/D/4u7z//3/////////5+3w/4eKi/8JCwz/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAC0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMMAAAD/Gxwd/7TBxf+uu7//p7O3/6ezt/+ns7f/p7O3/6ez
        t/+hrbH/r7u//+Tv8//l8PT/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt8f/i7fH/4u3x/+Lt
        8f/g6/D/5vH2//7/////////9v///62ztP8yNDX/AAAA/wAAAP8AAAD/AAAA/wAAANUAAAC4AAAA/wAA
        AP+LlZn/vcrP/6ezt/+ns7f/nKis/8zX2//2///////////////N1Nf/cHR1/xUVFv8AAAD/AAAA/wAA
        AP8AAADAAAAANgAAAKQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADsAAAA/09U
        Vv/M2+D/pbG1/6ezt/+ns7f/p7O3/6ezt/+ns7f/oq6y/6q2uv/h7PD/5/L2/+Lt8f/i7fH/4u3x/+Lt
        8f/i7fH/4u3x/+Lt8f/i7fH/4+7y/+n0+P/6///////////////I0NP/en+A/zM1Nf8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAK4AAAAKAAAAqgAAAP8FBQX/rLi8/73Kzv+rt7v/sr/D/7jGy//N2+D/9f///8vS
        0/9hY2T/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB4AAAAAAAAAAAAAAAAAAAArwAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANEAAABEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAdAAAA/wAAAP85PT//x9Xa/83b4P+5xsv/r7u//666v/+suLz/p7O3/6ay
        tv+grLD/0Nzg//D7///j7vP/5fD0/+fz9//r9/v/8v7///v////////////////////3////ztjb/5GW
        mP9FSEj/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3AAAAFMAAAAAAAAAAAAAAOIAAAD/AwMD/36H
        iv/D0dX/t8TJ/6ezt/+GkJP/U1pc/ywvMP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKwAAAAtAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACIAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA6wAAAHsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQAAAP8AAAD/AAAA/yot
        Lv9weHv/laCj/667v/+wvMD/tsTI/8TS1//G1Nn/t8XK/8fU2f/////////////////5////7vr+/9vm
        6v/EztH/qbG0/4CHif9ZXV7/ODs8/wQEBP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADVAAAAcwAA
        AAIAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/MDQ1/yksLf8REhP/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADkAAAAmQAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkAAACZAAAA3AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAAC/AAAAZAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAcAAADRAAAA/wAAAP8AAAD/AAAA/wEBAf8cHh7/ICMj/y0wMf9LUFL/WWBi/1JY
        Wv9JT1H/U1ha/1ZaW/9KTk//P0JD/y0vL/8TFBT/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA2wAAAJ0AAABCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAN8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAK4BAQFUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAaQAAAIoAAACQAAAAeAAAAEgAAAAYAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAIgAAADeAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADsAAAAugAAAI8AAABhAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAALAQEBgAEBAcgAAADmAAAA7QAAAMoAAACWAAAAWgAAABsAAAAAAQEBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AAABzAAAAlwAAALYAAADNAAAA1AAAAOYAAAD7AAAA/wAA
        AP8AAAD/AAAA/gAAAPQAAADtAAAA1wAAAMAAAACkAAAAlgAAAG0AAAA7AAAACgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgADBQUAAAAABQAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABwAAAA0AAAAfAAAANgAAAEAAAABEAAAARQAAADoAAAAuAAAAJwAAABAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAACAgIAAwQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP////4AAAAAAAAAAAADAAD////wAAAAAAAA
        AAAABwAA////4AAAAAAAAAAAAAcAAP///4AAAAAAAAAAAAAPAAD///4AAAAAAAAAAAAADwAA///8AAAA
        AAAAAAAAAB8AAP//+AAAAAAAAAAAAAAfAAD///AAAAAAAAAAAAAAPwAA///gAAAAAAAAAAAAAD8AAP//
        wAAAAAAAAAAAAAB/AAD//4AAAAAAAAAAAAAAPwAA//+AAAAAAAAAAAAAAB8AAP//AAAAAAAAAAAAAAAP
        AAD//wAAAAAAAAAAAAAADwAA//4AAAAAAAAAAAAAAAcAAP/+AAAAAAAAAAAAAAADAAD//4AAAAAAAAAA
        AAAAAwAA///gAAAAAAAAAAAAAAEAAP//wAAAAAAAAAAAAAABAAD//wAAAAAAAAAAAAAAAQAA//wAAAAA
        AAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4
        AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAA
        AAD/+AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAA
        AAAAAAAA//gAAAAAAAAAAAAAAAAAAP/AAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAA/gAAAAAA
        AAAAAAAAAAEAAPgAAAAAAAAAAAAAAAABAADwAAAAAAAAAAAAAAAAAQAA4AAAAAAAAAAAAAAAAAMAAMAA
        AAAAAAAAAAAAAAADAACAAAAAAAAAAAAAAAAAAwAAgAAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAH
        AAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAA
        AAAAHwAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAPwAAAAAAAAAA
        AAAAAAAAAD8AAAAAAAAAAAAAAAAAAAB/AAAAAAAAAAAAAAAAAAAAfwAAAAAAAAAAAAAAAAAAAH8AAAAA
        AAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAAPwAAAAAAAAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAAAAAf
        AAAAAAAAAAAAAAAAAAAADwAAgAAAAAAAAAAAAAAAAA8AAIAAAAAAAAAAAAAAAAAHAADAAAAAAAAAAAAA
        AAAABwAAwAAAAAAAAAAAAAAAAAcAAOAAAAAAAAAAAAAAAAADAADwAAAAAAAAAAAAAAAAAwAA8AAAAAAA
        AAAAAAAAAAMAAPwAAAAAAAAAAAAAAAADAAD+AAAAAAAAAAAAAAAAAwAA/4AAAAAAAAAAAAAAAAMAAP/A
        AAAAAAAAAAAAAAADAAD/wAAAAAAAAAAAAAAABwAA/+AAAAAAAAAAAAAAAAcAAP/wAAAAAAAAAAAAAAAH
        AAD//gAAAAAAAAAAAAAADwAA////8AAAAAAAAAAAAA8AAP///+AAAAAAAAAAAAAfAAD////gAAAAAAAA
        AAAAHwAA////4AAAAAAAAAAAAD8AAP///8AAAAAAAAAAAAB/AAD////AAAAAAAAAAAAA/wAA////wAAA
        AAAAAAAAAf8AAP///4AAAAAAAABwAAP/AAD///+AAAAABgAA+AAP/wAA////gAAAAA4AA/wAH/8AAP//
        /4AAAAB+AA//gP//AAD////AAAAD/wB//////wAA////+AAAP//n//////8AAP////+AD///////////
        AAD//////////////////wAA//////////////////8AAP//////////////////AAD/////////////
        /////wAA//////////////////8AAP//////////////////AAD//////////////////wAA////////
        //////////8AAP//////////////////AAD//////////////////wAA//////////////////8AAP//
        ////////////////AAD//////////////////wAA//////////////////8AAP//////////////////
        AAD//////////////////wAA//////////////////8AAP//////////////////AAD/////////////
        /////wAA//////////////////8AAP//////////////////AAD//////////////////wAA////////
        //////////8AAP//////////////////AAA=
</value>
  </data>
</root>


================================================
File: PandaObfuscator/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("PandaObfuscator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("PandaObfuscator")]
[assembly: AssemblyCopyright("Copyright Â©  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("1f2982b5-80fc-408e-8ce6-1742dd230fd7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: PandaObfuscator/Properties/Resources.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PandaObfuscator.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PandaObfuscator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}



================================================
File: PandaObfuscator/Properties/Resources.resx
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>


================================================
File: PandaObfuscator/Properties/Settings.Designer.cs
================================================
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PandaObfuscator.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}



================================================
File: PandaObfuscator/Properties/Settings.settings
================================================
ï»¿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>


