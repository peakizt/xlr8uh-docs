Directory structure:
└── alxs009-panda-deobfuscator/
    ├── README.md
    ├── PandaDeobfuscator.sln
    └── PandaDeobfuscator/
        ├── App.config
        ├── Logger.cs
        ├── PandaDeobfuscator.csproj
        ├── Program.cs
        ├── Utils.cs
        ├── Dependency/
        ├── Properties/
        │   └── AssemblyInfo.cs
        └── Protections/
            ├── ITask.cs
            ├── De4dot/
            │   └── De4dotCleaner.cs
            ├── Melt/
            │   └── StringMelt.cs
            ├── Reference Proxy/
            │   └── RefProxy.cs
            └── String Decoder/
                └── StringDecoder.cs

================================================
File: README.md
================================================
# Panda Deobfuscator
Screenshot:
![alt-text](https://github.com/Alxs009/Panda-Deobfuscator/raw/master/Screen.png)
Support features:
- [x] String Encoder
- [x] Control Flow
- [x] String Melting
- [x] Reference Proxy
- [x] Mutation (Add, Sub)

No support.



================================================
File: PandaDeobfuscator.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29123.88
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "PandaDeobfuscator", "PandaDeobfuscator\PandaDeobfuscator.csproj", "{AC6A34F9-4269-4D00-B64C-4467C39BC856}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{AC6A34F9-4269-4D00-B64C-4467C39BC856}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AC6A34F9-4269-4D00-B64C-4467C39BC856}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{AC6A34F9-4269-4D00-B64C-4467C39BC856}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{AC6A34F9-4269-4D00-B64C-4467C39BC856}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {F09114AE-B124-4A7B-A813-B13F565BBB64}
	EndGlobalSection
EndGlobal



================================================
File: PandaDeobfuscator/App.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
</configuration>


================================================
File: PandaDeobfuscator/Logger.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PandaDeobfuscator
{
    class Logger
    {
        public static void Push(string message, TypeLine typeLine = TypeLine.NewLine)
        {
            switch (typeLine)
            {
                case TypeLine.Default:
                    Console.Write($"[{DateTime.Now}]: {message}");
                    break;
                case TypeLine.NewLine:
                    Console.WriteLine($"[{DateTime.Now}]: {message}");
                    break;
            }
        }
        public enum TypeLine
        {
            Default,
            NewLine
        }
    }
}



================================================
File: PandaDeobfuscator/PandaDeobfuscator.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{AC6A34F9-4269-4D00-B64C-4467C39BC856}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>PandaDeobfuscator</RootNamespace>
    <AssemblyName>PandaDeobfuscator</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="de4dot.blocks">
      <HintPath>Dependency\de4dot.blocks.dll</HintPath>
    </Reference>
    <Reference Include="dnlib">
      <HintPath>Dependency\dnlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Logger.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Protections\ITask.cs" />
    <Compile Include="Protections\Melt\StringMelt.cs" />
    <Compile Include="Protections\De4dot\De4dotCleaner.cs" />
    <Compile Include="Protections\Reference Proxy\RefProxy.cs" />
    <Compile Include="Protections\String Decoder\StringDecoder.cs" />
    <Compile Include="Utils.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: PandaDeobfuscator/Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using dnlib.DotNet.Writer;
using PandaDeobfuscator.Protections;
using PandaDeobfuscator.Protections.Melt;
using PandaDeobfuscator.Protections.De4dot;
using PandaDeobfuscator.Protections.ReferenceProxy;
using PandaDeobfuscator.Protections.StringDecoder;

namespace PandaDeobfuscator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Title = "Panda Deobfuscator - coded by Alxs009";
            ModuleDefMD moduleDefMD = null;
            Logger.Push("Input assembly: ", Logger.TypeLine.Default);
            string assembly = Console.ReadLine();
            try
            {
                moduleDefMD = ModuleDefMD.Load(assembly);
                Logger.Push($"Loaded assembly: {moduleDefMD.FullName}");
            }
            catch { Logger.Push("Failed load..."); return; }
            if (!moduleDefMD.GlobalType.NestedTypes.Any(x => x.Name.Contains("Panda")))
            {
                Logger.Push("Other obfuscator");
                goto delay;
            }
            var iTask = new List<ITask> { new De4dotCleaner(), new StringMelt(), new RefProxy(), new StringDecoder(), new De4dotCleaner() };
            foreach (var task in iTask)
                task.Execute(moduleDefMD);
            SaveModule(moduleDefMD);
        delay:
            Logger.Push("Done...");
            Console.ReadKey(true);
        }
        private static void SaveModule(ModuleDefMD moduleDefMD)
        {
            string fileName = Path.GetDirectoryName(moduleDefMD.Location) + "\\" + Path.GetFileNameWithoutExtension(moduleDefMD.Location) + "_deobfuscated" + Path.GetExtension(moduleDefMD.Location);
            moduleDefMD.Write(fileName, new ModuleWriterOptions { Logger = DummyLogger.NoThrowInstance /* No show error message */});
            Logger.Push($"Saved at: {fileName}");
        }
    }
}



================================================
File: PandaDeobfuscator/Utils.cs
================================================
ï»¿using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PandaDeobfuscator
{
    class Utils
    {
        public static void NopInstructions(params Instruction[] instructions)
        {
            foreach (var instruction in instructions)
                instruction.OpCode = OpCodes.Nop;
        }
    }
}




================================================
File: PandaDeobfuscator/Properties/AssemblyInfo.cs
================================================
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// Общие сведения об этой сборке предоставляются следующим набором
// набора атрибутов. Измените значения этих атрибутов для изменения сведений,
// связанные с этой сборкой.
[assembly: AssemblyTitle("PandaDeobfuscator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("PandaDeobfuscator")]
[assembly: AssemblyCopyright("Copyright ©  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Установка значения False для параметра ComVisible делает типы в этой сборке невидимыми
// для компонентов COM. Если необходимо обратиться к типу в этой сборке через
// из модели COM задайте для атрибута ComVisible этого типа значение true.
[assembly: ComVisible(false)]

// Следующий GUID представляет идентификатор typelib, если этот проект доступен из модели COM
[assembly: Guid("ac6a34f9-4269-4d00-b64c-4467c39bc856")]

// Сведения о версии сборки состоят из указанных ниже четырех значений:
//
//      Основной номер версии
//      Дополнительный номер версии
//      Номер сборки
//      Номер редакции
//
// Можно задать все значения или принять номера сборки и редакции по умолчанию 
// используя "*", как показано ниже:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]



================================================
File: PandaDeobfuscator/Protections/ITask.cs
================================================
ï»¿using dnlib.DotNet;

namespace PandaDeobfuscator.Protections
{
    interface ITask
    {
        void Execute(ModuleDefMD moduleDefMD);
    }
}



================================================
File: PandaDeobfuscator/Protections/De4dot/De4dotCleaner.cs
================================================
ï»¿using System;
using System.Linq;
using dnlib.DotNet;
using de4dot.blocks.cflow;

namespace PandaDeobfuscator.Protections.De4dot
{
    sealed class De4dotCleaner : ITask
    {
        public void Execute(ModuleDefMD moduleDefMD)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Logger.Push($"{nameof(De4dotCleaner)} working...");
            Console.ForegroundColor = ConsoleColor.Gray;

            foreach (var typeDef in moduleDefMD.GetTypes())
            {
                foreach (var methodDef in typeDef.Methods.Where(x => x.HasBody))
                {
                    new CflowDeobfuscator().Deobfuscate(methodDef);
                }
            }
        }
    }
}



================================================
File: PandaDeobfuscator/Protections/Melt/StringMelt.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace PandaDeobfuscator.Protections.Melt
{
    sealed class StringMelt : ITask
    {
        public void Execute(ModuleDefMD moduleDefMD)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Logger.Push($"{nameof(StringMelt)} working...");
            Console.ForegroundColor = ConsoleColor.Gray;

            int countFixed = 0;
            var junkMethod = new List<MethodDef>();
            foreach (var typeDef in moduleDefMD.GetTypes())
            {
                foreach (var methodDef in typeDef.Methods.Where(x => x.HasBody))
                {
                    var instructions = methodDef.Body.Instructions;
                    for (int i = 0; i < instructions.Count; i++)
                    {
                        if (instructions[i].OpCode == OpCodes.Call
                            && instructions[i].Operand is MethodDef refMethod && refMethod.ReturnType == moduleDefMD.ImportAsTypeSig(typeof(string)) && refMethod.IsStatic && refMethod.Body.Instructions.Count == 2)
                        {
                            instructions[i].OpCode = OpCodes.Ldstr;
                            instructions[i].Operand = refMethod.Body.Instructions.First().Operand.ToString();
                            junkMethod.Add(refMethod);
                            countFixed++;
                        }
                    }
                }
                foreach (var methodDef in junkMethod)
                    typeDef.Methods.Remove(methodDef);
                junkMethod.Clear();
            }
            Logger.Push($"{nameof(StringMelt)} fixed: {countFixed}");
        }
    }
}



================================================
File: PandaDeobfuscator/Protections/Reference Proxy/RefProxy.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace PandaDeobfuscator.Protections.ReferenceProxy
{
    sealed class RefProxy : ITask
    {
        public void Execute(ModuleDefMD moduleDefMD)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Logger.Push($"{nameof(RefProxy)} working...");
            Console.ForegroundColor = ConsoleColor.Gray;

            int countFixed = 0;
            var junkMethod = new List<MethodDef>();
            foreach (var typeDef in moduleDefMD.GetTypes())
            {
                foreach (var methodDef in typeDef.Methods.Where(x => x.HasBody))
                {
                    var instructions = methodDef.Body.Instructions;
                    for (int i = 0; i < instructions.Count; i++)
                    {
                        switch (instructions[i].OpCode.OperandType)
                        {
                            case OperandType.InlineMethod:
                                if (instructions[i].Operand is MethodDef refMethod && refMethod.Body.Instructions.Where(x => x.OpCode == OpCodes.Newobj).Any() && refMethod.HasReturnType && refMethod.IsStatic && refMethod.IsHideBySig)
                                {
                                    instructions[i].OpCode = OpCodes.Newobj;
                                    instructions[i].Operand = refMethod.Body.Instructions.Single(x => x.OpCode == OpCodes.Newobj).Operand;
                                    junkMethod.Add(refMethod);
                                    countFixed++;
                                }
                                else if (instructions[i].Operand is MethodDef setMethod && !setMethod.HasReturnType && setMethod.IsHideBySig && setMethod.Body.Instructions.Count == 4)
                                {
                                    instructions[i].OpCode = OpCodes.Stfld;
                                    instructions[i].Operand = setMethod.Body.Instructions.Single(x => x.OpCode == OpCodes.Stfld).Operand;
                                    junkMethod.Add(setMethod);
                                    countFixed++;
                                }
                                else if (instructions[i].Operand is MethodDef refsMethod && refsMethod.IsStatic && refsMethod.ReturnType == moduleDefMD.ImportAsTypeSig(typeof(int)))
                                {
                                    instructions[i].OpCode = OpCodes.Ldc_I4;
                                    instructions[i].Operand = refsMethod.Body.Instructions.First().GetLdcI4Value();
                                    junkMethod.Add(refsMethod);
                                    countFixed++;
                                }
                                break;
                        }
                    }
                }
                foreach (var methodDef in junkMethod)
                    typeDef.Methods.Remove(methodDef);
                junkMethod.Clear();
            }
            Logger.Push($"{nameof(RefProxy)} fixed: {countFixed}");
        }
    }
}



================================================
File: PandaDeobfuscator/Protections/String Decoder/StringDecoder.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace PandaDeobfuscator.Protections.StringDecoder
{
    sealed class StringDecoder : ITask
    {
        public void Execute(ModuleDefMD moduleDefMD)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Logger.Push($"{nameof(StringDecoder)} working...");
            Console.ForegroundColor = ConsoleColor.Gray;

            int countFixed = 0;
            foreach (var typeDef in moduleDefMD.GetTypes())
            {
                foreach (var methodDef in typeDef.Methods.Where(x => x.HasBody && x.Body.Instructions.Count > 3))
                {
                    var instructions = methodDef.Body.Instructions;
                    for (int i = 0; i < instructions.Count; i++)
                    {
                        /*
                           Call	class [mscorlib]System.Text.Encoding [mscorlib]System.Text.Encoding::get_UTF8()
                           Ldstr	"Base64"
                           Call	uint8[] [mscorlib]System.Convert::FromBase64String(string)
                           Callvirt	instance string [mscorlib]System.Text.Encoding::GetString(uint8[])
                         */
                        if (instructions[i].OpCode == OpCodes.Call
                            && instructions[i].Operand.ToString().Contains("Encoding::get_UTF8")
                            && instructions[i + 1].OpCode == OpCodes.Ldstr
                            && instructions[i + 2].OpCode == OpCodes.Call
                            && instructions[i + 3].OpCode == OpCodes.Callvirt)
                        {
                            string decryptedStr = Encoding.UTF8.GetString(Convert.FromBase64String(instructions[i + 1].Operand.ToString()));
                            instructions[i].OpCode = OpCodes.Ldstr;
                            instructions[i].Operand = decryptedStr;
                            Utils.NopInstructions(instructions[i + 1], instructions[i + 2], instructions[i + 3]);
                            countFixed++;
                        }
                    }
                }
            }
            Logger.Push($"Count decrypted strings: {countFixed}");
        }
    }
}


