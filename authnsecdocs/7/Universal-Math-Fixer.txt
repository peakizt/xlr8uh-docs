Directory structure:
└── alxs009-universal-math-fixer/
    ├── README.md
    ├── Program.cs
    ├── UniversalMaths.csproj
    ├── UniversalMaths.sln
    ├── packages.config
    └── Properties/
        └── AssemblyInfo.cs

================================================
File: README.md
================================================
# Universal-Math-Fixer
This calculator load all methods from mscorlib.dll and checks equivalence with the method from the instruction

How to use? 

1) Drag-on-Drop to UMF.exe
2) Check result



================================================
File: Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace UniversalMaths
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            var moduleDefMd = ModuleDefMD.Load(args[0]);
            var allMethods = LoadMethods();

            foreach (var typeDef in moduleDefMd.GetTypes()
                .Where(x => x.HasMethods))
            {
                foreach (var methodDef in typeDef.Methods
                    .Where(x => x.HasBody))
                {
                    var instructions = methodDef.Body.Instructions;
                    for (int i = 0; i < instructions.Count; i++)
                    {
                        if (instructions[i].OpCode == OpCodes.Call
                            && instructions[i - 1].OpCode == OpCodes.Ldc_R8
                            && instructions[i].Operand.ToString().Contains("Math::"))
                        {
                            var memberRef = instructions[i].Operand as MemberRef;
                            if (allMethods.Any(x =>
                                x.Item1 == memberRef.Name))
                            {
                                var resultMethod = allMethods.Find(x =>
                                    x.Item2.ToString() == memberRef.Signature.ToString()
                                        .Replace("System.", string.Empty)
                                        .Replace(" ", $" {memberRef.Name}")).Item2;
                                if (resultMethod != null)
                                {
                                    var invokedValue = resultMethod.Invoke(null,
                                        new object[] {(double) instructions[i - 1].Operand});

                                    instructions[i].OpCode = OpCodes.Ldc_R8;
                                    instructions[i].Operand = invokedValue;
                                    instructions[i - 1].OpCode = OpCodes.Nop;

                                    Console.WriteLine($"[+] Math::{resultMethod.Name} returned: {invokedValue}");
                                }
                            }
                        }
                    }
                }
            }

            moduleDefMd.Write(Path.GetDirectoryName(args[0]) + "\\" +
                              Path.GetFileNameWithoutExtension(args[0]) +
                              "_noMaths" + Path.GetExtension(args[0]));
            Console.WriteLine($"[+] Saved!");

            Console.ReadKey(true);
        }

        static List<Tuple<string, MethodInfo>> LoadMethods()
        {
            var sortedList = new List<Tuple<string, MethodInfo>>();
            var allMethods = typeof(Math).GetMethods()
                .Where(x =>
                    x.Name != "GetHashCode" && x.Name != "GetType"
                                            && x.Name != "ToString"
                                            && x.Name != "Equals")
                .ToList();

            foreach (var methodInfo in allMethods)
                sortedList.Add(new Tuple<string, MethodInfo>(methodInfo.Name, methodInfo));

            return sortedList;
        }
    }
}


================================================
File: UniversalMaths.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <ProjectGuid>{48E832BD-50A5-4EB7-903A-35D485105797}</ProjectGuid>
        <OutputType>Exe</OutputType>
        <AppDesignerFolder>Properties</AppDesignerFolder>
        <RootNamespace>UniversalMaths</RootNamespace>
        <AssemblyName>UniversalMaths</AssemblyName>
        <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
        <FileAlignment>512</FileAlignment>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
        <PlatformTarget>AnyCPU</PlatformTarget>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <OutputPath>bin\Debug\</OutputPath>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
        <PlatformTarget>AnyCPU</PlatformTarget>
        <DebugType>pdbonly</DebugType>
        <Optimize>true</Optimize>
        <OutputPath>bin\Release\</OutputPath>
        <DefineConstants>TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
    </PropertyGroup>
    <ItemGroup>
        <Reference Include="dnlib, Version=3.3.2.0, Culture=neutral, PublicKeyToken=50e96378b6e77999">
          <HintPath>packages\dnlib.3.3.2\lib\net45\dnlib.dll</HintPath>
          <Private>True</Private>
        </Reference>
        <Reference Include="System" />
        <Reference Include="System.Core" />
        <Reference Include="System.Data" />
        <Reference Include="System.Xml" />
    </ItemGroup>
    <ItemGroup>
        <Compile Include="Program.cs" />
        <Compile Include="Properties\AssemblyInfo.cs" />
    </ItemGroup>
    <ItemGroup>
      <None Include="packages.config" />
    </ItemGroup>
    <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
    <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
         Other similar extension points exist, see Microsoft.Common.targets.
    <Target Name="BeforeBuild">
    </Target>
    <Target Name="AfterBuild">
    </Target>
    -->

</Project>



================================================
File: UniversalMaths.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "UniversalMaths", "UniversalMaths.csproj", "{48E832BD-50A5-4EB7-903A-35D485105797}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{48E832BD-50A5-4EB7-903A-35D485105797}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{48E832BD-50A5-4EB7-903A-35D485105797}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{48E832BD-50A5-4EB7-903A-35D485105797}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{48E832BD-50A5-4EB7-903A-35D485105797}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal



================================================
File: packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="dnlib" version="3.3.2" targetFramework="net48" />
</packages>


================================================
File: Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("UniversalMaths")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("UniversalMaths")]
[assembly: AssemblyCopyright("Copyright Â©  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("48E832BD-50A5-4EB7-903A-35D485105797")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

