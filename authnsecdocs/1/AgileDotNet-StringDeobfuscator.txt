Directory structure:
└── waynebonc-agiledotnet-stringdeobfuscator/
    ├── README.md
    ├── AgileDotNet-StringDeobfuscator.sln
    ├── LICENSE
    └── AgileDotNet-StringDeobfuscator/
        ├── AgileDotNet-StringDeobfuscator.csproj
        ├── App.config
        ├── Program.cs
        ├── packages.config
        └── Properties/
            └── AssemblyInfo.cs

================================================
File: README.md
================================================
# Agile.NET String Deobfuscator

Quickly decrypts strings from Agile.NET (aka AgileDotNet, CliSecure) packed assemblies. Supports multiple modules.

<sup>Note: Due to anti tamper executable will no longer run. This can be removed with other tools.</sup>

## Compatibility

Tested on Agile.NET 6.4.x

## Credits
- [0xd4d](https://github.com/0xd4d) - dnlib
- [ribthegreat99OrN0P](https://github.com/ribthegreat99OrN0P) - heap preservation for Agile.NET + KoiVM virtualization



================================================
File: AgileDotNet-StringDeobfuscator.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.30104.148
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AgileDotNet-StringDeobfuscator", "AgileDotNet-StringDeobfuscator\AgileDotNet-StringDeobfuscator.csproj", "{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {5CFF9084-D633-41F2-8289-6BF72FD3C536}
	EndGlobalSection
EndGlobal



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2020-2021 Wayne Bonnici

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: AgileDotNet-StringDeobfuscator/AgileDotNet-StringDeobfuscator.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{0D802D0E-A9B8-46FD-9CC5-A7AB75A9C55A}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>AgileDotNet_StringDeobfuscator</RootNamespace>
    <AssemblyName>AgileDotNet-StringDeobfuscator</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="dnlib, Version=3.3.4.0, Culture=neutral, PublicKeyToken=50e96378b6e77999, processorArchitecture=MSIL">
      <HintPath>..\packages\dnlib.3.3.4\lib\net45\dnlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: AgileDotNet-StringDeobfuscator/App.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
</configuration>


================================================
File: AgileDotNet-StringDeobfuscator/Program.cs
================================================
ï»¿using dnlib.DotNet;
using dnlib.DotNet.Emit;
using dnlib.DotNet.Writer;
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace AgileDotNet_StringDeobfuscator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("----AgileDotNet (aka CliSecure) String Decryptor----\n\n");

            string path;
            if (args.Length == 1)
            {
                path = args[0];
            }
            else
            {
                Console.Write("Exe Path: ");
                path = Console.ReadLine();
            }

            // Some cleaning
            path = path.Replace("\"", "");

            try
            {
                if (string.IsNullOrEmpty(path) && !Path.GetExtension(path).ToLower().Equals(".exe"))
                {
                    throw new Exception("Enter a valid .exe path.");
                }

                // Load the assembly
                var assemblyDef = AssemblyDef.Load(path);
                var unsafeAssembly = Assembly.UnsafeLoadFrom(path);

                // Find the location where key is located
                TypeDef typeDef = null;
                assemblyDef.Modules.ToList().ForEach(x => typeDef = x.GetTypes().Where(y => y.Name.Equals("<AgileDotNetRT>")).FirstOrDefault());

                if (typeDef is null)
                {
                    throw new Exception("This does not appear to be an Agile.NET assembly.");
                }

                // Get Field where key is located
                var fieldDef = typeDef.Fields.ToList().Where(x => x.Name.Equals("pRM=")).FirstOrDefault();

                if (fieldDef is null)
                {
                    throw new Exception("Could not find byte[] pRM= key.");
                }

                // Store the key. If cannot obtain initial value, get from unsafe assembly (this is 99% of all cases as array is declared and assigned separately)
                byte[] key = fieldDef.InitialValue;

                if (key is null)
                {
                    var info = unsafeAssembly.ManifestModule.ResolveField(fieldDef.MDToken.ToInt32());

                    key = info.GetValue(null) as byte[];
                }

                int decryptCount = 0;

                assemblyDef.Modules.ToList().ForEach(x =>
                {
                    x.GetTypes().ToList().ForEach(y =>
                    {
                        y.Methods.ToList().ForEach(method =>
                        {
                            if (method.HasBody && method.Body.HasInstructions)
                            {
                                for (int i = 0; i < method.Body.Instructions.Count; i++)
                                {
                                    /*
                                        * String signature is;
                                        * i : ldstr [cryptic_string]
                                        * i + 1 : call string '<AgileDotNetRt>'::'oRM='(string)
                                        */

                                    if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr &&
                                        method.Body.Instructions[i + 1].OpCode == OpCodes.Call &&
                                        method.Body.Instructions[i + 1].Operand.ToString().Contains("oRM="))
                                    {

                                        // Store the 'encrypted' operand
                                        string operand = method.Body.Instructions[i].Operand.ToString();

                                        string decrypted = StringDecrypt(operand, key);

                                        // Replace with decrypted equivalent
                                        method.Body.Instructions[i].Operand = decrypted;

                                        // Remove the method call
                                        method.Body.Instructions[i + 1].OpCode = OpCodes.Nop;

                                        decryptCount++;

                                        // Compensate for call when a string is found
                                        i++;
                                    }
                                }
                            }
                        });
                    });
                });                    

                // Write the new PE with deobfuscated strings
                ModuleWriterOptions options = new ModuleWriterOptions(assemblyDef.ManifestModule);

                options.MetadataOptions.Flags = options.MetadataOptions.Flags | MetadataFlags.PreserveAll;

                // For Agile.NET and KoiVM virtualization - thanks to @ribthegreat99OrN0P
                options.MetadataOptions.PreserveHeapOrder(assemblyDef.ManifestModule, true);

                // Save the new PE
                string newFile = $"{Path.GetFileNameWithoutExtension(path)}-cleanstrings.exe";
                assemblyDef.Write($@"{Path.GetDirectoryName(path)}\{newFile}", options);

                Console.WriteLine($"Done...saved as {newFile}\nDecrypted: {decryptCount}\nPress any key to exit...");

                Console.ReadKey();
            }
            catch (Exception e)
            {
                Console.WriteLine($"Something went wrong...\nMessage: {e.Message}\n\n{e.StackTrace}");
            }
        }

        static string StringDecrypt(string operand, byte[] key)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                // Decrypt function used by obfuscator
                for (int i = 0; i < operand.Length; i++)
                {
                    sb.Append(Convert.ToChar(operand[i] ^ (char)key[i % key.Length]));
                }

                return sb.ToString();
            }
            catch
            {
                throw;
            }
        }
    }
}



================================================
File: AgileDotNet-StringDeobfuscator/packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="dnlib" version="3.3.4" targetFramework="net472" />
</packages>


================================================
File: AgileDotNet-StringDeobfuscator/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Resources;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AgileDotNet-StringDeobfuscator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("AgileDotNet-StringDeobfuscator")]
[assembly: AssemblyCopyright("Copyright Â© 2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("0d802d0e-a9b8-46fd-9cc5-a7ab75a9c55a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0")]
[assembly: AssemblyFileVersion("1.0")]
[assembly: NeutralResourcesLanguage("en")]


