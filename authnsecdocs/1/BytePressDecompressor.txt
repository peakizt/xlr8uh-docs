Directory structure:
└── ribthegreat99orn0p-bytepressdecompressor/
    ├── README.md
    ├── BytePressDecompressor.sln
    └── BytePressDecompressor/
        ├── App.config
        ├── BytePressDecompressor.csproj
        └── Program.cs

================================================
File: README.md
================================================
# BytePressDecompressor


Unpacks files compressed by BytePress(https://github.com/roachadam/bytepress)
 



================================================
File: BytePressDecompressor.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.28803.156
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BytePressDecompressor", "BytePressDecompressor\BytePressDecompressor.csproj", "{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {C207A2E9-F409-44D5-963D-2907990244BF}
	EndGlobalSection
EndGlobal



================================================
File: BytePressDecompressor/App.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
</configuration>


================================================
File: BytePressDecompressor/BytePressDecompressor.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6333BAD5-0131-475D-A7E2-D7A62B6B0E6B}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>BytePressDecompressor</RootNamespace>
    <AssemblyName>BytePressDecompressor</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>


================================================
File: BytePressDecompressor/Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace BytePressDecompressor
{
    class Program
    {
        public static Assembly asm;
        public static Assembly lib;
        public static byte[] decompressed;
        
        static void Main(string[] args)
        {
            asm = Assembly.LoadFile(args[0]);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Loaded!");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Is the library a custom name? Yes/No");
            string choice = Console.ReadLine();
            Console.WriteLine("Decompressing..");
            unpack(choice);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Decompresed!");
            
            File.WriteAllBytes(Path.GetFileNameWithoutExtension(args[0]) + "-decompressed.exe", decompressed);
            Console.WriteLine("Saved!");
            Console.ReadKey();
        }
        private static void unpack(string choice)
        {
           if (choice == "No")
           {
                stage1();
           }
           if (choice == "Yes")
            {
                Console.Clear();
                 Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Enter resource library name: ");
                string ln = Console.ReadLine();
                stage1custom(ln);

            }
            
        }
        private static byte[] Decompress(byte[] data, int compressionType)
        {
            MethodInfo method = Program.lib.GetType("bytepress.lib.Main").GetMethod("Decompress");
            return (byte[])method.Invoke(null, new object[]
            {
                data,
                compressionType
            });
        }
        private static byte[] Decompresscustom(byte[] data, int compressionType, string libname)
        {
            MethodInfo method = Program.lib.GetType(libname).GetMethod("Decompress");
            return (byte[])method.Invoke(null, new object[]
            {
                data,
                compressionType
            });
        }
        private static void stage1()
        {
            try
            {
                using (Stream manifestResourceStream = asm.GetManifestResourceStream("bytepress.lib.dll"))
                {
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        manifestResourceStream.CopyTo(memoryStream);
                        lib = Assembly.Load(memoryStream.ToArray());
                    }
                }
                using (Stream manifestResourceStream2 = asm.GetManifestResourceStream("data"))
                {
                    using (MemoryStream memoryStream2 = new MemoryStream())
                    {
                        manifestResourceStream2.CopyTo(memoryStream2);
                        byte[] array = Decompress(memoryStream2.ToArray(), 2);
                        if (array == null || array.Length == 0)
                        {
                            throw new Exception("Failed to decompress file");
                        }
                        decompressed = array;

                    }
                }

            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(ex.Message);
            }
        }
        private static void stage1custom(string libname)
        {
            try
            {
                using (Stream manifestResourceStream = asm.GetManifestResourceStream(libname))
                {
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        manifestResourceStream.CopyTo(memoryStream);
                        lib = Assembly.Load(memoryStream.ToArray());
                    }
                }
                using (Stream manifestResourceStream2 = asm.GetManifestResourceStream("data"))
                {
                    using (MemoryStream memoryStream2 = new MemoryStream())
                    {
                        manifestResourceStream2.CopyTo(memoryStream2);
                        string ac = libname.Replace(".dll", ".Main");
                        byte[] array = Decompresscustom(memoryStream2.ToArray(), 2, ac);
                        if (array == null || array.Length == 0)
                        {
                            throw new Exception("Failed to decompress file");
                        }
                        decompressed = array;

                    }
                }

            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(ex.Message);
            }
        }
    }
}


