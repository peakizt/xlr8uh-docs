Directory structure:
└── notprab-antidecompiler-cleaner/
    ├── README.md
    ├── AntiDecompiler Cleaner.csproj
    ├── AntiDecompiler Cleaner.sln
    ├── AntiDecompilerPhase.cs
    ├── AntiDecompilerUtils.cs
    ├── Program.cs
    └── .deepsource.toml

================================================
File: README.md
================================================
# AntiDecompiler-Cleaner

## What
This is made to clean the protection adds invalid code to the methods so that decompilers cannot interpret them.

## How
Drag and Drop your file in to AntiDecompiler Cleaner.exe file.

[Download Link](https://github.com/NotPrab/AntiDecompiler-Cleaner/releases)

## Why
Â¯\_(ãƒ„)_/Â¯

## Example of invalid code

``` csharp
/*
An exception occurred when decompiling this method (06000002)

ICSharpCode.Decompiler.DecompilerException: Error decompiling System.Void UnpackMe.Form1::Button1_Click(System.Object,System.EventArgs)
 ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDef methodDef) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 419
   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDef methodDef, Boolean optimize, DecompilerContext context) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 269
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable`1 parameters, MethodDebugInfoBuilder& builder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 112
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 88
   --- End of inner exception stack trace ---
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 92
   at ICSharpCode.Decompiler.Ast.AstBuilder.<>c__DisplayClass90_0.<AddMethodBody>b__0() in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstBuilder.cs:line 1519
*/;
```



================================================
File: AntiDecompiler Cleaner.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFrameworks>netcoreapp3.1;net48</TargetFrameworks>
    <RootNamespace>AntiDecompiler_Cleaner</RootNamespace>
    <Platforms>AnyCPU;x86</Platforms>
    <Version>1.0.0</Version>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>This programs remove an extra layer protection for .NET executeable of anti decompiler.</Description>
    <Copyright>Prab @2020</Copyright>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Program.AntideCompilerPhase.cs" />
    <Compile Remove="AntiDecompilerPhaseImpl.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="dnlib" Version="3.3.2" />
  </ItemGroup>

</Project>



================================================
File: AntiDecompiler Cleaner.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29926.136
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "AntiDecompiler Cleaner", "AntiDecompiler Cleaner.csproj", "{5A818388-C5FC-4E33-A386-F9EFD94584EC}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Debug|x86.ActiveCfg = Debug|x86
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Debug|x86.Build.0 = Debug|x86
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Release|Any CPU.Build.0 = Release|Any CPU
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Release|x86.ActiveCfg = Release|x86
		{5A818388-C5FC-4E33-A386-F9EFD94584EC}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {E6ACAD02-5819-403B-A5B8-0EAC51F2D84F}
	EndGlobalSection
EndGlobal



================================================
File: AntiDecompilerPhase.cs
================================================
ï»¿using System;
using dnlib.DotNet;

namespace AntiDecompiler_Cleaner {
    internal static class AntiDecompilerPhase {
        public static void Execute(MethodDef method) {
            AntiDecompilerUtils.CallSizeOfCalli(method); // thanks to CursedSheep
            AntiDecompilerUtils.CallUnaligned(method);
            AntiDecompilerUtils.CallConstrained(method);
        }
    }
}


================================================
File: AntiDecompilerUtils.cs
================================================
ï»¿using System;
using System.Linq;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace AntiDecompiler_Cleaner {
    public static class AntiDecompilerUtils {
        private static readonly OpCode[] List = {OpCodes.Call, OpCodes.Sizeof, OpCodes.Calli};

        internal static bool DetectCallSizeOfCalli(MethodDef method) {
            var body = method.Body.ExceptionHandlers;
            foreach (var exceptionHandler in body.ToArray())
                if (List.Contains(exceptionHandler.TryStart.OpCode) && exceptionHandler.TryStart.Operand == null)
                    return true;
            return false;
        }

        internal static bool DetectCallUnaligned(MethodDef method) {
            var instr = method.Body.Instructions;
            for (var i = 0; i < instr.Count; i++) {
                if (!instr[i].IsBr())
                    continue;
                if (instr[i + 1].OpCode.Code != Code.Unaligned)
                    continue;
                return true;
            }

            return false;
        }

        internal static bool DetectCallConstrained(MethodDef method) {
            var instr = method.Body.Instructions;
            for (var i = 0; i < instr.Count; i++)
                if (instr[i].IsBr() &&
                    instr[i + 1].OpCode == OpCodes.Constrained)
                    return true;

            return false;
        }

        // This method works perfect for most Confuserex modded ( invalid cctor , anti dnSpy )
        internal static void CallSizeOfCalli(MethodDef method) {
            var hasprotection = DetectCallSizeOfCalli(method);
            if (!hasprotection)
                return;

            var body = method.Body.ExceptionHandlers;
            foreach (var exceptionHandler in body.ToArray())
                if (List.Contains(exceptionHandler.TryStart.OpCode) && exceptionHandler.TryStart.Operand == null) {
                    var instr = method.Body.Instructions;
                    var endIndex = instr.IndexOf(exceptionHandler.TryEnd);
                    for (var i = 0; i < endIndex; i++) instr[i].OpCode = OpCodes.Nop;

                    body.Remove(exceptionHandler);
                }
        }

        // This method solve Unaligned tricks ( mostly used on DotnetSafer )
        internal static void CallUnaligned(MethodDef method) {
            var hasprotection = DetectCallUnaligned(method);
            if (!hasprotection)
                return;

            var instr = method.Body.Instructions;
            for (var i = 0; i < instr.Count; i++) {
                if (!instr[i].IsBr())
                    continue;

                if (instr[i + 1].OpCode.Code != Code.Unaligned)
                    continue;

                instr.RemoveAt(i + 1);
            }
        }

        // This method solve constrained tricks ( mostly used on DotnetSafer )
        internal static void CallConstrained(MethodDef method) {
            var hasprotection = DetectCallConstrained(method);
            if (!hasprotection)
                return;

            var instr = method.Body.Instructions;
            for (var i = 0; i < instr.Count; i++)
                if (instr[i].IsBr() &&
                    instr[i + 1].OpCode == OpCodes.Constrained)
                    instr.RemoveAt(i + 1);
        }
    }
}


================================================
File: Program.cs
================================================
ï»¿using System;
using dnlib.DotNet;
using dnlib.DotNet.Writer;

namespace AntiDecompiler_Cleaner {
    internal static class Program {
        private static void Main(string[] args) {
            Console.Title = "Anti Decompiler Cleaner - Prab ";
            Console.ForegroundColor = ConsoleColor.Yellow;
            ModuleDefMD module = null;

            try {
                module = ModuleDefMD.Load(args[0]);
                Console.WriteLine("[?] File Loaded: {0}", module);
                foreach (var dependencies in module.GetAssemblyRefs())
                    Console.WriteLine($"[?] Dependencies : {dependencies.Name}");
            }
            catch {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("[^] Drag n Drop ! ");
                Console.ReadKey();
                Environment.Exit(0);
            }

            foreach (var type in module.GetTypes())
                foreach (var method in type.Methods)
                    if (method != null && method.HasBody && method.Body.HasInstructions)
                        try {
                            AntiDecompilerPhase.Execute(method);
                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.WriteLine("[*] Cleaning method 0x{0:X2} {1}", method.MDToken.Raw, method.Name);
                        }
                        catch (Exception ex) {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine("[x] Failed to clean method {0}\n     {1}", method.Name, ex.Message);
                        }

            var savingPath = module.Kind == ModuleKind.Dll
                ? args[0].Replace(".dll", "-noAnti.dll")
                : args[0].Replace(".exe", "-noAnti.exe");
            if (module.IsILOnly) {
                var opts = new ModuleWriterOptions(module) {
                    MetadataOptions = {Flags = MetadataFlags.PreserveAll}, Logger = DummyLogger.NoThrowInstance
                };
                module.Write(savingPath, opts);
            }
            else {
                var opts = new NativeModuleWriterOptions(module, true) {
                    MetadataOptions = {Flags = MetadataFlags.PreserveAll}, Logger = DummyLogger.NoThrowInstance
                };
                module.NativeWrite(savingPath, opts);
            }

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("[+] Finished !\n[+] File Saved at : {0}", savingPath);
            Console.ReadLine();
        }
    }
}


================================================
File: .deepsource.toml
================================================
version = 1

[[analyzers]]
name = "csharp"
enabled = true

