Directory structure:
└── miso-xyz-dcnetstringdecryptor/
    ├── README.md
    ├── DCNetStringDecryptor-CSharp.sln
    └── DCNetStringDecryptor-CSharp/
        ├── DCNetStringDecryptor-CSharp.csproj
        ├── Program.cs
        └── Properties/
            └── AssemblyInfo.cs

================================================
File: README.md
================================================
# DCNetStringDecryptor
String Decryptor for DC.NET Protector (tested on v1.1.0.1)

# Notes
- The outputed strings doesn't fix any calls, they'll still be located in the `_0` class

# How to use
<pre>DCNETStringDecryptor.exe %ProtectedAssembly%
(you can add "-hideProcess" if you don't want the console window to be a mess)</pre>

# Screenshots
![encrypted](https://i.imgur.com/MfSbTsE.png)
![process](https://i.imgur.com/a0td1V5.png)
![decrypted](https://i.imgur.com/8Q6vW28.png)

# Credits
- dcsoft-yyf - <a href="https://github.com/dcsoft-yyf/DCNETProtector">Author of DC.NET Protector</a>
- 0xd4d (now wtfsck) - <a href="https://github.com/0xd4d/dnlib">dnlib</a>
- Reverse X Discord server



================================================
File: DCNetStringDecryptor-CSharp.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DCNetStringDecryptor-CSharp", "DCNetStringDecryptor-CSharp\DCNetStringDecryptor-CSharp.csproj", "{D7E1CB5E-81CA-409D-8149-0C33ED55105E}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|x86 = Debug|x86
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{D7E1CB5E-81CA-409D-8149-0C33ED55105E}.Debug|x86.ActiveCfg = Debug|x86
		{D7E1CB5E-81CA-409D-8149-0C33ED55105E}.Debug|x86.Build.0 = Debug|x86
		{D7E1CB5E-81CA-409D-8149-0C33ED55105E}.Release|x86.ActiveCfg = Release|x86
		{D7E1CB5E-81CA-409D-8149-0C33ED55105E}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal



================================================
File: DCNetStringDecryptor-CSharp/DCNetStringDecryptor-CSharp.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D7E1CB5E-81CA-409D-8149-0C33ED55105E}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>DCNetStringDecryptor_CSharp</RootNamespace>
    <AssemblyName>DCNetStringDecryptor-CSharp</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile>Client</TargetFrameworkProfile>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="dnlib">
      <HintPath>..\..\AikaDecrypter\AikaDecrypter\bin\Debug\dnlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
File: DCNetStringDecryptor-CSharp/Program.cs
================================================
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using dnlib.DotNet.Writer;
namespace DCNetStringDecryptor_CSharp
{
    class Program
    {
        private static int salt;
        static void Main(string[] args)
        {
            bool hideProcess = false;
            if (args.Contains("-hideProcess"))
            {
                hideProcess = true;
            }
            int stringPatchCount = 0;
            int stringFailedCount = 0;
            Console.Title = "DC.NET String Decryptor";
            Console.WriteLine("DC.NET String Decryptor by misonothx | sinister.ly <3");
            Console.WriteLine(" |- https://github.com/miso-xyz/DCNetStringDecryptor");
            Console.WriteLine(" |- https://github.com/dcsoft-yyf/DCNETProtector");
            Console.WriteLine();
            ModuleDefMD asm = ModuleDefMD.Load(args[0]);
            List<byte[]> vars = new List<byte[]>();
            Console.ForegroundColor = ConsoleColor.Yellow;
            if (!hideProcess)
            {
                Console.WriteLine("Retrieving encrypted bytes...");
            }
            Console.ForegroundColor = ConsoleColor.Green;
            foreach (var t_ in asm.Types)
            {
                if (t_.Namespace.Contains("_DC"))
                {
                    if (t_.Name.Contains("BytesContainer"))
                    {
                        foreach (var fields in t_.Fields)
                        {
                            if (fields.FieldType.TypeName.ToLower().Contains("_data"))
                            {
                                if (!hideProcess)
                                {
                                    Console.ForegroundColor = ConsoleColor.Green;
                                    Console.WriteLine("[Source Bytes]: '" + fields.Name + "' saved in memory...");
                                }
                                vars.Add(fields.InitialValue);
                            }
                        }
                    }
                    else
                    {
                        foreach (var methods in t_.Methods)
                        {
                            if (methods.Name == "dcsoft")
                            {
                                var intList = new List<int>();
                                foreach (Instruction inst in methods.Body.Instructions)
                                {
                                    if (inst.OpCode.Equals(OpCodes.Ldc_I4))
                                    {
                                        intList.Add(int.Parse(inst.Operand.ToString()));
                                    }
                                }
                                try
                                {
                                    salt = intList[1];
                                    if (!hideProcess)
                                    {
                                        Console.ForegroundColor = ConsoleColor.Green;
                                        Console.Write("Found Salt!");
                                        Console.ForegroundColor = ConsoleColor.Magenta;
                                        Console.WriteLine(" (" + intList[1] + ")");
                                    }
                                }
                                catch (Exception)
                                {
                                    Console.ForegroundColor = ConsoleColor.Red;
                                    Console.WriteLine("Failed to retrieve salt!");
                                    Console.WriteLine();
                                    Console.WriteLine("The application cannot continue without being able to retrieve the salt!");
                                    Console.ResetColor();
                                    Console.Write("Press any key to exit...");
                                    Console.ReadKey();
                                    System.Environment.Exit(0);
                                }
                            }
                        }
                    }
                }
            }
            if (!hideProcess)
            {
                Console.WriteLine();
            }
            foreach (var t_ in asm.Types)
            {
                foreach (var methods in t_.Methods)
                {
                    if (t_.Namespace.Contains("_DC"))
                    {
                        if (methods.HasBody)
                        {
                            if (methods.Name == ".cctor")
                            {
                                CilBody fixedBody = new CilBody();
                                for (var x = 0; x < methods.Body.Instructions.Count; x++)
                                {
                                    switch (methods.Body.Instructions[x].OpCode.ToString())
                                    {
                                        case "ldc.i8":
                                            Instruction newInst = new Instruction(OpCodes.Ldstr, dcsoft(vars[0], long.Parse(methods.Body.Instructions[x].Operand.ToString())));
                                            Console.ForegroundColor = ConsoleColor.Yellow;
                                            if (!hideProcess)
                                            {
                                                Console.WriteLine("Decrypting '" + methods.Body.Instructions[x].Operand.ToString() + "'...");
                                            }
                                            try
                                            {
                                                fixedBody.Instructions.Add(newInst);
                                                fixedBody.Instructions.Add(methods.Body.Instructions[x + 2]);
                                                if (!hideProcess)
                                                {
                                                    Console.ForegroundColor = ConsoleColor.Green;
                                                    Console.Write("'" + methods.Body.Instructions[x].Operand.ToString() + "' decrypted!");
                                                    Console.ForegroundColor = ConsoleColor.Magenta;
                                                    Console.WriteLine(" (" + newInst.Operand.ToString() + ")");
                                                }
                                                stringPatchCount++;
                                            }
                                            catch (Exception)
                                            {
                                                if (!hideProcess)
                                                {
                                                    Console.ForegroundColor = ConsoleColor.Red;
                                                    Console.WriteLine("Failed to decrypt '" + methods.Body.Instructions[x].Operand.ToString() + "'");
                                                }
                                                stringFailedCount++;
                                            }
                                            if (!hideProcess)
                                            {
                                                Console.WriteLine();
                                            }
                                            break;
                                    }
                                }
                                fixedBody.Instructions.Add(new Instruction(OpCodes.Ret));
                                methods.Body = fixedBody;
                            }
                        }
                    }
                }
            }
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("######################################");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("  " + stringPatchCount + " Strings Patched");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("  " + stringFailedCount + " Strings Failed");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine();
            Console.WriteLine("######################################");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Saving '" + System.IO.Path.GetFileNameWithoutExtension(args[0]) + "-DCNetStringsFixed" + System.IO.Path.GetExtension(args[0]) + "...");
            ModuleWriterOptions moduleWriterOptions = new ModuleWriterOptions(asm);
            moduleWriterOptions.MetadataOptions.Flags |= MetadataFlags.PreserveAll;
            moduleWriterOptions.Logger = DummyLogger.NoThrowInstance;
            NativeModuleWriterOptions nativeModuleWriterOptions = new NativeModuleWriterOptions(asm, true);
            nativeModuleWriterOptions.MetadataOptions.Flags |= MetadataFlags.PreserveAll;
            nativeModuleWriterOptions.Logger = DummyLogger.NoThrowInstance;
            try
            {
                asm.Write(System.IO.Path.GetFileNameWithoutExtension(args[0]) + "-DCNetStringsFixed" + System.IO.Path.GetExtension(args[0]), moduleWriterOptions);
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("File successfully saved!");
                Console.ReadKey();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static string dcsoft(byte[] datas, long key) // Taken from src
        {
            int num = (int)(key & 0xFFFFL) ^ salt;
            key >>= 0x10;
            int num2 = (int)(key & 0xFFFFFL);
            key >>= 0x18;
            int num3 = (int)key;
            char[] array = new char[num2];
            int i = 0;
            while (i < num2)
            {
                int num4 = i + num3 << 1;
                array[i] = (char)(((int)datas[num4] << 8) + (int)datas[num4 + 1] ^ num);
                i++;
                num++;
            }
            return new string(array);
        }

    }
}



================================================
File: DCNetStringDecryptor-CSharp/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("DCNetStringDecryptor-CSharp")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("DCNetStringDecryptor-CSharp")]
[assembly: AssemblyCopyright("Copyright Â©  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("431805ae-3707-42ae-9180-6b83df0a37c3")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


