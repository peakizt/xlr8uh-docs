Directory structure:
└── hussaryn-net-reactor-string-cleaner-6.7.0.0/
    ├── README.md
    ├── DNR 6.7 Strings Remover.sln
    ├── LICENSE
    ├── DNR 6.7 Strings/
    │   ├── DNR 6.7 Strings.csproj
    │   ├── Program.cs
    │   ├── packages.config
    │   ├── Core/
    │   │   ├── Context.cs
    │   │   ├── CtxOptions.cs
    │   │   ├── StacktracePatcher.cs
    │   │   └── StringsDecrypter.cs
    │   ├── Properties/
    │   │   └── AssemblyInfo.cs
    │   └── Utils/
    │       ├── ILogger.cs
    │       └── Logger.cs
    └── Images/

================================================
File: README.md
================================================
# NET Reactor String Cleaner 6.7.X.X (Use Cflow remover first)  

<p align="center">
  <img src="https://github.com/Hussaryn/NET-Reactor-String-Cleaner-6.7.0.0/blob/main/Images/Img.png?raw=true" />
</p>

## What is .NET Reactor?

.NET Reactor is a powerful code protection and software licensing system for software written for the .NET Framework, and supports all languages that generate .NET assemblies. 

## What is String Encryption?

String encryption makes it difficult for a hacker to understand your code and to attempt a code patch of your assembly, as he will be unable to identify the text of messages or other useful strings, making it much more difficult to identify where to patch your code. This feature has a built-in protection against assembly manipulation.

- Control Flow Remover for .NET Reactor 6.7.0.0: [Click me!](https://github.com/Hussaryn/NET-Reactor-Cflow-Cleaner-6.7.0.0)

---

## Showcase

> Before 

```C# 
public static void Main(string[] args)
{
	Console.WriteLine(rxJ1soFU9jN03iRO2i.xQI1in9X2(0));
	Console.ReadKey();
}
```
> After
```C#
public static void Main(string[] args)
{
    Console.WriteLine("Hello, type anything.");
    Console.ReadKey();
}
```

---



## Credits

- GitHub - [HoLLy-HaCKeR](https://github.com/HoLLy-HaCKeR) for StackTrace Harmony Patcher

<br>




================================================
File: DNR 6.7 Strings Remover.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DNR 6.7 Strings", "DNR 6.7 Strings\DNR 6.7 Strings.csproj", "{2C5695E9-5608-4F1A-B6A2-997DD336D148}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{2C5695E9-5608-4F1A-B6A2-997DD336D148}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2C5695E9-5608-4F1A-B6A2-997DD336D148}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2C5695E9-5608-4F1A-B6A2-997DD336D148}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2C5695E9-5608-4F1A-B6A2-997DD336D148}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2021 hussaryn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: DNR 6.7 Strings/DNR 6.7 Strings.csproj
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{2C5695E9-5608-4F1A-B6A2-997DD336D148}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>DNR</RootNamespace>
    <AssemblyName>DNR_6._7_Strings</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <LangVersion>8</LangVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="0Harmony, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null">
      <HintPath>..\packages\Lib.Harmony.2.0.4\lib\net472\0Harmony.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Colorful.Console, Version=1.2.15.0, Culture=neutral, PublicKeyToken=null">
      <HintPath>..\packages\Colorful.Console.1.2.15\lib\net461\Colorful.Console.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="dnlib, Version=3.3.2.0, Culture=neutral, PublicKeyToken=50e96378b6e77999">
      <HintPath>..\packages\dnlib.3.3.2\lib\net45\dnlib.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Core\Context.cs" />
    <Compile Include="Core\CtxOptions.cs" />
    <Compile Include="Core\StacktracePatcher.cs" />
    <Compile Include="Core\StringsDecrypter.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Utils\ILogger.cs" />
    <Compile Include="Utils\Logger.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
         Other similar extension points exist, see Microsoft.Common.targets.
    <Target Name="BeforeBuild">
    </Target>
    <Target Name="AfterBuild">
    </Target>
    -->
</Project>


================================================
File: DNR 6.7 Strings/Program.cs
================================================
ï»¿using System.Diagnostics;
using System.Drawing;
using Colorful;
using DNR.Core;
using DNR.Utils;

namespace DNR
{
    public static class Program
    {
        private static readonly string asciiArt = @"
        _________                __                 
        \_   ___ \  ____________/  |_  ____ ___  ___
        /    \  \/ /  _ \_  __ \   __\/ __ \\  \/  /
        \     \___(  <_> )  | \/|  | \  ___/ >    < 
         \______  /\____/|__|   |__|  \___  >__/\_ \
                \/                        \/      \/
                  .NET Reactor 6.7.0.0 Strings
                 By https://github.com/Hussaryn
                      Credits HoLLy-HaCKeR
         
        ";

        public static void Main(string[] args)
        {
            Console.Title = "DNR 6.7.0.0 Strings decrypter";
            Console.WriteLine(asciiArt, Color.IndianRed);

            var logger = new Logger();
            var stopwatch = Stopwatch.StartNew();

            if (args.Length < 1) {
                logger.Warning("Usage: DNR 6.7 Strings.exe <path>");
                Console.ReadLine();
                return;
            }

            StacktracePatcher.Patch();

            var options =
                new CtxOptions(
                    args[0],
                    logger);

            var ctx = new Context(options);
            
            logger.Warning("Use control flow remover first!");
            logger.Info("Executing memory patches...");
            StacktracePatcher.Patch();

            StringsDecrypter.Execute(ctx);
            ctx.Save();

            Console.WriteLine(string.Empty);

            logger.Success($"Decrypted {StringsDecrypter.DecryptedStrings} Strings!");
            logger.Success($"Saved in {ctx.Options.OutputPath}!");

            stopwatch.Stop();
            logger.Success($"Finished all tasks in {stopwatch.Elapsed}");
            Console.ReadKey();
        }
    }
}


================================================
File: DNR 6.7 Strings/packages.config
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Colorful.Console" version="1.2.15" targetFramework="net472" />
  <package id="Lib.Harmony" version="2.0.4" targetFramework="net472" />
  <package id="dnlib" version="3.3.2" targetFramework="net472" />
</packages>


================================================
File: DNR 6.7 Strings/Core/Context.cs
================================================
ï»¿using System.Reflection;
using dnlib.DotNet;
using dnlib.DotNet.Writer;

namespace DNR.Core
{
    public class Context
    {
        public Context(CtxOptions ctxOptions)
        {
            Options = ctxOptions;
            Module = ModuleDefMD.Load(Options.FilePath);
            Asm = Assembly.UnsafeLoadFrom(Options.FilePath);
        }

        public CtxOptions Options { get; }
        public ModuleDefMD Module { get; }
        public Assembly Asm { set; get; }

        public void Save()
        {
            var writerOptions = new ModuleWriterOptions(Module)
            {
                Logger = DummyLogger.NoThrowInstance,
                MetadataOptions =
                {
                    Flags = MetadataFlags.PreserveAll & MetadataFlags.KeepOldMaxStack
                }
            };

            Module.Write(Options.OutputPath, writerOptions);
        }
    }
}


================================================
File: DNR 6.7 Strings/Core/CtxOptions.cs
================================================
ï»¿using System.IO;
using DNR.Utils;

namespace DNR.Core
{
    public class CtxOptions
    {
        public CtxOptions(string filePath, ILogger logger)
        {
            Logger = logger;
            FilePath = filePath;
            OutputPath = Path.Combine(Path.GetDirectoryName(filePath)!,
                $"{Path.GetFileNameWithoutExtension(filePath)}-decrypted{Path.GetExtension(filePath)}");
        }

        public ILogger Logger { get; }
        public string FilePath { get; }
        public string OutputPath { get; }
    }
}


================================================
File: DNR 6.7 Strings/Core/StacktracePatcher.cs
================================================
ï»¿using System;
using System.Diagnostics;
using System.Reflection;
using HarmonyLib;

namespace DNR.Core
{
    // Credits: Holly https://github.com/HoLLy-HaCKeR/EazFixer/blob/master/EazFixer/StacktracePatcher.cs
    public static class StacktracePatcher
    {
        private const string HarmonyId = "DNR.stacktrace";
        private static Harmony _harmony;

        public static void Patch()
        {
            _harmony = new Harmony(HarmonyId);
            _harmony.PatchAll(Assembly.GetExecutingAssembly());
        }

        public static void UnPatch()
        {
            _harmony?.UnpatchAll(_harmony.Id);
            _harmony = null;
        }

        [HarmonyPatch(typeof(StackFrame), "GetMethod")]
        public class PatchStackTraceGetMethod
        {
            public static MethodInfo MethodToReplace;

            public static void Postfix(ref MethodBase __result)
            {
                if (__result.DeclaringType != typeof(RuntimeMethodHandle)) return;

                // just replace it with a method
                __result = MethodToReplace ?? MethodBase.GetCurrentMethod();
                Debug.WriteLine("[D] Patched stacktrace entry");
            }
        }
    }
}


================================================
File: DNR 6.7 Strings/Core/StringsDecrypter.cs
================================================
ï»¿using System;
using System.Linq;
using System.Reflection;
using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace DNR.Core
{
    public static class StringsDecrypter
    {
        public static int DecryptedStrings { get; private set; }

        public static void Execute(Context ctx)
        {
            var logger = ctx.Options.Logger;

            foreach (var typeDef in ctx.Module.GetTypes().Where(x => x.HasMethods && !x.IsGlobalModuleType))
            foreach (var methodDef in typeDef.Methods.Where(x => x.HasBody)) {
                var Instr = methodDef.Body.Instructions;

                methodDef.Body.SimplifyBranches();
                methodDef.Body.SimplifyMacros(methodDef.Parameters);
                
                for (var i = 0; i < Instr.Count; i++)
                    if (Instr[i].OpCode == OpCodes.Call && Instr[i].ToString().Contains("System.String") &&
                        Instr[i].Operand != null && Instr[i - 1].IsLdcI4()
                    )
                        try {
                            var ldcI4Arg = Instr[i - 1].GetLdcI4Value();
                            var DecMethod = (IMethod) Instr[i].Operand;
                            var decrypter =
                                ctx.Asm.ManifestModule.ResolveMethod((int) DecMethod.MDToken.Raw) as MethodInfo;

                            StacktracePatcher.PatchStackTraceGetMethod.MethodToReplace = decrypter;

                            var value = decrypter.Invoke(null, new object[] {ldcI4Arg});

                            logger.Success($"Restored string: {value} | ldc: {ldcI4Arg}");

                            Instr[i - 1].OpCode = OpCodes.Nop;
                            Instr[i].OpCode = OpCodes.Ldstr;
                            Instr[i].Operand = value.ToString();

                            DecryptedStrings++;
                        }
                        catch (Exception e) {
                            logger.Error(e.Message);
                        }
                
                methodDef.Body.OptimizeBranches();
                methodDef.Body.OptimizeMacros();
            }
        }
    }
}


================================================
File: DNR 6.7 Strings/Properties/AssemblyInfo.cs
================================================
ï»¿using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("DNR_6._7_Strings")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("DNR_6._7_Strings")]
[assembly: AssemblyCopyright("Copyright Â©  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("2C5695E9-5608-4F1A-B6A2-997DD336D148")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


================================================
File: DNR 6.7 Strings/Utils/ILogger.cs
================================================
ï»¿namespace DNR.Utils
{
    public interface ILogger
    {
        void Debug(string message);
        void Info(string message);
        void Warning(string message);
        void Error(string message);
        void Success(string message);
    }
}


================================================
File: DNR 6.7 Strings/Utils/Logger.cs
================================================
ï»¿using System.Drawing;
using Colorful;

namespace DNR.Utils
{
    internal class Logger : ILogger
    {
        private readonly StyleSheet _sheet;

        public Logger()
        {
            _sheet = new StyleSheet(Color.White);
            _sheet.AddStyle("(?<=\\[)\\-(?=\\])", Color.DarkGray);
            _sheet.AddStyle("(?<=\\[)\\*(?=\\])", Color.Cyan);
            _sheet.AddStyle("(?<=\\[)\\!(?=\\])", Color.Orange);
            _sheet.AddStyle("(?<=\\[)\\#(?=\\])", Color.Red);
            _sheet.AddStyle("(?<=\\[)\\+(?=\\])", Color.Lime);
            _sheet.AddStyle("(?<=^....)(.*)", Color.LightGray);
        }

        public void Debug(string message)
        {
            Log($"[-] {message}");
        }

        public void Info(string message)
        {
            Log($"[*] {message}");
        }

        public void Warning(string message)
        {
            Log($"[!] {message}");
        }

        public void Error(string message)
        {
            Log($"[#] {message}");
        }

        public void Success(string message)
        {
            Log($"[+] {message}");
        }

        private void Log(string message)
        {
            Console.WriteLineStyled(message, _sheet);
        }
    }
}


